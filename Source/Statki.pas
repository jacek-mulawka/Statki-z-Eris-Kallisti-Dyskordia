unit Statki;{18.Sty.2017}

  //
  // MIT License
  //
  // Copyright (c) 2017 Jacek Mulawka
  //
  // j.mulawka@interia.pl
  //
  // https://github.com/jacek-mulawka
  //


  // Wydanie 2.0.0.0 - aktualizacja GLScene z 1.6.0.7082 na 2.2 2023.


  // Kierunki wspó³rzêdnych uk³adu g³ównego.
  //
  //     góra y
  //     przód -z
  // lewo -x
  //     ty³ z
  //

  // K¹ty na oko³o statku.
  //
  //   przód
  // lewo
  //
  //     0
  // 90  A -90
  // 180 / -180
  //

  // Prêdkoœæ - przelicznik wynosi oko³o 8,34:
  //   60 km/h -> 60 * 8,34 * 0,01 = 5 (prêdkoœæ w grze)
  //   7 (prêdkoœæ w grze) -> 7 * 100 / 8,34 = 84 km/h
  //

  //
  // Hierarchia obiektów (Statki_Form.Gra_GLScene.Objects zmiana na Gra_Obiekty_GLDummyCube)
  //
  // Statki_Form.Gra_GLScene.Objects
  //   Gra_Obiekty_GLDummyCube
  //
  // TStatek.Owner = Gra_Obiekty_GLDummyCube
  //        .Parent = Gra_Obiekty_GLDummyCube
  //   toniêcie_gl_dummy_cube
  //        .Owner = TStatek
  //        .Parent = TStatek
  //   falowanie_gl_dummy_cube
  //        .Owner = TStatek
  //        .Parent = toniêcie_gl_dummy_cube
  //   punkty_¿ycia_gl_dummy_cube
  //        .Owner = TStatek
  //        .Parent = TStatek
  //   elementy kad³uba
  //        .Owner = falowanie_gl_dummy_cube
  //        .Parent = falowanie_gl_dummy_cube
  //   TTorpedy_Wyrzutnia.Owner = falowanie_gl_dummy_cube
  //                     .Parent = falowanie_gl_dummy_cube
  //                     .statek = TStatek
  //                     .elementy_wizualne_gl_dummy_cube.Owner = TTorpedy_Wyrzutnia
  //                     .elementy_wizualne_gl_dummy_cube.Parent = TTorpedy_Wyrzutnia;
  //                     .cel_linia.Parent := TStatek;
  //                     .celownik_linia.Parent := TTorpedy_Wyrzutnia;
  //                     .celownik_linia_bez_falowania.Parent := TStatek;
  //                     .celownik_linia__do_punktu_uzbrajania.Parent := celownik_linia;
  //                     .celownik_linia_bez_falowania__do_punktu_uzbrajania.Parent := celownik_linia_bez_falowania;
  //     TLufa.Owner = TTorpedy_Wyrzutnia
  //          .Parent = TTorpedy_Wyrzutnia.elementy_wizualne_gl_dummy_cube
  //          .dzia³o = TTorpedy_Wyrzutnia
  //          .statek = TStatek
  //          TLufa.Strza³
  //            Amunicja_Wystrzelona_Utwórz_Jeden( Gra_Obiekty_GLDummyCube, TLufa )
  //
  // TAmunicja.Owner = Gra_Obiekty_GLDummyCube - Po uzbrojeniu dla torpedy porusza siê w p³aszczyŸnie poziomej, w pozosta³ych przypadkach porusza siê jak amunicja.
  //          .Parent = TLufa, Gra_Obiekty_GLDummyCube (najpierw jest TLufa a w momencie jej opuszczenia nastêpuje zmiana rodzica na Gra_Obiekty_GLDummyCube)
  //          .statek = TStatek
  //   korpus_opadanie_obrót_gl_dummy_cube.Owner = TAmunicja
  //   korpus_opadanie_obrót_gl_dummy_cube.Parent = TAmunicja
  //   korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.Owner = korpus_opadanie_obrót_gl_dummy_cube
  //   korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.Parent = korpus_opadanie_obrót_gl_dummy_cube
  //
  // GLParticleFXRenderer1 - umieszczony na koñcu aby elementy gry nie przes³ania³y efektów.
  // Informacje_G³ówne_GLHUDText - umieszczony za GLParticleFXRenderer1 aby efekty nie przes³ania³y napisów na ekranie.
  //
  // Radar_GLWindowsBitmapFont - bez osobnego TGLWindowsBitmapFont dla radaru zawiesza siê IDE i gra.
  //
  // Typ obiektu 'podwozie' nie dzia³a zbyt dobrze, gdy¿ wykrywanie kolizji nie jest zawsze wystarczaj¹co precyzyjne (w kontekœcie dotykania 'pasa startowego' przez samolot).
  //
  // Dzia³anie pokoju rozmów nie uwzglêdnia uszkodzenia radia aby gracze mogli rozmawiaæ niezale¿nie od stanu swoich statków. Uszkodzenie radia nie wp³ywa na mo¿liwoœæ zak³ócania statków.
  //
  // Statystyki dla gracza maj¹cego lotniskowiec i samolot s¹ ³¹czone.
  //
  // Pozycji i iloœci chmur nie synchronizuje z klientami, gdy¿ klienci mog¹ mieæ ustawion¹ inn¹ 'rozdzielczoœæ' (iloœæ) chmur ze wzglêdu na wydajnoœæ
  //
  // Je¿eli usuwa siê z biblioteki odtwarzany dŸwiêk to pojawiaj¹ siê b³êdy dostêpu.
  //
  // Niektóre dŸwiêki nie chc¹ siê zapêtlaæ.
  //

  //  Wieloosobowoœæ bêdzie siê opiera³a chyba na tym, ¿e serwer bêdzie przelicza³ pociski, a klient tylko kopiowa³ obraz.
  //  Serwer otrzyma informacjê o strzale gracza i j¹ przetworzy (cel, konfiguracja strza³u)
  //  Informacje o ruchu gracza (klawisze ruchu) //????

  //????
  // Je¿eli falowanie jest aktywne klienci bardzo wolno dzia³aj¹ (wy³¹czenie tej opcji na serwerze usprawnia dzia³anie klientów), zw³aszcza gdy pojawia siê wystrzelona amunicja.
  // Chmury te¿ jakoœ spowalniaj¹ grê wieloosobow¹.

  // Je¿eli Fale_GLTerrainRenderer jest w hierarchii sceny pod Gra_Obiekty_GLDummyCube powoduje b³¹d tekstury wody (fal) ale gdy jest nad to zmienia wygl¹d kolorów.

  // xNx__Funkcja_Nieu¿ywana
  //   1_ComboBox.ItemIndex := 1; // Nie wywo³a 1_ComboBoxChange().

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ComCtrls, Vcl.Buttons, Vcl.Samples.Spin, Vcl.Grids,
  Vcl.CheckLst, Vcl.ImgList, System.ImageList, Vcl.ExtCtrls, Vcl.Menus, Vcl.StdCtrls, IdGlobal,

  IdTCPConnection, IdTCPClient, IdBaseComponent, IdComponent, IdCustomTCPServer, IdTCPServer,
  IdSocketHandle, IdUDPClient, IdUDPBase, IdUDPServer, IdCoder, IdCoder3to4, IdCoderMIME, IdContext,

  GLS.Objects, GLS.Scene, GLS.Coordinates, GLS.Navigator, GLS.Cadencer, GLS.BaseClasses, GLS.SceneViewer,
  GLS.AsyncTimer, GLS.GeomObjects, GLS.HUDObjects, GLS.BitmapFont, GLS.WindowsFont, GLS.SkyDome,
  GLS.TerrainRenderer, GLS.HeightData, GLS.HeightTileFileHDS, GLS.Collision, GLS.FireFX, GLS.ParticleFX,
  GLS.PerlinPFX, GLS.ThorFX, GLS.Material, GLS.SoundManager, Sounds.OpenAL,


  GLS.Color,
  GLS.RenderContextInfo,
  GLS.Texture, //???
  GLS.SpaceText,
  GLS.VectorGeometry,
  GLS.VectorTypes,

  IdIOHandler,
  IdSync,
  Xml.XMLIntf,

  Typy_Wspolne, Wyglad_Elementy, Klasy_Dodatkowe,

  Przechwytywacze_Klas; // Na samym koñcu.


type
    TAmunicja_Rodzaj_Zbiór = set of Typy_Wspolne.TAmunicja_Rodzaj;
  TAmunicja_Lot_Parabol¹_Etap = ( alpe_Brak, alpe_Wystrzelenie, alpe_Opadanie, alpe_Koñcówka_Zasiêgu, alpe_Cel_Naprowadzanie, alpe_Poni¿ej_Celu );
  TCelowanie_Tryb = ( ct_Brak, ct_Linia, ct_Odleg³oœæ, ct_Punkt );
  TDŸwiêk_Efekt_Rodzaj = ( der_Brak, der_Amunicja__Lot, der_Kotwica__Brak, der_Kotwica__Statek, der_Kotwica__Stop, der_Kotwica__W_Dó³, der_Kotwica__W_Górê, der_Lufa_Za³adowanie, der_Lufa_Za³adowanie__Du¿e, der_Silnik, der_SOS_Rozb³ysk, der_Syrena_Okrêtowa, der_Wiatr );
  TDŸwiêk_Komunikat_Rodzaj = ( dkr_Brak, dkr_Alarm_Torpedowy, dkr_Alarm_Torpedowy__Odleg³oœæ, dkr_Amunicja__Rodzaj, dkr_Amunicja__Zanurzenie_G³êbokoœæ_Zadana, dkr_Lotniskowiec_Katapulta_Gotowa, dkr_Naprawiono, dkr_Odnawianie_Zasobów_Zakoñczone, dkr_Prêdkoœæ, dkr_Pu³ap, dkr_Pu³ap__Zmiana, dkr_Skrêt, dkr_SOS_Pikanie, dkr_Start, dkr_Stop, dkr_Uszkodzenie, dkr_Zanurzenie, dkr_Zanurzenie__Zmiana, dkr_Zanurzenie_Pu³ap__Peryskopowe ); // dkr_Pu³ap, dkr_Zanurzenie - graczy zmienia ustawienia, dkr_Pu³ap__Zmiana, dkr_Zanurzenie__Zmiana statek zmieni³ pu³ap / zanurzenie o pewn¹ wartoœæ.
  TEfekt_Rodzaj = ( er_Brak, er_SOS, er_Trafienie_L¹d__Bez_Obra¿eñ, er_Trafienie_L¹d__Obra¿enia, er_Trafienie_Statek, er_Trafienie_Statek_Zatopienie, er_Trafienie_Woda, er_Wystrza³ );
  TGracz_Tryb = ( gt_Brak, gt_Samolot, gt_Statek, gt_Widz );
  TKamera_Tryb = ( kt_Brak, kt_Amunicja, kt_Artyleria, kt_Statek, kt_Statek__Fale, kt_Statek__Projektowy_Tryb, kt_Statek__Swobodna, kt_Swobodna, kt_Za_Statkiem, kt_Za_Statkiem__Fale ); // kt_Statek__Swobodna - je¿eli nie ma statku gracza ustawi kamerê swobodn¹.
  TKotwica_Ruch_Etap = ( kre_Brak, kre_Dno, kre_Statek, kre_Stop, kre_W_Dó³, kre_W_Górê );
  TPunkty_¯ycia_WskaŸnik__Efekty_Tryb = ( p¿wet_Brak, p¿wet_Nie_Podlega_Efektom_Sceny, p¿wet_Nie_Podlega_Efektom_Sceny__Tylko_Ponad_Powierzchni¹_Wody, p¿wet_Podlega_Efektom_Sceny );
  TRadar_Czyszczenie_Zakres = ( rcz_Brak, rcz_L¹dy, rcz_Statki, rcz_Wszystko );
    // sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów - dop³ynie do punktu w celu odnowienia zasobów i rozpocznie patrol, w tym trybie mo¿e przejœæ w tryby walki.
    // sia_P³ywanie_Do_Punktu__Patrol - dop³ynie do punktu i rozpocznie patrol, w tym trybie mo¿e przejœæ w tryby walki je¿eli otrzyma obra¿enia (ignoruje obecnoœæ wrogów).
    // sia_P³ywanie_Do_Punktu__Postój - dop³ynie do punktu i siê zatrzyma, w tym trybie mo¿e przejœæ w tryby walki je¿eli otrzyma obra¿enia (ignoruje obecnoœæ wrogów) (samolot pozostanie w tym trybie, gdy¿ nie mo¿e siê zatrzymaæ w powietrzu i bêdzie kr¹¿y³). Aby wy³¹czyæ ten tryb nale¿y wydaæ polecenie inne ni¿ sia_Postój, np. sia_Brak (nie dotyczy samolotu), sia_Patrol.
    // sia_Odnawianie_Zasobów__Lotniskowiec - gdy samolot jest na lotniskowcu czeka na odnowienie zasobów.
    // sia_Samolot__L¹dowanie__Podchodzenie - zmierza do punktu, z którego rozpocznie podejœcie do l¹dowania.
  TSi_Aktywnoœæ = ( sia_Brak, sia_Kotwice_Oczekiwanie_Na_Wci¹gniêcie, sia_Odnawianie_Zasobów__Lotniskowiec, sia_Patrol, sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów, sia_P³ywanie_Do_Punktu__Patrol, sia_P³ywanie_Do_Punktu__Postój, sia_Postój, sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Hamowanie, sia_Samolot__L¹dowanie__Podchodzenie, sia_Samolot__Startowanie, sia_Walka, sia_Walka__P³ywanie_Do_Punktu, sia_Walka__Torpedy_Ucieczka );
    // Te tryby s¹ prawie równowa¿ne:
    // sist_Brak, sist_Nie_Celuj_Nie_Strzelaj;
    // sist_Celuj_Tylko, sist_Odpowiedz_Ogniem.
  TSi_Strzelanie_Tryb = ( sist_Brak, sist_Nie_Celuj_Nie_Strzelaj, sist_Celuj_Tylko, sist_Odpowiedz_Ogniem, sist_Strzelaj_Jak_Chcesz );
  TSi__Statek_Gracza__Strzela = ( sisgs_Brak, sisgs_Nie, sisgs_Tak, sisgs_Wszystkim ); // sisgs_Tak - SI strzela wszystkimi broniami, których nie wybra³ gracz, sisgs_Wszystkim - SI strzela wszystkimi broniami.
  TStatki_Rozstawianie_Status = ( srs_Brak, srs_Rozstawianie_Kolizja_SprawdŸ, srs_Rozstawianie_Kolizja_Wykryta );
  TPokój_Rozmów__Odbiorca_Rodzaj = ( pror_Brak, pror_Gracz_Jeden, pror_Grupa_Jedna, pror_Wszyscy );

  TArtyleria = class;
  TKotwica = class;
  TDzia³o = class;
  TLufa = class;
  TStatek = class; // Dla TStatek_Create_Funkcje.
  TSter = class;
  TSter_G³êbokoœci = class;
  TŒruba = class;
  TTorpedy_Wyrzutnia = class;
  TWygl¹d_Liczba_Definicja = class; // Dla TStatek_Create_Funkcje.


  TWieloosobowe_String = ShortString; //string[ 255 ]; // SizeOf( ShortString ) = 4. // Nie udaje siê poprawnie wysy³aæ i odbieraæ nieograniczonych napisów (string).

  TCzas_Miêdzy_W_Milisekundach = function( const czas_poprzedni_f : Int64; const zmienna_w_milisekundach_f : boolean = false ) : Int64 of object;
  TWygl¹d_Elementy__Kolor_Noc_Zmieñ = procedure( const gl_material_f : TGLMaterial; const dzieñ_jasnoœæ_f : real ) of object;

  TTCP_Klient_Dane = class
    // Serwer ma peer_port i identyfikator = -1.
    // Gracze maj¹ identyfikator od 0 narastaj¹co.
    dane_wys³ane__kd,
    gotowy__kd,
    od³¹czony__kd,
    w_grze__kd
      : boolean;
    identyfikator__kd, // Nadawany przez serwer gry, rozpoznaje czy to ten sam gracz siê pod³¹czy³ po od³¹czeniu. Serwer = -1, SI = -2, gracze >= 1.
    id_grupa__kd,
    id_statek_schemat__kd,
    id_statek__samolot_schemat__kd,
    peer_port_tcp__kd, // Nadawany przez serwer TCP. Serwer = -1, SI = -2, gracze >= 1 (du¿e wartoœci np 59 349).
    peer_port_udp__kd // Nadawany przez serwer UDP.
      : integer;
    data_czas__od³¹czenia__kd,
    data_czas__pod³¹czenia__kd,
    data_czas__pod³¹czenia_ostatniego__kd, // Je¿eli po roz³¹czeniu znów siê po³¹czy.
    data_czas__udp_kontakt__kd
      : TDateTime;
    nazwa__kd : TWieloosobowe_String;
  end;//---//TTCP_Klient_Dane

  TTCP_Klienci_Lista = class
  private
    { Private declarations }
    identyfikator_najmniejszy,
    identyfikator_najwiêkszy
      : integer;
    klienci_lista_list : TList;
  public
    { Public declarations }
    constructor Create();
    destructor Destroy(); override; // Bez override; siê nie wywo³uje (jedynie tak siê wywo³a tcp_klienci_lista_g.Destroy()).

    function Dodaj_Aktualizuj( const peer_port_f, identyfikator_f : integer ) : TTCP_Klient_Dane;
    procedure Usuñ( const indeks_f : integer );
    procedure Usuñ_Identyfikator( const identyfikator_f : integer );
    procedure Usuñ_Peer_Port( const peer_port_f : integer );
    procedure Usuñ_Wszystkich();

    function Nazwa_Niepowtarzalna( const peer_port_f : integer; const nazwa_f : string ) : boolean; overload;
    function Nazwa_Niepowtarzalna( const nazwa_f : string ) : boolean; overload;
    procedure Od³¹czony_Peer_Port( const peer_port_f : integer );
    function ZnajdŸ_Identyfikator( const identyfikator_f : integer ) : TTCP_Klient_Dane;
    function ZnajdŸ_Peer_Port( const peer_port_f : integer ) : TTCP_Klient_Dane;
  end;//---//TTCP_Klienci_Lista


  TUDP_Klient_Dane = class
    identyfikator,
    peer_port
      : integer;
    adres_ip
    //komenda //???
      : string;
    data_czas_kontakt_ostatni : TDateTime;
  end;//---//TUDP_Klient_Dane

  TUDP_Klienci_Lista = class
  private
    { Private declarations }
    klienci_lista_list : TList;
  public
    { Public declarations }
    constructor Create();
    destructor Destroy(); override; // Bez override; siê nie wywo³uje (jedynie tak siê wywo³a udp_klienci_lista_g.Destroy()).

    procedure Dodaj( const adres_ip_f : string; const peer_port_f : word; const identyfikator_f : integer );
    procedure Usuñ( const indeks_f : integer );
    procedure Usuñ_Peer_Port( const peer_port_f : integer );
    procedure Usuñ_Przeterminowanych();
    procedure Usuñ_Wszystkich();
    //procedure Terminy_SprawdŸ();
  end;//---//TUDP_Klienci_Lista


  TWieloosobowe_Powiadomienie = class( IdSync.TIdNotify )
  private
    wyró¿nij : boolean; // Czy ma zaznaczyæ pojawienie siê komunikatu.
    powiadomienie_treœæ : string;
    zt_strings : TStrings; // Memo.Lines.
    zt_page_control : TPageControl;
    zt_tab_sheet : TTabSheet;
  protected
    procedure DoNotify(); override;
  end;//---//TWieloosobowe_Powiadomienie


  TStatek_Create_Funkcje = record
    // Aby nie u¿ywaæ w klasie TStatek odwo³ani do Statki_Form.
    Amunicja_Wystrzelona_Utwórz_Jeden : procedure( AOwner : TGLBaseSceneObject; ALufa : TLufa; const obracaj_dzia³a_f : boolean; const cel_wspó³rzêdne_f : GLS.VectorGeometry.TAffineVector ) of object;
    Grawitacja_Opadanie_Obra¿enia_Wylicz : function( const punkty_¿ycia_maksymalne_f, grawitacja_opadanie_szybkoœæ_aktualna_f : real ) : real of object;
    Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero : procedure( const statek_lotniskowiec_f, statek_niszcz¹cy_f : TStatek; const rodzaj_f : smallint = -1 ) of object;

    Log_Wypisz_wsk : procedure( const napis_f : string; const prze³¹cz_zak³adkê_f : boolean = true ) of object;
    Odczytaj_Liczbê_Z_Napisu_wsk : function ( napis_f : string; const wartoœæ_minimalna_f : variant; const prze³¹cz_zak³adkê_f : boolean = true ) : real of object;
    Odczytaj_Liczbê_Z_Napisu_Xml_wsk : function( const i_xml_node_f : Xml.XMLIntf.IXMLNode; const wygl¹d_liczba_definicja_f : TWygl¹d_Liczba_Definicja; const wartoœæ_minimalna_f : variant; const prze³¹cz_zak³adkê_f : boolean = true ) : real of object;
    Pêtla_Wzorzec_Oznacz_wsk : procedure( gl_custom_scene_object_f : TGLCustomSceneObject ) of object;
    Œwiat³a_Miganie__Wartoœci_Ustaw_wsk : procedure( const gl_custom_scene_object_f : TGLCustomSceneObject; czas_odstêpy_f : string ) of object;
    Wygl¹d_Elementy__DŸwiêk_Wczytaj_wsk : function( wzorzec__gl_custom_scene_object_f : TGLCustomSceneObject; dŸwiêk_nazwa_f : string; const dŸwiêki__zasiêg_minimalny_f : real; const zt_statek_f : TStatek = nil ) : boolean of object;
    Wygl¹d_Elementy__Kolor_Losowy_Wylicz_wsk : function( kolor_od_f, kolor_do_f : real ) : GLS.VectorTypes.TVector4f of object;
    Wygl¹d_Elementy__Kolor_Ustaw_wsk : procedure( const gl_material_f : TGLMaterial; const vector_f : GLS.VectorTypes.TVector4f ) of object;
    Wygl¹d_Elementy__Kopiuj_W³aœciwoœci_wsk : procedure( zt_gl_custom_scene_object_wzorzec_f, zt_gl_custom_scene_object_kopia_f : TGLCustomSceneObject; kolor_od_f : real = -1; kolor_do_f : real = -1 ) of object;
    Wygl¹d_Elementy__Tekstura_Wczytaj_2_wsk : function( gl_custom_scene_object_f : TGLCustomSceneObject; tekstura_œcie¿ka_f : string; const materia³_nazwa_f : string = '' ) :  boolean of object;
    Wygl¹d_Elementy__Utwórz_Element_wsk : function( const statek_f : TStatek; const l¹d_prymityw_f : string; const w³aœciciel_gl_base_scene_object_f : TGLBaseSceneObject; const rodzic_gl_dummy_cube_f : TGLDummyCube = nil ) : TGLCustomSceneObject of object;

    statek__komunikat_b³êdu_pomiñ : boolean;

    procedure Log_Wypisz( const napis_f : string; const prze³¹cz_zak³adkê_f : boolean = true );
    function Odczytaj_Liczbê_Z_Napisu( napis_f : string; const wartoœæ_minimalna_f : variant; const prze³¹cz_zak³adkê_f : boolean = true ) : real;
    function Odczytaj_Liczbê_Z_Napisu_Xml( const i_xml_node_f : Xml.XMLIntf.IXMLNode; const wygl¹d_liczba_definicja_f : TWygl¹d_Liczba_Definicja; const wartoœæ_minimalna_f : variant; const prze³¹cz_zak³adkê_f : boolean = true ) : real;
    procedure Pêtla_Wzorzec_Oznacz( gl_custom_scene_object_f : TGLCustomSceneObject );
    procedure Œwiat³a_Miganie__Wartoœci_Ustaw( const gl_custom_scene_object_f : TGLCustomSceneObject; czas_odstêpy_f : string );
    function Wygl¹d_Elementy__DŸwiêk_Wczytaj( wzorzec__gl_custom_scene_object_f : TGLCustomSceneObject; dŸwiêk_nazwa_f : string; const dŸwiêki__zasiêg_minimalny_f : real; const zt_statek_f : TStatek = nil ) : boolean;
    function Wygl¹d_Elementy__Kolor_Losowy_Wylicz( kolor_od_f, kolor_do_f : real ) : GLS.VectorTypes.TVector4f;
    procedure Wygl¹d_Elementy__Kolor_Ustaw( const gl_material_f : TGLMaterial; const vector_f : GLS.VectorTypes.TVector4f );
    procedure Wygl¹d_Elementy__Kopiuj_W³aœciwoœci( zt_gl_custom_scene_object_wzorzec_f, zt_gl_custom_scene_object_kopia_f : TGLCustomSceneObject; kolor_od_f : real = -1; kolor_do_f : real = -1 );
    function Wygl¹d_Elementy__Tekstura_Wczytaj_2( gl_custom_scene_object_f : TGLCustomSceneObject; tekstura_œcie¿ka_f : string; const materia³_nazwa_f : string = '' ) :  boolean;
    function Wygl¹d_Elementy__Utwórz_Element( const statek_f : TStatek; const l¹d_prymityw_f : string; const w³aœciciel_gl_base_scene_object_f : TGLBaseSceneObject; const rodzic_gl_dummy_cube_f : TGLDummyCube = nil ) : TGLCustomSceneObject;
  end;//---//TStatek_Create_Funkcje


  TWieloosobowe__Wektor_4 = record
    X,
    Y,
    Z,
    W
      : single; // SizeOf( single ) = 4.
    // SizeOf( single ) = 4 * 4 = 16.
  end;//---//TWieloosobowe__Wektor_4

  TAmunicja_Prêdkoœæ_Zakresy_r = record
    prêdkoœæ__apz, // Powy¿ej 50 detekcja kolizji s³abo dzia³a (za rzadko sprawdza lub amunicja leci za szybko).
    prêdkoœæ_torpeda,
    prêdkoœæ_opadania_wspó³czynnik,
    zmiana_k¹ta_opadania_prêdkoœæ
      : real;
  end;//---//TAmunicja_Prêdkoœæ_Zakresy_r

  TDŸwiêki_Komunikaty_Czasy_Trwania_r = record
    dŸwiêk_komunikat__czas_trwania_milisekundy : integer;
    dŸwiêk_komunikat__nazwa : string
  end;//---//TDŸwiêki_Komunikaty_Czasy_Trwania_r

  TKotwica_Zakresy_r = record
    odleg³oœæ_maksymalna__kz, // Jak nisko mo¿na opuœciæ kotwicê.
    prêdkoœæ__opadania,
    prêdkoœæ__podnoszenia
      : single;
  end;//---//TKotwica_Zakresy_r

  TObiekty_Wieloosobowe__Lufa_r = record
    strza³_gotowoœæ__owo : boolean; // Informacje do wyœwietlania dla gracza o jego statku.

    lufa_podniesienie_k¹t__owo, // K¹t podniesienia lufy.
    lufa_pozycja_z__owo, // Dla cofania lufy w wyniku strza³u.
    prze³adowanie_procent__owo // Informacje do wyœwietlania dla gracza o jego statku.
      : real; // SizeOf( real ) = 8.

    prze³adowanie_wskaŸnik__kolor__owo,
    prze³adowanie_wskaŸnik__pozycja__owo
      : TWieloosobowe__Wektor_4; //GLS.VectorTypes.TVector4d
  end;//---//TObiekty_Wieloosobowe__Lufa_r

  TObiekty_Wieloosobowe__Dzia³o_r = record
    czy_lot_parabol¹__owo : boolean;

    //celownik_linia__koñcówki__owo,
    celownik_linia__wzór__owo
      : word; // SizeOf( word ) = 2.

    //lufa_podniesienie_k¹t_t__d³ugoœæ_tabeli__owo : integer;

    //lufa_podniesienie_k¹t_t__owo // Aktualny k¹t podniesienia lufy.
    //  : array of real; // SizeOf( Pointer ) = 4.

    obrót_k¹t__owo, // K¹t obrotu dzia³a.
    celownik_linia__podniesienie_k¹t__owo
      : real; // SizeOf( real ) = 8.

    celownik_linia__szerokoœæ__owo : single;

    amunicja_iloœæ__owo, // Informacje do wyœwietlania dla gracza o jego statku.
    obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli__owo
      : integer; // SizeOf( integer ) = 4.

    uszkodzone_czas_i__owo : Int64; // Informacje do wyœwietlania dla gracza o jego statku.

    celownik_linia__kolor__owo : TWieloosobowe__Wektor_4; //GLS.VectorTypes.TVector4d

    obiekty_wieloosobowe_lufa_r_t__owo
      : array of TObiekty_Wieloosobowe__Lufa_r; // SizeOf( Pointer ) = 4.
  end;//---//TObiekty_Wieloosobowe__Dzia³o_r

  TObiekty_Wieloosobowe__Amunicja_r = record
    czy_lot_parabol¹_am__owo,
    czy_poza_luf¹__owo
    //przeliczone_am__owo // Czy dane o tej amunicji zosta³y ju¿ przeliczone.
      : boolean;

    id_gracz_am__owo,
    id_statek_am__owo
      : integer;

    id_wieloosobowe_amunicja__owo : Int64;

    korpus__BottomRadius__owo,
    korpus__TopRadius__owo,
    pitch_angle__owo,
    skala__amunicja__owo,
    turn_angle__owo
      : real;

    korpus__Height__owo,
    jasna_linia_Height__owo,
    torpeda_efekt_na_wodzie_stan__owo // Czy widoczny jest ju¿ efekt na wodzie ( 0 - efekt jeszcze nie by³ widoczny, 1 - efekt widoczny, 2 - efektu ju¿ nie widaæ).
      : single;

    amunicja_rodzaj_am__owo : Typy_Wspolne.TAmunicja_Rodzaj;

    kierunek_am__owo,
    pozycja_am__owo,
    pozycja_celu__owo
      : GLS.VectorTypes.TVector4f;
  end;//---//TObiekty_Wieloosobowe__Amunicja_r

  TObiekty_Wieloosobowe__Efekt_r = record
    id_statek_ef__owo : integer;
    wys³ane__owo : boolean;
    pozycja_ef__owo : GLS.VectorTypes.TVector4f;
    czas_trwania__owo,
    czas_trwania_efekt_dodatkowy__owo
      : Int64;
    obra¿enia_zadawane_wspó³czynnik_zmodyfikowany__owo,
    skala__amunicja_owo
      : real;
    amunicja_rodzaj_ef__owo : Typy_Wspolne.TAmunicja_Rodzaj;
    dŸwiêk_efekt_rodzaj_owo : TDŸwiêk_Efekt_Rodzaj;
    efekt_rodzaj__owo : TEfekt_Rodzaj;
    // si³a obra¿eñ //???
  end;//---//TObiekty_Wieloosobowe__Efekt_r

  TObiekty_Wieloosobowe__Statek_r = record
    czy_lotniskowiec__owo,
    czy_samolot__owo,
    czy_samolot__kolizja__owo,
    czy_samolot__na_lotniskowcu__owo, // Informacje do wyœwietlania dla gracza o jego statku.
    czy_wszystkie_lufy__owo,
    broñ_indeks_zmieniaj__owo,
    obracaj_dzia³a__owo,
    obracaj_dzia³a__na_k¹t_wyznaczony__owo,
    podnoœ_lufy__owo,
    podnoœ_lufy__na_k¹t_wyznaczony__owo,
    przeliczone_st__owo, // Czy dane o tym statku zosta³y ju¿ przeliczone.
    œwiat³a_w³¹czone__owo,
    œwiat³a_dodatkowe_w³¹czone__owo,
    zanurzenie_peryskopowe__przekroczone__owo,
    zanurzenie_zadane_przekraczaj_100_procent__owo
      : boolean; // SizeOf( boolean ) = 1.

    id_gracz__owo,
    id_grupa__owo,
    id_statek_st__owo,
    id_statek_schemat__owo,
    id_statek__lotniskowiec__ma_samolot_na_pok³adzie__owo, // Informacje do wyœwietlania dla gracza o jego statku.
    id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie__owo, // Informacje do wyœwietlania dla gracza o jego statku.
    artyleria_t__d³ugoœæ_tabeli__owo,
    bomba_g³êbinowa_t__d³ugoœæ_tabeli__owo,
    dzia³a_t__d³ugoœæ_tabeli__owo,
    je¿e_g³êbinowe_t__d³ugoœæ_tabeli__owo,
    kotwica_t__d³ugoœæ_tabeli__owo,
    torpedy_wyrzutnie_t__d³ugoœæ_tabeli__owo,
    si_aktywnoœæ__owo, // Informacje do wyœwietlania dla gracza o jego statku.
    si_strzelanie_tryb__owo, // Informacje do wyœwietlania dla gracza o jego statku.
    ster_t__d³ugoœæ_tabeli__owo,
    ster_g³êbokoœci_t__d³ugoœæ_tabeli__owo,
    œruba_t__d³ugoœæ_tabeli__owo
      : integer; // SizeOf( integer ) = 4.

    schemat_samolot_zmiana_czas_i__owo, // Informacje do wyœwietlania dla gracza o jego statku.
    toniêcie__czas_i__owo, // Informacje do wyœwietlania dla gracza o jego statku.
    uszkodzone_czas_i__kotwica__owo,
    uszkodzone_czas_i__radar__owo,
    uszkodzone_czas_i__radio__owo,
    uszkodzone_czas_i__sonar__owo,
    uszkodzone_czas_i__ster__owo,
    uszkodzone_czas_i__ster_g³êbokoœci__owo,
    uszkodzone_czas_i__œruba__owo //---// Informacje do wyœwietlania dla gracza o jego statku.
      : Int64;

    falowanie_bok_skrêt__owo, // Iloœæ stopni wychylenia w bok z powodu skrêt (aktualnego).
    falowanie_przód_pu³ap__owo, // Iloœæ stopni wychylenia w przód i ty³ z powodu wznoszenia i opadania (aktualnego).
    falowanie_przód_ruch__owo, // Iloœæ stopni wychylenia w przód i ty³ z powodu prêdkoœci ruchu (aktualnego).
    lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__owo, // Informacje do wyœwietlania dla gracza o jego statku.
    prêdkoœæ_aktualna_procent__wzglêdny__owo, // Informacje do wyœwietlania dla gracza o jego statku.
    prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__k¹t__owo, // Informacje do wyœwietlania dla gracza o jego statku.
    prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__owo, // Informacje do wyœwietlania dla gracza o jego statku.
    prêdkoœæ_zadana_procent__owo, // Informacje do wyœwietlania dla gracza o jego statku.
    punkty_¿ycia__owo,
    punkty_¿ycia_maksymalne__owo,
    punkty_¿ycia_procent_zosta³o__owo,
    skrêt_aktualny_procent__owo, // Informacje do wyœwietlania dla gracza o jego statku.
    skrêt_zadany_procent__owo, // Informacje do wyœwietlania dla gracza o jego statku.
    ster_k¹t__owo, // K¹t wychylenia steru.
    ster_g³êbokoœci_k¹t__owo, // K¹t wychylenia steru g³êbokoœci.
    toniêcie__przechylenie__lewo_prawo__owo, // Dla animacji toniêcia statku.
    toniêcie__przechylenie__przód_ty³__owo, // Dla animacji toniêcia statku.
    zanurzenie_pu³ap__aktualne__owo, // Potrzebne w Zanurzenie_Peryskopowe__Przekroczone().
    zanurzenie_pu³ap__aktualne_procent__owo, // Potrzebne w Zanurzenie_Strza³_Przekroczone().
    zanurzenie_pu³ap__zadane_procent__owo // Informacje do wyœwietlania dla gracza o jego statku.
      : real; // SizeOf( real ) = 8.

    //gracz__nazwa__owo : TWieloosobowe_String;

    cel_wspó³rzêdne_st__owo : GLS.VectorGeometry.TAffineVector;

    kierunek_st__owo,
    pozycja_st__owo
      : TWieloosobowe__Wektor_4; //GLS.VectorTypes.TVector4d

    amunicja_rodzaj_st__owo : Typy_Wspolne.TAmunicja_Rodzaj; // SizeOf( Typy_Wspolne.TAmunicja_Rodzaj ) = 1 ale SizeOf( SmallInt ) = 2. // To chyba te¿ siê traktuje jako - SizeOf( Pointer ) = 4.

    kotwica__uszkodzone_czas_i_t__owo,
    ster__uszkodzone_czas_i_t__owo,
    ster_g³êbokoœci__uszkodzone_czas_i_t__owo,
    œruba__uszkodzone_czas_i_t__owo
      : array of Int64;

    œruba__obrót_k¹t_t__owo // Aktualny k¹t obrotu œruby (daje efekt obracania œrub¹).
      : array of real; // SizeOf( Pointer ) = 4.

    kotwica__wspó³rzêdne_t__owo : array of GLS.VectorGeometry.TAffineVector;
    kotwica__ruch_etap_t__owo : array of TKotwica_Ruch_Etap;

    artyleria_t__owo,
    bomba_g³êbinowa_t__owo,
    dzia³a_t__owo,
    je¿e_g³êbinowe_t__owo,
    torpedy_wyrzutnie_t__owo
      : array of TObiekty_Wieloosobowe__Dzia³o_r; // SizeOf( Pointer ) = 4.

    //radar_id_l¹dy_w_zasiêgu__owo,
    //radar_id_statki_w_zasiêgu__owo,
    //radio_id_l¹dy_w_zasiêgu__owo,
    //radio_id_statki_w_zasiêgu__owo,
    //sonar_id_statki_w_zasiêgu__owo
    //  : TWieloosobowe_String;
  end;//---//TObiekty_Wieloosobowe__Statek_r

  TObiekty_Wieloosobowe__Statek__Wysy³ane_Rzadziej_r = record
    id_statek_st__owo_wr : integer;

    radar_id_l¹dy_w_zasiêgu__owo_wr,
    radar_id_statki_w_zasiêgu__owo_wr,
    radio_id_l¹dy_w_zasiêgu__owo_wr,
    radio_id_statki_w_zasiêgu__owo_wr,
    sonar_id_statki_w_zasiêgu__owo_wr
      : TWieloosobowe_String;
  end;//---//TObiekty_Wieloosobowe__Statek__Wysy³ane_Rzadziej_r

  TObiekty_Wieloosobowe__Statek_Cel_Wspó³rzêdne_r = record
    id_statek_cel__owo : integer;

    cel_wspó³rzêdne_cel__owo : GLS.VectorGeometry.TAffineVector;
  end;//---//TObiekty_Wieloosobowe__Statek_Cel_Wspó³rzêdne_r

  TObiekty_Wieloosobowe__Statek_Klawisze_Obs³uga_r = record
    amunicja_rodzaj_wybrana__artyleria__owo,
    amunicja_rodzaj_wybrana__bomba_g³êbinowa__owo,
    amunicja_rodzaj_wybrana__je¿e_g³êbinowe__owo,
    amunicja_rodzaj_wybrana__pocisk__owo,
    amunicja_rodzaj_wybrana__torpeda__owo,
    amunicja_rodzaj_wybrana__wszystkie__owo,
    celowanie__bronie_osobno__owo,
    si__statek_gracza__p³ywa__owo,
    œwiat³a_w³¹czone__owo_sko,
    œwiat³a_dodatkowe_w³¹czone__owo_sko,
    zanurzenie_zadane_przekraczaj_100_procent__owo_sko
      : boolean;

    mysz_przycisk__owo : SmallInt; // Nie TMouseButton, gdy¿ w tym zbiorze nie ma stanu ‘brak’ (none).

    celowanie__tryb__owo,
    klawisz__owo
      : Word;

    shift__owo : TShiftState; // Wygl¹da na to, ¿e poprawnie przesy³a ten zbiór wartoœci.

    id_statek_kl__owo,
    si__statek_gracza__strzela__owo
    //cel_wspó³rzêdne__x,
    //cel_wspó³rzêdne__y,
    //cel_wspó³rzêdne__z
      : integer;

    amunicja_zanurzenie_g³êbokoœæ_zadana__owo,
    //celowanie_precyzja__falowanie_niwelowanie__owo,
    celowanie_precyzja__obrót__owo,
    celowanie_precyzja__podniesienie__owo
      : real;

    cel_wspó³rzêdne__owo : GLS.VectorGeometry.TAffineVector; //GLS.VectorTypes.TVector4d;
    polecenie__nazwa__owo : TWieloosobowe_String;
  end;//---//TObiekty_Wieloosobowe__Statek_Klawisze_Obs³uga_r

  TGra_Statystyki_r = record
    id_grupa__gs,
    identyfikator__gs,
    amunicja_wystrzelona_iloœæ__gs,
    // amunicja trafia w amunicjê iloœæ //???
    czas_do_zatoniêcia__najd³u¿szy_sekund__gs,
    czas_do_zatoniêcia__najkrótszy_sekund__gs,
    czas_do_zatoniêcia__suma_sekund__gs,
    odnawianie_zasobów_iloœæ_razy__gs, // Ile razy skorzystano z odnawiania zasobów (nie suma odnowionych wartoœci) (wywo³ano t¹ funkcjonalnoœæ).
    taranowania_iloœæ__gs, // W tym taranowania sojuszników.
    taranowania_iloœæ_sojuszników__gs,
    trafienia__gs,
    zak³ócenia__nieudane__gs,
    zak³ócenia__odbite__cudze__gs, // Iloœæ udanych odbiæ wrogich prób zak³ócenia.
    zak³ócenia__odbite__w³asne__gs, // Iloœæ w³asnych prób zak³ócenia, które zosta³y odbite.
    zak³ócenia__udane__gs,
    zatoniêcia__gs,
    zatopienia__gs, // W tym zatopienia sojuszników.
    zatopienia_sojuszników__gs
      : integer;
    amunicja_wystrzelona_obra¿enia_zadawane__gs, // Jakie maksymalne obra¿enia mog³a zadaæ wystrzelona amunicja.
    obra¿enia_otrzymane__gs,
    obra¿enia_otrzymane__od_sojuszników__gs,
    obra¿enia_otrzymane__z_kolizji__gs,
    obra¿enia_otrzymane__z_zak³óceñ__gs,
    obra¿enia_zadane__amunicja__gs, // W tym obra¿enia zadane sojusznikom.
    obra¿enia_zadane__amunicja_sojusznikom__gs,
    obra¿enia_zadane__taranowanie__gs, // W tym obra¿enia zadane sojusznikom.
    obra¿enia_zadane__taranowanie_sojusznikom__gs
      : real;
  end;//---//TGra_Statystyki_r

  TPokój_Rozmów_r = record
    id_nadawca,
    id_odbiorca // pror_Wszyscy - 0, pror_Grupa_Jedna - 1, 2, pror_Gracz_Jeden - identyfikator__kd = id_gracza.
      : integer;
    odbiorca_rodzaj : TPokój_Rozmów__Odbiorca_Rodzaj;
    data_czas_wys³ania : TDateTime;
    wiadomoœæ : string;
  end;//---//TPokój_Rozmów_r

  TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj = class
    id_odbiorca : integer;
    odbiorca_rodzaj : TPokój_Rozmów__Odbiorca_Rodzaj;
  end;//---//TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_

  TPokój_Rozmów_Powiadomienie = class( IdSync.TIdNotify )
  private
    data_czas_wyœwietlaj,
    informacja_dodatkowa
      : boolean;
    nadawca_opis : string;
    zt_strings : TStrings; // Memo.Lines.
    pokój_rozmów_r : TPokój_Rozmów_r;
    informacja_dodatkowa_dodaj : procedure( const napis_f : string; const wyœwietlanie_czas_sekundy_f : smallint = 0 ) of object;
  protected
    procedure DoNotify(); override;
  end;//---//TPokój_Rozmów_Powiadomienie


  TKomunikacja_Rekord_Testowy_r = record
    liczba_ca³kowita : integer;
    liczba_rzeczywista : real;
    data_czas : TDateTime;
    napis_krótki : TWieloosobowe_String; //ShortString
  end;//---//TKomunikacja_Rekord_Testowy_r

  TKomunikacja_Rekord_Testowy_2_r = record
    liczba_ca³kowita : integer;
    liczba_rzeczywista : real;
    data_czas : TDateTime;
    napis : string;
  end;//---//TKomunikacja_Rekord_Testowy_2_r


  TT³umaczenie_Komunikaty_r = record
    gracze_lista_nag³ówek__czas_kontaktu_udp_ostatniego,
    gracze_lista_nag³ówek__czas_od³¹czenia,
    gracze_lista_nag³ówek__czas_pod³¹czenia,
    gracze_lista_nag³ówek__czas_pod³¹czenia_ostatniego,
    gracze_lista_nag³ówek__dane_wys³ane,
    gracze_lista_nag³ówek__gotowy,
    gracze_lista_nag³ówek__id_gracza,
    gracze_lista_nag³ówek__l_p,
    gracze_lista_nag³ówek__nazwa,
    gracze_lista_nag³ówek__od³¹czony,
    gracze_lista_nag³ówek__peer_port_tcp,
    gracze_lista_nag³ówek__peer_port_udp,
    gracze_lista_nag³ówek__samolot,
    gracze_lista_nag³ówek__statek,
    gracze_lista_nag³ówek__w_grze,

    ekran_napis__broñ_indeks_zmieniaj__skrót,
    ekran_napis__busola,
    ekran_napis__czas_gry,
    ekran_napis__czas_gry__jednostka,
    ekran_napis__dalmierz,
    ekran_napis__dalmierz__kamera,
    ekran_napis__dalmierz__statek,
    ekran_napis__delta_czasu,
    ekran_napis__dzia³a_obracaj__skrót,
    ekran_napis__gra,
    ekran_napis__grupa__skrót,
    ekran_napis__id__skrót,
    ekran_napis__id_st,
    ekran_napis__katapulta,
    ekran_napis__katapulta__oczekiwanie,
    ekran_napis__katapulta__uruchomiona,
    ekran_napis__k¹t,
    ekran_napis__klatek_na_sekundê__skrót,
    ekran_napis__kotwica,
    ekran_napis__l¹dowanie_u³atwione,
    ekran_napis__l¹duj_na,
    ekran_napis__l¹duje,
    ekran_napis__losowy__skrót,
    ekran_napis__lufy_podnoœ__skrót,
    ekran_napis__naprowadzanie,
    ekran_napis__odnawiania_zasobów,
    ekran_napis__odnawiania_zasobów__oczekiwanie,
    ekran_napis__odnawiania_zasobów__wznawianie,
    ekran_napis__odnawiania_zasobów__zakoñczono,
    ekran_napis__odnowienie,
    ekran_napis__pauza,
    ekran_napis__postêp__z,
    ekran_napis__prêdkoœæ,
    ekran_napis__pu³ap,
    ekran_napis__radar,
    ekran_napis__radar__busola__jeden_znak,
    ekran_napis__radar__dalmierz__jeden_znak,
    ekran_napis__radar__statek__jeden_znak,
    ekran_napis__radar__wspó³rzêdne_kursora__jeden_znak,
    ekran_napis__ró¿a_wiatrów__PN,
    ekran_napis__ró¿a_wiatrów__PNW,
    ekran_napis__ró¿a_wiatrów__W,
    ekran_napis__ró¿a_wiatrów__PDW,
    ekran_napis__ró¿a_wiatrów__PD,
    ekran_napis__ró¿a_wiatrów__PDZ,
    ekran_napis__ró¿a_wiatrów__Z,
    ekran_napis__ró¿a_wiatrów__PNZ,
    ekran_napis__samolot__l¹dowanie,
    ekran_napis__samolot__na_pok³adzie,
    ekran_napis__si,
    ekran_napis__sekunda__jeden_znak__s,
    ekran_napis__si_strzela,
    ekran_napis__ster,
    ekran_napis__uszkodzenia,
    ekran_napis__uszkodzenia_samolot,
    ekran_napis__uszkodzenia__jeden_znak__u,
    ekran_napis__uszkodzenia__kotwica,
    ekran_napis__uszkodzenia__radar,
    ekran_napis__uszkodzenia__radio,
    ekran_napis__uszkodzenia__sonar,
    ekran_napis__uszkodzenia__ster,
    ekran_napis__uszkodzenia__ster_g³êbokoœci,
    ekran_napis__uszkodzenia__œruba,
    ekran_napis__uzbrojenie_opis__artyleria,
    ekran_napis__uzbrojenie_opis__bomby_g³êbinowe,
    ekran_napis__uzbrojenie_opis__dzia³a,
    ekran_napis__uzbrojenie_opis__je¿e_g³êbinowe,
    ekran_napis__uzbrojenie_opis__torpedy,
    ekran_napis__zanurzenie,
    ekran_napis__zanurzenie__peryskopowe__utrzymywane__jeden_znak,
    ekran_napis__zmiana_samolotu,
    ekran_napis__¿ycie,

    klawiatura_konfiguracja___kliknij_w_polu_przyciskiem_myszy_,
    klawiatura_konfiguracja__alt,
    klawiatura_konfiguracja__alt__podpowiedŸ,
    klawiatura_konfiguracja__ctrl,
    klawiatura_konfiguracja__ctrl__podpowiedŸ,
    klawiatura_konfiguracja__domyœlny,
    klawiatura_konfiguracja__domyœlny__podpowiedŸ,
    klawiatura_konfiguracja__klawisz__delete,
    klawiatura_konfiguracja__klawisz__end,
    klawiatura_konfiguracja__klawisz__home,
    klawiatura_konfiguracja__klawisz__insert,
    klawiatura_konfiguracja__klawisz__kursor_dó³,
    klawiatura_konfiguracja__klawisz__kursor_góra,
    klawiatura_konfiguracja__klawisz__kursor_lewo,
    klawiatura_konfiguracja__klawisz__kursor_prawo,
    klawiatura_konfiguracja__klawisz__menu,
    klawiatura_konfiguracja__klawisz__mysz_lewy,
    klawiatura_konfiguracja__klawisz__mysz_prawy,
    klawiatura_konfiguracja__klawisz__mysz_œrodkowy,
    klawiatura_konfiguracja__klawisz__num_dzielenie,
    klawiatura_konfiguracja__klawisz__num_lock,
    klawiatura_konfiguracja__klawisz__page_down,
    klawiatura_konfiguracja__klawisz__page_up,
    klawiatura_konfiguracja__klawisz__pause_break,
    klawiatura_konfiguracja__klawisz__windows_lewy,
    klawiatura_konfiguracja__klawisz__windows_prawy,
    klawiatura_konfiguracja__mysz,
    klawiatura_konfiguracja__mysz__podpowiedŸ,
    klawiatura_konfiguracja__niezdefiniowane__podpowiedŸ,
    klawiatura_konfiguracja__shift,
    klawiatura_konfiguracja__shift__podpowiedŸ,

    komunikat__alarm_torpedowy,
    komunikat__b³¹d,
    komunikat__b³¹d_odczytania_liczby_z_napisu,
    komunikat__b³êdny_rozmiar_strumienia_od__PeerPort_,
    komunikat__brak_definicji_elementów_statku,
    komunikat__brak_definicji_l¹du,
    komunikat__brak_definicji_prymitywu,
    komunikat__brak_definicji_samolotu,
    komunikat__brak_definicji_statku,
    komunikat__czy_skasowaæ_schemat_si_o_nazwie___operacji_nie_mo¿na_cofn¹æ_,
    komunikat__czy_skasowaæ_schemat_si_o_nazwie,
    komunikat__czy_wczytaæ_konfiguracjê_klawiszy,
    komunikat__czy_zapisaæ_konfiguracjê_klawiszy,
    komunikat__czy_zapisaæ_schemat_si_o_nazwie,
    komunikat__czy_zapisaæ_ustawienia,
    komunikat__czy_zastosowaæ_schemat_si_o_nazwie,
    komunikat__czyta_zegar,
    komunikat__dla_tej_komendy_nale¿y_u¿yæ_innej_wersji_funkcji__Wieloosobowe__Strumieñ_Wyœlij_,
    komunikat__dodano_si,
    komunikat__domyœlne,
    komunikat__element__l¹d__nie_mo¿e_byæ__œwiat³em_migaj¹cym__nie_bêd¹c_jednoczeœnie_ani__œwiat³em__ani__œwiat³em_dodatkowym__zdeaktywowano_cechê__œwiat³a_miganie_,
    komunikat__element__l¹d__nie_mo¿e_jednoczeœnie_byæ__œwiat³em__i__œwiat³em_dodatkowym__zdeaktywowano_cechê__œwiat³o_,
    komunikat__element__statek__nie_mo¿e_byæ__œwiat³em_migaj¹cym__nie_bêd¹c_jednoczeœnie_ani__œwiat³em__ani__œwiat³em_dodatkowym__zdeaktywowano_cechê__œwiat³a_miganie_,
    komunikat__element__statek__nie_mo¿e_jednoczeœnie_byæ__œwiat³em__i__œwiat³em_dodatkowym__zdeaktywowano_cechê__œwiat³o_,
    komunikat__falowanie_zosta³o_wy³¹czone___spowalnia_rozgrywkê_sieciow¹__z_niewiadomych_przyczyn_,
    komunikat__gra_start,
    komunikat__gracze,
    komunikat__grupy,
    komunikat__grupy_nieokreœlone__klienci_nieuczestnicz¹cy_w_grze_,
    komunikat__iloœæ,
    komunikat__informacja,
    komunikat__klawiatura_konfiguracja__b³êdny_kod_klawisza,
    komunikat__klawiatura_konfiguracja__b³êdny_zakres_kodu_klawisza,
    komunikat__klawiatura_konfiguracja__brak_kodu_klawisza,
    komunikat__klawiatura_konfiguracja__brak_nazwy_funkcjonalnoœci,
    komunikat__klawiatura_konfiguracja__brak_parametru___klawisz_alt,
    komunikat__klawiatura_konfiguracja__brak_parametru___klawisz_ctrl,
    komunikat__klawiatura_konfiguracja__brak_parametru___klawisz_shift,
    komunikat__klawiatura_konfiguracja__brak_rodzaju_klawisza,
    komunikat__klawiatura_konfiguracja__i,
    komunikat__klawiatura_konfiguracja__konfiguracje__Alt__oraz__Alt___Ctrl__s¹_nierozró¿nialne,
    komunikat__klawiatura_konfiguracja__niepe³na_definicja,
    komunikat__klawiatura_konfiguracja__niepoprawna_definicja,
    komunikat__klawiatura_konfiguracja__powielona_definicja,
    komunikat__klawiatura_konfiguracja__wczytana_konfiguracja_klawiszy_zawiera_nieznane_definicje_funkcjonalnoœci,



    klawiatura_konfiguracja__polecenie_nazwa____amunicja__zanurzenie_g³êbokoœæ_zadana__minus,
    klawiatura_konfiguracja__polecenie_nazwa____amunicja__zanurzenie_g³êbokoœæ_zadana__plus,
    klawiatura_konfiguracja__polecenie_nazwa____celowanie_bronie_osobno,
    klawiatura_konfiguracja__polecenie_nazwa____celowanie_tryb,
    klawiatura_konfiguracja__polecenie_nazwa____celownicze_linie_unoœ,
    klawiatura_konfiguracja__polecenie_nazwa____celownik_bombowiec_widocznoœæ,
    klawiatura_konfiguracja__polecenie_nazwa____celownik_widocznoœæ,
    klawiatura_konfiguracja__polecenie_nazwa____celownik_widocznoœæ_mouse_look_active,
    klawiatura_konfiguracja__polecenie_nazwa____dalmierz,
    klawiatura_konfiguracja__polecenie_nazwa____dalmierz_tryb,
    klawiatura_konfiguracja__polecenie_nazwa____dŸwiêk__g³oœnoœæ__minus,
    klawiatura_konfiguracja__polecenie_nazwa____dŸwiêk__g³oœnoœæ__plus,

    klawiatura_konfiguracja__polecenie_nazwa____obracaj_dzia³a,
    klawiatura_konfiguracja__polecenie_nazwa____obracaj_dzia³a__na_k¹t_wyznaczony,
    klawiatura_konfiguracja__polecenie_nazwa____obrót_k¹t_zablokowany_strza³_wskaŸnik,
    klawiatura_konfiguracja__polecenie_nazwa____obrót_k¹t_zablokowany_wskaŸnik,
    klawiatura_konfiguracja__polecenie_nazwa____podnoœ_lufy,
    klawiatura_konfiguracja__polecenie_nazwa____podnoœ_lufy__na_k¹t_wyznaczony,

    klawiatura_konfiguracja__polecenie_nazwa____gra_wspó³czynnik_prêdkoœci__minus,
    klawiatura_konfiguracja__polecenie_nazwa____gra_wspó³czynnik_prêdkoœci__normalna,
    klawiatura_konfiguracja__polecenie_nazwa____gra_wspó³czynnik_prêdkoœci__plus,
    klawiatura_konfiguracja__polecenie_nazwa____gra_wspó³czynnik_prêdkoœci__x_10,

    klawiatura_konfiguracja__polecenie_nazwa____mouse_look_active,

    klawiatura_konfiguracja__polecenie_nazwa____kamera__w_dó³_obrót,
    klawiatura_konfiguracja__polecenie_nazwa____kamera__w_górê_obrót,
    klawiatura_konfiguracja__polecenie_nazwa____kamera__w_lewo_obrót,
    klawiatura_konfiguracja__polecenie_nazwa____kamera__w_prawo_obrót,

    klawiatura_konfiguracja__polecenie_nazwa____kamera__w_dó³,
    klawiatura_konfiguracja__polecenie_nazwa____kamera__w_górê,
    klawiatura_konfiguracja__polecenie_nazwa____kamera__w_lewo,
    klawiatura_konfiguracja__polecenie_nazwa____kamera__w_prawo,
    klawiatura_konfiguracja__polecenie_nazwa____kamera__do_przodu,
    klawiatura_konfiguracja__polecenie_nazwa____kamera__do_ty³u,

    klawiatura_konfiguracja__polecenie_nazwa____kamera__Artyleria,
    klawiatura_konfiguracja__polecenie_nazwa____kamera__Amunicja,
    klawiatura_konfiguracja__polecenie_nazwa____kamera__Statek,
    klawiatura_konfiguracja__polecenie_nazwa____kamera__Statek__Fale,
    klawiatura_konfiguracja__polecenie_nazwa____kamera__Statek__Projektowy_Tryb,
    klawiatura_konfiguracja__polecenie_nazwa____kamera__Swobodna,
    klawiatura_konfiguracja__polecenie_nazwa____kamera__Za_Statkiem,
    klawiatura_konfiguracja__polecenie_nazwa____kamera__Za_Statkiem__Fale,

    klawiatura_konfiguracja__polecenie_nazwa____kotwica__stop,
    klawiatura_konfiguracja__polecenie_nazwa____kotwica__w__dó³,
    klawiatura_konfiguracja__polecenie_nazwa____kotwica__w__górê,

    klawiatura_konfiguracja__polecenie_nazwa____l¹dowanie_u³atwione,
    klawiatura_konfiguracja__polecenie_nazwa____l¹d_odœwie¿_wskazany,
    klawiatura_konfiguracja__polecenie_nazwa____lotniskowiec_samolot_l¹dowanie_informacje,

    klawiatura_konfiguracja__polecenie_nazwa____punkt_naprowadzaj,
    klawiatura_konfiguracja__polecenie_nazwa____punkt_naprowadzaj__na_lotniskowiec,
    klawiatura_konfiguracja__polecenie_nazwa____punkt_naprowadzaj__odleg³oœæ_do_punktu_prezentuj,
    klawiatura_konfiguracja__polecenie_nazwa____punkt_naprowadzaj__punkt,
    klawiatura_konfiguracja__polecenie_nazwa____punkt_naprowadzaj__radar,
    klawiatura_konfiguracja__polecenie_nazwa____punkt_naprowadzaj__strza³ka,

    klawiatura_konfiguracja__polecenie_nazwa____opcje,

    klawiatura_konfiguracja__polecenie_nazwa____pauza,

    klawiatura_konfiguracja__polecenie_nazwa____pe³ny_ekran,

    klawiatura_konfiguracja__polecenie_nazwa____pokój_rozmów__informacja_dodatkowa,
    klawiatura_konfiguracja__polecenie_nazwa____pokój_rozmów__na_ekranie,

    klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__1_plus,
    klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__5_plus,
    klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__25_plus,
    klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__100_plus,
    klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__1_minus,
    klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__5_minus,
    klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__25_minus,
    klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__100_minus,
    klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__zero,

    klawiatura_konfiguracja__polecenie_nazwa____punkty_¿ycia_wskaŸnik__gracz,
    klawiatura_konfiguracja__polecenie_nazwa____punkty_¿ycia_wskaŸnik__przeciwnik,
    klawiatura_konfiguracja__polecenie_nazwa____punkty_¿ycia_wskaŸnik__sojusznik,

    klawiatura_konfiguracja__polecenie_nazwa____radar__broñ_zasiêg_wyœwietlaj,
    klawiatura_konfiguracja__polecenie_nazwa____radar__czu³oœæ__1_minus,
    klawiatura_konfiguracja__polecenie_nazwa____radar__czu³oœæ__10_minus,
    klawiatura_konfiguracja__polecenie_nazwa____radar__czu³oœæ__1_plus,
    klawiatura_konfiguracja__polecenie_nazwa____radar__czu³oœæ__10_plus,
    klawiatura_konfiguracja__polecenie_nazwa____radar__skala__1_minus,
    klawiatura_konfiguracja__polecenie_nazwa____radar__skala__10_minus,
    klawiatura_konfiguracja__polecenie_nazwa____radar__skala__1_plus,
    klawiatura_konfiguracja__polecenie_nazwa____radar__skala__10_plus,
    klawiatura_konfiguracja__polecenie_nazwa____radar__widocznoœæ,

    klawiatura_konfiguracja__polecenie_nazwa____samolot_katapult¹_startuj,
    klawiatura_konfiguracja__polecenie_nazwa____samolot_statek_prze³¹cz,
    klawiatura_konfiguracja__polecenie_nazwa____samolot_statek_prze³¹cz_bez_kamery,

    klawiatura_konfiguracja__polecenie_nazwa____si__p³ywa__samolot_gracza,
    klawiatura_konfiguracja__polecenie_nazwa____si__p³ywa__statek_gracza,
    klawiatura_konfiguracja__polecenie_nazwa____si__samolot_gracza__l¹duj_na_lotniskowcu_gracza,
    klawiatura_konfiguracja__polecenie_nazwa____si__statek_gracza__strzela__nie,
    klawiatura_konfiguracja__polecenie_nazwa____si__statek_gracza__strzela__tak,
    klawiatura_konfiguracja__polecenie_nazwa____si__statek_gracza__strzela__wszystkim,

    klawiatura_konfiguracja__polecenie_nazwa____sos_nadaj,
    klawiatura_konfiguracja__polecenie_nazwa____statek__utwórz,

    klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__1_lewo,
    klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__5_lewo,
    klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__25_lewo,
    klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__100_lewo,
    klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__1_prawo,
    klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__5_prawo,
    klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__25_prawo,
    klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__100_prawo,
    klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__zero,

    klawiatura_konfiguracja__polecenie_nazwa____strza³_1,
    klawiatura_konfiguracja__polecenie_nazwa____strza³_2,
    klawiatura_konfiguracja__polecenie_nazwa____strza³__wszystkie_lufy_1,
    klawiatura_konfiguracja__polecenie_nazwa____strza³__wszystkie_lufy_2,
    klawiatura_konfiguracja__polecenie_nazwa____strza³__wszystkie_wybrane_1,
    klawiatura_konfiguracja__polecenie_nazwa____strza³__wszystkie_wybrane_2,

    klawiatura_konfiguracja__polecenie_nazwa____strza³__broñ_indeks_zmieniaj,
    klawiatura_konfiguracja__polecenie_nazwa____strza³__broñ_indeks_nastêpny,
    klawiatura_konfiguracja__polecenie_nazwa____strza³__broñ_indeks_poprzedni,

    klawiatura_konfiguracja__polecenie_nazwa____strzelaj_z__artyleria,
    klawiatura_konfiguracja__polecenie_nazwa____strzelaj_z__bomba_g³êbinowa,
    klawiatura_konfiguracja__polecenie_nazwa____strzelaj_z__je¿e_g³êbinowe,
    klawiatura_konfiguracja__polecenie_nazwa____strzelaj_z__pocisk,
    klawiatura_konfiguracja__polecenie_nazwa____strzelaj_z__torpeda,
    klawiatura_konfiguracja__polecenie_nazwa____strzelaj_z__wszystkie,

    klawiatura_konfiguracja__polecenie_nazwa____syrena_okrêtowa,

    klawiatura_konfiguracja__polecenie_nazwa____œwiat³a,
    klawiatura_konfiguracja__polecenie_nazwa____œwiat³a_dodatkowe,

    klawiatura_konfiguracja__polecenie_nazwa____zamknij_program,

    klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_peryskopowe,
    klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__100_plus,
    klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__25_plus,
    klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__5_plus,
    klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__1_plus,
    klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__zero,
    klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__1_minus,
    klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__5_minus,
    klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__25_minus,
    klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__100_minus,
    klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_przekraczaj_100_procent,

    klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__obrót_lewo,
    klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__obrót_prawo,
    klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__opuszczenie,
    klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__podniesienie,
    klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__przesuniêcie_w_lewo,
    klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__przesuniêcie_w_prawo,
    klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__przesuniêcie_w_przód,
    klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__przesuniêcie_w_ty³,
    klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__przechylenie_w_lewo,
    klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__przechylenie_w_prawo,
    klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__uniesienie_przodu,
    klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__uniesienie_ty³u,
    klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__prêdkoœæ_zadana_0_100,
    klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__prêdkoœæ_zadana_0_m_100,
    klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek___resetuj_obrót,
    klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__zanurzenie_zadane_peryskopowe,
    klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__zanurzenie_zadane_procent_0_100,
    klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__w³¹cz_wy³¹cz,



    komunikat__komenda,
    komunikat__lotniskowiec_aktualnie_obs³uguje_inny_samolot,
    komunikat__nale¿y_utworzyæ_statek,
    komunikat__nale¿y_wskazaæ_adresata_wiadomoœci,
    komunikat__nale¿y_wskazaæ_gracza,
    komunikat__nale¿y_wskazaæ_schemat_si,
    komunikat__nale¿y_wybraæ_samolot,
    komunikat__nale¿y_wybraæ_statek,
    komunikat__nazwa_gracza__si__powinna_byæ_niepowtarzalna___dodano_czêœæ_losow¹,
    komunikat__nazwa_gracza__si__powinna_byæ_niepowtarzalna,
    komunikat__nazwa_gracza_nie_mo¿e_byæ_pusta,
    komunikat__nazwa_gracza_powinna_byæ_niepowtarzalna,
    komunikat__nazwa_schematu_si_nie_mo¿e_byæ_pusta,
    komunikat__nie_mo¿na_nawi¹zaæ_po³aczenia_z_serwerem__handler,
    komunikat__nie_mo¿na_nawi¹zaæ_po³aczenia_z_serwerem__klient,
    komunikat__nie_mo¿na_roz³¹czyæ_samego_siebie,
    komunikat__nie_mo¿na_roz³¹czyæ_serwera,
    komunikat__nie_mo¿na_zmieniæ_samolotu,
    komunikat__nie_odnaleziono_definicji_prymitywu,
    komunikat__nie_odnaleziono_katalogu_t³umaczeñ,
    komunikat__nie_odnaleziono_plików,
    komunikat__nie_odnaleziono_pliku_konfiguracji_klawiszy,
    komunikat__nie_odnaleziono_pliku_t³umaczenia,
    komunikat__nie_odnaleziono_pliku,
    komunikat__nie_odnaleziono_statków_si_na_liœcie_graczy__czy_kontynuowaæ,
    komunikat__nie_odnaleziono_t³umaczenia_dla_konfiguracji_klawiatury,
    komunikat__nie_uda³o_siê_nadaæ_identyfikatora,
    komunikat__nie_uda³o_siê_odczytaæ_identyfikatora_gracza,
    komunikat__nie_uda³o_siê_odnaleŸæ_gracza_o_zadanym_identyfikatorze,
    komunikat__nie_uda³o_siê_po³¹czyæ_z_serwerem,
    komunikat__nie_uda³o_siê_przypomnieæ_identyfikatora,
    komunikat__nie_uda³o_siê_skasowaæ_pliku,
    komunikat__nie_uda³o_siê_wczytaæ_pliku_dŸwiêku,
    komunikat__nie_uda³o_siê_wys³aæ_danych__strumieñ__do_klienta,
    komunikat__nie_uda³o_siê_wys³aæ_danych__tekst__do_klienta,
    komunikat__nie_uda³o_siê_zainicjowaæ_dŸwiêku__sprawdŸ_dostêpnoœæ_w_systemie_bibliotek_openal__www_openal_org,
    komunikat__nie_uda³o_siê_zlokalizowaæ_gracza,
    komunikat__nie_uda³o_siê_zlokalizowaæ_samolotu_gracza,
    komunikat__nie_uda³o_siê_zlokalizowaæ_statku_do_przywrócenia,
    komunikat__nie_uda³o_siê_zlokalizowaæ_statku_gracza,
    komunikat__nie_wszyscy_gracze_otrzymali_dane_o_rozgrywce__czy_kontynuowaæ,
    komunikat__nie_wszyscy_gracze_s¹_gotowi__czy_kontynuowaæ,
    komunikat__nie_wykryto_niezgodnoœci_konfiguracji_klawiszy,
    komunikat__nie_wyœwietlaj_celownika_w_trybie_obracania_kamery_mysz¹,
    komunikat__niepoprawny_identyfikator_nadawcy,
    komunikat__nieprawid³owa_definicja_elementów_statku,
    komunikat__nieprawid³owa_definicja_l¹du,
    komunikat__nieprawid³owa_definicja_pliku_xml,
    komunikat__nieprawid³owa_definicja_pozycji_pocz¹tkowej_statków,
    komunikat__nieprawid³owa_definicja_prymitywu,
    komunikat__nieprawid³owa_definicja_schematu_si__b³êdny_numer_grupy,
    komunikat__nieprawid³owa_definicja_schematu_si__nieznana_mapa,
    komunikat__nieprawid³owa_definicja_schematu_si__nieznana_pozycje_pocz¹tkowa_statków,
    komunikat__nieprawid³owa_definicja_schematu_si__nieznany_schemat_samolotu,
    komunikat__nieprawid³owa_definicja_schematu_si__nieznany_schemat_statku,
    komunikat__nieprawid³owa_definicja_schematu_si__numer_grupy_poza_dopuszczalnym_zakresem,
    komunikat__nieprawid³owa_definicja_schematu_si,
    komunikat__nieprawid³owa_lista_graczy,
    komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_mg³a,
    komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_morze_wzburzenie,
    komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_noc,
    komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_prêdkoœci_gry,
    komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_trudnoœci_gry,
    //xNx__komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_wiatru,
    komunikat__nieprawid³owe_has³o,
    komunikat__od³¹czy³_siê,
    komunikat__operacja_zakoñczona,
    komunikat__otrzymany_tekst,
    komunikat__plik_schematów_si_o_nazwie__istnieje__czy_nadpisaæ,
    komunikat__plik_schematów_si_o_nazwie,
    komunikat__pojawi³y_siê_nastêpuj¹ce_b³êdy_podczas_wczytywania_konfiguracji_klawiszy,
    komunikat__pokój_rozmów__na_ekranie_gry__etykieta,
    komunikat__pokój_rozmów__na_ekranie_gry__podpowiedŸ,
    komunikat__pokój_rozmów__ukryj__etykieta,
    komunikat__pokój_rozmów__ukryj__podpowiedŸ,
    komunikat__po³¹czenie_od,
    komunikat__potwierdzenie,
    komunikat__pozycje_pocz¹tkowe_statków,
    komunikat__pozycje_pocz¹tkowe_statków__wed³ug_mapy,
    komunikat__radar__czu³oœæ,
    komunikat__radar__skala,
    komunikat__samolot_zg³asza_l¹dowanie,
    komunikat__serwer_zakoñczy³_grê,
    komunikat__statystyki_gry,
    komunikat__strumieñ_wyœlij,
    komunikat__tekst_wyœlij,
    komunikat__torpeda_g³êbokoœæ_zadana,
    komunikat__trafienie_nazwa__amunicja_zneutralizowana,
    komunikat__trafienie_nazwa__otrzymano_obra¿enia,
    komunikat__trafienie_nazwa__otrzymano_obra¿enia__od_siebie,
    komunikat__trafienie_nazwa__zadano_obra¿enia,
    komunikat__tryb_projektowy___id_statek,
    komunikat__tryb_projektowy___nie_odnaleziono_statku,
    komunikat__tworzenie_elementów_statku___b³¹d_wczytania_dŸwiêku,
    komunikat__tworzenie_elementów_statku___b³¹d_wczytania_tekstury,
    komunikat__tworzenie_elementów_statku___nieznany_typ_prymitywu,
    komunikat__tworzenie_l¹du___b³¹d_wczytania_dŸwiêku,
    komunikat__tworzenie_l¹du___b³¹d_wczytania_tekstury,
    komunikat__tworzenie_l¹du___nieznany_typ_prymitywu,
    komunikat__ustawiæ_nazwê_losow¹,
    komunikat__wskazanego_identyfikatora_nie_ma_na_liœcie,
    komunikat__wskazano_ju¿_wybrany_samolot,
    komunikat__wskazano_samego_siebie,
    komunikat__wykasowaæ_wszystkie_si,
    komunikat__wykryto_nastêpuj¹ce_niezgodnoœci_konfiguracji_klawiszy,
    komunikat__wyœwietlaj_celownik_w_trybie_obracania_kamery_mysz¹,
    komunikat__zakoñczyæ_dzia³anie_programu,
    komunikat__zmiana_samolotu_przyjêta,

    parametry_odczytaj__amunicja_iloœæ,
    parametry_odczytaj__amunicja_iloœæ_pocz¹tkowa,
    parametry_odczytaj__amunicja_uzbrajanie_odleg³oœæ,
    parametry_odczytaj__artyleria_iloœæ,
    parametry_odczytaj__bomby_g³êbinowe_wyrzutnie_iloœæ,
    parametry_odczytaj__broñ_obracana,
    parametry_odczytaj__dzia³a_iloœæ,
    parametry_odczytaj__falowanie_bok_skrêt_zakres,
    parametry_odczytaj__falowanie_bok_zakres,
    parametry_odczytaj__falowanie_góra_dó³_zakres,
    parametry_odczytaj__falowanie_przód_zakres,
    parametry_odczytaj__je¿e_g³êbinowe_wyrzutnie_iloœæ,
    parametry_odczytaj__kamera_odleg³oœæ_maksymalna,
    parametry_odczytaj__katapulta_start_z_lotniskowca__prze³adowanie_czas_milisekundy,
    parametry_odczytaj__lotniskowiec__samolot_przyœpieszanie,
    parametry_odczytaj__lotniskowiec__zasoby_odnawianie__prze³adowanie_czas_milisekundy,
    parametry_odczytaj__lufa_unoszona,
    parametry_odczytaj__lufy_iloœæ,
    parametry_odczytaj__luneta_zasiêg,
    parametry_odczytaj__obra¿enia_zadawane,
    parametry_odczytaj__obrót_k¹t_zablokowany_do,
    parametry_odczytaj__obrót_k¹t_zablokowany_od,
    parametry_odczytaj__obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny,
    parametry_odczytaj__obrót_k¹t_zablokowany_strza³_do,
    parametry_odczytaj__obrót_k¹t_zablokowany_strza³_od,
    parametry_odczytaj__obrót_szybkoœæ,
    parametry_odczytaj__podniesienie_k¹t_maksymalny,
    parametry_odczytaj__podniesienie_k¹t_minimalny,
    parametry_odczytaj__podniesienie_k¹t_pocz¹tkowy,
    parametry_odczytaj__podniesienie_szybkoœæ,
    parametry_odczytaj__prêdkoœæ_maksymalna,
    parametry_odczytaj__prêdkoœæ_ograniczenie,
    parametry_odczytaj__prêdkoœæ_przyspieszanie,
    parametry_odczytaj__prêdkoœæ_zwalnianie,
    parametry_odczytaj__prze³adowanie_czas_milisekundy,
    parametry_odczytaj__prze³adowanie_czas_milisekundy_lufa,
    parametry_odczytaj__punkty_¿ycia_maksymalne,
    parametry_odczytaj__radar_zasiêg,
    parametry_odczytaj__radio_zasiêg,
    parametry_odczytaj__skrêt_k¹t_maksymalny,
    parametry_odczytaj__skrêt_prêdkoœæ,
    parametry_odczytaj__skrêt_szybkoœæ_wychylania_steru,
    parametry_odczytaj__skrêt_wspó³czynnik_do_prêdkoœci,
    parametry_odczytaj__sonar_zasiêg,
    parametry_odczytaj__strza³_od_blokada_milisekundy,
    parametry_odczytaj__œruby_iloœæ,
    parametry_odczytaj__œruby__czy_obrót_lewo,
    parametry_odczytaj__œruby__prêdkoœæ_obrotowa_maksymalna,
    parametry_odczytaj__œruby__prêdkoœæ_obrotowa_przyspieszanie,
    parametry_odczytaj__torpedy_wyrzutnie_iloœæ,
    parametry_odczytaj__x_prymityw_odleg³oœæ,
    parametry_odczytaj__y_prymityw_najwiêksze,
    parametry_odczytaj__z_prymityw_odleg³oœæ,
    parametry_odczytaj__zanurzanie,
    parametry_odczytaj__zanurzenie_peryskopowe_do,
    parametry_odczytaj__zanurzenie_peryskopowe_do__do,
    parametry_odczytaj__zanurzenie_peryskopowe_do__od,
    parametry_odczytaj__zanurzenie_pu³ap__maksymalne,
    parametry_odczytaj__zanurzenie_pu³ap__szybkoœæ,
    parametry_odczytaj__zasiêg,
    parametry_odczytaj__zasiêg_od_parabola,

    radar__skala_spinedit__podpowiedŸ__radia,
    radar__skala_spinedit__podpowiedŸ__skala_radaru_zasiêg_radaru,
    radar__skala_spinedit__podpowiedŸ__sonaru,

    si__odpowiedŸ__jakieœ_zak³ócenia,
    si__odpowiedŸ__nie_uda³o_siê_odczytaæ_sk³adowej_wspó³rzêdnych_x,
    si__odpowiedŸ__nie_uda³o_siê_odczytaæ_sk³adowej_wspó³rzêdnych_z,
    si__odpowiedŸ__nie_uda³o_siê_odnaleŸæ_statku_nadawcy_polecenia,
    si__odpowiedŸ__nie_uda³o_siê_zidentyfikowaæ_do_kogo_zosta³o_wys³ane_polecenie,
    si__odpowiedŸ__polecenie__aktywnoœæ_podaj__aktualna_aktywnoœæ,
    si__odpowiedŸ__polecenie__aktywnoœæ_podaj__aktywnoœæ_analizowana,
    si__odpowiedŸ__polecenie__aktywnoœæ_podaj__pozycja,
    si__odpowiedŸ__polecenie__aktywnoœæ_podaj__tryb_strzelania,
    si__odpowiedŸ__polecenie__aktywnoœæ_podaj__¿ycie,
    si__odpowiedŸ__polecenie__jak_tam__patrol__1,
    si__odpowiedŸ__polecenie__jak_tam__patrol__2,
    si__odpowiedŸ__polecenie__jak_tam__patrol__3,
    si__odpowiedŸ__polecenie__jak_tam__patrol__4,
    si__odpowiedŸ__polecenie__jak_tam__p³ywanie_do_punktu__odnawianie_zasobów__1,
    si__odpowiedŸ__polecenie__jak_tam__p³ywanie_do_punktu__odnawianie_zasobów__2,
    si__odpowiedŸ__polecenie__jak_tam__p³ywanie_do_punktu__odnawianie_zasobów__3,
    si__odpowiedŸ__polecenie__jak_tam__p³ywanie_do_punktu__odnawianie_zasobów__4,
    si__odpowiedŸ__polecenie__jak_tam__pozosta³e__1,
    si__odpowiedŸ__polecenie__jak_tam__pozosta³e__2,
    si__odpowiedŸ__polecenie__jak_tam__pozosta³e__3,
    si__odpowiedŸ__polecenie__jak_tam__walka__1,
    si__odpowiedŸ__polecenie__jak_tam__walka__2,
    si__odpowiedŸ__polecenie__jak_tam__walka__3,
    si__odpowiedŸ__polecenie__l¹dowanie__ej__nie_jestem_samolotem__nie_mogê_wyl¹dowaæ,
    si__odpowiedŸ__polecenie__l¹dowanie__nie_jestem_samolotem_ale_spróbujê_siê_wzbiæ_na_falach__hop__hop__hop,
    si__odpowiedŸ__polecenie__l¹dowanie__niestety__w_tej_chwili_nie_jestem_w_stanie_podj¹æ_próby_wyl¹dowania,
    si__odpowiedŸ__polecenie__l¹dowanie__niestety__w_tej_chwili_nie_jestem_w_stanie_wystartowaæ,
    si__odpowiedŸ__polecenie__l¹dowanie__podchodzê_do_l¹dowania,
    si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_lotniskowiec__1,
    si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_lotniskowiec__2,
    si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_lotniskowiec__3,
    si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_lotniskowiec__4,
    si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_lotniskowiec__5,
    si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_lotniskowiec__6,
    si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_samolot__1,
    si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_samolot__2,
    si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_samolot__3,
    si__odpowiedŸ__polecenie__l¹dowanie__proœba__odmowa__oczekuj¹_ciebie_na_innym_lotniskowcu,
    si__odpowiedŸ__polecenie__l¹dowanie__proœba__odmowa__odmawiam__mam_zajêty_pok³ad,
    si__odpowiedŸ__polecenie__l¹dowanie__proœba__odmowa__odmawiam__musisz_poczekaæ_na_swoj¹_kolej,
    si__odpowiedŸ__polecenie__l¹dowanie__proœba__odmowa__wskazania_mówi¹__¿e_ju¿_wyl¹dowa³eœ_u_mnie,
    si__odpowiedŸ__polecenie__l¹dowanie__proœba__potwierdzam_zgodê,
    si__odpowiedŸ__polecenie__l¹dowanie__proœba__zgoda,
    si__odpowiedŸ__polecenie__l¹dowanie__proœba__zgoda__cd_1,
    si__odpowiedŸ__polecenie__l¹dowanie__przerwij__nie_l¹duje__1,
    si__odpowiedŸ__polecenie__l¹dowanie__przerwij__nie_l¹duje__2,
    si__odpowiedŸ__polecenie__l¹dowanie__przerwij__nie_l¹duje__3,
    si__odpowiedŸ__polecenie__l¹dowanie__przerwij__nie_samolot__1,
    si__odpowiedŸ__polecenie__l¹dowanie__przerwij__nie_samolot__2,
    si__odpowiedŸ__polecenie__l¹dowanie__przerwij__nie_samolot__3,
    si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nie_lotniskowiec__1,
    si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nie_lotniskowiec__2,
    si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nie_lotniskowiec__3,
    si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nie_samolot__1,
    si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nie_samolot__2,
    si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nie_samolot__3,
    si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nikt_nie_l¹duje__1,
    si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nikt_nie_l¹duje__2,
    si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nikt_nie_l¹duje__3,
    si__odpowiedŸ__polecenie__l¹dowanie__rozpoczynam_startowanie,
    si__odpowiedŸ__polecenie__niestety__lokalizacje_miejsc_odnawiania_zasobów_s¹_mi_nieznane___nie_mogê_wykonaæ_tego_zadania,
    si__odpowiedŸ__polecenie__niestety__w_tej_chwili_mam_inne_zadanie,
    si__odpowiedŸ__polecenie__niestety__w_tej_chwili_nie_mogê_wykonaæ_polecenia,
    si__odpowiedŸ__polecenie__potwierdzam_przyjêcie_zadania,
    si__odpowiedŸ__polecenie__wspó³rzêdna_y_jest_poza_dostêpnym_zasiêgiem__zosta³a_zmieniona_na,
    si__odpowiedŸ__potwierdzam_tryb_strzelania,
    si__odpowiedŸ__próbuje_mnie_zak³ócaæ,
    si__odpowiedŸ__przyj¹³em___przerywam_l¹dowanie,
    si__odpowiedŸ__przyj¹³em___rezygnacja_z_l¹dowania,
    si__odpowiedŸ__wspó³rzêdna_y_jako_wartoœæ_zanurzenia__pu³apu_powinna_byæ_nieujemna,
    si__odpowiedŸ__wys³a³_polecenie,
    si__odpowiedŸ__zagaduje__nieokreœlone,
    si__odpowiedŸ__zagaduje__odnawianie_zasobów__lotniskowiec__1,
    si__odpowiedŸ__zagaduje__odnawianie_zasobów__lotniskowiec__2,
    si__odpowiedŸ__zagaduje__odnawianie_zasobów__lotniskowiec__3,
    si__odpowiedŸ__zagaduje__patrol__1,
    si__odpowiedŸ__zagaduje__patrol__2,
    si__odpowiedŸ__zagaduje__patrol__3,
    si__odpowiedŸ__zagaduje__p³ywanie_do_punktu__odnawianie_zasobów__1,
    si__odpowiedŸ__zagaduje__p³ywanie_do_punktu__odnawianie_zasobów__2,
    si__odpowiedŸ__zagaduje__p³ywanie_do_punktu__odnawianie_zasobów__3,
    si__odpowiedŸ__zagaduje__p³ywanie_do_punktu__odnawianie_zasobów__4,
    si__odpowiedŸ__zagaduje__postój__1,
    si__odpowiedŸ__zagaduje__postój__2,
    si__odpowiedŸ__zagaduje__postój__3,
    si__odpowiedŸ__zagaduje__samolot__l¹dowanie__1,
    si__odpowiedŸ__zagaduje__samolot__l¹dowanie__2,
    si__odpowiedŸ__zagaduje__samolot__l¹dowanie__3,
    si__odpowiedŸ__zagaduje__samolot__startowanie__1,
    si__odpowiedŸ__zagaduje__samolot__startowanie__2,
    si__odpowiedŸ__zagaduje__samolot__startowanie__3,
    si__odpowiedŸ__zagaduje__walka__1,
    si__odpowiedŸ__zagaduje__walka__2,
    si__odpowiedŸ__zagaduje__walka__3,
    si__odpowiedŸ__zagaduje__walka__4,
    si__odpowiedŸ__zagaduje__walka__5,
    si__odpowiedŸ__zak³óca__1,
    si__odpowiedŸ__zak³óca__2,
    si__odpowiedŸ__zak³óca__3,
    si__odpowiedŸ__zak³ócanie__nie_udane__1,
    si__odpowiedŸ__zak³ócanie__nie_udane__2,
    si__odpowiedŸ__zak³ócanie__nie_udane__3,
    si__odpowiedŸ__zak³ócanie__odbite__1,
    si__odpowiedŸ__zak³ócanie__odbite__2,
    si__odpowiedŸ__zak³ócanie__odbite__3,
    si__odpowiedŸ__zak³ócanie__udane__1,
    si__odpowiedŸ__zak³ócanie__udane__2,
    si__odpowiedŸ__zak³ócanie__udane__3,


    si__pokój_rozmów__polecenie____jak_tam,
    si__pokój_rozmów__polecenie____l¹dowanie__przerwij,
    si__pokój_rozmów__polecenie____l¹dowanie__rezygnacja,
    si__pokój_rozmów__polecenie____l¹dowanie__zezwolenie_proœba__kurs_aktualny,
    si__pokój_rozmów__polecenie____l¹dowanie__zezwolenie_proœba__kurs_standardowy,
    si__pokój_rozmów__polecenie____si_aktywnoœæ_podaj,
    si__pokój_rozmów__polecenie____sia_Brak,
    si__pokój_rozmów__polecenie____sia_Patrol,
    si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Mnie,
    si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Punktu,
    si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów,
    si__pokój_rozmów__polecenie____sia_Postój,
    si__pokój_rozmów__polecenie____sia_Samolot__L¹dowanie,
    si__pokój_rozmów__polecenie____sia_Samolot__Startowanie,
    si__pokój_rozmów__polecenie____sia_Walka,
    si__pokój_rozmów__polecenie____sist_Brak,
    si__pokój_rozmów__polecenie____sist_Celuj_Tylko,
    si__pokój_rozmów__polecenie____sist_Nie_Celuj_Nie_Strzelaj,
    si__pokój_rozmów__polecenie____sist_Odpowiedz_Ogniem,
    si__pokój_rozmów__polecenie____sist_Strzelaj_Jak_Chcesz,

    si__pokój_rozmów__polecenie_symbol____samolot,
    si__pokój_rozmów__polecenie_symbol____samolot_nadawca,
    si__pokój_rozmów__polecenie_symbol____statek,
    si__pokój_rozmów__polecenie_symbol____statek_nadawca,


    si__wyliczeniowy_typ__aktywnoœæ__sia_Brak,
    si__wyliczeniowy_typ__aktywnoœæ__sia_Kotwice_Oczekiwanie_Na_Wci¹gniêcie,
    si__wyliczeniowy_typ__aktywnoœæ__sia_Odnawianie_Zasobów__Lotniskowiec,
    si__wyliczeniowy_typ__aktywnoœæ__sia_Patrol,
    si__wyliczeniowy_typ__aktywnoœæ__sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów,
    si__wyliczeniowy_typ__aktywnoœæ__sia_P³ywanie_Do_Punktu__Patrol,
    si__wyliczeniowy_typ__aktywnoœæ__sia_P³ywanie_Do_Punktu__Postój,
    si__wyliczeniowy_typ__aktywnoœæ__sia_Postój,
    si__wyliczeniowy_typ__aktywnoœæ__sia_Samolot__L¹dowanie,
    si__wyliczeniowy_typ__aktywnoœæ__sia_Samolot__L¹dowanie__Hamowanie,
    si__wyliczeniowy_typ__aktywnoœæ__sia_Samolot__L¹dowanie__Podchodzenie,
    si__wyliczeniowy_typ__aktywnoœæ__sia_Samolot__Startowanie,
    si__wyliczeniowy_typ__aktywnoœæ__sia_Walka,
    si__wyliczeniowy_typ__aktywnoœæ__sia_Walka__P³ywanie_Do_Punktu,
    si__wyliczeniowy_typ__aktywnoœæ__sia_Walka__Torpedy_Ucieczka,

    si__wyliczeniowy_typ__strzelanie_tryb__sist_Brak,
    si__wyliczeniowy_typ__strzelanie_tryb__sist_Celuj_Tylko,
    si__wyliczeniowy_typ__strzelanie_tryb__sist_Nie_Celuj_Nie_Strzelaj,
    si__wyliczeniowy_typ__strzelanie_tryb__sist_Odpowiedz_Ogniem,
    si__wyliczeniowy_typ__strzelanie_tryb__sist_Strzelaj_Jak_Chcesz,


    s³owo__brak__du¿¹_liter¹,
    s³owo__brak__ma³¹_liter¹,
    s³owo__czas,
    s³owo__grupa__du¿¹_liter¹,
    s³owo__grupa__ma³¹_liter¹,
    s³owo__identyfikator,
    s³owo__ktoœ,
    s³owo__lotniskowiec,
    s³owo__mapa,
    s³owo__namiar,
    s³owo__nie,
    s³owo__odleg³oœæ,
    s³owo__samolot,
    s³owo__si³a,
    s³owo__sojusznicy,
    s³owo__tak,
    s³owo__wiatr,
    s³owo__wspó³rzêdne,
    s³owo__wszyscy,

    statystyki__log__amunicja_wystrzelona_iloœæ,
    statystyki__log__amunicja_wystrzelona_obra¿enia_zadawane,
    statystyki__log__celnoœæ_procent,
    statystyki__log__czas_do_zatoniêcia_najd³u¿szy,
    statystyki__log__czas_do_zatoniêcia_najkrótszy,
    statystyki__log__czas_do_zatoniêcia_suma,
    statystyki__log__czas_do_zatoniêcia_œredni,
    statystyki__log__obra¿enia_otrzymane,
    statystyki__log__obra¿enia_otrzymane_w_tym_od_sojuszników,
    statystyki__log__obra¿enia_otrzymane_w_tym_z_kolizji,
    statystyki__log__obra¿enia_otrzymane_z_zak³óceñ,
    statystyki__log__obra¿enia_zadane_amunicja,
    statystyki__log__obra¿enia_zadane_amunicja_w_tym_sojusznikom,
    statystyki__log__obra¿enia_zadane_taranowanie,
    statystyki__log__obra¿enia_zadane_taranowanie_w_tym_sojusznikom,
    statystyki__log__odnawianie_zasobów_iloœæ_razy,
    statystyki__log__taranowania_iloœæ,
    statystyki__log__taranowania_iloœæ_sojuszników,
    statystyki__log__trafienia,
    statystyki__log__zak³ócenia_nieudane,
    statystyki__log__zak³ócenia_odbite_cudze,
    statystyki__log__zak³ócenia_odbite_w³asne,
    statystyki__log__zak³ócenia_udane,
    statystyki__log__zatoniêcia,
    statystyki__log__zatopienia,
    statystyki__log__zatopienia_w_tym_sojuszników,

    statystyki__nag³ówek__amunicja_wystrzelona_iloœæ,
    statystyki__nag³ówek__amunicja_wystrzelona_obra¿enia_zadawane,
    statystyki__nag³ówek__celnoœæ_procent,
    statystyki__nag³ówek__czas_do_zatoniêcia_najd³u¿szy,
    statystyki__nag³ówek__czas_do_zatoniêcia_najkrótszy,
    statystyki__nag³ówek__czas_do_zatoniêcia_suma,
    statystyki__nag³ówek__czas_do_zatoniêcia_œredni,
    statystyki__nag³ówek__identyfikator,
    statystyki__nag³ówek__l_p,
    statystyki__nag³ówek__nazwa,
    statystyki__nag³ówek__obra¿enia_otrzymane,
    statystyki__nag³ówek__obra¿enia_otrzymane_w_tym_od_sojuszników,
    statystyki__nag³ówek__obra¿enia_otrzymane_w_tym_z_kolizji,
    statystyki__nag³ówek__obra¿enia_otrzymane_z_zak³óceñ,
    statystyki__nag³ówek__obra¿enia_zadane_amunicja,
    statystyki__nag³ówek__obra¿enia_zadane_amunicja_w_tym_sojusznikom,
    statystyki__nag³ówek__obra¿enia_zadane_taranowanie,
    statystyki__nag³ówek__obra¿enia_zadane_taranowanie_w_tym_sojusznikom,
    statystyki__nag³ówek__odnawianie_zasobów_iloœæ_razy,
    statystyki__nag³ówek__samolot,
    statystyki__nag³ówek__statek,
    statystyki__nag³ówek__taranowania_iloœæ,
    statystyki__nag³ówek__taranowania_iloœæ_sojuszników,
    statystyki__nag³ówek__trafienia,
    statystyki__nag³ówek__zak³ócenia_nieudane,
    statystyki__nag³ówek__zak³ócenia_odbite_cudze,
    statystyki__nag³ówek__zak³ócenia_odbite_w³asne,
    statystyki__nag³ówek__zak³ócenia_udane,
    statystyki__nag³ówek__zatoniêcia,
    statystyki__nag³ówek__zatopienia,
    statystyki__nag³ówek__zatopienia_w_tym_sojuszników
      : string;
  end;//---//TT³umaczenie_Komunikaty_r


  TSchematy_Lista_r = record
    czy_lotniskowiec__sl,
    czy_samolot__sl
      : boolean;
    id__sl,
    nazwa__sl,
    opis__sl,
    plik_nazwa__sl,
    treœæ__sl
      : string; // string TWieloosobowe_String; //ShortString
  end;//---//TSchematy_Lista_r

  TSchematy_Lista_r_t = array of TSchematy_Lista_r;


  TPozycja_Pocz¹tkowa_Parametry_r = record
    korekta_obrót,
    korekta_x,
    korekta_z,
    odstêp_x,
    patrol_promieñ,
    patrol_x,
    patrol_z,
    patrol__tylny_promieñ,
    patrol__tylny_x,
    patrol__tylny_z,
    z
     : integer;
  end;//---//TPozycja_Pocz¹tkowa_Parametry_r

  TWygl¹d_Kolor_Definicja_r = record
    kolor_vector : GLS.VectorTypes.TVector4f;
    kolor_definicja_nazwa : string;
  end;//---//TWygl¹d_Kolor_Definicja_r

  TWygl¹d_Liczba_Definicja_r = record
    liczba : real;
    liczba_definicja_nazwa : string;
  end;//---//TWygl¹d_Liczba_Definicja_r

  TKlawiatura_Konfiguracja_r = record
    klawisz : word;
    czy_mysz,
    mysz_niezdefiniowana,
    plus_alt,
    plus_ctrl,
    plus_shift
      : boolean;
    polecenie__nazwa,
    polecenie__t³umaczenie
      : string;
  end;//---//TKlawiatura_Konfiguracja_r

  TSI__Statek_Znany_r = record
    id_grupa__sisz,
    id_statek__sisz
      : integer;
  end;//---//TSI__Statek_Znany_r

  TZegar_Pozorny_r = record
  // Wywo³anie ka¿dego TTimer, tGLAsyncTimerTimer powoduje przyciêcia (szarpniêcia) p³ynnoœci gry zale¿nie od czasu trwania operacji wykonywanych w zegarze.
    oczekiwanie_milisekundy : integer;
    w³¹czony : boolean;
    ostatnie_wywo³anie : TDateTime;
  end;//---//TZegar_Pozorny_r


  TStatek = class( TGLDummyCube )
  private
    { Private declarations }
    amunicja_rodzaj_wybrana__artyleria, // Jakie rodzaje amunicji s¹ ustawione do strza³u (g³ównie aby zapamiêtaæ konfiguracje u klientów).
    amunicja_rodzaj_wybrana__bomba_g³êbinowa,
    amunicja_rodzaj_wybrana__je¿e_g³êbinowe,
    amunicja_rodzaj_wybrana__pocisk,
    amunicja_rodzaj_wybrana__torpeda,
    amunicja_rodzaj_wybrana__wszystkie, //---// Jakie rodzaje amunicji s¹ ustawione do strza³u (g³ównie aby zapamiêtaæ konfiguracje u klientów).
    broñ_indeks_zmieniaj, // Po strzale nie przechodzi na kolejn¹ broñ z danej kategorii (rodzaju) tylko ci¹gle próbuje strzelaæ t¹ sama broni¹ (tym samym dzia³em).
    celowanie__bronie_osobno, // Broñ korzysta z w³asnego punktu celowania a nie z punktu celowania dla statku.
    celownicze_linie_unoœ,
    celownik_linia_bez_falowania__pozycja_y_dostosuj__kamera_pod_wod¹, // Aby przeliczenie by³o wykonywane tylko gdy zmieni¹ siê odpowiednie parametry.
    czy_lotniskowiec, // Statek jest lotniskowcem.
    czy_samolot, // Statek jest samolotem z lotniskowca.
    czy_samolot__kolizja, // Aby samolot nie wsi¹ka³ w obiekty (l¹d, lotniskowiec) po wyl¹dowaniu, u klienta nie falowa³ na lotniskowcu.
    czy_samolot__kolizja__kotwica,
    czy_samolot__na_lotniskowcu, // Samolot jest na lotniskowcu.
    czy_schemat_samolot_zmiana, // Aby zmienia³ siê schemat statku gdy opcja przywracania statków po zatoniêciu jest wy³¹czona.
    czy_usun¹æ_statek,
    czy_zanurzanie, // Statek mo¿e siê zanurzaæ (samolot nie ma zanurzania na true).
    dŸwiêki__komunikat__uszkodzone, // Aby sprawdzaæ dla komunikatów dŸwiêkowych czy powsta³o lub zosta³o naprawione uszkodzenie.
    grawitacja_opadanie_obra¿enia_naliczono, // Aby podczas jednego upadku naliczy³ obra¿enia tylko jeden raz.
    lotniskowiec__gotowy_na_przyjêcie_samolotu, // Lotniskowiec przyj¹³ kurs i prêdkoœæ dogodne dla l¹dowania samolotu.
    obracaj_dzia³a,
    obracaj_dzia³a__na_k¹t_wyznaczony, // Obracaj dzia³a tylko do wyznaczonego przez wspó³rzêdne celu k¹ta.
    obrót_k¹t_zablokowany_strza³_wskaŸnik_widoczne, // Aby przy wywo³ywaniu funkcji dostosowuj¹cej elementy gracza nie przechodzi³ przez pêtle broni gdy nic siê nie zmieni³o w tym zakresie ustawieñ.
    obrót_k¹t_zablokowany_wskaŸnik_widoczne, // Aby przy wywo³ywaniu funkcji dostosowuj¹cej elementy gracza nie przechodzi³ przez pêtle broni gdy nic siê nie zmieni³o w tym zakresie ustawieñ.
    podnoœ_lufy,
    podnoœ_lufy__na_k¹t_wyznaczony, // Podnoœ lufy tylko do wyznaczonego przez wspó³rzêdne celu k¹ta.
    prêdkoœæ_przyspieszanie__kolizja_spowolnienie, // Je¿eli samolot dotyka czegoœ (np. woda, l¹d, statek) to jego przyœpieszanie maleje.
    si_decyduje, // Statkiem kieruje SI. Ma celowanie__bronie_osobno = true.
    si__kolizja, // Czy podczas p³ywanie statkiem sterowanego przez SI nast¹pi³a kolizja.
    si__kolizja__prêdkoœæ_ujemna, // Czy podczas kolizji prêdkoœæ by³a ujemna.
    si__kolizja__samolot__p³ywanie_do_punktu__odnawianie_zasobów, // Czy dla samolotu sterownego przez SI nast¹pi³a kolizja z obiektem odnawiaj¹cym zasoby (samolot kr¹¿y nad wskazanym obiektem i najczêœciej nie mo¿e do niego dolecieæ wiêc aby siê oddali³ i powróci³).
    // Gdy lotniskowiec przyjmuje l¹duj¹cy samolot ustawia kurs (p³ynie):
    //   false - standardowy (p³ynie w kierunku ty³ów bazy (oddala siê od punktu pocz¹tkowego przeciwnej grupy));
    //   true - aktualny (zachowuje aktualny kurs (p³ynie w kierunku, w którym p³yn¹³ gdy otrzyma³ zg³oszenie l¹dowania)).
    si__lotniskowiec__l¹dowanie__kurs_aktualny,
    si__statek_gracza__p³ywa, // Statkiem gracza p³ywa SI.
    si__walka__p³ywanie_do_punktu__zbli¿anie, // Oznacza, ¿e dop³ynie do wskazanego punktu (standardowo nie zmieni trybu przed osi¹gniêciem punktu docelowego).
    œwiat³a_w³¹czone, // Czy œwiat³a statku maj¹ byæ w³¹czone.
    œwiat³a_dodatkowe_w³¹czone, // Czy œwiat³a dodatkowe statku maj¹ byæ w³¹czone.
    zanurzenie_zadane_przekraczaj_100_procent, // Czy zezwalaæ na ustawienie zanurzenia zadanego na wiêcej ni¿ 100%.
    punkty_¿ycia_wskaŸnik__zanurzenie_peryskopowe__przekroczone__przeliczenie_poprzednie, // Aby sprawdziæ czy nast¹pi³a zmiana zanurzenia peryskopowego i nie ustawiaæ wartoœæ za czêsto.
    wiatr__kolizja // Wykrywanie kolizji dla obrotów i przesuwania przez wiatr.
      : boolean;

    id_grupa,
    id_gracz, // Serwer = -1 (serwer_peer_port_c), SI <= -2 (si_peer_port_c), gracze >= 1. Gdy nie ma gry to 0.
    id_statek, // Indeksowane od 0; gdy nie ma gry to gracz ma 0, samolot gracza ma 100; prezentowane s¹ od 2 rosn¹co; w trakcie gry od 0 (dla serwera: 0 gracz, 1 samolot gracza) rosn¹co.
    id_statek_schemat, // Indeks schematu wygl¹du statku.
    id_statek_schemat__samolot_zmieñ_na, // Indeks schematu wygl¹du statku (samolotu) na jaki zmieniæ (-1 - brak zmiany).
    id_statek__lotniskowiec_dla_samolotu__samolot_zmieñ_na, // Na jakim statku nastêpuje zmiana samolotu gracza (np. na lotniskowcu sojusznika).
    id_statek__lotniskowiec__ma_samolot_na_pok³adzie, // Identyfikator samolotu, który jest na lotniskowcu (-99 brak).
    // Dla lotniskowca identyfikator samolotu (id_statek), który zamierza wyl¹dowaæ, wyl¹dowa³ lub startuje z lotniskowca;
    // dla samolotu identyfikator lotniskowca (id_statek), na którym zamierza wyl¹dowaæ, wyl¹dowa³ lub startuje;
    // dla samolotu gdy równe -1 oznacza, ¿e samolot l¹duje nie na lotniskowcu;
    // -99 brak.
    id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie,
    artyleria_ostatni_strza³_indeks, // Indeks artylerii, która ostatnio wystrzeli³a.
    bomba_g³êbinowa_ostatni_strza³_indeks, // Indeks wyrzutni bomb g³êbinowych, która ostatnio wystrzeli³a.
    dzia³o_ostatni_strza³_indeks, // Indeks dzia³a, które ostatnio wystrzeli³o.
    dŸwiêk_silnika_aktualny, // Aktualnie odtwarzany dŸwiêk silnika dla danej prêdkoœci statku.
    je¿e_g³êbinowe_ostatni_strza³_indeks, // Indeks wyrzutni je¿y g³êbinowych, która ostatnio wystrzeli³a.
    torpedy_wyrzutnia_ostatni_strza³_indeks, // Indeks wyrzutni torped, która ostatnio wystrzeli³a.

    falowanie_opóŸnienie, // Aby falowanie statków by³o asynchroniczne bêdzie siê rozpoczynaæ z ró¿nym opóŸnieniem.

    kamera_odleg³oœæ_maksymalna, // Maksymalna odleg³oœæ kamery od statku.
    lotniskowiec__zasoby_odnawianie__prze³adowanie_czas_milisekundy, // Czas potrzebny na jeden cykl odnawiania zasobów samolotów na lotniskowcu.
    luneta_zasiêg, // Maksymalny zasiêg przybli¿enia.
    patrol_losowy__licznik, // 0 >= patrol po okrêgu, 0 < patrol losowy.
    patrol_po_okrêgu__k¹t_aktualny, // Podczas patrolu po okrêgu jest to k¹t aktualnego obrotu si__punkt_zadany__wspó³rzêdne wzglêdem œrodka obszaru patrolu.
    prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie_czas_milisekundy, // Czas potrzebny na prze³adowanie katapulty samolotów na lotniskowcu.
    radar_zasiêg, // Maksymalny zasiêg radaru.
    radio_zasiêg, // Maksymalny zasiêg radia.
    samolot__kolizja_bufor, // Aby samolotem nie trzês³o podczas l¹dowania / startu 'buforuje' detekcjê kolizji.
    samolot__l¹dowanie__podchodzenie_krok, // Krok naprowadzania samolotu na miejsce l¹dowania (im mniejszy tym bli¿ej miejsca l¹dowania).
    si__p³ywanie_do_punktu__odnawianie_zasobów__trwanie_modyfikator_losowy__czas_sekundy_i, // Losowa modyfikacja czasu trwania trybu odnawiania zasobów (sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów).
    si__p³ywanie_losowe__zmiana_sekundy, // Po jakim czasie nast¹pi zmiana p³ywania losowego przez SI.
    si__p³ywanie_losowe__skrêt__zmiana_sekundy, // Po jakim czasie nast¹pi zmiana skrêtu p³ywania losowego przez SI.
    si__p³ywanie_losowe__zanurzenie_pu³ap__zmiana_sekundy, // Po jakim czasie nast¹pi zmiana zanurzenia pu³apu p³ywania losowego przez SI.
    si__p³ywanie_losowe__skrêt__k¹t_pocz¹tkowy, // K¹t w jakim jest skierowany statek (lewo - prawo) podczas losowania kierunku skrêtu.
    si__p³ywanie_losowe__skrêt__k¹t_zakres, // K¹t po skrêcaniu, o który przerwaæ skrêcanie.
    si__walka__p³ywanie_do_punktu__cel__id_statek, // Id celu wybranego przez SI (-99 gdy brak).
    si__walka__p³ywanie_do_punktu__trwanie_modyfikator_losowy__czas_sekundy_i, // Wartoœæ losowa modyfikuj¹ca czas co jaki si mo¿e prze³¹czaæ siê miêdzy trybami walki.
    si__zagaduje_sekundy__modyfikator_losowy_i, // Losowa modyfikacja czasu jak czêsto SI zagaduje.
    si__zak³óca_sekundy__modyfikator_losowy_i, // Losowa modyfikacja czasu jak czêsto SI próbuje zak³ócaæ.
    sonar_zasiêg // Maksymalny zasiêg sonaru (0 - nieaktywny).
    //wygl¹d_elementy_nazwa_numer // Numer ostatnio utworzonego obiektu wygl¹du statku.
      : integer;

    komunikat__torpedy_alarm__id_amunicja__obserwowana, // Id najbli¿szej wykrytej i obserwowanej torpedy lub -99 gdy brak.
    lotniskowiec__samolot_przyjmij_od³¹cz__czas_sekundy_i,// Czas ostatniego sprawdzania czy przyj¹æ / od³¹czyæ samolot (aby podczas l¹dowania na lotniskowcu nie trzês³o samolotem sprawdza z pewnym opóŸnieniem czy przyj¹æ samolot).
    lotniskowiec__zasoby_odnawianie__czas_sekundy_i, // Czas rozpoczêcia prze³adowywania jednego cyklu odnawiania zasobów samolotów na lotniskowcu.
    prêdkoœæ_przyspieszanie__start_z_lotniskowca__czas_sekundy_i, // Czas rozpoczêcia prze³adowywania katapulty samolotów na lotniskowcu.
    punkty_¿ycia__w_zanurzeniu_przeliczaj__czas_przeliczenia_ostatniego_sekundy_i, // Czas ostatniego przeliczenia strat punktów ¿ycia ze wzglêdu na zanurzenie.
    schemat_samolot_zmiana_czas_sekundy_i, // Czas, w którym rozpoczê³a siê zmiana schematu samolotu ( 0 <> trwa proces zmiany samolotu na inny samolot, 0 = zmiana samolotu siê nie odbywa).
    si__aktywnoœæ__okreœlenie_ostatnie_sekundy_i, // Czas ostatniego okreœlania rodzaju aktywnoœci SI.
    si__p³ywanie_do_punktu__odnawianie_zasobów__rozpoczêcie_czas_sekundy_i, // Czas rozpoczêcia p³yniêcia do punktu w celu odnowienia zasobów, te¿ czas wyjœcia bezpoœrednio z tego trybu (nie trzeba tej wartoœci zerowaæ po wyjœciu z trybu odnawiania zasobów (sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów)).
    si__p³ywanie_losowe__zmiana_ostatnia_sekundy_i, // Czas ostatniej zmiany p³ywania losowego przez SI.
    si__p³ywanie_losowe__skrêt__zmiana_ostatnia_sekundy_i, // Czas ostatniej zmiany skrêtu p³ywania losowego przez SI.
    si__p³ywanie_losowe__zanurzenie_pu³ap__zmiana_ostatnia_sekundy_i, // Czas ostatniej zmiany zanurzenia pu³apu p³ywania losowego przez SI.
    si__torpedy_alarm__id_amunicja__obserwowana, // Id najbli¿szej wykrytej i obserwowanej torpedy lub -99 gdy brak.
    si__torpedy_alarm__id_amunicja__unikana, // Id unikanej torpedy lub -99 gdy brak.
    si__uszkodzenia_wykryto__czas_sekundy_i, // Czas otrzymania obra¿eñ od amunicji lub od kolizji z innym statkiem.
    si__walka__p³ywanie_do_punktu__rozpoczêcie_czas_sekundy_i, // Czas rozpoczêcia p³yniêcia do punktu w trakcie walki.
    si__wystartowanie__czas_sekundy_i, // Czas, w którym samolot wystartowa³.
    si__zagaduje__ostatnie_sekundy_i, // Czas ostatniego zagadania przez SI.
    si__zak³óca__ostatnie_sekundy_i, // Czas ostatniej próby zak³ócania przez SI.
    sos__czas_utworzenia_ostatniego_sekundy_i, // Czas utworzenia ostatniego sygna³u sos dla statku.
    statek__utworzenie_czas_i, // Czas utworzenia statku.
    œlad_torowy__czas_utworzenia_ostatniego_milisekundy_i, // Czas utworzenia ostatniego œladu torowego dla statku.
    toniêcie__czas_sekundy_i, // Czas, w którym rozpoczê³o siê toniêcie.
    uszkodzone_czas_sekundy_i__kotwica, // 0 - nie jest uszkodzone, <> 0 - zosta³o trafione i nie mo¿na go u¿ywaæ.
    uszkodzone_czas_sekundy_i__radar, // 0 - nie jest uszkodzone, <> 0 - zosta³o trafione i nie mo¿na go u¿ywaæ.
    uszkodzone_czas_sekundy_i__radio, // 0 - nie jest uszkodzone, <> 0 - zosta³o trafione i nie mo¿na go u¿ywaæ.
    uszkodzone_czas_sekundy_i__sonar, // 0 - nie jest uszkodzone, <> 0 - zosta³o trafione i nie mo¿na go u¿ywaæ.
    uszkodzone_czas_sekundy_i__ster, // 0 - nie jest uszkodzone, <> 0 - zosta³o trafione i nie mo¿na go u¿ywaæ. Najwiêksza wartoœæ ze wszystkich sterów statku.
    uszkodzone_czas_sekundy_i__ster_g³êbokoœci, // 0 - nie jest uszkodzone, <> 0 - zosta³o trafione i nie mo¿na go u¿ywaæ. Najwiêksza wartoœæ ze wszystkich sterów g³êbokoœci statku.
    uszkodzone_czas_sekundy_i__œruba, // 0 - nie jest uszkodzone, <> 0 - zosta³o trafione i nie mo¿na go u¿ywaæ. Najwiêksza wartoœæ ze wszystkich œrub statku.
    zak³ócanie__czas_próba_ostatnia_sekundy_i // Czas ostatniej próby zak³ócania statku.
      : Int64;

    amunicja_zanurzenie_g³êbokoœæ_zadana,
    //celowanie_precyzja__falowanie_niwelowanie,
    celowanie_precyzja__obrót,
    celowanie_precyzja__podniesienie,

    falowanie_bok_skrêt, // Iloœæ stopni wychylenia w bok z powodu skrêtu (aktualnego).
    falowanie_bok_skrêt_zakres, // Zakres maksymalny wychylenia z powodu skrêtu (aktualnego).
    falowanie_bok_zakres, // Iloœæ stopni wychylenia w jeden bok z powodu falowania.
    falowanie_bok_wychylenie_aktualne, // Zakres wychylenia w bok wyra¿any w stopniach od 0 do 360 dla funkcji sinus.

    falowanie_góra_dó³_zakres, // Wysokoœæ unoszenia (i obni¿ania) z powodu falowania.
    falowanie_góra_dó³_wysokoœæ_aktualna, // Zakres unoszenia (i obni¿ania) z powodu falowania wyra¿any w stopniach od 0 do 360 dla funkcji sinus.

    falowanie_przód_pu³ap, // Iloœæ stopni wychylenia w przód i ty³ z powodu wznoszenia i opadania (aktualnego).
    falowanie_przód_ruch, // Iloœæ stopni wychylenia w przód i ty³ z powodu prêdkoœci ruchu (aktualnego).
    falowanie_przód_zakres, // Iloœæ stopni wychylenia w przód z powodu falowania.
    falowanie_przód_wychylenie_aktualne, // Zakres wychylenia w przód wyra¿any w stopniach od 0 do 360 dla funkcji sinus.

    grawitacja_opadanie_szybkoœæ_aktualna, // Jak szybko opada w danym momencie (aby statek uniesiony nad wodê, w wyniku kolizji czy inaczej, opad³ do poziomu wody).

    lotniskowiec__samolot_przyœpieszanie, // Jak bardzo katapulta lotniskowca przyœpiesza samolot podczas startu.
    lotniskowiec__zasoby_odnawianie__prze³adowanie_procent, // Aktualny procent odnawiania zasobów samolotów na lotniskowcu (-2 - odnawianie oczekuje na spe³nienie warunków do ³adowania, -1 - rozpoczyna siê kolejny cykl ³adowania, 100 - nastêpuje odnowienie zasobów, 101 - nie znaleziono zasobów do odnowienia, <0 - 99> - odnawianie jest w trakcie ³adowania). Jest to cecha samolotu a nie lotniskowca.
    lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__dŸwiêki__kopia, // Kopia wartoœci na potrzeby odtwarzania dŸwiêków.

    prêdkoœæ_aktualna, // Aktualna prêdkoœæ statku (wynika z prêdkoœæ_wspó³czynnik * prêdkoœæ_aktualna_procent__bezwzglêdny).
    // Jaki procent maksymalnej prêdkoœæ statku stanowi aktualna prêdkoœæ bez uwzglêdniania spowolnieñ
    // (np. w warunkach, w których statki s¹ spowalniane (zanurzenie) o 20% faktyczna prêdkoœæ statku wynosi 80% maksymalnej prêdkoœci)
    // prêdkoœæ_aktualna_procent__bezwzglêdny = 100, prêdkoœæ_aktualna_procent__wzglêdny = 80.
    prêdkoœæ_aktualna_procent__bezwzglêdny, // Aktualny procent prêdkoœci (od -100 do 100).
    prêdkoœæ_aktualna_procent__wzglêdny, // Aktualny procent prêdkoœci (od -100 do 100).
    prêdkoœæ_maksymalna, // Jak szybko p³ynie.
    prêdkoœæ_obrotu_aktualna, // Aktualna prêdkoœæ obrotu statku.
    prêdkoœæ_ograniczenie, // Do jakiej wartoœci procentowej mo¿e zmieniaæ siê prêdkoœæ statku podczas kolizji (np. tryb gry, w którym elementy otoczenia przyœpieszaj¹ statek). Do 2`500.
    prêdkoœæ_przyspieszanie, // Jak szybko silnik modyfikuje prêdkoœæ.
    prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__k¹t, // K¹t w poziomie miêdzy samolotem a lotniskowcem, na którego pok³adzie jest samolot (potrzebne do obliczania gotowoœci katapulty).
    prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent, // Aktualny procent prze³adowania katapulty samolotów na lotniskowcu (-100 - katapult jest uruchomiona, -1 - katapulta oczekuje na spe³nienie warunków do ³adowania, 100 - katapult jest gotowa do uruchomienia, <0 - 99> - katapulta jest w trakcie ³adowania). Katapulta jest tutaj cech¹ samolotu a nie lotniskowca.
    prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__dŸwiêki__kopia, // Kopia wartoœci na potrzeby odtwarzania dŸwiêków.
    prêdkoœæ_zadana_procent, // Zadany procent prêdkoœci (od -100 do 100).
    prêdkoœæ_zwalnianie, // Jak szybko statek (sam) zwalnia.
    prêdkoœæ__kolizja_zwalnianie, // Jak szybko statek zwalnia w wyniku kolizji.

    skrêt_k¹t_maksymalny,
    skrêt_aktualny_procent, // Aktualny procent skrêtu (od -100 do 100).
    skrêt_szybkoœæ_wychylania_steru, // Jak szybko siê zmienia.
    skrêt_prêdkoœæ, // Jak szybko skrêca (zwrotnoœæ).
    skrêt_wspó³czynnik_do_prêdkoœci, // Do jakiego procentu osi¹gniêtej prêdkoœci spowalnia skrêcanie. Je¿eli wolno p³ynie to s³abiej skrêca np. dla parametru o wartoœci 25 dopiero gdy statek osi¹gnie prêdkoœæ 25% bêdzie skrêca³ z pe³n¹ wydajnoœci¹, przy mniejszej prêdkoœci (rozpêdzanie siê) wydajnoœæ skrêtu bêdzie s³absza.
    skrêt_zadany_procent, // Zadany procent skrêtu (od -100 do 100).

    toniêcie__obrót__lewo_prawo, // Jak szybko unosz¹ / obni¿aj¹ siê boki statku.
    toniêcie__obrót__przód_ty³, // Jak szybko unosi / obni¿a siê dziób / rufa.
    toniêcie__prêdkoœæ_w_dó³, // Jak szybko statek siê zanurza.

    punkty_¿ycia_aktualne, // Aktualna iloœæ punktów ¿ycia.
    punkty_¿ycia_maksymalne, // £¹czna iloœæ punktów ¿ycia (tyle ma punktów je¿eli nie zosta³ uszkodzony).
    punkty_¿ycia_procent_zosta³o, // Aktualna procentowa iloœæ punktów ¿ycia.

    si__cel_odleg³oœæ,
    si__samolot_zanurzenie_pu³ap__zadane, // Pu³ap wyznaczony dla samolotu przez SI.

    zanurzenie_peryskopowe_do, // Do jakiej g³êbokoœci statek jest w stanie korzystaæ z peryskopu.
    zanurzenie_pu³ap__aktualne, // Aktualna g³êbokoœæ zanurzenia (wartoœæ ujemna jest ponad wod¹ - gdy siê unosi). Dla samolotów jest to aktualny pu³ap (wartoœæ ujemna jest po wod¹ - gdy siê zanurzy).
    zanurzenie_pu³ap__aktualne_procent, // Aktualny procent zanurzenia (od 0 do 100).
    zanurzenie_pu³ap__kolizja_zwalnianie, // Jak bardzo zmniejsza prêdkoœæ zanurzania i wynurzania w wyniku kolizji.
    zanurzenie_pu³ap__maksymalne, // Jak g³êboko mo¿e siê zanurzyæ.
    zanurzenie_pu³ap__szybkoœæ, // Jak szybko siê zanurza i wynurza.
    zanurzenie_pu³ap__szybkoœæ_aktualna, // Jak szybko siê zanurza i wynurza w danym momencie.
    zanurzenie_pu³ap__zadane_procent // Zadany procent zanurzenia (od 0 do 100). Dla samolotów jest to zadany procent szybkoœci wznoszenia, opadania (od -100 opadanie do 100 wznoszenie).
      : real;

    dŸwiêki__komunikat__absolute_position_y, // Aby sprawdzaæ dla komunikatów dŸwiêkowych czy statek gracza zmieni³ swoje parametry.
    komunikat__torpedy_alarm__odleg³oœæ, // Odleg³oœæ do najbli¿szej wykrytej torpedy.
    punkty_¿ycia__wskaŸnik__wielkoœæ_z_pe³nym_¿yciem,
    si__l¹dowanie_punkt_korekta_x, // Aby wszystkie samoloty nie l¹dowa³y w tym samym punkcie przesuwa punkt l¹dowania (l¹dowanie nie na lotniskowcu).
    si__torpedy_alarm__odleg³oœæ, // Odleg³oœæ do najbli¿szej wykrytej torpedy.
    si__walka__p³ywanie_do_punktu__prêdkoœæ_zadana_procent_korekta, // O jak¹ wartoœæ zwiêksza standardow¹ prêdkoœæ p³ywania do punktu w trybie walki.
    œlad_torowy__d³ugoœæ,
    œlad_torowy__szerokoœæ,
    x_prymityw_odleg³oœæ, // Odleg³oœæ miêdzy najbardziej oddalonymi wspó³rzêdnymi X prymitywów tworz¹cych statek (wspó³rzêdne musz¹ mieæ przeciwne znaki) (szerokoœæ). Nie mo¿e byæ równe zero, gdy¿ jest mianownikiem w dzieleniach lub wartoœci¹ przez, któr¹ siê przemna¿a.
    y_prymityw_najwiêksze, // Najwiêksza wartoœæ wspó³rzêdnej Y prymitywów tworz¹cych statek (wysokoœæ). Nie mo¿e byæ równe zero, gdy¿ jest mianownikiem w dzieleniach lub wartoœci¹ przez, któr¹ siê przemna¿a.
    z_prymityw_odleg³oœæ // Odleg³oœæ miêdzy najbardziej oddalonymi wspó³rzêdnymi Z prymitywów tworz¹cych statek (wspó³rzêdne musz¹ mieæ przeciwne znaki) (d³ugoœæ). Nie mo¿e byæ równe zero, gdy¿ jest mianownikiem w dzieleniach lub wartoœci¹ przez, któr¹ siê przemna¿a.
      : single;

    statek__czas_do_zatoniêcia_s : string;

    grawitacja_opadanie_obra¿enia_wylicz : function ( const punkty_¿ycia_maksymalne_f, grawitacja_opadanie_szybkoœæ_aktualna_f : real ) : real of object;
    lotniskowiec__samoloty_wszystkie__punkty_¿ycia_zero : procedure( const statek_lotniskowiec_f, statek_niszcz¹cy_f : TStatek; const rodzaj_f : smallint = -1 ) of object;

    punkty_¿ycia__wskaŸnik__kolor : GLS.Color.TGLColorVector;

    amunicja_rodzaj_zbiór : TAmunicja_Rodzaj_Zbiór;
    celowanie__tryb : TCelowanie_Tryb;
    si_aktywnoœæ,
    si_aktywnoœæ__polecenie // Polecenie otrzymane od gracza.
      : TSi_Aktywnoœæ;
    si_strzelanie_tryb : TSi_Strzelanie_Tryb;
    si__statek_gracza__strzela : TSi__Statek_Gracza__Strzela; // Statkiem gracza strzela SI (wartoœci jak w opisie pola SI__Strzela__Statek_Gracza_RadioGroup).

    si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne, // Wspó³rzêdne zadane w poleceniu dla SI (W = 0 - wspó³rzêdna Y nie jest okreœlona lub jest dowolna).
    si__kolizja__wspó³rzêdne, // Wspó³rzêdne statku w momencie kolizji.
    si__punkt_zadany__wspó³rzêdne, // Wspó³rzêdne, do których SI kieruje statek.
    œlad_torowy__pozycja_ostatniego // Pozycja utworzonego ostatniego œladu torowego dla statku.
      : GLS.VectorTypes.TVector4f;

    kamera_na_statek_pozycja, // W którym miejscu ma siê ustawiæ kamera po ustawieniu widoku ze statku.
    kamera_za_statkiem_pozycja // Przesuniêcie kamery po ustawieniu widoku za statkiem.
      : TWieloosobowe__Wektor_4;

    cel_wspó³rzêdne_bezwzglêdne_affine_vektor : GLS.VectorGeometry.TAffineVector;

    kotwica_ruch_etap__st : TKotwica_Ruch_Etap; // Dopuszczalne wartoœci kre_Stop, kre_W_Dó³, kre_W_Górê.

    punkty_¿ycia_wskaŸnik__efekty_tryb : TPunkty_¯ycia_WskaŸnik__Efekty_Tryb;

    statki_rozstawianie_status : TStatki_Rozstawianie_Status; // Aby nie wykrywa³ kolizji ze statkami, które s¹ w trakcie rozstawiania.

    wygl¹d_elementy_list : TList; // Lista elementów wygl¹du statku.

    kolizja_oznaczenie_string_list : TStringList;

    gra_obiekty_kontener_st : TGLBaseSceneObject;

    efekt__element_uszkodzenie_gl_dummy_cube_st,
    falowanie_gl_dummy_cube, // Dla falowania i przechy³ów aby nie zak³ócaæ ruchu statku.
    toniêcie_gl_dummy_cube, // Dla animacji toniêcia aby nie zak³ócaæ ruchu statku.
    punkty_¿ycia_gl_dummy_cube, // Kontener na wskaŸnik punktów ¿ycia.
    punkty_¿ycia_podniesienie_gl_dummy_cube // Aby przechylaæ góra dó³ wskaŸnik ¿ycia do kamery. //???
      : TGLDummyCube;

    punkty_¿ycia__ramka : TGLCube;

    punkty_¿ycia__wskaŸnik
      : TGLCylinder;

    gracz__nazwa,
    punkty_¿ycia__napis
      : GLS.SpaceText.TGLSpaceText;

    lotniskowiec__³apacz_samolotów_dummy : Wyglad_Elementy.TSt_GLDummyCube; // Obiekt do wykrywania l¹dowania samolotu na lotniskowcu.

    dziób__brak_definicji,
    kad³ub__brak_definicji
      : Wyglad_Elementy.TSt_GLCube;

    artyleria_t : array of TArtyleria;
    dzia³a_t : array of TDzia³o;
    bomba_g³êbinowa_t,
    je¿e_g³êbinowe_t,
    torpedy_wyrzutnie_t
      : array of TTorpedy_Wyrzutnia;

    kotwica_t : array of TKotwica;
    ster_t : array of TSter;
    ster_g³êbokoœci_t : array of TSter_G³êbokoœci;
    œruby_t : array of TŒruba;

    si__statki_znane_r_t : array of TSI__Statek_Znany_r; // O jakich statkach SI posiada informacje (nie zawiera id samego siebie).

    celownicza_linia : TGLLines; // U klientów nie wskazuje prawid³owo celu (serwer nie wysy³a aktualnego ustawienie linii celowania).

    // Je¿eli ma uszkodzone radio to nic nie ma w zasiêgu.
    radar_id_l¹dy_w_zasiêgu, // L¹dy w zasiêgu radaru. '-99, -99' - gdy brak, '-99, 1, 2, 3, -99'.
    radar_id_statki_w_zasiêgu, // Statki w zasiêgu radaru. '-99, -99' - gdy brak, '-99, 1, 2, 3, -99'.
    radio_id_l¹dy_w_zasiêgu, // L¹dy, których pozycje zna z radia. '-99, -99' - gdy brak, '-99, 1, 2, 3, -99'.
    radio_id_statki_w_zasiêgu, // Statki, których pozycje zna z radia. '-99, -99' - gdy brak, '-99, 1, 2, 3, -99'.
    radio_³¹cznoœæ_id_statki_w_zasiêgu, // Statki w zasiêgu radia, z którymi mo¿e wymieniaæ dane. '-99, -99' - gdy brak, '-99, 1, 2, 3, -99'.
    sonar_id_statki_w_zasiêgu // Statki w zasiêgu sonaru. '-99, -99' - gdy brak, '-99, 1, 2, 3, -99'.
      : TWieloosobowe_String;
  public
    { Public declarations }
    constructor Create( AOwner : TGLBaseSceneObject; gl_collision_mmanager_f : TGLCollisionManager; efekt__element_uszkodzenie_gl_thor_fx_manager_f : TGLThorFXManager; const id_gracz_f, id_statek_f : integer; const wygl¹d_definicja_f : string; const prymitywy_lista_f : TSchematy_Lista_r_t; const punkty_¿ycia_wskaŸnik__material_options_f : GLS.Material.TGLMaterialOptions; const statek_create_funkcje_f : TStatek_Create_Funkcje; const t³umaczenie_komunikaty_r_f : TT³umaczenie_Komunikaty_r );
    destructor Destroy(); override;

    procedure DŸwiêków_Emitery_Utwórz( const statek_create_funkcje_f : TStatek_Create_Funkcje; const t³umaczenie_komunikaty_r_f : TT³umaczenie_Komunikaty_r );

    procedure Prêdkoœæ_Zadana_Procent_Ustaw( const prêdkoœæ_zadana_procent_f : integer );
    procedure Prêdkoœæ_Zadana_Procent_Zmieñ( const zmieñ_o_f : integer );
    procedure Skrêt_Zadany_Procent_Ustaw( const skrêt_zadany_procent_f : integer );
    procedure Skrêt_Zadany_Procent_Zmieñ( const zmieñ_o_f : integer );
    procedure Zanurzenie_Zadane_Procent_Ustaw( const zanurzenie_pu³ap__zadane_procent_f : integer );
    procedure Zanurzenie_Zadane_Procent_Zmieñ( const zmieñ_o_f : integer; const peryskopowe_f : boolean = false );

    function Grawitacja_Opadanie_Zmieñ( const delta_czasu_f : double; const grawitacja_wy³¹czona_f : boolean = false ) : real;

    procedure Prêdkoœæ_Procent_Zmieñ( const delta_czasu_f : double );
    procedure Skrêt_Procent_Zmieñ( const delta_czasu_f : double );
    procedure Zanurzenie_Procent_Zmieñ( const dno_poziom_f : single );

    procedure Prêdkoœæ_Aktualna_O_Zanurzenie_Koryguj();

    function Zanurzenie_Peryskopowe__Jako__Zadane_Procent_Wylicz() : real;
    function Zanurzenie_Peryskopowe__Utrzymywane() : boolean;
    function Zanurzenie_Peryskopowe__Przekroczone() : boolean;
    function Zanurzenie_Strza³_Przekroczone() : boolean;

    procedure Amunicja_Rodzaj_Zbiór_Wyznacz();

    procedure Cel_Wspó³rzêdne_Ustaw( const cel_wspó³rzêdne_bezwzglêdne_affine_vektor_f : GLS.VectorGeometry.TAffineVector; const statek_celownicza_linia_tylko_f : boolean = false );
    procedure Celownik_Linia_Bez_Falowania__Pozycja_Y_Dostosuj( const kamera_pod_wod¹_f : boolean; const nad_powierzchni¹_wody_utrzymuj_f : boolean = false );

    function Broñ__Amunicja_Uzupe³nij( broñ_f : array of TTorpedy_Wyrzutnia; uzupe³nienie_procent_f : real = 10 ) : boolean;
    procedure Broñ__Indeks_Zmieniaj_Ustaw(); overload;
    procedure Broñ__Indeks_Zmieniaj_Ustaw( const czy_poprzednia_f : boolean ); overload;

    function Strza³( const czy_wszystkie_bronie_f, czy_wszystkie_lufy_f, obracaj_dzia³a_f, podnoœ_lufy_f : boolean; const cel_wspó³rzêdne_f : GLS.VectorGeometry.TAffineVector ) : boolean;

    procedure Elementy_Gracza_Dostosuj( const id_grupa_gracza_f : integer; const celownik_bombowiec_widoczne_f, kamera_pod_wod¹_f, lotniskowiec__³apacz_samolotów_widoczne_f, punkty_¿ycia_wskaŸnik_widoczne__gracz_f, punkty_¿ycia_wskaŸnik_widoczne__przeciwnik_f, punkty_¿ycia_wskaŸnik_widoczne__sojusznik_f, obrót_k¹t_zablokowany_wskaŸnik_widoczne_f, obrót_k¹t_zablokowany_strza³_wskaŸnik_widoczne_f, prze³adowanie_wskaŸnik_f : boolean );
    procedure Elementy_Gracza_Widocznoœæ( const id_grupa_gracza_f : integer; const widoczne_f : boolean );

    procedure Kotwica_Ruch_Ustaw( const kotwica_ruch_etap_f : TKotwica_Ruch_Etap  );

    procedure Punkty_¯ycia__Zmieñ( const wartoœæ_f : real );
    procedure Punkty_¯ycia__W_Zanurzeniu_Przeliczaj();
    procedure Punkty_¯ycia__WskaŸnik__Efekty_Tryb_Ustaw( const material_options_f : GLS.Material.TGLMaterialOptions );
    procedure Punkty_¯ycia__WskaŸnik__Noc_Zmieñ( dzieñ_jasnoœæ_f : real );
    procedure Punkty_¯ycia__WskaŸnik__Rysuj( const gl_camera_f : TGLCamera; const wartoœæ_liczbowa_f : integer );

    procedure Uszkodzenia_Dodaj();

    function Parametry_Odczytaj( const t³umaczenie_komunikaty_r_f : TT³umaczenie_Komunikaty_r; const dane_wszystkie_f : boolean = false ) : string;

    procedure Wygl¹d_Elementy__Noc_Zmieñ( const dzieñ_jasnoœæ_f : real; const œwiat³a_miganie_funkcjonalnoœæ_aktywna_f : boolean; const wygl¹d_elementy__kolor_noc_zmieñ_f : TWygl¹d_Elementy__Kolor_Noc_Zmieñ; const czas_miêdzy_w_milisekundach_f : TCzas_Miêdzy_W_Milisekundach = nil; const œwiat³a_miganie__tylko_f : boolean = false );

    function Samolot_Na_Lotniskowcu() : TStatek;
    procedure Samolot_Przyjmij( const samolot__statek_f : TStatek; const ³apaczem_z³ap_f : boolean = false );
    procedure Samolot_Lotniskowiec_Od³¹cz();

    procedure Prêdkoœæ_Przyspieszanie__Start_Z_Lotniskowca__K¹t_Wylicz();
    procedure Prêdkoœæ_Przyspieszanie__Start_Z_Lotniskowca__Prze³adowanie();
    procedure Lotniskowiec__Zasoby_Odnawianie__Prze³adowanie();
    function Id_Statek_Schemat__Samolot_Zmieñ_Na__Ustaw( const id_statek_schemat__samolot_zmieñ_na_f : integer ) : boolean;

    function Samolot_Katapult¹_Startuj() : boolean;
    procedure Samolot__Kolizja_Bufor_Zliczaj( const czy_kolizja_f : boolean );

    function Si_Aktywnoœæ_Aktualna_Nazwa( const t³umaczenie_komunikaty_r_f : TT³umaczenie_Komunikaty_r; const czy__si_aktywnoœæ__polecenie_f : boolean = false ) : string; overload;
    function Si_Aktywnoœæ_Aktualna_Nazwa( const si_aktywnoœæ_f : TSi_Aktywnoœæ; const t³umaczenie_komunikaty_r_f : TT³umaczenie_Komunikaty_r ) : string; overload;

    function Si_Strzelanie_Tryb_Aktualny_Nazwa( const t³umaczenie_komunikaty_r_f : TT³umaczenie_Komunikaty_r ) : string;

    procedure Si_Wartoœci_Pocz¹tkowe_Ustaw( const czy_statek_f : boolean = true; const czy_bronie_f : boolean = true );
    procedure Si__Walka__P³ywanie_Do_Punktu__Wartoœci_Pocz¹tkowe_Ustaw( const si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_f : Int64 );

    procedure Œwiat³a_Miganie__OpóŸnienia_Losowe_Resetuj__Statek( const czy_œwiat³a_dodatkowe_f : boolean );

    function xNx__K¹t_Obrotu_Statku() : real;
  end;//---//TStatek

  TLufa = class( TGLDummyCube )
  private
    { Private declarations }
    amunicja_pobrana,
    strza³_gotowoœæ, // Czy jest prze³adowana.
    czy_indeks_do_strza³u_lufa, // Oznacza, ¿e ta lufa jest aktualnie ustawione do strza³ów pojedynczych.
    czy_wycelowane_podniesienie, // Czy osi¹gniêto zadany kierunek celowania podniesienia.
    milisekund_prze³adowania_do_uszkodzenia_zliczono // Czy zliczony zosta³ czas prze³adowywania lufy zanim nast¹pi³o uszkodzenie dzia³a.
      : boolean;

    prze³adowanie_czas_milisekundy__lufa : integer;

    milisekund_prze³adowania_do_uszkodzenia, // Ile czasu prze³adowywano lufê zanim nast¹pi³o uszkodzenie dzia³a.
    //strza³_czas : TDateTime;
    strza³_czas__lufa_sekundy_i // Czas wystrzelenia (do liczenia okresu prze³adowania).
      : Int64;

    prze³adowanie_procent : real; // Procent postêpu prze³adowania (100 - na³adowane).

    amunicja_wystrzelona_utwórz_jeden : procedure( AOwner : TGLBaseSceneObject; ALufa : TLufa; const obracaj_dzia³a_f : boolean; const cel_wspó³rzêdne_f : GLS.VectorGeometry.TAffineVector ) of object;

    dzia³o : TTorpedy_Wyrzutnia;

    amunicja_rodzaj : Typy_Wspolne.TAmunicja_Rodzaj; // Rodzaj amunicji dzia³a.

    statek__lu : TStatek; // Statek, na którym umiejscowiony jest obiekt (mo¿e byæ potomkiem innego obiektu ale w ramach tego statku).

    podniesienie_szybkoœæ_modyfikator, // Aby lufy podnosi³y siê z ró¿nymi prêdkoœciami.
    prze³adowanie_wskaŸnik__dystans_do_przesuniêcia,
    prze³adowanie_wskaŸnik__pozycja_wycelowany_Y // Domyœlna wysokoœæ wskaŸnika prze³adowania (je¿eli lufa nie osi¹gnie wymaganego do strza³u k¹tu to wskaŸnik siê obni¿y).
      : real;
    prze³adowanie_wskaŸnik__pozycja_roz³adowany,
    prze³adowanie_wskaŸnik__pozycja_za³adowany
      : GLS.VectorGeometry.TAffineVector;

    korpus__lufa : Wyglad_Elementy.TSt_GLCylinder;

    prze³adowanie_wskaŸnik,
    wylot_pozycja
      : TGLSphere;
  public
    { Public declarations }
    constructor Create( ATorpedy_Wyrzutnia : TTorpedy_Wyrzutnia; AStatek : TStatek; gl_collision_mmanager_f : TGLCollisionManager ); // TGLSceneObject
    destructor Destroy(); override;

    procedure Dodatkowe_Elementy_Lufy_Pozycja_Ustaw();
    function  Prze³adowanie( const delta_czasu_f : double ) : boolean;
    function Strza³( const obracaj_dzia³a_f, podnoœ_lufy_f, lufa_unoszona_f : boolean; const cel_wspó³rzêdne_f : GLS.VectorGeometry.TAffineVector ) : boolean;

    procedure Wygl¹d_Elementy__Noc_Zmieñ( const dzieñ_jasnoœæ_f : real; const wygl¹d_elementy__kolor_noc_zmieñ_f : TWygl¹d_Elementy__Kolor_Noc_Zmieñ );
  end;//---//TLufa

  TTorpedy_Wyrzutnia = class( TGLDummyCube )
  private
    { Private declarations }
    celownik_linia__widoczne,
    czy_broñ_obracana, // Je¿eli broñ siê nie obraca to jest zawsze wycelowana.
    czy_indeks_do_strza³u, // Oznacza, ¿e to dzia³o jest aktualnie ustawione do strza³ów pojedynczych.
    //czy_lufa_podnoszona, // Czy lufa rusza siê góra dó³. // Nie wiem czy dobrze rozpoznaje jakiej klasy jest dzia³o.
    czy_lufa_unoszona, // Je¿eli lufy siê nie unosz¹ to s¹ zawsze wycelowane.
    czy_wycelowany_obrót, // Czy osi¹gniêto zadany kierunek celowania obrótu.
    czy_wycelowane_podniesienie, // Czy przynajmniej jedna lufa osi¹gniêto zadane podniesienie celowania.
    si__cel__przeliczone_namiary, // Czy broñ jest ustawiona na wspó³rzêdne aktualnego celu (najpierw jest wywo³ywana funkcja obracania broni, potem przeliczania SI i je¿eli SI wyznaczy cel to broñ jest ustawiona (wycelowana) na poprzednie namiary i strzela nie tam gdzie trzeba).
    si__cel__wyznaczony, // Czy SI wyznaczy³o cel.
    czy_usun¹æ_torpedy_wyrzutnia //???
      : boolean;

    //indeks_w_tabeli,
    amunicja_iloœæ,
    amunicja_iloœæ_pocz¹tkowa,
    lufa_ostatni_strza³_indeks, // Indeks lufy, która ostatnio wystrzeli³a.
    prze³adowanie_czas_milisekundy__broñ, // Powinien byæ wiêkszy równy strza³_od_blokada_milisekundy, gdy¿ po strzale, gdy ma zadany inny k¹t obrotu ale nie mo¿e siê jeszcze obracaæ, po prze³adowaniu strzela i nadal blokuje obrót (obrót jest ci¹gle zablokowany i strzela w dawnym kierunku).
    si__cel__id_statek, // Id celu wybranego przez SI (-99 gdy brak).
    si__strza³_lufa_opóŸnienie_czas_milisekundy, // Je¿eli broñ ma kilka luf to aby nie strzela³o wszystkimi na raz tylko w równych odstêpach wzglêdem czasu prze³adowania.
    strza³y_iloœæ // Iloœæ oddanych strza³ów, zeruje siê gdy iloœæ strza³ów równa siê iloœci luf.
      : integer;

    //strza³_czas : TDateTime;
    si__cel__korekta_losowa_namiaru_procent__wyszukanie_ostatnie_sekundy_i, // Czas ostatniej losowej korekty namiaru gdy broñ jest w zablokowanym k¹cie strza³u.
    si__cel__namiar_wyznaczenie_ostatnie_sekundy_i, // Czas ostatniego znanego przez SI namiaru celu (opóŸnienie dla ustawienia pocz¹tkowego obrotu broni).
    si__cel__wyszukanie_ostatnie_sekundy_i, // Czas ostatniego wyszukania celu przez SI.
    strza³_czas__broñ_sekundy_i, // Czas ostatniego wystrza³u.
    strza³_od_blokada_milisekundy, // Ile milisekund od wystrza³u blokuje ruch dzia³a.
    uszkodzone_czas_sekundy_i // 0 - nie jest uszkodzone, <> 0 - zosta³o trafione i nie mo¿na go u¿ywaæ.
      : Int64;

    obrót_k¹t_zadany,
    obrót_k¹t_zadany_bezwzglêdny, // Zadany k¹t obrotu z pominiêciem wszelkich zablokowanych zakresów.

    // Przez ten k¹t nie mo¿na obracaæ.
    // Opis jest analogiczny jak dla obrót_k¹t_zablokowany_strza³_do, obrót_k¹t_zablokowany_strza³_od.
    // Gdy obie wartoœci s¹ sobie równe k¹t zablokowany jest nieaktywny (nie ma k¹ta zablokowanego).
    obrót_k¹t_zablokowany_do, // 120, -50
    obrót_k¹t_zablokowany_od, // 50, -120

    obrót_szybkoœæ, // Jak szybko siê zmienia.

    amunicja_uzbrajanie_odleg³oœæ, // W jakiej odleg³oœci od pozycji startowej amunicja zostaje uzbrojona - wykrywa samotrafienia tu¿ po opuszczeniu lufy przez amunicjê (je¿eli nie oddali siê odpowiednio daleko od statku).
    obra¿enia_zasiêg, // -1 - ustawi domyœln¹ wartoœæ. W jakiej odleg³oœci od amunicji wykrywa kolizje z obiektami.
    //celownik_linia_szerokoœæ_obrót, // Jaka szerokoœæ linii celowania zosta³a ustalona na podstawie wycelowania obrotu broni.
    si__cel__korekta_losowa_namiaru_procent, // O jaki procent po³owy d³ugoœci statku celu koryguje namiar celowania (-100% = -1, -50% = -0,5, 0% = 0, 50% = 0,5, 100% = 1).
    si__namiar_pocz¹tkowy__obrót_k¹t_zadany, // Obróci bronie do domyœlnej pozycji (pocz¹tkowa z wyj¹tkiem uniesienia luf).
    skala__broñ, // Wielkoœæ dzia³a.
    obra¿enia_zadawane,
    zasiêg__broñ
      : real;

    celownik_linia_bez_falowania__position_y__kamera_nad_wod¹, // Je¿eli broñ jest umieszczona pod powierzchni¹ wody to umo¿liwi przesuwanie linii celowania w górê aby by³a widoczna gdy kamera jest nad wod¹.
    celownik_linia_bez_falowania__position_y__standardowa // Kopia pocz¹tkowej pozycji linii celowania.
      : single;

    si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor : GLS.VectorGeometry.TAffineVector; // Wspó³rzêdne celu wybranego przez SI.
    obrót_kierunek_zadany : GLS.VectorTypes.TVector4f; //TGLCoordinates;

    // Wewn¹trz tych k¹tów nie mo¿na strzelaæ.
    // Wszystkie trzy tabela maj¹ taki sam wymiar.
    // Patrz¹c od ty³u w przód statku k¹t (TurnAngle) wynosi 0, po lewej stronie jest dodatni, po prawej stronie jest ujemny, patrz¹c w ty³ wynosi 180.
    // Zgodnie z ruchem wskazówek zegara obrót_k¹t_zablokowany_strza³_od ma byæ przed obrót_k¹t_zablokowany_strza³_do.
    // Je¿eli zakres zablokowanego k¹ta przechodzi przez œrodek rufy obrót_k¹t_zablokowany_strza³_od jest ujemny, a obrót_k¹t_zablokowany_strza³_do jest dodatni.
    obrót_k¹t_zablokowany_strza³_do, // -90, 170
    obrót_k¹t_zablokowany_strza³_od, // 50, -170
    obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny // Mo¿na strzelaæ je¿eli lufa jest uniesiona co najmniej na taki k¹t. Aby tablice mia³y taki sam rozmiar i funkcjonalnoœæ dla danego zakresu k¹tów by³a wy³¹czona nale¿y wpisaæ du¿¹ wartoœæ k¹ta granicznego np. 1000.
      : array of real;

    amunicja_rodzaj : Typy_Wspolne.TAmunicja_Rodzaj; // Rodzaj amunicji dzia³a.

    statek__tw : TStatek; // Statek, na którym umiejscowiony jest obiekt (mo¿e byæ potomkiem innego obiektu ale w ramach tego statku).

    efekt__element_uszkodzenie_gl_dummy_cube,
    elementy_wizualne_gl_dummy_cube // Kontener na elementy wizualne dzia³a.
    //k¹t_test_gl_dummy_cube
      : TGLDummyCube;

    korpus_przód,
    podstawa
      : Wyglad_Elementy.TSt_GLCylinder;

    korpus__broñ
      : Wyglad_Elementy.TSt_GLCube;

    lufy_t : array of TLufa;

    cel_linia, // U klientów nie wskazuje prawid³owo celu (serwer nie wysy³a aktualnego ustawienie linii celowania).
    celownik_linia,
    celownik_linia_bez_falowania, // Dla du¿ych zasiêgów koniec linii ruchomej w sporym zakresie faluje i mo¿e go byæ nie widaæ oraz trudno okreœliæ zasiêg.
    celownik_linia__do_punktu_uzbrajania, // Je¿eli uzbrajanie amunicji  odbywa siê daleko od dzia³a to czasami nie widaæ, gdzie jest linia celownicza (np. cala pod wod¹).
    celownik_linia_bez_falowania__do_punktu_uzbrajania // Je¿eli uzbrajanie amunicji odbywa siê daleko od dzia³a to czasami nie widaæ, gdzie jest linia celownicza (np. cala pod wod¹).
      : TGLLines;

    obrót_k¹t_zablokowany_GLDisk : TGLDisk; // Wizualizuje obszar zablokowanego k¹ta obrotu.
    obrót_k¹t_zablokowany_strza³_GLDisk_t : array of TGLDisk; // Wizualizuje obszar zablokowanego k¹ta obrotu.
  public
    { Public declarations }
    constructor Create( AOwner : TGLBaseSceneObject; AStatek : TStatek; gl_collision_mmanager_f : TGLCollisionManager; efekt__element_uszkodzenie_gl_thor_fx_manager_f : TGLThorFXManager; const lufy_iloœæ_f : integer; const statek_create_funkcje_f : TStatek_Create_Funkcje; amunicja_rodzaj_f : Typy_Wspolne.TAmunicja_Rodzaj = Typy_Wspolne.ar_Torpeda );
    destructor Destroy(); override;

    procedure Dodatkowe_Elementy_Ustaw();

    function Obrót_K¹t_Zablokowany_SprawdŸ( k¹t_f : real ) : boolean;
    procedure Obrót_Zadany_Zmieñ( const celownik_linia_widocznoœæ_f : boolean = true );
    procedure Obrót_Kierunek_Zmieñ( const delta_czasu_f : double; const gra_wspó³czynnik_trudnoœci_f : integer; const broñ_nie_unosi_luf_f : boolean = false );

    function Strza³( const czy_wszystkie_lufy_f, obracaj_dzia³a_f, podnoœ_lufy_f : boolean; var wystrzeli³y_wszystkie_f : boolean; const cel_wspó³rzêdne_f : GLS.VectorGeometry.TAffineVector ) : boolean;
    function Obrót_K¹t_Zablokowany_Strza³u_SprawdŸ() : boolean; overload;
    function Obrót_K¹t_Zablokowany_Strza³u_SprawdŸ( k¹t_f : real; const indeks_f : integer ) : boolean; overload;

    procedure Celownik_Linia_Wygl¹d_Ustaw();

    procedure Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj( const celownik_linia_widocznoœæ_f : boolean = true );
    procedure Celownik_Linia_Bez_Falowania__Pozycja_Y_Dostosuj( const kamera_pod_wod¹_f : boolean; const nad_powierzchni¹_wody_utrzymuj_f : boolean = false );

    procedure Wygl¹d_Elementy__Noc_Zmieñ( const dzieñ_jasnoœæ_f : real; const wygl¹d_elementy__kolor_noc_zmieñ_f : TWygl¹d_Elementy__Kolor_Noc_Zmieñ );

    procedure Element_Uszkodzenie_Przeliczaj( const oczekiwanie_na__naprawienie_elementu__czas_sekundy_f : Int64; const czy_klient_f : boolean = false );

    procedure Si__Cel__Brak_Ustaw();
    //procedure Si__Cel__Korekta_Losowa_Namiaru_Procent_Ustaw( odleg³oœæ_do_celu_f : single = -1 );
    procedure Si__Cel__Korekta_Losowa_Namiaru_Procent_Ustaw( const gra_wspó³czynnik_trudnoœci_f : integer );
    procedure Si_Wartoœci_Pocz¹tkowe_Ustaw();

    function Parametry_Odczytaj( const odstêp_f : string; const t³umaczenie_komunikaty_r_f : TT³umaczenie_Komunikaty_r; const dane_wszystkie_f : boolean = false ) : string;
  end;//---//TTorpedy_Wyrzutnia

  TDzia³o = class( TTorpedy_Wyrzutnia )
  private
    { Private declarations }
    czy_lot_parabol¹ : boolean; // Pocisk leci po paraboli a nie wed³ug swojego kierunku.

    cofanie_wystrza³_odleg³oœæ,
    cofanie_wystrza³_pozycja_pocz¹tkowa,

    podniesienie_k¹t_maksymalny,
    podniesienie_k¹t_minimalny,
    podniesienie_k¹t_pocz¹tkowy,
    podniesienie_k¹t_zadany, // Zadany k¹t podniesienia.
    podniesienie_k¹t_zadany_bezwzglêdny, // Zadany k¹t podniesienia nie ograniczany zakresem k¹ta maksymalnym i minimalnym.
    podniesienie_szybkoœæ // Jak szybko siê zmienia.
      : real;

    //obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny : array of real; // Wewn¹trz k¹tów, w których nie mo¿na strzelaæ je¿eli lufa jest uniesiona co najmniej na taki k¹t, mo¿na strzelaæ. //???

    korpus_przód : Wyglad_Elementy.TSt_GLCube;
  public
    { Public declarations }
    constructor Create( AOwner : TGLBaseSceneObject; AStatek : TStatek; gl_collision_mmanager_f : TGLCollisionManager; efekt__element_uszkodzenie_gl_thor_fx_manager_f : TGLThorFXManager; const lufy_iloœæ_f : integer; const lufy_podniesienie_k¹t_f : real; const statek_create_funkcje_f : TStatek_Create_Funkcje );
    destructor Destroy(); override;

    procedure Podniesienie_Zadane_Zmieñ( const celownik_linia_widocznoœæ_f : boolean = true );
    procedure Podniesienie_Kierunek_Zmieñ( const delta_czasu_f : double );

    procedure Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj( const celownik_linia_widocznoœæ_f : boolean = true );

    procedure Wygl¹d_Elementy__Noc_Zmieñ( const dzieñ_jasnoœæ_f : real; const wygl¹d_elementy__kolor_noc_zmieñ_f : TWygl¹d_Elementy__Kolor_Noc_Zmieñ );

    function Parametry_Odczytaj( const odstêp_f : string; const t³umaczenie_komunikaty_r_f : TT³umaczenie_Komunikaty_r; const dane_wszystkie_f : boolean = false ) : string;
  end;//---//TDzia³o

  TArtyleria = class( TDzia³o )
  private
    { Private declarations }
    zasiêg_od_parabola // Zasiêg, od którego celowanie nie odbywa siê w punkt tylko poprzez podniesienie lufy.
      : real;
    function Parametry_Odczytaj( const odstêp_f : string; const t³umaczenie_komunikaty_r_f : TT³umaczenie_Komunikaty_r; const dane_wszystkie_f : boolean = false ) : string;
  public
    { Public declarations }
    constructor Create( AOwner : TGLBaseSceneObject; AStatek : TStatek; gl_collision_mmanager_f : TGLCollisionManager; efekt__element_uszkodzenie_gl_thor_fx_manager_f : TGLThorFXManager; const lufy_iloœæ_f : integer; const lufy_podniesienie_k¹t_f : real; const statek_create_funkcje_f : TStatek_Create_Funkcje );
  end;//---//TArtyleria

  TAmunicja = class( TGLDummyCube )
  private
    { Private declarations }
    czy_efekt_wpadniêcia_do_wody, // Czy wyœwietlono efekt (pierwszego) wpadniêcia do wody.
    czy_jasna_linia_wyd³u¿ona, // Czy obliczanie rozmiaru jasnej linii zosta³o zakoñczone.
    czy_lot_parabol¹, // Pocisk leci po paraboli a nie wed³ug swojego kierunku.
    czy_pod_wod¹, // Znajduje siê poni¿ej linii wody (ustawiane na true przy pierwszym wpadniêciu do wody).
    czy_poza_luf¹, // Amunicja opuœci³a lufê (aby detekcja kolizji nie wykrywa³a kontaktu z luf¹).
    czy_poza_zasiêgiem, // Je¿eli w wyniku opadania amunicja znajdzie siê znów w zasiêgu ma byæ nadal traktowana jako poza zasiêgiem.
    //czy_statek_dane, // Czy odczytano dane ze statku, z którego wystrzelono amunicjê.
    czy_usun¹æ_amunicja,
    czy_uzbrojona,
    czy_wynurzanie // Po odpaleniu zanurzy siê pod wodê i wyp³ynie na powierzchniê.
      : boolean;

    id_gracz,
    id_statek
      : integer;

    id_amunicja : cardinal;

    amunicja_uzbrajanie_odleg³oœæ, // Je¿eli pociski lec¹ szybko to amunicja mo¿e siê uzbrajaæ dalej ni¿ wynika z tej liczby ze wzglêdu na czêstotliwoœæ przeliczania wartoœci i pokonywan¹ miêdzy nimi odleg³oœæ.
    cel_odleg³oœæ, // Odleg³oœæ od lufy do celu (przy zablokowanym podnoszeniu luf jest liczony wed³ug procentu uniesienia lufy i zasiêgu dzia³a).
    //dzia³o_podniesienie_k¹t_maksymalny, // Wysokoœæ i obrót dla ruchu parabol¹ - wersja 2.
    dzia³o_podniesienie_procent_k¹ta_maksymalnego, // Jaki procent z maksymalnego uniesienia luf mia³o ustawione dzia³o podczas strzelania.
    obra¿enia_zadawane,
    obra¿enia_zadawane_wspó³czynnik, // Modyfikuje obra¿enia zadawane poza skutecznym zasiêgiem (wartoœæ aktualna).
    obra¿enia_zadawane_wspó³czynnik_zmodyfikowany, // Modyfikuje obra¿enia zadawane poza skutecznym zasiêgiem.
    opadanie_obrót_korekta_o_k¹t_na_granicy_zasiêgu, // Koryguje obracanie amunicji o wartoœæ k¹ta w momencie wykraczania poza zasiêg aby podczas opadania obraca³a siê do pozycji pionowo w dó³.
    opadanie_obrót_korekta_o_ustawienie_pocz¹tkowe, // Koryguje obracanie amunicji o pocz¹tkowy k¹t lotu aby podczas opadania obraca³a siê do pozycji pionowo w dó³.
    //parabola_k¹t_lotu_pocz¹tkowy, // Wysokoœæ i obrót dla ruchu parabol¹ - wersja 1.
    //parabola_k¹t_lotu_wspó³czynnik, // Podczas strza³u ma k¹t lufy i wraz z dystansem bêdzie siê zmieniaæ o ten wspó³czynnik tak aby przy celu k¹t by³ 80 stopni (w dó³ s¹ stopnie dodatnie).  // Wysokoœæ i obrót dla ruchu parabol¹ - wersja 1.
    //parabola_równanie__a, // Parametry równania paraboli w postaci y = a * x^2 + b * x + c
    //parabola_równanie__b,
    //parabola_równanie__c,
    prêdkoœæ__amunicja,
    prêdkoœæ_opadania,
    prêdkoœæ_opadania_wspó³czynnik, // Jak szybko przyrasta prêdkoœæ opadania.
    prêdkoœæ_pocz¹tkowa,
    prêdkoœæ_wytracanie_wspó³czynnik, // Jak szybko wytraca prêdkoœæ poza zasiêgiem skutecznym.
    skala__amunicja, // Dzia³o mo¿e byæ skalowane. Utworzony pocisk jako potomek dzia³a przejmuje skalowanie dzia³a ale nastêpnie staje siê potomkiem sceny i skala dzia³a przestaje dotyczyæ pocisku a powinna byæ zachowana.
    strza³_od_blokada_dystans, // W jakiej odleg³oœci od wystrza³u (lufy) przesuwa i obraca amunicjê razem ze statkiem.
    statek_prêdkoœæ, // Prêdkoœæ statku w momencie strza³u, po opuszczeniu lufy jest zmniejszana do zera.
    zanurzenie_g³êbokoœæ_po_wpadniêciu_do_wody, // Do jakiej g³êbokoœci siê zanurzy po wpadniêciu do wody.
    zanurzenie_g³êbokoœæ_zadana, // Na jakiej g³êbokoœci ma p³yn¹æ.
    zasiêg__amunicja // Zasiêg amunicji (mo¿e byæ trochê d³u¿szy od wyœwietlanej linii gdy¿ jest liczony od koñca lufy a nie od œrodka dzia³a).
      : real;

    lot_parabol¹__opadanie__k¹t_wzglêdem_wody : single; // K¹t pod jakim amunicja leci wzglêdem wody w momencie kiedy amunicja zaczyna opadaæ w locie parabol¹.

    amunicja_lot_parabol¹_etap : TAmunicja_Lot_Parabol¹_Etap;
    amunicja_rodzaj : Typy_Wspolne.TAmunicja_Rodzaj; // Rodzaj amunicji dzia³a.

    dzia³o_pozycja_absolutna_vector,
    uzbrojenie_wspó³rzêdne_vector // Wspó³rzêdne punktu, w którym amunicja siê uzbroi³a.
      : GLS.VectorTypes.TVector4f;

    // TAmunicja TGLDummyCube -  porusza siê w linii strza³u (tylko w przód, nie obraca siê, nie obni¿a ani nie wznosi; jedynie je¿eli wynika to ze skoœnego tor lotu - wznosz¹cego lub opadaj¹cego).
    //                             Dla torped przesuwa siê w linii wody.
    korpus_opadanie_obrót_gl_dummy_cube, // Dla obrotu opadania (góra dó³).
    korpus_ustawienie_pocz¹tkowe_gl_dummy_cube, // Zapamiêtuje jak pocz¹tkowo by³a ustawiona amunicja (wychylenia).
    torpeda_efekt_na_wodzie_gl_dummy_cube // Aby torpeda by³a widoczna na powierzchni wody.
      : TGLDummyCube;

    jasna_linia, // Je¿eli (ma³y) element porusza zbyt szybko to nie wykrywa kolizji z innymi (ma³ymi) elementami.
    korpus__amunicja
      : Wyglad_Elementy.TSt_GLCylinder;
    czubek :  Wyglad_Elementy.TSt_GLCone;
    obra¿enia_zasiêg_st_gl_sphere :  Wyglad_Elementy.TSt_GLSphere; // Nie wykrywa kolizji miêdzy amunicja a amunicja, l¹dem, wod¹ (aby efekt trafienia siê nie tworzy³ w powietrzu).

    pozycja_celu, // Istotne dla lotu parabol¹, wyliczane na podstawie zasiêgu i procentu uniesienia luf wzglêdem maksymalnego uniesienia luf.
    pozycja_startowa, // Dla lotu parabol¹ jest od pozycji dzia³a, dla lotu zwyk³ego od koñca lufy.
    pozycja_woda // Odwzorowanie pozycji amunicji na powierzchni (mniej wiêcej) wody, wysokoœci dzia³a.
      : TGLSphere;

    statek__am : TStatek; // Statek, z którego wystrzelono amunicjê.
  public
    { Public declarations }
    constructor Create( AOwner : TGLBaseSceneObject; ALufa : TLufa; const obracaj_dzia³a_f : boolean; cel_wspó³rzêdne_f : GLS.VectorGeometry.TAffineVector; const amunicja_prêdkoœæ_zakresy_r_f : TAmunicja_Prêdkoœæ_Zakresy_r; gl_collision_mmanager_f : TGLCollisionManager ); overload;
    //constructor Create( AAmunicja : TAmunicja ); overload; //Konstruktor kopiuj¹cy klasy TAmunicja.
    constructor Create( AObiekty_Wieloosobowe_Amunicja_r : TObiekty_Wieloosobowe__Amunicja_r; AOwner : TGLBaseSceneObject ); overload;
    destructor Destroy(); override;

    procedure Jasna_Linia_Pozycja_Z_Ustaw();
  end;//---//TAmunicja

  TKotwica = class( TGLDummyCube )
  private
    { Private declarations }
    id_kotwica : byte; // Indeksowane od 1.

    uszkodzone_czas_sekundy_i : Int64; // 0 - nie jest uszkodzone, <> 0 - zosta³o trafione i nie mo¿na go u¿ywaæ.

    dno_wspó³rzêdna_y : single; // Wspó³rzêdna absolutna Y kotwicy w momencie ustawienia statusu kre_Dno.

    kotwica_lina_mocowanie, // Miejsce przymocowania liny do statku.
    kotwica_statek_mocowanie // Miejsce przymocowania kotwicy do statku.
      : GLS.VectorGeometry.TAffineVector;

    kotwica_ruch_etap__ko : TKotwica_Ruch_Etap;
    statek__ko : TStatek;

    efekt__dŸwiêk_kontener_gl_dummy_cube,
    efekt__element_uszkodzenie_gl_dummy_cube
      : TGLDummyCube;
    kotwica_podstawa : Wyglad_Elementy.TSt_GLCube;
    kotwica_trzon : Wyglad_Elementy.TSt_GLCylinder;
    kotwica_ramiê__lewo,
    kotwica_ramiê__prawo
      : Wyglad_Elementy.TSt_GLFrustrum;
    kotwica_trzon__dó³ : Wyglad_Elementy.TSt_GLSphere;
    kotwica_trzon__góra : Wyglad_Elementy.TSt_GLTorus;
    kotwica_lina : TGLLines;
  public
    { Public declarations }
    constructor Create( AOwner : TGLBaseSceneObject; AStatek : TStatek; gl_collision_mmanager_f : TGLCollisionManager; efekt__element_uszkodzenie_gl_thor_fx_manager_f : TGLThorFXManager; x_f, y_f, z_f : real );
    destructor Destroy(); override;

    procedure Dodatkowe_Elementy_Ustaw();

    procedure Kotwica_Lina_Odœwie¿();
    procedure Kotwica_Na_Dnie_Status_Ustaw( const kotwica_zakresy_r_f : TKotwica_Zakresy_r );
    procedure Kotwica_Przesuwaj( const dno_poziom_f : single; const delta_czasu_f : double; const kotwica_zakresy_r_f : TKotwica_Zakresy_r; const kotwica_resetuj_f : boolean = false );
    procedure Kotwica_Rodzic_Zmieñ( const kotwica_ruch_etap_f : TKotwica_Ruch_Etap );

    procedure Wygl¹d_Elementy__Noc_Zmieñ( const dzieñ_jasnoœæ_f : real; const wygl¹d_elementy__kolor_noc_zmieñ_f : TWygl¹d_Elementy__Kolor_Noc_Zmieñ );

    procedure Element_Uszkodzenie_Przeliczaj( const oczekiwanie_na__naprawienie_elementu__czas_sekundy_f : Int64; const czy_klient_f : boolean = false );
  end;//---//TKotwica

  TSter = class( TGLDummyCube )
  private
    { Private declarations }
    uszkodzone_czas_sekundy_i : Int64; // 0 - nie jest uszkodzone, <> 0 - zosta³o trafione i nie mo¿na go u¿ywaæ.

    efekt__element_uszkodzenie_gl_dummy_cube : TGLDummyCube;
    ster : Wyglad_Elementy.TSt_GLCube;
    ster_mocowanie : Wyglad_Elementy.TSt_GLCylinder;
  public
    { Public declarations }
    constructor Create( AOwner : TGLBaseSceneObject; const id_statek_f : integer; gl_collision_mmanager_f : TGLCollisionManager; efekt__element_uszkodzenie_gl_thor_fx_manager_f : TGLThorFXManager; x_f, y_f, z_f : real );
    destructor Destroy(); override;

    procedure Wygl¹d_Elementy__Noc_Zmieñ( const dzieñ_jasnoœæ_f : real; const wygl¹d_elementy__kolor_noc_zmieñ_f : TWygl¹d_Elementy__Kolor_Noc_Zmieñ );

    procedure Element_Uszkodzenie_Przeliczaj( const oczekiwanie_na__naprawienie_elementu__czas_sekundy_f : Int64; const czy_klient_f : boolean = false );
  end;//---//TSter

  TSter_G³êbokoœci = class( TGLDummyCube )
  private
    { Private declarations }
    uszkodzone_czas_sekundy_i : Int64; // 0 - nie jest uszkodzone, <> 0 - zosta³o trafione i nie mo¿na go u¿ywaæ.

    efekt__element_uszkodzenie_gl_dummy_cube : TGLDummyCube;
    ster : Wyglad_Elementy.TSt_GLCapsule;
  public
    { Public declarations }
    constructor Create( AOwner : TGLBaseSceneObject; const id_statek_f : integer; gl_collision_mmanager_f : TGLCollisionManager; efekt__element_uszkodzenie_gl_thor_fx_manager_f : TGLThorFXManager; x_f, y_f, z_f : real );
    destructor Destroy(); override;

    procedure Wygl¹d_Elementy__Noc_Zmieñ( const dzieñ_jasnoœæ_f : real; const wygl¹d_elementy__kolor_noc_zmieñ_f : TWygl¹d_Elementy__Kolor_Noc_Zmieñ );

    procedure Element_Uszkodzenie_Przeliczaj( const oczekiwanie_na__naprawienie_elementu__czas_sekundy_f : Int64; const czy_klient_f : boolean = false );
  end;//---//TSter_G³êbokoœci

  TŒlad_Torowy = class( TGLDummyCube )
  private
    { Private declarations }
    powiêksza_siê,
    zmieni³_kolor
      : boolean;

    czas_trwania_milisekundy_œt, // Ile milisekund œlad trwa (widaæ go).
    czas_utworzenia_milisekundy_œt // Czas utworzenia efektu (od niego odmierza siê czas trwania).
      : Int64;

    œlad_torowy__szerokoœæ_pocz¹tkowa,
    œlad_torowy__d³ugoœæ_pocz¹tkowa
      : single;

    //œlad : TGLCube;
  public
    { Public declarations }
    constructor Create( AOwner : TGLBaseSceneObject; const kierunek_f, pozycja_f : GLS.VectorTypes.TVector4f; œlad_torowy__d³ugoœæ_f, œlad_torowy__szerokoœæ_f : single; const dzieñ_jasnoœæ_f : real; const zanurzenie_peryskopowe__utrzymywane_f : boolean );
    destructor Destroy(); override;
  end;//---//TŒlad_Torowy

  TŒruba = class( TGLDummyCube )
  private
    { Private declarations }
    czy_obrót_lewo : boolean; // Œruba obraca siê w lewo (góra œruby patrz¹c od ty³u statku).

    uszkodzone_czas_sekundy_i : Int64; // 0 - nie jest uszkodzone, <> 0 - zosta³o trafione i nie mo¿na go u¿ywaæ.

    prêdkoœæ_obrotowa_aktualna_procent,
    prêdkoœæ_obrotowa_maksymalna, // [Statek] prêdkoœæ_maksymalna * 100. //// Ca³kiem dobrze wychodzi gdy [œruba] prêdkoœæ_obrotowa_maksymalna / prêdkoœæ_obrotowa_przyspieszanie = [statek] prêdkoœæ_maksymalna / prêdkoœæ_przyspieszanie.
    prêdkoœæ_obrotowa_przyspieszanie // Jak szybko œruba modyfikuje prêdkoœæ obrotów. [Œruba] prêdkoœæ_obrotowa_maksymalna * 0.2. Dobraæ tak aby ruch œrub odpowiada³ przyœpieszeniu statku (aby nie by³o, ¿e statek zmienia kierunek ruchu, a œruby jeszcze nie wyhamowa³y).
    // Samolotom jakoœ inaczej. //???
      : real;

    efekt__element_uszkodzenie_gl_dummy_cube,
    obrót_gl_dummy_cube
      : TGLDummyCube;

    wa³,
    wa³_³o¿ysko, // £¹czy podpórkê z wa³em.
    wa³_mocowanie, // Przez nie wychodzi wa³ z kad³uba.
    wa³_podpórka, // Podpórka przed œrub¹.
    wa³_do_wirnika // Z ³o¿yska do wirnika.
      : Wyglad_Elementy.TSt_GLCylinder;

    wirnik_œrodek : Wyglad_Elementy.TSt_GLSphere;

    wirnik_³opaty_t : array of Wyglad_Elementy.TSt_GLCone;

    statek__œr : TStatek; // Statek, do którego zamontowana jest œruba.

  public
    { Public declarations }
    constructor Create( AOwner : TGLBaseSceneObject; AStatek : TStatek; const czy_obrót_lewo_f : boolean; gl_collision_mmanager_f : TGLCollisionManager; efekt__element_uszkodzenie_gl_thor_fx_manager_f : TGLThorFXManager );
    destructor Destroy(); override;

    procedure Wirnik_£opat_K¹t_Ustaw();

    procedure Œruba_Obracaj( const delta_czasu_f : double );

    procedure Wygl¹d_Elementy__Noc_Zmieñ( const dzieñ_jasnoœæ_f : real; const wygl¹d_elementy__kolor_noc_zmieñ_f : TWygl¹d_Elementy__Kolor_Noc_Zmieñ );

    procedure Element_Uszkodzenie_Przeliczaj( const oczekiwanie_na__naprawienie_elementu__czas_sekundy_f : Int64; const czy_klient_f : boolean = false );
  end;//---//TŒruba

  TTrafienia_Efekt = class( TGLDummyCube )
  private
    { Private declarations }
    mg³a_te : boolean;

    czas_animowania_wizualizacji_alternatywnej_ostatniego_milisekundy_i, // Czas poprzedniego animowania wizualizacji alternatywnej.
    czas_opóŸnienia_animowania_wizualizacji_alternatywnej_milisekundy_i, // Co ile milisekund animuje efekt.
    czas_rozb³ysku_ostatniego_sekundy_i, // Czas poprzedniego rozb³ysku efektu.
    czas_trwania_milisekundy_te, // Ile milisekund efekt trwa (widaæ go).
    czas_utworzenia_milisekundy_te // Czas utworzenia efektu (od niego odmierza siê czas trwania).
      : Int64;

    wznoszenie_prêdkoœæ : double;

    dzieñ_jasnoœæ_te : real;

    efekt_rodzaj : TEfekt_Rodzaj;

    wizualizacja_alternatywna__gl_custom_scene_object : TGLCustomSceneObject; // Je¿eli efekty graficzne nie s¹ aktywne unaoczni efekt za pomoc¹ obiektów.

  public
    { Public declarations }
    constructor Create( AOwner : TGLBaseSceneObject; x_f, y_f, z_f : real; const efekt_rodzaj_f : TEfekt_Rodzaj; const mg³a_f : boolean = false );
    destructor Destroy(); override;

    procedure Wizualizacja_Alternatywna__Utwórz( const dzieñ_jasnoœæ_f : real );

    procedure Wizualizacja_Alternatywna__Animuj();
  end;//---//TTrafienia_Efekt

  TInformacje_Dodatkowe = class
    wyœwietlanie_czas_sekundy : smallint;
    utworzenie_data_czas : TDateTime;
    napis : string;
  public
    constructor Create( const napis_f : string = '' ); overload;
    constructor Create( const napis_f : string; const wyœwietlanie_czas_sekundy_f : smallint ); overload;
  end;//---//TInformacje_Dodatkowe

  TKlawisz_Konfiguracja = class( TPanel )
  private
    klawisz_pole__skupienie_ustawione, // Aby pierwsze klikniêcie mysz¹ w polu (ustawienie siê w polu) nie zmienia³o definicji klawisza.
    wyszukany, // Podœwietlenie w wyniku wyszukania.
    wyszukany__jako_nastêpny_poprzedni // Podœwietlenie w wyniku wyszukania jako nastêpny poprzedni.
      : boolean;
    klawiatura_konfiguracja_r_w : ^TKlawiatura_Konfiguracja_r;
    domyœlna_konfiguracja_r : TKlawiatura_Konfiguracja_r;
    Polecenie_Nazwa_Label : TLabel;
    Klawisz_Edit : TEdit;
    Domyœlny_Button,
    Niezdefiniowane_Button
      : TButton;
    Czy_Mysz_Klawisz_Konfiguracja_CheckBox,
    Plus_Alt_Klawisz_Konfiguracja_CheckBox,
    Plus_Ctrl_Klawisz_Konfiguracja_CheckBox,
    Plus_Shift_Klawisz_Konfiguracja_CheckBox
      : Klasy_Dodatkowe.TKlawisz_Konfiguracja_CheckBox;

    t³umaczenie_komunikaty_r_wsk : ^TT³umaczenie_Komunikaty_r;
  public
    constructor Create( AOwner : TComponent; const klawiatura_konfiguracja_r_wsk_f, t³umaczenie_komunikaty_r_wsk_f : Pointer );
    destructor Destroy(); override; // Bez override; siê nie wywo³uje (jedynie tak siê wywo³a klawisz_konfiguracja_definicja.Destroy()).

    procedure T³umaczenie_Ustaw();
  private
    function Nazwa_Klawisza() : string;
    procedure Check_Box_Click( Sender : TObject );
    procedure Edit_Exit( Sender : TObject );
    procedure Edit_Key_Down( Sender : TObject; var Key : Word; Shift : TShiftState );
    procedure Edit_Mouse_Down( Sender : TObject; Button : TMouseButton; Shift : TShiftState; X, Y : Integer );
    procedure Domyœlny_Button_Click( Sender : TObject );
    procedure Niezdefiniowane_Button_Click( Sender : TObject );
    procedure Panel_Mouse_Enter( Sender : TObject );
    procedure Panel_Mouse_Leave( Sender : TObject );
  end;//---//TKlawiatura_Konfiguracja

  TWygl¹d_Kolor_Definicja = class
    wygl¹d_kolor_definicja_t : array of TWygl¹d_Kolor_Definicja_r;
  public
    { Public declarations }
    constructor Create();
    destructor Destroy(); override; // Bez override; siê nie wywo³uje (jedynie tak siê wywo³a wygl¹d_kolor_definicja.Destroy()).

    function Definicja_Istnieje( const kolor_definicja_nazwa_f : string ) : boolean;
    procedure Dodaj_Definicjê( const czerwony_f, zielony_f, niebieski_f, przezroczystoœæ_f : real; const kolor_definicja_nazwa_f : string );
    function Odczytaj_Definicjê( const kolor_definicja_nazwa_f : string ) : GLS.VectorTypes.TVector4f;
  end;//---//TWygl¹d_Kolor_Definicja

  TWygl¹d_Liczba_Definicja = class
    wygl¹d_liczba_definicja_t : array of TWygl¹d_Liczba_Definicja_r;
  public
    { Public declarations }
    constructor Create();
    destructor Destroy(); override; // Bez override; siê nie wywo³uje (jedynie tak siê wywo³a wygl¹d_liczba_definicja.Destroy()).

    function Definicja_Istnieje( const liczba_definicja_nazwa_f : string ) : boolean;
    procedure Dodaj_Definicjê( const liczba_f : real; const liczba_definicja_nazwa_f : string );
    function Odczytaj_Definicjê( const liczba_definicja_nazwa_f : string ) : real;
  end;//---//TWygl¹d_Liczba_Definicja

  TTorpedy_Wyrzutnia_t = array of TTorpedy_Wyrzutnia; // Tylko aby wywo³aæ funkcjê.

  TStatki_Form = class( TForm )
    Amunicja_Rodzaj_GroupBox: TGroupBox;
    Amunicja__Cel_Pozycja_Dla_Lotu_Parabol¹_Wyœwietl_CheckBox: TCheckBox;
    Amunicja__Zanurzenie_G³êbokoœæ_Zadana_Edit: TEdit;
    Amunicja__Zanurzenie_G³êbokoœæ_Zadana_Etykieta_Label: TLabel;
    Amunicja__Zanurzenie_G³êbokoœæ_Zadana_Label: TLabel;
    Amunicja__Zanurzenie_G³êbokoœæ_Zadana__Skok_O_Edit: TEdit;
    Amunicja__Zanurzenie_G³êbokoœæ_Zadana__Skok_O_Etykieta_Label: TLabel;
    Amunicja__Zanurzenie_G³êbokoœæ_Zadana__Skok_O_Label: TLabel;
    ar_Artyleria_CheckBox: TCheckBox;
    ar_Bomba_G³êbinowa_CheckBox: TCheckBox;
    ar_Je¿e_G³êbinowe_CheckBox: TCheckBox;
    ar_Pocisk_CheckBox: TCheckBox;
    ar_Torpeda_CheckBox: TCheckBox;
    ar_Wszystkie_CheckBox: TCheckBox;
    BabyMetal_Statek_GLDummyCube: TGLDummyCube;
    BabyMetal_Statek__Dó³_GLFrustrum: TGLFrustrum;
    BabyMetal_Statek__Góra_GLFrustrum: TGLFrustrum;
    BabyMetal_Statek__Oœwietlenie__Pionowe__Lewo_Prawo_GLCube: TGLCube;
    BabyMetal_Statek__Oœwietlenie__Pionowe__Przód_Ty³_GLCube: TGLCube;
    BabyMetal_Statek__Oœwietlenie__Poziome_GLCube: TGLCube;
    BabyMetal_Statek__Rotacja_W³asna_GLDummyCube: TGLDummyCube;
    Broñ_Zasiêg_GLDisk: TGLDisk;
    Celowanie__Bronie_Osobno_CheckBox: TCheckBox;
    Celowanie__Tryb_RadioGroup: TRadioGroup;
    Celowanie_Precyzja__Falowanie_Niwelowanie_Etykieta_Label: TLabel;
    Celowanie_Precyzja__Falowanie_Niwelowanie_SpinEdit: TSpinEdit;
    Celowanie_Precyzja__Obrót_Etykieta_Label: TLabel;
    Celowanie_Precyzja__Obrót_SpinEdit: TSpinEdit;
    Celowanie_Precyzja__Podniesienie_Etykieta_Label: TLabel;
    Celowanie_Precyzja__Podniesienie_SpinEdit: TSpinEdit;
    Celownicze_Linie_Unoœ_CheckBox: TCheckBox;
    Celowniczy_GLDummyCube: TGLDummyCube;
    Celownik_Bombowiec_Widocznoœæ_CheckBox: TCheckBox;
    Celownik_Ekranowy__Dó³_GLHUDSprite: TGLHUDSprite;
    Celownik_Ekranowy__Góra_GLHUDSprite: TGLHUDSprite;
    Celownik_Ekranowy__Gruboœæ_Edit: TEdit;
    Celownik_Ekranowy__Kolor_Etykieta_Label: TLabel;
    Celownik_Ekranowy__Kolor__A_Edit: TEdit;
    Celownik_Ekranowy__Kolor__B_Edit: TEdit;
    Celownik_Ekranowy__Kolor__G_Edit: TEdit;
    Celownik_Ekranowy__Kolor__R_Edit: TEdit;
    Celownik_Ekranowy__Lewo_GLHUDSprite: TGLHUDSprite;
    Celownik_Ekranowy__Prawo_GLHUDSprite: TGLHUDSprite;
    Celownik_Ekranowy__Szerokoœæ_Edit: TEdit;
    Celownik_Ekranowy__Wielkoœæ_Etykieta_Label: TLabel;
    Celownik_Ekranowy__Wielkoœæ_Label: TLabel;
    Celownik_Ekranowy__Wysokoœæ_Edit: TEdit;
    Celownik_Widocznoœæ_CheckBox: TCheckBox;
    Celownik_Widocznoœæ_Mouse_Look_Active_CheckBox: TCheckBox;
    Chmury_CheckBox: TCheckBox;
    Chmury_GLDummyCube: TGLDummyCube;
    Czcionka_Wielkoœæ__Ekran_Etykieta_Label: TLabel;
    Czcionka_Wielkoœæ__Ekran_SpinEdit: TSpinEdit;
    Czcionka_Wielkoœæ__Radar_Etykieta_Label: TLabel;
    Czcionka_Wielkoœæ__Radar_SpinEdit: TSpinEdit;
    Dalmierz_CheckBox: TCheckBox;
    Dalmierz_Tryb_RadioGroup: TRadioGroup;
    Delta_Czasu_Wyœwietlaj_CheckBox: TCheckBox;
    Dno_GLPlane: TGLPlane;
    Dno_Kolizje_GLCube: TGLCube;
    Do_Wygaszenia_Panel: TPanel;
    DŸwiêk__Aktywnoœæ_CheckBox: TCheckBox;
    DŸwiêk__G³oœnoœæ_Label: TLabel;
    DŸwiêk__G³oœnoœæ_SpinEdit: TSpinEdit;
    DŸwiêk__T³umaczenia_ComboBox: TComboBox;
    DŸwiêk__T³umaczenia_Etykieta_Label: TLabel;
    DŸwiêki_L¹dów_GLSoundLibrary: TGLSoundLibrary;
    DŸwiêki__BabyMetal_Statek_GLDummyCube: TGLDummyCube;
    DŸwiêki__Morze_Falowanie_GLDummyCube: TGLDummyCube;
    Efekt__Chmury_GLPerlinPFXManager: TGLPerlinPFXManager;
    Efekt__Dym_GLPerlinPFXManager: TGLPerlinPFXManager;
    Efekt__Element_Uszkodzenie_GLThorFXManager: TGLThorFXManager;
    Efekt__Mg³a_GLPerlinPFXManager: TGLPerlinPFXManager;
    Efekt__Ogieñ_GLFireFXManager: TGLFireFXManager;
    Efekt__Smuga_D³uga_GLPerlinPFXManager: TGLPerlinPFXManager;
    Efekt__Smuga_GLPerlinPFXManager: TGLPerlinPFXManager;
    Efekt__Sonarowe_U³atwienie_GLFireFXManager: TGLFireFXManager;
    Efekt__SOS_Rozb³ysk_GLPolygonPFXManager: TGLPolygonPFXManager;
    Efekt__Trafienie_Rozb³ysk_GLPolygonPFXManager: TGLPolygonPFXManager;
    Efekt__Wpadniêcie_Do_Wody_0_GLFireFXManager: TGLFireFXManager;
    Efekt__Wpadniêcie_Do_Wody_GLPolygonPFXManager: TGLPolygonPFXManager;
    Fale_CheckBox: TCheckBox;
    Fale_GLCustomHDS: TGLCustomHDS;
    Fale_GLHeightTileFileHDS: TGLHeightTileFileHDS;
    Fale_GLMaterialLibrary: TGLMaterialLibrary;
    Fale_GLTerrainRenderer: TGLTerrainRenderer;
    Form_Show_Dokoñcz_Timer: TTimer;
    Fotograficzny_Tryb_CheckBox: TCheckBox;
    GLArrowLine_Zielona: TGLArrowLine;
    GLArrowLine_¯ó³ta: TGLArrowLine;
    GLLines1: TGLLines;
    GLLines2: TGLLines;
    GLLines3: TGLLines;
    GLMaterialLibrary1: TGLMaterialLibrary;
    GLParticleFXRenderer1: TGLParticleFXRenderer;
    GLSMOpenAL1: TGLSMOpenAL;
    Gra_GLCadencer: TGLCadencer;
    Gra_GLCamera: TGLCamera;
    Gra_GLCollisionManager: TGLCollisionManager;
    Gra_GLLightSource: TGLLightSource;
    Gra_GLNavigator: TGLNavigator;
    Gra_GLScene: TGLScene;
    Gra_GLSceneViewer: TGLSceneViewer;
    Gra_GLSkyDome: TGLSkyDome;
    Gra_GLSoundLibrary: TGLSoundLibrary;
    Gra_GLUserInterface: TGLUserInterface;
    Gra_GLWindowsBitmapFont: TGLWindowsBitmapFont;
    Gra_Komunikaty_GLSoundLibrary: TGLSoundLibrary;
    Gra_Obiekty_GLDummyCube: TGLDummyCube;
    Gra_Pauza_Button: TButton;
    Gra_Rozpocznij_BitBtn: TBitBtn;
    Gra_ScrollBox: TScrollBox;
    Gra_TabSheet: TTabSheet;
    Gra_Uruchamianie_Panel: TPanel;
    Gra_Wspó³czynnik_Prêdkoœci__T³o_Wyró¿nienie_Panel: TPanel;
    Gra_Wspó³czynnik_Prêdkoœci_Etykieta_Label: TLabel;
    Gra_Wspó³czynnik_Prêdkoœci_Label: TLabel;
    Gra_Wspó³czynnik_Prêdkoœci_SpinEdit: TSpinEdit;
    Gra_Wspó³czynnik_Trudnoœci_Etykieta_Label: TLabel;
    Gra_Wspó³czynnik_Trudnoœci_Label: TLabel;
    Gra_Wspó³czynnik_Trudnoœci_SpinEdit: TSpinEdit;
    Gra_Zakoñcz_BitBtn: TBitBtn;
    Gracz_Dane_GroupBox: TGroupBox;
    Gracz_Gotowoœæ_Nie_BitBtn: TBitBtn;
    Gracz_Gotowoœæ_Tak_BitBtn: TBitBtn;
    Gracz_Grupa_Etykieta_Label: TLabel;
    Gracz_Grupa_SpinEdit: TSpinEdit;
    Gracz_Nazwa_Edit: TEdit;
    Gracz_Nazwa_Etykieta_Label: TLabel;
    Gracze_Lista_GroupBox: TGroupBox;
    Gracze_Lista_Odœwie¿_BitBtn: TBitBtn;
    Gracze_Lista_Roz³¹cz_Gracza_BitBtn: TBitBtn;
    Gracze_Lista_StringGrid: TStringGrid;
    Group_Box_PopupMenu: TPopupMenu;
    Group_Box_Popup_Menu__Pokój_Rozmów__Wyczyœæ_MenuItem: TMenuItem;
    Group_Box_Popup_Menu__Pokój_Rozmów__Wyœlij_Do__Ustaw_MenuItem: TMenuItem;
    Group_Box_Popup_Menu__Pokój_Rozmów__Wyœlij_Do__Ustaw_Odstêp_MenuItem: TMenuItem;
    Group_Box_Popup_Menu__Pomniejsz_Bardziej_MenuItem: TMenuItem;
    Group_Box_Popup_Menu__Pomniejsz_Bardziej_Odstêp_MenuItem: TMenuItem;
    Group_Box_Popup_Menu__Pomniejsz_MenuItem: TMenuItem;
    Group_Box_Popup_Menu__Poszerz_MenuItem: TMenuItem;
    Group_Box_Popup_Menu__Poszerz_Odstêp_MenuItem: TMenuItem;
    Group_Box_Popup_Menu__Powiêksz_Bardziej_MenuItem: TMenuItem;
    Group_Box_Popup_Menu__Powiêksz_MenuItem: TMenuItem;
    Group_Box_Popup_Menu__Wielkoœæ_Domyœlna_MenuItem: TMenuItem;
    Group_Box_Popup_Menu__Wielkoœæ_Domyœlna_Odstêp_MenuItem: TMenuItem;
    Group_Box_Popup_Menu__ZwêŸ_MenuItem: TMenuItem;
    Gwiazdy_Migotanie_CheckBox: TCheckBox;
    Has³o_Edit: TEdit;
    Has³o_Etykieta_Label: TLabel;
    IdDecoderMIME1: TIdDecoderMIME;
    IdEncoderMIME1: TIdEncoderMIME;
    IdTCPClient1: TIdTCPClient;
    IdTCPServer1: TIdTCPServer;
    IdUDPClient1: TIdUDPClient;
    IdUDPServer1: TIdUDPServer;
    ImageList1: TImageList;
    Informacje_Dodatkowe_GLAsyncTimer: TGLAsyncTimer;
    Informacje_Dodatkowe_GLHUDSprite: TGLHUDSprite;
    Informacje_Dodatkowe_GLHUDText: TGLHUDText;
    Informacje_G³ówne_GLHUDSprite: TGLHUDSprite;
    Informacje_G³ówne_GLHUDText: TGLHUDText;
    Kamera_Odleg³oœæ_Maksymalna_Etykieta_Label: TLabel;
    Kamera_Odleg³oœæ_Maksymalna_SpinEdit: TSpinEdit;
    Kamera_Szybkoœæ_Ruchu_Edit: TEdit;
    Kamera_Szybkoœæ_Ruchu_Etykieta_Label: TLabel;
    Kamera_Szybkoœæ_Ruchu_Label: TLabel;
    Kamera_Szybkoœæ_Ruchu__T³o_Wyró¿nienie_Panel: TPanel;
    Klatek_Na_Sekundê_Wyœwietlaj_CheckBox: TCheckBox;
    Klawiatura_Konfiguracja_ScrollBox: TScrollBox;
    Klawiatura_Konfiguracja_TabSheet: TTabSheet;
    Klawiatura_Konfiguracja__Domyœlna_Button: TButton;
    Klawiatura_Konfiguracja__Konfiguracja_Numer_SpinEdit: TSpinEdit;
    Klawiatura_Konfiguracja__Niepowtarzalnoœæ_SprawdŸ_Button: TButton;
    Klawiatura_Konfiguracja__Pomoc_Label: TLabel;
    Klawiatura_Konfiguracja__Przyciski_Panel: TPanel;
    Klawiatura_Konfiguracja__Rozmiar_Zak³adki_Poszerz_CheckBox: TCheckBox;
    Klawiatura_Konfiguracja__Szukaj_Edit: TEdit;
    Klawiatura_Konfiguracja__Szukaj__Nastêpny_Button: TButton;
    Klawiatura_Konfiguracja__Szukaj__Pasuj¹ce_Tylko_Wyœwietlaj_CheckBox: TCheckBox;
    Klawiatura_Konfiguracja__Szukaj__Poprzedni_Button: TButton;
    Klawiatura_Konfiguracja__Wczytaj_Button: TButton;
    Klawiatura_Konfiguracja__Zapisz_Button: TButton;
    Klienci_Od³¹cz_Wszystkich_BitBtn: TBitBtn;
    Klient_IdTCP_Czyta_Timer: TTimer;
    Klient_IdUDP_Czyta_Timer: TTimer;
    Klient_Wysy³a_Timer: TTimer;
    Ksiê¿yc_GLSphere: TGLSphere;
    L¹d_ComboBox: TComboBox;
    L¹d_Elementy_Iloœæ_Label: TLabel;
    L¹d_GroupBox: TGroupBox;
    L¹d_Opis_Memo: TMemo;
    L¹d__Komunikat_B³êdu_Pomiñ_CheckBox: TCheckBox;
    L¹d__Odœwie¿_Wskazany_BitBtn: TBitBtn;
    L¹d__Utwórz_BitBtn: TBitBtn;
    L¹d__Wczytaj_Listê_BitBtn: TBitBtn;
    L¹dowanie_U³atwione_CheckBox: TCheckBox;
    Log_Memo: TMemo;
    Log_TabSheet: TTabSheet;
    Logo_Image: TImage;
    Lotniskowiec_Samolot_L¹dowanie_Informacje_CheckBox: TCheckBox;
    Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero_BitBtn: TBitBtn;
    Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero__Rodzaj_RadioGroup: TRadioGroup;
    Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero_GroupBox: TGroupBox;
    Mapa_Label: TLabel;
    Mg³a_Etykieta_Label: TLabel;
    Mg³a_Informacja_Dodatkowa_Pomiñ_CheckBox: TCheckBox;
    Mg³a_SpinEdit: TSpinEdit;
    Mg³a__T³o_Wyró¿nienie_Panel: TPanel;
    Morze_Informacja_Dodatkowa_Pomiñ_CheckBox: TCheckBox;
    Morze_Wzburzenie__T³o_Wyró¿nienie_Panel: TPanel;
    Morze_Wzburzenie_Etykieta_Label: TLabel;
    Morze_Wzburzenie_SpinEdit: TSpinEdit;
    Mysz_Czu³oœæ_Edit: TEdit;
    Mysz_Czu³oœæ_Etykieta_Label: TLabel;
    Mysz_Czu³oœæ_Label: TLabel;
    Mysz_Czu³oœæ_Luneta_Edit: TEdit;
    Mysz_Czu³oœæ_Luneta_Etykieta_Label: TLabel;
    Mysz_Czu³oœæ_Luneta_Label: TLabel;
    Noc_Etykieta_Label: TLabel;
    Noc_Label: TLabel;
    Noc_SpinEdit: TSpinEdit;
    Noc__Czas_Na__Ekranie_Wyœwietlaj_CheckBox: TCheckBox;
    Noc__Czas_Na__Radarze_Wyœwietlaj_CheckBox: TCheckBox;
    Noc__Informacja_Dodatkowa_Pomiñ_CheckBox: TCheckBox;
    Noc__T³o_Wyró¿nienie_Panel: TPanel;
    O_Programie_Label: TLabel;
    O_Programie_TabSheet: TTabSheet;
    Obrót_K¹t_Zablokowany_Strza³_WskaŸnik_CheckBox: TCheckBox;
    Obrót_K¹t_Zablokowany_WskaŸnik_CheckBox: TCheckBox;
    Opcje_Pionowy_Splitter: TSplitter;
    PageControl1: TPageControl;
    Pe³ny_Ekran_CheckBox: TCheckBox;
    Pe³ny_Ekran__Widocznoœæ_Splitter: TSplitter;
    Pe³ny_Ekran__Znikaj¹ce_Elementy_CheckBox: TCheckBox;
    Pod_Wod¹_GLHUDSprite: TGLHUDSprite;
    Pokój_Rozmów_GroupBox: TGroupBox;
    Pokój_Rozmów_Memo: TMemo;
    Pokój_Rozmów_Przyciski_Panel: TPanel;
    Pokój_Rozmów_Przyciski__Rozmiar_Przeci¹gnij_Panel: TPanel;
    Pokój_Rozmów__Data_Czas_Wyœwietlaj_CheckBox: TCheckBox;
    Pokój_Rozmów__Ignoruj_CheckListBox: TCheckListBox;
    Pokój_Rozmów__Ignoruj_GroupBox: TGroupBox;
    Pokój_Rozmów__Ignoruj__Si_Zagaduje_CheckBox: TCheckBox;
    Pokój_Rozmów__Ignoruj__Si_Zak³óca_CheckBox: TCheckBox;
    Pokój_Rozmów__Ignoruj__Trafienie_Informacja_CheckBox: TCheckBox;
    Pokój_Rozmów__Ignoruj__Wys³a³_Polecenie_CheckBox: TCheckBox;
    Pokój_Rozmów__Informacja_Dodatkowa_CheckBox: TCheckBox;
    Pokój_Rozmów__Na_Ekranie_CheckBox: TCheckBox;
    Pokój_Rozmów__Ukryj_Button: TButton;
    Pokój_Rozmów__Wiadomoœæ_Edit: TEdit;
    Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox: TComboBox;
    Pokój_Rozmów__Wyœlij_Wiadomoœæ_Button: TButton;
    Pozosta³e_ScrollBox: TScrollBox;
    Pozosta³e_TabSheet: TTabSheet;
    Projektowy_Tryb_CheckBox: TCheckBox;
    Projektowy_Tryb__Grawitacja_Wy³¹cz_CheckBox: TCheckBox;
    Projektowy_Tryb__Przesuwanie_Skaluj_CheckBox: TCheckBox;
    Projektowy_Tryb__Wspó³rzêdne_Sceny_Wyœwietlaj_CheckBox: TCheckBox;
    Prze³adowanie_WskaŸnik_CheckBox: TCheckBox;
    Punkt_Naprowadzaj_CheckBox: TCheckBox;
    Punkt_Naprowadzaj_GLArrowLine: TGLArrowLine;
    Punkt_Naprowadzaj_GLDummyCube: TGLDummyCube;
    Punkt_Naprowadzaj_GroupBox: TGroupBox;
    Punkt_Naprowadzaj__Na_Lotniskowiec_CheckBox: TCheckBox;
    Punkt_Naprowadzaj__Odleg³oœæ_Do_Punktu_Prezentuj_CheckBox: TCheckBox;
    Punkt_Naprowadzaj__Punkt_CheckBox: TCheckBox;
    Punkt_Naprowadzaj__Radar_CheckBox: TCheckBox;
    Punkt_Naprowadzaj__Strza³ka_CheckBox: TCheckBox;
    Punkt_Naprowadzaj__X_Etykieta_Label: TLabel;
    Punkt_Naprowadzaj__X_SpinEdit: TSpinEdit;
    Punkt_Naprowadzaj__Y_Etykieta_Label: TLabel;
    Punkt_Naprowadzaj__Y_SpinEdit: TSpinEdit;
    Punkt_Naprowadzaj__Z_Etykieta_Label: TLabel;
    Punkt_Naprowadzaj__Z_SpinEdit: TSpinEdit;
    Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBox: TComboBox;
    Punkty_¯ycia_WskaŸnik__Gracz_CheckBox: TCheckBox;
    Punkty_¯ycia_WskaŸnik__Prezentowanie_Sposób_ComboBox: TComboBox;
    Punkty_¯ycia_WskaŸnik__Przeciwnik_CheckBox: TCheckBox;
    Punkty_¯ycia_WskaŸnik__Sojusznik_CheckBox: TCheckBox;
    Punkty_¯ycia_WskaŸnik____T³o_Wyró¿nienie_Panel: TPanel;
    Radar_0_GLSphere: TGLSphere;
    Radar_GLCamera: TGLCamera;
    Radar_GLHUDText: TGLHUDText;
    Radar_GLLightSource: TGLLightSource;
    Radar_GLScene: TGLScene;
    Radar_GLSceneViewer: TGLSceneViewer;
    Radar_GLSkyDome: TGLSkyDome;
    Radar_GLWindowsBitmapFont: TGLWindowsBitmapFont;
    Radar_Kamera_Kierunek_GLDisk: TGLDisk;
    Radar_Kamera_Kierunek_GLDummyCube: TGLDummyCube;
    Radar_L_GLCapsule: TGLCapsule;
    Radar_Obiekty_GLDummyCube: TGLDummyCube;
    Radar_Panel: TPanel;
    Radar_PN_Linia_GLLines: TGLLines;
    Radar_Punkt_Naprowadzaj_GLDummyCube: TGLDummyCube;
    Radar_Statek_GLDummyCube: TGLDummyCube;
    Radar_Statek_GLFrustrum: TGLFrustrum;
    Radar_Œlady_GLDummyCube: TGLDummyCube;
    Radar_T³o_GLPlane: TGLPlane;
    Radar_Wiatr_Kierunek_Linia_GLLines: TGLLines;
    Radar_Zasiêg_GLDisk: TGLDisk;
    Radio_Zasiêg_GLDisk: TGLDisk;
    Radar__Broñ_Zasiêg_Wyœwietlaj_CheckBox: TCheckBox;
    Radar__Czu³oœæ_Etykieta_Label: TLabel;
    Radar__Czu³oœæ_SpinEdit: TSpinEdit;
    Radar__Dane_Z_Radia_CheckBox: TCheckBox;
    Radar__Dane_Z_Radia__L¹dy_CheckBox: TCheckBox;
    Radar__Dane_Z_Sonaru_CheckBox: TCheckBox;
    Radar__Kamera_Kierunek_Wyœwietlaj_CheckBox: TCheckBox;
    Radar__L¹d_Rysowanie_Zasiêg_Etykieta_Label: TLabel;
    Radar__L¹d_Rysowanie_Zasiêg_SpinEdit: TSpinEdit;
    Radar__Pomniejsz_Button: TButton;
    Radar__Powiêksz_Button: TButton;
    Radar__Przyciski_Panel: TPanel;
    Radar__Przyciski_Panel__Ukrywaj_CheckBox: TCheckBox;
    Radar__Rysowanie_Œladów__Amunicji_Sekundy_Etykieta_Label: TLabel;
    Radar__Rysowanie_Œladów__Amunicji_Sekundy_SpinEdit: TSpinEdit;
    Radar__Rysowanie_Œladów__Statków_Sekundy_Etykieta_Label: TLabel;
    Radar__Rysowanie_Œladów__Statków_Sekundy_SpinEdit: TSpinEdit;
    Radar__Skala_Etykieta_Label: TLabel;
    Radar__Skala_SpinEdit: TSpinEdit;
    Radar__Skala_Y_Uwzglêdniaj_L¹d_CheckBox: TCheckBox;
    Radar__Widocznoœæ_CheckBox: TCheckBox;
    Radar__Wspó³rzêdna_Y_CheckBox: TCheckBox;
    Radar__Wspó³rzêdne_Kursora_CheckBox: TCheckBox;
    Radar__Zmieniaj_Czu³oœæ_Wraz_Ze_Skal¹_CheckBox: TCheckBox;
    Schemat_Samolot_Zmieñ_BitBtn: TBitBtn;
    Serwer_Adres_IP_Edit: TEdit;
    Serwer_Adres_IP_Etykieta_Label: TLabel;
    Serwer_Klient_Od³¹czenie_Timer: TTimer;
    Serwer_Port_Etykieta_Label: TLabel;
    Serwer_Port_SpinEdit: TSpinEdit;
    Serwer_Wysy³a_Timer: TTimer;
    SI_GroupBox: TGroupBox;
    SI_Statek_Gracza_GroupBox: TGroupBox;
    SI__Dodaj_BitBtn: TBitBtn;
    SI__Grupa_Etykieta_Label: TLabel;
    SI__Grupa_SpinEdit: TSpinEdit;
    SI__Kasuj_Wszystkie_BitBtn: TBitBtn;
    SI__Nazwa_Edit: TEdit;
    SI__Nazwa_Etykieta_Label: TLabel;
    SI__Patrol_Blisko_Zostaje_CheckBox: TCheckBox;
    SI__P³ywa_CheckBox: TCheckBox;
    SI__P³ywa__Samolot_Gracza_CheckBox: TCheckBox;
    SI__P³ywa__Statek_Gracza_CheckBox: TCheckBox;
    SI__Samolot_Gracza__L¹duj_Na_Lotniskowcu_Gracza_Button: TButton;
    SI__Schemat_ComboBox: TComboBox;
    SI__Schemat_GroupBox: TGroupBox;
    SI__Schemat_Opis_Memo: TMemo;
    SI__Schemat__Kasuj_BitBtn: TBitBtn;
    SI__Schemat__Odœwie¿_Wskazany_BitBtn: TBitBtn;
    SI__Schemat__Wczytaj_Listê_BitBtn: TBitBtn;
    SI__Schemat__Zapisz_BitBtn: TBitBtn;
    SI__Schemat__Zapisz__Nazwa_Ttreœæ_Z_Pola_Nazwa_CheckBox: TCheckBox;
    SI__Schemat__Zastosuj__Pomiñ__L¹d_CheckBox: TCheckBox;
    SI__Schemat__Zastosuj__Pomiñ__Statki_Pozycje_Pocz¹tkowe_CheckBox: TCheckBox;
    SI__Schemat__Zastosuj_BitBtn: TBitBtn;
    SI__Statek_ComboBox: TComboBox;
    SI__Statek__Samolot_ComboBox: TComboBox;
    SI__Strzela_CheckBox: TCheckBox;
    SI__Strzela__Statek_Gracza_RadioGroup: TRadioGroup;
    S³oñce_GLDummyCube: TGLDummyCube;
    S³oñce_GLSphere: TGLSphere;
    Sonar_Zasiêg_GLDisk: TGLDisk;
    Sonarowe_U³atwienie_CheckBox: TCheckBox;
    Sonarowe_U³atwienie_GLDummyCube: TGLDummyCube;
    Sonarowe_U³atwienie__Klient_Zmieniaæ_Mo¿e_CheckBox: TCheckBox;
    SOS_Nadaj_Button: TButton;
    Statek_ComboBox: TComboBox;
    Statek_GroupBox: TGroupBox;
    Statek_Opis_Memo: TMemo;
    Statek__Komunikat_B³êdu_Pomiñ_CheckBox: TCheckBox;
    Statek__Odœwie¿_Wskazany_BitBtn: TBitBtn;
    Statek__Opis_BitBtn: TBitBtn;
    Statek__Samolot_ComboBox: TComboBox;
    Statek__Utwórz_BitBtn: TBitBtn;
    Statek__Wczytaj_Listê_BitBtn: TBitBtn;
    Statek__Zwolnij_BitBtn: TBitBtn;
    Statki_Pozycje_Pocz¹tkowe__Brak_BitBtn: TBitBtn;
    Statki_Pozycje_Pocz¹tkowe__Odœwie¿_Wskazany_BitBtn: TBitBtn;
    Statki_Pozycje_Pocz¹tkowe__Wczytaj_Listê_BitBtn: TBitBtn;
    Statki_Pozycje_Pocz¹tkowe_ComboBox: TComboBox;
    Statki_Pozycje_Pocz¹tkowe_GroupBox: TGroupBox;
    Statki_Pozycje_Pocz¹tkowe_Label: TLabel;
    Statki_Pozycje_Pocz¹tkowe_Opis_Memo: TMemo;
    Statki_Przywracaj_Do_Gry_CheckBox: TCheckBox;
    Statki_Zaprezentuj_Button: TButton;
    Statki_Zaprezentuj_CheckListBox: TCheckListBox;
    Statki_Zaprezentuj_GroupBox: TGroupBox;
    Statki_Zaprezentuj__Kolumna_CheckBox: TCheckBox;
    Statki_Zaprezentuj__Odstêpy_Miêdzy_Statkami_Etykieta_Label: TLabel;
    Statki_Zaprezentuj__Odstêpy_Miêdzy_Statkami_SpinEdit: TSpinEdit;
    Statki_Zaprezentuj__Pozycja_Pocz¹tkowa_Etykieta_Label: TLabel;
    Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__X_Etykieta_Label: TLabel;
    Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__X_SpinEdit: TSpinEdit;
    Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__Y_Etykieta_Label: TLabel;
    Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__Y_SpinEdit: TSpinEdit;
    Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__Z_Etykieta_Label: TLabel;
    Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__Z_SpinEdit: TSpinEdit;
    Statki_Zaprezentuj__Zwolnij_BitBtn: TBitBtn;
    Statystyki_Panel: TPanel;
    Statystyki_Pomoc_Label: TLabel;
    Statystyki_StringGrid: TStringGrid;
    Statystyki_TabSheet: TTabSheet;
    Statystyki_W_Logu_Wypisz_CheckBox: TCheckBox;
    Statystyki_Wiersz_Numer_Label: TLabel;
    Statystyki_Wypisz_Button: TButton;
    Statystyki__Rozmiar_Zak³adki_Poszerz_CheckBox: TCheckBox;
    Œwiat³a_CheckBox: TCheckBox;
    Œwiat³a_Dodatkowe_CheckBox: TCheckBox;
    Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBox: TCheckBox;
    T³umaczenia_ComboBox: TComboBox;
    T³umaczenie_Etykieta_Label: TLabel;
    T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox: TCheckBox;
    Trafienia_W_Logu_Wpisuj_CheckBox: TCheckBox;
    Ustawienia_Panel: TPanel;
    Ustawienia_ScrollBox: TScrollBox;
    Ustawienia_TabSheet: TTabSheet;
    Ustawienia_Wczytaj_Button: TButton;
    Ustawienia_Zapisz_Button: TButton;
    Wiatr_CheckBox: TCheckBox;
    Wiatr__Kierunek_Wyœwietlaj_Na__Ekranie_CheckBox: TCheckBox;
    Wiatr__Kierunek_Wyœwietlaj_Na__Radarze_CheckBox: TCheckBox;
    Wiatr__Si³a_SpinEdit: TSpinEdit;
    Wiatr__Wp³yw_Na_Rozgrywkê_CheckBox: TCheckBox;
    Wiatr__Zmiana_Tryb_RadioGroup: TRadioGroup;
    Wieloosobowe_Gra_GroupBox: TGroupBox;
    Wieloosobowe_GroupBox: TGroupBox;
    Wieloosobowe_Identyfikator_Edit: TEdit;
    Wieloosobowe_Identyfikator_Etykieta_Label: TLabel;
    Wieloosobowe_Identyfikator_Gra_Etykieta_Label: TLabel;
    Wieloosobowe_Identyfikator_Gra_Label: TLabel;
    Wieloosobowe_ScrollBox: TScrollBox;
    Wieloosobowe_TabSheet: TTabSheet;
    Wieloosobowe__Od³¹cz_BitBtn: TBitBtn;
    Wieloosobowe__Pod³¹cz_BitBtn: TBitBtn;
    Wieloosobowe__Tryb_RadioGroup: TRadioGroup;
    Woda_Dó³_GLPlane: TGLPlane;
    Woda_Góra_GLPlane: TGLPlane;
    Woda_Kolizje_GLCube: TGLCube;
    X_Lewo_GLCube: TGLCube;
    Z_Ty³_GLCone1: TGLCone;
    Zak³ócanie__Dozwolone_CheckBox: TCheckBox;
    Zak³ócanie__Graczy_Nie_SI_Dozwolone_CheckBox: TCheckBox;
    Zanurzenie_Zadane_Przekraczaj_100_Procent_CheckBox: TCheckBox;
    Zero_GLSphere: TGLSphere;
    Zmieniaj_Automatycznie_Etykieta_Label: TLabel;
    Zmieniaj_Automatycznie_GroupBox: TGroupBox;
    Zmieniaj_Automatycznie__Mg³a_CheckBox: TCheckBox;
    Zmieniaj_Automatycznie__Mg³a_GLAsyncTimer: TGLAsyncTimer;
    Zmieniaj_Automatycznie__Mg³a__Do_SpinEdit: TSpinEdit;
    Zmieniaj_Automatycznie__Mg³a__Kierunek_Rosn¹co_CheckBox: TCheckBox;
    Zmieniaj_Automatycznie__Mg³a__Losowoœæ_SpinEdit: TSpinEdit;
    Zmieniaj_Automatycznie__Mg³a__Od_SpinEdit: TSpinEdit;
    Zmieniaj_Automatycznie__Mg³a__Si³a_SpinEdit: TSpinEdit;
    Zmieniaj_Automatycznie__Mg³a__Szybkoœæ_SpinEdit: TSpinEdit;
    Zmieniaj_Automatycznie__Morze_Wzburzenie_CheckBox: TCheckBox;
    Zmieniaj_Automatycznie__Morze_Wzburzenie_GLAsyncTimer: TGLAsyncTimer;
    Zmieniaj_Automatycznie__Morze_Wzburzenie__Do_SpinEdit: TSpinEdit;
    Zmieniaj_Automatycznie__Morze_Wzburzenie__Kierunek_Rosn¹co_CheckBox: TCheckBox;
    Zmieniaj_Automatycznie__Morze_Wzburzenie__Losowoœæ_SpinEdit: TSpinEdit;
    Zmieniaj_Automatycznie__Morze_Wzburzenie__Od_SpinEdit: TSpinEdit;
    Zmieniaj_Automatycznie__Morze_Wzburzenie__Si³a_SpinEdit: TSpinEdit;
    Zmieniaj_Automatycznie__Morze_Wzburzenie__Szybkoœæ_SpinEdit: TSpinEdit;
    Zmieniaj_Automatycznie__Noc_CheckBox: TCheckBox;
    Zmieniaj_Automatycznie__Noc_GLAsyncTimer: TGLAsyncTimer;
    Zmieniaj_Automatycznie__Noc__Do_SpinEdit: TSpinEdit;
    Zmieniaj_Automatycznie__Noc__Kierunek_Rosn¹co_CheckBox: TCheckBox;
    Zmieniaj_Automatycznie__Noc__Losowoœæ_SpinEdit: TSpinEdit;
    Zmieniaj_Automatycznie__Noc__Od_SpinEdit: TSpinEdit;
    Zmieniaj_Automatycznie__Noc__Si³a_SpinEdit: TSpinEdit;
    Zmieniaj_Automatycznie__Noc__Szybkoœæ_SpinEdit: TSpinEdit;
    Button1: TButton;
    Klawiatura_Konfiguracja__Sortuj_Button: TButton;
    DŸwiêki__Komunikaty_GLDummyCube: TGLDummyCube;
    DŸwiêki__Komunikaty_GLAsyncTimer: TGLAsyncTimer;
    Efekty_GroupBox: TGroupBox;
    Efekty__Dym_CheckBox: TCheckBox;
    Efekty__Element_Uszkodzenie_CheckBox: TCheckBox;
    Efekty__Mg³a_CheckBox: TCheckBox;
    Efekty__Ogieñ_CheckBox: TCheckBox;
    Efekty__Smuga_CheckBox: TCheckBox;
    Efekty__Smuga_D³uga_CheckBox: TCheckBox;
    Efekty__Sonarowe_U³atwienie_CheckBox: TCheckBox;
    Efekty__SOS_Rozb³ysk_CheckBox: TCheckBox;
    Efekty__Trafienie_Rozb³ysk_CheckBox: TCheckBox;
    Efekty__Wpadniêcie_Do_Wody_CheckBox: TCheckBox;
    Efekty__Wpadniêcie_Do_Wody_0_CheckBox: TCheckBox;
    Gra_GLEarthSkyDome: TGLEarthSkyDome;
    Radar_GLEarthSkyDome: TGLEarthSkyDome;
    Niebo_Rodzaj_RadioGroup: TRadioGroup;
    Radar__Niebo_Rodzaj_RadioGroup: TRadioGroup;

    procedure FormShow( Sender: TObject );
    procedure Form_Show_Dokoñcz_TimerTimer( Sender: TObject );
    procedure FormClose( Sender: TObject; var Action: TCloseAction );
    procedure FormResize( Sender: TObject );

    procedure Gra_GLSceneViewerExit( Sender: TObject );
    procedure Gra_GLSceneViewerClick( Sender: TObject );
    procedure Gra_GLSceneViewerMouseDown( Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer );
    procedure Gra_GLSceneViewerMouseWheel( Sender: TObject; Shift: TShiftState; WheelDelta: Integer; MousePos: TPoint; var Handled: Boolean );
    procedure Gra_GLSceneViewerMouseMove( Sender: TObject; Shift: TShiftState; X, Y: Integer );
    procedure Gra_GLSceneViewerKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
    procedure Gra_GLCadencerProgress( Sender: TObject; const deltaTime, newTime: Double );
    procedure Gra_GLCollisionManagerCollision( Sender: TObject; object1, object2: TGLBaseSceneObject );

    procedure IdTCPServer1Connect( AContext: TIdContext );
    procedure IdTCPServer1Disconnect( AContext: TIdContext );
    procedure IdTCPServer1Execute( AContext: TIdContext );

    procedure IdUDPServer1UDPRead( AThread: TIdUDPListenerThread; const AData: TIdBytes; ABinding: TIdSocketHandle );

    procedure Serwer_Wysy³a_TimerTimer( Sender: TObject );
    procedure Klient_IdTCP_Czyta_TimerTimer( Sender: TObject );
    procedure Klient_IdUDP_Czyta_TimerTimer( Sender: TObject );
    procedure Klient_Wysy³a_TimerTimer( Sender: TObject );
    procedure Serwer_Klient_Od³¹czenie_TimerTimer( Sender: TObject );

    procedure Amunicja__Zanurzenie_G³êbokoœæ_Zadana_EditChange( Sender: TObject );
    procedure Celowanie_ParametryClick( Sender: TObject );
    procedure Celownik_Widocznoœæ_CheckBoxClick( Sender: TObject );
    procedure Celownik_Wielkoœæ_EditChange( Sender: TObject );
    procedure Chmury_CheckBoxClick( Sender: TObject );
    procedure Czcionka_Wielkoœæ_SpinEditChange( Sender: TObject );
    procedure DŸwiêk__Aktywnoœæ_CheckBoxClick( Sender: TObject );
    procedure DŸwiêk__G³oœnoœæ_SpinEditChange( Sender: TObject );
    procedure DŸwiêki__Komunikaty_GLAsyncTimerTimer( Sender: TObject );
    procedure DŸwiêk__T³umaczenia_ComboBoxKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
    procedure Edit_Jako_Spin_KeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
    procedure Elementy_Gracza_Dostosuj_CheckBoxClick( Sender: TObject );

    procedure Fale_CheckBoxClick( Sender: TObject );
    procedure Fale_GLTerrainRendererGetTerrainBounds( var l, t, r, b: Single );
    procedure Fale_GLTerrainRendererHeightDataPostRender( var rci: GLS.RenderContextInfo.TGLRenderContextInfo; var HeightDatas: TList );
    procedure Fale_GLCustomHDSStartPreparingData( HeightData: TGLHeightData );

    procedure Fotograficzny_Tryb_CheckBoxClick( Sender: TObject );

    procedure Gra_Pauza_ButtonClick( Sender: TObject );
    procedure Gra_Rozpocznij_BitBtnClick( Sender: TObject );
    procedure Gra_Wspó³czynnik_Prêdkoœci_SpinEditChange( Sender: TObject );
    procedure Gra_Wspó³czynnik_Trudnoœci_SpinEditChange( Sender: TObject );
    procedure Gra_Zakoñcz_BitBtnClick( Sender: TObject );

    procedure Gracz_Gotowoœæ_BitBtnClick( Sender: TObject );
    procedure Gracze_Lista_Odœwie¿_BitBtnClick( Sender: TObject );
    procedure Gracze_Lista_Roz³¹cz_Gracza_BitBtnClick( Sender: TObject );
    procedure Gracze_Lista_StringGridClick( Sender: TObject );
    procedure Gracze_Lista_StringGridFixedCellClick( Sender: TObject; ACol, ARow: Integer );
    procedure Gracze_Lista_StringGridSelectCell( Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean );
    procedure Gracze_Lista_StringGridDrawCell( Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState );

    procedure Group_Box_PopupMenuPopup( Sender: TObject );
    procedure Group_Box_Popup_Menu_MenuItemClick( Sender: TObject );
    procedure Gwiazdy_Migotanie_CheckBoxClick( Sender: TObject );
    procedure Informacje_Dodatkowe_GLAsyncTimerTimer( Sender: TObject );
    procedure Kamera_Szybkoœæ_Ruchu_EditChange( Sender: TObject );
    procedure Klawiatura_Konfiguracja__Konfiguracja_Numer_SpinEditKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
    procedure Klawiatura_Konfiguracja__Domyœlna_ButtonClick( Sender: TObject );
    procedure Klawiatura_Konfiguracja__Niepowtarzalnoœæ_SprawdŸ_ButtonClick( Sender: TObject );
    procedure Klawiatura_Konfiguracja__Sortuj_ButtonClick( Sender: TObject );
    procedure Klawiatura_Konfiguracja__Szukaj_EditChange( Sender: TObject );
    procedure Klawiatura_Konfiguracja__Szukaj_EditKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
    procedure Klawiatura_Konfiguracja__Wczytaj_ButtonClick( Sender: TObject );
    procedure Klawiatura_Konfiguracja__Zapisz_ButtonClick( Sender: TObject );
    procedure Klienci_Od³¹cz_Wszystkich_BitBtnClick( Sender: TObject );
    procedure L¹dowanie_U³atwione_CheckBoxClick( Sender: TObject );
    procedure L¹d_ComboBoxChange( Sender: TObject );
    procedure L¹d__Odœwie¿_Wskazany_BitBtnClick( Sender: TObject );
    procedure L¹d__Utwórz_BitBtnClick( Sender: TObject );
    procedure L¹d__Wczytaj_Listê_BitBtnClick( Sender: TObject );
    procedure Log_MemoKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
    procedure Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero_BitBtnClick( Sender: TObject );
    procedure Mg³a_SpinEditChange( Sender: TObject );
    procedure Morze_Wzburzenie_SpinEditChange( Sender: TObject );
    procedure Mysz_Czu³oœæ_EditChange( Sender: TObject );
    procedure Niebo_Rodzaj_RadioGroupClick( Sender: TObject );
    procedure Noc_SpinEditChange( Sender: TObject );
    procedure PageControl1Change( Sender: TObject );
    procedure Pe³ny_Ekran_CheckBoxClick( Sender: TObject );

    procedure Pokój_Rozmów_Przyciski_PanelMouseDown( Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer );
    procedure Pokój_Rozmów_Przyciski_PanelMouseMove( Sender: TObject; Shift: TShiftState; X, Y: Integer );
    procedure Pokój_Rozmów_Przyciski_PanelMouseUp( Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer );
    procedure Pokój_Rozmów__Ignoruj_CheckListBoxKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
    procedure Pokój_Rozmów__Na_Ekranie_CheckBoxClick( Sender: TObject );
    procedure Pokój_Rozmów__Ukryj_ButtonClick( Sender: TObject );
    procedure Pokój_Rozmów__Wiadomoœæ_EditKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
    procedure Pokój_Rozmów__Wyœlij_Wiadomoœæ_ButtonClick( Sender: TObject );

    procedure Projektowy_Tryb_CheckBoxClick( Sender: TObject );
    procedure Punkt_Naprowadzaj_SpinEditChange( Sender: TObject );
    procedure Punkt_NaprowadzajSpinEditKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
    procedure Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBoxChange( Sender: TObject );
    procedure Radar_GLSceneViewerMouseMove( Sender: TObject; Shift: TShiftState; X, Y: Integer );
    procedure Radar__Skala_SpinEditChange( Sender: TObject );
    procedure Radar__Widocznoœæ_CheckBoxClick( Sender: TObject );
    procedure Radar__Wielkoœæ_ButtonClick( Sender: TObject );

    procedure Schemat_Samolot_Zmieñ_BitBtnClick( Sender: TObject );
    procedure ScrollBoxMouseWheel( Sender: TObject; Shift: TShiftState; WheelDelta: Integer; MousePos: TPoint; var Handled: Boolean );

    procedure SI__Dodaj_BitBtnClick( Sender: TObject );
    procedure SI__Kasuj_Wszystkie_BitBtnClick( Sender: TObject );
    procedure SI__Nazwa_EditKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
    procedure SI__Statek_ComboBoxKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );

    procedure SI__Samolot_Gracza__L¹duj_Na_Lotniskowcu_Gracza_ButtonClick( Sender: TObject );
    procedure SI__Schemat_ComboBoxChange( Sender: TObject );
    procedure SI__Schemat_ComboBoxKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
    procedure SI__Schemat__Kasuj_BitBtnClick( Sender: TObject );
    procedure SI__Schemat__Odœwie¿_Wskazany_BitBtnClick( Sender: TObject );
    procedure SI__Schemat__Wczytaj_Listê_BitBtnClick( Sender: TObject );
    procedure SI__Schemat__Zapisz_BitBtnClick( Sender: TObject );
    procedure SI__Schemat__Zastosuj_BitBtnClick( Sender: TObject );
    procedure SI__Statek_ComboBoxChange( Sender: TObject );

    procedure SOS_Nadaj_ButtonClick( Sender: TObject );

    procedure Statki_Pozycje_Pocz¹tkowe_ComboBoxChange( Sender: TObject );
    procedure Statki_Pozycje_Pocz¹tkowe__Brak_BitBtnClick( Sender: TObject );
    procedure Statki_Pozycje_Pocz¹tkowe__Odœwie¿_Wskazany_BitBtnClick( Sender: TObject );
    procedure Statki_Pozycje_Pocz¹tkowe__Wczytaj_Listê_BitBtnClick( Sender: TObject );

    procedure Statki_Zaprezentuj_ButtonClick( Sender: TObject );
    procedure Statki_Zaprezentuj__Zwolnij_BitBtnClick( Sender: TObject );
    procedure Statki_ZaprezentujKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
    procedure Statki_Zaprezentuj_CheckListBoxKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );

    procedure Statystyki_Wypisz_ButtonClick( Sender: TObject );
    procedure Statystyki_StringGridClick( Sender: TObject );
    procedure Statystyki_StringGridFixedCellClick( Sender: TObject; ACol, ARow: Integer );
    procedure Statystyki_StringGridSelectCell( Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean );
    procedure Statystyki_StringGridDrawCell( Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState );

    procedure Statek_Parametry_Ustaw( Sender: TObject );
    procedure Statek_ComboBoxChange( Sender: TObject );
    procedure Statek_ComboBoxKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
    procedure Statek__Komunikat_B³êdu_Pomiñ_CheckBoxClick( Sender: TObject );
    procedure Statek__Odœwie¿_Wskazany_BitBtnClick( Sender: TObject );
    procedure Statek__Opis_BitBtnClick( Sender: TObject );
    procedure Statek__Utwórz_BitBtnClick( Sender: TObject );
    procedure Statek__Wczytaj_Listê_BitBtnClick( Sender: TObject );
    procedure Statek__Zwolnij_BitBtnClick( Sender: TObject );

    procedure Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBoxClick( Sender: TObject );
    procedure T³umaczenia_ComboBoxKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
    procedure T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBoxClick( Sender: TObject );

    procedure Ustawienia_Wczytaj_ButtonClick( Sender: TObject );
    procedure Ustawienia_Zapisz_ButtonClick( Sender: TObject );

    procedure Wiatr__Si³a_SpinEditChange( Sender: TObject );

    procedure Wieloosobowe__Od³¹cz_BitBtnClick( Sender: TObject );
    procedure Wieloosobowe__Pod³¹cz_BitBtnClick( Sender: TObject );
    procedure Wieloosobowe__Tryb_RadioGroupClick( Sender: TObject );

    procedure Wspó³czynniki_Inne_Click( Sender: TObject );

    procedure Zmieniaj_Automatycznie_CheckBoxClick( Sender: TObject );
    procedure Zmieniaj_Automatycznie_GLAsyncTimerTimer( Sender: TObject );
    procedure Zmieniaj_Automatycznie_Szybkoœæ_SpinEditChange( Sender: TObject );
    procedure Zmieniaj_Automatycznie__Mg³a_GLAsyncTimerTimer( Sender: TObject );

    procedure Button1Click(Sender: TObject);
  private
    { Private declarations }
    amunicja__obra¿enia_zasiêg_widoczne_g,
    babymetal_statek__rotacja_w³asna_g,

    czy_kamera_od_najnowszego_pocisku, // Prze³¹cza kamerê pomiêdzy pociskami w kierunku od najnowszego do najstarszego (gdy prawda). // Podpi¹æ do menu opcji.
    czy_pauza_g,
    //mouse_look_active_przed_pauz¹, // Podczas pauzy nie obraca siê kamera i po wy³¹czeniu pauzy wystêpuje skok kamery na nowe wspó³rzêdne myszy.

    celownik_widocznoœæ__prze³¹czony_g,
    czy_gra_lokalna_g,
    czy_serwer_g,
    czy_klient_g,
    czy_wy³¹czanie_serwera_g, // W trybie serwera (oznacza, ¿e serwer jest w procedurze wy³¹czania siê).
    //czy_wysy³anie_trwa_g, //??? To nie pomaga. // Je¿eli serwer TCP zacznie wysy³anie gdy poprzednie siê nie zakoñczy³o mo¿e dojœæ do zamro¿enia programu (Contexts.LockList() wywo³a siê za du¿o razy, pozak³ada wewnêtrzne blokady, które siê nie poœci¹gaj¹ - Contexts.UnlockList()).
    dŸwiêki__losowe_uruchomione__wszystkie__l¹d_g,
    dŸwiêki__losowe_uruchomione__wszystkie__statki_g,
    //kamera_obrót_mysz¹_g,
    klient_pierwsze_ustawienie_kamery_g, // Po rozpoczêciu gry ustawi kamerê gracza klienta na jego statku.
    l¹d_zwolnij_uszkodzenia_przelicz_g, // Aby przelicza³ czy zwalniaæ trafione obiekty l¹dów tylko gdy wykryto trafienie.
    pokój_rozmów__zmiana_szerokoœci__aktywnoœæ_g, // Aktywnoœæ trybu zmiany szerokoœci pokoju rozmów.
    statek_parametry_ustaw__blokuj_g, // Aby nie wykonywa³a siê funkcja podczas ustawiania wartoœci pocz¹tkowych w komponentach.
    statki_pozycje_pocz¹tkowe__klient_wartoœæ__wed³ug_mapy_g, // Informacja dla klientów, ¿e konfiguracji pozycji pocz¹tkowych statków na serwerze jest wyliczana wed³ug mapy.
    œwiat³a_miganie__opóŸnienia_losowe_resetuj__l¹d__przeliczono_g
      : boolean;

    dŸwiêk_emiter__wyœwietlanie_poziom_g, // Okreœla czy wyœwietlaæ utworzone emitery dŸwiêków: 0 - nie; 1 - tak, osie pojawi¹ siê gdy emiter dŸwiêku zostanie uruchomiony (odtwarza dŸwiêk); 2 - zarys (krawêdzie) i osie s¹ widoczne ju¿ po utworzeniu emitera dŸwiêku.
    s³oñce_ksiê¿yc_odcieñ_pora_przeliczone_g // Ogranicza iloœæ przeliczeñ odcieni.
      : byte;

    babymetal_statek__widocznoœæ_losowanie__sekundy_i_g, // Co jaki czas odbywa siê losowanie widocznoœci BabyMetal Statku.
    chmury__iloœæ_g, // Iloœæ chmur.
    chmury__pozycje__przeliczenie_sekundy_g, // Co jaki czas s¹ przeliczane pozycje chmur.
    chmury__rozpiêtoœæ_w__pionie_g, // Odleg³oœæ w pionie od chmury__wysokoœæ_g (kontenera na chmury Chmury_GLDummyCube) na jakiej pojawiaj¹ siê chmury.
    chmury__rozpiêtoœæ_w__poziomie_g, // Odleg³oœæ w poziomie (od kontenera na chmury Chmury_GLDummyCube) na jakiej pojawiaj¹ siê chmury.
    dŸwiêki__iloœæ__amunicja__lot_g, // Iloœci dŸwiêków mo¿liwych do wylosowania dla danego 'efektu'. Przyk³ad nazwy pliku (indeksowane od 1) 'nazwa_nn' np. 'Abc_01'.
    dŸwiêki__iloœæ__amunicja__lot__du¿e_g,
    dŸwiêki__iloœæ__amunicja__p³yniêcie_g,
    dŸwiêki__iloœæ__kotwica__statek_g,
    dŸwiêki__iloœæ__kotwica__stop_g,
    dŸwiêki__iloœæ__kotwica__w_dó³_g,
    dŸwiêki__iloœæ__kotwica__w_górê_g,
    dŸwiêki__iloœæ__lufa_za³adowanie_g,
    dŸwiêki__iloœæ__lufa_za³adowanie__du¿e_g,
    dŸwiêki__iloœæ__silnik__25_g,
    dŸwiêki__iloœæ__silnik__50_g,
    dŸwiêki__iloœæ__silnik__75_g,
    dŸwiêki__iloœæ__silnik__100_g,
    dŸwiêki__iloœæ__sos_lot_g,
    dŸwiêki__iloœæ__sos_rozb³ysk_g,
    dŸwiêki__iloœæ__syrena_okrêtowa_g,
    dŸwiêki__iloœæ__trafienie_l¹d_g,
    dŸwiêki__iloœæ__trafienie_l¹d__du¿e_g,
    dŸwiêki__iloœæ__trafienie_statek_g,
    dŸwiêki__iloœæ__trafienie_statek__du¿e_g,
    dŸwiêki__iloœæ__trafienie_woda_g,
    dŸwiêki__iloœæ__trafienie_woda__du¿e_g,
    dŸwiêki__iloœæ__wiatr_g,
    dŸwiêki__iloœæ__wystrza³_g,
    dŸwiêki__iloœæ__wystrza³__du¿e_g,
    dŸwiêki__iloœæ__zatopienie_statek_g, //---//
    dŸwiêki__komunikat__prêdkoœæ__ostatnie_wywo³anie__id_statek_g,
    dŸwiêki__komunikat__skrêt__ostatnie_wywo³anie__id_statek_g,
    dŸwiêki__komunikat__zanurzenie__ostatnie_wywo³anie__id_statek_g,
    dŸwiêki__losowe_uruchomione__milisekundy__modyfikator_losowy_i_g, // Losowa modyfikacja czasu jak czêsto przelicza uruchomienia dŸwiêków z losowym opóŸnieniem w³¹czania.
    gra_wspó³czynnik_trudnoœci_g,
    kamera_indeks_amunicji_g, // Indeks w liœcie amunicji, na którym by³a ustawiona kamera.
    klawiatura_konfiguracja__szukaj__znaleziony_indeks_g, // Indeks elementu (jako numer potomka) konfiguracji klawiatury poprzednio wyszukany w trybie szukaj nastêpny, szukaj poprzedni.
    l¹d_nazwa_numer_g, // Numer ostatnio utworzonego obiektu l¹du.
    page_control_1_szerokoœæ_kopia_g,
    page_control_1_szerokoœæ_pocz¹tkowa_g,
    pokój_rozmów__ostatnia_wiadomoœci__indeks_ostatni_g, // Indeks poprzednio wys³anej wiadomoœci z tabeli kopii wys³anych wiadomoœci.
    pokój_rozmów__si_polecenia__indeks_ostatni_g, // Indeks poprzednio wybranego polecenia dla SI z tabeli poleceñ.
    pokój_rozmów__szerokoœæ_kopia_g,
    pokój_rozmów__zmiana_szerokoœci__szerokoœæ_pocz¹tkowa_g,
    pokój_rozmów__zmiana_szerokoœci__wysokoœæ_pocz¹tkowa_g,
    pokój_rozmów__zmiana_szerokoœci__x_pocz¹tkowy_g,
    pokój_rozmów__zmiana_szerokoœci__y_pocz¹tkowy_g,
    radar_panel__wielkoœæ_procent_okna_g,
    radar__rysowanie__l¹d_czas_milisekundy_g, // Czas potrzebny na narysowanie l¹du na radarze. // Gdy odœwie¿anie l¹du na radarze d³ugo trwa to modyfikuje czêstotliwoœæ odœwie¿ania l¹du na radarze.
    radar__rysowanie__opóŸnienie_cykli__œlad_g, // Co ile cykli odœwie¿ania radaru rysuje œlad.
    radar__skala_spinedit__value__poprzednia_wartoœæ_g,
    rekord_statki__wysy³ane_rzadziej__czas_milisekundy_g, // Co jaki czas wysy³a parametry statków wieloosobowych wysy³anych rzadziej.
    si__zak³óca_sekundy_g, // 60. // Jak czêsto SI próbuje zak³ócaæ.
    wiatr__przeliczenie_sekundy_g, // Co jaki czas jest przeliczana si³a wiatru.
    wieloosobowe__komenda__gra__serwer_czas_wyœlij_sekundy, // Co jaki czas serwer wys³ania synchronizacjê czasu do klientów.
    zak³ócenie__prawdopodobieñstwo_sukcesu_procent_g // 30.
      : integer;

    babymetal_statek__widocznoœæ_losowanie__ostatnie__czas_sekundy_g, // Kiedy odby³o siê ostatnie losowanie widocznoœci BabyMetal Statku.
    chmury__pozycje__czas_przeliczenia_ostatniego_sekundy_i_g, // Czas ostatniego przeliczenia pozycji chmur.
    dŸwiêki__komunikat__wyg³aszany__czas_trwania_milisekundy_g, // Czas po jakim nale¿y zakoñczyæ aktualnie wyg³aszany komunikat dŸwiêkowy (brak gdy zero). Parametr '(Behaviours.)Playing' jest chyba aktualizowany z opóŸnieniem i komunikaty zbyt wolno prze³¹czaj¹ siê na nastêpne.
    dŸwiêki__komunikat__wyg³aszany__pauza__czas_trwania_milisekundy_g, // Czas trwania pauzy - je¿eli podczas wyg³aszania komunikatu zosta³a w³¹czona pauza, przed³u¿a czas trwania dla wyg³aszanego komunikatu (dŸwiêki nie podlegaj¹ zmianie prêdkoœci gry).
    dŸwiêki__losowe_uruchomione__czas_przeliczenia_ostatniego_milisekundy_i_g, // Czas ostatniego przeliczenia uruchomiania dŸwiêków z losowym opóŸnieniem w³¹czania.
    oczekiwanie_na__naprawienie_elementu__czas_sekundy_g, // 30.
    oczekiwanie_na__odnowienie_statku__czas_sekundy_g, // 60.
    punkt_naprowadzaj__na_lotniskowiec__okreœlenie_ostatnie_sekundy_i_g, // Czas ostatniego aktualizowania wspó³rzêdnych lotniskowca, na którym ma wyl¹dowaæ samolot.
    radar__przyciski_panel__ukrywanie__odliczanie_pocz¹tek_czas_sekundy_i_g, // Czas rozpoczêcia odliczania do ukrycia panelu przycisków radaru.
    si__lot_trwanie_do_l¹dowania__czas_sekundy_g, // 300 (5 minut). // Po jakim czasie lotu si zacznie decydowaæ o l¹dowaniu.
    si__p³ywanie_do_punktu__odnawianie_zasobów__trwanie__czas_sekundy_g, // 30. // Po jakim czasie si ma wyjœæ z trybu odnawiania zasobów (sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów).
    si__uszkodzenia_wykryto__trwanie__czas_sekundy_g, // 60 (1 minuta). // Po jakim czasie od wykrycia uszkodzenia si zignoruje uszkodzenie (aktywacja trybu walki).
    si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_g, // 30. // Co jaki czas si mo¿e prze³¹czaæ siê miêdzy trybami walki.
    œwiat³a_miganie__czas_przeliczenia_ostatniego_milisekundy_i_g, // Czas ostatniego przeliczenia migania œwiate³.
    wiatr__czas_przeliczenia_ostatniego_sekundy_i_g, // Czas ostatniego przeliczenia si³y wiatru.
    zak³ócanie__czas_do_ponownej_próby_sekundy_g // 15. // Co ile czasu mo¿na ponownie próbowaæ zak³óciæ statek.
      : Int64;

    babymetal_statek__lot_wysokoœæ_g, // Na jakiej wysokoœci lata BabyMetal Statek.
    babymetal_statek__odleg³oœæ_maksymalna_g, // Po oddaleniu siê na tak¹ odleg³oœæ od statku gracza BabyMetal Statek wraca w kierunku statku gracza.
    babymetal_statek__prêdkoœæ_maksymalna_g,
    babymetal_statek__prêdkoœæ_mmno¿nik_aktualny_g, // Modyfikuje aktualn¹ prêdkoœæ lotu statku BabyMetal.
    babymetal_statek__rotacja_w³asna_prêdkoœæ_g,
    babymetal_statek__skala_g,
    babymetal_statek__skrêt_prêdkoœæ_g,
    chmury__wysokoœæ_g, // Wysokoœæ na jakiej s¹ chmury (wspó³rzêdna Y kontenera na chmury Chmury_GLDummyCube)).
    dŸwiêk_emiter__zasiêg_minimalny_g, // TGLBSoundEmitter.Source.MinDistance.
    fale__fala_wysokoœæ_g,
    fale__obszar_ograniczenie_g,
    fale__woda_poziom_g,
    fale__wysokoœæ_bazowa_g,
    fale__wysokoœæ_bazowa__serwer_g,
    kamera_ustawienie_kopia__ogniskowa_g,
    kamera_radar__y_domyœlne_g,
    wiatr__wp³yw_na__amunicjê__przesuwanie_g,
    wiatr__wp³yw_na__amunicjê__unoszenie_g,
    wiatr__wp³yw_na__statek__obrót_g,
    wiatr__wp³yw_na__statek__przesuwanie_g,
    wiatr__wp³yw_na__statek__unoszenie_g
      : single;

    babymetal_statek__prawdopodobieñstwo_pojawienia_siê_g, // Prawdopodobieñstwo, ¿e BabyMetal Statek siê pojawi. Zakres od 0 do 100. Prawdopodobieñstwo znikniêcia jest odwrotnoœci¹ prawdopodobieñstwa pojawienia siê np. je¿eli prawdopodobieñstwo pojawienia siê wynosi 80% to prawdopodobieñstwo znikniêcia wynosi 20%.
    dzieñ_jasnoœæ_g, // Wyra¿ony od 0 (noc, ciemno) do 1 (dzieñ, jasno) jako 100% = 1, 50% = 0,5 0% = 0. Miêdzy œwitem a zmierzchem (3750 - 6250,  9:00 - 15:00) ma wartoœæ 1 a poza maleje do 0 o pó³nocy
    kamera_szybkoœæ_ruchu_g,
    mg³a_intensywnoœæ_g, // Wyra¿ona jako procent od 0 (brak mg³y) do 100 (gêsta mg³a). Wartoœæ wprowadzona w polu odpowiada: 0 - 0%, 1 - 10%, 10 - 34%, 31 - 50%, 1000 - 100%.
    mysz_czu³oœæ_g, // Czu³oœæ myszy (szybkoœæ ruchu mysz¹).
    mysz_czu³oœæ_luneta_g // Czu³oœæ myszy przy maksymalnym przybli¿eniu lunety.
      : real;

    dŸwiêki__komunikat__wyg³aszany_g, // Aktualnie wyg³aszany komunikat dŸwiêkowy (brak gdy puste).
    l¹d_definicja_g, // Definicja l¹du w aktualnej grze (mapa gry).
    mapa__klient_wartoœæ_g, // Nazwa mapy otrzymana przez klientów z serwera.
    statki_pozycje_pocz¹tkowe__klient_wartoœæ_g // Nazwa konfiguracji pozycji pocz¹tkowych statków otrzymana przez klientów z serwera.
      : string;

    //moment_wciœniêcia_klawisza,
    dŸwiêk_silnika_zmiana__ostatnie_wywo³anie_data_czas_g,
    dŸwiêki_efekt__czas_trwania_sprawdŸ__ostatnie_wywo³anie_data_czas_g,
    dŸwiêki__komunikat__alarm_torpedowy__ostatnie_wywo³anie_data_czas_g,
    dŸwiêki__komunikat__o_zmianie_utwórz__ostatnie_wywo³anie_data_czas_g,
    dŸwiêki__komunikat__odtwarzanie_nastêpny_sprawdŸ__ostatnie_wywo³anie_data_czas_g,
    dŸwiêki__komunikat__prêdkoœæ__ostatnie_wywo³anie__data_czas_g,
    dŸwiêki__komunikat__skrêt__ostatnie_wywo³anie__data_czas_g,
    dŸwiêki__komunikat__wyg³aszany__rozpoczêcie_data_czas_g,
    dŸwiêki__komunikat__zanurzenie__ostatnie_wywo³anie__data_czas_g,
    pauza__rozpoczêcie_data_czas_g,
    pokój_rozmów__ostatnia_wiadomoœæ_wys³ana_data_czas_g,
    radar__rysowanie__l¹d__ostatnie_wywo³anie_data_czas_g,
    rekord_statki__wysy³ane_rzadziej__ostatnie_wys³anie_data_czas_g,
    udp_data_czas_sprawdzanie_po³¹czeñ_ostatnie_g, // Kiedy ostatnio: serwer - usuwa³ nieaktywne po³¹czenia z listy; klient - przypomina³, ¿e jest po³¹czony z serwerem.
    wieloosobowe__komenda__gra__serwer_czas_wyœli_ostatnie_g // Czas ostatniego wys³ania przez serwer synchronizacji czasu do klientów.
      : TDateTime;

    page_control_1_active_page_kopia_tab_sheet_g : TTabSheet;
    window_state_kopia_g : TWindowState;

    amunicja_wystrzelona_list,
    wieloosobowe_amunicja_wystrzelona_list,

    dŸwiêki_efekt_list,
    informacje_dodatkowe_list,
    l¹d_list,
    œlad_torowy_list,
    trafienia_efekt_list
      : TList;

    dŸwiêki_komunikaty_string_list,
    pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list
      : TStringList;

    gracz_tryb_g : TGracz_Tryb;
    dŸwiêki__komunikat__wyg³aszany__rodzaj_g : TDŸwiêk_Komunikat_Rodzaj; // Rodzaj aktualnie wyg³aszanego komunikatu dŸwiêkowego (brak gdy puste).

    amunicja_prêdkoœæ_zakresy_r_g : TAmunicja_Prêdkoœæ_Zakresy_r;
    kotwica_zakresy_r_g : TKotwica_Zakresy_r;

    statek_create_funkcje_g : TStatek_Create_Funkcje;

    wieloosobowe_amunicja_efekt_g : TAmunicja; // Aby utworzyæ u klientów efekt na podstawie danych z amunicji i aby ci¹gle w funkcji nie tworzyæ i nie zwalniaæ instancji amunicji.

    informacje_dodatkowe_zegar_pozorny_r,
    napis_odœwie¿_zegar_pozorny_r,
    radar_zegar_pozorny_r
      : TZegar_Pozorny_r;

    samolot__statek_gracza,
    statek_gracza,
    projektowy_tryb__statek
      : TStatek;

    l¹dy_lista_t,
    prymitywy_lista_t, // U klientów jest zerowane gdy klient ³¹czy siê z serwerem. //// U klientów jest zerowane przy komendzie gra start.
    si_schematy_lista_t,
    statki_lista_t,
    statki_pozycje_pocz¹tkowe_lista_t
      : TSchematy_Lista_r_t;

    tcp_klienci_lista_g : TTCP_Klienci_Lista;
    udp_klienci_lista_g : TUDP_Klienci_Lista;

    kamera_ustawienie_kopia__kierunek_g,
    kamera_ustawienie_kopia__góra_g,
    kamera_ustawienie_kopia__pozycja_g,
    wiatr_vector_g // Kierunek wiatru (X, Y, Z) i si³a (W). W któr¹ stronê wieje wiatr.
      : GLS.VectorTypes.TVector4f;

    wspó³rzêdne_œwiata_z_radaru_affine_vector_g : GLS.VectorGeometry.TAffineVector;

    kamera_tryb_g,
    kamera_dla_prze³¹czania_statku_kopia__kamera_tryb_g,
    kamera_ustawienie_kopia__kamera_tryb_g
      : TKamera_Tryb;

    t³umaczenie_komunikaty_r : TT³umaczenie_Komunikaty_r;

    wieloosobowe__statek_cel_wspó³rzêdne_r : TObiekty_Wieloosobowe__Statek_Cel_Wspó³rzêdne_r;
    wieloosobowe__statek_klawisze_obs³uga_r : TObiekty_Wieloosobowe__Statek_Klawisze_Obs³uga_r;

    dŸwiêki_komunikaty_czasy_trwania_r_t : array of TDŸwiêki_Komunikaty_Czasy_Trwania_r;

    pokój_rozmów__si_polecenia_t : array of string;

    gra_statystyki_r_t : array of TGra_Statystyki_r;

    wieloosobowe__amunicja_t : array of TObiekty_Wieloosobowe__Amunicja_r;
    wieloosobowe__efekt_t : array of TObiekty_Wieloosobowe__Efekt_r;
    wieloosobowe__statki_t : array of TObiekty_Wieloosobowe__Statek_r;
    wieloosobowe__statki__wysy³ane_rzadziej_t : array of TObiekty_Wieloosobowe__Statek__Wysy³ane_Rzadziej_r;

    gra_pozycja_pocz¹tkowa_parametry_t,
    l¹d_pozycja_pocz¹tkowa_parametry_t,
    statki_pozycja_pocz¹tkowa_parametry_t
      : array [ 1..2 ] of TPozycja_Pocz¹tkowa_Parametry_r;

    statki_t : array of TStatek;

    komunikacja_rekord_testowy_r : TKomunikacja_Rekord_Testowy_r;
    komunikacja_rekord_testowy_2_r : TKomunikacja_Rekord_Testowy_2_r;

    {$region 'Klawisze.'}
    klawisz__amunicja__zanurzenie_g³êbokoœæ_zadana__minus,
    klawisz__amunicja__zanurzenie_g³êbokoœæ_zadana__plus,
    klawisz__celowanie_bronie_osobno,
    klawisz__celowanie_tryb,
    klawisz__celownicze_linie_unoœ,
    klawisz__celownik_bombowiec_widocznoœæ,
    klawisz__celownik_widocznoœæ,
    klawisz__celownik_widocznoœæ_mouse_look_active,
    klawisz__dalmierz,
    klawisz__dalmierz_tryb,
    klawisz__dŸwiêk__g³oœnoœæ__minus,
    klawisz__dŸwiêk__g³oœnoœæ__plus,
    klawisz__gra_wspó³czynnik_prêdkoœci__minus,
    klawisz__gra_wspó³czynnik_prêdkoœci__normalna,
    klawisz__gra_wspó³czynnik_prêdkoœci__plus,
    klawisz__gra_wspó³czynnik_prêdkoœci__x_10,
    klawisz__kamera__do_ty³u,
    klawisz__kamera__do_przodu,
    klawisz__kamera__w_lewo,
    klawisz__kamera__w_prawo,
    klawisz__kamera__w_górê,
    klawisz__kamera__w_dó³,
    klawisz__kamera__w_lewo_obrót,
    klawisz__kamera__w_prawo_obrót,
    klawisz__kamera__w_górê_obrót,
    klawisz__kamera__w_dó³_obrót,
    klawisz__kamera__Amunicja,
    klawisz__kamera__Artyleria,
    klawisz__kamera__Statek,
    klawisz__kamera__Statek__Fale,
    klawisz__kamera__Statek__Projektowy_Tryb,
    klawisz__kamera__Swobodna,
    klawisz__kamera__Za_Statkiem,
    klawisz__kamera__Za_Statkiem__Fale,
    klawisz__kotwica__w__dó³,
    klawisz__kotwica__w__górê,
    klawisz__kotwica__stop,
    klawisz__l¹dowanie_u³atwione,
    klawisz__l¹d_odœwie¿_wskazany,
    klawisz__lotniskowiec_samolot_l¹dowanie_informacje,
    klawisz__mouse_look_active,
    klawisz__obracaj_dzia³a,
    klawisz__obracaj_dzia³a__na_k¹t_wyznaczony,
    klawisz__obrót_k¹t_zablokowany_strza³_wskaŸnik,
    klawisz__obrót_k¹t_zablokowany_wskaŸnik,
    klawisz__opcje,
    klawisz__pauza,
    klawisz__pe³ny_ekran,
    klawisz__podnoœ_lufy,
    klawisz__podnoœ_lufy__na_k¹t_wyznaczony,
    klawisz__pokój_rozmów__na_ekranie,
    klawisz__pokój_rozmów__informacja_dodatkowa,
    klawisz__prêdkoœæ_zadana_procent_zmieñ__100_plus,
    klawisz__prêdkoœæ_zadana_procent_zmieñ__25_plus,
    klawisz__prêdkoœæ_zadana_procent_zmieñ__5_plus,
    klawisz__prêdkoœæ_zadana_procent_zmieñ__1_plus,
    klawisz__prêdkoœæ_zadana_procent_zmieñ__zero,
    klawisz__prêdkoœæ_zadana_procent_zmieñ__1_minus,
    klawisz__prêdkoœæ_zadana_procent_zmieñ__5_minus,
    klawisz__prêdkoœæ_zadana_procent_zmieñ__25_minus,
    klawisz__prêdkoœæ_zadana_procent_zmieñ__100_minus,
    klawisz__projektowy_tryb__w³¹cz_wy³¹cz,
    klawisz__projektowy_tryb__statek__obrót_lewo,
    klawisz__projektowy_tryb__statek__obrót_prawo,
    klawisz__projektowy_tryb__statek__opuszczenie,
    klawisz__projektowy_tryb__statek__podniesienie,
    klawisz__projektowy_tryb__statek__przechylenie_w_lewo,
    klawisz__projektowy_tryb__statek__przechylenie_w_prawo,
    klawisz__projektowy_tryb__statek__przesuniêcie_w_lewo,
    klawisz__projektowy_tryb__statek__przesuniêcie_w_prawo,
    klawisz__projektowy_tryb__statek__przesuniêcie_w_przód,
    klawisz__projektowy_tryb__statek__przesuniêcie_w_ty³,
    klawisz__projektowy_tryb__statek__uniesienie_przodu,
    klawisz__projektowy_tryb__statek__uniesienie_ty³u,
    klawisz__projektowy_tryb__statek__prêdkoœæ_zadana_0_100,
    klawisz__projektowy_tryb__statek__prêdkoœæ_zadana_0_m_100, // Minus 100.
    klawisz__projektowy_tryb__statek__zanurzenie_zadane_peryskopowe,
    klawisz__projektowy_tryb__statek__zanurzenie_zadane_procent_0_100,
    klawisz__projektowy_tryb__statek___resetuj_obrót,
    klawisz__punkt_naprowadzaj,
    klawisz__punkt_naprowadzaj__na_lotniskowiec,
    klawisz__punkt_naprowadzaj__odleg³oœæ_do_punktu_prezentuj,
    klawisz__punkt_naprowadzaj__punkt,
    klawisz__punkt_naprowadzaj__radar,
    klawisz__punkt_naprowadzaj__strza³ka,
    klawisz__punkty_¿ycia_wskaŸnik__gracz,
    klawisz__punkty_¿ycia_wskaŸnik__przeciwnik,
    klawisz__punkty_¿ycia_wskaŸnik__sojusznik,
    klawisz__radar__broñ_zasiêg_wyœwietlaj,
    klawisz__radar__czu³oœæ__1_minus,
    klawisz__radar__czu³oœæ__10_minus,
    klawisz__radar__czu³oœæ__1_plus,
    klawisz__radar__czu³oœæ__10_plus,
    klawisz__radar__skala__1_minus,
    klawisz__radar__skala__10_minus,
    klawisz__radar__skala__1_plus,
    klawisz__radar__skala__10_plus,
    klawisz__radar__widocznoœæ,
    klawisz__samolot_katapult¹_startuj,
    klawisz__samolot_statek_prze³¹cz,
    klawisz__samolot_statek_prze³¹cz_bez_kamery,
    klawisz__si__p³ywa__samolot_gracza,
    klawisz__si__p³ywa__statek_gracza,
    klawisz__si__samolot_gracza__l¹duj_na_lotniskowcu_gracza,
    klawisz__si__statek_gracza__strzela__nie,
    klawisz__si__statek_gracza__strzela__tak,
    klawisz__si__statek_gracza__strzela__wszystkim,
    klawisz__skrêt_zadany_procent_zmieñ__100_lewo,
    klawisz__skrêt_zadany_procent_zmieñ__25_lewo,
    klawisz__skrêt_zadany_procent_zmieñ__5_lewo,
    klawisz__skrêt_zadany_procent_zmieñ__1_lewo,
    klawisz__skrêt_zadany_procent_zmieñ__zero,
    klawisz__skrêt_zadany_procent_zmieñ__1_prawo,
    klawisz__skrêt_zadany_procent_zmieñ__5_prawo,
    klawisz__skrêt_zadany_procent_zmieñ__25_prawo,
    klawisz__skrêt_zadany_procent_zmieñ__100_prawo,
    klawisz__sos_nadaj,
    klawisz__statek__utwórz,
    klawisz__strza³_1,
    klawisz__strza³_2,
    klawisz__strza³__wszystkie_lufy_1,
    klawisz__strza³__wszystkie_lufy_2,
    klawisz__strza³__wszystkie_wybrane_1,
    klawisz__strza³__wszystkie_wybrane_2,
    klawisz__strza³__broñ_indeks_zmieniaj,
    klawisz__strza³__broñ_indeks_poprzedni,
    klawisz__strza³__broñ_indeks_nastêpny,
    klawisz__strzelaj_z__artyleria,
    klawisz__strzelaj_z__bomba_g³êbinowa,
    klawisz__strzelaj_z__je¿e_g³êbinowe,
    klawisz__strzelaj_z__pocisk,
    klawisz__strzelaj_z__torpeda,
    klawisz__strzelaj_z__wszystkie,
    klawisz__syrena_okrêtowa,
    klawisz__œwiat³a,
    klawisz__œwiat³a_dodatkowe,
    klawisz__zamknij_program,
    klawisz__zanurzenie_zadane_peryskopowe,
    klawisz__zanurzenie_zadane_procent_zmieñ__100_plus,
    klawisz__zanurzenie_zadane_procent_zmieñ__25_plus,
    klawisz__zanurzenie_zadane_procent_zmieñ__5_plus,
    klawisz__zanurzenie_zadane_procent_zmieñ__1_plus,
    klawisz__zanurzenie_zadane_procent_zmieñ__zero,
    klawisz__zanurzenie_zadane_procent_zmieñ__1_minus,
    klawisz__zanurzenie_zadane_procent_zmieñ__5_minus,
    klawisz__zanurzenie_zadane_procent_zmieñ__25_minus,
    klawisz__zanurzenie_zadane_procent_zmieñ__100_minus,
    klawisz__zanurzenie_zadane_przekraczaj_100_procent
      : TKlawiatura_Konfiguracja_r;
    {$endregion 'Klawisze.'}

    klawiatura_konfiguracja_r_t : array of ^TKlawiatura_Konfiguracja_r;

    procedure Amunicja_Ruch( delta_czasu_f : double );
    procedure Amunicja_Wystrzelona_Utwórz_Jeden( AOwner : TGLBaseSceneObject; ALufa : TLufa; const obracaj_dzia³a_f : boolean; const cel_wspó³rzêdne_f : GLS.VectorGeometry.TAffineVector );
    procedure Amunicja_Wystrzelona_Zwolnij_Jeden( amunicja_f : TAmunicja );
    procedure Amunicja_Wystrzelona_Zwolnij_Wszystkie();
    procedure Amunicja_Wystrzelona_Efekt_Utwórz( amunicja_f : TAmunicja; const czy_torpeda_efekt_na_wodzie_f : boolean; const dzieñ_jasnoœæ_f : real; const czy_wieloosobowa_f : boolean = false );

    procedure BabyMetal_Statek__Ruch( delta_czasu_f : double );

    procedure Celownicza_Kula_Zmieñ_Pozycjê();
    procedure Chmury__Utwórz();
    procedure Chmury__Pozycje_Wylicz( const przelicz_wszystkie_f : boolean = false );
    procedure Chmury__Ruch( const delta_czasu_f : double );
    procedure Chmury__Zwolnij();

    procedure DŸwiêk__Losowe_Uruchamianie();
    procedure DŸwiêk__Plik_Dodaj_Do_Biblioteki( const plik_nazwa_f : string; dŸwiêk_nazwa_f : string = '' );
    procedure DŸwiêki__Efekt__Utwórz_Jeden( const dŸwiêk_efekt_rodzaj_f : TDŸwiêk_Efekt_Rodzaj; const pozycja_f : GLS.VectorTypes.TVector4f ); overload; //30.Mar.2023.
    procedure DŸwiêki__Efekt__Utwórz_Jeden( const dŸwiêk_efekt_rodzaj_f : TDŸwiêk_Efekt_Rodzaj; const pozycja_f : GLS.VectorGeometry.TAffineVector ); overload;
    procedure DŸwiêki__Efekt__Utwórz_Jeden( const dŸwiêk_efekt_rodzaj_f : TDŸwiêk_Efekt_Rodzaj; const x_f, y_f, z_f : real ); overload;
    procedure DŸwiêki__Efekt__Utwórz_Jeden( AOwner : TGLBaseSceneObject; const dŸwiêk_efekt_rodzaj_f : TDŸwiêk_Efekt_Rodzaj; const x_f, y_f, z_f : real ); overload;
    procedure DŸwiêki__Efekt__Utwórz_Jeden( AOwner : TGLBaseSceneObject; const efekt_rodzaj_f : TEfekt_Rodzaj; const x_f, y_f, z_f : real; amunicja_f : TAmunicja ); overload;
    procedure DŸwiêki__Efekt__Utwórz_Jeden( AOwner : TGLBaseSceneObject; const dŸwiêk_efekt_rodzaj_f : TDŸwiêk_Efekt_Rodzaj; const efekt_rodzaj_f : TEfekt_Rodzaj; const x_f, y_f, z_f : real; amunicja_f : TAmunicja ); overload;
    procedure DŸwiêki__Efekt__Zwolnij_Jeden( dŸwiêki_efekt_f : TGLDummyCube );
    procedure DŸwiêki__Efekt__Zwolnij_Wszystkie();
    procedure DŸwiêki__Efekt__Czas_Trwania_SprawdŸ();
    procedure DŸwiêki__Komunikat__Utwórz_Jeden( const dŸwiêk_komunikat_rodzaj_f : TDŸwiêk_Komunikat_Rodzaj; const komunikat_wartoœæ_f : real; const komunikat_wartoœæ__dodatkowa_f : real = 0 ); overload;
    procedure DŸwiêki__Komunikat__Utwórz_Jeden( const dŸwiêk_komunikat_rodzaj_f : TDŸwiêk_Komunikat_Rodzaj; const amunicja_rodzaj_f : Typy_Wspolne.TAmunicja_Rodzaj; const komunikat_wartoœæ_f : real; const komunikat_wartoœæ__dodatkowa_f : real = 0 ); overload;
    procedure DŸwiêki__Komunikat__Zwolnij_Wszystkie();
    procedure DŸwiêki__Komunikat__Odtwarzanie_Nastêpny_SprawdŸ();
    procedure DŸwiêki__Komunikat__O_Zmianie_Utwórz();
    procedure DŸwiêki__Komunikaty__Wczytaj();
    procedure DŸwiêki__Komunikaty__Lista_Wczytaj( const komunikaty_wczytaj_f : boolean = true );
    procedure DŸwiêki__L¹dów__Zwolnij_Wszystkie( const czy_dŸwiêk_dla_l¹du_f, czy_dŸwiêk_dla_statku_f : boolean );

    procedure Elementy_Gry_Przygotuj();
    procedure Elementy_Gry_Zwolnij( const czy_start_gry : boolean = true );

    function Efekt__Element_Uszkodzenie_Menad¿er__Zwróæ() : TGLThorFXManager;

    function Fala__Wysokoœæ_Na_Zboczu( const absolute_position_f : GLS.VectorTypes.TVector4f ) : single;

    function Gracz_Identyfikator() : integer;
    procedure Gracze_Lista_Odœwie¿();
    procedure Gracze_Lista_Roz³¹cz( const peer_port_f : integer );
    procedure Gra_Statystyki_Zeruj( var gra_statystyki_r_f : TGra_Statystyki_r );
    function Gra_Statystyki_R_Identyfikator_ZnajdŸ( const identyfikator_f : integer ) : integer;
    procedure Gra_Statystyki_Wypisz( const czy_w_logu_f : boolean );
    function Grawitacja_Opadanie_Obra¿enia_Wylicz( const punkty_¿ycia_maksymalne_f, grawitacja_opadanie_szybkoœæ_aktualna_f : real ) : real;

    procedure Informacja_Dodatkowa_Dodaj( const napis_f : string; const wyœwietlanie_czas_sekundy_f : smallint = 0 );
    procedure Informacja_Dodatkowa_Zwolnij_Jeden( lista_f : TList; const indeks_f : integer );
    procedure Interfejs_Aktywnoœæ_Ustaw__Klient( const aktywne_f : boolean );
    procedure Interfejs_Aktywnoœæ_Ustaw__SI( const aktywne_f : boolean );
    procedure Interfejs_Aktywnoœæ_Ustaw__Grupa_Komponentów( const win_control_f :  TWinControl; const aktywne_f : boolean );
    procedure Interfejs_Aktywnoœæ_Ustaw__Schemat_Samolot_Zmieñ( const aktywne_f : boolean );
    procedure Interfejs_Parametry_Wed³ug_Statku_Ustaw();
    function Identyfikator_Z_Listy_Sortowania_Wy³uskaj( napis_f : string ) : integer;

    procedure Kamera_Na_Statek_Gracza_Ustaw();
    procedure Kamera_Odleg³oœæ_Kontroluj_Ustaw( delta_czasu_f : double );
    procedure Kamera_Prze³¹cz( const kamera_tryb_f : TKamera_Tryb );
    procedure Kamera_Woda_Pod_Nad_Widok_Ustaw();
    procedure Klawisz_Konfiguracja_Zwolnij();
    function Klawisz_Wciœniêto_SprawdŸ( const klawiatura_konfiguracja_r_f : TKlawiatura_Konfiguracja_r; const klawisz_f : Word; const mysz_przycisk_f : SmallInt; const shift_f : TShiftState; const czy_z_wieloosobowe__odczytaj_f : boolean = false ) : boolean;
    procedure Klawisze_Obs³uga( const klawisz_f : Word; const mysz_przycisk_f : SmallInt; const shift_f : TShiftState );
    procedure Klawisze_Obs³uga__Statek( const id_statek_f : integer; const klawisz_f : Word; const mysz_przycisk_f : SmallInt; const shift_f : TShiftState; const czy_z_wieloosobowe__odczytaj_f : boolean = false );
    procedure Klawisze_Obs³uga__Zachowanie_Ci¹g³e__Lokalne( delta_czasu_f : double; const shift_f : TShiftState = []; const mysz_przycisk_f : SmallInt = -1 );
    procedure Komunikat_Wyœwietl( const text_f : string ); overload;
    function Komunikat_Wyœwietl( const text_f, caption_f : string; const flags_f : integer ) : integer; overload;

    procedure L¹d__DŸwiêków_Emitery_Utwórz();
    procedure L¹d__Elementy_Iloœæ_Wyszukaj();
    function L¹d__Punkty_¯ycia_Zmieñ( gl_custom_scene_object_f : TGLCustomSceneObject; wartoœæ_f : real; const czy_do_zera_f : boolean = false ) : string;
    procedure L¹d__Utwórz( const lista_indeks_f : integer; const prymityw_indeks_f : integer = -99; const prymityw_rodzic_gl_dummy_cube_f : TGLDummyCube = nil );
    procedure L¹d__Zwolnij( const tylko_dŸwiêk_emiter_f : boolean = false );
    procedure L¹d__Zwolnij_Uszkodzenia();
    procedure Log_Wypisz( const napis_f : string; const prze³¹cz_zak³adkê_f : boolean = true );
    procedure Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero( const statek_lotniskowiec_f, statek_niszcz¹cy_f : TStatek; const rodzaj_f : smallint = -1 );
    procedure Lufy_Prze³adowanie( delta_czasu_f : double );

    procedure Napis_Odœwie¿( const delta_czasu_f : double; const oczekiwanie_pomiñ_f : boolean = false );
    function Odczytaj_Liczbê_Z_Napisu( napis_f : string; const wartoœæ_minimalna_f : variant; const prze³¹cz_zak³adkê_f : boolean = true ) : real;
    function Odczytaj_Liczbê_Z_Napisu_Xml( const i_xml_node_f : Xml.XMLIntf.IXMLNode; const wygl¹d_liczba_definicja_f : TWygl¹d_Liczba_Definicja; const wartoœæ_minimalna_f : variant; const prze³¹cz_zak³adkê_f : boolean = true ) : real;

    procedure Pauza( const czy_pauza_f : boolean );
    procedure Pauza_Podczas_Funkcje();
    procedure Pe³ny_Ekran__Znikaj¹ce_Elementy_Widocznoœæ_Ustaw();
    procedure Pêtla_Wzorzec_Oznacz( gl_custom_scene_object_f : TGLCustomSceneObject );
    procedure Pokój_Rozmów__Wyœlij_Wiadomoœæ( const pokój_rozmów_r_f : TPokój_Rozmów_r; const dopuszczaj_wys³anie_wiadomoœci_do_siebie_f : boolean = false );
    procedure Pokój_Rozmów__Wyœwietl_Wiadomoœæ( const pokój_rozmów_r_f : TPokój_Rozmów_r );
    procedure Pozycja_Pocz¹tkowa_Parametry_Domyœlne_Ustaw( var pozycja_pocz¹tkowa_parametry_r_f : TPozycja_Pocz¹tkowa_Parametry_r; const czy_minus : boolean );
    procedure Punkt_Naprowadzaj();
    procedure Punkt_Naprowadzaj__Kolor_Zmieñ();
    procedure Punkt_Naprowadzaj__Na_Lotniskowiec();
    function Punkty_¯ycia_WskaŸnik__Material_Options_Ustal() : GLS.Material.TGLMaterialOptions;

    function Radar__Koryguj_Wielkoœæ_Obiektów() : real;
    procedure Radar__L¹d_Rysuj();
    procedure Radar__Odœwie¿();
    procedure Radar_Panel_Ukrywanie();
    procedure Radar__Statki__L¹dy_Znane();
    procedure Radar__Statki_Rysuj();
    procedure Radar__Wyczyœæ( const radar_czyszczenie_zakres_f : TRadar_Czyszczenie_Zakres = rcz_Statki );
    procedure xNx__Radio_Statki_W_Zasiêgu();

    function Sekundy_W__Minuty_Sekundy( sekundy_f : integer ) : string;
    procedure SI_Decyduj(); //16.Gru.2021.
    function SI__Polecenie__Zak³ócenia_Interpretuj( const pokój_rozmów_r_f : TPokój_Rozmów_r ) : boolean;
    procedure SI__Samolot_Gracza__L¹duj_Na_Lotniskowcu_Gracza( const id_gracz_f : integer; const peer_port__nadawca_f : integer = -1 );
    procedure SI__Statek_Gracza__Sterowanie_Ustaw( const statek_f : TStatek; const si__statek_gracza__p³ywa_poprzednia_wartoœæ_f : boolean; const si__statek_gracza__strzela_poprzednia_wartoœæ_f : TSi__Statek_Gracza__Strzela );
    procedure SI__Syrena_Okrêtowa__Uruchom( const statek_f : TStatek );
    procedure SOS__Inicjuj( const statek_f : TStatek );
    procedure SOS__Przygotuj( const id_statek_f : integer );
    function Statek_Gracza__Gracz_Tryb_Zwróæ() : TStatek;
    procedure Statek_Klient_Cel_Ustaw( const id_statek_f : integer; const cel_wspó³rzêdne_f : GLS.VectorGeometry.TAffineVector );
    procedure Statek_Przywróæ_Do_Gry( const id_statek_f : integer ); overload;
    procedure Statek_Przywróæ_Do_Gry( const statek_f : TStatek ); overload;
    function Statek_Odczytaj_Schemat( const lista_indeks_f : integer ) : string;
    function Statek__Samolot_Odczytaj_Schemat_Indeks( const samolot_nazwa_wyœwietlana_f : string ) : integer;
    function Statek__Samolot_Odczytaj_Schemat( const samolot_nazwa_wyœwietlana_f : string ) : string;
    function Statek_ZnajdŸ( pointer_f : Pointer ) : Pointer;
    procedure Statek_Zwolnij( const indeks_statku_f : integer; const zwalniaj_samoloty_na_lotniskowcach_f : boolean = true );
    function Statki_Kolizja_Oznaczenie_SprawdŸ( string_list_f : TStringList; const identyfikator_elementu_f : Int64; const identyfikator_elementu__dodatkowy_f : integer = -1 ) : boolean;
    procedure Statki__Punkty_¯ycia_WskaŸnik__Efekty_Tryb_Ustaw();
    procedure Statki__Rozstaw( const statek_f : TStatek );
    procedure Statki_Ruch( delta_czasu_f : double );
    procedure Statki_Tabela_Pozycje_Nil_Usuñ();
    procedure Statki_Zwolnij( const zwolnij_statek_gracza_f : boolean = true; zwolnij_statki_nie_gracza_f : boolean = true );
    procedure Syrena_Okrêtowa__Inicjuj( const statek_f : TStatek );

    procedure Œlad_Torowy__Animuj( delta_czasu_f : double );
    procedure Œlad_Torowy__Utwórz_Jeden( statek_f : TStatek );
    procedure Œlad_Torowy__Zwolnij_Jeden( œlad_torowy_f : TŒlad_Torowy );
    procedure Œlad_Torowy__Zwolnij_Wszystkie();
    procedure Œwiat³a_Miganie();
    procedure Œwiat³a_Miganie__OpóŸnienia_Losowe_Resetuj__L¹d();
    procedure Œwiat³a_Miganie__Wartoœci_Ustaw( const gl_custom_scene_object_f : TGLCustomSceneObject; czas_odstêpy_f : string );

    procedure T³umaczenie__Domyœlne(); //12.Sty.2023.
    procedure T³umaczenie__Lista_Wczytaj();
    procedure T³umaczenie__Pozosta³e_Elementy_Odœwie¿();
    procedure T³umaczenie__Wczytaj();
    procedure T³umaczenie__Zastosuj();
    procedure Trafienia_Efekt__Czas_Trwania_SprawdŸ( const delta_czasu_f : double );
    procedure Trafienia_Efekt__Utwórz_Jeden( AOwner : TGLBaseSceneObject; const efekt_rodzaj_f : TEfekt_Rodzaj; const x_f, y_f, z_f : real; amunicja_f : TAmunicja; czas_trwania_f, czas_trwania_efekt_dodatkowy_f : Int64 );
    procedure Trafienia_Efekt__Zwolnij_Jeden( trafienia_efekt_f : TTrafienia_Efekt );
    procedure Trafienia_Efekt__Zwolnij_Wszystkie();
    procedure Trafienie_Nazwa_Wyœwietl( statek__trafiony_f, statek__strzelaj¹cy_f : TStatek; const obra¿enia_f : real; const czy_zadano_obra¿enia_f : boolean; const czy_amunicja_zneutralizowana_f : boolean = false );
    function Torpeda_Wykrycie_Zasiêg( statek_f : TStatek ) : single;

    procedure Ustawienia_Plik( const l¹d_twórz_f : boolean; const zapisuj_ustawienia_f : boolean = false );
    procedure Ustawienia_T³umaczenia( const zapisuj_ustawienia_f : boolean = false );

    function Vector__Do__Wieloosobowe__Wektor_4( const vector_f : GLS.VectorTypes.TVector4f ) : TWieloosobowe__Wektor_4;

    function WaterPhase( const px_f, py_f : single ) : single;
    procedure Wczytaj_Schemat_Xml( const katalog_nazwa_f : string; const lista_indeks_f : integer; var schematy_lista_r_t_f : TSchematy_Lista_r_t );
    function xNx__Wiatr__Wartoœæ_Do_Napisu() : string;
    procedure Wiatr__Wylicz( const do_klientów_wysy³aj_f : boolean = true );

    procedure Wieloosobowe_Amunicja_Parametry_Odczytaj();
    procedure Wieloosobowe_Amunicja_Parametry_Ustaw();
    procedure Wieloosobowe_Amunicja_Wystrzelona_Zwolnij_Jeden( lista_f : TList; const indeks_f : integer );
    procedure Wieloosobowe_Klawisze_Obs³uga_Parametry_Odczytaj( Sender : TObject = nil );
    procedure Wieloosobowe_Klawisze_Obs³uga_Parametry_Ustaw( const wieloosobowe__statek_klawisze_obs³uga_r_f : TObiekty_Wieloosobowe__Statek_Klawisze_Obs³uga_r );
    procedure Wieloosobowe_Statki__Parametry_Odczytaj();
    procedure Wieloosobowe_Statki__Parametry_Ustaw();
    procedure Wieloosobowe_Statki__Rekord_Czyœæ();
    procedure Wieloosobowe_Statki__Wysy³ane_Rzadziej__Parametry_Odczytaj();
    procedure Wieloosobowe_Statki__Wysy³ane_Rzadziej__Parametry_Ustaw();
    procedure Wieloosobowe_Statki__Wysy³ane_Rzadziej__Rekord_Czyœæ();
    procedure Wieloosobowe__DŸwiêk_Efekt_Utwórz( obiekty_wieloosobowe__efekt_r_f : TObiekty_Wieloosobowe__Efekt_r );
    procedure Wieloosobowe__Efekt_Odczytaj_Jeden( AOwner : TGLBaseSceneObject; efekt_rodzaj_f : TEfekt_Rodzaj; x_f, y_f, z_f : real; amunicja_f : TAmunicja; czas_trwania_f, czas_trwania_efekt_dodatkowy_f : Int64 );
    procedure Wieloosobowe__Log_Wypisz( const napis_f : string; const wyró¿nij_f : boolean = false );
    function Wieloosobowe__Odczytaj( const io_handler_f : IdIOHandler.TIdIOHandler; const komenda_udp_f : string; const id_context_f : TIdContext; const id_socket_handle_f : TIdSocketHandle ) : string;
    procedure Wieloosobowe__Strumieñ_Wyœlij( const komenda_f : string; const peer_port_f : integer; const wartoœæ_f : TWieloosobowe_String; const czy_udp_f : boolean = false ); overload;
    procedure Wieloosobowe__Strumieñ_Wyœlij( const komenda_f : string; const peer_port_f : integer; const pokój_rozmów_r_f : TPokój_Rozmów_r; const czy_udp_f : boolean = false ); overload;
    procedure Wieloosobowe__Strumieñ_Wyœlij( const komenda_f : string; const peer_port_f : integer; const wieloosobowe__efekt_r_f : TObiekty_Wieloosobowe__Efekt_r; const czy_udp_f : boolean = false ); overload;
    procedure Wieloosobowe__Strumieñ_Wyœlij( const komenda_f : string; const peer_port_f : integer; const wartoœæ_f : TWieloosobowe_String; const pokój_rozmów_r_f : TPokój_Rozmów_r; const wieloosobowe__efekt_r_f : TObiekty_Wieloosobowe__Efekt_r; const czy_udp_f : boolean = false ); overload;
    procedure Wieloosobowe__Tekst_Wyœlij( const napis_f : string; const peer_port_f : integer = -99 );
    procedure xNx__Wieloosobowe__Tekst_Wyœlij_UDP( const napis_f : string );
    procedure Wieloosobowe__Trafienia_Efekt_Utwórz( obiekty_wieloosobowe__efekt_r_f : TObiekty_Wieloosobowe__Efekt_r );
    procedure xNx__Wieloosobowe__Trafienia_Efekt_Utwórz( obiekty_wieloosobowe__efekt_t_f : array of TObiekty_Wieloosobowe__Efekt_r );

    function Wieloosobowe__Wektor_4__Do__Vector( const wieloosobowe__wektor_4_f : TWieloosobowe__Wektor_4 ) : GLS.VectorTypes.TVector4f;
    procedure Wspó³czynniki_Gry_Informacja_Wyœlij( const peer_port_f : integer = -99 );

    function Wygl¹d_Elementy__DŸwiêk_Wczytaj( wzorzec__gl_custom_scene_object_f : TGLCustomSceneObject; dŸwiêk_nazwa_f : string; const dŸwiêki__zasiêg_minimalny_f : real; const zt_statek_f : TStatek = nil ) : boolean;
    function Wygl¹d_Elementy__Kolor_Losowy_Wylicz( kolor_od_f, kolor_do_f : real ) : GLS.VectorTypes.TVector4f;
    procedure Wygl¹d_Elementy__Kolor_Noc_Zmieñ( const gl_material_f : TGLMaterial; const dzieñ_jasnoœæ_f : real );
    procedure Wygl¹d_Elementy__Kolor_Ustaw( const gl_material_f : TGLMaterial; const vector_f : GLS.VectorTypes.TVector4f );
    procedure Wygl¹d_Elementy__Kolor_Ustaw_Losowy( const gl_material_f : TGLMaterial; kolor_od_f : real = -1; kolor_do_f : real = -1 );
    procedure Wygl¹d_Elementy__Kopiuj_W³aœciwoœci( zt_gl_custom_scene_object_wzorzec_f, zt_gl_custom_scene_object_kopia_f : TGLCustomSceneObject; kolor_od_f : real = -1; kolor_do_f : real = -1 );
    procedure Wygl¹d_Elementy__Noc_Zmieñ( const œwiat³a_miganie_tylko_f : boolean = false );
    function xNx__Wygl¹d_Elementy__Tekstura_Wczytaj( gl_custom_scene_object_f : TGLCustomSceneObject; tekstura_œcie¿ka_f : string ) : boolean;
    function Wygl¹d_Elementy__Tekstura_Wczytaj_2( gl_custom_scene_object_f : TGLCustomSceneObject; tekstura_œcie¿ka_f : string; const materia³_nazwa_f : string = '' ) : boolean;
    function Wygl¹d_Elementy__Utwórz_Element( const statek_f : TStatek; const l¹d_prymityw_f : string; const w³aœciciel_gl_base_scene_object_f : TGLBaseSceneObject; const rodzic_gl_dummy_cube_f : TGLDummyCube = nil ) : TGLCustomSceneObject;

    procedure Komunikacja_Rekord_Testowy_Obs³uga( const tylko_wyœwietl_f : boolean = true );
  public
    { Public declarations }
  end;//---//TStatki_Form

  TStatek_Funkcje = class
  // Aby móc u¿yæ tych funkcji wewn¹trz klasy TStatek.
  // Nie jest mo¿liwe przekazanie bezpoœrednio jako argumentu funkcji (w postaci wskaŸnika na funkcjê) funkcji Czas_Miêdzy_W_Milisekundach().
  public
    { Public declarations }
    class function Czas_Miêdzy_W_Milisekundach_SF( const czas_poprzedni_f : Int64; const zmienna_w_milisekundach_f : boolean = false ) : Int64; // Nie trzeba tworzyæ instancji klasy.
  end;//---//TStatek_Funkcje

const
  broñ_nie_obracana_c = 9999;
  char_rozmiar_c = SizeOf( char );

  dŸwiêk_silnika_zmiana__czas_milisekundy_c : Int64 = 500; // Co jaki czas jest sprawdzana zmiana dŸwiêku prêdkoœci silnika.
  dŸwiêki_efekt__czas_trwania_sprawdŸ__czas_milisekundy_c : Int64 = 3000; // Co jaki czas s¹ usuwane zakoñczone efekty dŸwiêkowe.
  dŸwiêki__komunikat__o_zmianie_utwórz__czas_milisekundy_c : Int64 = 1000; // Co jaki czas odbywa siê sprawdzanie czy statek gracza zmieni³ swoje parametry.
  dŸwiêki__komunikat__odtwarzanie_nastêpny_sprawdŸ__czas_milisekundy_c : Int64 = 100; // Co jaki czas s¹ obs³ugiwane (usuwane zakoñczone) komunikaty dŸwiêkowe.

  dŸwiêki__babymetal_statek_c : string = 'BabyMetal Statek';
  dŸwiêki__komunikat__aktywne__prefiks_c : string = 'Aktywne';
  dŸwiêki__komunikat__cyfra__prefiks_c : string = 'Cyfra_';
  dŸwiêki__komunikat__dó³__prefiks_c : string = 'Dó³';
  dŸwiêki__komunikat__góra__prefiks_c : string = 'Góra';
  dŸwiêki__komunikat__lewo__prefiks_c : string = 'Lewo';
  dŸwiêki__komunikat__minus__prefiks_c : string = 'Minus';
  dŸwiêki__komunikat__nieaktywne__prefiks_c : string = 'Nieaktywne';
  dŸwiêki__komunikat__plus__prefiks_c : string = 'Plus';
  dŸwiêki__komunikat__prawo__prefiks_c : string = 'Prawo';
  dŸwiêki__komunikat__przód__prefiks_c : string = 'Przód';
  dŸwiêki__komunikat__przecinek__prefiks_c : string = 'Przecinek';
  dŸwiêki__komunikat__separator_c : string = ';';
  dŸwiêki__komunikat__ty³__prefiks_c : string = 'Ty³';
  dŸwiêki__komunikaty__czasy_trwania_plik_nazwa_c : string = 'Czasy trwania.txt'; // Plik zawiera informacje o tym po jakim czasie w milisekundach zakoñczyæ odtwarzanie danego komunikatu. Ka¿da linijka to osobny plik z komunikatem (nazwa pliku;czas trwania) np:Cyfra_2.wav;500
  dŸwiêki__l¹dów_prefiks__l¹d_c : string = 'L¹d*?*_'; // Pozwala prze³adowaæ dŸwiêki l¹dów, (mo¿e byæ ³atwiej podczas tworzenia l¹dów).
  dŸwiêki__l¹dów_prefiks__statek_c : string = 'Statek*?*_';
  dŸwiêki__losowe_uruchomione__przeliczenie_milisekundy_c : Int64 = 1000; // Co jaki czas przelicza uruchomienia dŸwiêków z losowym opóŸnieniem w³¹czania.
  dŸwiêki__morze_falowanie_c : string = 'Morze falowanie';
  dŸwiêki__rozszerzenie_c : string = '.wav'; // Najlepiej dzia³a mi obs³uga takich plików.
  dŸwiêki__typ_prefiks__ar_c : string = 'ar_'; // Typy_Wspolne.TAmunicja_Rodzaj
  dŸwiêki__typ_prefiks__dkr_c : string = 'dkr_'; // TDŸwiêk_Komunikat_Rodzaj
  dŸwiêki___amunicja__lot_c : string = 'Amunicja lot_';
  dŸwiêki___amunicja__lot__du¿e_c : string = 'Amunicja lot du¿e_';
  dŸwiêki___amunicja__p³yniêcie_c : string = 'Amunicja p³yniêcie_';
  dŸwiêki___kotwica__statek_c : string = 'Kotwica na statku_';
  dŸwiêki___kotwica__stop_c : string = 'Kotwica stop_';
  dŸwiêki___kotwica__w_dó³_c : string = 'Kotwica w dó³_';
  dŸwiêki___kotwica__w_górê_c : string = 'Kotwica w górê_';
  dŸwiêki___lufa_za³adowanie_c : string = 'Lufa za³adowanie_';
  dŸwiêki___lufa_za³adowanie__du¿e_c : string = 'Lufa za³adowanie du¿e_';
  dŸwiêki___silnik__25_c : string = 'Silnik 25_';
  dŸwiêki___silnik__50_c : string = 'Silnik 50_';
  dŸwiêki___silnik__75_c : string = 'Silnik 75_';
  dŸwiêki___silnik__100_c : string = 'Silnik 100_';
  dŸwiêki___sos_lot_c : string = 'SOS lot_';
  dŸwiêki___sos_rozb³ysk_c : string = 'SOS rozb³ysk_';
  dŸwiêki___syrena_okrêtowa_c : string = 'Syrena okrêtowa_';
  dŸwiêki___trafienie_l¹d_c : string = 'Trafienie l¹d_';
  dŸwiêki___trafienie_l¹d__du¿e_c : string = 'Trafienie l¹d du¿e_';
  dŸwiêki___trafienie_statek_c : string = 'Trafienie statek_';
  dŸwiêki___trafienie_statek__du¿e_c : string = 'Trafienie statek du¿e_';
  dŸwiêki___trafienie_woda_c : string = 'Trafienie woda_';
  dŸwiêki___trafienie_woda__du¿e_c : string = 'Trafienie woda du¿e_';
  dŸwiêki___wiatr_c : string = 'Wiatr_';
  dŸwiêki___wystrza³_c : string = 'Wystrza³_';
  dŸwiêki___wystrza³__du¿e_c : string = 'Wystrza³ du¿e_';
  dŸwiêki___zatopienie_statek_c : string = 'Zatopienie statek_';

  //cofanie_wystrza³_powrót_milisekund_c : real = 250; // Po jakim czasie od wystrza³u lufa wraca na domyœln¹ pozycjê (w milisekundach). Je¿eli ten czas jest wiêkszy od czasu prze³adowania wskaŸnik prze³adowania na lufie ustawi siê w pozycji 'na³adowany' (przesunie siê poza lufê) zanim lufa wróci na domyœln¹ pozycjê cofania.
  grawitacja_opadanie_szybkoœæ_maksymalna_c : real = 90;
  informacja_dodatkowa__wyœwietlanie_czas_sekundy__domyœlny_c : smallint = 10;
  informacja_dodatkowa__wyœwietlanie_czas_sekundy__krótki_c : smallint = 1;
  jasna_linia_d³ugoœæ_c : real = 10;
  kamera_ogniskowa_domyœlna_c : single = 50;

  katalog__dŸwiêki_c : string = 'DŸwiêki';
  katalog__dŸwiêki__l¹dów_c : string = 'DŸwiêki l¹dów';
  katalog__schematy_lista__l¹dy_c : string = 'L¹dy';
  katalog__schematy_lista__prymitywy_c : string = 'Prymitywy';
  katalog__schematy_lista__si_schematy_c : string = 'SI schematy';
  katalog__schematy_lista__statki_c : string = 'Statki';
  katalog__schematy_lista__statki_pozycje_pocz¹tkowe_c : string = 'Statki pozycje pocz¹tkowe';

  klawisz_konfiguracja_wysokoœæ_c : integer = 30;

  kolizja_obracanie_si³a_c : real = 0.1; // Z jak¹ si³¹ statek obraca inny statek podczas kolizji. // 0.1
  kolizja_oznaczanie_prêdkoœæ_procent_c : real = 10; // Przy jakiej prêdkoœci procentowej oznaczaæ efekt kolizji.
  kolizja_przesuwanie_si³a_c : real = 0.1; // Z jak¹ si³¹ statek przesuwa inny statek podczas kolizji.

  kolor__czerwony_jasny_c = $00CACAFF;
  kolor__niebieski_jasny_c = $00FFDFBF;
  kolor__niebieski_jasny_bardzo_c = $00FBF0E6;

  komunikacja_rekord_testowy_r__rozmiar_c = SizeOf( TKomunikacja_Rekord_Testowy_r );
  komunikacja_rekord_testowy_2_r__rozmiar_c = SizeOf( TKomunikacja_Rekord_Testowy_2_r ) - SizeOf( string );

  l¹dowanie__podchodzenie_kroki_iloœæ_c : integer = 6;

  lotniskowiec__samolot_przyjmij_od³¹cz__czas_milisekundy_c : Int64 = 1000; // OpóŸnienie w sprawdzaniu czy lotniskowiec ma przyj¹æ / od³¹czyæ samolot (aby nie trzês³o samolotem).
  lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__nie_znaleziono_zasobów_do_odnowienia_c : real = 101;

  lot_parabol¹__k¹ta_opadania__odleg³oœæ_od_procent_c : real = 0.6; // Od jakiego procenta dystansu amunicja zaczyna opadaæ ( lot_parabol¹__k¹ta_opadania__odleg³oœæ_od_procent_c + lot_parabol¹__k¹ta_opadania__odleg³oœæ_od_odcinek_zmiany_k¹ta_procent_c powinno byæ mniejsze od 1 (100%)).
  lot_parabol¹__k¹ta_opadania__odleg³oœæ_od_odcinek_zmiany_k¹ta_procent_c : real = 0.36; //35 // Na jakim procencie dystansu zmienia siê p³ynnie k¹t opadania (bez naprowadzania ( lot_parabol¹__k¹ta_opadania__odleg³oœæ_od_procent_c + lot_parabol¹__k¹ta_opadania__odleg³oœæ_od_odcinek_zmiany_k¹ta_procent_c powinno byæ mniejsze od 1 (100%)).
  lot_parabol¹__k¹ta_opadania__przed_namierzaniem_c : real = 80; //85 // K¹t do jakiego nale¿y pochyliæ amunicjê przed rozpoczêciem nakierowywania na cel.

  nowa_linia_c : string = '#13#10';

  //obiekt_nazwa_prefiks__l¹d_c : string = 'L¹d__';
  //obiekt_nazwa_pêtla_sufiks_c : string = '__Wzorzec'; // Sufiks dodawany do nazwy obiektów bêd¹cych wzorcami w pêtlach.

  // Powy¿ej wartoœci 7 nie widaæ ró¿nicy w szerokoœci linii celowania.
  //celownik_linia_szerokoœæ_maksymalna__obrót_c : smallint = 2; // Wp³yw precyzji celowania obrotu broni na szerokoœæ linii celowania.
  //celownik_linia_szerokoœæ_maksymalna__podniesienie_c : smallint = 2; // Wp³yw precyzji celowania podniesienia luf na szerokoœæ linii celowania. Je¿eli broñ nie unosi luf wartoœæ ta jest uwzglêdniana przy obliczaniu wycelowania obrotu broni.

  obiekty_wieloosobowe__amunicja_r__rozmiar_c = SizeOf( TObiekty_Wieloosobowe__Amunicja_r );
  obiekty_wieloosobowe__efekt_r__rozmiar_c = SizeOf( TObiekty_Wieloosobowe__Efekt_r );
  obiekty_wieloosobowe__gra_statystyki_r_rozmiar_c = SizeOf( TGra_Statystyki_r );
  //obiekty_wieloosobowe__dzia³o_r__rozmiar_c = SizeOf( TObiekty_Wieloosobowe__Dzia³o_r ) - SizeOf( Pointer );
  //obiekty_wieloosobowe__lufa_r__rozmiar_c = SizeOf( TObiekty_Wieloosobowe__Lufa_r );
  //obiekty_wieloosobowe__statki_r__rozmiar_c = SizeOf( TObiekty_Wieloosobowe__Statek_r ) - SizeOf( Pointer ) * ( 0 + 1 + 6 );
  //obiekty_wieloosobowe__statek_cel_wspó³rzêdne_r__rozmiar_c = SizeOf( TObiekty_Wieloosobowe__Statek_Cel_Wspó³rzêdne_r );
  obiekty_wieloosobowe__statek_klawisze_obs³uga_r__rozmiar_c = SizeOf( TObiekty_Wieloosobowe__Statek_Klawisze_Obs³uga_r );
  //pokój_rozmów_r__rozmiar_c = SizeOf( TPokój_Rozmów_r ) - SizeOf( string );
  pokój_rozmów_r__rozmiar_c = SizeOf( TPokój_Rozmów_r );

  pokój_rozmów__si_polecenie__jak_tam_c : string = 'Jak tam?';
  pokój_rozmów__si_polecenie__l¹dowanie__przerwij_c : string = 'Przerwij l¹dowanie'; // Gracz cofa zgodê na l¹dowanie (np. nadan¹ przez SI). Dotyczy lotniskowców.
  pokój_rozmów__si_polecenie__l¹dowanie__rezygnacja_c : string = 'Rezygnujê z l¹dowania'; // Dotyczy lotniskowców.
  pokój_rozmów__si_polecenie__l¹dowanie__zezwolenie_proœba__kurs_aktualny_c : string = 'Proœba o zezwolenie na l¹dowanie na kursie aktualnym'; // Dotyczy lotniskowców.
  pokój_rozmów__si_polecenie__l¹dowanie__zezwolenie_proœba__kurs_standardowy_c : string = 'Proœba o zezwolenie na l¹dowanie na kursie standardowym'; // Dotyczy lotniskowców.
  pokój_rozmów__si_polecenie__si_aktywnoœæ_podaj_c : string = '?';
  pokój_rozmów__si_polecenie__sia_Brak_c : string = 'Brak';
  pokój_rozmów__si_polecenie__sia_Patrol_c : string = 'Patrol';
  pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Mnie_c : string = 'P³yñ do mnie'; // Ustawi punkt docelowy za statkiem.
  pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Punktu_c : string = 'P³yñ do punktu';
  pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów_c : string = 'P³yñ odnowiæ zasoby';
  pokój_rozmów__si_polecenie__sia_Postój_c : string = 'Postój';
  pokój_rozmów__si_polecenie__sia_Samolot__L¹dowanie_c : string = 'L¹dowanie';
  pokój_rozmów__si_polecenie__sia_Samolot__Startowanie_c : string = 'Startowanie';
  pokój_rozmów__si_polecenie__sia_Walka_c : string = 'Walka';
  pokój_rozmów__si_polecenie__sist_Brak_c : string = 'Brak (strzelanie)';
  pokój_rozmów__si_polecenie__sist_Celuj_Tylko_c : string = 'Celuj tylko';
  pokój_rozmów__si_polecenie__sist_Nie_Celuj_Nie_Strzelaj_c : string = 'Nie celuj nie strzelaj';
  pokój_rozmów__si_polecenie__sist_Odpowiedz_Ogniem_c : string = 'Odpowiedz ogniem';
  pokój_rozmów__si_polecenie__sist_Strzelaj_Jak_Chcesz_c : string = 'Strzelaj jak chcesz';

  prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__katapult_jest_gotowa_do_uruchomienia_c : real = 100;

  punkt_naprowadzaj__na_lotniskowiec__okreœlenie_sekundy_c : integer = 15; // Jak czêsto aktualizuje wspó³rzêdne lotniskowca, na którym ma wyl¹dowaæ samolot.
  punkty_¿ycia__w_zanurzeniu_przeliczaj__przeliczanie_ponowne_czas_sekundy_c : Int64 = 6; // Sekundy. // Co ile czasu przeliczaæ stratê punktów ¿ycia ze wzglêdu na zanurzenie.

  radar__przyciski_panel__ukrywanie__oczekiwanie_sekundy_c : integer = 3; // Po jakim czasie zostanie ukryty panel przycisków radaru.

  samolot_prêdkoœæ_lotu_procent_minimalny_c : real = 25; // Je¿eli samolot leci wolniej to zaczyna spadaæ.
  samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c : real = 5; // +5% tolerancji aby móg³ wystartowaæ i wyl¹dowaæ bez obra¿eñ.
  samolot_w_powietrzu_wysokoœæ_od_c : single = 3; // Wysokoœæ, od której przyjmuje siê, ¿e samolot jest w powietrzu.

  //schematy_lista__rozmiar_c = SizeOf( TSchematy_Lista_r );

  serwer_peer_port_c : integer = -1;
  si__cel__namiar_wyznaczenie_sekundy_c : integer = 30; // Po jakim czasie od ostatniego znanego namiaru celu zeruje wspó³rzêdne tego celu (opóŸnienie dla ustawienia pocz¹tkowego obrotu broni).
  si__cel__wyszukanie_sekundy_c : integer = 30; // Jak czêsto SI wyszukuje nowy cel.
  si__aktywnoœæ__okreœlenie_sekundy_c : integer = 10; // Jak czêsto SI sprawdza czy zmieniæ aktywnoœæ.
  si__zagaduje_sekundy_c : integer = 60; // Jak czêsto SI zagaduje.
  si_peer_port_c : integer = -2;
  si_nazwa__kod_statku_symbol_c : string = '<kod>';
  si_nazwa__kod_w_opisie_symbol_c : string = 'Kod: ';
  si_nazwa__losowa_czêœæ_symbol_c : string = '<losowa>';
  si_nazwa__nazwa_statku_symbol_c : string = '<nazwa>';
  si_pokój_rozmów__polecenie_symbol_c : string = '<SI_Polecenie>';
  si_pokój_rozmów__polecenie_symbol__samolot_c : string = ' [samolot]'; // Oznacza, ¿e polecenie dotyczy samolotu adresata (gdy gracz ma statek i samolot).
  si_pokój_rozmów__polecenie_symbol__samolot_nadawca_c : string = ' [samolot nadawca]'; // Oznacza, ¿e polecenie dotyczy samolotu nadawcy (gdy gracz ma statek i samolot).
  si_pokój_rozmów__polecenie_symbol__statek_c : string = ' [statek]'; // Oznacza, ¿e polecenie dotyczy statku adresata (gdy gracz ma statek i samolot).
  si_pokój_rozmów__polecenie_symbol__statek_nadawca_c : string = ' [statek nadawca]'; // Oznacza, ¿e polecenie dotyczy statku nadawcy (gdy gracz ma statek i samolot).
  si_pokój_rozmów__polecenie_symbol__separator_identyfikatora_c : string = ':'; // Po tym symbolu mo¿e wyst¹piæ identyfikator gracza podany jako id_gracz b¹dŸ nazwa gracza.
  si_pokój_rozmów__znacznik_symbol__si_zagaduje_c : string = '[__si_zagaduje__]'; // Je¿eli pojawi siê w treœci wiadomoœci oznacza, ¿e wiadomoœæ jest wys³ana w kontekœcie 'SI zagaduje'.
  si_pokój_rozmów__znacznik_symbol__si_zak³óca_c : string = '[__si_zak³óca__]'; // Je¿eli pojawi siê w treœci wiadomoœci oznacza, ¿e wiadomoœæ jest wys³ana w kontekœcie 'SI zak³óca'.
  si_pokój_rozmów__polecenie_symbol__t³umaczenie__prefiks_c : string = ' [';
  si_pokój_rozmów__polecenie_symbol__t³umaczenie__sufiks_c : string = ']';
  si_pokój_rozmów__znacznik_symbol__trafienie_informacja_c : string = '[__trafienie_informacja__]';// Je¿eli pojawi siê w treœci wiadomoœci oznacza, ¿e wiadomoœæ jest wys³ana w kontekœcie informacji o trafieniach.
  si_pokój_rozmów__znacznik_symbol__wys³a³_polecenie_c : string = '[__wys³a³_polecenie__]'; // Je¿eli pojawi siê w treœci wiadomoœci oznacza, ¿e wiadomoœæ jest wys³ana w kontekœcie poinformowania, ¿e ktoœ wysy³a polecenia dla SI.

  sos__czas_do_ponownego_nadania_sekundy_i_c : integer = 3; // Co ile czasu mo¿na wysy³aæ sygna³ SOS.

  statek_kolizja_oznaczenie_ponowne_czas_sekundy_c : Int64 = 1; // 7

  statki_kolizja_oznaczenie_sprawdŸ__identyfikator_elementu__dodatkowy__separator_c : string = '.';

  œlad_torowy__czas_trwania_milisekundy_c : Int64 = 300000; // 300000 (5 minut)
  œlad_torowy__dodanie_kolejnego__czas_milisekundy_c : Int64 = 15000; // 30000

  œwiat³a_miganie__przeliczenie_milisekundy_c : Int64 = 100; // 500 // Co jaki czas przelicza miganie œwiate³ (najwiêksza czêstotliwoœæ migania œwiate³).
  œwiat³o__jasnoœæ_c : real = 1.5;
  œwiat³o__w³¹czanie_próg__dzieñ_jasnoœæ_c : real = 0.92; // 6550 - 3450 (15:42 - 8:17).
  œwiat³o__w³¹czanie_próg__mg³a_intensywnoœæ_c : real = 0;
  œwiat³o_dodatkowe__jasnoœæ_c : real = 1.1;
  œwiat³o_dodatkowe__w³¹czanie_próg__dzieñ_jasnoœæ_c : real = 0.67; // 7500 - 2500 (18:00 - 6:00).

  torpeda_d¹¿enie_do_zadanej_g³êbokoœci_szybkoœæ_c : real = 7; // Jak szybko torpeda próbuje siê ustawiæ na zadanej g³êbokoœci. 7

  udp_klient_po³¹czenie_potwierdzanie_sekundy_c : single = 10; // Je¿eli po up³ywie tego czasu klient siê nie odezwie uznaje siê, ¿e po³¹czenie UDP zosta³o utracone.

  wieloosobowe__komenda__gra__dane_wys³ane_c = '__Gra_Dane_Wys³ane__';
  wieloosobowe__komenda__gra__mg³a_c = '__Gra_Mg³a__';
  wieloosobowe__komenda__gra__morze_wzburzenie_c = '__Gra_Morze_Wzburzenie__';
  wieloosobowe__komenda__gra__noc_c = '__Gra_Noc__';
  wieloosobowe__komenda__gra__rozpocznij_c = '__Gra_Rozpocznij__';
  wieloosobowe__komenda__gra__serwer_czas_wyœlij_c = '__Gra_Serwer_Czas_Wyœlij__';
  wieloosobowe__komenda__gra__statystyki_wyœlij_c = '__Gra_Statystyki_Wyœlij__';
  wieloosobowe__komenda__gra__wiatr_c = '__Gra_Wiatr__';
  wieloosobowe__komenda__gra__wspó³czynnik_prêdkoœci_c = '__Gra_Wspó³czynnik_Prêdkoœci__';
  wieloosobowe__komenda__gra__wspó³czynnik_trudnoœci_c = '__Gra_Wspó³czynnik_Trudnoœci__';
  wieloosobowe__komenda__gra__wspó³czynniki_inne_c = '__Gra_Wspó³czynniki_Inne__';
  wieloosobowe__komenda__gra__zakoñcz_c = '__Gra_Zakoñcz__';

  wieloosobowe__komenda__gracz_gotowoœæ_c = '__Gracz_Gotowoœæ__';
  wieloosobowe__komenda__gracz_lista_odœwie¿_c = '__Gracz_Lista_Odœwie¿__';

  wieloosobowe__komenda__has³o__sprawdŸ_c = '__Has³o__SprawdŸ__';

  wieloosobowe__komenda__identyfikator__nadaj_c = '__Identyfikator__Nadaj__';
  wieloosobowe__komenda__identyfikator__przypomnij_c = '__Identyfikator_Przypomnij__'; // Gdy ponownie ³¹czy siê roz³¹czony klient.
  wieloosobowe__komenda__identyfikator__zapamiêtaj_c = '__Identyfikator_Zapamiêtaj__';

  wieloosobowe__komenda__informacja_dodatkowa_dodaj_c = '__Informacja_Dodatkowa_Dodaj__'; // Wysy³anie graczom informacji z serwera.

  wieloosobowe__komenda__odbierz__dŸwiêk_efekt_c = '__DŸwiêk_Efekt__';
  wieloosobowe__komenda__odbierz__gracz__nazwa_c = '__Gracz__Nazwa__';
    // Klient:
    //   gdy wys³ana wartoœæ jest pusta zwraca siê o nazwy wszystkich graczy;
    //   wartoœæ niepusta jest równa id_statek, o którego nazwê zwraca siê klient.
    // Serwer:
    //   wysy³a wartoœæ w postaci 'id_statek;nazwa gracza'.
  wieloosobowe__komenda__odbierz__l¹d__definicja_c = '__L¹d_Definicja__'; // Wysy³a definicje tylko aktualnie wybranego l¹du.
  wieloosobowe__komenda__odbierz__l¹d__trafienie_c = '__L¹d_Trafienie__';
    wieloosobowe__l¹d__trafienie_usuñ_c = '__-usuñ__';
  wieloosobowe__komenda__odbierz__prymitywy_definicja_c = '__Prymitywy_Definicja__';
  wieloosobowe__komenda__odbierz__rekord_amunicja_c = '__Rekord_Amunicja__';
  wieloosobowe__komenda__odbierz__rekord_efekt_c = '__Rekord_Efekt__';
  wieloosobowe__komenda__odbierz__rekord_pokój_rozmów_r_c = '__Rekord_Pokój_Rozmów__';
  wieloosobowe__komenda__odbierz__rekord_statki_c = '__Rekord_Statki__';
  wieloosobowe__komenda__odbierz__rekord_statki__wysy³ane_rzadziej_c = '__Rekord_Statki__Wysy³ane_Rzadziej__';
  wieloosobowe__komenda__odbierz__statek__czas_do_zatoniêcia_c = '__Statek__Czas_Do_Zatoniêcia__';
  wieloosobowe__komenda__odbierz__statki_definicje_c = '__Statki_Definicje__';

  wieloosobowe__komenda__pauza_c = '__Pauza__';
  wieloosobowe__komenda__pozycje_pocz¹tkowe_statków__wed³ug_mapy_c = '__pozycje_pocz¹tkowe_statków__<wed³ug_mapy>__'; // Informacja dla klientów, ¿e konfiguracji pozycji pocz¹tkowych statków na serwerze jest wyliczana wed³ug mapy.

  wieloosobowe__komenda__schemat_samolot_zmieñ_c = '__Schemat_Samolot_Zmieñ__';

  wieloosobowe__komenda__serwer_wy³¹cza_siê_c = '__Serwer_Wy³¹cza_Siê__';

  wieloosobowe__komenda__statek__cel_wspó³rzêdne_c = '__Rekord_Statek_Cel_Wspó³rzêdne__';
  wieloosobowe__komenda__statek__klawisze_obs³uga_c = '__Rekord_Statek_Klawisze_Obs³uga__';
  wieloosobowe__komenda__statek__lotniskowiec__samoloty_wszystkie__punkty_¿ycia_zero_c = '__Lotniskowiec_Samoloty_Wszystkie_Punkty_¯ycia_Zero__';
  wieloosobowe__komenda__statek__przywróæ_do_gry_c = '__Statek_Przywróæ_Do_Gry__';
  wieloosobowe__komenda__statek__si__samolot_gracza__l¹duj_na_lotniskowcu_gracza_c = '__SI__Samolot_Gracza__L¹duj_Na_Lotniskowcu_Gracza__';
  wieloosobowe__komenda__statek__sos_nadaje_c = '__Statek_SOS_Nadaje__';
  wieloosobowe__komenda__statek__syrena_okrêtowa_klient_nadaje_c = '__Statek_Syrena_Okrêtowa_Klient_Nadaje__';

  wieloosobowe__komenda__udp__klient_po³¹czony_nadal_c = '__udp__po³¹czony__'; // Klient informuje, ¿e nadal jest pod³¹czony (nadal nas³uchuje serwer).

  wieloosobowe__komenda__odbierz__rekord_komunikacja_rekord_testowy_r_c = '__Komunikacja_Rekord_Testowy__';
  wieloosobowe__komenda__odbierz__rekord_komunikacja_rekord_testowy_2_r_c = '__Komunikacja_Rekord_Testowy_2__';

  wieloosobowe_string__rozmiar_c = SizeOf( TWieloosobowe_String );

  woda_tekstura_nazwa_c : string = 'Woda';
  woda_wspó³czynnik_t³umienia_c : real = 0.25;

  wygl¹d_prymityw_c : string = 'prymityw';
  wygl¹d_prymityw__kapsu³a_c : string = 'kapsu³a';
  wygl¹d_prymityw__kula_c : string = 'kula';
  wygl¹d_prymityw__linia_c : string = 'linia';
  wygl¹d_prymityw__ostros³up_c : string = 'ostros³up';
  wygl¹d_prymityw__prostopad³oœcian_c : string = 'prostopad³oœcian';
  wygl¹d_prymityw__sto¿ek_c : string = 'sto¿ek';
  wygl¹d_prymityw__torus_c : string = 'torus';
  wygl¹d_prymityw__walec_c : string = 'walec';
  wygl¹d_specjalny__dŸwiêk_emiter_c : string = 'dŸwiêk emiter'; // Element l¹du s³u¿¹cy do odtwarzania dŸwiêku, nie mo¿e byæ u¿ywany bezpoœrednio w plikach definicji l¹dów.
  wygl¹d_specjalny__lotniskowiec__³apacz_samolotów_nazwa_c : string = 'lotniskowiec__³apacz_samolotów';

  zanurzanie_precyzja_c : real = 0.5;
  zanurzenie_peryskopowe__utrzymywane_modyfikator_c : real = 0.1;
  zanurzenie_spowalnianie_g³êbokoœæ_od_c : real = -0.3; // Od jakiej g³êbokoœci zaczyna spowalniaæ statki.

var
  Statki_Form: TStatki_Form;

  id_amunicja_g : cardinal;
  klient__cadencer_current_time__korekta_o_czas_serwera_g : double; // Wartoœci do wyliczania up³ywaj¹cego czasu serwer wysy³a wed³ug w³asnych ustawieñ. Wartoœæ ta koryguje czas Gra_GLCadencer.CurrentTime u klientów aby odliczane wartoœci by³y prawid³owo prezentowane.

  function Czas_Miêdzy_W_Sekundach( const czas_poprzedni_f : Int64; const zmienna_w_milisekundach_f : boolean = false ) : Int64;
  function Czas_Miêdzy_W_Milisekundach( const czas_poprzedni_f : Int64; const zmienna_w_milisekundach_f : boolean = false ) : Int64;
  function Czas_Teraz() : double;
  function Czas_Teraz_W_Sekundach() : Int64;
  function Czas_Teraz_W_Milisekundach() : Int64;

  function Separator_Dziesiêtny__Ustal() : string;
  function String_To__Float( napis_f : string ) : real;
  function Zaokr¹glij__W_Górê( const liczba_f : real ) : integer;

  // Przyk³ad u¿ycia:
  //  czas_sekundy,
  //  czas_milisekundy
  //    : Int64
  //
  //  czas_sekundy := Czas_Teraz_W_Sekundach() // 1 sekunda = 1.
  //  Czas_Miêdzy_W_Sekundach( czas_sekundy ) // 1 sekunda = 1.
  //  Czas_Miêdzy_W_Milisekundach( czas_sekundy ) // 1 sekunda = 1 000.
  //
  //  czas_milisekundy := Czas_Teraz_W_Milisekundach() // 1 sekunda = 1 000.
  //  Czas_Miêdzy_W_Sekundach( czas_milisekundy, true ) // 1 sekunda = 1.
  //  Czas_Miêdzy_W_Milisekundach( czas_milisekundy, true ) // 1 sekunda = 1 000.

implementation

uses
  pngimage,
  System.DateUtils,
  System.IniFiles,
  System.IOUtils,
  System.Math,
  System.Rtti,
  System.StrUtils,
  System.TypInfo,
  Winapi.OpenGL,
  Xml.XMLDoc,

  GLS.FileWAV,
  GLS.Keyboard,
  GLS.State;

{$R *.dfm}

//Konstruktor klasy TStatek.
constructor TStatek.Create( AOwner : TGLBaseSceneObject; gl_collision_mmanager_f : TGLCollisionManager; efekt__element_uszkodzenie_gl_thor_fx_manager_f : TGLThorFXManager; const id_gracz_f, id_statek_f : integer; const wygl¹d_definicja_f : string; const prymitywy_lista_f : TSchematy_Lista_r_t; const punkty_¿ycia_wskaŸnik__material_options_f : GLS.Material.TGLMaterialOptions; const statek_create_funkcje_f : TStatek_Create_Funkcje; const t³umaczenie_komunikaty_r_f : TT³umaczenie_Komunikaty_r );
var
  x_prymityw_najmniejsze_l,
  x_prymityw_najwiêksze_l,
  z_prymityw_najmniejsze_l,
  z_prymityw_najwiêksze_l
    : single;
  zt_gl_base_scene_object : TGLBaseSceneObject;

  //Funkcja Wygl¹d_Elementy_Utwórz() w Konstruktor klasy TStatek.
  procedure Wygl¹d_Elementy_Utwórz( const prymityw_indeks_f : integer = -99; const prymityw_rodzic_gl_dummy_cube_f : TGLDummyCube = nil );

    //Funkcja Kolor_Ustaw() w Wygl¹d_Elementy_Utwórz() w Konstruktor klasy TStatek.
    procedure Kolor_Ustaw( const zt_gl_custom_scene_object_f : TGLCustomSceneObject; const kolor_vector_f : GLS.VectorTypes.TVector4f );
    var
      i_l : integer;
    begin

      if   ( zt_gl_custom_scene_object_f is TDzia³o )
        or ( zt_gl_custom_scene_object_f is TTorpedy_Wyrzutnia ) then
        begin

          //TTorpedy_Wyrzutnia(zt_gl_custom_scene_object_f).korpus__broñ.Material.FrontProperties.Emission.Color := kolor_vector_f;
          //TTorpedy_Wyrzutnia(zt_gl_custom_scene_object_f).korpus_przód.Material.FrontProperties.Emission.Color := kolor_vector_f;
          TTorpedy_Wyrzutnia(zt_gl_custom_scene_object_f).obrót_k¹t_zablokowany_GLDisk.Material.FrontProperties.Emission.Color := kolor_vector_f;
          //TTorpedy_Wyrzutnia(zt_gl_custom_scene_object_f).podstawa.Material.FrontProperties.Emission.Color := kolor_vector_f;
          //
          //for i_l := 0 to Length( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object_f).lufy_t ) - 1 do
          //  begin
          //
          //    TTorpedy_Wyrzutnia(zt_gl_custom_scene_object_f).lufy_t[ i_l ].korpus__lufa.Material.FrontProperties.Emission.Color := kolor_vector_f;
          //    TTorpedy_Wyrzutnia(zt_gl_custom_scene_object_f).lufy_t[ i_l ].wylot_pozycja.Material.FrontProperties.Emission.Color := kolor_vector_f;
          //
          //  end;
          ////---//for i_l := 0 to Length( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object_f).lufy_t ) - 1 do
          //
          //if zt_gl_custom_scene_object_f is TDzia³o then
          //  begin
          //
          //    TDzia³o(zt_gl_custom_scene_object_f).korpus_przód.Material.FrontProperties.Emission.Color := kolor_vector_f;
          //
          //  end
          //else//if zt_gl_custom_scene_object_f is TTorpedy_Wyrzutnia then


          statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object_f).korpus__broñ.Material, kolor_vector_f );
          statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object_f).korpus_przód.Material, kolor_vector_f );
          //statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object_f).obrót_k¹t_zablokowany_GLDisk.Material, kolor_vector_f );
          statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object_f).podstawa.Material, kolor_vector_f );

          for i_l := 0 to Length( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object_f).lufy_t ) - 1 do
            begin

              statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object_f).lufy_t[ i_l ].korpus__lufa.Material, kolor_vector_f );
              statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object_f).lufy_t[ i_l ].wylot_pozycja.Material, kolor_vector_f );

            end;
          //---//for i_l := 0 to Length( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object_f).lufy_t ) - 1 do

          if zt_gl_custom_scene_object_f is TDzia³o then
            begin

              statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TDzia³o(zt_gl_custom_scene_object_f).korpus_przód.Material, kolor_vector_f );

            end
          else//if zt_gl_custom_scene_object_f is TTorpedy_Wyrzutnia then

        end
      else//if   ( zt_gl_custom_scene_object_f is TDzia³o ) (...)
      if zt_gl_custom_scene_object_f is TGLLines then
        TGLLines(zt_gl_custom_scene_object_f).LineColor.Color := kolor_vector_f
      else
      if zt_gl_custom_scene_object_f is TKotwica then
        begin

          statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TKotwica(zt_gl_custom_scene_object_f).kotwica_podstawa.Material, kolor_vector_f );
          statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TKotwica(zt_gl_custom_scene_object_f).kotwica_ramiê__lewo.Material, kolor_vector_f );
          statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TKotwica(zt_gl_custom_scene_object_f).kotwica_ramiê__prawo.Material, kolor_vector_f );
          statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TKotwica(zt_gl_custom_scene_object_f).kotwica_trzon.Material, kolor_vector_f );
          statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TKotwica(zt_gl_custom_scene_object_f).kotwica_trzon__dó³.Material, kolor_vector_f );
          statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TKotwica(zt_gl_custom_scene_object_f).kotwica_trzon__góra.Material, kolor_vector_f );

        end
      else//if zt_gl_custom_scene_object_f is TKotwica then
      if zt_gl_custom_scene_object_f is TŒruba then
        begin

          //TŒruba(zt_gl_custom_scene_object_f).wa³.Material.FrontProperties.Emission.Color := kolor_vector_f;
          //TŒruba(zt_gl_custom_scene_object_f).wa³_³o¿ysko.Material.FrontProperties.Emission.Color := kolor_vector_f;
          //TŒruba(zt_gl_custom_scene_object_f).wa³_mocowanie.Material.FrontProperties.Emission.Color := kolor_vector_f;
          //TŒruba(zt_gl_custom_scene_object_f).wa³_podpórka.Material.FrontProperties.Emission.Color := kolor_vector_f;
          //TŒruba(zt_gl_custom_scene_object_f).wa³_do_wirnika.Material.FrontProperties.Emission.Color := kolor_vector_f;
          //TŒruba(zt_gl_custom_scene_object_f).wirnik_œrodek.Material.FrontProperties.Emission.Color := kolor_vector_f;
          //
          //for i_l := 0 to Length( TŒruba(zt_gl_custom_scene_object_f).wirnik_³opaty_t ) - 1 do
          //  TŒruba(zt_gl_custom_scene_object_f).wirnik_³opaty_t[ i_l ].Material.FrontProperties.Emission.Color := kolor_vector_f;

          statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TŒruba(zt_gl_custom_scene_object_f).wa³.Material, kolor_vector_f );
          statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TŒruba(zt_gl_custom_scene_object_f).wa³_³o¿ysko.Material, kolor_vector_f );
          statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TŒruba(zt_gl_custom_scene_object_f).wa³_mocowanie.Material, kolor_vector_f );
          statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TŒruba(zt_gl_custom_scene_object_f).wa³_podpórka.Material, kolor_vector_f );
          statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TŒruba(zt_gl_custom_scene_object_f).wa³_do_wirnika.Material, kolor_vector_f );
          statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TŒruba(zt_gl_custom_scene_object_f).wirnik_œrodek.Material, kolor_vector_f );

          for i_l := 0 to Length( TŒruba(zt_gl_custom_scene_object_f).wirnik_³opaty_t ) - 1 do
            statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TŒruba(zt_gl_custom_scene_object_f).wirnik_³opaty_t[ i_l ].Material, kolor_vector_f );

        end
      else//if zt_gl_custom_scene_object_f is TŒruba then
      if zt_gl_custom_scene_object_f is TSter then
        begin

          //TSter(zt_gl_custom_scene_object_f).ster.Material.FrontProperties.Emission.Color := kolor_vector_f;
          //TSter(zt_gl_custom_scene_object_f).ster_mocowanie.Material.FrontProperties.Emission.Color := kolor_vector_f;

          statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TSter(zt_gl_custom_scene_object_f).ster.Material, kolor_vector_f );
          statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TSter(zt_gl_custom_scene_object_f).ster_mocowanie.Material, kolor_vector_f );

        end
      else//if zt_gl_custom_scene_object_f is TSter then
      if zt_gl_custom_scene_object_f is TSter_G³êbokoœci then
        begin

          statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( TSter_G³êbokoœci(zt_gl_custom_scene_object_f).ster.Material, kolor_vector_f );

        end
      else//if zt_gl_custom_scene_object_f is TSter_G³êbokoœci then
        //zt_gl_custom_scene_object_f.Material.FrontProperties.Emission.Color := kolor_vector_f;
        statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Ustaw( zt_gl_custom_scene_object_f.Material, kolor_vector_f );

    end;//---//Kolor_Ustaw() w Wygl¹d_Elementy_Utwórz() w Konstruktor klasy TStatek.

    //Funkcja Pêtla_Wzorzec_Zwolnij() w Wygl¹d_Elementy_Utwórz() w Konstruktor klasy TStatek.
    procedure Pêtla_Wzorzec_Zwolnij();
    var
      i_l : integer;
    begin

      // Zwalnia obiekty samodzielne i te wewn¹trz kontenerów.
      for i_l := Self.wygl¹d_elementy_list.Count - 1 downto 0 do
        //if    (  Trim( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i_l ]).Name ) <> ''  ) // Kontenerów na prymitywy nie sprawdza.
        //  and (  Pos( obiekt_nazwa_pêtla_sufiks_c, TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i_l ]).Name ) > 0  )
        if Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i_l ]) ) = Wyglad_Elementy.or_Wzorzec then // Kontenerów na prymitywy nie sprawdza.
          begin
          
            TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i_l ]).Free();
            Self.wygl¹d_elementy_list.Delete( i_l );

          end;
        //---//if Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i_l ]) ) = Wyglad_Elementy.or_Wzorzec then


      // Zwalnia puste kontenery na prymitywy.
      for i_l := Self.wygl¹d_elementy_list.Count - 1 downto 0 do
        //if    (  Trim( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i_l ]).Name ) = ''  ) // Jest to kontener na prymitywy.
        if    (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i_l ]) ) = Wyglad_Elementy.or_Kontener_Prymitywów  ) // Jest to kontener na prymitywy.
          and ( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i_l ]).Count <= 0 ) then
          begin

            TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i_l ]).Free();
            Self.wygl¹d_elementy_list.Delete( i_l );

          end;
        //---//if    (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i_l ]) ) = Wyglad_Elementy.or_Kontener_Prymitywów  ) (...)

    end;//---//Pêtla_Wzorzec_Zwolnij() w Wygl¹d_Elementy_Utwórz() w Konstruktor klasy TStatek.

  var
    pêtla_rosn¹ca : boolean;

    i,
    j,
    jj,
    jjj,
    pêtla_x_i,
    pêtla_y_i,
    pêtla_z_i,
    pêtla_x_iloœæ,
    pêtla_y_iloœæ,
    pêtla_z_iloœæ
      : integer;

    ztr_1,
    ztr_2,
    ztr_3,
    ztr_4,
    kolor_losowy__do,
    kolor_losowy__od,
    pêtla_x_skok,
    pêtla_y_skok,
    pêtla_z_skok
      : real;

    zts : string;
    zt_xml_document : Xml.XMLDoc.TXMLDocument;
    zt_gl_custom_scene_object,
    zt_pêtla_gl_custom_scene_object
      : TGLCustomSceneObject;
    kolor_vector : GLS.VectorTypes.TVector4f;
    wygl¹d_kolor_definicja : TWygl¹d_Kolor_Definicja;
    wygl¹d_liczba_definicja : TWygl¹d_Liczba_Definicja;
  begin//Funkcja Wygl¹d_Elementy_Utwórz() w Konstruktor klasy TStatek.

    // Parametry:
    //   prymityw_indeks_f:
    //     = -99 - tworzy statek.
    //     <> -99 - tworzy prymityw.
    //   prymityw_rodzic_gl_dummy_cube_f
    //     = nil - tworzy statek.
    //     <> nil - tworzy prymityw (rodzicem tworzonych obiektów jest utworzony wczeœniej kontener TGLDummyCube).
    //

    if   ( Self.wygl¹d_elementy_list = nil )
      or (  not Assigned( Self.wygl¹d_elementy_list )  ) then
      Exit;


    if prymityw_indeks_f = -99 then
      begin

        // Tworzy statek.

        if Trim( wygl¹d_definicja_f ) = '' then
          begin

            statek_create_funkcje_f.Log_Wypisz( t³umaczenie_komunikaty_r_f.komunikat__brak_definicji_elementów_statku, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );
            Exit;

          end;
        //---//if Trim( wygl¹d_definicja_f ) = '' then

        zts := wygl¹d_definicja_f;

      end
    else//if prymityw_indeks_f = -99 then
      begin

        // Tworzy prymityw.

        if prymityw_indeks_f <> -99 then
          begin

            if   ( prymityw_indeks_f < 0 )
              or (  prymityw_indeks_f > Length( prymitywy_lista_f ) - 1  ) then
              begin

                statek_create_funkcje_f.Log_Wypisz( t³umaczenie_komunikaty_r_f.komunikat__brak_definicji_prymitywu, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );
                Exit;

              end;
            //---//if   ( prymityw_indeks_f < 0 ) (...)

            zts := prymitywy_lista_f[ prymityw_indeks_f ].treœæ__sl;

          end;
        //---//if prymityw_indeks_f <> -99 then

      end;
    //---//if prymityw_indeks_f = -99 then


    zt_xml_document := Xml.XMLDoc.TXMLDocument.Create( Application );

    zt_xml_document.Options := zt_xml_document.Options + [ doNodeAutoIndent ]; // Domyœlnie ma: doNodeAutoCreate, doAttrNull, doAutoPrefix, doNamespaceDecl.

    try
      // Serwer zg³asza b³¹d podczas odczytu danych o l¹dzie od klienta
      //   MSXML is not installed
      //   Assertion failure GLContext.pas
      // W L¹d__Zwolnij() chyba te¿ takie coœ siê dzieje (inne b³êdy) ale z podobnego powodu.
      //
      // Uda³o siê unikn¹æ b³êdów tak:
      //   w zdarzeniu odczytania danych o l¹dzie tylko w³¹czyæ Timer;
      //   w Timer.OnTimet wy³¹czyæ Timer i wywo³aæ zwalnianie i wczytywanie l¹du.
      //
      zt_xml_document.LoadFromXML( zts );
    except
      on E : Exception do
        statek_create_funkcje_f.Log_Wypisz(  t³umaczenie_komunikaty_r_f.komunikat__nieprawid³owa_definicja_elementów_statku + #13 + #10 + E.Message + ' ' + IntToStr( E.HelpContext ), not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ  );
    end;
    //---//try

    {$region 'Odczyt danych xml.'}
    if zt_xml_document.Active then
      begin

        wygl¹d_kolor_definicja := TWygl¹d_Kolor_Definicja.Create();
        wygl¹d_liczba_definicja := TWygl¹d_Liczba_Definicja.Create();


        for i := 0 to zt_xml_document.DocumentElement.ChildNodes.Count - 1 do
          begin

            if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'artyleria' )
              or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'bomba_g³êbinowa' )
              or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'dzia³o' )
              or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'je¿e_g³êbinowe' )
              or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'kotwica' )
              or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' )
              or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c )
              or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'ster' )
              or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'ster_g³êbokoœci' )
              or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'œruba' )
              or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'torpedy_wyrzutnia' ) then
              begin

                zt_gl_custom_scene_object := nil;

                if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'artyleria' then
                  begin

                    try
                      jj := zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'lufy_iloœæ' ];
                    except
                      jj := 1;
                    end;
                    //---//try

                    j := Length( Self.artyleria_t );
                    SetLength( Self.artyleria_t, j + 1 );
                    Self.artyleria_t[ j ] := TArtyleria.Create( zt_gl_base_scene_object, Self, gl_collision_mmanager_f, efekt__element_uszkodzenie_gl_thor_fx_manager_f, jj, 0, statek_create_funkcje_f );
                    zt_gl_custom_scene_object := Self.artyleria_t[ j ];

                  end
                else//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'artyleria' then
                if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'bomba_g³êbinowa' then
                  begin

                    try
                      jj := zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'lufy_iloœæ' ];
                    except
                      jj := 1;
                    end;
                    //---//try

                    j := Length( Self.bomba_g³êbinowa_t );
                    SetLength( Self.bomba_g³êbinowa_t, j + 1 );
                    Self.bomba_g³êbinowa_t[ j ] := TTorpedy_Wyrzutnia.Create( zt_gl_base_scene_object, Self, gl_collision_mmanager_f, efekt__element_uszkodzenie_gl_thor_fx_manager_f, jj, statek_create_funkcje_f, Typy_Wspolne.ar_Bomba_G³êbinowa );
                    zt_gl_custom_scene_object := Self.bomba_g³êbinowa_t[ j ];

                  end
                else//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'bomba_g³êbinowa' then
                if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'dzia³o' then
                  begin

                    try
                      jj := zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'lufy_iloœæ' ];
                    except
                      jj := 1;
                    end;
                    //---//try

                    j := Length( Self.dzia³a_t );
                    SetLength( Self.dzia³a_t, j + 1 );
                    Self.dzia³a_t[ j ] := TDzia³o.Create( zt_gl_base_scene_object, Self, gl_collision_mmanager_f, efekt__element_uszkodzenie_gl_thor_fx_manager_f, jj, 0, statek_create_funkcje_f );
                    zt_gl_custom_scene_object := Self.dzia³a_t[ j ];

                  end
                else//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'dzia³o' then
                if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'je¿e_g³êbinowe' then
                  begin

                    try
                      jj := zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'lufy_iloœæ' ];
                    except
                      jj := 1;
                    end;
                    //---//try

                    j := Length( Self.je¿e_g³êbinowe_t );
                    SetLength( Self.je¿e_g³êbinowe_t, j + 1 );
                    Self.je¿e_g³êbinowe_t[ j ] := TTorpedy_Wyrzutnia.Create( zt_gl_base_scene_object, Self, gl_collision_mmanager_f, efekt__element_uszkodzenie_gl_thor_fx_manager_f, jj, statek_create_funkcje_f, Typy_Wspolne.ar_Je¿e_G³êbinowe );
                    zt_gl_custom_scene_object := Self.je¿e_g³êbinowe_t[ j ];

                  end
                else//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'je¿e_g³êbinowe' then
                if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'kotwica' then
                  begin

                    j := Length( Self.kotwica_t );
                    SetLength( Self.kotwica_t, j + 1 );
                    Self.kotwica_t[ j ] := TKotwica.Create( zt_gl_base_scene_object, Self, gl_collision_mmanager_f, efekt__element_uszkodzenie_gl_thor_fx_manager_f, 0, 0, 0 );
                    zt_gl_custom_scene_object := Self.kotwica_t[ j ];

                  end
                else//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'kotwica' then
                if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' )
                  or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c ) then
                  begin

                    if    ( Self.czy_lotniskowiec )
                      and ( Self.lotniskowiec__³apacz_samolotów_dummy = nil )
                      and ( VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'typ' ] ) = wygl¹d_specjalny__lotniskowiec__³apacz_samolotów_nazwa_c ) then
                      begin

                        Self.lotniskowiec__³apacz_samolotów_dummy := Wyglad_Elementy.TSt_GLDummyCube.Create( Self );
                        zt_gl_custom_scene_object := Self.lotniskowiec__³apacz_samolotów_dummy;

                      end
                    else//if    ( Self.czy_lotniskowiec ) (...)
                    if    ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' )
                      and (  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'typ' ] ) <> wygl¹d_specjalny__dŸwiêk_emiter_c  )then
                      zt_gl_custom_scene_object := statek_create_funkcje_f.Wygl¹d_Elementy__Utwórz_Element(  Self, VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'typ' ] ), zt_gl_base_scene_object, prymityw_rodzic_gl_dummy_cube_f  )
                    else//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                    if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c then
                      //zt_gl_custom_scene_object := statek_create_funkcje_f.Wygl¹d_Elementy__Utwórz_Element( Self, wygl¹d_prymityw_c, zt_gl_base_scene_object );
                      zt_gl_custom_scene_object := statek_create_funkcje_f.Wygl¹d_Elementy__Utwórz_Element( Self, wygl¹d_prymityw_c, zt_gl_base_scene_object, prymityw_rodzic_gl_dummy_cube_f ); // Dla prymitywów umieszczanych w prymitywach.

                  end
                else//if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' ) (...)
                if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'ster' then
                  begin

                    j := Length( Self.ster_t );
                    SetLength( Self.ster_t, j + 1 );
                    Self.ster_t[ j ] := TSter.Create( zt_gl_base_scene_object, Self.id_statek, gl_collision_mmanager_f, efekt__element_uszkodzenie_gl_thor_fx_manager_f, 0, 0, 0 );
                    zt_gl_custom_scene_object := Self.ster_t[ j ];

                  end
                else//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'ster' then
                if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'ster_g³êbokoœci' then
                  begin

                    j := Length( Self.ster_g³êbokoœci_t );
                    SetLength( Self.ster_g³êbokoœci_t, j + 1 );
                    Self.ster_g³êbokoœci_t[ j ] := TSter_G³êbokoœci.Create( zt_gl_base_scene_object, Self.id_statek, gl_collision_mmanager_f, efekt__element_uszkodzenie_gl_thor_fx_manager_f, 0, 0, 0 );
                    zt_gl_custom_scene_object := Self.ster_g³êbokoœci_t[ j ];

                  end
                else//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'ster_g³êbokoœci' then
                if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'œruba' then
                  begin

                    j := Length( Self.œruby_t );
                    SetLength( Self.œruby_t, j + 1 );
                    Self.œruby_t[ j ] := TŒruba.Create( zt_gl_base_scene_object, Self, false, gl_collision_mmanager_f, efekt__element_uszkodzenie_gl_thor_fx_manager_f );
                    zt_gl_custom_scene_object := Self.œruby_t[ j ];
                    TŒruba(zt_gl_custom_scene_object).Wirnik_£opat_K¹t_Ustaw();

                  end
                else//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'œruba' then
                if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'torpedy_wyrzutnia' then
                  begin
                  
                    try
                      jj := zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'lufy_iloœæ' ];
                    except
                      jj := 1;
                    end;
                    //---//try

                    j := Length( Self.torpedy_wyrzutnie_t );
                    SetLength( Self.torpedy_wyrzutnie_t, j + 1 );
                    Self.torpedy_wyrzutnie_t[ j ] := TTorpedy_Wyrzutnia.Create( zt_gl_base_scene_object, Self, gl_collision_mmanager_f, efekt__element_uszkodzenie_gl_thor_fx_manager_f, jj, statek_create_funkcje_f );
                    zt_gl_custom_scene_object := Self.torpedy_wyrzutnie_t[ j ];

                  end;
                //---//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'torpedy_wyrzutnia' then

                if zt_gl_custom_scene_object <> nil then
                  begin

                    if zt_gl_custom_scene_object <> Self.lotniskowiec__³apacz_samolotów_dummy then

                      if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' )
                        or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c ) then
                        Self.wygl¹d_elementy_list.Add( zt_gl_custom_scene_object );


                    if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c then
                      begin

                        jj := 0; // Tutaj tymczasowo jako sprawdzenie czy istnieje definicja prymitywu.

                        for j := 0 to Length( prymitywy_lista_f ) - 1 do
                          if prymitywy_lista_f[ j ].plik_nazwa__sl = VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] ) then
                            begin

                              jj:= 1;
                              Wygl¹d_Elementy_Utwórz( j, TGLDummyCube(zt_gl_custom_scene_object) );
                              Break;

                            end;
                          //---//if prymitywy_lista_f[ j ].plik_nazwa__sl = VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] ) then

                        if jj <> 1 then
                          statek_create_funkcje_f.Log_Wypisz(  t³umaczenie_komunikaty_r_f.komunikat__nie_odnaleziono_definicji_prymitywu + ' ''' + VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] ) + '''.'  );

                      end;
                    //---//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c then


                    kolor_losowy__do := -1;
                    kolor_losowy__od := -1;


                    for j := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes.Count - 1 do
                      begin

                        if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'artyleria' )
                          or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'bomba_g³êbinowa' )
                          or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'dzia³o' )
                          or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'je¿e_g³êbinowe' )
                          or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'torpedy_wyrzutnia' ) then
                          begin

                            if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'artyleria' )
                              or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'dzia³o' ) then
                              begin

                                if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'podniesienie_k¹t_maksymalny' then
                                  TDzia³o(zt_gl_custom_scene_object).podniesienie_k¹t_maksymalny := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                                else
                                if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'podniesienie_k¹t_minimalny' then
                                  TDzia³o(zt_gl_custom_scene_object).podniesienie_k¹t_minimalny := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                                else
                                if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'podniesienie_k¹t_pocz¹tkowy' then
                                  TDzia³o(zt_gl_custom_scene_object).podniesienie_k¹t_pocz¹tkowy := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                                else
                                if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'podniesienie_szybkoœæ' then
                                  TDzia³o(zt_gl_custom_scene_object).podniesienie_szybkoœæ := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                              end;
                            //---//if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'artyleria' ) (...)

                            if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'amunicja_iloœæ' then
                              begin

                                TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).amunicja_iloœæ := Round(  statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )  );
                                TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).amunicja_iloœæ_pocz¹tkowa := TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).amunicja_iloœæ;

                              end
                            else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'amunicja_iloœæ' then
                            if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'amunicja_uzbrajanie_odleg³oœæ' then
                              begin

                                TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).amunicja_uzbrajanie_odleg³oœæ := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                                // Jest ustawiane w Torpedy_Wyrzutnia.Dodatkowe_Elementy_Ustaw().
                                //if Length( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).lufy_t ) > 0 then
                                //  begin
                                //
                                //    // Okreœla odleg³oœæ w jakiej uzbraja siê amunicja (wyliczenie jest przybli¿one, gdy¿ amunicja uzbraja siê z korekt¹ o strza³_od_blokada_dystans).
                                //
                                //    //TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).celownik_linia.Nodes[ 0 ].Z := TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).lufy_t[ 0 ].korpus__lufa.Height + TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).lufy_t[ 0 ].korpus__lufa.Height * 0.1;
                                //    //TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).celownik_linia.Nodes[ 0 ].Z := -( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).celownik_linia.Nodes[ 0 ].Z + TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).amunicja_uzbrajanie_odleg³oœæ );
                                //
                                //    if TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).lufy_t[ 0 ].dzia³o <> nil then
                                //      ztr_1 := 1
                                //    else//if TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).lufy_t[ 0 ].dzia³o <> nil then
                                //      ztr_1 := TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).lufy_t[ 0 ].dzia³o.skala__broñ;
                                //
                                //    TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).celownik_linia.Nodes[ 0 ].Z :=
                                //      -TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).amunicja_uzbrajanie_odleg³oœæ
                                //      - (
                                //            TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).lufy_t[ 0 ].korpus__lufa.Height
                                //          + TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).lufy_t[ 0 ].korpus__lufa.TopRadius * 5 // Amunicja uzbraja siê trochê wczeœniej.
                                //        )
                                //      * ztr_1;
                                //
                                //  end;
                                ////---//if Length( Self.lufy_t ) > 0 then
                                //
                                //TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).celownik_linia_bez_falowania.Nodes[ 0 ].Z := TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).celownik_linia.Nodes[ 0 ].Z;

                              end
                            else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'amunicja_uzbrajanie_odleg³oœæ' then
                            if    ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'artyleria' )
                              and ( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'zasiêg_od_parabola' ) then
                                TArtyleria(zt_gl_custom_scene_object).zasiêg_od_parabola := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                            else
                            if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'obra¿enia_zadawane' then
                              TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obra¿enia_zadawane := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                            else
                            if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'obra¿enia_zasiêg' then
                              begin

                                TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obra¿enia_zasiêg := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                                if    ( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obra¿enia_zasiêg <> -1 )
                                  and ( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obra¿enia_zasiêg <= 0 ) then
                                  TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obra¿enia_zasiêg := -1;

                              end
                            else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'obra¿enia_zasiêg' then
                            if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'obrót_k¹t_zablokowany_do' then
                              TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_do := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                            else
                            if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'obrót_k¹t_zablokowany_od' then
                              TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_od := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                            else
                            if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'obrót_k¹t_zablokowany_strza³_do' then
                              begin

                                jj := Length( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_strza³_do );
                                SetLength( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_strza³_do, jj + 1 );

                                TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_strza³_do[ jj ] := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                              end
                            else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'obrót_k¹t_zablokowany_strza³_do' then
                            if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'obrót_k¹t_zablokowany_strza³_od' then
                              begin

                                jj := Length( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_strza³_od );
                                SetLength( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_strza³_od, jj + 1 );

                                TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_strza³_od[ jj ] := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                              end
                            else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'obrót_k¹t_zablokowany_strza³_od' then
                            if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny' then
                              begin

                                //if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'artyleria' )
                                //  or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'dzia³o' ) then
                                //  begin
                                //
                                //    jj := Length( TDzia³o(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny );
                                //    SetLength( TDzia³o(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny, jj + 1 );
                                //
                                //    TDzia³o(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny[ jj ] := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );
                                //
                                //  end
                                ////---//if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'artyleria' ) (...)

                                jj := Length( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny );
                                SetLength( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny, jj + 1 );

                                TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny[ jj ] := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                              end
                            else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny' then
                            if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'obrót_szybkoœæ' then
                              TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_szybkoœæ := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                            else
                            if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'prze³adowanie_czas_milisekundy' then
                              begin

                                TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).prze³adowanie_czas_milisekundy__broñ := Round(  statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, 1, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )  );

                                if TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).prze³adowanie_czas_milisekundy__broñ <= 0 then
                                  TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).prze³adowanie_czas_milisekundy__broñ := 1;

                              end
                            else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'prze³adowanie_czas_milisekundy' then
                            //if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'skala' then
                            //  TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).skala__broñ := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, 1, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                            //else
                            if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'strza³_od_blokada_milisekundy' then
                              TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).strza³_od_blokada_milisekundy := Round(  statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, 1, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )  )
                            else
                            if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'zasiêg' then
                              TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).zasiêg__broñ := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                          end;
                        //---//if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'artyleria' ) (...)

                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'czy_obrót_lewo' then
                          begin

                            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'œruba' then
                              if AnsiLowerCase( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text ) = 'tak' then
                                begin

                                  TŒruba(zt_gl_custom_scene_object).czy_obrót_lewo := true;
                                  TŒruba(zt_gl_custom_scene_object).Wirnik_£opat_K¹t_Ustaw();

                                end;
                              //---//if AnsiLowerCase( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text ) = 'tak' then

                          end
                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'czy_obrót_lewo' then
                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'dziób' then
                          begin

                            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                              if AnsiLowerCase( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text ) = 'tak' then
                                Wyglad_Elementy.Dziób( zt_gl_custom_scene_object, true );

                          end
                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'dziób' then
                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'dŸwiêk' then
                          begin

                            // Tutaj tylko ustawi informacjê o efekcie dŸwiêkowym, a sam efekt zostanie dodany póŸniej.

                            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                              begin

                                //if not statek_create_funkcje_f.Wygl¹d_Elementy__DŸwiêk_Wczytaj_wsk( zt_gl_custom_scene_object, zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, true ) then
                                //  statek_create_funkcje_f.Log_Wypisz( t³umaczenie_komunikaty_r_f.komunikat__tworzenie_elementów_statku___b³¹d_wczytania_dŸwiêku + ': ' + zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text + '.', not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );
                                Wyglad_Elementy.DŸwiêk_Nazwa( zt_gl_custom_scene_object, zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text );


                                try
                                  jj := StrToInt(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'losowoœæ' ] )  );
                                except
                                  jj := -1;
                                end;
                                //---//try

                                if jj > 0 then
                                  begin

                                    Wyglad_Elementy.DŸwiêki__Losowoœæ( zt_gl_custom_scene_object, jj );
                                    //Wyglad_Elementy.DŸwiêki__OpóŸnienie_Losowe__Wylicz( zt_gl_custom_scene_object );

                                  end;
                                //---//if jj > 0 then


                                try
                                  ztr_1 := String_To__Float(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'zasiêg_minimalny' ] )  );
                                except
                                  ztr_1 := -1;
                                end;
                                //---//try

                                if ztr_1 >= 0 then
                                  begin

                                    Wyglad_Elementy.DŸwiêki__Zasiêg_Minimalny( zt_gl_custom_scene_object, ztr_1 );

                                  end;
                                //---//if ztr_1 >= 0 then

                              end;
                            //---//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then

                          end
                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'dŸwiêk' then
                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'kolor' then
                          begin

                            if    (   Trim(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'nazwa' ] )  ) <> ''   )
                              and (   wygl¹d_kolor_definicja.Definicja_Istnieje(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'nazwa' ] )  )   ) then
                              begin

                                kolor_vector := wygl¹d_kolor_definicja.Odczytaj_Definicjê(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'nazwa' ] )  );

                              end
                            else//if    (   Trim(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'nazwa' ] )  ) <> ''   ) (...)
                              begin

                                ztr_1 := 0;
                                ztr_2 := 0;
                                ztr_3 := 0;
                                ztr_4 := 0;

                                for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do
                                  begin

                                    if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'r' then
                                      ztr_1 := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                                    else
                                    if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'g' then
                                      ztr_2 := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                                    else
                                    if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'b' then
                                      ztr_3 := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                                    else
                                    if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'a' then
                                      ztr_4 := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                                  end;
                                //---//for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do

                                if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count > 0 then
                                  GLS.VectorGeometry.SetVector( kolor_vector, ztr_1, ztr_2, ztr_3, ztr_4 )
                                else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count > 0 then
                                  kolor_vector := GLS.Color.clrGray20;

                              end;
                            //---//if    (   Trim(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'nazwa' ] )  ) <> ''   ) (...)


                            Kolor_Ustaw( zt_gl_custom_scene_object, kolor_vector );

                          end
                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'kolor' then
                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'kolor_losowy' then
                          begin

                            if Trim(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'do' ] )  ) <> '' then
                              kolor_losowy__do := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'do' ], null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                            else//if Trim(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'do' ] )  ) <> '' then
                              kolor_losowy__do := -2; // Aby kopiowany element mia³ kolor losowy z pe³nego zakresu.

                            if Trim(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'od' ] )  ) <> '' then
                              kolor_losowy__od := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'od' ], null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                            else//if Trim(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'od' ] )  ) <> '' then
                              kolor_losowy__od := -2; // Aby kopiowany element mia³ kolor losowy z pe³nego zakresu.


                            if    ( kolor_losowy__do < 0 )
                              and ( kolor_losowy__od < 0 ) then
                              GLS.VectorGeometry.SetVector( kolor_vector, Random(), Random(), Random(), Random() )
                            else//if    ( kolor_losowy__do < 0 ) (...)
                              kolor_vector := statek_create_funkcje_f.Wygl¹d_Elementy__Kolor_Losowy_Wylicz( kolor_losowy__od, kolor_losowy__do );


                            Kolor_Ustaw( zt_gl_custom_scene_object, kolor_vector );

                          end
                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'kolor_losowy' then
                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'kolor_nazwa' then
                          begin

                            Kolor_Ustaw(  zt_gl_custom_scene_object, GLS.Color.ColorManager.GetColor( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text )  ); // Robi wyciek pamiêci. // clrGreen clrYellowGreen clrBronze2 clrGray40

                          end
                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'kolor_nazwa' then
                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'obrót__lewo_prawo' then
                          begin

                            if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'artyleria' )
                              or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'bomba_g³êbinowa' )
                              or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'dzia³o' )
                              or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'je¿e_g³êbinowe' )
                              or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'torpedy_wyrzutnia' ) then
                              TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_k¹t_zadany := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                            else//if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'artyleria' ) (...)
                              zt_gl_custom_scene_object.TurnAngle := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                          end
                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'obrót__lewo_prawo' then
                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'radar' then
                          begin

                            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                              if AnsiLowerCase( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text ) = 'tak' then
                                Wyglad_Elementy.Radar( zt_gl_custom_scene_object, true );

                          end
                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'radar' then
                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'œwiat³a_miganie' then
                          begin

                            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                              begin

                                statek_create_funkcje_f.Œwiat³a_Miganie__Wartoœci_Ustaw( zt_gl_custom_scene_object, zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text );


                                try
                                  jj := StrToInt(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'losowoœæ' ] )  );
                                except
                                  jj := -1;
                                end;
                                //---//try

                                if jj > 0 then
                                  begin

                                    Wyglad_Elementy.Œwiat³a_Miganie__Losowoœæ( zt_gl_custom_scene_object, jj );
                                    Wyglad_Elementy.Œwiat³a_Miganie__OpóŸnienie_Losowe__Wylicz( zt_gl_custom_scene_object );

                                  end;
                                //---//if jj > 0 then

                              end;
                            //---//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then

                          end
                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'œwiat³a_miganie' then
                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'œwiat³o' then
                          begin

                            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                              if AnsiLowerCase( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text ) = 'tak' then
                                Wyglad_Elementy.Œwiat³o( zt_gl_custom_scene_object, true );

                          end
                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'œwiat³o' then
                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'œwiat³o_dodatkowe' then
                          begin

                            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                              if AnsiLowerCase( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text ) = 'tak' then
                                Wyglad_Elementy.Œwiat³o_Dodatkowe( zt_gl_custom_scene_object, true );

                          end
                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'œwiat³o_dodatkowe' then
                        if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla_x' )
                          or ( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla_y' )
                          or ( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla_z' ) then
                          begin

                            // Powinien to byæ ostatni wêze³.

                            // Tutaj nie ma znaczenia, ¿e jest to zmienna dotycz¹ca x.
                            ztr_1 := 0;
                            pêtla_x_iloœæ := 0;
                            ztr_3 := 0;
                            pêtla_x_skok := 0;

                            for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do
                              begin

                                if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'pêtla_do' then
                                  ztr_1 := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                                else
                                if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'pêtla_iloœæ' then
                                  pêtla_x_iloœæ := Round(  statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )  )
                                else
                                if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'pêtla_od' then
                                  ztr_3 := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                                else
                                if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'pêtla_skok' then
                                  pêtla_x_skok := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                              end;
                            //---//for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do


                            if pêtla_x_skok <> 0 then
                              begin

                                if pêtla_x_iloœæ > 0 then
                                  begin

                                    for jj := 1 to pêtla_x_iloœæ do
                                      begin

                                        //jjj := zt_gl_custom_scene_object.Behaviours.Count; // Nie ma to sensu ale bez tego zg³asza wycieki pamiêci (TList, TGL Behaviours). //??? // DŸwiêków emitowanych przez zagnie¿d¿one obiekty jakoœ nie s³ychaæ.

                                        zt_pêtla_gl_custom_scene_object := nil;


                                        if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                                          zt_pêtla_gl_custom_scene_object := statek_create_funkcje_f.Wygl¹d_Elementy__Utwórz_Element(  Self, VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'typ' ] ), zt_gl_base_scene_object, prymityw_rodzic_gl_dummy_cube_f  )
                                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                                        if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c then
                                          //zt_pêtla_gl_custom_scene_object := statek_create_funkcje_f.Wygl¹d_Elementy__Utwórz_Element( Self, wygl¹d_prymityw_c, zt_gl_base_scene_object );
                                          zt_pêtla_gl_custom_scene_object := statek_create_funkcje_f.Wygl¹d_Elementy__Utwórz_Element( Self, wygl¹d_prymityw_c, zt_gl_base_scene_object, prymityw_rodzic_gl_dummy_cube_f ); // Dla prymitywów umieszczanych w prymitywach.


                                        if zt_pêtla_gl_custom_scene_object <> nil then
                                          begin

                                            Self.wygl¹d_elementy_list.Add( zt_pêtla_gl_custom_scene_object );

                                            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c then
                                              for jjj := 0 to Length( prymitywy_lista_f ) - 1 do
                                                if prymitywy_lista_f[ jjj ].plik_nazwa__sl = VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] ) then
                                                  begin

                                                    Wygl¹d_Elementy_Utwórz( jjj, TGLDummyCube(zt_pêtla_gl_custom_scene_object) );
                                                    Break;

                                                  end;
                                                //---//if prymitywy_lista_f[ jjj ].plik_nazwa__sl = VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] ) then


                                            statek_create_funkcje_f.Wygl¹d_Elementy__Kopiuj_W³aœciwoœci( zt_gl_custom_scene_object, zt_pêtla_gl_custom_scene_object, kolor_losowy__od, kolor_losowy__do );


                                            if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla_x' then
                                              zt_pêtla_gl_custom_scene_object.Position.X := zt_pêtla_gl_custom_scene_object.Position.X + jj * pêtla_x_skok
                                            else
                                            if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla_y' then
                                              zt_pêtla_gl_custom_scene_object.Position.Y := zt_pêtla_gl_custom_scene_object.Position.Y + jj * pêtla_x_skok
                                            else
                                            if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla_z' then
                                              zt_pêtla_gl_custom_scene_object.Position.Z := zt_pêtla_gl_custom_scene_object.Position.Z + jj * pêtla_x_skok;

                                          end;
                                        //---//if zt_pêtla_gl_custom_scene_object <> nil then

                                      end;
                                    //---//for jj := 1 to pêtla_x_iloœæ do

                                  end
                                else//if pêtla_x_iloœæ > 0 then
                                if ztr_1 <> ztr_3 then
                                  begin

                                    statek_create_funkcje_f.Pêtla_Wzorzec_Oznacz( zt_gl_custom_scene_object );

                                    pêtla_rosn¹ca := ztr_3 < ztr_1;
                                    pêtla_x_iloœæ := 1;
                                    pêtla_x_skok := Abs( pêtla_x_skok );

                                    //jjj := zt_gl_custom_scene_object.Behaviours.Count; // Nie ma to sensu ale bez tego zg³asza wycieki pamiêci (TList, TGL Behaviours). //??? // DŸwiêków emitowanych przez zagnie¿d¿one obiekty jakoœ nie s³ychaæ.

                                    while pêtla_x_iloœæ = 1 do
                                      begin

                                        zt_pêtla_gl_custom_scene_object := nil;


                                        if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                                          zt_pêtla_gl_custom_scene_object := statek_create_funkcje_f.Wygl¹d_Elementy__Utwórz_Element(  Self, VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'typ' ] ), zt_gl_base_scene_object, prymityw_rodzic_gl_dummy_cube_f  )
                                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                                        if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c then
                                          //zt_pêtla_gl_custom_scene_object := statek_create_funkcje_f.Wygl¹d_Elementy__Utwórz_Element( Self, wygl¹d_prymityw_c, zt_gl_base_scene_object );
                                          zt_pêtla_gl_custom_scene_object := statek_create_funkcje_f.Wygl¹d_Elementy__Utwórz_Element( Self, wygl¹d_prymityw_c, zt_gl_base_scene_object, prymityw_rodzic_gl_dummy_cube_f ); // Dla prymitywów umieszczanych w prymitywach.


                                        if zt_pêtla_gl_custom_scene_object <> nil then
                                          begin

                                            Self.wygl¹d_elementy_list.Add( zt_pêtla_gl_custom_scene_object );

                                            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c then
                                              for jjj := 0 to Length( prymitywy_lista_f ) - 1 do
                                                if prymitywy_lista_f[ jjj ].plik_nazwa__sl = VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] ) then
                                                  begin

                                                    Wygl¹d_Elementy_Utwórz( jjj, TGLDummyCube(zt_pêtla_gl_custom_scene_object) );
                                                    Break;

                                                  end;
                                                //---//if prymitywy_lista_f[ jjj ].plik_nazwa__sl = VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] ) then


                                            statek_create_funkcje_f.Wygl¹d_Elementy__Kopiuj_W³aœciwoœci( zt_gl_custom_scene_object, zt_pêtla_gl_custom_scene_object, kolor_losowy__od, kolor_losowy__do );


                                            if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla_x' then
                                              zt_pêtla_gl_custom_scene_object.Position.X := ztr_3
                                            else
                                            if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla_y' then
                                              zt_pêtla_gl_custom_scene_object.Position.Y := ztr_3
                                            else
                                            if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla_z' then
                                              zt_pêtla_gl_custom_scene_object.Position.Z := ztr_3;

                                          end;
                                        //---//if zt_pêtla_gl_custom_scene_object <> nil then


                                        if pêtla_rosn¹ca then
                                          begin

                                            ztr_3 := ztr_3 + pêtla_x_skok;

                                            if ztr_3 >= ztr_1 then
                                              pêtla_x_iloœæ := 0;

                                          end
                                        else//if pêtla_rosn¹ca then
                                          begin

                                            ztr_3 := ztr_3 - pêtla_x_skok;

                                            if ztr_3 <= ztr_1 then
                                              pêtla_x_iloœæ := 0;

                                          end;
                                        //---//if pêtla_rosn¹ca then

                                      end;
                                    //---//while pêtla_x_iloœæ = 1 do

                                  end;
                                //---//if ztr_1 <> ztr_3 then

                              end;
                            //---//if pêtla_x_skok <> 0 then

                          end
                        else//if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla_x' ) (...)
                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla' then
                          begin

                            // Powinien to byæ ostatni wêze³.

                            statek_create_funkcje_f.Pêtla_Wzorzec_Oznacz( zt_gl_custom_scene_object );

                            pêtla_x_iloœæ := 0;
                            pêtla_x_skok := 0;

                            pêtla_y_iloœæ := 0;
                            pêtla_y_skok := 0;

                            pêtla_z_iloœæ := 0;
                            pêtla_z_skok := 0;

                            for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do
                              begin

                                if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'pêtla_x_iloœæ' then
                                  pêtla_x_iloœæ := Round(  statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )  )
                                else
                                if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'pêtla_x_skok' then
                                  pêtla_x_skok := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                                else// x
                                if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'pêtla_y_iloœæ' then
                                  pêtla_y_iloœæ := Round(  statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )  )
                                else
                                if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'pêtla_y_skok' then
                                  pêtla_y_skok := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                                else// y
                                if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'pêtla_z_iloœæ' then
                                  pêtla_z_iloœæ := Round(  statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )  )
                                else
                                if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'pêtla_z_skok' then
                                  pêtla_z_skok := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                              end;
                            //---//for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do


                            if    ( pêtla_x_skok <> 0 )
                              and ( pêtla_y_skok <> 0 )
                              and ( pêtla_z_skok <> 0 )
                              and ( pêtla_x_iloœæ > 0 )
                              and ( pêtla_y_iloœæ > 0 )
                              and ( pêtla_z_iloœæ > 0 ) then
                              begin

                                //jjj := zt_gl_custom_scene_object.Behaviours.Count; // Nie ma to sensu ale bez tego zg³asza wycieki pamiêci (TList, TGL Behaviours). //??? // DŸwiêków emitowanych przez zagnie¿d¿one obiekty jakoœ nie s³ychaæ.

                                for pêtla_x_i := 1 to pêtla_x_iloœæ do
                                  for pêtla_y_i := 1 to pêtla_y_iloœæ do
                                    for pêtla_z_i := 1 to pêtla_z_iloœæ do
                                      begin

                                        zt_pêtla_gl_custom_scene_object := nil;


                                        if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                                          zt_pêtla_gl_custom_scene_object := statek_create_funkcje_f.Wygl¹d_Elementy__Utwórz_Element(  Self, VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'typ' ] ), zt_gl_base_scene_object, prymityw_rodzic_gl_dummy_cube_f  )
                                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                                        if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c then
                                          //zt_pêtla_gl_custom_scene_object := statek_create_funkcje_f.Wygl¹d_Elementy__Utwórz_Element( Self, wygl¹d_prymityw_c, zt_gl_base_scene_object );
                                          zt_pêtla_gl_custom_scene_object := statek_create_funkcje_f.Wygl¹d_Elementy__Utwórz_Element( Self, wygl¹d_prymityw_c, zt_gl_base_scene_object, prymityw_rodzic_gl_dummy_cube_f ); // Dla prymitywów umieszczanych w prymitywach.


                                        if zt_pêtla_gl_custom_scene_object <> nil then
                                          begin

                                            Self.wygl¹d_elementy_list.Add( zt_pêtla_gl_custom_scene_object );

                                            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c then
                                              for jjj := 0 to Length( prymitywy_lista_f ) - 1 do
                                                if prymitywy_lista_f[ jjj ].plik_nazwa__sl = VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] ) then
                                                  begin

                                                    Wygl¹d_Elementy_Utwórz( jjj, TGLDummyCube(zt_pêtla_gl_custom_scene_object) );
                                                    Break;

                                                  end;
                                                //---//if prymitywy_lista_f[ jjj ].plik_nazwa__sl = VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] ) then


                                            statek_create_funkcje_f.Wygl¹d_Elementy__Kopiuj_W³aœciwoœci( zt_gl_custom_scene_object, zt_pêtla_gl_custom_scene_object, kolor_losowy__od, kolor_losowy__do );


                                            zt_pêtla_gl_custom_scene_object.Position.X := zt_pêtla_gl_custom_scene_object.Position.X + ( pêtla_x_i - 1 ) * pêtla_x_skok;
                                            zt_pêtla_gl_custom_scene_object.Position.Y := zt_pêtla_gl_custom_scene_object.Position.Y + ( pêtla_y_i - 1 ) * pêtla_y_skok;
                                            zt_pêtla_gl_custom_scene_object.Position.Z := zt_pêtla_gl_custom_scene_object.Position.Z + ( pêtla_z_i - 1 ) * pêtla_z_skok;

                                          end;
                                        //---//if zt_pêtla_gl_custom_scene_object <> nil then

                                      end;
                                    //---//for pêtla_z_i := 1 to pêtla_z_iloœæ do

                              end;
                            //---//if    ( pêtla_x_skok <> 0 ) (...)

                          end
                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla' then
                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'prêdkoœæ_obrotowa_maksymalna' then
                          begin

                            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'œruba' then
                              TŒruba(zt_gl_custom_scene_object).prêdkoœæ_obrotowa_maksymalna := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                          end
                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'prêdkoœæ_obrotowa_maksymalna' then
                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'prêdkoœæ_obrotowa_przyspieszanie' then
                          begin

                            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'œruba' then
                              TŒruba(zt_gl_custom_scene_object).prêdkoœæ_obrotowa_przyspieszanie := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                          end
                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'prêdkoœæ_obrotowa_przyspieszanie' then
                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'skala' then
                          begin

                            if    ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName <> 'artyleria' )
                              and ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName <> 'bomba_g³êbinowa' )
                              and ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName <> 'dzia³o' )
                              and ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName <> 'je¿e_g³êbinowe' )
                              and ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName <> 'torpedy_wyrzutnia' ) then
                              for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do
                                begin

                                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'x' then
                                    zt_gl_custom_scene_object.Scale.X := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                                  else
                                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'y' then
                                    zt_gl_custom_scene_object.Scale.Y := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                                  else
                                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'z' then
                                    zt_gl_custom_scene_object.Scale.Z := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                                end;
                              //---//for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do

                          end
                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'skala' then
                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'skala_proporcjonalna' then
                          begin

                            if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'artyleria' )
                              or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'bomba_g³êbinowa' )
                              or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'dzia³o' )
                              or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'je¿e_g³êbinowe' )
                              or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'torpedy_wyrzutnia' ) then
                              TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).skala__broñ := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                            else
                              zt_gl_custom_scene_object.Scale.Scale(  statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )  );

                          end
                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'skala_proporcjonalna' then
                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'tekstura' then
                          begin

                            if    ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' )
                              and (  not ( zt_gl_custom_scene_object is TGLLines )  ) then
                              if not statek_create_funkcje_f.Wygl¹d_Elementy__Tekstura_Wczytaj_2( zt_gl_custom_scene_object, zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text ) then
                                statek_create_funkcje_f.Log_Wypisz( t³umaczenie_komunikaty_r_f.komunikat__tworzenie_elementów_statku___b³¹d_wczytania_tekstury + ': ' + zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text + '.', not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                          end
                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'tekstura' then
                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'wartoœæ_dodatkowa_01' then
                          begin

                            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                              begin

                                if zt_gl_custom_scene_object is TGLFrustrum then
                                  TGLFrustrum(zt_gl_custom_scene_object).Height := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                                else
                                if zt_gl_custom_scene_object is TGLLines then
                                  TGLLines(zt_gl_custom_scene_object).Nodes[ 1 ].Z := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                                else
                                if zt_gl_custom_scene_object is TGLTorus then
                                  TGLTorus(zt_gl_custom_scene_object).MajorRadius := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                              end;
                            //---//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then

                          end
                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'wartoœæ_dodatkowa_01' then
                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'wartoœæ_dodatkowa_02' then
                          begin

                            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                              begin

                                if zt_gl_custom_scene_object is TGLLines then
                                  TGLLines(zt_gl_custom_scene_object).LineWidth := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                                else
                                if zt_gl_custom_scene_object is TGLTorus then
                                  TGLTorus(zt_gl_custom_scene_object).MinorRadius := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                              end;
                            //---//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then

                          end
                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'wartoœæ_dodatkowa_02' then
                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'wspó³rzêdne' then
                          begin

                            for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do
                              begin

                                if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'x' then
                                  zt_gl_custom_scene_object.Position.X := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                                else
                                if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'y' then
                                  zt_gl_custom_scene_object.Position.Y := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                                else
                                if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'z' then
                                  zt_gl_custom_scene_object.Position.Z := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                              end;
                            //---//for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do

                          end
                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'wspó³rzêdne' then
                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'wychylenie__lewo_prawo' then
                          begin

                            zt_gl_custom_scene_object.RollAngle := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                          end
                        else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'wychylenie__lewo_prawo' then
                        if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'wychylenie__przód_ty³' then
                          begin

                            if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'artyleria' )
                              or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'dzia³o' ) then
                              begin

                                TDzia³o(zt_gl_custom_scene_object).podniesienie_k¹t_zadany := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );
                                TDzia³o(zt_gl_custom_scene_object).podniesienie_k¹t_zadany_bezwzglêdny := TDzia³o(zt_gl_custom_scene_object).podniesienie_k¹t_zadany;

                              end
                            else//if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'artyleria' ) (...)
                              //if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName <> 'torpedy_wyrzutnia' then
                                zt_gl_custom_scene_object.PitchAngle := -statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                          end;
                        //---//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'wychylenie__przód_ty³' then
                        
                      end;
                    //---//for j := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes.Count - 1 do


                    if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'artyleria' )
                      or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'dzia³o' )
                      or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'je¿e_g³êbinowe' )
                      or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'torpedy_wyrzutnia' ) then
                      begin

                        if    ( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_do = TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_od )
                          and ( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_do = broñ_nie_obracana_c ) then
                          begin

                            TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_do := 0;
                            TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_od := 0;
                            TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).czy_broñ_obracana := false;

                          end;
                        //---//if    ( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_do = TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_od ) (...)

                      end;
                    //---//if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'artyleria' ) (...)

                    if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'artyleria' )
                      or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'dzia³o' ) then
                      begin

                        if    ( TDzia³o(zt_gl_custom_scene_object).podniesienie_k¹t_maksymalny = TDzia³o(zt_gl_custom_scene_object).podniesienie_k¹t_minimalny )
                          and ( TDzia³o(zt_gl_custom_scene_object).podniesienie_k¹t_maksymalny = broñ_nie_obracana_c ) then
                          begin

                            TDzia³o(zt_gl_custom_scene_object).podniesienie_k¹t_maksymalny := 0;
                            TDzia³o(zt_gl_custom_scene_object).podniesienie_k¹t_minimalny := 0;
                            TDzia³o(zt_gl_custom_scene_object).czy_lufa_unoszona := false;

                          end;
                        //---//if    ( TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_do = TTorpedy_Wyrzutnia(zt_gl_custom_scene_object).obrót_k¹t_zablokowany_od ) (...)

                      end;
                    //---//if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'artyleria' ) (...)


                    if x_prymityw_najmniejsze_l > zt_gl_custom_scene_object.Position.X then
                      x_prymityw_najmniejsze_l := zt_gl_custom_scene_object.Position.X;

                    if x_prymityw_najwiêksze_l < zt_gl_custom_scene_object.Position.X then
                      x_prymityw_najwiêksze_l := zt_gl_custom_scene_object.Position.X;


                    if Self.y_prymityw_najwiêksze < zt_gl_custom_scene_object.Position.Y then
                      Self.y_prymityw_najwiêksze := zt_gl_custom_scene_object.Position.Y;


                    if z_prymityw_najmniejsze_l > zt_gl_custom_scene_object.Position.Z then
                      z_prymityw_najmniejsze_l := zt_gl_custom_scene_object.Position.Z;

                    if z_prymityw_najwiêksze_l < zt_gl_custom_scene_object.Position.Z then
                      z_prymityw_najwiêksze_l := zt_gl_custom_scene_object.Position.Z;


                    if    (  Wyglad_Elementy.Œwiat³o( zt_gl_custom_scene_object )  )
                      and (  Wyglad_Elementy.Œwiat³o_Dodatkowe( zt_gl_custom_scene_object )  ) then
                      begin

                        Wyglad_Elementy.Œwiat³o( zt_gl_custom_scene_object, false );
                        statek_create_funkcje_f.Log_Wypisz( t³umaczenie_komunikaty_r_f.komunikat__element__statek__nie_mo¿e_jednoczeœnie_byæ__œwiat³em__i__œwiat³em_dodatkowym__zdeaktywowano_cechê__œwiat³o_ );

                      end;
                    //---//if    (  Wyglad_Elementy.Œwiat³o( zt_gl_custom_scene_object )  ) (...)

                    if    (  Wyglad_Elementy.Œwiat³a_Miganie( zt_gl_custom_scene_object )  )
                      and (  not Wyglad_Elementy.Œwiat³o( zt_gl_custom_scene_object )  )
                      and (  not Wyglad_Elementy.Œwiat³o_Dodatkowe( zt_gl_custom_scene_object )  ) then
                      begin

                        Wyglad_Elementy.Œwiat³a_Miganie( zt_gl_custom_scene_object, false );
                        statek_create_funkcje_f.Log_Wypisz( t³umaczenie_komunikaty_r_f.komunikat__element__statek__nie_mo¿e_byæ__œwiat³em_migaj¹cym__nie_bêd¹c_jednoczeœnie_ani__œwiat³em__ani__œwiat³em_dodatkowym__zdeaktywowano_cechê__œwiat³a_miganie_ );

                      end;
                    //---//if    (  Wyglad_Elementy.Œwiat³a_Miganie( zt_gl_custom_scene_object )  ) (...)

                  end;
                //---//if zt_gl_custom_scene_object <> nil then

              end
            else//if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'artyleria' ) (...)
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'falowanie_bok_skrêt_zakres' then
              Self.falowanie_bok_skrêt_zakres := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'falowanie_bok_zakres' then
              Self.falowanie_bok_zakres := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'falowanie_góra_dó³_zakres' then
              Self.falowanie_góra_dó³_zakres := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'falowanie_przód_zakres' then
              Self.falowanie_przód_zakres := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'kamera_na_statek_pozycja' then
              begin

                for j := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes.Count - 1 do
                  begin

                    if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'x' then
                      Self.kamera_na_statek_pozycja.X := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                    else
                    if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'y' then
                      Self.kamera_na_statek_pozycja.Y := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, 0.1, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                    else
                    if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'z' then
                      Self.kamera_na_statek_pozycja.Z := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                  end;
                //---//for j := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes.Count - 1 do

              end
            else//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'kamera_na_statek_pozycja' then
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'kamera_za_statkiem_pozycja' then
              begin

                for j := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes.Count - 1 do
                  begin

                    if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'x' then
                      Self.kamera_za_statkiem_pozycja.X := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                    else
                    if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'y' then
                      Self.kamera_za_statkiem_pozycja.Y := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, 0.1, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                    else
                    if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'z' then
                      Self.kamera_za_statkiem_pozycja.Z := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                  end;
                //---//for j := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes.Count - 1 do

              end
            else//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'kamera_za_statkiem_pozycja' then
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'kamera_odleg³oœæ_maksymalna' then
              Self.kamera_odleg³oœæ_maksymalna := Round(  statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )  )
            else
            if    ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'kolor_definicja' )
              and (   Trim(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] )  ) <> ''   )
              and (   not wygl¹d_kolor_definicja.Definicja_Istnieje(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] )  )   ) then
              begin

                ztr_1 := 0;
                ztr_2 := 0;
                ztr_3 := 0;
                ztr_4 := 0;

                for j := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes.Count - 1 do
                  begin

                    if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'r' then
                      ztr_1 := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                    else
                    if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'g' then
                      ztr_2 := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                    else
                    if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'b' then
                      ztr_3 := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
                    else
                    if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'a' then
                      ztr_4 := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                  end;
                //---//for j := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes.Count - 1 do


                wygl¹d_kolor_definicja.Dodaj_Definicjê(  ztr_1, ztr_2, ztr_3, ztr_4, VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] )  );

              end
            else//if    ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'kolor_definicja' ) (...)
            if    ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'liczba_definicja' )
              and (   Trim(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] )  ) <> ''   )
              and (   not wygl¹d_liczba_definicja.Definicja_Istnieje(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] )  )   ) then
              begin

                ztr_1 := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].Text, null, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

                wygl¹d_liczba_definicja.Dodaj_Definicjê(  ztr_1, VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] )  );

              end
            else//if    ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'liczba_definicja' ) (...)
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'lotniskowiec' then
              Self.czy_lotniskowiec := AnsiLowerCase( zt_xml_document.DocumentElement.ChildNodes[ i ].Text ) = 'tak'
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'lotniskowiec__samolot_przyœpieszanie' then
              Self.lotniskowiec__samolot_przyœpieszanie := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].Text, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'lotniskowiec__zasoby_odnawianie__prze³adowanie_czas_milisekundy' then
              Self.lotniskowiec__zasoby_odnawianie__prze³adowanie_czas_milisekundy := Round(  statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )  )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'luneta_zasiêg' then
              Self.luneta_zasiêg := Round(  statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )  )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'prêdkoœæ_maksymalna' then
              Self.prêdkoœæ_maksymalna := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'prêdkoœæ_ograniczenie' then
              Self.prêdkoœæ_ograniczenie := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'prêdkoœæ_przyspieszanie' then
              Self.prêdkoœæ_przyspieszanie := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie_czas_milisekundy' then
              Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie_czas_milisekundy := Round(  statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )  )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'prêdkoœæ_zwalnianie' then
              Self.prêdkoœæ_zwalnianie := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'punkty_¿ycia_maksymalne' then
              begin

                Self.punkty_¿ycia_maksymalne := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );
                Self.punkty_¿ycia_aktualne := Self.punkty_¿ycia_maksymalne;

              end
            else//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'punkty_¿ycia_maksymalne' then
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'punkty_¿ycia_wskaŸnik_wysokoœæ' then
              Self.punkty_¿ycia_gl_dummy_cube.Position.Y := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'radar_zasiêg' then
              Self.radar_zasiêg := Round(  statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )  )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'radio_zasiêg' then
              Self.radio_zasiêg := Round(  statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )  )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'samolot' then
              Self.czy_samolot := AnsiLowerCase( zt_xml_document.DocumentElement.ChildNodes[ i ].Text ) = 'tak'
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'sonar_zasiêg' then
              Self.sonar_zasiêg := Round(  statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )  )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'skrêt_k¹t_maksymalny' then
              Self.skrêt_k¹t_maksymalny := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'skrêt_prêdkoœæ' then
              Self.skrêt_prêdkoœæ := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'skrêt_szybkoœæ_wychylania_steru' then
              Self.skrêt_szybkoœæ_wychylania_steru := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'skrêt_wspó³czynnik_do_prêdkoœci' then
              Self.skrêt_wspó³czynnik_do_prêdkoœci := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'œlad_torowy__d³ugoœæ' then
              Self.œlad_torowy__d³ugoœæ := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'œlad_torowy__szerokoœæ' then
              Self.œlad_torowy__szerokoœæ := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'zanurzanie' then
              Self.czy_zanurzanie := AnsiLowerCase( zt_xml_document.DocumentElement.ChildNodes[ i ].Text ) = 'tak'
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'zanurzenie_peryskopowe_do' then
              Self.zanurzenie_peryskopowe_do := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'zanurzenie_pu³ap__maksymalne' then
              Self.zanurzenie_pu³ap__maksymalne := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ )
            else
            if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'zanurzenie_pu³ap__szybkoœæ' then
              Self.zanurzenie_pu³ap__szybkoœæ := statek_create_funkcje_f.Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ], wygl¹d_liczba_definicja, 0.0001, not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ );

          end;
        //---//for i := 0 to zt_xml_document.DocumentElement.ChildNodes.Count - 1 do


        FreeAndNil( wygl¹d_kolor_definicja );
        FreeAndNil( wygl¹d_liczba_definicja );

      end;
    //---//if zt_xml_document.Active then
    {$endregion 'Odczyt danych xml.'}


    zt_xml_document.Free();


    Pêtla_Wzorzec_Zwolnij();


    {$region 'Przyk³ad xml.'}
  {
<statek>
    <!-- Wymiar wynosi 1 we wszystkich g³ównych kierunkach. -->

  <nazwa>Nazwa abc</nazwa>
  <opis><![CDATA[Opis abc.#13#10Nowa linia.]]></opis>


  <kolor_definicja nazwa="kolor nazwa abc"><!-- Podkreœlink zamiast spacji - ³atwiej zaznaczaæ 2 x LPM. -->
    <r>0,0</r>
    <g>0,5</g>
    <b>0,0</b>
    <a>0,0</a>
  </kolor_definicja>


  <liczba_definicja nazwa="liczba nazwa abc">123,456</liczba_definicja>
  <!-- <amunicja_iloœæ nazwa="liczba nazwa abc"/> -->


  <falowanie_bok_skrêt_zakres>123,456</falowanie_bok_skrêt_zakres>
  <falowanie_bok_zakres>123,456</falowanie_bok_zakres>
  <falowanie_góra_dó³_zakres>123,456</falowanie_góra_dó³_zakres>
  <falowanie_przód_zakres>123,456</falowanie_przód_zakres>

  <kamera_odleg³oœæ_maksymalna>5</kamera_odleg³oœæ_maksymalna>

  <kamera_na_statek_pozycja>
    <x>0,0</x>
    <y>1,0</y>
    <z>0,0</z>
  </kamera_na_statek_pozycja>

  <kamera_za_statkiem_pozycja>
    <x>0,0</x>
    <y>5,0</y>
    <z>0,0</z>
  </kamera_za_statkiem_pozycja>

  <lotniskowiec>nie</lotniskowiec>
      <!-- nie - nieaktywny, tak - aktywny. -->

  <lotniskowiec__samolot_przyœpieszanie>500,5</lotniskowiec__samolot_przyœpieszanie>
  <lotniskowiec__zasoby_odnawianie__prze³adowanie_czas_milisekundy>30000</lotniskowiec__zasoby_odnawianie__prze³adowanie_czas_milisekundy>
      <!-- 0 - nieaktywne. -->

  <luneta_zasiêg>600</luneta_zasiêg>

  <punkty_¿ycia_maksymalne>10</punkty_¿ycia_maksymalne>
  <punkty_¿ycia_wskaŸnik_wysokoœæ>2,5</punkty_¿ycia_wskaŸnik_wysokoœæ>

  <prêdkoœæ_maksymalna>2,01</prêdkoœæ_maksymalna>
  <prêdkoœæ_ograniczenie>100</prêdkoœæ_ograniczenie>
  <prêdkoœæ_przyspieszanie>1,05</prêdkoœæ_przyspieszanie>
  <prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie_czas_milisekundy>30000</prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie_czas_milisekundy>
      <!-- 0 - nieaktywne. -->
  <prêdkoœæ_zwalnianie>0,3</prêdkoœæ_zwalnianie>

  <radar_zasiêg>100</radar_zasiêg>
  <radio_zasiêg>100</radio_zasiêg>
  <sonar_zasiêg>100</sonar_zasiêg>
      <!-- 0 - nieaktywny. -->

  <samolot>nie</samolot>
      <!-- nie - nieaktywny, tak - aktywny. -->

  <skrêt_k¹t_maksymalny>75</skrêt_k¹t_maksymalny>
  <skrêt_prêdkoœæ>20</skrêt_prêdkoœæ>
  <skrêt_szybkoœæ_wychylania_steru>0,4</skrêt_szybkoœæ_wychylania_steru>
  <skrêt_wspó³czynnik_do_prêdkoœci>25</skrêt_wspó³czynnik_do_prêdkoœci>

  <œlad_torowy__d³ugoœæ>123,456</œlad_torowy__d³ugoœæ>
  <œlad_torowy__szerokoœæ>123,456</œlad_torowy__szerokoœæ>

  <zanurzanie>tak</zanurzanie>
      <!-- nie - nieaktywny. -->
  <zanurzenie_peryskopowe_do>2,15</zanurzenie_peryskopowe_do>
  <zanurzenie_pu³ap__maksymalne>10,5</zanurzenie_pu³ap__maksymalne>
  <zanurzenie_pu³ap__szybkoœæ>2,5</zanurzenie_pu³ap__szybkoœæ>


  <obiekt typ="kula">
    <kolor>
      <r>0,0</r>
      <g>1,0</g>
      <b>0,5</b>
      <a>0,0</a>
    </kolor>
      <!-- Od 0 (czarny) do 1 (bia³y), ujemne dzia³aj¹ jakoœ odwrotnie. -->
      <!-- a - alpha - od 0 (przezroczyste) do 1 (nieprzezroczyste), ujemne zero, ponad jeden jak jeden. -->
      <!-- Wa¿ne aby dla prymitywu linia ustawiæ odpowiednio a (alpha). -->
    <kolor_losowy/>
    <kolor_losowy od="0,1" do="0,8"/>
      <!-- Atrybuty od i do s¹ opcjonalne, mog¹ wystêpowaæ pojedynczo, zawê¿aj¹ zakres losowania wartoœci koloru (domyœlnie od 0 do 1). -->
    <kolor nazwa="kolor nazwa abc"/>
    <kolor_nazwa>clrGreen</kolor_nazwa> <!-- Robi wyciek pamiêci. -->

    <skala>
      <x>123,456</x>
      <y>123,456</y>
      <z>123,456</z>
    </skala>
      <!-- 0 - w danym wymiarze jest jak p³aszczyzna, ujemne dzia³aj¹ jak dodatnie. -->

    <skala_proporcjonalna>2</skala_proporcjonalna>
      <!-- 0, ujemne dzia³aj¹ jak dodatnie. -->

    <wspó³rzêdne>
      <x>123,456</x>
      <y>123,456</y>
      <z>123,456</z>
    </wspó³rzêdne>

    <wychylenie__lewo_prawo>123,456</wychylenie__lewo_prawo>
    <obrót__lewo_prawo>123,456</obrót__lewo_prawo>
      <!-- Dodatnie w lewo (lewa burta). -->
    <wychylenie__przód_ty³>123,456</wychylenie__przód_ty³>
      <!-- -(minus) w dó³, +(plus) w górê. -->
      <!-- 0, ujemne dzia³aj¹, wiêksze wartoœci obni¿ane s¹ poprzez wielokrotnoœæ 180. -->
      <!-- Dla prymitywu linia nic nie robi. -->

    <dziób>Tak</dziób>
    <radar>Tak</radar>

    <dŸwiêk losowoœæ="10" zasiêg_minimalny="12,5">D_1.wav</dŸwiêk>
      <!-- Pliki 'wav'. Domyœlnie œcie¿ka w katalogu 'DŸwiêki l¹dów' w folderze z gr¹. -->
      <!-- Dzia³aj¹ te¿ podkatalogi np. 'K1\D_1.wav'. -->
      <!--  losowoœæ - parametr opcjonalny - zakres losowania wartoœci ile cykli uruchomiania dŸwiêków zostanie opóŸnione w³¹czenie tego dŸwiêku. -->
      <!--    dŸwiêki__losowe_uruchomione__przeliczenie_milisekundy_c = 1000 -->
      <!--  zasiêg_minimalny - parametr opcjonalny - TGLBSoundEmitter.Source.MinDistance -->

    <tekstura>K1\P_1.png</tekstura>
      <!-- Pliki 'png'. Domyœlnie œcie¿ka w katalogu 'Tekstury' w folderze z gr¹. -->      

    <œwiat³a_miganie losowoœæ="10">123, 456, 789</œwiat³a_miganie>
      <!--  Kolejne odstêpy pomiêdzy zgaszeniami i zapaleniami œwiat³a w milisekundach (nieparzyste w kolejnoœci wartoœci oznaczaj¹ ile czasu nie œwieci). -->
      <!--  losowoœæ - parametr opcjonalny - zakres losowania wartoœci ile razy pierwszy krok migniêcia zostanie wyd³u¿ony. -->

    <œwiat³o>Tak</œwiat³o>
    <œwiat³o_dodatkowe>Tak</œwiat³o_dodatkowe>

    <wartoœæ_dodatkowa_01>123,456 abc</wartoœæ_dodatkowa_01>
      <!-- Dla wybranych prymitywów (bry³) dodatkowe parametry, których wartoœæ i typ wartoœci zale¿y od danego prymitywu. -->
        <!-- Dla prymitywu: linia - Nodes[ 1 ].Z - 123,456. -->
        <!-- Dla prymitywu: ostros³up - Height - 123,456 - w zakresie od 0 do 1 - ( 0, 1 >. -->
        <!-- Dla prymitywu: torus - MajorRadius - 123,456. -->

    <wartoœæ_dodatkowa_02>123,456 abc</wartoœæ_dodatkowa_02>
      <!-- Dla wybranych prymitywów (bry³) dodatkowe parametry, których wartoœæ i typ wartoœci zale¿y od danego prymitywu. -->
        <!-- Dla prymitywu: linia - LineWidth - 123,456. -->
        <!-- Dla prymitywu: torus - MinorRadius - 123,456. -->

    <pêtla_x>
      <pêtla_do>123,456</pêtla_do>
      <pêtla_iloœæ>123</pêtla_iloœæ>
      <pêtla_od>123,456</pêtla_od>
      <pêtla_skok>123,456</pêtla_skok>
    </pêtla_x>
      <!-- Powinien to byæ ostatni wêze³; nazwa wêz³a pêtla_x, pêtla_y, pêtla_z oznacza której osi dotyczy; nale¿y podaæ albo pêtla_iloœæ (iloœæ powieleñ danego obiektu) albo ró¿ne od siebie wartoœci pêtla_do i pêtla_od (zakres wspó³rzêdnych, na których powielaæ dany obiekt; mo¿e byæ malej¹cy). -->

    <pêtla>
      <pêtla_x_iloœæ>123</pêtla_x_iloœæ>
      <pêtla_x_skok>123,456</pêtla_x_skok>

      <pêtla_y_iloœæ>123</pêtla_y_iloœæ>
      <pêtla_y_skok>123,456</pêtla_y_skok>

      <pêtla_z_iloœæ>123</pêtla_z_iloœæ>
      <pêtla_z_skok>123,456</pêtla_z_skok>
    </pêtla>
      <!-- Powinien to byæ ostatni wêze³; iloœæ powinna byæ co najmniej jeden i skok niezerowy. -->
  </obiekt>


  <œruba>
    <kolor>
      <r>0,0</r>
      <g>1,0</g>
      <b>0,5</b>
      <a>0,0</a>
    </kolor>
      <!-- Od 0 (czarny) do 1 (bia³y), ujemne dzia³aj¹ jakoœ odwrotnie. -->
      <!-- a - alpha - od 0 (przezroczyste) do 1 (nieprzezroczyste), ujemne zero, ponad jeden jak jeden. -->
      <!-- Wa¿ne aby dla prymitywu linia ustawiæ odpowiednio a (alpha). -->
    <kolor_nazwa>clrGreen</kolor_nazwa> <!-- Robi wyciek pamiêci. -->

    <skala>
      <x>123,456</x>
      <y>123,456</y>
      <z>123,456</z>
    </skala>
      <!-- 0 - w danym wymiarze jest jak p³aszczyzna, ujemne dzia³aj¹ jak dodatnie. -->

    <skala_proporcjonalna>2</skala_proporcjonalna>
      <!-- 0, ujemne dzia³aj¹ jak dodatnie. -->

    <wspó³rzêdne>
      <x>123,456</x>
      <y>123,456</y>
      <z>123,456</z>
    </wspó³rzêdne>

    <wychylenie__lewo_prawo>123,456</wychylenie__lewo_prawo>
    <obrót__lewo_prawo>123,456</obrót__lewo_prawo>
      <!-- Dodatnie w lewo (lewa burta). -->
    <wychylenie__przód_ty³>123,456</wychylenie__przód_ty³>
      <!-- -(minus) w dó³, +(plus) w górê. -->
      <!-- 0, ujemne dzia³aj¹, wiêksze wartoœci obni¿ane s¹ poprzez wielokrotnoœæ 180. -->

    <czy_obrót_lewo>Tak</czy_obrót_lewo>
    <prêdkoœæ_obrotowa_maksymalna>8</prêdkoœæ_obrotowa_maksymalna>
      <!-- [Statek] prêdkoœæ_maksymalna * 100. -->
    <prêdkoœæ_obrotowa_przyspieszanie>0,1</prêdkoœæ_obrotowa_przyspieszanie>
      <!-- [Œruba] prêdkoœæ_obrotowa_maksymalna * 0.2. -->
  </œruba>


  <ster>
    <kolor>
      <r>0,0</r>
      <g>1,0</g>
      <b>0,5</b>
      <a>0,0</a>
    </kolor>
      <!-- Od 0 (czarny) do 1 (bia³y), ujemne dzia³aj¹ jakoœ odwrotnie. -->
      <!-- a - alpha - od 0 (przezroczyste) do 1 (nieprzezroczyste), ujemne zero, ponad jeden jak jeden. -->
      <!-- Wa¿ne aby dla prymitywu linia ustawiæ odpowiednio a (alpha). -->
    <kolor_nazwa>clrGreen</kolor_nazwa> <!-- Robi wyciek pamiêci. -->

    <skala>
      <x>123,456</x>
      <y>123,456</y>
      <z>123,456</z>
    </skala>
      <!-- 0 - w danym wymiarze jest jak p³aszczyzna, ujemne dzia³aj¹ jak dodatnie. -->

    <skala_proporcjonalna>2</skala_proporcjonalna>
      <!-- 0, ujemne dzia³aj¹ jak dodatnie. -->

    <wspó³rzêdne>
      <x>123,456</x>
      <y>123,456</y>
      <z>123,456</z>
    </wspó³rzêdne>

    <wychylenie__lewo_prawo>123,456</wychylenie__lewo_prawo>
    <obrót__lewo_prawo>123,456</obrót__lewo_prawo>
      <!-- Dodatnie w lewo (lewa burta). -->
    <wychylenie__przód_ty³>123,456</wychylenie__przód_ty³>
      <!-- -(minus) w dó³, +(plus) w górê. -->
      <!-- 0, ujemne dzia³aj¹, wiêksze wartoœci obni¿ane s¹ poprzez wielokrotnoœæ 180. -->
  </ster>

  <ster_g³êbokoœci>
    <kolor>
      <r>0,0</r>
      <g>1,0</g>
      <b>0,5</b>
      <a>0,0</a>
    </kolor>
      <!-- Od 0 (czarny) do 1 (bia³y), ujemne dzia³aj¹ jakoœ odwrotnie. -->
      <!-- a - alpha - od 0 (przezroczyste) do 1 (nieprzezroczyste), ujemne zero, ponad jeden jak jeden. -->
      <!-- Wa¿ne aby dla prymitywu linia ustawiæ odpowiednio a (alpha). -->
    <kolor_nazwa>clrGreen</kolor_nazwa> <!-- Robi wyciek pamiêci. -->

    <skala>
      <x>123,456</x>
      <y>123,456</y>
      <z>123,456</z>
    </skala>
      <!-- 0 - w danym wymiarze jest jak p³aszczyzna, ujemne dzia³aj¹ jak dodatnie. -->

    <skala_proporcjonalna>2</skala_proporcjonalna>
      <!-- 0, ujemne dzia³aj¹ jak dodatnie. -->

    <wspó³rzêdne>
      <x>123,456</x>
      <y>123,456</y>
      <z>123,456</z>
    </wspó³rzêdne>

    <wychylenie__lewo_prawo>123,456</wychylenie__lewo_prawo>
    <obrót__lewo_prawo>123,456</obrót__lewo_prawo>
      <!-- Dodatnie w lewo (lewa burta). -->
    <wychylenie__przód_ty³>123,456</wychylenie__przód_ty³>
      <!-- -(minus) w dó³, +(plus) w górê. -->
      <!-- 0, ujemne dzia³aj¹, wiêksze wartoœci obni¿ane s¹ poprzez wielokrotnoœæ 180. -->
  </ster_g³êbokoœci>


  <torpedy_wyrzutnia lufy_iloœæ="3"><!-- Te¿ bomba_g³êbinowa, je¿e_g³êbinowe. -->
    <kolor>
      <r>0,0</r>
      <g>1,0</g>
      <b>0,5</b>
      <a>0,0</a>
    </kolor>

    <skala_proporcjonalna>1</skala_proporcjonalna>

    <wspó³rzêdne>
      <x>-0,5</x>
      <y>0,0</y>
      <z>-2</z>
    </wspó³rzêdne>

    <obrót__lewo_prawo>123,456</obrót__lewo_prawo>
      <!-- Dodatnie w lewo (lewa burta). -->
      
    <obrót_k¹t_zablokowany_do>1,1</obrót_k¹t_zablokowany_do>
    <obrót_k¹t_zablokowany_od>2,2</obrót_k¹t_zablokowany_od>
      <!-- je¿eli obrót_k¹t_zablokowany_do = obrót_k¹t_zablokowany_od = 9999 oznacza to, ¿e broñ siê nie obraca. -->

    <obrót_k¹t_zablokowany_strza³_do>1,1</obrót_k¹t_zablokowany_strza³_do>
    <obrót_k¹t_zablokowany_strza³_od>2,2</obrót_k¹t_zablokowany_strza³_od>

    <amunicja_iloœæ>12</amunicja_iloœæ>
    <amunicja_uzbrajanie_odleg³oœæ>123,456</amunicja_uzbrajanie_odleg³oœæ>
    <obra¿enia_zadawane>11,3</obra¿enia_zadawane>
    <obra¿enia_zasiêg>0,01</obra¿enia_zasiêg>
      <!-- -1 - ustawi domyœln¹ wartoœæ. -->
    <obrót_szybkoœæ>55,0</obrót_szybkoœæ>
    <prze³adowanie_czas_milisekundy>3</prze³adowanie_czas_milisekundy>
    <strza³_od_blokada_milisekundy>100</strza³_od_blokada_milisekundy>
    <zasiêg>10,5</zasiêg>
  </torpedy_wyrzutnia>


  <dzia³o lufy_iloœæ="2">
    <kolor>
      <r>0,0</r>
      <g>1,0</g>
      <b>0,5</b>
      <a>0,0</a>
    </kolor>

    <skala_proporcjonalna>0,5</skala_proporcjonalna>

    <wspó³rzêdne>
      <x>-0,5</x>
      <y>0,0</y>
      <z>-2</z>
    </wspó³rzêdne>

    <obrót__lewo_prawo>123,456</obrót__lewo_prawo>
      <!-- Dodatnie w lewo (lewa burta). -->
    <wychylenie__przód_ty³>123,456</wychylenie__przód_ty³>
      <!-- -(minus) w dó³, +(plus) w górê. -->
        
    <obrót_k¹t_zablokowany_do>1,1</obrót_k¹t_zablokowany_do>
    <obrót_k¹t_zablokowany_od>2,2</obrót_k¹t_zablokowany_od>
      <!-- je¿eli obrót_k¹t_zablokowany_do = obrót_k¹t_zablokowany_od = 9999 oznacza to, ¿e broñ siê nie obraca. -->

    <obrót_k¹t_zablokowany_strza³_do>1,1</obrót_k¹t_zablokowany_strza³_do>
    <obrót_k¹t_zablokowany_strza³_od>2,2</obrót_k¹t_zablokowany_strza³_od>
    <obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny>2,2</obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny>

    <amunicja_iloœæ>12</amunicja_iloœæ>
    <amunicja_uzbrajanie_odleg³oœæ>123,456</amunicja_uzbrajanie_odleg³oœæ>
    <obra¿enia_zadawane>11,3</obra¿enia_zadawane>
    <obra¿enia_zasiêg>0,01</obra¿enia_zasiêg>
      <!-- -1 - ustawi domyœln¹ wartoœæ. -->
    <obrót_szybkoœæ>55,0</obrót_szybkoœæ>
    <prze³adowanie_czas_milisekundy>3</prze³adowanie_czas_milisekundy>
    <strza³_od_blokada_milisekundy>100</strza³_od_blokada_milisekundy>
    <zasiêg>10,5</zasiêg>

    <podniesienie_k¹t_maksymalny>45,5</podniesienie_k¹t_maksymalny>
      <!-- -(minus) w dó³, +(plus) w górê. -->
    <podniesienie_k¹t_minimalny>5,5</podniesienie_k¹t_minimalny>
      <!-- -(minus) w dó³, +(plus) w górê. -->
      <!-- je¿eli podniesienie_k¹t_maksymalny = podniesienie_k¹t_minimalny = 9999 oznacza to, ¿e lufy siê nie unosz¹. -->
    <podniesienie_k¹t_pocz¹tkowy>5,1</podniesienie_k¹t_pocz¹tkowy>
      <!-- -(minus) w dó³, +(plus) w górê. -->
    <podniesienie_szybkoœæ>55,0</podniesienie_szybkoœæ>
  </dzia³o>


  <artyleria lufy_iloœæ="1">
    <kolor>
      <r>0,0</r>
      <g>1,0</g>
      <b>0,5</b>
      <a>0,0</a>
    </kolor>

    <skala_proporcjonalna>2,5</skala_proporcjonalna>

    <wspó³rzêdne>
      <x>-0,5</x>
      <y>0,0</y>
      <z>-2,0</z>
    </wspó³rzêdne>

    <obrót__lewo_prawo>123,456</obrót__lewo_prawo>
      <!-- Dodatnie w lewo (lewa burta). -->
    <wychylenie__przód_ty³>123,456</wychylenie__przód_ty³>
      <!-- -(minus) w dó³, +(plus) w górê. -->
        
    <obrót_k¹t_zablokowany_do>1,1</obrót_k¹t_zablokowany_do>
    <obrót_k¹t_zablokowany_od>2,2</obrót_k¹t_zablokowany_od>
      <!-- je¿eli obrót_k¹t_zablokowany_do = obrót_k¹t_zablokowany_od = 9999 oznacza to, ¿e broñ siê nie obraca. -->

    <obrót_k¹t_zablokowany_strza³_do>1,1</obrót_k¹t_zablokowany_strza³_do>
    <obrót_k¹t_zablokowany_strza³_od>2,2</obrót_k¹t_zablokowany_strza³_od>
    <obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny>2,2</obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny>

    <amunicja_iloœæ>12</amunicja_iloœæ>
    <amunicja_uzbrajanie_odleg³oœæ>123,456</amunicja_uzbrajanie_odleg³oœæ>
    <obra¿enia_zadawane>11,3</obra¿enia_zadawane>
    <obra¿enia_zasiêg>0,01</obra¿enia_zasiêg>
      <!-- -1 - ustawi domyœln¹ wartoœæ. -->
    <obrót_szybkoœæ>55,0</obrót_szybkoœæ>
    <prze³adowanie_czas_milisekundy>3</prze³adowanie_czas_milisekundy>
    <strza³_od_blokada_milisekundy>100</strza³_od_blokada_milisekundy>
    <zasiêg>10,5</zasiêg>

    <podniesienie_k¹t_maksymalny>60,5</podniesienie_k¹t_maksymalny><!--- Dla k¹ta innego ni¿ 60 maksymalny zasiêg pocisk osi¹ga na dnie -->
      <!-- -(minus) w dó³, +(plus) w górê. -->
    <podniesienie_k¹t_minimalny>5,5</podniesienie_k¹t_minimalny>
      <!-- -(minus) w dó³, +(plus) w górê. -->
      <!-- je¿eli podniesienie_k¹t_maksymalny = podniesienie_k¹t_minimalny = 9999 oznacza to, ¿e lufy siê nie unosz¹. -->
    <podniesienie_k¹t_pocz¹tkowy>5,1</podniesienie_k¹t_pocz¹tkowy>
      <!-- -(minus) w dó³, +(plus) w górê. -->
    <podniesienie_szybkoœæ>55,0</podniesienie_szybkoœæ>

    <zasiêg_od_parabola>10,5</zasiêg_od_parabola>
  </artyleria>


  <je¿e_g³êbinowe lufy_iloœæ="24">
    <kolor>
      <r>0,0</r>
      <g>0,0</g>
      <b>0,5</b>
      <a>0,0</a>
    </kolor>

    <skala_proporcjonalna>1</skala_proporcjonalna>

    <wspó³rzêdne>
      <x>1,5</x>
      <y>0,65</y>
      <z>0,5</z>
    </wspó³rzêdne>

    <obrót__lewo_prawo>0</obrót__lewo_prawo>

    <obrót_k¹t_zablokowany_do>120</obrót_k¹t_zablokowany_do>
    <obrót_k¹t_zablokowany_od>-120</obrót_k¹t_zablokowany_od>
      <!-- je¿eli obrót_k¹t_zablokowany_do = obrót_k¹t_zablokowany_od = 9999 oznacza to, ¿e broñ siê nie obraca. -->

    <amunicja_iloœæ>100</amunicja_iloœæ>
    <amunicja_uzbrajanie_odleg³oœæ>6</amunicja_uzbrajanie_odleg³oœæ>
    <obra¿enia_zadawane>11,3</obra¿enia_zadawane>
    <obra¿enia_zasiêg>0,01</obra¿enia_zasiêg>
      <!-- -1 - ustawi domyœln¹ wartoœæ. -->
    <obrót_szybkoœæ>25,0</obrót_szybkoœæ>
    <prze³adowanie_czas_milisekundy>600</prze³adowanie_czas_milisekundy>
    <strza³_od_blokada_milisekundy>100</strza³_od_blokada_milisekundy>
    <zasiêg>10,5</zasiêg>
  </je¿e_g³êbinowe>


  <bomba_g³êbinowa lufy_iloœæ="1">
    <kolor nazwa="kolor nazwa abc"/>

    <skala_proporcjonalna>1</skala_proporcjonalna>

    <wspó³rzêdne>
      <x>0</x>
      <y>0,2</y>
      <z>-0,75</z>
    </wspó³rzêdne>

    <obrót__lewo_prawo>180</obrót__lewo_prawo>

    <amunicja_iloœæ>12</amunicja_iloœæ>
    <amunicja_uzbrajanie_odleg³oœæ>6</amunicja_uzbrajanie_odleg³oœæ>
    <obra¿enia_zadawane>11,3</obra¿enia_zadawane>
    <obra¿enia_zasiêg>0,01</obra¿enia_zasiêg>
      <!-- -1 - ustawi domyœln¹ wartoœæ. -->
    <prze³adowanie_czas_milisekundy>600</prze³adowanie_czas_milisekundy>
    <strza³_od_blokada_milisekundy>100</strza³_od_blokada_milisekundy>
    <zasiêg>10,5</zasiêg>
  </bomba_g³êbinowa>
</statek>
  }
    {$endregion 'Przyk³ad xml.'}

  end;//---//Funkcja Wygl¹d_Elementy_Utwórz() w Konstruktor klasy TStatek.

var
  i,
  j
    : integer;
begin//Konstruktor klasy TStatek.

  inherited Create( AOwner );

  //Self.ShowAxes := true;
  //Self.VisibleAtRunTime := true;

  Self.id_gracz := id_gracz_f;
  Self.id_grupa := 0;
  Self.id_statek := id_statek_f;
  Self.id_statek_schemat := -1;
  Self.id_statek_schemat__samolot_zmieñ_na := -1;
  Self.id_statek__lotniskowiec_dla_samolotu__samolot_zmieñ_na := -99;
  Self.id_statek__lotniskowiec__ma_samolot_na_pok³adzie := -99;
  Self.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := -99;

  Self.cel_wspó³rzêdne_bezwzglêdne_affine_vektor := GLS.VectorGeometry.AffineVectorMake( 0, 5, -15 );

  Self.amunicja_zanurzenie_g³êbokoœæ_zadana := -0.3;
  //Self.celowanie_precyzja__falowanie_niwelowanie := 2;
  Self.celowanie_precyzja__obrót := 0;
  Self.celowanie_precyzja__podniesienie := 0;
  Self.dŸwiêk_silnika_aktualny := 0;
  Self.dŸwiêki__komunikat__absolute_position_y := 0;
  Self.dŸwiêki__komunikat__uszkodzone := false;

  Self.falowanie_bok_skrêt := 0;
  Self.falowanie_bok_skrêt_zakres := 10;
  Self.falowanie_bok_zakres := 2;
  Self.falowanie_bok_wychylenie_aktualne := 0;

  Self.falowanie_góra_dó³_zakres := 0.025;
  Self.falowanie_góra_dó³_wysokoœæ_aktualna := 0;

  Self.falowanie_przód_pu³ap := 0;
  Self.falowanie_przód_ruch := 0;
  Self.falowanie_przód_zakres := 1;
  Self.falowanie_przód_wychylenie_aktualne := 0;

  Self.grawitacja_opadanie_obra¿enia_naliczono := false;
  Self.grawitacja_opadanie_szybkoœæ_aktualna := 0;

  Self.Kotwica_Ruch_Ustaw( kre_W_Górê );

  Self.lotniskowiec__gotowy_na_przyjêcie_samolotu := false;
  Self.lotniskowiec__samolot_przyjmij_od³¹cz__czas_sekundy_i := 0;
  Self.lotniskowiec__samolot_przyœpieszanie := 500;
  Self.lotniskowiec__zasoby_odnawianie__czas_sekundy_i := 0;
  Self.lotniskowiec__zasoby_odnawianie__prze³adowanie_czas_milisekundy := 30000;
  Self.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent := -2;
  Self.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__dŸwiêki__kopia := 0;

  Self.falowanie_opóŸnienie := Random( 3000 );

  Self.wiatr__kolizja := false;

  Self.wygl¹d_elementy_list := TList.Create();
  Self.kolizja_oznaczenie_string_list := TStringList.Create();

  Self.patrol_losowy__licznik := Random( 2 );
  Self.patrol_po_okrêgu__k¹t_aktualny := broñ_nie_obracana_c; // Oznacza, ¿e wartoœæ nie zosta³a jeszcze wyznaczona.

  Self.punkty_¿ycia_maksymalne := 10;
  Self.punkty_¿ycia_aktualne := Self.punkty_¿ycia_maksymalne;
  Self.punkty_¿ycia_procent_zosta³o := 100;
  Self.punkty_¿ycia_wskaŸnik__zanurzenie_peryskopowe__przekroczone__przeliczenie_poprzednie := not Self.Zanurzenie_Peryskopowe__Przekroczone(); // Aby siê przeliczy³o pierwszy raz.
  Self.punkty_¿ycia__w_zanurzeniu_przeliczaj__czas_przeliczenia_ostatniego_sekundy_i := Czas_Teraz_W_Sekundach();

  Self.prêdkoœæ_aktualna := 0;
  Self.prêdkoœæ_maksymalna := 2;
  Self.prêdkoœæ_obrotu_aktualna := 0;
  Self.prêdkoœæ_ograniczenie := 100; // 100 2550
  Self.prêdkoœæ_aktualna_procent__bezwzglêdny := 0;
  Self.prêdkoœæ_aktualna_procent__wzglêdny := 0;
  Self.prêdkoœæ_przyspieszanie := 1.05; // Dobraæ tak aby ruch œrub odpowiada³ przyœpieszeniu statku (statek zmienia kierunek ruchu, a œruby jeszcze nie wyhamowa³y).
  Self.prêdkoœæ_przyspieszanie__kolizja_spowolnienie := false;
  Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__czas_sekundy_i := 0;
  Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie_czas_milisekundy := 30000;
  Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__k¹t := 0;
  Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent := -1;
  Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__dŸwiêki__kopia := 0;
  Self.prêdkoœæ_zadana_procent := 0;
  Self.prêdkoœæ_zwalnianie := Self.prêdkoœæ_przyspieszanie * 0.3;
  Self.prêdkoœæ__kolizja_zwalnianie := -1;

  Self.si_decyduje := false;

  Self.skrêt_k¹t_maksymalny := 75;
  Self.skrêt_aktualny_procent := 0;
  Self.skrêt_szybkoœæ_wychylania_steru := 0.4;
  Self.skrêt_prêdkoœæ := 20;
  Self.skrêt_wspó³czynnik_do_prêdkoœci := 25;
  Self.skrêt_zadany_procent := 0;

  Self.œlad_torowy__d³ugoœæ := 1;
  Self.œlad_torowy__szerokoœæ := 1;

  Self.œwiat³a_w³¹czone := false;
  Self.œwiat³a_dodatkowe_w³¹czone := false;

  Self.schemat_samolot_zmiana_czas_sekundy_i := 0;
  Self.statek__utworzenie_czas_i := Czas_Teraz_W_Sekundach();
  Self.statek__czas_do_zatoniêcia_s := '';
  Self.toniêcie__czas_sekundy_i := 0;
  Self.toniêcie__obrót__lewo_prawo := 0;
  Self.toniêcie__obrót__przód_ty³ := 0;
  Self.toniêcie__prêdkoœæ_w_dó³ := 0;

  Self.kamera_odleg³oœæ_maksymalna := 5;

  Self.luneta_zasiêg := 600;

  Self.radar_zasiêg := 100;
  Self.radio_zasiêg := 100;
  Self.samolot__kolizja_bufor := 0;
  Self.samolot__l¹dowanie__podchodzenie_krok := 0;
  Self.sonar_zasiêg := 0;

  x_prymityw_najmniejsze_l := 0;
  x_prymityw_najwiêksze_l := 0;
  z_prymityw_najmniejsze_l := 0;
  z_prymityw_najwiêksze_l := 0;

  Self.x_prymityw_odleg³oœæ := 1;
  Self.y_prymityw_najwiêksze := 1;
  Self.z_prymityw_odleg³oœæ := 1;

  Self.zanurzenie_peryskopowe_do := 2;
  Self.zanurzenie_pu³ap__aktualne := 0;
  Self.zanurzenie_pu³ap__aktualne_procent := 0;
  Self.zanurzenie_pu³ap__kolizja_zwalnianie := -1;
  Self.zanurzenie_pu³ap__maksymalne := 0;
  Self.zanurzenie_pu³ap__szybkoœæ := 1; // Aby statki, które siê nie zanurzaj¹ te¿ wyp³ywa³y na powierzchniê po upadku.
  Self.zanurzenie_pu³ap__szybkoœæ_aktualna := 0;
  Self.zanurzenie_pu³ap__zadane_procent := 0;

  Self.czy_lotniskowiec := false;
  Self.czy_zanurzanie := false;
  Self.czy_samolot := false;
  Self.czy_samolot__kolizja := false;
  Self.czy_samolot__kolizja__kotwica := false;
  Self.czy_samolot__na_lotniskowcu := false;
  Self.zanurzenie_zadane_przekraczaj_100_procent := false;

  Self.radar_id_l¹dy_w_zasiêgu := '-99, -99';
  Self.radar_id_statki_w_zasiêgu := '-99, -99';
  Self.radio_id_l¹dy_w_zasiêgu := '-99, -99';
  Self.radio_id_statki_w_zasiêgu := '-99, -99';
  Self.radio_³¹cznoœæ_id_statki_w_zasiêgu := '-99, -99';
  Self.sonar_id_statki_w_zasiêgu := '-99, -99';

  //Self.wygl¹d_elementy_nazwa_numer := 0;

  Self.artyleria_ostatni_strza³_indeks := -1;
  Self.bomba_g³êbinowa_ostatni_strza³_indeks := -1;
  Self.dzia³o_ostatni_strza³_indeks := -1;
  Self.je¿e_g³êbinowe_ostatni_strza³_indeks := -1;
  Self.torpedy_wyrzutnia_ostatni_strza³_indeks := -1;

  Self.broñ_indeks_zmieniaj := true;
  Self.celowanie__bronie_osobno := true;
  Self.celownicze_linie_unoœ := true;
  Self.celownik_linia_bez_falowania__pozycja_y_dostosuj__kamera_pod_wod¹ := false;
  Self.obrót_k¹t_zablokowany_strza³_wskaŸnik_widoczne := true;
  Self.obrót_k¹t_zablokowany_wskaŸnik_widoczne := true;
  Self.obracaj_dzia³a := true;
  Self.obracaj_dzia³a__na_k¹t_wyznaczony := false;
  Self.podnoœ_lufy := true;
  Self.podnoœ_lufy__na_k¹t_wyznaczony := false;
  Self.czy_schemat_samolot_zmiana := false;
  Self.czy_usun¹æ_statek := false;

  Self.celowanie__tryb := ct_Punkt; // Namierzanie zbie¿ne do punktu celowania.

  Self.sos__czas_utworzenia_ostatniego_sekundy_i := Czas_Teraz_W_Sekundach();
  Self.œlad_torowy__czas_utworzenia_ostatniego_milisekundy_i := Czas_Teraz_W_Milisekundach() - œlad_torowy__dodanie_kolejnego__czas_milisekundy_c;
  Self.uszkodzone_czas_sekundy_i__kotwica := 0;
  Self.uszkodzone_czas_sekundy_i__radar := 0;
  Self.uszkodzone_czas_sekundy_i__radio := 0;
  Self.uszkodzone_czas_sekundy_i__sonar := 0;
  Self.uszkodzone_czas_sekundy_i__ster := 0;
  Self.uszkodzone_czas_sekundy_i__ster_g³êbokoœci := 0;
  Self.uszkodzone_czas_sekundy_i__œruba := 0;
  Self.zak³ócanie__czas_próba_ostatnia_sekundy_i := Czas_Teraz_W_Sekundach();

  GLS.VectorGeometry.MakeVector( Self.œlad_torowy__pozycja_ostatniego, 0, 0, 0 );

  Self.kamera_na_statek_pozycja.X := 0;
  Self.kamera_na_statek_pozycja.Y := 1;
  Self.kamera_na_statek_pozycja.Z := 0;

  Self.kamera_za_statkiem_pozycja.X := 0;
  Self.kamera_za_statkiem_pozycja.Y := 5;
  Self.kamera_za_statkiem_pozycja.Z := 0;

  Self.punkty_¿ycia_wskaŸnik__efekty_tryb := p¿wet_Podlega_Efektom_Sceny;
  Self.statki_rozstawianie_status := srs_Brak;

  Self.gra_obiekty_kontener_st := AOwner; //Gra_Obiekty_GLDummyCube
  Self.Parent := AOwner; //Gra_Obiekty_GLDummyCube
  //Self.MoveUp(); //???
  //Self.TurnAngle := 90;
  Self.Direction.SetVector( 0, 0, -1 );
  //Self.VisibleAtRunTime := true;
  //Self.ShowAxes := true;


  Self.grawitacja_opadanie_obra¿enia_wylicz := statek_create_funkcje_f.Grawitacja_Opadanie_Obra¿enia_Wylicz;
  Self.lotniskowiec__samoloty_wszystkie__punkty_¿ycia_zero := statek_create_funkcje_f.Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero;


  Self.toniêcie_gl_dummy_cube := TGLDummyCube.Create( Self );
  Self.toniêcie_gl_dummy_cube.Parent := Self;
  //Self.toniêcie_gl_dummy_cube.Pickable := false; // Nie wykrywa w trybie projektowym klikniêcia w statek.
  Self.toniêcie_gl_dummy_cube.EdgeColor.Color := GLS.Color.clrBlack;
  //Self.toniêcie_gl_dummy_cube.ShowAxes := true;
  //Self.toniêcie_gl_dummy_cube.VisibleAtRunTime := true;


  Self.falowanie_gl_dummy_cube := TGLDummyCube.Create( Self );
  Self.falowanie_gl_dummy_cube.Parent := Self.toniêcie_gl_dummy_cube; //Self
  //Self.falowanie_gl_dummy_cube.Pickable := false; // Nie wykrywa w trybie projektowym klikniêcia w statek.
  Self.falowanie_gl_dummy_cube.EdgeColor.Color := GLS.Color.clrBlue;
  //Self.falowanie_gl_dummy_cube.ShowAxes := true;
  //Self.falowanie_gl_dummy_cube.VisibleAtRunTime := true;


  //zt_gl_base_scene_object := Self;
  zt_gl_base_scene_object := Self.falowanie_gl_dummy_cube; //???


  Self.lotniskowiec__³apacz_samolotów_dummy := nil;

  Self.efekt__element_uszkodzenie_gl_dummy_cube_st := TGLDummyCube.Create( Self );
  Self.efekt__element_uszkodzenie_gl_dummy_cube_st.Parent := zt_gl_base_scene_object;
  Self.efekt__element_uszkodzenie_gl_dummy_cube_st.Pickable := false;
  Self.efekt__element_uszkodzenie_gl_dummy_cube_st.Visible := false;
  //Self.efekt__element_uszkodzenie_gl_dummy_cube_st.VisibleAtRunTime := true;

  Self.punkty_¿ycia_gl_dummy_cube := TGLDummyCube.Create( Self );
  Self.punkty_¿ycia_gl_dummy_cube.Parent := Self;
  Self.punkty_¿ycia_gl_dummy_cube.Pickable := false;
  Self.punkty_¿ycia_gl_dummy_cube.Position.Y := 2;

  Self.punkty_¿ycia_podniesienie_gl_dummy_cube := TGLDummyCube.Create( Self );
  Self.punkty_¿ycia_podniesienie_gl_dummy_cube.Parent := punkty_¿ycia_gl_dummy_cube;
  Self.punkty_¿ycia_podniesienie_gl_dummy_cube.Pickable := false;

  Self.punkty_¿ycia__wskaŸnik := TGLCylinder.Create( Self );
  Self.punkty_¿ycia__wskaŸnik.Parent := Self.punkty_¿ycia_podniesienie_gl_dummy_cube; // punkty_¿ycia_gl_dummy_cube
  Self.punkty_¿ycia__wskaŸnik.Pickable := false;
  Self.punkty_¿ycia__wskaŸnik.RollAngle := 90;
  Self.punkty_¿ycia__wskaŸnik.BottomRadius := 0.3;
  Self.punkty_¿ycia__wskaŸnik.TopRadius := Self.punkty_¿ycia__wskaŸnik.BottomRadius;
  Self.punkty_¿ycia__wskaŸnik.Height := 10;
  //Self.punkty_¿ycia__wskaŸnik.Material.MaterialOptions := [ GLS.Material.TGLMaterialOption.moNoLighting ];
  Self.punkty_¿ycia__wskaŸnik.Material.FrontProperties.Ambient.Color := GLS.Color.clrTransparent;
  Self.punkty_¿ycia__wskaŸnik.Material.FrontProperties.Diffuse.Color := GLS.Color.clrGreen;
  Self.punkty_¿ycia__wskaŸnik.Material.FrontProperties.Emission.Color := GLS.Color.clrTransparent;
  Self.punkty_¿ycia__wskaŸnik.Scale.Z := 0.075; // 0.075 0.3
  Self.punkty_¿ycia__wskaŸnik__kolor := Self.punkty_¿ycia__wskaŸnik.Material.FrontProperties.Diffuse.Color;
  Self.punkty_¿ycia__wskaŸnik__wielkoœæ_z_pe³nym_¿yciem := Self.punkty_¿ycia__wskaŸnik.Height; // Wielkoœæ z pe³nym ¿yciem.

  Self.punkty_¿ycia__ramka := TGLCube.Create( Self );
  Self.punkty_¿ycia__ramka.Parent := Self.punkty_¿ycia_podniesienie_gl_dummy_cube; // punkty_¿ycia_gl_dummy_cube
  Self.punkty_¿ycia__ramka.Pickable := false;
  Self.punkty_¿ycia__ramka.CubeHeight := Self.punkty_¿ycia__wskaŸnik.TopRadius * 2 + Self.punkty_¿ycia__wskaŸnik.TopRadius * 0.4; // Wysokoœæ. Promieñ * 2 + œrednica + 2 * 10% z ka¿dej strony (promieñ * 40%).
  Self.punkty_¿ycia__ramka.CubeWidth := Self.punkty_¿ycia__wskaŸnik.Height + Self.punkty_¿ycia__wskaŸnik.TopRadius * 2 * 0.4; // Szerokoœæ. Taki sam margines jak wy¿ej.
  Self.punkty_¿ycia__ramka.CubeDepth := 0.01; // Gruboœæ. // 0.01 0.03
  //Self.punkty_¿ycia__ramka.Material.MaterialOptions := [ GLS.Material.TGLMaterialOption.moNoLighting ];
  Self.punkty_¿ycia__ramka.Material.FrontProperties.Diffuse.Color := GLS.Color.clrBlack;

  Self.punkty_¿ycia__napis := GLS.SpaceText.TGLSpaceText.Create( Self );
  Self.punkty_¿ycia__napis.Parent := Self.punkty_¿ycia_podniesienie_gl_dummy_cube; // punkty_¿ycia_gl_dummy_cube
  Self.punkty_¿ycia__napis.Pickable := false;
  Self.punkty_¿ycia__napis.TurnAngle := 180;
  Self.punkty_¿ycia__napis.Position.X := Self.punkty_¿ycia__ramka.CubeWidth * 0.475;
  Self.punkty_¿ycia__napis.Position.Y := -Self.punkty_¿ycia__ramka.CubeHeight * 0.2;
  Self.punkty_¿ycia__napis.Position.Z := -Self.punkty_¿ycia__ramka.CubeDepth * 2.5;
  //Self.punkty_¿ycia__napis.Scale.Scale( 0.25 );
  Self.punkty_¿ycia__napis.TextHeight := 0.4;
  //Self.punkty_¿ycia__napis.Material.MaterialOptions := [ GLS.Material.TGLMaterialOption.moNoLighting ];
  Self.punkty_¿ycia__napis.Text := 'p¿';

  Self.gracz__nazwa := GLS.SpaceText.TGLSpaceText.Create( Self );
  Self.gracz__nazwa.Parent := Self.punkty_¿ycia_podniesienie_gl_dummy_cube;
  Self.gracz__nazwa.Pickable := false;
  Self.gracz__nazwa.TurnAngle := 180;
  Self.gracz__nazwa.Position.X := Self.punkty_¿ycia__ramka.CubeWidth * 0.475;
  Self.gracz__nazwa.Position.Y := -Self.punkty_¿ycia__ramka.CubeHeight * 0.2 + Self.punkty_¿ycia__ramka.CubeHeight;
  Self.gracz__nazwa.Position.Z := -Self.punkty_¿ycia__ramka.CubeDepth * 2;
  Self.gracz__nazwa.TextHeight := 0.4;
  //Self.gracz__nazwa.Material.MaterialOptions := [ GLS.Material.TGLMaterialOption.moNoLighting ];
  Self.gracz__nazwa.Text := 'gn';
  Self.gracz__nazwa.Font.Style := [ fsBold ];
  //Self.gracz__nazwa.Extrusion := Self.gracz__nazwa.TextHeight;
  Self.gracz__nazwa.Material.BlendingMode := bmAdditive;


  Self.celownicza_linia := TGLLines.Create( Self );
  Self.celownicza_linia.Parent := Self;
  Self.celownicza_linia.Visible := false;
  //Self.celownicza_linia.Position.SetPoint( 0, 0, 0 );
  Self.celownicza_linia.Up.SetVector( 0, 1, 0 );
  Self.celownicza_linia.Direction.SetVector( 0, 0, -1 );
  Self.celownicza_linia.AddNode( 0, 1, 0 );
  Self.celownicza_linia.AddNode( 0, 0, -1 );
  //Self.celownicza_linia.Position.SetPoint( Self.celownicza_linia.Nodes[ 0 ].AsVector );
  Self.celownicza_linia.LineColor.Color := clrYellow;


  if Trim( wygl¹d_definicja_f ) <> '' then
    begin

      Self.kad³ub__brak_definicji := nil;
      Self.dziób__brak_definicji := nil;

      SetLength( Self.artyleria_t, 0 ); // Iloœæ artylerii.
      SetLength( Self.bomba_g³êbinowa_t, 0 ); // Iloœæ wyrzutni bomb g³êbinowych.
      SetLength( Self.dzia³a_t, 0 ); // Iloœæ dzia³.
      SetLength( Self.je¿e_g³êbinowe_t, 0 ); // Iloœæ wyrzutni je¿y g³êbinowych.
      SetLength( Self.kotwica_t, 0 ); // Iloœæ kotwic.
      SetLength( Self.torpedy_wyrzutnie_t, 0 ); // Iloœæ wyrzutni torped.
      SetLength( Self.œruby_t, 0 ); // Iloœæ œrub.
      SetLength( Self.ster_t, 0 ); // Iloœæ sterów.
      SetLength( Self.ster_g³êbokoœci_t, 0 ); // Iloœæ sterów g³êbokoœci.

      Wygl¹d_Elementy_Utwórz();

      Self.DŸwiêków_Emitery_Utwórz( statek_create_funkcje_f, t³umaczenie_komunikaty_r_f );


      for i := 0 to Length( Self.artyleria_t ) - 1 do
        begin

          Self.artyleria_t[ i ].Dodatkowe_Elementy_Ustaw();

          if i = 0 then
            Self.artyleria_t[ i ].czy_indeks_do_strza³u := true;

          for j := 0 to Length( Self.artyleria_t[ i ].lufy_t ) - 1 do
            Self.artyleria_t[ i ].lufy_t[ j ].Dodatkowe_Elementy_Lufy_Pozycja_Ustaw();

        end;
      //---//for i := 0 to Length( Self.artyleria_t ) - 1 do

      for i := 0 to Length( Self.bomba_g³êbinowa_t ) - 1 do
        begin

          if i = 0 then
            Self.bomba_g³êbinowa_t[ i ].czy_indeks_do_strza³u := true;

          Self.bomba_g³êbinowa_t[ i ].Dodatkowe_Elementy_Ustaw();

        end;
      //---//for i := 0 to Length( Self.bomba_g³êbinowa_t ) - 1 do

      for i := 0 to Length( Self.dzia³a_t ) - 1 do
        begin

          Self.dzia³a_t[ i ].Dodatkowe_Elementy_Ustaw();

          if i = 0 then
            Self.dzia³a_t[ i ].czy_indeks_do_strza³u := true;

          for j := 0 to Length( Self.dzia³a_t[ i ].lufy_t ) - 1 do
            Self.dzia³a_t[ i ].lufy_t[ j ].Dodatkowe_Elementy_Lufy_Pozycja_Ustaw();

        end;
      //---//for i := 0 to Length( Self.dzia³a_t ) - 1 do

      for i := 0 to Length( Self.je¿e_g³êbinowe_t ) - 1 do
        begin

          if i = 0 then
            Self.je¿e_g³êbinowe_t[ i ].czy_indeks_do_strza³u := true;

          Self.je¿e_g³êbinowe_t[ i ].Dodatkowe_Elementy_Ustaw();

        end;
      //---//for i := 0 to Length( Self.je¿e_g³êbinowe_t ) - 1 do

      for i := 0 to Length( Self.torpedy_wyrzutnie_t ) - 1 do
        begin

          if i = 0 then
            Self.torpedy_wyrzutnie_t[ i ].czy_indeks_do_strza³u := true;

          Self.torpedy_wyrzutnie_t[ i ].Dodatkowe_Elementy_Ustaw();

        end;
      //---//for i := 0 to Length( Self.torpedy_wyrzutnie_t ) - 1 do


      for i := 0 to Length( Self.kotwica_t ) - 1 do
        Self.kotwica_t[ i ].Dodatkowe_Elementy_Ustaw();

    end
  else//if Trim( wygl¹d_definicja_f ) <> '' then
    begin

      {$region 'Je¿eli nie podano definicji wygl¹du statku utworzy domyœlny wygl¹d.'}
      Self.kad³ub__brak_definicji := Wyglad_Elementy.TSt_GLCube.Create( zt_gl_base_scene_object );
      Self.kad³ub__brak_definicji.Parent := zt_gl_base_scene_object;
      Self.kad³ub__brak_definicji.CubeHeight := 1;
      Self.kad³ub__brak_definicji.CubeWidth := 3;
      Self.kad³ub__brak_definicji.CubeDepth := 2;
      Self.kad³ub__brak_definicji.TurnAngle := 90;


      Self.dziób__brak_definicji := Wyglad_Elementy.TSt_GLCube.Create( zt_gl_base_scene_object );
      Self.dziób__brak_definicji.Parent := zt_gl_base_scene_object;
      Self.dziób__brak_definicji.TurnAngle := 45;
      Self.dziób__brak_definicji.Position.Z := 1.5;
      Self.dziób__brak_definicji.dziób := true; // Oznacza, ¿e jest to dziób (czêœæ taranuj¹ca - wzmocniona).


      SetLength( Self.artyleria_t, 1 ); // Iloœæ artylerii.

      for i := 0 to Length( Self.artyleria_t ) - 1 do
        begin

          Self.artyleria_t[ i ] := TArtyleria.Create( zt_gl_base_scene_object, Self, gl_collision_mmanager_f, efekt__element_uszkodzenie_gl_thor_fx_manager_f, 3, 0, statek_create_funkcje_f );
          //Self.artyleria_t[ i ].indeks_w_tabeli := i;
          Self.artyleria_t[ i ].Position.SetPoint( 0, 0.5, 1 );
          Self.artyleria_t[ i ].obrót_k¹t_zadany := 0; // Plus - lewo.
          Self.artyleria_t[ i ].skala__broñ := 2;
          Self.artyleria_t[ i ].Dodatkowe_Elementy_Ustaw();

          if i = 0 then
            Self.artyleria_t[ i ].czy_indeks_do_strza³u := true;

          for j := 0 to Length( Self.artyleria_t[ i ].lufy_t ) - 1 do
            Self.artyleria_t[ i ].lufy_t[ j ].Dodatkowe_Elementy_Lufy_Pozycja_Ustaw();

        end;
      //---//for i := 0 to Length( Self.artyleria_t ) - 1 do


      SetLength( Self.dzia³a_t, 1 ); // Iloœæ dzia³.

      for i := 0 to Length( Self.dzia³a_t ) - 1 do
        begin

          Self.dzia³a_t[ i ] := TDzia³o.Create( zt_gl_base_scene_object, Self, gl_collision_mmanager_f, efekt__element_uszkodzenie_gl_thor_fx_manager_f, 3, 0, statek_create_funkcje_f );
          //Self.dzia³a_t[ i ].indeks_w_tabeli := i;
          Self.dzia³a_t[ i ].Position.SetPoint( 0, 1.25, 0.75 ); // 0, 1, 0
          Self.dzia³a_t[ i ].obrót_k¹t_zadany := 0; // Plus - lewo.
          Self.dzia³a_t[ i ].skala__broñ := 0.5;
          Self.dzia³a_t[ i ].Dodatkowe_Elementy_Ustaw();

          if i = 0 then
            Self.dzia³a_t[ i ].czy_indeks_do_strza³u := true;

          for j := 0 to Length( Self.dzia³a_t[ i ].lufy_t ) - 1 do
            Self.dzia³a_t[ i ].lufy_t[ j ].Dodatkowe_Elementy_Lufy_Pozycja_Ustaw();

        end;
      //---//for i := 0 to Length( Self.dzia³a_t ) - 1 do


      SetLength( Self.torpedy_wyrzutnie_t, 1 ); // Iloœæ wyrzutni torped.

      for i := 0 to Length( Self.torpedy_wyrzutnie_t ) - 1 do
        begin

          Self.torpedy_wyrzutnie_t[ i ] := TTorpedy_Wyrzutnia.Create( zt_gl_base_scene_object, Self, gl_collision_mmanager_f, efekt__element_uszkodzenie_gl_thor_fx_manager_f, 3, statek_create_funkcje_f );
          //Self.torpedy_wyrzutnie_t[ i ].indeks_w_tabeli := i;
          Self.torpedy_wyrzutnie_t[ i ].Position.SetPoint( 0, 0.5, -1 ); // 0, 1, 0
          Self.torpedy_wyrzutnie_t[ i ].obrót_k¹t_zadany := 180; // Plus - lewo.
          Self.torpedy_wyrzutnie_t[ i ].skala__broñ := 1;

          if i = 0 then
            Self.torpedy_wyrzutnie_t[ i ].czy_indeks_do_strza³u := true;


          if i = 0 then
            begin

              SetLength( Self.torpedy_wyrzutnie_t[ i ].obrót_k¹t_zablokowany_strza³_do, 2 );
              SetLength(  Self.torpedy_wyrzutnie_t[ i ].obrót_k¹t_zablokowany_strza³_od, Length( Self.torpedy_wyrzutnie_t[ i ].obrót_k¹t_zablokowany_strza³_do )  );

              Self.torpedy_wyrzutnie_t[ i ].obrót_k¹t_zablokowany_strza³_od[ 0 ] := 50;
              Self.torpedy_wyrzutnie_t[ i ].obrót_k¹t_zablokowany_strza³_do[ 0 ] := -90;

              Self.torpedy_wyrzutnie_t[ i ].obrót_k¹t_zablokowany_strza³_od[ 1 ] := -170;
              Self.torpedy_wyrzutnie_t[ i ].obrót_k¹t_zablokowany_strza³_do[ 1 ] := 170;


              Self.torpedy_wyrzutnie_t[ i ].obrót_k¹t_zablokowany_od := 50; // 180  -90  50 -150
              Self.torpedy_wyrzutnie_t[ i ].obrót_k¹t_zablokowany_do := -50; //   90 -180 -50  150

            end;
          //---//if i = 0 then

          Self.torpedy_wyrzutnie_t[ i ].Dodatkowe_Elementy_Ustaw();

          //Self.torpedy_wyrzutnie_t[ i ].obrót_szybkoœæ := 1;

        end;
      //---//for i := 0 to Length( Self.torpedy_wyrzutnie_t ) - 1 do


      SetLength( Self.bomba_g³êbinowa_t, 2 ); // Iloœæ wyrzutni torped.

      for i := 0 to Length( Self.bomba_g³êbinowa_t ) - 1 do
        begin

          Self.bomba_g³êbinowa_t[ i ] := TTorpedy_Wyrzutnia.Create( zt_gl_base_scene_object, Self, gl_collision_mmanager_f, efekt__element_uszkodzenie_gl_thor_fx_manager_f, 1, statek_create_funkcje_f, Typy_Wspolne.ar_Bomba_G³êbinowa );
          //Self.bomba_g³êbinowa_t[ i ].indeks_w_tabeli := i;
          Self.bomba_g³êbinowa_t[ i ].Position.SetPoint( -1, 1.5, -1 ); // 0, 1, 0
          Self.bomba_g³êbinowa_t[ i ].obrót_k¹t_zadany := -90; // Plus - lewo.
          Self.bomba_g³êbinowa_t[ i ].skala__broñ := 1;

          if i = 0 then
            Self.bomba_g³êbinowa_t[ i ].czy_indeks_do_strza³u := true;


          if i = 1 then
            begin

              // Lewa.

              Self.bomba_g³êbinowa_t[ i ].obrót_k¹t_zadany := 90; // Plus - lewo.
              Self.bomba_g³êbinowa_t[ i ].Position.X := 1;

            end;
          //---//if i = 0 then

          Self.bomba_g³êbinowa_t[ i ].Dodatkowe_Elementy_Ustaw();

          //Self.bomba_g³êbinowa_t[ i ].obrót_szybkoœæ := 1;

        end;
      //---//for i := 0 to Length( Self.bomba_g³êbinowa_t ) - 1 do


      SetLength( Self.je¿e_g³êbinowe_t, 2 ); // Iloœæ wyrzutni torped.

      for i := 0 to Length( Self.je¿e_g³êbinowe_t ) - 1 do
        begin

          Self.je¿e_g³êbinowe_t[ i ] := TTorpedy_Wyrzutnia.Create( zt_gl_base_scene_object, Self, gl_collision_mmanager_f, efekt__element_uszkodzenie_gl_thor_fx_manager_f, 10, statek_create_funkcje_f, Typy_Wspolne.ar_Je¿e_G³êbinowe );
          //Self.je¿e_g³êbinowe_t[ i ].indeks_w_tabeli := i;
          Self.je¿e_g³êbinowe_t[ i ].Position.SetPoint( -1, 1.5, 1 ); // 0, 1, 0
          Self.je¿e_g³êbinowe_t[ i ].obrót_k¹t_zadany := -45; // Plus - lewo.
          Self.je¿e_g³êbinowe_t[ i ].skala__broñ := 1;

          if i = 0 then
            Self.je¿e_g³êbinowe_t[ i ].czy_indeks_do_strza³u := true;


          if i = 1 then
            begin

              // Lewa.

              Self.je¿e_g³êbinowe_t[ i ].obrót_k¹t_zadany := 45; // Plus - lewo.
              Self.je¿e_g³êbinowe_t[ i ].Position.X := 1;

            end;
          //---//if i = 0 then

          Self.je¿e_g³êbinowe_t[ i ].Dodatkowe_Elementy_Ustaw();

          //Self.je¿e_g³êbinowe_t[ i ].obrót_szybkoœæ := 1;

        end;
      //---//for i := 0 to Length( Self.je¿e_g³êbinowe_t ) - 1 do


      SetLength( Self.kotwica_t, 2 ); // Iloœæ kotwic.

      for i := 0 to Length( Self.kotwica_t ) - 1 do
        begin

          Self.kotwica_t[ i ] := TKotwica.Create( zt_gl_base_scene_object, Self, gl_collision_mmanager_f, efekt__element_uszkodzenie_gl_thor_fx_manager_f, 0, 0, 0 );
          Self.kotwica_t[ i ].Position.SetPoint( 0, 0, 0 );
          Self.kotwica_t[ i ].Position.Z := Self.kad³ub__brak_definicji.CubeWidth * 0.5;

          if i = 0 then
            begin

              Self.kotwica_t[ i ].Position.X := Self.kad³ub__brak_definicji.CubeDepth * 0.5;

            end
          else//if i = 0 then
          if i = 1 then
            begin

              Self.kotwica_t[ i ].Position.X := -Self.kad³ub__brak_definicji.CubeDepth * 0.5;

            end;
          //---//if i = 1 then


          Self.kotwica_t[ i ].Dodatkowe_Elementy_Ustaw();

        end;
      //---//for i := 0 to Length( Self.kotwica_t ) - 1 do


      SetLength( Self.œruby_t, 2 ); // Iloœæ œrub.

      for i := 0 to Length( Self.œruby_t ) - 1 do
        begin

          Self.œruby_t[ i ] := TŒruba.Create( zt_gl_base_scene_object, Self, i = 1, gl_collision_mmanager_f, efekt__element_uszkodzenie_gl_thor_fx_manager_f );
          Self.œruby_t[ i ].Wirnik_£opat_K¹t_Ustaw();
          Self.œruby_t[ i ].Position.SetPoint( 0, 0, 0 ); // 0, 1, 0
          //Self.œruby_t[ i ].TurnAngle := 20 * i + 15; // Plus - lewo.
          //Self.œruby_t[ i ].TurnAngle := 90; // Plus - lewo.
          Self.œruby_t[ i ].Position.Y := -Self.kad³ub__brak_definicji.CubeHeight;
          //Self.œruby_t[ i ].Position.Y := 2;


          if i = 0 then
            begin

              Self.œruby_t[ i ].Position.X := Self.kad³ub__brak_definicji.CubeDepth * 0.3;

            end
          else//if i = 0 then
          if i = 1 then
            begin

              Self.œruby_t[ i ].Position.X := -Self.kad³ub__brak_definicji.CubeDepth * 0.3;

            end;
          //---//if i = 1 then


          //Self.œruby_t[ i ].Position.Z := -4 + 2 * i;

        end;
      //---//for i := 0 to Length( Self.œruby_t ) - 1 do


      SetLength( Self.ster_t, 3 ); // Iloœæ sterów.

      for i := 0 to Length( Self.ster_t ) - 1 do
        begin

          Self.ster_t[ i ] := TSter.Create( zt_gl_base_scene_object, Self.id_statek, gl_collision_mmanager_f, efekt__element_uszkodzenie_gl_thor_fx_manager_f, 0, 0, 0 );
          Self.ster_t[ i ].Position.SetPoint( 0, 0, 0 ); // 0, 1, 0
          Self.ster_t[ i ].Position.Z := -Self.kad³ub__brak_definicji.CubeWidth * 0.5;

          //Self.ster_t[ i ].Position.Y := -Self.kad³ub.CubeHeight;
          //Self.ster_t[ i ].Position.Y := 2;


          if i = 0 then
            begin

              Self.ster_t[ i ].Position.X := Self.kad³ub__brak_definicji.CubeDepth * 0.3;

            end
          else//if i = 0 then
          if i = 1 then
            begin

              Self.ster_t[ i ].Position.X := -Self.kad³ub__brak_definicji.CubeDepth * 0.3;

            end;
          //---//if i = 1 then


          //Self.ster_t[ i ].Position.Z := -4 + 2 * i;

        end;
      //---//for i := 0 to Length( Self.ster_t ) - 1 do


      SetLength( Self.ster_g³êbokoœci_t, 2 ); // Iloœæ sterów g³êbokoœci.

      for i := 0 to Length( Self.ster_g³êbokoœci_t ) - 1 do
        begin

          Self.ster_g³êbokoœci_t[ i ] := TSter_G³êbokoœci.Create( zt_gl_base_scene_object, Self.id_statek, gl_collision_mmanager_f, efekt__element_uszkodzenie_gl_thor_fx_manager_f, 0, 0, 0 );
          Self.ster_g³êbokoœci_t[ i ].Position.SetPoint( 1, 0.25, 0 );


          if i = 1 then
            begin

              Self.ster_g³êbokoœci_t[ i ].Position.X := -Self.ster_g³êbokoœci_t[ i ].Position.X;

            end;
          //---//if i = 1 then

        end;
      //---//for i := 0 to Length( Self.ster_g³êbokoœci_t ) - 1 do
      {$endregion 'Je¿eli nie podano definicji wygl¹du statku utworzy domyœlny wygl¹d.'}

    end;
  //---//if Trim( wygl¹d_definicja_f ) <> '' then


  Self.x_prymityw_odleg³oœæ := Abs( x_prymityw_najmniejsze_l - x_prymityw_najwiêksze_l );

  if Self.x_prymityw_odleg³oœæ <= 0 then
    Self.x_prymityw_odleg³oœæ := 1;


  if Self.y_prymityw_najwiêksze <= 0 then
    Self.y_prymityw_najwiêksze := 1;


  Self.z_prymityw_odleg³oœæ := Abs( z_prymityw_najmniejsze_l - z_prymityw_najwiêksze_l );

  if Self.z_prymityw_odleg³oœæ <= 0 then
    Self.z_prymityw_odleg³oœæ := 1;


  if Self.efekt__element_uszkodzenie_gl_dummy_cube_st.Scale.Y < Self.y_prymityw_najwiêksze then
    Self.efekt__element_uszkodzenie_gl_dummy_cube_st.Scale.Y := Self.y_prymityw_najwiêksze;


//  if Length( Self.artyleria_t ) > 0 then
//    Self.artyleria_ostatni_strza³_indeks := 0;
//
//  if Length( Self.dzia³a_t ) > 0 then
//    Self.dzia³o_ostatni_strza³_indeks := 0;
//
//  if Length( Self.torpedy_wyrzutnie_t ) > 0 then
//    Self.torpedy_wyrzutnia_ostatni_strza³_indeks := 0;

  Self.amunicja_rodzaj_wybrana__artyleria := Length( Self.artyleria_t ) > 0;
  Self.amunicja_rodzaj_wybrana__bomba_g³êbinowa := Length( Self.bomba_g³êbinowa_t ) > 0;
  Self.amunicja_rodzaj_wybrana__je¿e_g³êbinowe := Length( Self.je¿e_g³êbinowe_t ) > 0;
  Self.amunicja_rodzaj_wybrana__pocisk := Length( Self.dzia³a_t ) > 0;
  Self.amunicja_rodzaj_wybrana__torpeda := Length( Self.torpedy_wyrzutnie_t ) > 0;
  Self.amunicja_rodzaj_wybrana__wszystkie := false;

  //Self.amunicja_rodzaj_zbiór := [];
  //
  //if Self.amunicja_rodzaj_wybrana__artyleria then
  //  Self.amunicja_rodzaj_zbiór := Self.amunicja_rodzaj_zbiór + [ Typy_Wspolne.ar_Artyleria ];
  //
  //if Self.amunicja_rodzaj_wybrana__pocisk then
  //  Self.amunicja_rodzaj_zbiór := Self.amunicja_rodzaj_zbiór + [ Typy_Wspolne.ar_Pocisk ];
  //
  //if Self.amunicja_rodzaj_wybrana__torpeda then
  //  Self.amunicja_rodzaj_zbiór := Self.amunicja_rodzaj_zbiór + [ Typy_Wspolne.ar_Torpeda ];

  Self.efekt__element_uszkodzenie_gl_dummy_cube_st.MoveLast();

  Self.Amunicja_Rodzaj_Zbiór_Wyznacz();

  Self.Si_Wartoœci_Pocz¹tkowe_Ustaw();

  Self.Punkty_¯ycia__WskaŸnik__Efekty_Tryb_Ustaw( punkty_¿ycia_wskaŸnik__material_options_f );


  if    ( Self.czy_lotniskowiec )
    and ( Self.lotniskowiec__³apacz_samolotów_dummy = nil ) then // Element jest wymagany dla lotniskowca.
    Self.lotniskowiec__³apacz_samolotów_dummy := Wyglad_Elementy.TSt_GLDummyCube.Create( Self );

  if Self.lotniskowiec__³apacz_samolotów_dummy <> nil then
    begin

      Self.lotniskowiec__³apacz_samolotów_dummy.Parent := Self.falowanie_gl_dummy_cube;
      Wyglad_Elementy.Obiekt_Rodzaj( Self.lotniskowiec__³apacz_samolotów_dummy, Wyglad_Elementy.or_£apacz_Samolotów );
      Self.lotniskowiec__³apacz_samolotów_dummy.VisibleAtRunTime := false;

    end;
  //---//if Self.lotniskowiec__³apacz_samolotów_dummy <> nil then


  if gl_collision_mmanager_f <> nil then
    begin

      if Self.dziób__brak_definicji <> nil then
        with TGLBCollision.Create( Self.dziób__brak_definicji.Behaviours ) do
          begin

            GroupIndex := 0;
            BoundingMode := cbmCube;
            Manager := gl_collision_mmanager_f;

          end;
        //---//with TGLBCollision.Create( Self.dziób__brak_definicji.Behaviours ) do

      if Self.kad³ub__brak_definicji <> nil then
        with TGLBCollision.Create( Self.kad³ub__brak_definicji.Behaviours ) do
          begin

            GroupIndex := 0;
            BoundingMode := cbmCube;
            Manager := gl_collision_mmanager_f;

          end;
        //---//with TGLBCollision.Create( Self.kad³ub__brak_definicji.Behaviours ) do

      if Self.lotniskowiec__³apacz_samolotów_dummy <> nil then
        with TGLBCollision.Create( Self.lotniskowiec__³apacz_samolotów_dummy.Behaviours ) do
          begin

            GroupIndex := 0;
            BoundingMode := cbmCube;
            Manager := gl_collision_mmanager_f;

          end;
        //---//with TGLBCollision.Create( Self.lotniskowiec__³apacz_samolotów_dummy.Behaviours ) do

    end;
  //---//if gl_collision_mmanager_f <> nil then


  if efekt__element_uszkodzenie_gl_thor_fx_manager_f <> nil then
    TGLBThorFX(Self.efekt__element_uszkodzenie_gl_dummy_cube_st.AddNewEffect( TGLBThorFX )).Manager := efekt__element_uszkodzenie_gl_thor_fx_manager_f;

end;//---//Konstruktor klasy TStatek.

//Destruktor klasy TStatek.
destructor TStatek.Destroy();
var
  i : integer;
begin

  Self.kolizja_oznaczenie_string_list.Clear();
  FreeAndNil( Self.kolizja_oznaczenie_string_list );


  if    ( Self.wygl¹d_elementy_list <> nil )
    and (  Assigned( Self.wygl¹d_elementy_list )  ) then
    for i := Self.wygl¹d_elementy_list.Count - 1 downto 0 do
      begin

        TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]).Free();
        Self.wygl¹d_elementy_list.Delete( i );

      end;
    //---//for i := Self.wygl¹d_elementy_list.Count - 1 downto 0 do

  FreeAndNil( Self.wygl¹d_elementy_list );

  FreeAndNil( Self.efekt__element_uszkodzenie_gl_dummy_cube_st );

  FreeAndNil( Self.dziób__brak_definicji );
  FreeAndNil( Self.kad³ub__brak_definicji );

  FreeAndNil( Self.gracz__nazwa );
  FreeAndNil( Self.punkty_¿ycia__wskaŸnik );
  FreeAndNil( Self.punkty_¿ycia__ramka );
  FreeAndNil( Self.punkty_¿ycia__napis );
  FreeAndNil( Self.punkty_¿ycia_podniesienie_gl_dummy_cube );
  FreeAndNil( Self.punkty_¿ycia_gl_dummy_cube );

  FreeAndNil( Self.celownicza_linia );


  for i := 0 to Length( Self.artyleria_t ) - 1 do
    FreeAndNil( Self.artyleria_t[ i ] );

  SetLength( Self.artyleria_t, 0 );


  for i := 0 to Length( Self.bomba_g³êbinowa_t ) - 1 do
    FreeAndNil( Self.bomba_g³êbinowa_t[ i ] );

  SetLength( Self.bomba_g³êbinowa_t, 0 );


  for i := 0 to Length( Self.dzia³a_t ) - 1 do
    FreeAndNil( Self.dzia³a_t[ i ] );

  SetLength( Self.dzia³a_t, 0 );


  for i := 0 to Length( Self.je¿e_g³êbinowe_t ) - 1 do
    FreeAndNil( Self.je¿e_g³êbinowe_t[ i ] );

  SetLength( Self.je¿e_g³êbinowe_t, 0 );


  for i := 0 to Length( Self.kotwica_t ) - 1 do
    FreeAndNil( Self.kotwica_t[ i ] );

  SetLength( Self.kotwica_t, 0 );


  for i := 0 to Length( Self.torpedy_wyrzutnie_t ) - 1 do
    FreeAndNil( Self.torpedy_wyrzutnie_t[ i ] );

  SetLength( Self.torpedy_wyrzutnie_t, 0 );


  for i := 0 to Length( Self.ster_t ) - 1 do
    FreeAndNil( Self.ster_t[ i ] );

  SetLength( Self.ster_t, 0 );


  for i := 0 to Length( Self.ster_g³êbokoœci_t ) - 1 do
    FreeAndNil( Self.ster_g³êbokoœci_t[ i ] );

  SetLength( Self.ster_g³êbokoœci_t, 0 );


  for i := 0 to Length( Self.œruby_t ) - 1 do
    FreeAndNil( Self.œruby_t[ i ] );

  SetLength( Self.œruby_t, 0 );


  if Self.lotniskowiec__³apacz_samolotów_dummy <> nil then
    FreeAndNil( Self.lotniskowiec__³apacz_samolotów_dummy );


  FreeAndNil( Self.falowanie_gl_dummy_cube );

  FreeAndNil( Self.toniêcie_gl_dummy_cube );

  inherited;

end;//---//Destruktor klasy TStatek.

//Funkcja DŸwiêków_Emitery_Utwórz().
procedure TStatek.DŸwiêków_Emitery_Utwórz( const statek_create_funkcje_f : TStatek_Create_Funkcje; const t³umaczenie_komunikaty_r_f : TT³umaczenie_Komunikaty_r );
var
  i : integer;
begin

  if   ( Self.wygl¹d_elementy_list = nil )
    or (  not Assigned( Self.wygl¹d_elementy_list )  ) then
    Exit;


  for i := 0 to Self.wygl¹d_elementy_list.Count - 1 do
    if Wyglad_Elementy.Obiekt_Rodzaj( Self.wygl¹d_elementy_list[ i ] ) = Wyglad_Elementy.or_DŸwiêk_Emiter then
      Exit; // Tylko raz tworzy emitery dŸwiêków (je¿eli ju¿ jakieœ s¹ to nie dodaje ich ponownie).


  for i := Self.wygl¹d_elementy_list.Count - 1 downto 0 do
    if Trim(  Wyglad_Elementy.DŸwiêk_Nazwa( Self.wygl¹d_elementy_list[ i ] )  ) <> '' then
      if not statek_create_funkcje_f.Wygl¹d_Elementy__DŸwiêk_Wczytaj_wsk(  Self.wygl¹d_elementy_list[ i ], Wyglad_Elementy.DŸwiêk_Nazwa( Self.wygl¹d_elementy_list[ i ] ), Wyglad_Elementy.DŸwiêki__Zasiêg_Minimalny( Self.wygl¹d_elementy_list[ i ] ), Self  ) then
        statek_create_funkcje_f.Log_Wypisz(  t³umaczenie_komunikaty_r_f.komunikat__tworzenie_elementów_statku___b³¹d_wczytania_dŸwiêku + ': ' + Wyglad_Elementy.DŸwiêk_Nazwa( Self.wygl¹d_elementy_list[ i ] ) + '.', not statek_create_funkcje_f.statek__komunikat_b³êdu_pomiñ  );

end;//---//Funkcja DŸwiêków_Emitery_Utwórz().

//Funkcja Prêdkoœæ_Zadana_Procent_Ustaw().
procedure TStatek.Prêdkoœæ_Zadana_Procent_Ustaw( const prêdkoœæ_zadana_procent_f : integer );
begin

  //
  // Funkcja ustawia podan¹ wartoœæ prêdkoœci zadanej w procentach.
  //
  // Parametry:
  //   prêdkoœæ_zadana_procent_f:
  //

  if prêdkoœæ_zadana_procent_f = Self.prêdkoœæ_zadana_procent then
    Exit;

  Self.Prêdkoœæ_Zadana_Procent_Zmieñ(   -(  Round( Self.prêdkoœæ_zadana_procent ) - prêdkoœæ_zadana_procent_f  )   );

end;//---//Funkcja Prêdkoœæ_Zadana_Procent_Ustaw().

//Funkcja Prêdkoœæ_Zadana_Procent_Zmieñ().
procedure TStatek.Prêdkoœæ_Zadana_Procent_Zmieñ( const zmieñ_o_f : integer );
begin

  //
  // Funkcja modyfikuje o podan¹ wartoœæ prêdkoœæ zadan¹ w procentach.
  //// -100 -75 -50 -25 0 25 50 75 100
  //
  // Parametry:
  //   zmieñ_o_f:
  //     < 0 - zwalnia / cofa.
  //     0 - zeruje.
  //     > 0 - przyœpiesza.
  //

  if zmieñ_o_f = 0 then
    Self.prêdkoœæ_zadana_procent := 0
  else//if zmieñ_o_f = 0 then
    Self.prêdkoœæ_zadana_procent := Self.prêdkoœæ_zadana_procent + zmieñ_o_f;


  if Self.prêdkoœæ_zadana_procent > 100 then
    Self.prêdkoœæ_zadana_procent := 100
  else
  if Self.prêdkoœæ_zadana_procent < -100 then
    Self.prêdkoœæ_zadana_procent := -100;

  //if zmieñ_o_f = 0 then
  //  Self.prêdkoœæ_zadana_procent := 0
  //else//if zmieñ_o_f = 0 then
  //if zmieñ_o_f > 0 then
  //  begin
  //
  //    // Przyœpieszanie.
  //
  //    if Self.prêdkoœæ_zadana_procent <= 75 then
  //      begin
  //
  //        if Self.prêdkoœæ_zadana_procent >= 0 then
  //          Self.prêdkoœæ_zadana_procent := Self.prêdkoœæ_zadana_procent + 25
  //        else//if Self.prêdkoœæ_zadana_procent >= 0 then
  //          Self.prêdkoœæ_zadana_procent := Self.prêdkoœæ_zadana_procent + 25; // 50 dla wariantu -100 -50 0.
  //
  //      end;
  //    //---//if Self.prêdkoœæ_zadana_procent <= 75 then
  //
  //
  //    if Self.prêdkoœæ_zadana_procent > 100 then
  //      Self.prêdkoœæ_zadana_procent := 100;
  //
  //  end
  //else//if zmieñ_o_f > 0 then
  //if zmieñ_o_f < 0 then
  //  begin
  //
  //    // Zwalnianie / cofanie.
  //
  //    if Self.prêdkoœæ_zadana_procent >= -75 then
  //      begin
  //
  //        if Self.prêdkoœæ_zadana_procent > 0 then
  //          Self.prêdkoœæ_zadana_procent := Self.prêdkoœæ_zadana_procent - 25
  //        else//if Self.prêdkoœæ_zadana_procent > 0 then
  //          Self.prêdkoœæ_zadana_procent := Self.prêdkoœæ_zadana_procent - 25; // -50 dla wariantu -100 -50 0.
  //
  //      end;
  //    //---//if Self.prêdkoœæ_zadana_procent >= -50 then
  //
  //
  //    if Self.prêdkoœæ_zadana_procent < -100 then
  //      Self.prêdkoœæ_zadana_procent := -100;
  //
  //  end;
  ////---//if zmieñ_o_f < 0 then

end;//---//Funkcja Prêdkoœæ_Zadana_Procent_Zmieñ().

//Funkcja Skrêt_Zadany_Procent_Ustaw().
procedure TStatek.Skrêt_Zadany_Procent_Ustaw( const skrêt_zadany_procent_f : integer );
begin

  //
  // Funkcja ustawia podan¹ wartoœæ skrêtu zadanego w procentach.
  //
  // Parametry:
  //   skrêt_zadany_procent_f:
  //

  if skrêt_zadany_procent_f = Self.skrêt_zadany_procent then
    Exit;

  Self.Skrêt_Zadany_Procent_Zmieñ(   -(  Round( Self.skrêt_zadany_procent ) - skrêt_zadany_procent_f  )   );

end;//---//Funkcja Skrêt_Zadany_Procent_Ustaw().

//Funkcja Skrêt_Zadany_Procent_Zmieñ().
procedure TStatek.Skrêt_Zadany_Procent_Zmieñ( const zmieñ_o_f : integer );
begin

  //
  // Funkcja modyfikuje o podan¹ wartoœæ skrêt zadany w procentach.
  //// -100 -75 -50 -20 0 25 50 75 100
  //
  // Parametry:
  //   zmieñ_o_f:
  //     < 0 - lewo.
  //     0 - zeruje.
  //     > 0 - w prawo
  //

  if zmieñ_o_f = 0 then
    Self.skrêt_zadany_procent := 0
  else//if zmieñ_o_f = 0 then
    Self.skrêt_zadany_procent := Self.skrêt_zadany_procent + zmieñ_o_f;

  if Self.skrêt_zadany_procent < -100 then
    Self.skrêt_zadany_procent := -100
  else
  if Self.skrêt_zadany_procent > 100 then
    Self.skrêt_zadany_procent := 100;

  //if zmieñ_o_f = 0 then
  //  Self.skrêt_zadany_procent := 0
  //else//if zmieñ_o_f = 0 then
  //if zmieñ_o_f < 0 then
  //  begin
  //
  //    // W lewo.
  //
  //    if Self.skrêt_zadany_procent >= -75 then
  //      begin
  //
  //        Self.skrêt_zadany_procent := Self.skrêt_zadany_procent - 25;
  //
  //      end;
  //    //---//if Self.skrêt_zadany_procent >= -75 then
  //
  //
  //    if Self.skrêt_zadany_procent < -100 then
  //      Self.skrêt_zadany_procent := -100;
  //
  //  end
  //else//if zmieñ_o_f < 0 then
  //if zmieñ_o_f > 0 then
  //  begin
  //
  //    // W prawo.
  //
  //    if Self.skrêt_zadany_procent <= 75 then
  //      begin
  //
  //        Self.skrêt_zadany_procent := Self.skrêt_zadany_procent + 25;
  //
  //      end;
  //    //---//if Self.skrêt_zadany_procent <= 75 then
  //
  //
  //    if Self.skrêt_zadany_procent > 100 then
  //      Self.skrêt_zadany_procent := 100;
  //
  //  end;
  ////---//if zmieñ_o_f > 0 then

end;//---//Funkcja Skrêt_Zadany_Procent_Zmieñ().

//Funkcja Zanurzenie_Zadane_Procent_Ustaw().
procedure TStatek.Zanurzenie_Zadane_Procent_Ustaw( const zanurzenie_pu³ap__zadane_procent_f : integer );
begin

  //
  // Funkcja ustawia podan¹ wartoœæ zanurzeniu zadanemu w procentach.
  //
  // Parametry:
  //   zanurzenie_pu³ap__zadane_procent_f:
  //

  if zanurzenie_pu³ap__zadane_procent_f = Self.zanurzenie_pu³ap__zadane_procent then
    Exit;

  Self.Zanurzenie_Zadane_Procent_Zmieñ(   -(  Round( Self.zanurzenie_pu³ap__zadane_procent ) - zanurzenie_pu³ap__zadane_procent_f  )   );

end;//---//Funkcja Zanurzenie_Zadane_Procent_Ustaw().

//Funkcja Zanurzenie_Zadane_Procent_Zmieñ().
procedure TStatek.Zanurzenie_Zadane_Procent_Zmieñ( const zmieñ_o_f : integer; const peryskopowe_f : boolean = false );
begin

  //
  // Funkcja modyfikuje o podan¹ wartoœæ zanurzenie zadane w procentach.
  // 0 100
  //
  // Parametry:
  //   zmieñ_o_f:
  //     < 0 - wynurzenie.
  //     0 - zeruje.
  //     > 0 - zanurzenie.
  //   peryskopowe_f
  //     false - zmienia zadane zanurzenie procentowe o podan¹ wartoœæ.
  //     true -  na podstawie znanej wartoœci zanurzenia peryskopowego wylicza wartoœæ zadanego zanurzenia procentowego zaokr¹glonego w dó³.
  //

  if    ( not Self.czy_samolot )
    and ( not Self.czy_zanurzanie ) then
    Exit;


  if peryskopowe_f then
    begin

      //if Self.zanurzenie_pu³ap__maksymalne <> 0 then
      //  Self.zanurzenie_pu³ap__zadane_procent := System.Math.Floor( Self.zanurzenie_peryskopowe_do * 100 / Self.zanurzenie_pu³ap__maksymalne ) - zanurzanie_precyzja_c
      //else//if Self.zanurzenie_pu³ap__maksymalne <> 0 then
      //  Self.zanurzenie_pu³ap__zadane_procent := 0;

      Self.zanurzenie_pu³ap__zadane_procent := Zanurzenie_Peryskopowe__Jako__Zadane_Procent_Wylicz();

    end
  else//if peryskopowe_f then
    if zmieñ_o_f = 0 then
      Self.zanurzenie_pu³ap__zadane_procent := 0
    else//if zmieñ_o_f = 0 then
      Self.zanurzenie_pu³ap__zadane_procent := Self.zanurzenie_pu³ap__zadane_procent + zmieñ_o_f;


  if not Self.czy_samolot then
    begin

      if    ( Self.zanurzenie_zadane_przekraczaj_100_procent )
        and ( Self.zanurzenie_pu³ap__zadane_procent > 300 ) then
        Self.zanurzenie_pu³ap__zadane_procent := 300
      else//if    ( Self.zanurzenie_zadane_przekraczaj_100_procent ) (...)
      if    ( not Self.zanurzenie_zadane_przekraczaj_100_procent )
        and ( Self.zanurzenie_pu³ap__zadane_procent > 100 ) then
        Self.zanurzenie_pu³ap__zadane_procent := 100
      else//if    ( Self.zanurzenie_zadane_przekraczaj_100_procent ) (...)
      if Self.zanurzenie_pu³ap__zadane_procent < 0 then
        Self.zanurzenie_pu³ap__zadane_procent := 0;

    end
  else//if not Self.czy_samolot then
    begin

      if Self.zanurzenie_pu³ap__zadane_procent > 100 then
        Self.zanurzenie_pu³ap__zadane_procent := 100
      else//if Self.zanurzenie_pu³ap__zadane_procent > 100 then
      if Self.zanurzenie_pu³ap__zadane_procent < -100 then
        Self.zanurzenie_pu³ap__zadane_procent := -100;

    end;
  //---//if not Self.czy_samolot then

end;//---//Funkcja Zanurzenie_Zadane_Procent_Zmieñ().

//Funkcja Grawitacja_Opadanie_Zmieñ().
function TStatek.Grawitacja_Opadanie_Zmieñ( const delta_czasu_f : double; const grawitacja_wy³¹czona_f : boolean = false ) : real;
var
  samolot_prêdkoœæ_korekta : real;
begin

  Result := 0;

  //if    ( Self.AbsolutePosition.Y > 0 )
  //  and ( Self.grawitacja_opadanie_szybkoœæ_aktualna < grawitacja_opadanie_szybkoœæ_maksymalna_c ) then
  if    (
             ( not Self.czy_samolot )
          or (
                   ( Self.czy_samolot )
               and ( not Self.czy_samolot__kolizja )
               and (  Abs( Self.prêdkoœæ_aktualna_procent__wzglêdny ) < samolot_prêdkoœæ_lotu_procent_minimalny_c  )
             )
        )
    and ( Self.prêdkoœæ__kolizja_zwalnianie = 0 )
    and ( Self.AbsolutePosition.Y > 0 )
    and ( Self.grawitacja_opadanie_szybkoœæ_aktualna < grawitacja_opadanie_szybkoœæ_maksymalna_c ) then
    begin

      if   ( not Self.czy_samolot )
        or (  Abs( Self.prêdkoœæ_aktualna_procent__wzglêdny ) >= samolot_prêdkoœæ_lotu_procent_minimalny_c  ) then
        samolot_prêdkoœæ_korekta := 1
      else//if   ( not Self.czy_samolot ) (...)
        samolot_prêdkoœæ_korekta := (  100 - Abs( Self.prêdkoœæ_aktualna_procent__wzglêdny ) * 100 / samolot_prêdkoœæ_lotu_procent_minimalny_c  ) * 0.01; // Im samolot leci wolniej ni¿ samolot_prêdkoœæ_lotu_procent_minimalny_c prêdkoœci tym grawitacja dzia³a mocniej.


      if Self.grawitacja_opadanie_obra¿enia_naliczono then
        Self.grawitacja_opadanie_obra¿enia_naliczono := false;

      if not grawitacja_wy³¹czona_f then
        if Self.AbsolutePosition.Y > zanurzanie_precyzja_c then
          Self.grawitacja_opadanie_szybkoœæ_aktualna := Self.grawitacja_opadanie_szybkoœæ_aktualna + 50 * samolot_prêdkoœæ_korekta * delta_czasu_f
        else//if Self.AbsolutePosition.Y > zanurzanie_precyzja_c then
          Self.grawitacja_opadanie_szybkoœæ_aktualna := Self.grawitacja_opadanie_szybkoœæ_aktualna + 0.5 * samolot_prêdkoœæ_korekta * delta_czasu_f; // Aby ³agodniej t³umi³o podczas wynurzania.

    end
  else//if    ( (...)
    //if Self.AbsolutePosition.Y < 0 then
    if   ( not Self.czy_samolot )
      or (
               ( Self.czy_samolot )
           and ( Self.czy_samolot__kolizja )
         )
      or ( Self.AbsolutePosition.Y < 0 ) then
      begin

        if not Self.grawitacja_opadanie_obra¿enia_naliczono then
          begin

            Self.grawitacja_opadanie_obra¿enia_naliczono := true;

            //if Self.AbsolutePosition.Y < 0 then // Je¿eli samolot ponownie nabierze prêdkoœci.
            if   ( Self.AbsolutePosition.Y < 0 )
              or (     ( Self.czy_samolot )
                   and ( Self.czy_samolot__kolizja )
                   and ( Self.grawitacja_opadanie_szybkoœæ_aktualna <> 0 )
                 ) then
              begin

                // Jaki procent maksymalnej szybkoœci grawitacji osi¹gnie tyle obra¿eñ otrzyma przy upadku.

                if @Self.grawitacja_opadanie_obra¿enia_wylicz <> nil then
                  Result := Self.grawitacja_opadanie_obra¿enia_wylicz( Self.punkty_¿ycia_maksymalne, Self.grawitacja_opadanie_szybkoœæ_aktualna )
                else//if @Self.grawitacja_opadanie_obra¿enia_wylicz <> nil then
                  Result := 0;

                if Result > Self.punkty_¿ycia_aktualne then
                  Result := Self.punkty_¿ycia_aktualne;

                Self.Punkty_¯ycia__Zmieñ( -Result );

                if Self.punkty_¿ycia_aktualne <= 0 then
                  if @Self.lotniskowiec__samoloty_wszystkie__punkty_¿ycia_zero <> nil then
                    Self.lotniskowiec__samoloty_wszystkie__punkty_¿ycia_zero( Self, nil );

              end;
            //---//if   ( Self.AbsolutePosition.Y < 0 ) (...)

          end;
        //---//if not Self.grawitacja_opadanie_obra¿enia_naliczono then


        if    ( Self.czy_samolot )
          and ( Self.grawitacja_opadanie_szybkoœæ_aktualna <> 0 ) then
          Self.grawitacja_opadanie_szybkoœæ_aktualna := 0
        else//if    ( Self.czy_samolot ) (...)
          if Self.grawitacja_opadanie_szybkoœæ_aktualna > 0.001 then
            Self.grawitacja_opadanie_szybkoœæ_aktualna := Self.grawitacja_opadanie_szybkoœæ_aktualna * 0.5
          else//if Self.grawitacja_opadanie_szybkoœæ_aktualna > 0.001 then
            if Self.grawitacja_opadanie_szybkoœæ_aktualna <> 0 then
              Self.grawitacja_opadanie_szybkoœæ_aktualna := 0;

      end
    else//if   ( not Self.czy_samolot ) (...)
      if    ( Self.czy_samolot )
        and ( not Self.czy_samolot__kolizja )
        and (  Abs( Self.prêdkoœæ_aktualna_procent__wzglêdny ) >= samolot_prêdkoœæ_lotu_procent_minimalny_c  )
        and ( Self.grawitacja_opadanie_szybkoœæ_aktualna <> 0 ) then
        Self.grawitacja_opadanie_szybkoœæ_aktualna := 0; // Czasami samolotom nie zeruje grawitacji.

end;//---//Funkcja Grawitacja_Opadanie_Zmieñ().

//Funkcja Prêdkoœæ_Procent_Zmieñ().
procedure TStatek.Prêdkoœæ_Procent_Zmieñ( const delta_czasu_f : double );
var
  prêdkoœæ_przyspieszanie_kopia,
  prêdkoœæ_przyspieszanie__start_z_lotniskowca_modyfikator_l,
  prêdkoœæ_zadana_procent_kopia,
  prêdkoœæ_zwalnianie_kopia,
  ztr
    : real;
begin

  //
  // Funkcja modyfikuje prêdkoœæ w procentach.
  //
  //  Zmiana prêdkoœci odbywa siê zawsze pe³n¹ moc¹ i liniowo.
  //  Moc silników wp³ywa na zmianê prêdkoœci tylko gdy zadana prêdkoœæ jest bezwzglêdnie wiêksza lub ma znak przeciwny od obecnej prêdkoœci.
  //  Zanurzenie aktualne statku zmniejsza przyœpieszanie o po³owê (100% zanurzenia statku zmniejsza przyspieszanie o 50%).
  //

  if Self.punkty_¿ycia_aktualne <= 0 then
    begin

      if Self.prêdkoœæ_zadana_procent <> 0 then
        Self.prêdkoœæ_zadana_procent := 0;

    end;
  //---//if Self.punkty_¿ycia_aktualne <= 0 then

  if Self.uszkodzone_czas_sekundy_i__œruba <> 0 then
    prêdkoœæ_zadana_procent_kopia := 0
  else//if Self.uszkodzone_czas_sekundy_i__œruba <> 0 then
    prêdkoœæ_zadana_procent_kopia := Self.prêdkoœæ_zadana_procent;


  prêdkoœæ_przyspieszanie_kopia := Self.prêdkoœæ_przyspieszanie;


  if Self.czy_samolot then
    begin

      // Samolot w powietrzu nie cofa (helikopterów na razie nie ma).
      if    ( Self.prêdkoœæ_aktualna_procent__bezwzglêdny < -10 )
        and ( prêdkoœæ_zadana_procent_kopia < -10 ) then
        prêdkoœæ_zadana_procent_kopia := -10; // Ograniczenie prêdkoœci cofania samolotu.


      // Wznoszenie zmniejsza przyspieszanie, opadanie zwiêksza przyœpieszanie (o po³owê wartoœci zadanego procentu opadania, wznoszenia).
      if Abs( Self.prêdkoœæ_aktualna_procent__bezwzglêdny ) >= samolot_prêdkoœæ_lotu_procent_minimalny_c then
        if Self.prêdkoœæ_aktualna_procent__bezwzglêdny >= 0 then
          prêdkoœæ_przyspieszanie_kopia := prêdkoœæ_przyspieszanie_kopia - prêdkoœæ_przyspieszanie_kopia * Self.zanurzenie_pu³ap__zadane_procent * 0.005 // 0.005 = 0.01 * 0.5.
        else//if Self.prêdkoœæ_aktualna_procent__bezwzglêdny >= 0 then
          prêdkoœæ_przyspieszanie_kopia := prêdkoœæ_przyspieszanie_kopia + prêdkoœæ_przyspieszanie_kopia * Self.zanurzenie_pu³ap__zadane_procent * 0.005; // 0.005 = 0.01 * 0.5.


      if   ( Self.prêdkoœæ_przyspieszanie__kolizja_spowolnienie )
        or ( Self.AbsolutePosition.Y < zanurzenie_spowalnianie_g³êbokoœæ_od_c ) then // Je¿eli samolot jest pod wod¹ to nie wykrywa kontaktu z p³aszczyzn¹ wody.
        prêdkoœæ_przyspieszanie_kopia := prêdkoœæ_przyspieszanie_kopia * 0.5; // Po wyl¹dowaniu samolot wolniej przyœpiesza.

    end;
  //---//if Self.czy_samolot then


  if    ( Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent = -100 )
    and ( Self.czy_samolot__na_lotniskowcu )
    and ( Self.Samolot_Na_Lotniskowcu() <> nil ) then
    begin

      Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent := -1;
      prêdkoœæ_przyspieszanie__start_z_lotniskowca_modyfikator_l := Self.Samolot_Na_Lotniskowcu().lotniskowiec__samolot_przyœpieszanie

    end
  else//if Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca then
    prêdkoœæ_przyspieszanie__start_z_lotniskowca_modyfikator_l := 1;


  //if   ( not Self.czy_samolot )
  //  or ( // Aby samolot móg³ wystartowaæ.
  //           ( Self.czy_samolot )
  //       and (
  //                (  Abs( prêdkoœæ_zadana_procent_kopia ) = 0  ) // Aby samolot zwalnia³ gdy nie zadano prêdkoœci.
  //             or (  Abs( Self.prêdkoœæ_aktualna_procent__bezwzglêdny ) >= samolot_prêdkoœæ_lotu_procent_minimalny_c + samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c  )
  //           )
  //     ) then
  //if not Self.czy_samolot then
  if   ( not Self.czy_samolot )
    or ( Self.czy_samolot__kolizja__kotwica )then
    begin

      // Kolizja zwiêksza wspó³czynnik wyhamowywania.
      if    ( Self.prêdkoœæ__kolizja_zwalnianie > 0 )
        and (  Abs( Self.prêdkoœæ_aktualna_procent__bezwzglêdny ) > Abs( prêdkoœæ_zadana_procent_kopia ) * ( 100 - Self.prêdkoœæ__kolizja_zwalnianie ) * 0.01  ) then // Prêdkoœæ zadana pomniejszona o si³ê zwalniania (wyra¿on¹ w procentach).
        prêdkoœæ_zwalnianie_kopia := Self.prêdkoœæ_zwalnianie * Self.prêdkoœæ__kolizja_zwalnianie
      else//if    ( Self.prêdkoœæ__kolizja_zwalnianie > 0 ) (...)
        prêdkoœæ_zwalnianie_kopia := Self.prêdkoœæ_zwalnianie;

    end
  else//if   ( not Self.czy_samolot ) (...)
    prêdkoœæ_zwalnianie_kopia := Self.prêdkoœæ_zwalnianie; // Aby samolot móg³ wystartowaæ.


  if Self.AbsolutePosition.Y < 0 then
    begin

      // Tylko pod wod¹ nastêpuje spowolnienie (samolotów w powietrzu nie spowalnia).
      // Lepiej modyfikowaæ wspó³czynnik zwalniania, od razu wp³ywa na hamowanie.

      if Self.zanurzenie_pu³ap__aktualne_procent <= 90 then
        ztr := Abs( Self.zanurzenie_pu³ap__aktualne_procent )
      else//if Self.zanurzenie_pu³ap__aktualne_procent <= 90 then
      if Self.zanurzenie_pu³ap__aktualne_procent >= 200 then
        ztr := 98
      else//if Self.zanurzenie_pu³ap__aktualne_procent >= 200 then
      if Self.zanurzenie_pu³ap__aktualne_procent >= 150 then
        ztr := 95
      else//if Self.zanurzenie_pu³ap__aktualne_procent >= 150 then
        ztr := 90;

      prêdkoœæ_zwalnianie_kopia :=
          prêdkoœæ_zwalnianie_kopia
        + Abs( Self.prêdkoœæ_przyspieszanie - Self.prêdkoœæ_zwalnianie ) // Zwalnianie powiêksza tylko o ró¿nicê miêdzy wspó³czynnikiem przyspieszania i zwalniania statku.
        * ztr * 0.01; // Im wiêksze zanurzenie tym bardziej zwiêksza siê zwalnianie.

    end;
  //---//if Self.AbsolutePosition.Y < 0 then


  prêdkoœæ_zwalnianie_kopia := prêdkoœæ_zwalnianie_kopia * delta_czasu_f;


  // Wyhamowywanie.
  //if Abs( Self.prêdkoœæ_aktualna_procent__bezwzglêdny ) > Self.prêdkoœæ_zwalnianie then
  if Abs( Self.prêdkoœæ_aktualna_procent__bezwzglêdny ) > prêdkoœæ_zwalnianie_kopia then
    begin

      //if Self.prêdkoœæ_aktualna_procent__bezwzglêdny > 0 then
      //  Self.prêdkoœæ_aktualna_procent__bezwzglêdny := Self.prêdkoœæ_aktualna_procent__bezwzglêdny - Self.prêdkoœæ_zwalnianie
      //else//if Self.prêdkoœæ_aktualna_procent__bezwzglêdny > 0 then
      //if Self.prêdkoœæ_aktualna_procent__bezwzglêdny < 0 then
      //  Self.prêdkoœæ_aktualna_procent__bezwzglêdny := Self.prêdkoœæ_aktualna_procent__bezwzglêdny + Self.prêdkoœæ_zwalnianie;


      if Self.prêdkoœæ_aktualna_procent__bezwzglêdny > 0 then
        Self.prêdkoœæ_aktualna_procent__bezwzglêdny := Self.prêdkoœæ_aktualna_procent__bezwzglêdny - prêdkoœæ_zwalnianie_kopia
      else//if Self.prêdkoœæ_aktualna_procent__bezwzglêdny > 0 then
      if Self.prêdkoœæ_aktualna_procent__bezwzglêdny < 0 then
        Self.prêdkoœæ_aktualna_procent__bezwzglêdny := Self.prêdkoœæ_aktualna_procent__bezwzglêdny + prêdkoœæ_zwalnianie_kopia;

    end
  else//if Abs( Self.prêdkoœæ_aktualna_procent__bezwzglêdny ) > Self.prêdkoœæ_zwalnianie then
    Self.prêdkoœæ_aktualna_procent__bezwzglêdny := 0; // Prêdkoœæ mniejsza od wspó³czynnika wyhamowywania jest zerowana.


  //if prêdkoœæ_zadana_procent_kopia <> 0 then
    if   ( Self.prêdkoœæ_aktualna_procent__bezwzglêdny < prêdkoœæ_zadana_procent_kopia )
      or ( prêdkoœæ_przyspieszanie__start_z_lotniskowca_modyfikator_l <> 1 ) then
      begin

        // Przyœpieszanie.

        if prêdkoœæ_zadana_procent_kopia > 0 then
          //Self.prêdkoœæ_aktualna_procent__bezwzglêdny := Self.prêdkoœæ_aktualna_procent__bezwzglêdny + prêdkoœæ_przyspieszanie_kopia;
          //Self.prêdkoœæ_aktualna_procent__bezwzglêdny := Self.prêdkoœæ_aktualna_procent__bezwzglêdny + (  prêdkoœæ_przyspieszanie_kopia * prêdkoœæ_przyspieszanie__start_z_lotniskowca_modyfikator_l - prêdkoœæ_przyspieszanie_kopia * Abs( Self.zanurzenie_pu³ap__aktualne_procent ) * 0.005  ) * delta_czasu_f; // 0.005 = 0.01 * 0.5.
          Self.prêdkoœæ_aktualna_procent__bezwzglêdny := Self.prêdkoœæ_aktualna_procent__bezwzglêdny + prêdkoœæ_przyspieszanie_kopia * prêdkoœæ_przyspieszanie__start_z_lotniskowca_modyfikator_l * delta_czasu_f;

        //if prêdkoœæ_przyspieszanie__start_z_lotniskowca_modyfikator_l = 1 then // Je¿eli za bardzo przyœpieszy to wybuchnie.
          if Self.prêdkoœæ_aktualna_procent__bezwzglêdny > prêdkoœæ_zadana_procent_kopia then
           Self.prêdkoœæ_aktualna_procent__bezwzglêdny := prêdkoœæ_zadana_procent_kopia;

      end
    else//if   ( Self.prêdkoœæ_aktualna_procent__bezwzglêdny < prêdkoœæ_zadana_procent_kopia ) (...)
    if Self.prêdkoœæ_aktualna_procent__bezwzglêdny > prêdkoœæ_zadana_procent_kopia then
      begin

        // Cofanie.

        if prêdkoœæ_zadana_procent_kopia < 0 then
          //Self.prêdkoœæ_aktualna_procent__bezwzglêdny := Self.prêdkoœæ_aktualna_procent__bezwzglêdny - prêdkoœæ_przyspieszanie_kopia;
          //Self.prêdkoœæ_aktualna_procent__bezwzglêdny := Self.prêdkoœæ_aktualna_procent__bezwzglêdny - (  prêdkoœæ_przyspieszanie_kopia - prêdkoœæ_przyspieszanie_kopia * Abs( Self.zanurzenie_pu³ap__aktualne_procent ) * 0.005  ) * delta_czasu_f; // 0.005 = 0.01 * 0.5.
          Self.prêdkoœæ_aktualna_procent__bezwzglêdny := Self.prêdkoœæ_aktualna_procent__bezwzglêdny - prêdkoœæ_przyspieszanie_kopia * delta_czasu_f;

        if Self.prêdkoœæ_aktualna_procent__bezwzglêdny < prêdkoœæ_zadana_procent_kopia then
         Self.prêdkoœæ_aktualna_procent__bezwzglêdny := prêdkoœæ_zadana_procent_kopia;

      end;
    //---//if Self.prêdkoœæ_aktualna_procent__bezwzglêdny > prêdkoœæ_zadana_procent_kopia then



  // Wyhamowywanie wynikaj¹ce z kolizji.
  if   ( not Self.czy_samolot )
    or (
             ( Self.czy_samolot ) // Aby samolot móg³ wystartowaæ.
         and (  Abs( Self.prêdkoœæ_aktualna_procent__bezwzglêdny ) >= samolot_prêdkoœæ_lotu_procent_minimalny_c + samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c  )
         //and (
         //         (  Abs( prêdkoœæ_zadana_procent_kopia ) = 0  ) // Aby samolot zwalnia³ gdy nie zadano prêdkoœci.
         //      or (  Abs( Self.prêdkoœæ_aktualna_procent__bezwzglêdny ) >= samolot_prêdkoœæ_lotu_procent_minimalny_c + samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c  )
         //    )
       ) then
    if    (  Abs( Self.prêdkoœæ_aktualna_procent__bezwzglêdny ) > 0  )
      and ( Self.prêdkoœæ__kolizja_zwalnianie <> 0 ) then
      begin

        //Self.prêdkoœæ_aktualna_procent__bezwzglêdny := Self.prêdkoœæ_aktualna_procent__bezwzglêdny * (  100 - Abs( Self.prêdkoœæ_aktualna_procent__bezwzglêdny ) * Self.prêdkoœæ__kolizja_zwalnianie  ) * 0.01;
        //Self.prêdkoœæ_aktualna_procent__bezwzglêdny :=
        //    Self.prêdkoœæ_aktualna_procent__bezwzglêdny
        //  * (
        //        (
        //            100 - Abs( Self.prêdkoœæ_aktualna_procent__bezwzglêdny ) // Im wiêksza prêdkoœæ tym mniejsza wartoœæ (tym bardziej zmniejsza prêdkoœæ im prêdkoœæ jest wiêksza).
        //          * Self.prêdkoœæ__kolizja_zwalnianie
        //        )
        //      * 0.01 // Wyliczanie wartoœci procentowej (x / 100 = x%).
        //    ) // Prêdkoœæ jest pomniejszana o tyle procent.
        //  * 0.85; // Modyfikuje si³ê wp³ywu kolizji na prêdkoœæ.


        if Self.prêdkoœæ__kolizja_zwalnianie >= 100 then
          Self.prêdkoœæ_aktualna_procent__bezwzglêdny := 0
        else//if Self.prêdkoœæ__kolizja_zwalnianie >= 100 then
          if Self.prêdkoœæ__kolizja_zwalnianie < 0 then
            if Abs( Self.prêdkoœæ_aktualna_procent__bezwzglêdny ) > 10 then // Przy ma³ych prêdkoœciach mo¿e siê zablokowaæ gdy próbuje siê oddaliæ a kolizja zmienia znak i przyci¹ga.
              Self.prêdkoœæ_aktualna_procent__bezwzglêdny := Self.prêdkoœæ_aktualna_procent__bezwzglêdny * Self.prêdkoœæ__kolizja_zwalnianie * 0.5 * delta_czasu_f // 0.01
            else//if Abs( Self.prêdkoœæ_aktualna_procent__bezwzglêdny ) > 10 then
              Self.prêdkoœæ_aktualna_procent__bezwzglêdny := -Self.prêdkoœæ_aktualna_procent__bezwzglêdny;


        if Self.prêdkoœæ_aktualna_procent__bezwzglêdny > Self.prêdkoœæ_ograniczenie then
          Self.prêdkoœæ_aktualna_procent__bezwzglêdny := Self.prêdkoœæ_ograniczenie
        else
        if Self.prêdkoœæ_aktualna_procent__bezwzglêdny < -Self.prêdkoœæ_ograniczenie then
          Self.prêdkoœæ_aktualna_procent__bezwzglêdny := -Self.prêdkoœæ_ograniczenie;

      end;
    //---//if    (  Abs( Self.prêdkoœæ_aktualna_procent__bezwzglêdny ) > 0  ) (...)


  if    ( Self.czy_samolot )
    and ( Self.AbsolutePosition.Y < zanurzenie_spowalnianie_g³êbokoœæ_od_c ) then // Zanurzenie samolotu spowalnia ruch.
    Self.prêdkoœæ_aktualna_procent__bezwzglêdny := Self.prêdkoœæ_aktualna_procent__bezwzglêdny * 0.5;


  if Self.prêdkoœæ__kolizja_zwalnianie <> 0 then
    Self.prêdkoœæ__kolizja_zwalnianie := 0;

  //if Self.prêdkoœæ_przyspieszanie__kolizja_spowolnienie then
  //  Self.prêdkoœæ_przyspieszanie__kolizja_spowolnienie := false;


  if Self.czy_samolot__kolizja__kotwica then
    Self.czy_samolot__kolizja__kotwica := false;

end;//---//Funkcja Prêdkoœæ_Procent_Zmieñ().

//Funkcja Skrêt_Procent_Zmieñ().
procedure TStatek.Skrêt_Procent_Zmieñ( const delta_czasu_f : double );
var
  i : integer;
begin

  //
  // Funkcja modyfikuje skrêt w procentach.
  //
  //  Zmiana skrêtu odbywa siê zawsze pe³n¹ moc¹ i liniowo.
  //

  if Self.uszkodzone_czas_sekundy_i__ster <> 0 then
    Exit;


  if Self.skrêt_aktualny_procent > Self.skrêt_zadany_procent then
    begin

      // Lewo.

      Self.skrêt_aktualny_procent := Self.skrêt_aktualny_procent - Self.skrêt_szybkoœæ_wychylania_steru * delta_czasu_f;

      if Self.skrêt_aktualny_procent < Self.skrêt_zadany_procent then
       Self.skrêt_aktualny_procent := Self.skrêt_zadany_procent;

    end
  else//if Self.skrêt_aktualny_procent > Self.skrêt_zadany_procent then
  if Self.skrêt_aktualny_procent < Self.skrêt_zadany_procent then
    begin

      // Prawo.

      Self.skrêt_aktualny_procent := Self.skrêt_aktualny_procent + Self.skrêt_szybkoœæ_wychylania_steru * delta_czasu_f;

      if Self.skrêt_aktualny_procent > Self.skrêt_zadany_procent then
       Self.skrêt_aktualny_procent := Self.skrêt_zadany_procent;

    end;
  //---//if Self.skrêt_aktualny_procent < Self.skrêt_zadany_procent then


  for i := 0 to Length( Self.ster_t ) - 1 do
    begin

      if i = 0 then
        Self.ster_t[ i ].TurnAngle := Self.skrêt_k¹t_maksymalny * Self.skrêt_aktualny_procent * 0.01
      else//if i = 0 then
        Self.ster_t[ i ].TurnAngle := Self.ster_t[ 0 ].TurnAngle;

    end;
  //---//for i := 0 to Length( Self.ster_t ) - 1 do

end;//---//Funkcja Skrêt_Procent_Zmieñ().

//Funkcja Zanurzenie_Procent_Zmieñ().
procedure TStatek.Zanurzenie_Procent_Zmieñ( const dno_poziom_f : single );
var
  i : integer;
  ztr,
  prêdkoœæ_aktualna_procent__wzglêdny_kopia,
  zanurzenie_pu³ap__szybkoœæ_kopia,
  zanurzenie_pu³ap__szybkoœæ_aktualna_kopia,
  zanurzenie_pu³ap__zadane_procent_kopia
    : real;
  zt_statek_lotniskowiec : TStatek;
begin

  //
  // Funkcja modyfikuje zanurzenie w procentach.
  //
  //  Je¿eli samolot leci zmiana pu³apu odbywa siê pe³n¹ moc¹ i liniowo.
  //  Zmiana zanurzenia odbywa siê pe³n¹ moc¹ i liniowo ale zwalnia gdy zanurzenie aktualne zbli¿a siê do zanurzenia zadanego.
  //  Prêdkoœæ aktualna statku zwiêksza szybkoœæ zanurzenia o po³owê (100% prêdkoœci statku zwiêksza szybkoœæ zanurzenia o 50%).
  //  Nie trzeba korygowaæ o deltê czasu, gdy¿ obecnie algorytm nie uwzglêdnia szybkoœci zmiany prêdkoœci zanurzenia.
  //


  if Self.punkty_¿ycia_aktualne <= 0 then
    begin

      if Self.zanurzenie_pu³ap__szybkoœæ_aktualna <> 0 then
        Self.zanurzenie_pu³ap__szybkoœæ_aktualna := 0;

      if Self.prêdkoœæ_przyspieszanie__kolizja_spowolnienie then
        Self.prêdkoœæ_przyspieszanie__kolizja_spowolnienie := false;

      Exit;

    end;
  //---//if Self.punkty_¿ycia_aktualne <= 0 then


  // Wylicza jaka mo¿e byæ maksymalna prêdkoœæ zanurzania.
  if Self.zanurzenie_pu³ap__maksymalne <> 0 then
    Self.zanurzenie_pu³ap__aktualne_procent := Self.zanurzenie_pu³ap__aktualne * 100 / Self.zanurzenie_pu³ap__maksymalne
  else//if Self.zanurzenie_pu³ap__maksymalne <> 0 then
    if Self.czy_zanurzanie then
      Self.zanurzenie_pu³ap__aktualne_procent := 0
    else//if Self.czy_zanurzanie then
      begin

        // Aby statki, które siê nie zanurzaj¹ wyp³ywa³y na powierzchniê po opadniêciu spowodowanym grawitacj¹.

        if Self.zanurzenie_pu³ap__aktualne > 0 then
          Self.zanurzenie_pu³ap__aktualne_procent := Self.zanurzenie_pu³ap__aktualne
        else//if Self.zanurzenie_pu³ap__aktualne > 0 then
          Self.zanurzenie_pu³ap__aktualne_procent := 0;

      end;
    //---//if Self.czy_zanurzanie then


  prêdkoœæ_aktualna_procent__wzglêdny_kopia := Self.prêdkoœæ_aktualna_procent__wzglêdny;

  if    ( Self.czy_samolot )
    and ( Self.czy_samolot__na_lotniskowcu )
    and ( Self.Samolot_Na_Lotniskowcu() <> nil )
    and ( Self.Samolot_Na_Lotniskowcu().prêdkoœæ_aktualna <> 0 ) then
    begin

      // Je¿eli lotniskowiec p³ynie.

      {$region 'Koryguje prêdkoœæ samolotu o prêdkoœæ statku (tylko do obliczeñ).'}
      zt_statek_lotniskowiec := Self.Samolot_Na_Lotniskowcu();

      ztr := // K¹t miêdzy samolotem i lotniskowcem. Wartoœæ jest zawsze dodatnia, bez znaczenia, jak i nie okreœla, w któr¹ stronê s¹ obrócone obiekty.
        System.Math.RadToDeg
          (
            GLS.VectorGeometry.AngleBetweenVectors
              (
                GLS.VectorGeometry.VectorMake( zt_statek_lotniskowiec.AbsoluteDirection.X, 0, zt_statek_lotniskowiec.AbsoluteDirection.Z ),
                GLS.VectorGeometry.VectorMake( Self.AbsoluteDirection.X, 0, Self.AbsoluteDirection.Z ),
                GLS.VectorGeometry.VectorMake( 0, 0, 0 )
              )
          );

      if   ( ztr <= samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c * 3 )
        or ( ztr >= 180 - samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c * 3 ) then
        begin

          // Je¿eli samolot jest pod odpowiednim k¹tem wzglêdem lotniskowca.

          // Je¿eli statek p³ynie w przeciwnym kierunku do kierunku startu samolotu to samolot po oderwaniu siê od pok³adu zostanie spowolniony.
          if   (
                     ( ztr <= samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c * 3 ) // Samolot l¹duje od rufy.
                 and (  System.Math.Sign( Self.prêdkoœæ_aktualna ) <> System.Math.Sign( zt_statek_lotniskowiec.prêdkoœæ_aktualna )  ) // Lotniskowiec porusza siê do ty³u, a samolot porusza siê do przodu albo odwrotnie.
               )
            or (
                     ( ztr >= 180 - samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c * 3 ) // Samolot l¹duje od dziobu.
                 and (  System.Math.Sign( Self.prêdkoœæ_aktualna ) = System.Math.Sign( zt_statek_lotniskowiec.prêdkoœæ_aktualna )  ) // Lotniskowiec i samolot poruszaj¹ siê do przodu / ty³u.
               ) then
            i := -1 // Tutaj tymczasowo zapamiêtuje znak.
          else//if   ( (...)
            i := 1; // Tutaj tymczasowo zapamiêtuje znak.


          // Koryguje prêdkoœæ samolotu o prêdkoœæ statku.
          if Self.prêdkoœæ_maksymalna <> 0 then
            ztr := 100 * Abs( zt_statek_lotniskowiec.prêdkoœæ_aktualna ) / Self.prêdkoœæ_maksymalna // Jaki procent maksymalnej prêdkoœci samolotu stanowi aktualna prêdkoœæ statku.
          else//if Self.prêdkoœæ_maksymalna <> 0 then
            ztr := 0;

          prêdkoœæ_aktualna_procent__wzglêdny_kopia := prêdkoœæ_aktualna_procent__wzglêdny_kopia + ztr * i;

        end;
      //---//if   ( ztr <= samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c * 3 ) (...)
      {$endregion 'Koryguje prêdkoœæ samolotu podczas l¹dowania na lotniskowcu (tylko do obliczeñ).'}

    end;
  //---//if    ( Self.czy_samolot ) (...)


  if    ( Self.czy_samolot )
    and ( Self.AbsolutePosition.Y >= 0 ) // Je¿eli samolot jest pod wod¹ to nie leci.
    and (  Abs( prêdkoœæ_aktualna_procent__wzglêdny_kopia ) >= samolot_prêdkoœæ_lotu_procent_minimalny_c  ) then
    begin

      // Samolot leci.

      if Self.uszkodzone_czas_sekundy_i__ster_g³êbokoœci <> 0 then
        zanurzenie_pu³ap__zadane_procent_kopia := 0 // Podczas uszkodzenia nie mo¿e zmieniæ pu³apu.
      else//if Self.uszkodzone_czas_sekundy_i__ster_g³êbokoœci <> 0 then
        zanurzenie_pu³ap__zadane_procent_kopia := Self.zanurzenie_pu³ap__zadane_procent;


      //zanurzenie_pu³ap__szybkoœæ_aktualna_kopia := -( Self.zanurzenie_pu³ap__szybkoœæ * Self.zanurzenie_pu³ap__zadane_procent * 0.01 * Abs( prêdkoœæ_aktualna_procent__wzglêdny_kopia ) * 0.01 );
      zanurzenie_pu³ap__szybkoœæ_aktualna_kopia := -( Self.zanurzenie_pu³ap__szybkoœæ * zanurzenie_pu³ap__zadane_procent_kopia * 0.01 * Abs( prêdkoœæ_aktualna_procent__wzglêdny_kopia ) * 0.01 );

      // Aby obs³ugiwaæ wp³yw kolizji na prêdkoœæ zanurzania próbuje ustawiæ prêdkoœæ zanurzania na maksymaln¹ obliczon¹.
      if Abs( Self.zanurzenie_pu³ap__szybkoœæ_aktualna - zanurzenie_pu³ap__szybkoœæ_aktualna_kopia ) > Self.zanurzenie_pu³ap__szybkoœæ * 0.01 then
        begin

          if Self.zanurzenie_pu³ap__szybkoœæ_aktualna < zanurzenie_pu³ap__szybkoœæ_aktualna_kopia then
            Self.zanurzenie_pu³ap__szybkoœæ_aktualna := Self.zanurzenie_pu³ap__szybkoœæ_aktualna + Self.zanurzenie_pu³ap__szybkoœæ * 0.01
          else//if Self.zanurzenie_pu³ap__szybkoœæ_aktualna < zanurzenie_pu³ap__szybkoœæ_aktualna_kopia then
            Self.zanurzenie_pu³ap__szybkoœæ_aktualna := Self.zanurzenie_pu³ap__szybkoœæ_aktualna - Self.zanurzenie_pu³ap__szybkoœæ * 0.01;

        end
      else//if Abs( Self.zanurzenie_pu³ap__szybkoœæ_aktualna - zanurzenie_pu³ap__szybkoœæ_aktualna_kopia ) > 0 then
        Self.zanurzenie_pu³ap__szybkoœæ_aktualna := zanurzenie_pu³ap__szybkoœæ_aktualna_kopia;
      //---// Aby obs³ugiwaæ wp³yw kolizji na prêdkoœæ zanurzania próbuje ustawiæ prêdkoœæ zanurzania na maksymaln¹ obliczon¹.


      if   (
                 ( Self.zanurzenie_pu³ap__aktualne_procent > 100 ) // Aby nie wznosi³ siê ponad pu³ap maksymalny.
             and ( Self.zanurzenie_pu³ap__szybkoœæ_aktualna < 0 )
           )
        or (
                 //( Self.AbsolutePosition.Y < 0 ) //???
                 ( Self.prêdkoœæ_przyspieszanie__kolizja_spowolnienie )
             and ( Self.zanurzenie_pu³ap__szybkoœæ_aktualna > 0 )
           ) then
        Self.zanurzenie_pu³ap__szybkoœæ_aktualna := 0;

    end
  else//if    ( Self.czy_samolot ) (...)
    begin

      // Nie samolot lub samolot 'nie leci'.

      if Self.uszkodzone_czas_sekundy_i__ster_g³êbokoœci <> 0 then
        zanurzenie_pu³ap__zadane_procent_kopia := Self.zanurzenie_pu³ap__aktualne_procent // Podczas uszkodzenia nie mo¿e zmieniæ zanurzenia.
      else//if Self.uszkodzone_czas_sekundy_i__ster_g³êbokoœci <> 0 then
        zanurzenie_pu³ap__zadane_procent_kopia := Self.zanurzenie_pu³ap__zadane_procent;


      // Aby samolot nie zanurza³ siê pod wodê i aby stoj¹cy samolot sam nie zaczyna³ siê wznosiæ.
      // Wariant bez Self.uszkodzone_czas_sekundy_i__ster_g³êbokoœci.
      //if Self.czy_samolot then
      //  zanurzenie_pu³ap__zadane_procent_kopia := 0
      //else//if Self.czy_samolot then
      //  zanurzenie_pu³ap__zadane_procent_kopia := Self.zanurzenie_pu³ap__zadane_procent;
      if    ( Self.czy_samolot )
        and ( zanurzenie_pu³ap__zadane_procent_kopia <> 0 ) then
        zanurzenie_pu³ap__zadane_procent_kopia := 0;


      if not Self.czy_samolot then
        zanurzenie_pu³ap__szybkoœæ_kopia := Self.zanurzenie_pu³ap__szybkoœæ
      else//if not Self.czy_samolot then
        zanurzenie_pu³ap__szybkoœæ_kopia := 1; // Je¿eli samolot nie leci to jego szybkoœæ zanurzania jest domyœlna.


      //if Abs( Self.zanurzenie_pu³ap__aktualne_procent - zanurzenie_pu³ap__zadane_procent_kopia ) > zanurzanie_precyzja_c then
      //if   ( // Je¿eli samolot ma du¿y maksymalny pu³ap to zbyt daleko od poziomu wody jest zwalniane wynurzanie.
      //           ( Self.czy_samolot )
      //       and ( Self.zanurzenie_pu³ap__aktualne_procent < 0 )
      //     )
      //  or (
      //           ( not Self.czy_samolot )
      //       //and (  Abs( Self.zanurzenie_pu³ap__aktualne_procent - zanurzenie_pu³ap__zadane_procent_kopia ) > zanurzanie_precyzja_c  )
      //       and (  Abs( Self.zanurzenie_pu³ap__aktualne_procent - zanurzenie_pu³ap__zadane_procent_kopia ) > zanurzanie_precyzja_c + Abs( Self.falowanie_gl_dummy_cube.Position.Y ) * 2  ) // Zmniejsza wp³yw fal (Fale_CheckBox) (stabilizuje utrzymywan¹ g³êbokoœæ).
      //     ) then
      //  zanurzenie_pu³ap__szybkoœæ_aktualna_kopia := zanurzenie_pu³ap__szybkoœæ_kopia + zanurzenie_pu³ap__szybkoœæ_kopia * Abs( prêdkoœæ_aktualna_procent__wzglêdny_kopia ) * 0.005 // 0.005 = 0.01 * 0.5. // Prêdkoœæ aktualna statku zwiêksza szybkoœæ zanurzenia.
      //else//if Abs( Self.zanurzenie_pu³ap__aktualne_procent - zanurzenie_pu³ap__zadane_procent_kopia ) > zanurzanie_precyzja_c then
      //  //if Abs( Self.zanurzenie_pu³ap__aktualne_procent - zanurzenie_pu³ap__zadane_procent_kopia ) > zanurzanie_precyzja_c * 0.1 then
      //  if Abs( Self.zanurzenie_pu³ap__aktualne_procent - zanurzenie_pu³ap__zadane_procent_kopia ) > zanurzanie_precyzja_c * 0.1 + Abs( Self.falowanie_gl_dummy_cube.Position.Y ) * 2 then // Zmniejsza wp³yw fal (Fale_CheckBox) (stabilizuje utrzymywan¹ g³êbokoœæ).
      //    zanurzenie_pu³ap__szybkoœæ_aktualna_kopia := Abs( Self.zanurzenie_pu³ap__aktualne_procent - zanurzenie_pu³ap__zadane_procent_kopia ) * 0.1 // Ustali dok³adniej g³êbokoœæ zanurzenia aby inne obliczenia nie by³y nara¿one na du¿e b³êdy.
      //  else//if Abs( Self.zanurzenie_pu³ap__aktualne_procent - zanurzenie_pu³ap__zadane_procent_kopia ) > zanurzanie_precyzja_c then
      //    zanurzenie_pu³ap__szybkoœæ_aktualna_kopia := 0;
      if   ( // Je¿eli samolot ma du¿y maksymalny pu³ap to zbyt daleko od poziomu wody jest zwalniane wynurzanie.
                 ( Self.czy_samolot )
             and ( Self.zanurzenie_pu³ap__aktualne_procent < 0 )
           )
        or (
                 ( not Self.czy_samolot )
             and (  Abs( Self.zanurzenie_pu³ap__aktualne_procent - zanurzenie_pu³ap__zadane_procent_kopia ) > 10  ) // Je¿eli ró¿nica miêdzy zanurzeniem aktualnym a zadanym jest mniejsza ni¿ 10% to zmniejsza szybkoœæ zanurzania.
           ) then
        zanurzenie_pu³ap__szybkoœæ_aktualna_kopia := zanurzenie_pu³ap__szybkoœæ_kopia + zanurzenie_pu³ap__szybkoœæ_kopia * Abs( prêdkoœæ_aktualna_procent__wzglêdny_kopia ) * 0.005 // 0.005 = 0.01 * 0.5. // Prêdkoœæ aktualna statku zwiêksza szybkoœæ zanurzenia.
      else//if   ( (...)
        if Abs( Self.zanurzenie_pu³ap__aktualne_procent - zanurzenie_pu³ap__zadane_procent_kopia ) > zanurzanie_precyzja_c * 0.1 then
          //zanurzenie_pu³ap__szybkoœæ_aktualna_kopia := (  100 * Abs( Self.zanurzenie_pu³ap__aktualne_procent - zanurzenie_pu³ap__zadane_procent_kopia ) * 0.1  ) * zanurzenie_pu³ap__szybkoœæ_kopia * 0.01
          zanurzenie_pu³ap__szybkoœæ_aktualna_kopia := Abs( Self.zanurzenie_pu³ap__aktualne_procent - zanurzenie_pu³ap__zadane_procent_kopia ) * zanurzenie_pu³ap__szybkoœæ_kopia * 0.1 // Uproszczenie obliczeñ.
        else//if Abs( Self.zanurzenie_pu³ap__aktualne_procent - zanurzenie_pu³ap__zadane_procent_kopia ) > zanurzanie_precyzja_c * 0.1 then
          zanurzenie_pu³ap__szybkoœæ_aktualna_kopia := 0;


      //if    ( zanurzenie_pu³ap__szybkoœæ_aktualna_kopia <> 0 )
      //  and ( Self.zanurzenie_pu³ap__aktualne_procent > zanurzenie_pu³ap__zadane_procent_kopia ) then
      if    ( zanurzenie_pu³ap__szybkoœæ_aktualna_kopia <> 0 )
        and (
                 (
                       ( not Self.czy_samolot )
                   and ( Self.zanurzenie_pu³ap__aktualne_procent > zanurzenie_pu³ap__zadane_procent_kopia )
                 )
              or (
                       ( Self.czy_samolot )
                   and ( Self.zanurzenie_pu³ap__aktualne_procent < zanurzenie_pu³ap__zadane_procent_kopia )
                 )
            ) then
        begin

          // Wynurzanie lub opadanie (samolot).

          zanurzenie_pu³ap__szybkoœæ_aktualna_kopia := -zanurzenie_pu³ap__szybkoœæ_aktualna_kopia;

        end;
      //---//if    ( zanurzenie_pu³ap__szybkoœæ_aktualna_kopia <> 0 ) (...)


      // Aby obs³ugiwaæ wp³yw kolizji na prêdkoœæ zanurzania próbuje ustawiæ prêdkoœæ zanurzania na maksymaln¹ obliczon¹.
      if Abs( Self.zanurzenie_pu³ap__szybkoœæ_aktualna - zanurzenie_pu³ap__szybkoœæ_aktualna_kopia ) > zanurzenie_pu³ap__szybkoœæ_kopia * 0.03 then
        begin

          if Self.zanurzenie_pu³ap__szybkoœæ_aktualna < zanurzenie_pu³ap__szybkoœæ_aktualna_kopia then
            Self.zanurzenie_pu³ap__szybkoœæ_aktualna := Self.zanurzenie_pu³ap__szybkoœæ_aktualna + zanurzenie_pu³ap__szybkoœæ_kopia * 0.03
          else//if Self.zanurzenie_pu³ap__szybkoœæ_aktualna < zanurzenie_pu³ap__szybkoœæ_aktualna_kopia then
            Self.zanurzenie_pu³ap__szybkoœæ_aktualna := Self.zanurzenie_pu³ap__szybkoœæ_aktualna - zanurzenie_pu³ap__szybkoœæ_kopia * 0.03;

        end;
      //---//if Abs( Self.zanurzenie_pu³ap__szybkoœæ_aktualna - zanurzenie_pu³ap__szybkoœæ_aktualna_kopia ) > zanurzenie_pu³ap__szybkoœæ_kopia * 0.03 then
      //---// Aby obs³ugiwaæ wp³yw kolizji na prêdkoœæ zanurzania próbuje ustawiæ prêdkoœæ zanurzania na maksymaln¹ obliczon¹.

    end;
  //---//if    ( Self.czy_samolot ) (...)
  //---// Wylicza jaka mo¿e byæ maksymalna prêdkoœæ zanurzania.


  // Wyhamowywanie wynikaj¹ce z kolizji.
  if   ( not Self.czy_samolot )
    or (
             ( Self.czy_samolot ) // Aby samolot móg³ wystartowaæ.
         and (  Abs( prêdkoœæ_aktualna_procent__wzglêdny_kopia ) >= samolot_prêdkoœæ_lotu_procent_minimalny_c + samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c  )
       ) then
    if    (  Abs( zanurzenie_pu³ap__szybkoœæ_aktualna_kopia ) > 0  )
      and ( Self.zanurzenie_pu³ap__kolizja_zwalnianie <> 0 ) then
      begin

        if Self.zanurzenie_pu³ap__kolizja_zwalnianie >= 100 then
          zanurzenie_pu³ap__szybkoœæ_aktualna_kopia := 0
        else//if Self.zanurzenie_pu³ap___kolizja_zwalnianie >= 100 then
          if Abs( zanurzenie_pu³ap__szybkoœæ_aktualna_kopia ) > 0 then
            zanurzenie_pu³ap__szybkoœæ_aktualna_kopia := zanurzenie_pu³ap__szybkoœæ_aktualna_kopia * ( 100 - Self.zanurzenie_pu³ap__kolizja_zwalnianie ) * 0.01;


        Self.zanurzenie_pu³ap__szybkoœæ_aktualna := zanurzenie_pu³ap__szybkoœæ_aktualna_kopia; // Kolizja wyhamowuje od razu.

      end;
    //---//if    (  Abs( zanurzenie_pu³ap__szybkoœæ_aktualna_kopia ) > 0  ) (...)


  // Aby samolot nie wsi¹ka³ w obiekty.
  if    ( Self.czy_samolot )
    and ( Self.czy_samolot__kolizja )
    and ( Self.zanurzenie_pu³ap__szybkoœæ_aktualna > 0 ) then
    Self.zanurzenie_pu³ap__szybkoœæ_aktualna := 0;


  // Aby nie zanurzy³ siê pod dno.
  if    ( Self.AbsolutePosition.Y <= dno_poziom_f )
    and ( Self.zanurzenie_pu³ap__szybkoœæ_aktualna > 0 ) then
    Self.zanurzenie_pu³ap__szybkoœæ_aktualna := 0;


  if Self.zanurzenie_pu³ap__kolizja_zwalnianie <> 0 then
    Self.zanurzenie_pu³ap__kolizja_zwalnianie := 0;


  {$region 'Wariant 1.'}
  //if Self.zanurzenie_pu³ap__aktualne_procent > Self.zanurzenie_pu³ap__zadane_procent then
  //  begin
  //
  //    // Wynurzanie.
  //
  //    Self.zanurzenie_pu³ap__aktualne_procent := Self.zanurzenie_pu³ap__aktualne_procent - (  Self.zanurzenie_pu³ap__szybkoœæ + Self.zanurzenie_pu³ap__szybkoœæ * Abs( prêdkoœæ_aktualna_procent__wzglêdny_kopia ) * 0.005  ); // 0.005 = 0.01 * 0.5.
  //
  //    if Self.zanurzenie_pu³ap__aktualne_procent < Self.zanurzenie_pu³ap__zadane_procent then
  //     Self.zanurzenie_pu³ap__aktualne_procent := Self.zanurzenie_pu³ap__zadane_procent;
  //
  //  end
  //else//if Self.zanurzenie_pu³ap__aktualne_procent > Self.zanurzenie_pu³ap__aktualne_procent then
  //if Self.zanurzenie_pu³ap__aktualne_procent < Self.zanurzenie_pu³ap__zadane_procent then
  //  begin
  //
  //    // Zanurzanie.
  //
  //    Self.zanurzenie_pu³ap__aktualne_procent := Self.zanurzenie_pu³ap__aktualne_procent + (  Self.zanurzenie_pu³ap__szybkoœæ + Self.zanurzenie_pu³ap__szybkoœæ * Abs( prêdkoœæ_aktualna_procent__wzglêdny_kopia ) * 0.005  ); // 0.005 = 0.01 * 0.5.
  //
  //    if Self.zanurzenie_pu³ap__aktualne_procent > Self.zanurzenie_pu³ap__zadane_procent then
  //     Self.zanurzenie_pu³ap__aktualne_procent := Self.zanurzenie_pu³ap__zadane_procent;
  //
  //  end;
  ////---//if Self.zanurzenie_pu³ap__aktualne_procent < Self.zanurzenie_pu³ap__zadane_procent then
  {$endregion 'Wariant 1.'}


  if Self.prêdkoœæ_przyspieszanie__kolizja_spowolnienie then
    Self.prêdkoœæ_przyspieszanie__kolizja_spowolnienie := false;


  // Wychyla stery g³êbokoœci.
  for i := 0 to Length( Self.ster_g³êbokoœci_t ) - 1 do
    begin

      if i = 0 then
        begin

          if Self.czy_samolot then
            begin

              // Samolot.

              //Self.ster_g³êbokoœci_t[ i ].PitchAngle := -45 * Self.zanurzenie_pu³ap__zadane_procent * 0.01; // Docelowe wychylenie sterów g³êbokoœci
              if Self.uszkodzone_czas_sekundy_i__ster_g³êbokoœci <> 0 then
                ztr := -45 * zanurzenie_pu³ap__zadane_procent_kopia * 0.01 // Docelowe wychylenie sterów g³êbokoœci
              else//if Self.uszkodzone_czas_sekundy_i__ster_g³êbokoœci <> 0 then
                ztr := -45 * Self.zanurzenie_pu³ap__zadane_procent * 0.01; // Docelowe wychylenie sterów g³êbokoœci

              if Abs( Self.ster_g³êbokoœci_t[ i ].PitchAngle - ztr ) > Self.zanurzenie_pu³ap__szybkoœæ * 0.1 then
                if Self.ster_g³êbokoœci_t[ i ].PitchAngle > ztr then
                  Self.ster_g³êbokoœci_t[ i ].PitchAngle := Self.ster_g³êbokoœci_t[ i ].PitchAngle - Self.zanurzenie_pu³ap__szybkoœæ * 0.1
                else//if Self.ster_g³êbokoœci_t[ i ].PitchAngle > ztr then
                  Self.ster_g³êbokoœci_t[ i ].PitchAngle := Self.ster_g³êbokoœci_t[ i ].PitchAngle + Self.zanurzenie_pu³ap__szybkoœæ * 0.1;

            end
          else//if Self.czy_samolot then
            begin

              // Nie samolot.

              ztr := Self.zanurzenie_pu³ap__aktualne_procent;

              if ztr < 0 then
                ztr := 0
              else//if ztr < 0 then
              if ztr > 100 then
                ztr := 100;

              if zanurzenie_pu³ap__zadane_procent_kopia > 100 then // Ze wzglêdu na przekraczanie 100% g³êbokoœci zanurzenia.
                zanurzenie_pu³ap__zadane_procent_kopia := 100;


              //ztr := 45 * ( ztr - Self.zanurzenie_pu³ap__zadane_procent ) * 0.01; // Docelowe wychylenie sterów g³êbokoœci
              ztr := 45 * ( ztr - zanurzenie_pu³ap__zadane_procent_kopia ) * 0.01; // Docelowe wychylenie sterów g³êbokoœci

              if Self.prêdkoœæ_aktualna < 0 then
                ztr := -ztr;

              if Abs( Self.ster_g³êbokoœci_t[ i ].PitchAngle - ztr ) > Self.zanurzenie_pu³ap__szybkoœæ then
                if Self.ster_g³êbokoœci_t[ i ].PitchAngle > ztr then
                  Self.ster_g³êbokoœci_t[ i ].PitchAngle := Self.ster_g³êbokoœci_t[ i ].PitchAngle - Self.zanurzenie_pu³ap__szybkoœæ
                else//if Self.ster_g³êbokoœci_t[ i ].PitchAngle > ztr then
                  Self.ster_g³êbokoœci_t[ i ].PitchAngle := Self.ster_g³êbokoœci_t[ i ].PitchAngle + Self.zanurzenie_pu³ap__szybkoœæ;

            end;
          //---//if Self.czy_samolot then

        end
      else//if i = 0 then
        Self.ster_g³êbokoœci_t[ i ].PitchAngle := Self.ster_g³êbokoœci_t[ 0 ].PitchAngle;

    end;
  //---//for i := 0 to Length( Self.ster_g³êbokoœci_t ) - 1 do
  //---// Wychyla stery g³êbokoœci.

end;//---//Funkcja Zanurzenie_Procent_Zmieñ().

//Funkcja Prêdkoœæ_Aktualna_O_Zanurzenie_Koryguj().
procedure TStatek.Prêdkoœæ_Aktualna_O_Zanurzenie_Koryguj();
var
  ztr : real;
begin

  //
  // Funkcja modyfikuje aktualn¹ prêdkoœæ statku w zale¿noœci od zanurzenia (zanurzenie spowalnia ruch).
  //

  if Self.AbsolutePosition.Y < zanurzenie_spowalnianie_g³êbokoœæ_od_c then
    begin

      // Tylko pod wod¹ nastêpuje spowolnienie (samolotów w powietrzu nie spowalnia).
      // Lepiej modyfikowaæ wspó³czynnik zwalniania, od razu wp³ywa na hamowanie.

      // Wariant ograniczania prêdkoœci o 1 % na ka¿dy 1 % zanurzenia.
      //if Self.zanurzenie_pu³ap__aktualne_procent <= 90 then
      //  ztr := Abs( Self.zanurzenie_pu³ap__aktualne_procent )
      //else//if Self.zanurzenie_pu³ap__aktualne_procent <= 90 then
      //if Self.zanurzenie_pu³ap__aktualne_procent >= 200 then
      //  ztr := 98
      //else//if Self.zanurzenie_pu³ap__aktualne_procent >= 200 then
      //if Self.zanurzenie_pu³ap__aktualne_procent >= 150 then
      //  ztr := 95
      //else//if Self.zanurzenie_pu³ap__aktualne_procent >= 150 then
      //  ztr := 90;

      // Wariant ograniczania prêdkoœci o 0.5 % na ka¿dy 1 % zanurzenia.
      if Self.zanurzenie_pu³ap__aktualne_procent >= 250 then
        ztr := 99
      else//if Self.zanurzenie_pu³ap__aktualne_procent >= 250 then
      if Self.zanurzenie_pu³ap__aktualne_procent <= 190 then
        ztr := Abs( Self.zanurzenie_pu³ap__aktualne_procent ) * 0.5
      else//if Self.zanurzenie_pu³ap__aktualne_procent <= 190 then
        ztr := 95;

      Self.prêdkoœæ_aktualna :=
          Self.prêdkoœæ_aktualna
        * ( 100 - ztr ) * 0.01; // Im wiêksze zanurzenie tym bardziej zmniejsza siê aktualna prêdkoœæ.

    end;
  //---//if Self.AbsolutePosition.Y < zanurzenie_spowalnianie_g³êbokoœæ_od_c then

end;//---//Funkcja Prêdkoœæ_Aktualna_O_Zanurzenie_Koryguj().

//Funkcja Zanurzenie_Peryskopowe__Jako__Zadane_Procent_Wylicz().
function TStatek.Zanurzenie_Peryskopowe__Jako__Zadane_Procent_Wylicz() : real;
begin

  //
  // Funkcja wylicza jakim procentem zanurzenia jest zanurzenie peryskopowe.
  //
  // Zwraca procent zanurzenia bêd¹cy zanurzeniem peryskopowym lub zero.
  //

  if Self.zanurzenie_pu³ap__maksymalne <> 0 then
    Result := System.Math.Floor( Self.zanurzenie_peryskopowe_do * 100 / Self.zanurzenie_pu³ap__maksymalne ) - zanurzanie_precyzja_c
  else//if Self.zanurzenie_pu³ap__maksymalne <> 0 then
    Result := 0;

end;//---//Funkcja Zanurzenie_Peryskopowe__Jako__Zadane_Procent_Wylicz().

//Funkcja Zanurzenie_Peryskopowe__Utrzymywane().
function TStatek.Zanurzenie_Peryskopowe__Utrzymywane() : boolean;
begin

  //
  // Funkcja sprawdza czy statek aktualnie utrzymuje zanurzenie peryskopowe.
  //
  // Zwraca prawdê gdy statek aktualnie utrzymuje zanurzenie peryskopowe.
  //

  if   ( Self.czy_zanurzanie )
   and ( not Self.czy_samolot )
   and ( Self.zanurzenie_pu³ap__aktualne >= Self.zanurzenie_peryskopowe_do - zanurzanie_precyzja_c ) // 5 -> od 4,5 do 5,5.
   and ( Self.zanurzenie_pu³ap__aktualne <= Self.zanurzenie_peryskopowe_do + zanurzanie_precyzja_c ) then
    Result := true
  else//if   ( Self.czy_zanurzanie ) (...)
    Result := false;

end;//---//Funkcja Zanurzenie_Peryskopowe__Utrzymywane().

//Funkcja Zanurzenie_Peryskopowe__Przekroczone().
function TStatek.Zanurzenie_Peryskopowe__Przekroczone() : boolean;
begin

  //
  // Funkcja sprawdza czy statek jest aktualnie zanurzony poni¿ej zanurzenia peryskopowego.
  //
  // Zwraca prawdê gdy statek jest aktualnie zanurzony poni¿ej zanurzenia peryskopowego.
  //

  if   ( Self.czy_zanurzanie )
   and ( not Self.czy_samolot )
   //and ( Self.zanurzenie_pu³ap__aktualne <= Self.zanurzenie_peryskopowe_do )
   and ( Self.zanurzenie_pu³ap__aktualne > Self.zanurzenie_peryskopowe_do + zanurzanie_precyzja_c ) then // 5 -> wiêksze od 5,5.
    Result := true
  else//if   ( Self.czy_zanurzanie ) (...)
    Result := false;

end;//---//Funkcja Zanurzenie_Peryskopowe__Przekroczone().

//Funkcja Zanurzenie_Strza³_Przekroczone().
function TStatek.Zanurzenie_Strza³_Przekroczone() : boolean;
begin

  //
  // Funkcja sprawdza czy statek jest aktualnie zanurzony poni¿ej poziomu uniemo¿liwiaj¹cego strzelanie z broni nawodnej.
  //
  // Zwraca prawdê gdy statek jest aktualnie zanurzony poni¿ej zanurzenia poziomu uniemo¿liwiaj¹cego strzelanie z broni nawodnej.
  //

  if   ( not Self.czy_zanurzanie )
    or (
             ( Self.czy_zanurzanie )
         and ( Self.zanurzenie_pu³ap__aktualne_procent <= zanurzanie_precyzja_c )
       ) then
    Result := false
  else//if   ( not Self.czy_zanurzanie ) (...)
    Result := true;

end;//---//Funkcja Zanurzenie_Strza³_Przekroczone().

//Funkcja Amunicja_Rodzaj_Zbiór_Wyznacz().
procedure TStatek.Amunicja_Rodzaj_Zbiór_Wyznacz();
begin

  //
  // Funkcja na podstawie wybranych rodzajów amunicji tworzy zbiór rodzajów amunicji.
  //


  if Self.amunicja_rodzaj_wybrana__wszystkie then
    Self.amunicja_rodzaj_zbiór := [ Typy_Wspolne.ar_Wszystkie ]
  else//if Self.amunicja_rodzaj_wybrana__wszystkie then
    begin

      Self.amunicja_rodzaj_zbiór := [];

      if Self.amunicja_rodzaj_wybrana__artyleria then
        Self.amunicja_rodzaj_zbiór := Self.amunicja_rodzaj_zbiór + [ Typy_Wspolne.ar_Artyleria ];

      if Self.amunicja_rodzaj_wybrana__bomba_g³êbinowa then
        Self.amunicja_rodzaj_zbiór := Self.amunicja_rodzaj_zbiór + [ Typy_Wspolne.ar_Bomba_G³êbinowa ];

      if Self.amunicja_rodzaj_wybrana__je¿e_g³êbinowe then
        Self.amunicja_rodzaj_zbiór := Self.amunicja_rodzaj_zbiór + [ Typy_Wspolne.ar_Je¿e_G³êbinowe ];

      if Self.amunicja_rodzaj_wybrana__pocisk then
        Self.amunicja_rodzaj_zbiór := Self.amunicja_rodzaj_zbiór + [ Typy_Wspolne.ar_Pocisk ];

      if Self.amunicja_rodzaj_wybrana__torpeda then
        Self.amunicja_rodzaj_zbiór := Self.amunicja_rodzaj_zbiór + [ Typy_Wspolne.ar_Torpeda ];

    end;
  //---//if Self.amunicja_rodzaj_wybrana__wszystkie then

end;//---//Funkcja Amunicja_Rodzaj_Zbiór_Wyznacz().

//Funkcja Cel_Wspó³rzêdne_Ustaw().
procedure TStatek.Cel_Wspó³rzêdne_Ustaw( const cel_wspó³rzêdne_bezwzglêdne_affine_vektor_f : GLS.VectorGeometry.TAffineVector; const statek_celownicza_linia_tylko_f : boolean = false );

  //Funkcja Wspó³rzêdne_Dla_Linii_Ustaw() w Cel_Wspó³rzêdne_Ustaw().
  procedure Wspó³rzêdne_Dla_Linii_Ustaw( gt_lines_f : TGLLines );
  var
    zt_affine_vektor : GLS.VectorGeometry.TAffineVector;
  begin

    if   ( gt_lines_f = nil )
      or (  not Assigned( gt_lines_f )  ) then
      Exit;


    zt_affine_vektor := gt_lines_f.AbsoluteToLocal( cel_wspó³rzêdne_bezwzglêdne_affine_vektor_f );


    if not Self.obracaj_dzia³a__na_k¹t_wyznaczony then
      begin

        gt_lines_f.Nodes[ 1 ].X := zt_affine_vektor.X;
        gt_lines_f.Nodes[ 1 ].Z := zt_affine_vektor.Z;

      end;
    //---//if not Self.obracaj_dzia³a__na_k¹t_wyznaczony then

    if not Self.podnoœ_lufy__na_k¹t_wyznaczony then
      gt_lines_f.Nodes[ 1 ].Y := zt_affine_vektor.Y;

  end;//---//Funkcja Wspó³rzêdne_Dla_Linii_Ustaw() w Cel_Wspó³rzêdne_Ustaw().

var
  i : integer;
begin//Funkcja Cel_Wspó³rzêdne_Ustaw().

  //
  // Funkcja ustawia wspó³rzêdne celu.
  //
  // Parametry:
  //   statek_celownicza_linia_tylko_f:
  //     false - ustawia wspó³rzêdne dla wszystkich linii.
  //     true - ustawia wspó³rzêdne tylko dla statku aby u klientów poprawnie mo¿na by³o ustawiaæ kamerê w widoku artyleryjskim.
  //

  Wspó³rzêdne_Dla_Linii_Ustaw( Self.celownicza_linia );
  //Self.celownicza_linia.Nodes[ 1 ].AsAffineVector := Self.celownicza_linia.AbsoluteToLocal( cel_wspó³rzêdne_bezwzglêdne_affine_vektor_f );


  if statek_celownicza_linia_tylko_f then
    Exit;


  if Self.si__statek_gracza__strzela <> sisgs_Wszystkim then
    begin

      if   ( Typy_Wspolne.ar_Artyleria in Self.amunicja_rodzaj_zbiór )
        or ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór ) then
        for i := 0 to Length( Self.artyleria_t ) - 1 do
          begin

            Wspó³rzêdne_Dla_Linii_Ustaw( Self.artyleria_t[ i ].cel_linia );

          end;
        //---//for i := 0 to Length( Self.artyleria_t ) - 1 do


      if   ( Typy_Wspolne.ar_Bomba_G³êbinowa in Self.amunicja_rodzaj_zbiór )
        or ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór ) then
        for i := 0 to Length( Self.bomba_g³êbinowa_t ) - 1 do
          begin

            Wspó³rzêdne_Dla_Linii_Ustaw( Self.bomba_g³êbinowa_t[ i ].cel_linia );
            Self.bomba_g³êbinowa_t[ i ].cel_linia.Nodes[ 1 ].Y := Self.bomba_g³êbinowa_t[ i ].cel_linia.Nodes[ 0 ].Y; // Ta broñ nie unosi luf.

          end;
        //---//for i := 0 to Length( Self.bomba_g³êbinowa_t ) - 1 do


      if   ( Typy_Wspolne.ar_Pocisk in Self.amunicja_rodzaj_zbiór )
        or ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór ) then
        for i := 0 to Length( Self.dzia³a_t ) - 1 do
          begin

            Wspó³rzêdne_Dla_Linii_Ustaw( Self.dzia³a_t[ i ].cel_linia );

          end;
        //---//for i := 0 to Length( Self.dzia³a_t ) - 1 do


      if   ( Typy_Wspolne.ar_Je¿e_G³êbinowe in Self.amunicja_rodzaj_zbiór )
        or ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór ) then
        for i := 0 to Length( Self.je¿e_g³êbinowe_t ) - 1 do
          begin

            Wspó³rzêdne_Dla_Linii_Ustaw( Self.je¿e_g³êbinowe_t[ i ].cel_linia );
            Self.je¿e_g³êbinowe_t[ i ].cel_linia.Nodes[ 1 ].Y := Self.je¿e_g³êbinowe_t[ i ].cel_linia.Nodes[ 0 ].Y; // Ta broñ nie unosi luf.

          end;
        //---//for i := 0 to Length( Self.je¿e_g³êbinowe_t ) - 1 do


      if   ( Typy_Wspolne.ar_Torpeda in Self.amunicja_rodzaj_zbiór )
        or ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór ) then
        for i := 0 to Length( Self.torpedy_wyrzutnie_t ) - 1 do
          begin

            Wspó³rzêdne_Dla_Linii_Ustaw( Self.torpedy_wyrzutnie_t[ i ].cel_linia );
            Self.torpedy_wyrzutnie_t[ i ].cel_linia.Nodes[ 1 ].Y := Self.torpedy_wyrzutnie_t[ i ].cel_linia.Nodes[ 0 ].Y; // Ta broñ nie unosi luf.

          end;
        //---//for i := 0 to Length( Self.torpedy_wyrzutnie_t ) - 1 do

    end;
  //---//if Self.si__statek_gracza__strzela <> sisgs_Wszystkim then


  //if   ( Self.obracaj_dzia³a__na_k¹t_wyznaczony ) //???
  //  or ( Self.podnoœ_lufy__na_k¹t_wyznaczony ) then
  //  Self.celownicza_linia.Visible := true
  //else//if   ( Self.obracaj_dzia³a__na_k¹t_wyznaczony ) (...)
  //  Self.celownicza_linia.Visible := false;

end;//---//Funkcja Cel_Wspó³rzêdne_Ustaw().

//Funkcja Celownik_Linia_Bez_Falowania__Pozycja_Y_Dostosuj().
procedure TStatek.Celownik_Linia_Bez_Falowania__Pozycja_Y_Dostosuj( const kamera_pod_wod¹_f : boolean; const nad_powierzchni¹_wody_utrzymuj_f : boolean = false );
var
  i : integer;
begin

  //
  // Funkcja dostosowuje wysokoœæ 'wyœwietlania' linii celowniczej 'bez falowania'.
  //
  // Parametry:
  //   kamera_pod_wod¹_f
  //   nad_powierzchni¹_wody_utrzymuj_f
  //

  if Self.celownik_linia_bez_falowania__pozycja_y_dostosuj__kamera_pod_wod¹ <> kamera_pod_wod¹_f then
    Self.celownik_linia_bez_falowania__pozycja_y_dostosuj__kamera_pod_wod¹ := kamera_pod_wod¹_f
  else//if Self.celownik_linia_bez_falowania__pozycja_y_dostosuj__kamera_pod_wod¹ <> kamera_pod_wod¹_f then
    if not nad_powierzchni¹_wody_utrzymuj_f then
      Exit;


  for i := 0 to Length( Self.artyleria_t ) - 1 do
    Self.artyleria_t[ i ].Celownik_Linia_Bez_Falowania__Pozycja_Y_Dostosuj( kamera_pod_wod¹_f, nad_powierzchni¹_wody_utrzymuj_f );

  for i := 0 to Length( Self.bomba_g³êbinowa_t ) - 1 do
    Self.bomba_g³êbinowa_t[ i ].Celownik_Linia_Bez_Falowania__Pozycja_Y_Dostosuj( kamera_pod_wod¹_f, nad_powierzchni¹_wody_utrzymuj_f );

  for i := 0 to Length( Self.dzia³a_t ) - 1 do
    Self.dzia³a_t[ i ].Celownik_Linia_Bez_Falowania__Pozycja_Y_Dostosuj( kamera_pod_wod¹_f, nad_powierzchni¹_wody_utrzymuj_f );

  for i := 0 to Length( Self.je¿e_g³êbinowe_t ) - 1 do
    Self.je¿e_g³êbinowe_t[ i ].Celownik_Linia_Bez_Falowania__Pozycja_Y_Dostosuj( kamera_pod_wod¹_f, nad_powierzchni¹_wody_utrzymuj_f );

  for i := 0 to Length( Self.torpedy_wyrzutnie_t ) - 1 do
    Self.torpedy_wyrzutnie_t[ i ].Celownik_Linia_Bez_Falowania__Pozycja_Y_Dostosuj( kamera_pod_wod¹_f, nad_powierzchni¹_wody_utrzymuj_f );

end;//---//Funkcja Celownik_Linia_Bez_Falowania__Pozycja_Y_Dostosuj().

//Funkcja Broñ__Amunicja_Uzupe³nij().
function TStatek.Broñ__Amunicja_Uzupe³nij( broñ_f : array of TTorpedy_Wyrzutnia; uzupe³nienie_procent_f : real = 10 ) : boolean;
var
  i,
  zti,
  amunicja_ograniczenie_l
    : integer;
begin

  //
  // Funkcja uzupe³nia amunicjê we wskazanym rodzaju broni o zadany procent iloœci maksymalnej.
  //

  Result := false;

  if uzupe³nienie_procent_f <= 0 then
    Exit;

  for i := 0 to Length( broñ_f ) - 1 do
    begin

      amunicja_ograniczenie_l := broñ_f[ i ].amunicja_iloœæ_pocz¹tkowa - Length( broñ_f[ i ].lufy_t );

      if broñ_f[ i ].amunicja_iloœæ < amunicja_ograniczenie_l then
        begin

          Result := true;


          zti := System.Math.Floor( broñ_f[ i ].amunicja_iloœæ_pocz¹tkowa * uzupe³nienie_procent_f * 0.01 );

          if zti < 1 then
            zti := 1;

          broñ_f[ i ].amunicja_iloœæ := broñ_f[ i ].amunicja_iloœæ + zti;

          if broñ_f[ i ].amunicja_iloœæ > amunicja_ograniczenie_l then
            broñ_f[ i ].amunicja_iloœæ := amunicja_ograniczenie_l;

        end;
      //---//if broñ_f[ i ].amunicja_iloœæ < amunicja_ograniczenie_l then

    end;
  //---//for i := 0 to Length( broñ_f ) - 1 do

end;//---//Funkcja Broñ__Amunicja_Uzupe³nij().

//Funkcja Broñ__Indeks_Zmieniaj_Ustaw().
procedure TStatek.Broñ__Indeks_Zmieniaj_Ustaw();
begin

  //
  // Funkcja ustawia czy po strzale ustawiæ siê na nastêpn¹ broñ tego samego rodzaju czy nie.
  //


  Self.broñ_indeks_zmieniaj := not Self.broñ_indeks_zmieniaj;


  if    (
             ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
          or ( Typy_Wspolne.ar_Artyleria in Self.amunicja_rodzaj_zbiór )
        )
    and ( Self.artyleria_ostatni_strza³_indeks < 0 )
    and (  Length( Self.artyleria_t ) > 0  ) then
    Self.artyleria_ostatni_strza³_indeks := Length( Self.artyleria_t ) - 1;


  if    (
             ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
          or ( Typy_Wspolne.ar_Bomba_G³êbinowa in Self.amunicja_rodzaj_zbiór )
        )
    and ( Self.bomba_g³êbinowa_ostatni_strza³_indeks < 0 )
    and (  Length( Self.bomba_g³êbinowa_t ) > 0  ) then
    Self.bomba_g³êbinowa_ostatni_strza³_indeks := Length( Self.bomba_g³êbinowa_t ) - 1;


  if    (
             ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
          or ( Typy_Wspolne.ar_Pocisk in Self.amunicja_rodzaj_zbiór )
        )
    and ( Self.dzia³o_ostatni_strza³_indeks < 0 )
    and (  Length( Self.dzia³a_t ) > 0  ) then
    Self.dzia³o_ostatni_strza³_indeks := Length( Self.dzia³a_t ) - 1;


  if    (
             ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
          or ( Typy_Wspolne.ar_Je¿e_G³êbinowe in Self.amunicja_rodzaj_zbiór )
        )
    and ( Self.je¿e_g³êbinowe_ostatni_strza³_indeks < 0 )
    and (  Length( Self.je¿e_g³êbinowe_t ) > 0  ) then
    Self.je¿e_g³êbinowe_ostatni_strza³_indeks := Length( Self.je¿e_g³êbinowe_t ) - 1;


  if    (
             ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
          or ( Typy_Wspolne.ar_Torpeda in Self.amunicja_rodzaj_zbiór )
        )
    and ( Self.torpedy_wyrzutnia_ostatni_strza³_indeks < 0 )
    and (  Length( Self.torpedy_wyrzutnie_t ) > 0  ) then
    Self.torpedy_wyrzutnia_ostatni_strza³_indeks := Length( Self.torpedy_wyrzutnie_t ) - 1;

end;//---//Funkcja Broñ__Indeks_Zmieniaj_Ustaw().

//Funkcja Broñ__Indeks_Zmieniaj_Ustaw().
procedure TStatek.Broñ__Indeks_Zmieniaj_Ustaw( const czy_poprzednia_f : boolean );

  //Funkcja Broñ_Indeks_Ustaw() w Broñ__Indeks_Zmieniaj_Ustaw().
  procedure Broñ_Indeks_Ustaw( broñ_t_f : array of TTorpedy_Wyrzutnia; var broñ_ostatni_strza³_indeks_f : integer );
  var
    i,
    zti
      : integer;
  begin

    if czy_poprzednia_f then
      begin

        dec( broñ_ostatni_strza³_indeks_f );

      end
    else//if czy_poprzednia_f then
      begin

        inc( broñ_ostatni_strza³_indeks_f );

      end;
    //---//if czy_poprzednia_f then


    if broñ_ostatni_strza³_indeks_f < 0 then
      broñ_ostatni_strza³_indeks_f := Length( broñ_t_f ) - 1;

    if broñ_ostatni_strza³_indeks_f > Length( broñ_t_f ) - 1 then
      broñ_ostatni_strza³_indeks_f := 0;


    zti := broñ_ostatni_strza³_indeks_f + 1;

    if zti > Length( broñ_t_f ) - 1 then
      zti := 0;


    for i := 0 to Length( broñ_t_f ) - 1 do
      broñ_t_f[ i ].czy_indeks_do_strza³u := i = zti;

  end;//Funkcja Broñ_Indeks_Ustaw() w Broñ__Indeks_Zmieniaj_Ustaw().

//type
//  TTorpedy_Wyrzutnia_t_l = array of TTorpedy_Wyrzutnia; // Tylko aby wywo³aæ funkcjê.
begin//Funkcja Broñ__Indeks_Zmieniaj_Ustaw().

  //
  // Funkcja przestawia na kolejn¹ lub poprzedni¹ broñ tego samego rodzaju.
  //
  // Parametry:
  //   czy_poprzednia_f:
  //     false - przestawia na nastêpn¹.
  //     true - przestawia na poprzedni¹.
  //

  if    (
             ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
          or ( Typy_Wspolne.ar_Artyleria in Self.amunicja_rodzaj_zbiór )
        )
    and ( Self.artyleria_ostatni_strza³_indeks < 0 )
    and (  Length( Self.artyleria_t ) > 0  ) then
    Self.artyleria_ostatni_strza³_indeks := Length( Self.artyleria_t ) - 1;


  if    (
             ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
          or ( Typy_Wspolne.ar_Bomba_G³êbinowa in Self.amunicja_rodzaj_zbiór )
        )
    and ( Self.bomba_g³êbinowa_ostatni_strza³_indeks < 0 )
    and (  Length( Self.bomba_g³êbinowa_t ) > 0  ) then
    Self.bomba_g³êbinowa_ostatni_strza³_indeks := Length( Self.bomba_g³êbinowa_t ) - 1;


  if    (
             ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
          or ( Typy_Wspolne.ar_Pocisk in Self.amunicja_rodzaj_zbiór )
        )
    and ( Self.dzia³o_ostatni_strza³_indeks < 0 )
    and (  Length( Self.dzia³a_t ) > 0  ) then
    Self.dzia³o_ostatni_strza³_indeks := Length( Self.dzia³a_t ) - 1;


  if    (
             ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
          or ( Typy_Wspolne.ar_Je¿e_G³êbinowe in Self.amunicja_rodzaj_zbiór )
        )
    and ( Self.je¿e_g³êbinowe_ostatni_strza³_indeks < 0 )
    and (  Length( Self.je¿e_g³êbinowe_t ) > 0  ) then
    Self.je¿e_g³êbinowe_ostatni_strza³_indeks := Length( Self.je¿e_g³êbinowe_t ) - 1;


  if    (
             ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
          or ( Typy_Wspolne.ar_Torpeda in Self.amunicja_rodzaj_zbiór )
        )
    and ( Self.torpedy_wyrzutnia_ostatni_strza³_indeks < 0 )
    and (  Length( Self.torpedy_wyrzutnie_t ) > 0  ) then
    Self.torpedy_wyrzutnia_ostatni_strza³_indeks := Length( Self.torpedy_wyrzutnie_t ) - 1;



  if
       ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
    or ( Typy_Wspolne.ar_Artyleria in Self.amunicja_rodzaj_zbiór )
    and (  Length( Self.artyleria_t ) > 0  ) then
    Broñ_Indeks_Ustaw( TTorpedy_Wyrzutnia_t(Self.artyleria_t), Self.artyleria_ostatni_strza³_indeks );

  if
       ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
    or ( Typy_Wspolne.ar_Bomba_G³êbinowa in Self.amunicja_rodzaj_zbiór )
    and (  Length( Self.bomba_g³êbinowa_t ) > 0  ) then
    Broñ_Indeks_Ustaw( TTorpedy_Wyrzutnia_t(Self.bomba_g³êbinowa_t), Self.bomba_g³êbinowa_ostatni_strza³_indeks );

  if
       ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
    or ( Typy_Wspolne.ar_Pocisk in Self.amunicja_rodzaj_zbiór )
    and (  Length( Self.dzia³a_t ) > 0  ) then
    Broñ_Indeks_Ustaw( TTorpedy_Wyrzutnia_t(Self.dzia³a_t), Self.dzia³o_ostatni_strza³_indeks );

  if
       ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
    or ( Typy_Wspolne.ar_Je¿e_G³êbinowe in Self.amunicja_rodzaj_zbiór )
    and (  Length( Self.je¿e_g³êbinowe_t ) > 0  ) then
    Broñ_Indeks_Ustaw( TTorpedy_Wyrzutnia_t(Self.je¿e_g³êbinowe_t), Self.je¿e_g³êbinowe_ostatni_strza³_indeks );

  if
       ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
    or ( Typy_Wspolne.ar_Torpeda in Self.amunicja_rodzaj_zbiór )
    and (  Length( Self.torpedy_wyrzutnie_t ) > 0  ) then
    Broñ_Indeks_Ustaw( Self.torpedy_wyrzutnie_t, Self.torpedy_wyrzutnia_ostatni_strza³_indeks );

end;//---//Funkcja Broñ__Indeks_Zmieniaj_Ustaw().

//Funkcja Strza³().
function TStatek.Strza³( const czy_wszystkie_bronie_f, czy_wszystkie_lufy_f, obracaj_dzia³a_f, podnoœ_lufy_f : boolean; const cel_wspó³rzêdne_f : GLS.VectorGeometry.TAffineVector ) : boolean;
var
  wystrzeli³y_wszystkie_l : boolean;

  //Funkcja Strza³_Jedn¹_Luf¹() w Strza³().
  function Strza³_Jedn¹_Luf¹( broñ_t_f : array of TTorpedy_Wyrzutnia; var broñ_ostatni_strza³_indeks_f : integer; const czy_indeks_do_strza³u_f : boolean = true ) : boolean;
  var
    i,
    próby_strza³u_iloœæ
      : integer;

    //Funkcja Broñ_Kolejny_Egzemplarz_Do_Próby_Strza³u_Wyznacz() w Strza³_Jedn¹_Luf¹() w Strza³().
    function Broñ_Kolejny_Egzemplarz_Do_Próby_Strza³u_Wyznacz() : boolean;
    begin

      //
      // Funkcja wyznacza kolejny egzemplarz broni do próby strza³u.
      // Je¿eli do pojedynczego strza³u jest wyznaczone dzia³o, które jeszcze nie wycelowa³o (albo np. nie mo¿e wycelowaæ z powodu blokad obrotu) spróbuje strzeliæ innym dzia³em.
      //
      // Zwraca prawdê gdy nale¿y podj¹æ próbê strza³u z innego egzemplarza broni.
      //

      if not Self.broñ_indeks_zmieniaj then
        begin

          Result := false;
          Exit;

        end
      else//if not Self.broñ_indeks_zmieniaj then
        Result := true;


      inc( i );

      if i > Length( broñ_t_f ) - 1 then
        i := 0;

    end;//---//Funkcja Broñ_Kolejny_Egzemplarz_Do_Próby_Strza³u_Wyznacz() w Strza³_Jedn¹_Luf¹() w Strza³().

  begin//Funkcja Strza³_Jedn¹_Luf¹() w Strza³().

    // czy_indeks_do_strza³u_f
    //   false - próbuje strzelaæ któr¹kolwiek broni¹ danego rodzaju.
    //   true - próbuje strzelaæ tylko broni¹ wyznaczon¹ do strza³u.

    Result := false;


    próby_strza³u_iloœæ := 1;

    i := broñ_ostatni_strza³_indeks_f;

    inc( i );

    if i > Length( broñ_t_f ) - 1 then
      i := 0;


    while próby_strza³u_iloœæ <= Length( broñ_t_f ) do
      begin

        inc( próby_strza³u_iloœæ );


        if   ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
          or ( broñ_t_f[ i ].amunicja_rodzaj in Self.amunicja_rodzaj_zbiór ) then
          begin

            if    (
                       ( not czy_indeks_do_strza³u_f )
                    or (
                             ( czy_indeks_do_strza³u_f )
                         and ( broñ_t_f[ i ].czy_indeks_do_strza³u )
                       )
                  )
              and (  broñ_t_f[ i ].Strza³( czy_wszystkie_lufy_f, obracaj_dzia³a_f, podnoœ_lufy_f, wystrzeli³y_wszystkie_l, cel_wspó³rzêdne_f )  ) then
              begin

                //broñ_ostatni_strza³_indeks_f := i;


                if Self.broñ_indeks_zmieniaj then
                  if wystrzeli³y_wszystkie_l then
                    begin

                      broñ_ostatni_strza³_indeks_f := i;

                      if broñ_t_f[ i ].czy_indeks_do_strza³u then
                        begin

                          broñ_t_f[ i ].czy_indeks_do_strza³u := false;


                          // Oznacza, które dzia³o bêdzie strzelaæ pojedynczo jako kolejne.
                          inc( i );

                          if i > Length( broñ_t_f ) - 1 then
                            i := 0;

                          broñ_t_f[ i ].czy_indeks_do_strza³u := true;
                          //---// Oznacza, które dzia³o bêdzie strzelaæ pojedynczo jako kolejne.

                        end;
                      //---//broñ_t_f[ i ].czy_indeks_do_strza³u

                    end;
                  //---//if wystrzeli³y_wszystkie_l then


                Result := true;

                Exit;

              end
            else//if    ( (...)
              if not Broñ_Kolejny_Egzemplarz_Do_Próby_Strza³u_Wyznacz() then
                Exit;

          end
        else//if   ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór ) (...)
          if not Broñ_Kolejny_Egzemplarz_Do_Próby_Strza³u_Wyznacz() then
            Exit;

      end;
    //---//while próby_strza³u_iloœæ <= Length( broñ_t_f ) do


    if    ( not Result )
      and ( czy_indeks_do_strza³u_f ) then
      Result := Strza³_Jedn¹_Luf¹( broñ_t_f, broñ_ostatni_strza³_indeks_f, false );

  end;//Funkcja Strza³_Jedn¹_Luf¹() w Strza³().

  //Funkcja Strza³_Wszystkie_Bronie_Jednego_Rodzaju() w Strza³().
  function Strza³_Wszystkie_Bronie_Jednego_Rodzaju( broñ_t_f : array of TTorpedy_Wyrzutnia; var broñ_ostatni_strza³_indeks_f : integer ) : boolean;
  var
    i : integer;
  begin

    Result := false;

    for i := 0 to Length( broñ_t_f ) - 1 do
      if    (
                 ( czy_wszystkie_bronie_f )
              or ( broñ_t_f[ i ].czy_indeks_do_strza³u )
            )
        and (
                 ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
              or ( broñ_t_f[ i ].amunicja_rodzaj in Self.amunicja_rodzaj_zbiór )
            ) then
        begin

          broñ_t_f[ i ].Strza³( czy_wszystkie_lufy_f, obracaj_dzia³a_f, podnoœ_lufy_f, wystrzeli³y_wszystkie_l, cel_wspó³rzêdne_f );

          if not Result then
            Result := true;


          if    ( Self.broñ_indeks_zmieniaj )
            and ( not czy_wszystkie_bronie_f )
            and ( czy_wszystkie_lufy_f ) then
            begin

              if broñ_ostatni_strza³_indeks_f < 0 then
                broñ_ostatni_strza³_indeks_f := 0;

              inc( broñ_ostatni_strza³_indeks_f );

              if broñ_ostatni_strza³_indeks_f > Length( broñ_t_f ) - 1 then
                broñ_ostatni_strza³_indeks_f := 0;

              broñ_t_f[ i ].czy_indeks_do_strza³u := false;
              broñ_t_f[ broñ_ostatni_strza³_indeks_f ].czy_indeks_do_strza³u := true;

              Break;

            end;
          //---//if    ( Self.broñ_indeks_zmieniaj ) (...)

        end;
      //---//if    ( (...)

  end;//Funkcja Strza³_Wszystkie_Bronie_Jednego_Rodzaju() w Strza³().

//type
//  TTorpedy_Wyrzutnia_t_l = array of TTorpedy_Wyrzutnia; // Tylko aby wywo³aæ funkcjê.

var
  ztb : boolean;
begin//Funkcja Strza³().

  //
  // Funkcja strzela wszystkimi lufami lub ustala kolejn¹ (nastêpn¹ po poprzednim strzale) gotow¹ lufê i strzela jedn¹ luf¹.
  //
  // Zwraca prawdê gdy wystrzeli.
  //
  // Parametry:
  //   czy_wszystkie_bronie_f
  //     false - strza³ jedn¹ broni¹ (egzemplarz) wybranego rodzaju.
  //     true - strza³ wszystkimi broniami wybranego rodzaju.
  //   czy_wszystkie_lufy_f:
  //     false - strza³ jedn¹ luf¹ jednej (egzemplarz) broni.
  //     true - strza³ wszystkimi lufami jednej (egzemplarz) broni.
  //   obracaj_dzia³a_f
  //     false - je¿eli dzia³a s¹ zablokowane mo¿na strzeliæ mimo nie wycelowania.
  //     true - strzela tylko gdy dzia³o jest wycelowane.
  //  cel_wspó³rzêdne_f - potrzebne przy tworzeniu amunicji.
  //

  Result := false;


  if   ( Self.punkty_¿ycia_aktualne <= 0 )
    or ( Self.schemat_samolot_zmiana_czas_sekundy_i <> 0 ) then
    Exit;


  if    (
             ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
          or ( Typy_Wspolne.ar_Artyleria in Self.amunicja_rodzaj_zbiór )
        )
    and (  Length( Self.artyleria_t ) > 0  )
    and ( not Self.Zanurzenie_Strza³_Przekroczone() ) then
    begin

      if czy_wszystkie_bronie_f then
        ztb := Strza³_Wszystkie_Bronie_Jednego_Rodzaju( TTorpedy_Wyrzutnia_t(Self.artyleria_t), Self.artyleria_ostatni_strza³_indeks )
      else//if czy_wszystkie_bronie_f then
        ztb := Strza³_Jedn¹_Luf¹( TTorpedy_Wyrzutnia_t(Self.artyleria_t), Self.artyleria_ostatni_strza³_indeks );

      if    ( not Result )
        and ( ztb ) then
        Result := true;

    end;
  //---//if    ( (...)


  if   (
             ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
          or ( Typy_Wspolne.ar_Bomba_G³êbinowa in Self.amunicja_rodzaj_zbiór )
        )
    and (  Length( Self.bomba_g³êbinowa_t ) > 0  ) then
    begin

      if czy_wszystkie_bronie_f then
        ztb := Strza³_Wszystkie_Bronie_Jednego_Rodzaju( Self.bomba_g³êbinowa_t, Self.bomba_g³êbinowa_ostatni_strza³_indeks )
      else//if czy_wszystkie_bronie_f then
        ztb := Strza³_Jedn¹_Luf¹( Self.bomba_g³êbinowa_t, Self.bomba_g³êbinowa_ostatni_strza³_indeks );

      if    ( not Result )
        and ( ztb ) then
        Result := true;

    end;
  //---//if    ( (...)


  if   (
             ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
          or ( Typy_Wspolne.ar_Pocisk in Self.amunicja_rodzaj_zbiór )
        )
    and (  Length( Self.dzia³a_t ) > 0  )
    and ( not Self.Zanurzenie_Strza³_Przekroczone() ) then
    begin

      if czy_wszystkie_bronie_f then
        ztb := Strza³_Wszystkie_Bronie_Jednego_Rodzaju( TTorpedy_Wyrzutnia_t(Self.dzia³a_t), Self.dzia³o_ostatni_strza³_indeks )
      else//if czy_wszystkie_bronie_f then
        ztb := Strza³_Jedn¹_Luf¹( TTorpedy_Wyrzutnia_t(Self.dzia³a_t), Self.dzia³o_ostatni_strza³_indeks );

      if    ( not Result )
        and ( ztb ) then
        Result := true;

    end;
  //---//if    ( (...)


  if   (
             ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
          or ( Typy_Wspolne.ar_Je¿e_G³êbinowe in Self.amunicja_rodzaj_zbiór )
        )
    and (  Length( Self.je¿e_g³êbinowe_t ) > 0  )
    and ( not Self.Zanurzenie_Strza³_Przekroczone() ) then
    begin

      if czy_wszystkie_bronie_f then
        ztb := Strza³_Wszystkie_Bronie_Jednego_Rodzaju( Self.je¿e_g³êbinowe_t, Self.je¿e_g³êbinowe_ostatni_strza³_indeks )
      else//if czy_wszystkie_bronie_f then
        ztb := Strza³_Jedn¹_Luf¹( Self.je¿e_g³êbinowe_t, Self.je¿e_g³êbinowe_ostatni_strza³_indeks );

      if    ( not Result )
        and ( ztb ) then
        Result := true;

    end;
  //---//if    ( (...)


  if   (
             ( Typy_Wspolne.ar_Wszystkie in Self.amunicja_rodzaj_zbiór )
          or ( Typy_Wspolne.ar_Torpeda in Self.amunicja_rodzaj_zbiór )
        )
    and (  Length( Self.torpedy_wyrzutnie_t ) > 0  ) then
    begin

      if czy_wszystkie_bronie_f then
        ztb := Strza³_Wszystkie_Bronie_Jednego_Rodzaju( Self.torpedy_wyrzutnie_t, Self.torpedy_wyrzutnia_ostatni_strza³_indeks )
      else//if czy_wszystkie_bronie_f then
        ztb := Strza³_Jedn¹_Luf¹( Self.torpedy_wyrzutnie_t, Self.torpedy_wyrzutnia_ostatni_strza³_indeks );

      if    ( not Result )
        and ( ztb ) then
        Result := true;

    end;
  //---//if    ( (...)

end;//---//Funkcja Strza³().

//Funkcja Elementy_Gracza_Dostosuj().
procedure TStatek.Elementy_Gracza_Dostosuj( const id_grupa_gracza_f : integer; const celownik_bombowiec_widoczne_f, kamera_pod_wod¹_f, lotniskowiec__³apacz_samolotów_widoczne_f, punkty_¿ycia_wskaŸnik_widoczne__gracz_f, punkty_¿ycia_wskaŸnik_widoczne__przeciwnik_f, punkty_¿ycia_wskaŸnik_widoczne__sojusznik_f, obrót_k¹t_zablokowany_wskaŸnik_widoczne_f, obrót_k¹t_zablokowany_strza³_wskaŸnik_widoczne_f, prze³adowanie_wskaŸnik_f : boolean );
var
  i,
  j
    : integer;
begin

  //
  // Funkcja ukrywa lub wyœwietla elementy statku, które na swoim statku widzi gracz.
  //
  // Parametry:
  //   id_grupa_gracza_f - id grupy, do której nale¿y gracz.
  //     -99 - modyfikacje dotycz¹ statku gracza.
  //     ró¿ne od -99 - modyfikacje dotycz¹ statków innych graczy.
  //   celownik_bombowiec_widoczne_f
  //   kamera_pod_wod¹_f
  //   lotniskowiec__³apacz_samolotów_widoczne_f
  //   punkty_¿ycia_wskaŸnik_widoczne__gracz_f
  //   punkty_¿ycia_wskaŸnik_widoczne__przeciwnik_f
  //   punkty_¿ycia_wskaŸnik_widoczne__sojusznik_f
  //   obrót_k¹t_zablokowany_wskaŸnik_widoczne_f
  //   obrót_k¹t_zablokowany_strza³_wskaŸnik_widoczne_f
  //   prze³adowanie_wskaŸnik_f
  //

  Self.celownik_linia_bez_falowania__pozycja_y_dostosuj__kamera_pod_wod¹ := not kamera_pod_wod¹_f; // Aby przeliczyæ linie.
  Self.Celownik_Linia_Bez_Falowania__Pozycja_Y_Dostosuj( kamera_pod_wod¹_f );


  if id_grupa_gracza_f = -99 then
    begin

      // Modyfikacje dotycz¹ statku gracza.

      if    ( Self.czy_lotniskowiec )
        and ( Self.lotniskowiec__³apacz_samolotów_dummy <> nil ) then
        Self.lotniskowiec__³apacz_samolotów_dummy.VisibleAtRunTime := lotniskowiec__³apacz_samolotów_widoczne_f;


      Self.punkty_¿ycia_gl_dummy_cube.Visible := punkty_¿ycia_wskaŸnik_widoczne__gracz_f;


      if    ( Self.wygl¹d_elementy_list <> nil )
        and (  Assigned( Self.wygl¹d_elementy_list )  ) then
        for i := 0 to Self.wygl¹d_elementy_list.Count - 1 do
          if TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) is TGLLines then
            TGLLines(Self.wygl¹d_elementy_list[ i ]).Visible := celownik_bombowiec_widoczne_f;

    end
  else//if id_grupa_gracza_f = -99 then
    begin

      // Modyfikacje dotycz¹ statków innych graczy.

      if Self.id_grupa = id_grupa_gracza_f then
        begin

          if    ( Self.czy_lotniskowiec )
            and ( Self.lotniskowiec__³apacz_samolotów_dummy <> nil ) then
            Self.lotniskowiec__³apacz_samolotów_dummy.VisibleAtRunTime := lotniskowiec__³apacz_samolotów_widoczne_f;


          Self.punkty_¿ycia_gl_dummy_cube.Visible := punkty_¿ycia_wskaŸnik_widoczne__sojusznik_f;

        end
      else//if Self.id_grupa = id_grupa_gracza_f then
        begin

          Self.punkty_¿ycia_gl_dummy_cube.Visible := punkty_¿ycia_wskaŸnik_widoczne__przeciwnik_f;

        end;
      //---//if Self.id_grupa = id_grupa_gracza_f then


      if    ( Self.wygl¹d_elementy_list <> nil )
        and (  Assigned( Self.wygl¹d_elementy_list )  ) then
        for i := 0 to Self.wygl¹d_elementy_list.Count - 1 do
          if TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) is TGLLines then
            TGLLines(Self.wygl¹d_elementy_list[ i ]).Visible := false;

    end;
  //---//if id_grupa_gracza_f = -99 then



  if   ( Self.obrót_k¹t_zablokowany_wskaŸnik_widoczne <> obrót_k¹t_zablokowany_wskaŸnik_widoczne_f )
    or ( Self.obrót_k¹t_zablokowany_strza³_wskaŸnik_widoczne <> obrót_k¹t_zablokowany_strza³_wskaŸnik_widoczne_f ) then
    begin

      Self.obrót_k¹t_zablokowany_wskaŸnik_widoczne := obrót_k¹t_zablokowany_wskaŸnik_widoczne_f;
      Self.obrót_k¹t_zablokowany_strza³_wskaŸnik_widoczne := obrót_k¹t_zablokowany_strza³_wskaŸnik_widoczne_f;


      for i := 0 to Length( Self.artyleria_t ) - 1 do
        begin

          Self.artyleria_t[ i ].obrót_k¹t_zablokowany_GLDisk.Visible := Self.obrót_k¹t_zablokowany_wskaŸnik_widoczne;

          for j := 0 to Length( Self.artyleria_t[ i ].obrót_k¹t_zablokowany_strza³_do ) - 1 do
            Self.artyleria_t[ i ].obrót_k¹t_zablokowany_strza³_GLDisk_t[ j ].Visible := Self.obrót_k¹t_zablokowany_strza³_wskaŸnik_widoczne;

        end;
      //---//for i := 0 to Length( Self.artyleria_t ) - 1 do


      for i := 0 to Length( Self.bomba_g³êbinowa_t ) - 1 do
        begin

          Self.bomba_g³êbinowa_t[ i ].obrót_k¹t_zablokowany_GLDisk.Visible := Self.obrót_k¹t_zablokowany_wskaŸnik_widoczne;

          for j := 0 to Length( Self.bomba_g³êbinowa_t[ i ].obrót_k¹t_zablokowany_strza³_do ) - 1 do
            Self.bomba_g³êbinowa_t[ i ].obrót_k¹t_zablokowany_strza³_GLDisk_t[ j ].Visible := Self.obrót_k¹t_zablokowany_strza³_wskaŸnik_widoczne;

        end;
      //---//for i := 0 to Length( Self.bomba_g³êbinowa_t ) - 1 do


      for i := 0 to Length( Self.dzia³a_t ) - 1 do
        begin

          Self.dzia³a_t[ i ].obrót_k¹t_zablokowany_GLDisk.Visible := Self.obrót_k¹t_zablokowany_wskaŸnik_widoczne;

          for j := 0 to Length( Self.dzia³a_t[ i ].obrót_k¹t_zablokowany_strza³_do ) - 1 do
            Self.dzia³a_t[ i ].obrót_k¹t_zablokowany_strza³_GLDisk_t[ j ].Visible := Self.obrót_k¹t_zablokowany_strza³_wskaŸnik_widoczne;

          for j := 0 to Length( Self.dzia³a_t[ i ].lufy_t ) - 1 do
            Self.dzia³a_t[ i ].lufy_t[ j ].prze³adowanie_wskaŸnik.Visible := prze³adowanie_wskaŸnik_f;

        end;
      //---//for i := 0 to Length( Self.dzia³a_t ) - 1 do


      for i := 0 to Length( Self.je¿e_g³êbinowe_t ) - 1 do
        begin

          Self.je¿e_g³êbinowe_t[ i ].obrót_k¹t_zablokowany_GLDisk.Visible := Self.obrót_k¹t_zablokowany_wskaŸnik_widoczne;

          for j := 0 to Length( Self.je¿e_g³êbinowe_t[ i ].obrót_k¹t_zablokowany_strza³_do ) - 1 do
            Self.je¿e_g³êbinowe_t[ i ].obrót_k¹t_zablokowany_strza³_GLDisk_t[ j ].Visible := Self.obrót_k¹t_zablokowany_strza³_wskaŸnik_widoczne;

        end;
      //---//for i := 0 to Length( Self.je¿e_g³êbinowe_t ) - 1 do


      for i := 0 to Length( Self.torpedy_wyrzutnie_t ) - 1 do
        begin

          Self.torpedy_wyrzutnie_t[ i ].obrót_k¹t_zablokowany_GLDisk.Visible := Self.obrót_k¹t_zablokowany_wskaŸnik_widoczne;

          for j := 0 to Length( Self.torpedy_wyrzutnie_t[ i ].obrót_k¹t_zablokowany_strza³_do ) - 1 do
            Self.torpedy_wyrzutnie_t[ i ].obrót_k¹t_zablokowany_strza³_GLDisk_t[ j ].Visible := Self.obrót_k¹t_zablokowany_strza³_wskaŸnik_widoczne;

        end;
      //---//for i := 0 to Length( Self.torpedy_wyrzutnie_t ) - 1 do

    end;
  //---//if   ( Self.obrót_k¹t_zablokowany_wskaŸnik_widoczne <> Self.obrót_k¹t_zablokowany_wskaŸnik_widoczne ) (...)



  for i := 0 to Length( Self.artyleria_t ) - 1 do
    for j := 0 to Length( Self.artyleria_t[ i ].lufy_t ) - 1 do
      Self.artyleria_t[ i ].lufy_t[ j ].prze³adowanie_wskaŸnik.Visible := prze³adowanie_wskaŸnik_f;

  for i := 0 to Length( Self.bomba_g³êbinowa_t ) - 1 do
    for j := 0 to Length( Self.bomba_g³êbinowa_t[ i ].lufy_t ) - 1 do
      Self.bomba_g³êbinowa_t[ i ].lufy_t[ j ].prze³adowanie_wskaŸnik.Visible := prze³adowanie_wskaŸnik_f;

  for i := 0 to Length( Self.dzia³a_t ) - 1 do
    for j := 0 to Length( Self.dzia³a_t[ i ].lufy_t ) - 1 do
      Self.dzia³a_t[ i ].lufy_t[ j ].prze³adowanie_wskaŸnik.Visible := prze³adowanie_wskaŸnik_f;

  for i := 0 to Length( Self.je¿e_g³êbinowe_t ) - 1 do
    for j := 0 to Length( Self.je¿e_g³êbinowe_t[ i ].lufy_t ) - 1 do
      Self.je¿e_g³êbinowe_t[ i ].lufy_t[ j ].prze³adowanie_wskaŸnik.Visible := prze³adowanie_wskaŸnik_f;

  for i := 0 to Length( Self.torpedy_wyrzutnie_t ) - 1 do
    for j := 0 to Length( Self.torpedy_wyrzutnie_t[ i ].lufy_t ) - 1 do
      Self.torpedy_wyrzutnie_t[ i ].lufy_t[ j ].prze³adowanie_wskaŸnik.Visible := prze³adowanie_wskaŸnik_f;

end;//---//Funkcja Elementy_Gracza_Dostosuj().

//Funkcja Elementy_Gracza_Widocznoœæ().
procedure TStatek.Elementy_Gracza_Widocznoœæ( const id_grupa_gracza_f : integer; const widoczne_f : boolean );
var
  i,
  j
    : integer;
begin

  //
  // Funkcja ukrywa lub wyœwietla elementy statku, które widzi tylko gracz tego statku.
  //
  // Parametry:
  //   id_grupa_gracza_f - id grupy, do której nale¿y gracz.
  //   widoczne_f:
  //     false - elementy nie s¹ widoczne.
  //     true - elementy s¹ widoczne.
  //

  Self.celownicza_linia.Visible := widoczne_f;


  if Self.id_grupa <> id_grupa_gracza_f then
    begin

      Self.punkty_¿ycia__wskaŸnik.Material.FrontProperties.Diffuse.Color := GLS.Color.clrRed;
      Self.punkty_¿ycia__wskaŸnik__kolor := Self.punkty_¿ycia__wskaŸnik.Material.FrontProperties.Diffuse.Color;

    end;
  //---//if Self.id_grupa <> id_grupa_gracza_f then



  if not widoczne_f then
    for i := 0 to Length( Self.artyleria_t ) - 1 do
      begin

        Self.artyleria_t[ i ].celownik_linia.Visible := widoczne_f;
        Self.artyleria_t[ i ].celownik_linia_bez_falowania.Visible := Self.artyleria_t[ i ].celownik_linia.Visible;
        Self.artyleria_t[ i ].celownik_linia__widoczne := widoczne_f;

        for j := 0 to Length( Self.artyleria_t[ i ].lufy_t ) - 1 do
          Self.artyleria_t[ i ].lufy_t[ j ].prze³adowanie_wskaŸnik.Visible := widoczne_f;

      end;
    //---//for i := 0 to Length( Self.artyleria_t ) - 1 do


  if not widoczne_f then
    for i := 0 to Length( Self.bomba_g³êbinowa_t ) - 1 do
      begin

        Self.bomba_g³êbinowa_t[ i ].celownik_linia.Visible := widoczne_f;
        Self.bomba_g³êbinowa_t[ i ].celownik_linia_bez_falowania.Visible := Self.bomba_g³êbinowa_t[ i ].celownik_linia.Visible;
        Self.bomba_g³êbinowa_t[ i ].celownik_linia__widoczne := widoczne_f;

        for j := 0 to Length( Self.bomba_g³êbinowa_t[ i ].lufy_t ) - 1 do
          Self.bomba_g³êbinowa_t[ i ].lufy_t[ j ].prze³adowanie_wskaŸnik.Visible := widoczne_f;

      end;
    //---//for i := 0 to Length( Self.bomba_g³êbinowa_t ) - 1 do


  if not widoczne_f then
    for i := 0 to Length( Self.dzia³a_t ) - 1 do
      begin

        Self.dzia³a_t[ i ].celownik_linia.Visible := widoczne_f;
        Self.dzia³a_t[ i ].celownik_linia_bez_falowania.Visible := Self.dzia³a_t[ i ].celownik_linia.Visible;
        Self.dzia³a_t[ i ].celownik_linia__widoczne := widoczne_f;

        for j := 0 to Length( Self.dzia³a_t[ i ].lufy_t ) - 1 do
          Self.dzia³a_t[ i ].lufy_t[ j ].prze³adowanie_wskaŸnik.Visible := widoczne_f;

      end;
    //---//for i := 0 to Length( Self.dzia³a_t ) - 1 do


  if not widoczne_f then
    for i := 0 to Length( Self.je¿e_g³êbinowe_t ) - 1 do
      begin

        Self.je¿e_g³êbinowe_t[ i ].celownik_linia.Visible := widoczne_f;
        Self.je¿e_g³êbinowe_t[ i ].celownik_linia_bez_falowania.Visible := Self.je¿e_g³êbinowe_t[ i ].celownik_linia.Visible;
        Self.je¿e_g³êbinowe_t[ i ].celownik_linia__widoczne := widoczne_f;

        for j := 0 to Length( Self.je¿e_g³êbinowe_t[ i ].lufy_t ) - 1 do
          Self.je¿e_g³êbinowe_t[ i ].lufy_t[ j ].prze³adowanie_wskaŸnik.Visible := widoczne_f;

      end;
    //---//for i := 0 to Length( Self.je¿e_g³êbinowe_t ) - 1 do


  if not widoczne_f then
    for i := 0 to Length( Self.torpedy_wyrzutnie_t ) - 1 do
      begin

        Self.torpedy_wyrzutnie_t[ i ].celownik_linia.Visible := widoczne_f;
        Self.torpedy_wyrzutnie_t[ i ].celownik_linia_bez_falowania.Visible := Self.torpedy_wyrzutnie_t[ i ].celownik_linia.Visible;
        Self.torpedy_wyrzutnie_t[ i ].celownik_linia__widoczne := widoczne_f;

        for j := 0 to Length( Self.torpedy_wyrzutnie_t[ i ].lufy_t ) - 1 do
          Self.torpedy_wyrzutnie_t[ i ].lufy_t[ j ].prze³adowanie_wskaŸnik.Visible := widoczne_f;

      end;
    //---//for i := 0 to Length( Self.torpedy_wyrzutnie_t ) - 1 do

end;//---//Funkcja Elementy_Gracza_Widocznoœæ().

//Funkcja Kotwica_Ruch_Ustaw().
procedure TStatek.Kotwica_Ruch_Ustaw( const kotwica_ruch_etap_f : TKotwica_Ruch_Etap );
begin

  // Dopuszczalne wartoœci kre_Stop, kre_W_Dó³, kre_W_Górê.

  if    ( kotwica_ruch_etap_f = kre_W_Dó³ )
    and ( Self.Samolot_Na_Lotniskowcu() = nil ) then
    Self.kotwica_ruch_etap__st := kre_W_Dó³ // Je¿eli samolot na lotniskowcu ma opuszczone kotwice to detekcja kolizji z pok³adem jest zak³ócana.
  else//if    ( kotwica_ruch_etap_f = kre_W_Dó³ )
    if kotwica_ruch_etap_f in [ kre_Stop, kre_W_Górê ] then
      Self.kotwica_ruch_etap__st := kotwica_ruch_etap_f;

end;//---//Funkcja Kotwica_Ruch_Ustaw().

//Funkcja Punkty_¯ycia__Zmieñ().
procedure TStatek.Punkty_¯ycia__Zmieñ( const wartoœæ_f : real );
var
  prawdopodobieñstwo_uszkodzenia_l : real;
begin

  //
  // Funkcja modyfikuje wartoœæ punktów ¿ycia.
  //

  prawdopodobieñstwo_uszkodzenia_l := 0;

  if Self.punkty_¿ycia_aktualne > 0 then // Gdy punkty ¿ycia s¹ zerowe nie nalicza obra¿eñ.
    begin

      if wartoœæ_f < 0 then
        begin

          // Ustala jakim procentem aktualnych punktów ¿ycia s¹ zadane obra¿enia.
          if -wartoœæ_f > Self.punkty_¿ycia_aktualne then
            prawdopodobieñstwo_uszkodzenia_l := Self.punkty_¿ycia_aktualne
          else//if -wartoœæ_f > Self.punkty_¿ycia_aktualne then
            prawdopodobieñstwo_uszkodzenia_l := -wartoœæ_f;

          prawdopodobieñstwo_uszkodzenia_l := prawdopodobieñstwo_uszkodzenia_l * 100 / Self.punkty_¿ycia_aktualne;

        end;
      //---//if wartoœæ_f < 0 then


      Self.punkty_¿ycia_aktualne := Self.punkty_¿ycia_aktualne + wartoœæ_f;

    end;
  //---//if Self.punkty_¿ycia_aktualne > 0 then


  if Self.punkty_¿ycia_aktualne < 0 then
    Self.punkty_¿ycia_aktualne := 0;

  if Self.punkty_¿ycia_aktualne > Self.punkty_¿ycia_maksymalne then
    Self.punkty_¿ycia_aktualne := Self.punkty_¿ycia_maksymalne;

  if Self.punkty_¿ycia_maksymalne <> 0 then
    Self.punkty_¿ycia_procent_zosta³o := 100 * Self.punkty_¿ycia_aktualne / Self.punkty_¿ycia_maksymalne
  else//if Self.punkty_¿ycia_maksymalne <> 0 then
    Self.punkty_¿ycia_procent_zosta³o := 0;

  //if Self.punkty_¿ycia_aktualne <= 0 then
  //  Self.czy_usun¹æ_statek := true;


  //if    ( prawdopodobieñstwo_uszkodzenia_l > 0 )
  //  and (  Random( 101 ) <= prawdopodobieñstwo_uszkodzenia_l  ) then
  //  case Random( 3 ) of
  //      0 : Self.uszkodzone_czas_sekundy_i__radar := Czas_Teraz_W_Sekundach();
  //      1 : Self.uszkodzone_czas_sekundy_i__radio := Czas_Teraz_W_Sekundach();
  //      2 :
  //          if Self.sonar_zasiêg > 0 then // Je¿eli nie ma sonaru to nic siê nie uszkadza.
  //            Self.uszkodzone_czas_sekundy_i__sonar := Czas_Teraz_W_Sekundach();
  //    end;
  //  //---//case Random( 3 ) of

  if    ( prawdopodobieñstwo_uszkodzenia_l > 0 )
    and (  Random( 101 ) <= prawdopodobieñstwo_uszkodzenia_l  ) then
    Uszkodzenia_Dodaj();

end;//---//Funkcja Punkty_¯ycia__Zmieñ().

//Funkcja Punkty_¯ycia__W_Zanurzeniu_Przeliczaj().
procedure TStatek.Punkty_¯ycia__W_Zanurzeniu_Przeliczaj();
var
  ztr : real;
begin

  //
  // Funkcja je¿eli zanurzenie statku jest wiêksze ni¿ 100% zostaj¹ naliczane obra¿enia.
  //

  if    ( Self.AbsolutePosition.Y < zanurzenie_spowalnianie_g³êbokoœæ_od_c )
    and (  Czas_Miêdzy_W_Sekundach( Self.punkty_¿ycia__w_zanurzeniu_przeliczaj__czas_przeliczenia_ostatniego_sekundy_i ) >= punkty_¿ycia__w_zanurzeniu_przeliczaj__przeliczanie_ponowne_czas_sekundy_c  ) then
    begin

      if Self.zanurzenie_pu³ap__aktualne_procent >= 200 then
        ztr := 8
      else
      if Self.zanurzenie_pu³ap__aktualne_procent >= 175 then
        ztr := 4
      else
      if Self.zanurzenie_pu³ap__aktualne_procent >= 150 then
        ztr := 2
      else
      if Self.zanurzenie_pu³ap__aktualne_procent >= 125 then
        ztr := 1
      else
        ztr := 0;


      if    ( ztr = 0 )
        and ( Self.czy_samolot )
        and ( Self.AbsolutePosition.Y < zanurzenie_spowalnianie_g³êbokoœæ_od_c * 3 ) then
        ztr := 25;


      if ztr > 0 then
        begin

          ztr := Self.punkty_¿ycia_maksymalne * ztr * 0.01;

          Self.Punkty_¯ycia__Zmieñ( -ztr );

        end;
      //---//if ztr > 0 then


      Self.punkty_¿ycia__w_zanurzeniu_przeliczaj__czas_przeliczenia_ostatniego_sekundy_i := Czas_Teraz_W_Sekundach();

    end;
  //---//if    ( Self.AbsolutePosition.Y < zanurzenie_spowalnianie_g³êbokoœæ_od_c ) (...)

end;//---//Funkcja Punkty_¯ycia__W_Zanurzeniu_Przeliczaj().

//Funkcja Punkty_¯ycia__WskaŸnik__Efekty_Tryb_Ustaw().
procedure TStatek.Punkty_¯ycia__WskaŸnik__Efekty_Tryb_Ustaw( const material_options_f : GLS.Material.TGLMaterialOptions );
begin

  Self.gracz__nazwa.Material.MaterialOptions := material_options_f;
  Self.punkty_¿ycia__ramka.Material.MaterialOptions := material_options_f;
  Self.punkty_¿ycia__napis.Material.MaterialOptions := material_options_f;
  Self.punkty_¿ycia__wskaŸnik.Material.MaterialOptions := material_options_f;

end;//---//Funkcja Punkty_¯ycia__WskaŸnik__Efekty_Tryb_Ustaw().

//Funkcja Punkty_¯ycia__WskaŸnik__Noc_Zmieñ().
procedure TStatek.Punkty_¯ycia__WskaŸnik__Noc_Zmieñ( dzieñ_jasnoœæ_f : real );
begin

  if   ( Self.punkty_¿ycia_wskaŸnik__efekty_tryb = p¿wet_Nie_Podlega_Efektom_Sceny )
    or (
             ( Self.punkty_¿ycia_wskaŸnik__efekty_tryb = p¿wet_Nie_Podlega_Efektom_Sceny__Tylko_Ponad_Powierzchni¹_Wody )
         and ( not Self.Zanurzenie_Peryskopowe__Przekroczone() )
       ) then
    dzieñ_jasnoœæ_f := 1;

  Self.gracz__nazwa.Material.FrontProperties.Diffuse.Color := GLS.VectorGeometry.VectorScale( GLS.Color.clrGray80, dzieñ_jasnoœæ_f );
  Self.punkty_¿ycia__napis.Material.FrontProperties.Diffuse.Color := GLS.VectorGeometry.VectorScale( GLS.Color.clrGray80, dzieñ_jasnoœæ_f );
  Self.punkty_¿ycia__ramka.Material.FrontProperties.Diffuse.Color := GLS.VectorGeometry.VectorScale( GLS.Color.clrBlack, dzieñ_jasnoœæ_f );
  Self.punkty_¿ycia__wskaŸnik.Material.FrontProperties.Diffuse.Color := GLS.VectorGeometry.VectorScale( Self.punkty_¿ycia__wskaŸnik__kolor, dzieñ_jasnoœæ_f );


  Self.gracz__nazwa.Material.FrontProperties.Diffuse.Alpha := 1;
  Self.punkty_¿ycia__napis.Material.FrontProperties.Diffuse.Alpha := 1;
  Self.punkty_¿ycia__ramka.Material.FrontProperties.Diffuse.Alpha := 1;
  Self.punkty_¿ycia__wskaŸnik.Material.FrontProperties.Diffuse.Alpha := 1;

end;//---//Funkcja Punkty_¯ycia__WskaŸnik__Noc_Zmieñ().

//Funkcja Punkty_¯ycia__WskaŸnik__Rysuj().
procedure TStatek.Punkty_¯ycia__WskaŸnik__Rysuj( const gl_camera_f : TGLCamera; const wartoœæ_liczbowa_f : integer );
begin

  //
  // Funkcja rysuje wskaŸnik punktów ¿ycia.
  //
  // Parametry:
  //   gl_camera_f - kamera do której obracaæ wskaŸnik
  //   wartoœæ_liczbowa_f:
  //     0 - brak.
  //     1 - punkty ¿ycia.
  //     2 - punkty ¿ycia / punkty ¿ycia maksymalne.
  //     3 - punkty ¿ycia %.
  //     4 - punkty ¿ycia i punkty ¿ycia %.
  //


  if   ( gl_camera_f = nil )
    or (  not Assigned( gl_camera_f )  ) then
    Exit;

  //Self.punkty_¿ycia_gl_dummy_cube.VisibleAtRunTime := true;
  //Self.punkty_¿ycia_podniesienie_gl_dummy_cube.VisibleAtRunTime := true;

  Self.punkty_¿ycia_gl_dummy_cube.ResetRotations();

  // Obraca (lewo prawo) aby czo³o by³o równolegle do ekranu.
  Self.punkty_¿ycia_gl_dummy_cube.AbsoluteDirection := GLS.VectorGeometry.VectorMake
    (
        gl_camera_f.AbsoluteDirection.X - Self.punkty_¿ycia_gl_dummy_cube.Position.X
      , 0 //gl_camera_f.AbsoluteDirection.Y - Self.punkty_¿ycia_gl_dummy_cube.Position.Y
      , gl_camera_f.AbsoluteDirection.Z - Self.punkty_¿ycia_gl_dummy_cube.Position.Z
    );

  if gl_camera_f.Up.Y < 0 then // Je¿eli kamera patrz¹c w górê lub w dó³ przekrêci siê do góry nogami to wskaŸnik ¿ycia równie¿ obraca³ siê do góry nogami.
    Self.punkty_¿ycia_gl_dummy_cube.AbsoluteDirection := GLS.VectorGeometry.VectorNegate( Self.punkty_¿ycia_gl_dummy_cube.AbsoluteDirection );
  //---// Obraca (lewo prawo) aby czo³o by³o równolegle do ekranu.

  // Obraca (góra dó³) aby czo³o by³o równolegle do ekranu.
  Self.punkty_¿ycia_podniesienie_gl_dummy_cube.PitchAngle :=
    System.Math.RadToDeg
      (
        GLS.VectorGeometry.AngleBetweenVectors
          (
            GLS.VectorGeometry.VectorMake(  gl_camera_f.AbsoluteDirection.X, Abs( gl_camera_f.AbsoluteDirection.Y ), gl_camera_f.AbsoluteDirection.Z  ),
            GLS.VectorGeometry.VectorMake( gl_camera_f.AbsoluteDirection.X, 0, gl_camera_f.AbsoluteDirection.Z ),
            GLS.VectorGeometry.VectorMake( 0, 0, 0 )
          )
      );

  if gl_camera_f.AbsoluteDirection.Y < 0 then
    Self.punkty_¿ycia_podniesienie_gl_dummy_cube.PitchAngle := -Self.punkty_¿ycia_podniesienie_gl_dummy_cube.PitchAngle;
  //---// Obraca (góra dó³) aby czo³o by³o równolegle do ekranu.



  // Wersja B.
  // Wylicza dobrze ale je¿eli statek odp³ynie w bok ekranu to k¹t miêdzy kamer¹ a wskaŸnikiem zycia maleje.
  //
  // Oblicza odleg³oœæ od wskaŸnika ¿ycia do kamery w p³aszczyŸnie poziomej (kierunku wskaŸnika ¿ycia).
  //GLS.VectorGeometry.SetVector( zt_vector, gl_camera_f.AbsolutePosition.X, 0, gl_camera_f.AbsolutePosition.Z ); // zt_vector : GLS.VectorTypes.TVector4d;
  ////GLS.VectorGeometry.SetVector( zt_vector, gl_camera_f.AbsolutePosition.X, Self.punkty_¿ycia_gl_dummy_cube.AbsoluteDirection.Y, gl_camera_f.AbsolutePosition.Z );
  //punkty_¿ycia_procent_zosta³o_l := Self.punkty_¿ycia_gl_dummy_cube.DistanceTo( zt_vector ); // Tutaj tymczasowo jako odleg³oœæ.
  //
  //// Liczy k¹t w osi X -
  ////  ze wspó³rzêdnych X, Z kamery wylicza odleg³oœæ i u¿ywa tego jako wspó³rzêdnej x;
  ////  z ró¿nicy miêdzy wysokoœci¹ kamery a wysokoœci¹ wskaŸnika ¿ycia wylicza wspó³rzêdn¹ y;
  ////  k¹t liczony w punkcie (0, 0) miedzy osi¹ x i wyliczonym punktem x, y.
  //Self.punkty_¿ycia_podniesienie_gl_dummy_cube.PitchAngle :=
  //  -Math.RadToDeg
  //    (
  //      GLS.VectorGeometry.AngleBetweenVectors
  //        (
  //          GLS.VectorGeometry.VectorMake( punkty_¿ycia_procent_zosta³o_l, gl_camera_f.AbsolutePosition.Y - Self.punkty_¿ycia_gl_dummy_cube.AbsolutePosition.Y, 0 ),
  //          GLS.VectorGeometry.VectorMake( 1, 0, 0 ),
  //          GLS.VectorGeometry.VectorMake( 0, 0, 0 )
  //        )
  //    );
  //
  //if gl_camera_f.AbsolutePosition.Y < Self.punkty_¿ycia_gl_dummy_cube.AbsolutePosition.Y then
  //  Self.punkty_¿ycia_podniesienie_gl_dummy_cube.PitchAngle := -Self.punkty_¿ycia_podniesienie_gl_dummy_cube.PitchAngle;
  //---// Wersja B.


  Self.punkty_¿ycia__wskaŸnik.Height := Self.punkty_¿ycia__wskaŸnik__wielkoœæ_z_pe³nym_¿yciem * Self.punkty_¿ycia_procent_zosta³o * 0.01;

  case wartoœæ_liczbowa_f of
      1 : Self.punkty_¿ycia__napis.Text := Trim(  FormatFloat( '### ### ##0', Self.punkty_¿ycia_aktualne )  );
      2 : Self.punkty_¿ycia__napis.Text := Trim(  FormatFloat( '### ### ##0', Self.punkty_¿ycia_aktualne )  ) + ' / ' + Trim(  FormatFloat( '### ### ##0', Self.punkty_¿ycia_maksymalne )  );
      3 : Self.punkty_¿ycia__napis.Text := Trim(  FormatFloat( '### ### ##0', Self.punkty_¿ycia_procent_zosta³o )  ) + '%';
      4 : Self.punkty_¿ycia__napis.Text := Trim(  FormatFloat( '### ### ##0', Self.punkty_¿ycia_aktualne )  ) + ' (' + Trim(  FormatFloat( '### ### ##0', Self.punkty_¿ycia_procent_zosta³o )  ) + '%)';
      else//case wartoœæ_liczbowa_f of
        Self.punkty_¿ycia__napis.Text := '';
    end;
  //---//case wartoœæ_liczbowa_f of


Exit; //?????
  Self.punkty_¿ycia__napis.Text := Self.punkty_¿ycia__napis.Text + ' | a ' + Self.Si_Aktywnoœæ_Aktualna_Nazwa( Statki_Form.t³umaczenie_komunikaty_r ); // TT³umaczenie_Komunikaty_r
  Self.punkty_¿ycia__napis.Text := Self.punkty_¿ycia__napis.Text + ' | s ' + Self.Si_Strzelanie_Tryb_Aktualny_Nazwa( Statki_Form.t³umaczenie_komunikaty_r ); // TT³umaczenie_Komunikaty_r

Self.punkty_¿ycia__napis.Text := Self.punkty_¿ycia__napis.Text + ' | ' +
//  Trim(  FormatFloat( '### ### ##0', Self.si__punkt_zadany__wspó³rzêdne.X )  ) + ' , ' +
//  Trim(  FormatFloat( '### ### ##0', Self.si__punkt_zadany__wspó³rzêdne.Z )  ) + ' -- ' +
//  Trim(  FormatFloat( '### ### ##0', Self.AbsolutePosition.X )  ) + ' , ' +
  Trim(  FormatFloat( '### ### ##0', Self.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie )  );

end;//---//Funkcja Punkty_¯ycia__WskaŸnik__Rysuj().

//Funkcja Uszkodzenia_Dodaj().
procedure TStatek.Uszkodzenia_Dodaj();
type
  TUszkodzona_Czêœæ_l = ( uc_l_Brak, uc_l_kotwica, uc_l_radar, uc_l_radio, uc_l_sonar, uc_l_ster, uc_l_ster_g³êbokoœci, uc_l_œruby );

var
  uszkodzona_broñ_t : array of Typy_Wspolne.TAmunicja_Rodzaj;
  uszkodzona_czêœæ_t : array of TUszkodzona_Czêœæ_l;

  //Funkcja Uszkodzona_Broñ_Dodaj_Do_Tabeli() w Uszkodzenia_Dodaj().
  procedure Uszkodzona_Broñ_Dodaj_Do_Tabeli( uszkodzona_broñ_f : Typy_Wspolne.TAmunicja_Rodzaj );
  var
    zti : integer;
  begin

    zti := Length( uszkodzona_broñ_t );
    SetLength( uszkodzona_broñ_t, zti + 1 );
    uszkodzona_broñ_t[ zti ] := uszkodzona_broñ_f;

  end;//---//Funkcja Uszkodzona_Broñ_Dodaj_Do_Tabeli() w Uszkodzenia_Dodaj().

  //Funkcja Uszkodzona_Czêœæ_Dodaj_Do_Tabeli() w Uszkodzenia_Dodaj().
  procedure Uszkodzona_Czêœæ_Dodaj_Do_Tabeli( uszkodzona_czêœæ_f : TUszkodzona_Czêœæ_l );
  var
    zti : integer;
  begin

    zti := Length( uszkodzona_czêœæ_t );
    SetLength( uszkodzona_czêœæ_t, zti + 1 );
    uszkodzona_czêœæ_t[ zti ] := uszkodzona_czêœæ_f;

  end;//---//Funkcja Uszkodzona_Czêœæ_Dodaj_Do_Tabeli() w Uszkodzenia_Dodaj().

begin//Funkcja Uszkodzenia_Dodaj().

  //
  // Funkcja ustawia uszkodzenie wylosowanego elementu.
  //

  // To samo w TStatek.Uszkodzenia_Dodaj(), TStatki_Form.Element_Uszkodzenie_Ustaw() w Oznacz_Kolizjê() w Gra_GLCollisionManagerCollision().

  if Length( Self.kotwica_t ) > 0 then
    Uszkodzona_Czêœæ_Dodaj_Do_Tabeli( uc_l_kotwica );

  if Self.radar_zasiêg > 0 then
    Uszkodzona_Czêœæ_Dodaj_Do_Tabeli( uc_l_radar );

  if Self.radio_zasiêg > 0 then
    Uszkodzona_Czêœæ_Dodaj_Do_Tabeli( uc_l_radio );

  if Self.sonar_zasiêg > 0 then
    Uszkodzona_Czêœæ_Dodaj_Do_Tabeli( uc_l_sonar );

  if Length( Self.ster_t ) > 0 then
    Uszkodzona_Czêœæ_Dodaj_Do_Tabeli( uc_l_ster );

  if Length( Self.ster_g³êbokoœci_t ) > 0 then
    Uszkodzona_Czêœæ_Dodaj_Do_Tabeli( uc_l_ster_g³êbokoœci );

  if Length( Self.œruby_t ) > 0 then
    Uszkodzona_Czêœæ_Dodaj_Do_Tabeli( uc_l_œruby );


  if Length( uszkodzona_czêœæ_t ) > 0 then
    case uszkodzona_czêœæ_t[ Random(  Length( uszkodzona_czêœæ_t )  ) ] of
        uc_l_kotwica : Self.kotwica_t[ Random(  Length( Self.kotwica_t )  ) ].uszkodzone_czas_sekundy_i := Czas_Teraz_W_Sekundach();
        uc_l_radar : Self.uszkodzone_czas_sekundy_i__radar := Czas_Teraz_W_Sekundach();
        uc_l_radio : Self.uszkodzone_czas_sekundy_i__radio := Czas_Teraz_W_Sekundach();
        uc_l_sonar : Self.uszkodzone_czas_sekundy_i__sonar := Czas_Teraz_W_Sekundach();
        uc_l_ster : Self.ster_t[ Random(  Length( Self.ster_t )  ) ].uszkodzone_czas_sekundy_i := Czas_Teraz_W_Sekundach();
        uc_l_ster_g³êbokoœci : Self.ster_g³êbokoœci_t[ Random(  Length( Self.ster_g³êbokoœci_t )  ) ].uszkodzone_czas_sekundy_i := Czas_Teraz_W_Sekundach();
        uc_l_œruby : Self.œruby_t[ Random(  Length( Self.œruby_t )  ) ].uszkodzone_czas_sekundy_i := Czas_Teraz_W_Sekundach();
      end;
    //---//case uszkodzona_czêœæ_t[ Random(  Length( uszkodzona_czêœæ_t )  ) ] of


  Self.efekt__element_uszkodzenie_gl_dummy_cube_st.Visible :=
       ( Self.uszkodzone_czas_sekundy_i__radar <> 0 )
    or ( Self.uszkodzone_czas_sekundy_i__radio <> 0 )
    or ( Self.uszkodzone_czas_sekundy_i__sonar <> 0 );



  if Length( Self.artyleria_t ) > 0 then
    Uszkodzona_Broñ_Dodaj_Do_Tabeli( Typy_Wspolne.ar_Artyleria );

  if Length( Self.dzia³a_t ) > 0 then
    Uszkodzona_Broñ_Dodaj_Do_Tabeli( Typy_Wspolne.ar_Pocisk );

  if Length( Self.bomba_g³êbinowa_t ) > 0 then
    Uszkodzona_Broñ_Dodaj_Do_Tabeli( Typy_Wspolne.ar_Bomba_G³êbinowa );

  if Length( Self.je¿e_g³êbinowe_t ) > 0 then
    Uszkodzona_Broñ_Dodaj_Do_Tabeli( Typy_Wspolne.ar_Je¿e_G³êbinowe );

  if Length( Self.torpedy_wyrzutnie_t ) > 0 then
    Uszkodzona_Broñ_Dodaj_Do_Tabeli( Typy_Wspolne.ar_Torpeda );


  if Length( uszkodzona_broñ_t ) > 0 then
    case uszkodzona_broñ_t[ Random(  Length( uszkodzona_broñ_t )  ) ] of
        Typy_Wspolne.ar_Artyleria : Self.artyleria_t[ Random(  Length( Self.artyleria_t )  ) ].uszkodzone_czas_sekundy_i := Czas_Teraz_W_Sekundach();
        Typy_Wspolne.ar_Bomba_G³êbinowa : Self.bomba_g³êbinowa_t[ Random(  Length( Self.bomba_g³êbinowa_t )  ) ].uszkodzone_czas_sekundy_i := Czas_Teraz_W_Sekundach();
        Typy_Wspolne.ar_Je¿e_G³êbinowe : Self.je¿e_g³êbinowe_t[ Random(  Length( Self.je¿e_g³êbinowe_t )  ) ].uszkodzone_czas_sekundy_i := Czas_Teraz_W_Sekundach();
        Typy_Wspolne.ar_Pocisk : Self.dzia³a_t[ Random(  Length( Self.dzia³a_t )  ) ].uszkodzone_czas_sekundy_i := Czas_Teraz_W_Sekundach();
        Typy_Wspolne.ar_Torpeda : Self.torpedy_wyrzutnie_t[ Random(  Length( Self.torpedy_wyrzutnie_t )  ) ].uszkodzone_czas_sekundy_i := Czas_Teraz_W_Sekundach();
      end;
    //---//case uszkodzona_broñ_t[ Random(  Length( uszkodzona_broñ_t )  ) ] of

end;//---//Funkcja Uszkodzenia_Dodaj().

//Funkcja Parametry_Odczytaj().
function TStatek.Parametry_Odczytaj( const t³umaczenie_komunikaty_r_f : TT³umaczenie_Komunikaty_r; const dane_wszystkie_f : boolean = false ) : string;
var
  i : integer;
const
  odstêp_l_c : string = '   ';    
begin

  //
  // Funkcja wypisuje dane (parametry) statku.
  //
  // Zwraca napis z danymi (parametrami) statku.
  //
  // Parametry:
  //   t³umaczenie_komunikaty_r_f
  //   dane_wszystkie_f:
  //     false - wypisuje tylko dane podstawowe.
  //     true - wypisujewszystkie dane.
  //

  Result := '';

  Result := Result +
    t³umaczenie_komunikaty_r_f.s³owo__lotniskowiec + ': ';

  if Self.czy_lotniskowiec then
    Result := Result +
      t³umaczenie_komunikaty_r_f.s³owo__tak +
      #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__lotniskowiec__samolot_przyœpieszanie + ': ' + Trim(  FormatFloat( '### ### ##0.000', Self.lotniskowiec__samolot_przyœpieszanie )  )
  else//Self.czy_lotniskowiec
    Result := Result +
      t³umaczenie_komunikaty_r_f.s³owo__nie;

  Result := Result +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__lotniskowiec__zasoby_odnawianie__prze³adowanie_czas_milisekundy + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.lotniskowiec__zasoby_odnawianie__prze³adowanie_czas_milisekundy )  ) +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__luneta_zasiêg + ': ' + Trim(  FormatFloat( '### ### ##0', Self.luneta_zasiêg )  ) +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__prêdkoœæ_maksymalna + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.prêdkoœæ_maksymalna )  ) +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__prêdkoœæ_przyspieszanie + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.prêdkoœæ_przyspieszanie )  ) +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__katapulta_start_z_lotniskowca__prze³adowanie_czas_milisekundy + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie_czas_milisekundy )  ) +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__prêdkoœæ_zwalnianie + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.prêdkoœæ_zwalnianie )  ) +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__punkty_¿ycia_maksymalne + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.punkty_¿ycia_maksymalne )  ) +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__radar_zasiêg + ': ' + Trim(  FormatFloat( '### ### ##0', Self.radar_zasiêg )  ) +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__radio_zasiêg + ': ' + Trim(  FormatFloat( '### ### ##0', Self.radio_zasiêg )  ) +
    #13 + #10 + t³umaczenie_komunikaty_r_f.s³owo__samolot + ': ';

  if Self.czy_samolot then
    Result := Result +
      t³umaczenie_komunikaty_r_f.s³owo__tak
  else//Self.czy_samolot
    Result := Result +
      t³umaczenie_komunikaty_r_f.s³owo__nie;

  Result := Result +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__skrêt_k¹t_maksymalny + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.skrêt_k¹t_maksymalny )  ) +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__skrêt_prêdkoœæ + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.skrêt_prêdkoœæ )  ) +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__skrêt_szybkoœæ_wychylania_steru + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.skrêt_szybkoœæ_wychylania_steru )  ) +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__skrêt_wspó³czynnik_do_prêdkoœci + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.skrêt_wspó³czynnik_do_prêdkoœci )  ) +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__sonar_zasiêg + ': ' + Trim(  FormatFloat( '### ### ##0', Self.sonar_zasiêg )  ) +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__zanurzanie + ': ';

  if Self.czy_zanurzanie then
    Result := Result +
      t³umaczenie_komunikaty_r_f.s³owo__tak
  else//Self.czy_zanurzanie
    Result := Result +
      t³umaczenie_komunikaty_r_f.s³owo__nie;

  Result := Result +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__zanurzenie_peryskopowe_do + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.zanurzenie_peryskopowe_do )  ) +
                ' (' + t³umaczenie_komunikaty_r_f.parametry_odczytaj__zanurzenie_peryskopowe_do__od + ' ' + Trim(  FormatFloat( '### ### ##0.0000', Self.zanurzenie_peryskopowe_do - zanurzanie_precyzja_c )  ) +
                ' ' + t³umaczenie_komunikaty_r_f.parametry_odczytaj__zanurzenie_peryskopowe_do__do + ' ' + Trim(  FormatFloat( '### ### ##0.0000', Self.zanurzenie_peryskopowe_do + zanurzanie_precyzja_c )  ) + ')' +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__zanurzenie_pu³ap__maksymalne + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.zanurzenie_pu³ap__maksymalne )  ) +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__zanurzenie_pu³ap__szybkoœæ + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.zanurzenie_pu³ap__szybkoœæ )  );


  if dane_wszystkie_f then
    begin

      Result := Result +
        #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__falowanie_bok_skrêt_zakres + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.falowanie_bok_skrêt_zakres )  ) +
        #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__falowanie_bok_zakres + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.falowanie_bok_zakres )  ) +
        #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__falowanie_góra_dó³_zakres + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.falowanie_góra_dó³_zakres )  ) +
        #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__falowanie_przód_zakres + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.falowanie_przód_zakres )  ) +
        #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__kamera_odleg³oœæ_maksymalna + ': ' + Trim(  FormatFloat( '### ### ##0', Self.kamera_odleg³oœæ_maksymalna )  ) +
        #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__prêdkoœæ_ograniczenie + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.prêdkoœæ_ograniczenie )  ) +
        #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__x_prymityw_odleg³oœæ + ': ' + Trim(  FormatFloat( '### ### ##0.0000', x_prymityw_odleg³oœæ )  ) +
        #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__y_prymityw_najwiêksze + ': ' + Trim(  FormatFloat( '### ### ##0.0000', y_prymityw_najwiêksze )  ) +
        #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__z_prymityw_odleg³oœæ + ': ' + Trim(  FormatFloat( '### ### ##0.0000', z_prymityw_odleg³oœæ )  ) +
        #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__œruby_iloœæ + ': ' + Trim(   FormatFloat(  '### ### ##0', Length( Self.œruby_t )  )   );

    
      for i := 0 to Length( Self.œruby_t ) - 1 do
        begin

          Result := Result +
            #13 + #10 + odstêp_l_c + Trim(  FormatFloat( '### ### ##0', i + 1 )  ) +
            #13 + #10 + odstêp_l_c + odstêp_l_c + t³umaczenie_komunikaty_r_f.parametry_odczytaj__œruby__czy_obrót_lewo + ': ';

          if Self.œruby_t[ i ].czy_obrót_lewo then
            Result := Result +
              t³umaczenie_komunikaty_r_f.s³owo__tak
          else//if Self.œruby_t[ i ].czy_obrót_lewo then
            Result := Result +
              t³umaczenie_komunikaty_r_f.s³owo__nie;

          Result := Result +
            #13 + #10 + odstêp_l_c + odstêp_l_c + t³umaczenie_komunikaty_r_f.parametry_odczytaj__œruby__prêdkoœæ_obrotowa_maksymalna + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.œruby_t[ i ].prêdkoœæ_obrotowa_maksymalna )  ) +
            #13 + #10 + odstêp_l_c + odstêp_l_c + t³umaczenie_komunikaty_r_f.parametry_odczytaj__œruby__prêdkoœæ_obrotowa_przyspieszanie + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.œruby_t[ i ].prêdkoœæ_obrotowa_przyspieszanie )  );

        end;
      //---//for i := 0 to Length( Self.œruby_t ) - 1 do
  
    end;
  //---//if dane_wszystkie_f then
  
  
  Result := Result +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__artyleria_iloœæ + ': ' + Trim(   FormatFloat(  '### ### ##0', Length( Self.artyleria_t )  )   );

  for i := 0 to Length( Self.artyleria_t ) - 1 do
    begin

      Result := Result +
        #13 + #10 + odstêp_l_c + Trim(  FormatFloat( '### ### ##0', i + 1 )  ) +
        Self.artyleria_t[ i ].Parametry_Odczytaj( odstêp_l_c + odstêp_l_c, t³umaczenie_komunikaty_r_f, dane_wszystkie_f );

    end;
  //---//for i := 0 to Length( Self.artyleria_t ) - 1 do


  Result := Result +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__bomby_g³êbinowe_wyrzutnie_iloœæ + ': ' + Trim(   FormatFloat(  '### ### ##0', Length( Self.bomba_g³êbinowa_t )  )   );

  for i := 0 to Length( Self.bomba_g³êbinowa_t ) - 1 do
    begin

      Result := Result +
        #13 + #10 + odstêp_l_c + Trim(  FormatFloat( '### ### ##0', i + 1 )  ) +
        Self.bomba_g³êbinowa_t[ i ].Parametry_Odczytaj( odstêp_l_c + odstêp_l_c, t³umaczenie_komunikaty_r_f, dane_wszystkie_f );

    end;
  //---//for i := 0 to Length( Self.bomba_g³êbinowa_t ) - 1 do


  Result := Result +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__dzia³a_iloœæ + ': ' + Trim(   FormatFloat(  '### ### ##0', Length( Self.dzia³a_t )  )   );

  for i := 0 to Length( Self.dzia³a_t ) - 1 do
    begin

      Result := Result +
        #13 + #10 + odstêp_l_c + Trim(  FormatFloat( '### ### ##0', i + 1 )  ) +
        Self.dzia³a_t[ i ].Parametry_Odczytaj( odstêp_l_c + odstêp_l_c, t³umaczenie_komunikaty_r_f, dane_wszystkie_f );

    end;
  //---//for i := 0 to Length( Self.dzia³a_t ) - 1 do


  Result := Result +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__je¿e_g³êbinowe_wyrzutnie_iloœæ + ': ' + Trim(   FormatFloat(  '### ### ##0', Length( Self.je¿e_g³êbinowe_t )  )   );

  for i := 0 to Length( Self.je¿e_g³êbinowe_t ) - 1 do
    begin

      Result := Result +
        #13 + #10 + odstêp_l_c + Trim(  FormatFloat( '### ### ##0', i + 1 )  ) +
        Self.je¿e_g³êbinowe_t[ i ].Parametry_Odczytaj( odstêp_l_c + odstêp_l_c, t³umaczenie_komunikaty_r_f, dane_wszystkie_f );

    end;
  //---//for i := 0 to Length( Self.je¿e_g³êbinowe_t ) - 1 do


  Result := Result +
    #13 + #10 + t³umaczenie_komunikaty_r_f.parametry_odczytaj__torpedy_wyrzutnie_iloœæ + ': ' + Trim(   FormatFloat(  '### ### ##0', Length( Self.torpedy_wyrzutnie_t )  )   );

  for i := 0 to Length( Self.torpedy_wyrzutnie_t ) - 1 do
    begin

      Result := Result +
        #13 + #10 + odstêp_l_c + Trim(  FormatFloat( '### ### ##0', i + 1 )  ) +
        Self.torpedy_wyrzutnie_t[ i ].Parametry_Odczytaj( odstêp_l_c + odstêp_l_c, t³umaczenie_komunikaty_r_f, dane_wszystkie_f );

    end;
  //---//for i := 0 to Length( Self.torpedy_wyrzutnie_t ) - 1 do

end;//---//Funkcja Parametry_Odczytaj().

//Funkcja Wygl¹d_Elementy__Noc_Zmieñ().
procedure TStatek.Wygl¹d_Elementy__Noc_Zmieñ( const dzieñ_jasnoœæ_f : real; const œwiat³a_miganie_funkcjonalnoœæ_aktywna_f : boolean; const wygl¹d_elementy__kolor_noc_zmieñ_f : TWygl¹d_Elementy__Kolor_Noc_Zmieñ; const czas_miêdzy_w_milisekundach_f : TCzas_Miêdzy_W_Milisekundach = nil; const œwiat³a_miganie__tylko_f : boolean = false );
var
  i : integer;
begin

  //
  // Funkcja przyciemnia kolory obiektów wraz z zapadaniem nocy.
  //
  // Parametry:
  //   dzieñ_jasnoœæ_f
  //   œwiat³a_miganie_funkcjonalnoœæ_aktywna_f:
  //     false - funkcjonalnoœæ migaj¹cych œwiate³ jest wy³¹czona.
  //     true - funkcjonalnoœæ migaj¹cych œwiate³ jest w³¹czona.
  //   wygl¹d_elementy__kolor_noc_zmieñ_f - 'funkcja' zmieniaj¹ca kolor elementów
  //   czas_miêdzy_w_milisekundach_f - 'funkcja' wyliczaj¹ca czas jaki up³yn¹³
  //   œwiat³a_miganie_tylko_f:
  //     false - obs³uguje zmiany pory dnia.
  //     true - obs³uguje tylko miganie œwiate³.
  //

  if not œwiat³a_miganie__tylko_f then
    begin

      Self.Punkty_¯ycia__WskaŸnik__Noc_Zmieñ( dzieñ_jasnoœæ_f );


      for i := 0 to Length( Self.artyleria_t ) - 1 do
        Self.artyleria_t[ i ].Wygl¹d_Elementy__Noc_Zmieñ( dzieñ_jasnoœæ_f, wygl¹d_elementy__kolor_noc_zmieñ_f );

      for i := 0 to Length( Self.bomba_g³êbinowa_t ) - 1 do
        Self.bomba_g³êbinowa_t[ i ].Wygl¹d_Elementy__Noc_Zmieñ( dzieñ_jasnoœæ_f, wygl¹d_elementy__kolor_noc_zmieñ_f );

      for i := 0 to Length( Self.dzia³a_t ) - 1 do
        Self.dzia³a_t[ i ].Wygl¹d_Elementy__Noc_Zmieñ( dzieñ_jasnoœæ_f, wygl¹d_elementy__kolor_noc_zmieñ_f );

      for i := 0 to Length( Self.je¿e_g³êbinowe_t ) - 1 do
        Self.je¿e_g³êbinowe_t[ i ].Wygl¹d_Elementy__Noc_Zmieñ( dzieñ_jasnoœæ_f, wygl¹d_elementy__kolor_noc_zmieñ_f );

      for i := 0 to Length( Self.torpedy_wyrzutnie_t ) - 1 do
        Self.torpedy_wyrzutnie_t[ i ].Wygl¹d_Elementy__Noc_Zmieñ( dzieñ_jasnoœæ_f, wygl¹d_elementy__kolor_noc_zmieñ_f );


      for i := 0 to Length( Self.kotwica_t ) - 1 do
        Self.kotwica_t[ i ].Wygl¹d_Elementy__Noc_Zmieñ( dzieñ_jasnoœæ_f, wygl¹d_elementy__kolor_noc_zmieñ_f );

      for i := 0 to Length( Self.ster_t ) - 1 do
        Self.ster_t[ i ].Wygl¹d_Elementy__Noc_Zmieñ( dzieñ_jasnoœæ_f, wygl¹d_elementy__kolor_noc_zmieñ_f );

      for i := 0 to Length( Self.ster_g³êbokoœci_t ) - 1 do
        Self.ster_g³êbokoœci_t[ i ].Wygl¹d_Elementy__Noc_Zmieñ( dzieñ_jasnoœæ_f, wygl¹d_elementy__kolor_noc_zmieñ_f );

      for i := 0 to Length( Self.œruby_t ) - 1 do
        Self.œruby_t[ i ].Wygl¹d_Elementy__Noc_Zmieñ( dzieñ_jasnoœæ_f, wygl¹d_elementy__kolor_noc_zmieñ_f );

    end;
  //---//if not œwiat³a_miganie__tylko_f then


  if    ( Self.wygl¹d_elementy_list <> nil )
    and (  Assigned( Self.wygl¹d_elementy_list )  )
    and ( @wygl¹d_elementy__kolor_noc_zmieñ_f <> nil ) then
    for i := 0 to Self.wygl¹d_elementy_list.Count - 1 do
      if not ( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) is TGLLines ) then
        if   ( not œwiat³a_miganie_funkcjonalnoœæ_aktywna_f )
          or (
                   ( not œwiat³a_miganie__tylko_f )
               and (
                        (  not Wyglad_Elementy.Œwiat³a_Miganie( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) )  )
                     or (
                              (  Wyglad_Elementy.Œwiat³a_Miganie( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) )  )
                          and (
                                   (
                                         (  Wyglad_Elementy.Œwiat³o( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) )  )
                                     and ( not Self.œwiat³a_w³¹czone )
                                   )
                                or (
                                         (  Wyglad_Elementy.Œwiat³o_Dodatkowe( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) )  )
                                     and ( not Self.œwiat³a_dodatkowe_w³¹czone )
                                   )
                              )
                        )
                   )
             ) then
          begin

            if    (
                       ( not Self.œwiat³a_w³¹czone )
                    or (  not Wyglad_Elementy.Œwiat³o( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) )  )
                  )
              and (
                       ( not Self.œwiat³a_dodatkowe_w³¹czone )
                    or (  not Wyglad_Elementy.Œwiat³o_Dodatkowe( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) )  )
                  ) then
              wygl¹d_elementy__kolor_noc_zmieñ_f(  TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]).Material, dzieñ_jasnoœæ_f );

            if (
                     ( Self.œwiat³a_w³¹czone )
                 and (  Wyglad_Elementy.Œwiat³o( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) )  )
               ) then // Aby rozjaœniæ œwiat³a gdy zosta³y przyciemnione noc¹.
              wygl¹d_elementy__kolor_noc_zmieñ_f(  TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]).Material, œwiat³o__jasnoœæ_c );

            if (
                     ( Self.œwiat³a_dodatkowe_w³¹czone )
                 and (  Wyglad_Elementy.Œwiat³o_Dodatkowe( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) )  )
               ) then // Aby rozjaœniæ œwiat³a gdy zosta³y przyciemnione noc¹.
              wygl¹d_elementy__kolor_noc_zmieñ_f(  TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]).Material, œwiat³o_dodatkowe__jasnoœæ_c );

          end
        else//if   ( not œwiat³a_miganie_funkcjonalnoœæ_aktywna_f ) (...)
          if    ( œwiat³a_miganie__tylko_f )
            and (  Wyglad_Elementy.Œwiat³a_Miganie( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) )  )
            and (
                     (
                           ( Self.œwiat³a_w³¹czone )
                       and (  Wyglad_Elementy.Œwiat³o( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) )  )
                     )
                  or (
                           ( Self.œwiat³a_dodatkowe_w³¹czone )
                       and (  Wyglad_Elementy.Œwiat³o_Dodatkowe( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) )  )
                     )
                )
            and (  czas_miêdzy_w_milisekundach_f(  Wyglad_Elementy.Œwiat³a_Miganie__Czas_Przeliczenia_Ostatniego( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) ), true  ) >= Wyglad_Elementy.Œwiat³a_Miganie__Czas_Do_Zmiany( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) )  ) then
            begin

              if Wyglad_Elementy.Œwiat³a_Miganie__OpóŸnienie_Losowe( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) ) > 0 then
                begin

                  Wyglad_Elementy.Œwiat³a_Miganie__OpóŸnienie_Losowe(  TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]), Wyglad_Elementy.Œwiat³a_Miganie__OpóŸnienie_Losowe( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) ) - 1  );

                end
              else//if Wyglad_Elementy.Œwiat³a_Miganie__OpóŸnienie_Losowe( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) ) > 0 then
                begin

                  if Wyglad_Elementy.Œwiat³a_Miganie__Œwiat³o_W³¹czone( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) ) then
                    begin

                      wygl¹d_elementy__kolor_noc_zmieñ_f( TGLCustomSceneObject(wygl¹d_elementy_list[ i ]).Material, dzieñ_jasnoœæ_f );
                      Wyglad_Elementy.Œwiat³a_Miganie__Œwiat³o_W³¹czone( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]), false );

                    end
                  else//if Wyglad_Elementy.Œwiat³a_Miganie__Œwiat³o_W³¹czone( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) ) then
                    begin

                      if Wyglad_Elementy.Œwiat³o( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) ) then
                        wygl¹d_elementy__kolor_noc_zmieñ_f( TGLCustomSceneObject(wygl¹d_elementy_list[ i ]).Material, œwiat³o__jasnoœæ_c )
                      else//if Wyglad_Elementy.Œwiat³o( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) ) then
                        if Wyglad_Elementy.Œwiat³o_Dodatkowe( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) ) then
                          wygl¹d_elementy__kolor_noc_zmieñ_f( TGLCustomSceneObject(wygl¹d_elementy_list[ i ]).Material, œwiat³o_dodatkowe__jasnoœæ_c );

                      Wyglad_Elementy.Œwiat³a_Miganie__Œwiat³o_W³¹czone( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]), true );

                    end;
                  //---//if Wyglad_Elementy.Œwiat³a_Miganie__Œwiat³o_W³¹czone( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) ) then


                  Wyglad_Elementy.Œwiat³a_Miganie__Czas_Do_Zmiany( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]), true ); // Przesunie indeks dla tabeli czasów.

                end;
              //---//if Wyglad_Elementy.Œwiat³a_Miganie__OpóŸnienie_Losowe( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) ) > 0 then

              Wyglad_Elementy.Œwiat³a_Miganie__Czas_Przeliczenia_Ostatniego( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]), Czas_Teraz_W_Milisekundach() );

            end;
          //---//if not ( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) is TGLLines ) then

end;//---//Funkcja Wygl¹d_Elementy__Noc_Zmieñ().

//Funkcja Samolot_Na_Lotniskowcu().
function TStatek.Samolot_Na_Lotniskowcu() : TStatek;
begin

  //
  // Funkcja sprawdza czy samolot jest na lotniskowcu.
  //
  // Zwraca TStatek (lotniskowiec) gdy samolot jest na lotniskowcu lub nil gdy nie jest.
  //

  if    ( Self.czy_samolot )
    //and ( Self.czy_samolot__kolizja ) // Zale¿nie od momentu sprawdzania kolizja mo¿e byæ akurat wyzerowana do ponownego sprawdzenia.
    and ( Self.Parent <> nil ) // falowanie_gl_dummy_cube.
    //and ( Self.Parent <> Statki_Form.Gra_Obiekty_GLDummyCube )
    and ( Self.Parent <> Self.gra_obiekty_kontener_st )
    //and (  Abs( Self.prêdkoœæ_aktualna_procent__wzglêdny ) < samolot_prêdkoœæ_lotu_procent_minimalny_c  )
    and ( Self.Parent.Parent <> nil ) // falowanie_gl_dummy_cube - toniêcie_gl_dummy_cube.
    and ( Self.Parent.Parent.Parent <> nil )
    and ( Self.Parent.Parent.Parent is TStatek )
    and ( TStatek(Self.Parent.Parent.Parent).czy_lotniskowiec ) then
    Result := TStatek(Self.Parent.Parent.Parent)
  else//if    ( Self.czy_samolot ) (...)
    Result := nil;

end;//---//Funkcja Samolot_Na_Lotniskowcu().

//Funkcja Samolot_Przyjmij().
procedure TStatek.Samolot_Przyjmij( const samolot__statek_f : TStatek; const ³apaczem_z³ap_f : boolean = false );
var
  i : integer;
  ztr : real;
  kierunek_kopia_vector,
  pozycja_kopia_vector
    : GLS.VectorTypes.TVector4f;
  kotwica_zakresy_r_l : TKotwica_Zakresy_r; // Tylko aby wywo³aæ funkcjê.
begin

  //
  // Funkcja lotniskowiec ustawia samolot, jako swojego potomka.
  //

  if   ( samolot__statek_f = nil )
    or ( not samolot__statek_f.czy_samolot )
    or ( Self.punkty_¿ycia_aktualne <= 0 ) then
    Exit;


  if    ( ³apaczem_z³ap_f )
    and (
             ( samolot__statek_f.si_decyduje )
          or ( samolot__statek_f.si__statek_gracza__p³ywa )
        )
    and ( samolot__statek_f.si_aktywnoœæ in [ sia_Samolot__Startowanie ] ) then
    Exit;


  if not ³apaczem_z³ap_f then
    begin

      if Czas_Miêdzy_W_Milisekundach( Self.lotniskowiec__samolot_przyjmij_od³¹cz__czas_sekundy_i ) < lotniskowiec__samolot_przyjmij_od³¹cz__czas_milisekundy_c then
        Exit;

      kierunek_kopia_vector := samolot__statek_f.AbsolutePosition;
      pozycja_kopia_vector := samolot__statek_f.AbsoluteDirection;

    end;
  //---//if not ³apaczem_z³ap_f then


  samolot__statek_f.Parent := Self.falowanie_gl_dummy_cube;
  Self.id_statek__lotniskowiec__ma_samolot_na_pok³adzie := samolot__statek_f.id_statek;

  if Self.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = -99 then
    Self.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := samolot__statek_f.id_statek;


  // Je¿eli samolot na lotniskowcu ma opuszczone kotwice to detekcja kolizji z pok³adem jest zak³ócana.
  if samolot__statek_f.kotwica_ruch_etap__st <> kre_W_Górê then
    samolot__statek_f.Kotwica_Ruch_Ustaw( kre_W_Górê );

  for i := 0 to Length( samolot__statek_f.kotwica_t ) - 1 do
    samolot__statek_f.kotwica_t[ i ].Kotwica_Przesuwaj( 0, 1, kotwica_zakresy_r_l, true );


  if not ³apaczem_z³ap_f then
    begin

      samolot__statek_f.AbsolutePosition := kierunek_kopia_vector;
      samolot__statek_f.AbsoluteDirection := pozycja_kopia_vector;
      samolot__statek_f.Direction.Y := 0; // Gdy lotniskowiec jest pochylony to samolot zapada siê w pok³ad.

      samolot__statek_f.Position.Y := Self.lotniskowiec__³apacz_samolotów_dummy.Position.Y - Self.lotniskowiec__³apacz_samolotów_dummy.Scale.Y * 0.5; // Aby samolotem nie trzês³o podczas l¹dowania / startu koryguje pozycjê Y samolotu dla lepszego wykrywania kolizji.


      {$region 'Koryguje prêdkoœæ samolotu podczas l¹dowania na lotniskowcu.'}
      if Self.prêdkoœæ_aktualna <> 0 then
        begin

          // Je¿eli lotniskowiec p³ynie.

          ztr := // K¹t miêdzy samolotem i lotniskowcem. Wartoœæ jest zawsze dodatnia, bez znaczenia, jak i nie okreœla, w któr¹ stronê s¹ obrócone obiekty.
            System.Math.RadToDeg
              (
                GLS.VectorGeometry.AngleBetweenVectors
                  (
                    GLS.VectorGeometry.VectorMake( Self.AbsoluteDirection.X, 0, Self.AbsoluteDirection.Z ),
                    GLS.VectorGeometry.VectorMake( samolot__statek_f.AbsoluteDirection.X, 0, samolot__statek_f.AbsoluteDirection.Z ),
                    GLS.VectorGeometry.VectorMake( 0, 0, 0 )
                  )
              );


          if   (
                     ( ztr <= samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c * 3 ) // Samolot l¹duje od rufy.
                 and (  System.Math.Sign( Self.prêdkoœæ_aktualna ) = System.Math.Sign( samolot__statek_f.prêdkoœæ_aktualna )  ) // Lotniskowiec i samolot poruszaj¹ siê do przodu.
               )
            or (
                     ( ztr >= 180 - samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c * 3 ) // Samolot l¹duje od dziobu.
                 and (  System.Math.Sign( Self.prêdkoœæ_aktualna ) <> System.Math.Sign( samolot__statek_f.prêdkoœæ_aktualna )  ) // Lotniskowiec porusza siê do ty³u, a samolot porusza siê do przodu.
               ) then
            begin

              // Je¿eli samolot jest pod odpowiednim k¹tem wzglêdem lotniskowca.

              // Je¿eli prêdkoœci lotniskowca i samolotu wzajemnie siê zwiêkszaj¹ (np. samolot l¹duje od rufy a lotniskowiec p³ynie do ty³u)
              // to nie koryguje prêdkoœci samolotu aby nie nalicza³ obra¿eñ ze wzglêdu na zbyt du¿¹ prêdkoœæ i kolizje.


              // Zmniejsza prêdkoœæ samolotu o prêdkoœæ statku.
              if samolot__statek_f.prêdkoœæ_maksymalna <> 0 then
                ztr := 100 * Abs( Self.prêdkoœæ_aktualna ) / samolot__statek_f.prêdkoœæ_maksymalna // Jaki procent maksymalnej prêdkoœci samolotu stanowi aktualna prêdkoœæ statku.
              else//if samolot__statek_f.prêdkoœæ_maksymalna <> 0 then
                ztr := 0;

              if ztr > samolot__statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny then
                ztr := samolot__statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny;


              samolot__statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny := samolot__statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny - ztr;

            end;
          //---//if   ( (...)

        end;
      //---//if Self.prêdkoœæ_aktualna <> 0 then
      {$endregion 'Koryguje prêdkoœæ samolotu podczas l¹dowania na lotniskowcu.'}

    end
  else//if not ³apaczem_z³ap_f then
    begin

      // £apacz wyhamowuje samolot.
      samolot__statek_f.prêdkoœæ_zadana_procent := 0;
      samolot__statek_f.prêdkoœæ_aktualna := 0;
      samolot__statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny := 0;
      samolot__statek_f.prêdkoœæ_aktualna_procent__wzglêdny := 0;

      samolot__statek_f.zanurzenie_pu³ap__zadane_procent := 0;
      samolot__statek_f.zanurzenie_pu³ap__szybkoœæ_aktualna := 0;
      //---// £apacz wyhamowuje samolot.


      samolot__statek_f.Position := Self.lotniskowiec__³apacz_samolotów_dummy.Position;
      samolot__statek_f.Position.Y := samolot__statek_f.Position.Y - Self.lotniskowiec__³apacz_samolotów_dummy.Scale.Y * 0.5;
      samolot__statek_f.AbsoluteDirection := Self.falowanie_gl_dummy_cube.AbsoluteDirection;

    end;
  //---//if not ³apaczem_z³ap_f then

  samolot__statek_f.falowanie_gl_dummy_cube.PitchAngle := 0; // Gdy lotniskowiec jest pochylony to samolot zapada siê w pok³ad.

  samolot__statek_f.czy_samolot__na_lotniskowcu := true;


  if Self.si_aktywnoœæ in [ sia_Patrol ] then
    begin

      // Aby po przyjêciu samolotu lotniskowiec wybra³ nowy punkt patrolu.

      Self.si_aktywnoœæ := sia_Brak;
      Self.si__aktywnoœæ__okreœlenie_ostatnie_sekundy_i := 0;

    end;
  //---//if Self.si_aktywnoœæ in [ sia_Patrol ] then


  Self.lotniskowiec__samolot_przyjmij_od³¹cz__czas_sekundy_i := Czas_Teraz_W_Sekundach();

end;//---//Funkcja Samolot_Przyjmij().

//Funkcja Samolot_Lotniskowiec_Od³¹cz().
procedure TStatek.Samolot_Lotniskowiec_Od³¹cz();
var
  ztr : real;
  kierunek_kopia_vector,
  pozycja_kopia_vector
    : GLS.VectorTypes.TVector4f;
  zt_statek_lotniskowiec : TStatek;
begin

  //
  // Funkcja samolot, który jest potomkiem lotniskowca przestaje byæ jego potomkiem.
  //

  if   ( not Self.czy_samolot )
    or ( Self.Samolot_Na_Lotniskowcu() = nil ) then
    Exit;

  if Czas_Miêdzy_W_Milisekundach( Self.lotniskowiec__samolot_przyjmij_od³¹cz__czas_sekundy_i ) < lotniskowiec__samolot_przyjmij_od³¹cz__czas_milisekundy_c then
    Exit;


  if Self.czy_samolot__na_lotniskowcu then
    zt_statek_lotniskowiec := Self.Samolot_Na_Lotniskowcu()
  else//if Self.czy_samolot__na_lotniskowcu then
    zt_statek_lotniskowiec := nil;


  kierunek_kopia_vector := Self.AbsolutePosition;
  pozycja_kopia_vector := Self.AbsoluteDirection;

  if Self.Samolot_Na_Lotniskowcu() <> nil then
    begin

      // Mo¿liwe, ¿e gdy w trakcie l¹dowanie gdy bêdzie podskakiwa³ wartoœci te siê zresetuj¹ i inny samolot je zajmie. //???

      Self.Samolot_Na_Lotniskowcu().id_statek__lotniskowiec__ma_samolot_na_pok³adzie := -99;
      Self.Samolot_Na_Lotniskowcu().id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := -99;
      Self.Samolot_Na_Lotniskowcu().si__lotniskowiec__l¹dowanie__kurs_aktualny := false;

      //if Self.Samolot_Na_Lotniskowcu().si_aktywnoœæ in [ sia_Patrol ] then
      //  begin
      //
      //    // Aby po wystartowaniu samolotu lotniskowiec wybra³ nowy punkt patrolu.
      //
      //    Self.Samolot_Na_Lotniskowcu().si_aktywnoœæ := sia_Brak;
      //    Self.Samolot_Na_Lotniskowcu().si__aktywnoœæ__okreœlenie_ostatnie_sekundy_i := 0;
      //
      //  end;
      ////---//if Self.Samolot_Na_Lotniskowcu().si_aktywnoœæ in [ sia_Patrol ] then

    end;
  //---//if Self.Samolot_Na_Lotniskowcu() <> nil then

  if Self.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 then
    Self.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := -99;


  //Self.Parent := Statki_Form.Gra_Obiekty_GLDummyCube;
  Self.Parent := Self.gra_obiekty_kontener_st;

  Self.AbsolutePosition := kierunek_kopia_vector;
  Self.AbsoluteDirection := pozycja_kopia_vector;
  Self.Direction.Y := 0; // Je¿eli statek p³ynie i jest uniesiony (dziób/rufa) to samolot po wystartowaniu nie bêdzie ustawiony poziomo.


  Self.czy_samolot__na_lotniskowcu := false;


  if Self.schemat_samolot_zmiana_czas_sekundy_i <> 0 then
    Self.schemat_samolot_zmiana_czas_sekundy_i := 0; // Brak kontaktu z lotniskowcem przerywa proces zmiany samolotu.


  {$region 'Koryguje prêdkoœæ samolotu podczas startowania z lotniskowca.'}
  if    ( zt_statek_lotniskowiec <> nil )
    and ( zt_statek_lotniskowiec.prêdkoœæ_aktualna <> 0 ) then
    begin

      // Je¿eli lotniskowiec p³ynie.

      ztr := // K¹t miêdzy samolotem i lotniskowcem. Wartoœæ jest zawsze dodatnia, bez znaczenia, jak i nie okreœla, w któr¹ stronê s¹ obrócone obiekty.
        System.Math.RadToDeg
          (
            GLS.VectorGeometry.AngleBetweenVectors
              (
                GLS.VectorGeometry.VectorMake( zt_statek_lotniskowiec.AbsoluteDirection.X, 0, zt_statek_lotniskowiec.AbsoluteDirection.Z ),
                GLS.VectorGeometry.VectorMake( Self.AbsoluteDirection.X, 0, Self.AbsoluteDirection.Z ),
                GLS.VectorGeometry.VectorMake( 0, 0, 0 )
              )
          );

      if   ( ztr <= samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c * 3 )
        or ( ztr >= 180 - samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c * 3 ) then
        begin

          // Je¿eli samolot jest pod odpowiednim k¹tem wzglêdem lotniskowca.

          // Je¿eli statek p³ynie w przeciwnym kierunku do kierunku startu samolotu to samolot po oderwaniu siê od pok³adu zostanie spowolniony.
          if   (
                     ( ztr <= samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c * 3 ) // Samolot l¹duje od rufy.
                 and (  System.Math.Sign( Self.prêdkoœæ_aktualna ) <> System.Math.Sign( zt_statek_lotniskowiec.prêdkoœæ_aktualna )  ) // Lotniskowiec porusza siê do ty³u, a samolot porusza siê do przodu albo odwrotnie.
               )
            or (
                     ( ztr >= 180 - samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c * 3 ) // Samolot l¹duje od dziobu.
                 and (  System.Math.Sign( Self.prêdkoœæ_aktualna ) = System.Math.Sign( zt_statek_lotniskowiec.prêdkoœæ_aktualna )  ) // Lotniskowiec i samolot poruszaj¹ siê do przodu / ty³u.
               ) then
            pozycja_kopia_vector.X := -1 // Tutaj tymczasowo zapamiêtuje znak.
          else//if   ( (...)
            pozycja_kopia_vector.X := 1; // Tutaj tymczasowo zapamiêtuje znak.


          // Koryguje prêdkoœæ samolotu o prêdkoœæ statku.
          if Self.prêdkoœæ_maksymalna <> 0 then
            ztr := 100 * Abs( zt_statek_lotniskowiec.prêdkoœæ_aktualna ) / Self.prêdkoœæ_maksymalna // Jaki procent maksymalnej prêdkoœci samolotu stanowi aktualna prêdkoœæ statku.
          else//if Self.prêdkoœæ_maksymalna <> 0 then
            ztr := 0;

          Self.prêdkoœæ_aktualna_procent__bezwzglêdny := Self.prêdkoœæ_aktualna_procent__bezwzglêdny + ztr * pozycja_kopia_vector.X;

        end;
      //---//if   ( ztr <= samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c * 3 ) (...)

    end;
  //---//if   ( ztr <= samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c * 3 ) (...)
  {$endregion 'Koryguje prêdkoœæ samolotu podczas l¹dowania na lotniskowcu.'}


  Self.lotniskowiec__samolot_przyjmij_od³¹cz__czas_sekundy_i := Czas_Teraz_W_Sekundach();

end;//---//Funkcja Samolot_Lotniskowiec_Od³¹cz().

//Funkcja Prêdkoœæ_Przyspieszanie__Start_Z_Lotniskowca__K¹t_Wylicz().
procedure TStatek.Prêdkoœæ_Przyspieszanie__Start_Z_Lotniskowca__K¹t_Wylicz();
var
  ztr : real;
begin

  if not Self.czy_samolot then
    Exit;


  if Self.Samolot_Na_Lotniskowcu() = nil then
    begin

      if Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__k¹t <> 180 then
        Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__k¹t := 180;

      Exit;

    end;
  //---//if Self.Samolot_Na_Lotniskowcu() = nil then


  ztr :=
    System.Math.RadToDeg
      (
        GLS.VectorGeometry.AngleBetweenVectors
          (
            GLS.VectorGeometry.VectorMake( Self.AbsoluteDirection.X, 0, Self.AbsoluteDirection.Z ),
            GLS.VectorGeometry.VectorMake( Self.Samolot_Na_Lotniskowcu().AbsoluteDirection.X, 0, Self.Samolot_Na_Lotniskowcu().AbsoluteDirection.Z ),
            GLS.VectorGeometry.VectorMake( 0, 0, 0 )
          )
      );


  if not System.Math.IsNan( ztr ) then // Je¿eli wyliczony k¹t jest NAN to pamiêta poprzedni¹ wartoœæ.
    Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__k¹t := ztr;

end;//---//Funkcja Prêdkoœæ_Przyspieszanie__Start_Z_Lotniskowca__K¹t_Wylicz().

//Funkcja Prêdkoœæ_Przyspieszanie__Start_Z_Lotniskowca__Prze³adowanie().
procedure TStatek.Prêdkoœæ_Przyspieszanie__Start_Z_Lotniskowca__Prze³adowanie();
var
  milisekund_prze³adowania_l : Int64;
begin

  if   ( not Self.czy_samolot )
    or ( Self.punkty_¿ycia_aktualne <= 0 )
    or ( Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent < -1 )
    or ( Self.schemat_samolot_zmiana_czas_sekundy_i <> 0 ) then
    Exit;


  Self.Prêdkoœæ_Przyspieszanie__Start_Z_Lotniskowca__K¹t_Wylicz();

  if   ( not Self.czy_samolot__na_lotniskowcu )
    or (  Abs( Self.prêdkoœæ_aktualna ) <> 0  )
    or ( Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__k¹t > samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c )
    or ( Self.Samolot_Na_Lotniskowcu() = nil ) then
    begin

      if Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent <> -1 then
        Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent := -1;

      Exit;

    end;
  //---//if   ( not Self.czy_samolot__na_lotniskowcu ) (...)


  if Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent = prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__katapult_jest_gotowa_do_uruchomienia_c then
    Exit;


  if    ( Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent <> prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__katapult_jest_gotowa_do_uruchomienia_c )
    and ( prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__dŸwiêki__kopia = prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__katapult_jest_gotowa_do_uruchomienia_c ) then
    prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__dŸwiêki__kopia := 0;


  if Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent = -1 then
    Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__czas_sekundy_i := Czas_Teraz_W_Sekundach();


  milisekund_prze³adowania_l := Czas_Miêdzy_W_Milisekundach( Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__czas_sekundy_i );


  if Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie_czas_milisekundy <> 0 then
    Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent := milisekund_prze³adowania_l * 100 / Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie_czas_milisekundy
  else//if Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie_czas_milisekundy <> 0 then
    Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent := 0;


  if Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent > prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__katapult_jest_gotowa_do_uruchomienia_c then
    Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent := prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__katapult_jest_gotowa_do_uruchomienia_c
  else//if Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent > prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__katapult_jest_gotowa_do_uruchomienia_c then
  if Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent < 0 then
    Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent := 0;

end;//---//Funkcja Prêdkoœæ_Przyspieszanie__Start_Z_Lotniskowca__Prze³adowanie().

//Funkcja Lotniskowiec__Zasoby_Odnawianie__Prze³adowanie().
procedure TStatek.Lotniskowiec__Zasoby_Odnawianie__Prze³adowanie();
var
  czy_odnowiono_coœ : boolean;
  milisekund_prze³adowania_l : Int64;
begin

  //
  // Funkcja odnawia punkty ¿ycia o 10% iloœci maksymalnej i uzupe³nia amunicjê samolotowi stoj¹cemu na lotniskowcu.
  //

  if   ( not Self.czy_samolot )
    or ( Self.punkty_¿ycia_aktualne <= 0 )
    or ( Self.schemat_samolot_zmiana_czas_sekundy_i <> 0 ) then
    Exit;

  if   ( not Self.czy_samolot__na_lotniskowcu )
    or (  Abs( Self.prêdkoœæ_aktualna ) <> 0  )
    or ( Self.Samolot_Na_Lotniskowcu() = nil ) then
    begin

      if Self.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent <> -2 then
        Self.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent := -2;

      Exit;

    end;
  //---//if   ( not Self.czy_samolot__na_lotniskowcu ) (...)


  if    ( Self.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent <> lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__nie_znaleziono_zasobów_do_odnowienia_c )
    and ( lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__dŸwiêki__kopia = lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__nie_znaleziono_zasobów_do_odnowienia_c ) then
    lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__dŸwiêki__kopia := 0;


  if Self.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent <= -1 then
    Self.lotniskowiec__zasoby_odnawianie__czas_sekundy_i := Czas_Teraz_W_Sekundach();


  milisekund_prze³adowania_l := Czas_Miêdzy_W_Milisekundach( Self.lotniskowiec__zasoby_odnawianie__czas_sekundy_i );


  if Self.lotniskowiec__zasoby_odnawianie__prze³adowanie_czas_milisekundy <> 0 then
    Self.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent := milisekund_prze³adowania_l * 100 / Self.lotniskowiec__zasoby_odnawianie__prze³adowanie_czas_milisekundy
  else//if Self.lotniskowiec__zasoby_odnawianie__prze³adowanie_czas_milisekundy <> 0 then
    Self.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent := 0;


  if Self.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent >= 100 then
    begin

      czy_odnowiono_coœ := false;


      if    ( not czy_odnowiono_coœ )
        and ( Self.punkty_¿ycia_aktualne < Self.punkty_¿ycia_maksymalne ) then
        czy_odnowiono_coœ := true;


      Self.Punkty_¯ycia__Zmieñ( Self.punkty_¿ycia_maksymalne * 0.1 );


      // Odnawia wszystkie bronie jednoczeœnie.
      if    (  Self.Broñ__Amunicja_Uzupe³nij( TTorpedy_Wyrzutnia_t(Self.artyleria_t) )  )
        and ( not czy_odnowiono_coœ ) then
        czy_odnowiono_coœ := true;

      if    (  Self.Broñ__Amunicja_Uzupe³nij( TTorpedy_Wyrzutnia_t(Self.bomba_g³êbinowa_t) )  )
        and ( not czy_odnowiono_coœ ) then
        czy_odnowiono_coœ := true;

      if    (  Self.Broñ__Amunicja_Uzupe³nij( TTorpedy_Wyrzutnia_t(Self.dzia³a_t) )  )
        and ( not czy_odnowiono_coœ ) then
        czy_odnowiono_coœ := true;

      if    (  Self.Broñ__Amunicja_Uzupe³nij( TTorpedy_Wyrzutnia_t(Self.je¿e_g³êbinowe_t) )  )
        and ( not czy_odnowiono_coœ ) then
        czy_odnowiono_coœ := true;

      if    (  Self.Broñ__Amunicja_Uzupe³nij( TTorpedy_Wyrzutnia_t(Self.torpedy_wyrzutnie_t) )  )
        and ( not czy_odnowiono_coœ ) then
        czy_odnowiono_coœ := true;


      if czy_odnowiono_coœ then
        Self.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent := -1
      else//if czy_odnowiono_coœ then
        Self.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent := lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__nie_znaleziono_zasobów_do_odnowienia_c;

    end
  else//if Self.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent >= 100 then
  if Self.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent < 0 then
    Self.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent := 0;

end;//---//Funkcja Lotniskowiec__Zasoby_Odnawianie__Prze³adowanie().

//Funkcja Id_Statek_Schemat__Samolot_Zmieñ_Na__Ustaw().
function TStatek.Id_Statek_Schemat__Samolot_Zmieñ_Na__Ustaw( const id_statek_schemat__samolot_zmieñ_na_f : integer ) : boolean;
begin

  //
  // Funkcja ustawia id schematu na jaki zmieniæ samolot.
  //
  // Zwraca prawdê gdy zosta³y spe³nione warunki aby zmieniæ schemat samolotu.
  //

  if    ( Self.czy_samolot )
    and ( Self.czy_samolot__na_lotniskowcu )
    and ( Self.Samolot_Na_Lotniskowcu() <> nil )
    and ( Self.id_grupa = Self.Samolot_Na_Lotniskowcu().id_grupa ) then
    begin

      Self.id_statek_schemat__samolot_zmieñ_na := id_statek_schemat__samolot_zmieñ_na_f;
      Self.id_statek__lotniskowiec_dla_samolotu__samolot_zmieñ_na := Self.Samolot_Na_Lotniskowcu().id_statek;
      Self.schemat_samolot_zmiana_czas_sekundy_i := Czas_Teraz_W_Sekundach();

      Result := true;

    end
  else//if samolot__statek_gracza.czy_samolot then
    Result := false;

end;//---//Funkcja Id_Statek_Schemat__Samolot_Zmieñ_Na__Ustaw().

//Funkcja Samolot_Katapult¹_Startuj().
function TStatek.Samolot_Katapult¹_Startuj() : boolean;
begin

  Result := false;

  if Self <> nil then
    Self.Prêdkoœæ_Przyspieszanie__Start_Z_Lotniskowca__K¹t_Wylicz();

  if    ( Self <> nil )
    and ( Self.czy_samolot )
    and ( Self.czy_samolot__na_lotniskowcu )
    and ( Self.schemat_samolot_zmiana_czas_sekundy_i = 0 )
    and ( Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent = prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__katapult_jest_gotowa_do_uruchomienia_c )
    and ( Self.prêdkoœæ_aktualna_procent__wzglêdny = 0 )
    and ( Self.Samolot_Na_Lotniskowcu() <> nil )
    and ( Self.Samolot_Na_Lotniskowcu().punkty_¿ycia_aktualne > 0 )
    and ( Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__k¹t <= samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c ) then
    begin

      if Self.prêdkoœæ_zadana_procent <= 0 then
        begin

          Self.Prêdkoœæ_Zadana_Procent_Zmieñ( 0 );
          Self.Prêdkoœæ_Zadana_Procent_Zmieñ(  System.Math.Ceil( samolot_prêdkoœæ_lotu_procent_minimalny_c )  );

        end;
      //---//if Self.prêdkoœæ_zadana_procent <= 0 then

      if Self.zanurzenie_pu³ap__zadane_procent <= 0 then
        begin

          Self.Zanurzenie_Zadane_Procent_Zmieñ( 0 );
          Self.Zanurzenie_Zadane_Procent_Zmieñ(  System.Math.Ceil( samolot_prêdkoœæ_lotu_procent_minimalny_c )  );

        end;
      //---//if Self.zanurzenie_pu³ap__zadane_procent <= 0 then

      Self.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent := -100;


      Result := true;

    end;
  //---//if    ( Self <> nil ) (...)

end;//---//Funkcja Samolot_Katapult¹_Startuj().

//Funkcja Samolot__Kolizja_Bufor_Zliczaj().
procedure TStatek.Samolot__Kolizja_Bufor_Zliczaj( const czy_kolizja_f : boolean );
begin

  //
  // Funkcja aby nie trzês³o samolotem podczas l¹dowania na lotniskowcu detekcja kolizji jest buforowana.
  //

  if    ( czy_kolizja_f )
    and ( Self.samolot__kolizja_bufor < 10 ) then
    inc( Self.samolot__kolizja_bufor )
  else//if    ( czy_kolizja_f ) (...)
  if    ( not czy_kolizja_f )
    and ( Self.samolot__kolizja_bufor > 0 ) then
    dec( Self.samolot__kolizja_bufor );


  Self.czy_samolot__kolizja := Self.samolot__kolizja_bufor > 0;

end;//---//Funkcja Samolot__Kolizja_Bufor_Zliczaj().

//Funkcja Si_Aktywnoœæ_Aktualna_Nazwa().
function TStatek.Si_Aktywnoœæ_Aktualna_Nazwa( const t³umaczenie_komunikaty_r_f : TT³umaczenie_Komunikaty_r; const czy__si_aktywnoœæ__polecenie_f : boolean = false ) : string;
begin

  //
  // Funkcja .
  //
  // Zwraca nazwê aktualnej aktywnoœci SI statku.
  //
  // Parametry:
  //   t³umaczenie_komunikaty_r_f
  //   czy__si_aktywnoœæ__polecenie_f:
  //     false - nazwa dla si_aktywnoœæ.
  //     true - nazwa dla si_aktywnoœæ__polecenie.
  //

  if czy__si_aktywnoœæ__polecenie_f then
    Result := Self.Si_Aktywnoœæ_Aktualna_Nazwa( Self.si_aktywnoœæ__polecenie, t³umaczenie_komunikaty_r_f )
  else//if czy__si_aktywnoœæ__polecenie_f then
    Result := Self.Si_Aktywnoœæ_Aktualna_Nazwa( Self.si_aktywnoœæ, t³umaczenie_komunikaty_r_f );

end;//---//Funkcja Si_Aktywnoœæ_Aktualna_Nazwa().

//Funkcja Si_Aktywnoœæ_Aktualna_Nazwa().
function TStatek.Si_Aktywnoœæ_Aktualna_Nazwa( const si_aktywnoœæ_f : TSi_Aktywnoœæ; const t³umaczenie_komunikaty_r_f : TT³umaczenie_Komunikaty_r ) : string;
var
  zts : string;
  rtti_field : TRttiField;
  rtti_type : TRttiType;
begin

  //
  // Funkcja .
  //
  // Zwraca nazwê aktualnej aktywnoœci SI statku.
  //
  // Parametry:
  //   si_aktywnoœæ_f
  //   t³umaczenie_komunikaty_r_f
  //

  Result := System.TypInfo.GetEnumName(  System.TypeInfo(TSi_Aktywnoœæ), Ord( si_aktywnoœæ_f )  ); // Daje nazwy elementów.


  rtti_type := TRTTIContext.Create.GetType(  System.TypeInfo( TT³umaczenie_Komunikaty_r )  );

  for rtti_field in rtti_type.GetFields do
    if rtti_field.Name = 'si__wyliczeniowy_typ__aktywnoœæ__' + Result then
      begin

        zts := rtti_field.GetValue( @t³umaczenie_komunikaty_r_f ).ToString;

        if Trim( zts ) <> '' then
          begin

            Result := zts;
            Exit; // Znalaz³ t³umaczenie.

          end
        else//if Trim( zts ) <> '' then
          Break;

      end;
    //---//if rtti_field.Name = 'si__wyliczeniowy_typ__aktywnoœæ__' + Result then


  Result := StringReplace( Result, 'sia_', '', [ rfReplaceAll ] );

  // Sprawdza czy nazwa sk³ada siê z kilku s³ów.
  if Pos( '_', Result ) > 0 then
    zts := '_'
  else//if Pos( '_', Result ) > 0 then
    zts := '';

  Result := StringReplace( Result, '_', ' ', [ rfReplaceAll ] );

  // Ustawi nazwê aby tylko pierwszy znak by³ z wielkiej litery.
  if    ( zts = '_' )
    and (  Length( Result ) > 0  ) then
    begin

      zts := Result[ 1 ];
      Result := AnsiLowerCase( Result );
      Delete( Result, 1, 1 );
      Result := zts + Result;

    end;
  //---//if    ( zts = '_' ) (...)


  if    ( si_aktywnoœæ_f = sia_Patrol )
    and ( Self.patrol_losowy__licznik > 0 ) then
    Result := Result + ' (' + t³umaczenie_komunikaty_r_f.ekran_napis__losowy__skrót + ')'
  else//if    ( si_aktywnoœæ_f = sia_Patrol ) (...)
  if si_aktywnoœæ_f = sia_Samolot__L¹dowanie__Podchodzenie then
    Result := Result + ' (' + IntToStr( Self.samolot__l¹dowanie__podchodzenie_krok ) + ')';

end;//---//Funkcja Si_Aktywnoœæ_Aktualna_Nazwa().

//Funkcja Si_Strzelanie_Tryb_Aktualny_Nazwa().
function TStatek.Si_Strzelanie_Tryb_Aktualny_Nazwa( const t³umaczenie_komunikaty_r_f : TT³umaczenie_Komunikaty_r ) : string;
var
  zts : string;
var
  rtti_field : TRttiField;
  rtti_type : TRttiType;
begin

  //
  // Funkcja .
  //
  // Zwraca nazwê aktualnego trybu strzelania SI statku.
  //
  // Parametry:
  //   t³umaczenie_komunikaty_r_f
  //

  Result := System.TypInfo.GetEnumName(  System.TypeInfo(TSi_Strzelanie_Tryb), Ord( Self.si_strzelanie_tryb )  ); // Daje nazwy elementów.


  rtti_type := TRTTIContext.Create.GetType(  System.TypeInfo( TT³umaczenie_Komunikaty_r )  );

  for rtti_field in rtti_type.GetFields do
    if rtti_field.Name = 'si__wyliczeniowy_typ__strzelanie_tryb__' + Result then
      begin

        zts := rtti_field.GetValue( @t³umaczenie_komunikaty_r_f ).ToString;

        if Trim( zts ) <> '' then
          begin

            Result := zts;
            Exit; // Znalaz³ t³umaczenie.

          end
        else//if Trim( zts ) <> '' then
          Break;

      end;
    //---//if rtti_field.Name = 'si__wyliczeniowy_typ__strzelanie_tryb__' + Result then


  Result := StringReplace( Result, 'sist_', '', [ rfReplaceAll ] );

  // Sprawdza czy nazwa sk³ada siê z kilku s³ów.
  if Pos( '_', Result ) > 0 then
    zts := '_'
  else//if Pos( '_', Result ) > 0 then
    zts := '';

  Result := StringReplace( Result, '_', ' ', [ rfReplaceAll ] );

  // Ustawi nazwê aby tylko pierwszy znak by³ z wielkiej litery.
  if    ( zts = '_' )
    and (  Length( Result ) > 0  ) then
    begin

      zts := Result[ 1 ];
      Result := AnsiLowerCase( Result );
      Delete( Result, 1, 1 );
      Result := zts + Result;

    end;
  //---//if    ( zts = '_' ) (...)

end;//---//Funkcja Si_Strzelanie_Tryb_Aktualny_Nazwa().

//Funkcja Si_Wartoœci_Pocz¹tkowe_Ustaw().
procedure TStatek.Si_Wartoœci_Pocz¹tkowe_Ustaw( const czy_statek_f : boolean = true; const czy_bronie_f : boolean = true );
var
  i : integer;
begin

  //
  // Funkcja ustawia pocz¹tkowe wartoœci dla zmiennych zwi¹zanych z si.
  //

  if czy_statek_f then
    begin

      Self.si_aktywnoœæ := sia_Brak;
      Self.si_aktywnoœæ__polecenie := sia_Brak;
      Self.si_strzelanie_tryb := sist_Strzelaj_Jak_Chcesz;
      Self.si__aktywnoœæ__okreœlenie_ostatnie_sekundy_i := -si__aktywnoœæ__okreœlenie_sekundy_c;
      Self.si__zagaduje__ostatnie_sekundy_i := Czas_Teraz_W_Sekundach();
      Self.si__zak³óca__ostatnie_sekundy_i := Czas_Teraz_W_Sekundach();

      Self.si__cel_odleg³oœæ := 0;

      Self.si__kolizja := false;
      Self.si__kolizja__prêdkoœæ_ujemna := false;
      Self.si__kolizja__samolot__p³ywanie_do_punktu__odnawianie_zasobów := false;
      //Self.si__kolizja__wspó³rzêdne

      Self.komunikat__torpedy_alarm__id_amunicja__obserwowana := -99;
      Self.komunikat__torpedy_alarm__odleg³oœæ := 0;

      Self.si__l¹dowanie_punkt_korekta_x := 0;
      Self.si__lotniskowiec__l¹dowanie__kurs_aktualny := false;

      Self.si__p³ywanie_do_punktu__odnawianie_zasobów__rozpoczêcie_czas_sekundy_i := 0;
      Self.si__p³ywanie_do_punktu__odnawianie_zasobów__trwanie_modyfikator_losowy__czas_sekundy_i := 0;
      Self.si__p³ywanie_losowe__skrêt__k¹t_pocz¹tkowy := 1; // Nie zero aby po utworzeniu od razu nie wyznacza³ skrêtu tylko odliczanie do wyznaczenia skrêtu.
      Self.si__p³ywanie_losowe__skrêt__k¹t_zakres := Self.si__p³ywanie_losowe__skrêt__k¹t_pocz¹tkowy;
      Self.si__p³ywanie_losowe__skrêt__zmiana_ostatnia_sekundy_i := 0;
      Self.si__p³ywanie_losowe__skrêt__zmiana_sekundy := 0;
      Self.si__p³ywanie_losowe__zanurzenie_pu³ap__zmiana_ostatnia_sekundy_i := 0;
      Self.si__p³ywanie_losowe__zanurzenie_pu³ap__zmiana_sekundy := 0;
      Self.si__p³ywanie_losowe__zmiana_ostatnia_sekundy_i := 0;
      Self.si__p³ywanie_losowe__zmiana_sekundy := 0;

      Self.si__samolot_zanurzenie_pu³ap__zadane := 0;

      Self.si__statek_gracza__p³ywa := false;
      Self.si__statek_gracza__strzela := sisgs_Nie;

      Self.si__torpedy_alarm__id_amunicja__obserwowana := -99;
      Self.si__torpedy_alarm__id_amunicja__unikana := -99;
      Self.si__torpedy_alarm__odleg³oœæ := 0;

      Self.si__uszkodzenia_wykryto__czas_sekundy_i := 0;

      Self.si__walka__p³ywanie_do_punktu__cel__id_statek := -99;
      Self.si__walka__p³ywanie_do_punktu__prêdkoœæ_zadana_procent_korekta := 0;
      Self.si__walka__p³ywanie_do_punktu__rozpoczêcie_czas_sekundy_i := 0;
      Self.si__walka__p³ywanie_do_punktu__trwanie_modyfikator_losowy__czas_sekundy_i := -99;
      Self.si__zagaduje_sekundy__modyfikator_losowy_i := Random( si__zagaduje_sekundy_c );
      Self.si__zak³óca_sekundy__modyfikator_losowy_i := Random( 60 );
      Self.si__walka__p³ywanie_do_punktu__zbli¿anie := false;

      Self.si__wystartowanie__czas_sekundy_i := 0;

      SetLength( Self.si__statki_znane_r_t, 0 );

    end;
  //---//if czy_statek_f then


  if czy_bronie_f then
    begin

      for i := 0 to Length( Self.artyleria_t ) - 1 do
        Self.artyleria_t[ i ].Si_Wartoœci_Pocz¹tkowe_Ustaw();

      for i := 0 to Length( Self.bomba_g³êbinowa_t ) - 1 do
        Self.bomba_g³êbinowa_t[ i ].Si_Wartoœci_Pocz¹tkowe_Ustaw();

      for i := 0 to Length( Self.dzia³a_t ) - 1 do
        Self.dzia³a_t[ i ].Si_Wartoœci_Pocz¹tkowe_Ustaw();

      for i := 0 to Length( Self.je¿e_g³êbinowe_t ) - 1 do
        Self.je¿e_g³êbinowe_t[ i ].Si_Wartoœci_Pocz¹tkowe_Ustaw();

      for i := 0 to Length( Self.torpedy_wyrzutnie_t ) - 1 do
        Self.torpedy_wyrzutnie_t[ i ].Si_Wartoœci_Pocz¹tkowe_Ustaw();

    end;
  //---//if czy_bronie_f then

end;//---//Funkcja Si_Wartoœci_Pocz¹tkowe_Ustaw().

//Funkcja Si__Walka__P³ywanie_Do_Punktu__Wartoœci_Pocz¹tkowe_Ustaw().
procedure TStatek.Si__Walka__P³ywanie_Do_Punktu__Wartoœci_Pocz¹tkowe_Ustaw( const si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_f : Int64 );
begin

  Self.si_aktywnoœæ := sia_Walka;
  Self.si__walka__p³ywanie_do_punktu__cel__id_statek := -99;
  Self.si__walka__p³ywanie_do_punktu__prêdkoœæ_zadana_procent_korekta := 0;
  Self.si__walka__p³ywanie_do_punktu__trwanie_modyfikator_losowy__czas_sekundy_i := Random( si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_f ) - Round( si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_f * 0.5 );
  Self.si__walka__p³ywanie_do_punktu__rozpoczêcie_czas_sekundy_i := Czas_Teraz_W_Sekundach();
  Self.si__walka__p³ywanie_do_punktu__zbli¿anie := false;

end;//---//Funkcja Si__Walka__P³ywanie_Do_Punktu__Wartoœci_Pocz¹tkowe_Ustaw().

//Funkcja Œwiat³a_Miganie__OpóŸnienia_Losowe_Resetuj__Statek().
procedure TStatek.Œwiat³a_Miganie__OpóŸnienia_Losowe_Resetuj__Statek( const czy_œwiat³a_dodatkowe_f : boolean );
var
  i : integer;
begin

  if    ( Self.wygl¹d_elementy_list <> nil )
    and (  Assigned( Self.wygl¹d_elementy_list )  ) then
    for i := 0 to Self.wygl¹d_elementy_list.Count - 1 do
      if    (  Wyglad_Elementy.Œwiat³a_Miganie__Losowoœæ( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) ) > 0  )
        and (
                 (
                       ( not czy_œwiat³a_dodatkowe_f )
                   and (  Wyglad_Elementy.Œwiat³o( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) )  )
                 )
              or (
                       ( czy_œwiat³a_dodatkowe_f )
                   and (  Wyglad_Elementy.Œwiat³o_Dodatkowe( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) )  )
                 )
            ) then
        Wyglad_Elementy.Œwiat³a_Miganie__OpóŸnienie_Losowe__Wylicz( TGLCustomSceneObject(Self.wygl¹d_elementy_list[ i ]) );

end;//---//Funkcja Œwiat³a_Miganie__OpóŸnienia_Losowe_Resetuj__Statek().

//Funkcja xNx__K¹t_Obrotu_Statku().
function TStatek.xNx__K¹t_Obrotu_Statku() : real;
begin

  //
  // Funkcja okreœla k¹t obrotu statku wzglêdem osi z w kierunku -1 (pozycja startowa kamery spogl¹da w przód = w g³¹b mapy).
  //
  //         0
  //     -45 | 45
  // -90     |     90
  //    -135 | 135
  //         |
  //        180
  //

  Result := 0;

  // Góra Prawo.
  if    ( Self.AbsoluteDirection.X >= 0 )
    and ( Self.AbsoluteDirection.Z <= 0 ) then
    Result := -Self.TurnAngle
  else
  // Góra Lewo.
  if    ( Self.AbsoluteDirection.X < 0 )
    and ( Self.AbsoluteDirection.Z <= 0 ) then
    Result := 180 + Self.TurnAngle;
  // Dó³ Prawo.
  if    ( Self.AbsoluteDirection.X >= 0 )
    and ( Self.AbsoluteDirection.Z > 0 ) then
    Result := 180 + Self.TurnAngle
  else
  // Dó³ Lewo.
  if    ( Self.AbsoluteDirection.X < 0 )
    and ( Self.AbsoluteDirection.Z > 0 ) then
    Result := -( 360 + Self.TurnAngle ); // 270 + 90

end;//---//Funkcja xNx__K¹t_Obrotu_Statku().

//Konstruktor klasy TLufa.
constructor TLufa.Create( ATorpedy_Wyrzutnia : TTorpedy_Wyrzutnia; AStatek : TStatek; gl_collision_mmanager_f : TGLCollisionManager );
begin

  //
  // Podniesienie lufy (PitchAngle) -(minus) w górê, +(plus) w dó³.
  //

  inherited Create( ATorpedy_Wyrzutnia );

  Self.statek__lu := AStatek;

  Self.Parent := ATorpedy_Wyrzutnia.elementy_wizualne_gl_dummy_cube;

  Self.dzia³o := ATorpedy_Wyrzutnia;

  Self.prze³adowanie_czas_milisekundy__lufa := ATorpedy_Wyrzutnia.prze³adowanie_czas_milisekundy__broñ;
  //Self.strza³_czas := Now();
  Self.strza³_czas__lufa_sekundy_i := Czas_Teraz_W_Sekundach(); // Dla pierwszego za³adowania.
  Self.amunicja_pobrana := false;
  Self.czy_indeks_do_strza³u_lufa := false;
  Self.milisekund_prze³adowania_do_uszkodzenia_zliczono := false;
  Self.milisekund_prze³adowania_do_uszkodzenia := 0;
  Self.podniesienie_szybkoœæ_modyfikator := 0;
  Self.prze³adowanie_procent := 0;
  Self.strza³_gotowoœæ := false;

  Self.amunicja_rodzaj := ATorpedy_Wyrzutnia.amunicja_rodzaj;

  Self.amunicja_wystrzelona_utwórz_jeden := nil;

  //Self.VisibleAtRunTime := true;

  Self.korpus__lufa := Wyglad_Elementy.TSt_GLCylinder.Create( Self );
  Self.korpus__lufa.Parent := Self;
  Self.korpus__lufa.TopRadius := 0.05;
  Self.korpus__lufa.BottomRadius := Self.korpus__lufa.TopRadius;
  Self.korpus__lufa.Height := 1.25;
  //Self.korpus__lufa.Position.Y := Self.korpus_przód.Position.Y + Self.korpus__lufa.TopRadius * 2;
  Self.korpus__lufa.PitchAngle := 90;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.korpus__lufa, Wyglad_Elementy.or_Statek );

  if Self.statek__lu <> nil then
    Wyglad_Elementy.Identyfikator_Elementu( Self.korpus__lufa, Self.statek__lu.id_statek )
  else//if Self.statek__lu <> nil then
    Wyglad_Elementy.Identyfikator_Elementu( Self.korpus__lufa, -1 );


  Self.wylot_pozycja := TGLSphere.Create( Self );
  Self.wylot_pozycja.Parent := Self.korpus__lufa;

  Self.prze³adowanie_wskaŸnik := TGLSphere.Create( Self );
  Self.prze³adowanie_wskaŸnik.Parent := Self;

  //Self.ShowAxes := true;


  if gl_collision_mmanager_f <> nil then
    with TGLBCollision.Create( Self.korpus__lufa.Behaviours ) do
      begin

        GroupIndex := 0;
        BoundingMode := cbmCube;
        Manager := gl_collision_mmanager_f;

      end;
    //---//with TGLBCollision.Create( Self.korpus__lufa.Behaviours ) do

end;//---//Konstruktor klasy TLufa.

//Destruktor klasy TLufa.
destructor TLufa.Destroy();
var
  i : integer;
begin

  for i := 0 to Self.Count - 1 do
    if Self.Children[ i ] is TAmunicja then
      begin

        // Je¿eli amunicja jest w lufie to zwalnia j¹ razem z lufa i pojawiaj¹ siê b³êdy dostêpu do pamiêci.
        TAmunicja(Self.Children[ i ]).pozycja_celu := nil;
        TAmunicja(Self.Children[ i ]).pozycja_startowa.Parent := nil; // Nie zmieniaæ tej kolejnoœci.
        TAmunicja(Self.Children[ i ]).Parent := nil; // Nie zmieniaæ tej kolejnoœci.

        TAmunicja(Self.Children[ i ]).czy_usun¹æ_amunicja := true;

      end;
    //---//if Self.Children[ i ] is TAmunicja then


  FreeAndNil( Self.prze³adowanie_wskaŸnik );
  FreeAndNil( Self.wylot_pozycja );
  FreeAndNil( Self.korpus__lufa );

  inherited;

end;//---//Destruktor klasy TLufa.

//Funkcja Dodatkowe_Elementy_Lufy_Pozycja_Ustaw().
procedure TLufa.Dodatkowe_Elementy_Lufy_Pozycja_Ustaw();
begin

  //
  // Funkcja ustawia dodatkowe elementy lufy we w³aœciwych miejscach.
  //
  // Parametry:
  //   czy_lufa_podniesienie_k¹t_ustaw_f:
  //     false - nie ustawi pocz¹tkowego k¹ta podniesienia lufy (dla wyrzutni torped).
  //     true - ustawi pocz¹tkowy k¹t podniesienia lufy.
  //

  if Self.wylot_pozycja.Parent <> nil then
    begin

      //Self.wylot_pozycja.Radius := 0.05;
      Self.wylot_pozycja.Radius := TGLCylinder(Self.wylot_pozycja.Parent).TopRadius;
      Self.wylot_pozycja.Position.Y := Self.korpus__lufa.Height * 0.5 {+ Self.wylot_pozycja.Radius * 2};

    end;
  //---//if Self.wylot_pozycja.Parent <> nil then


  if Self.prze³adowanie_wskaŸnik.Parent <> nil then
    begin

      Self.prze³adowanie_wskaŸnik.Radius := TGLCylinder(Self.wylot_pozycja.Parent).TopRadius * 0.5;
      //Self.prze³adowanie_wskaŸnik.Position.AsVector := Self.prze³adowanie_wskaŸnik.AbsoluteToLocal( Self.wylot_pozycja.AbsolutePosition );

      if Self.prze³adowanie_wskaŸnik.Parent <> nil then
        Self.prze³adowanie_wskaŸnik.Position.AsVector := Self.prze³adowanie_wskaŸnik.Parent.AbsoluteToLocal( Self.wylot_pozycja.AbsolutePosition );

      Self.prze³adowanie_wskaŸnik.Position.Y := Self.prze³adowanie_wskaŸnik.Position.Y + Self.korpus__lufa.TopRadius + Self.prze³adowanie_wskaŸnik.Radius * 0.75;

      Self.prze³adowanie_wskaŸnik__pozycja_za³adowany := Self.prze³adowanie_wskaŸnik.Position.AsAffineVector;
      Self.prze³adowanie_wskaŸnik.Move( Self.korpus__lufa.Height * 0.5 ); // Zmienia Z z minus na mniejszy minus (dodaje).
      Self.prze³adowanie_wskaŸnik__pozycja_roz³adowany := Self.prze³adowanie_wskaŸnik.Position.AsAffineVector;

    end;
  //---//if Self.prze³adowanie_wskaŸnik.Parent <> nil then


  prze³adowanie_wskaŸnik__dystans_do_przesuniêcia := Abs( Self.prze³adowanie_wskaŸnik__pozycja_za³adowany.Z ) - Abs( Self.prze³adowanie_wskaŸnik__pozycja_roz³adowany.Z );
  //prze³adowanie_wskaŸnik__dystans_do_przesuniêcia := prze³adowanie_wskaŸnik__dystans_do_przesuniêcia - prze³adowanie_wskaŸnik__dystans_do_przesuniêcia * 0.01; // Lekka korekta pomniejszaj¹ca zakres aby wskaŸnik za daleko siê nie przesun¹³.


  if    ( Self.dzia³o <> nil )
    and ( Self.dzia³o is TDzia³o ) then
    begin

      // TDzia³o.

      Self.czy_wycelowane_podniesienie := false;

      if Self.dzia³o is TArtyleria then
        Self.podniesienie_szybkoœæ_modyfikator := Random( 3 ) // Do 20% standardowej szybkoœci - artyleria wolno siê porusza.
      else//if Self.dzia³o is TArtyleria then
        Self.podniesienie_szybkoœæ_modyfikator := Random( 4 ); // Do 30% standardowej szybkoœci.


      Self.podniesienie_szybkoœæ_modyfikator := TDzia³o(Self.dzia³o).podniesienie_szybkoœæ * Self.podniesienie_szybkoœæ_modyfikator * 0.1;

    end
  else//if    ( Self.dzia³o <> nil ) (...)
    begin

      // TTorpedy_Wyrzutnia.

      Self.czy_wycelowane_podniesienie := true;

      //Self.podniesienie_szybkoœæ_modyfikator := 0;

    end;
  //---//if    ( Self.dzia³o <> nil ) (...)


  Self.prze³adowanie_wskaŸnik__pozycja_wycelowany_Y := Self.prze³adowanie_wskaŸnik.Position.Y;


  if    ( Self.dzia³o <> nil )
    and ( Self.dzia³o is TDzia³o ) then
    //and ( TDzia³o(Self.dzia³o).czy_lufa_podnoszona ) then
    begin

      // TArtyleria, TDzia³o.

      if TDzia³o(Self.dzia³o).czy_lufa_unoszona then
        begin

          // Je¿eli w schemacie wczytanym z pliku zadany k¹t podniesienia jest poza zakresem unoszenia lufy.
          if TDzia³o(Self.dzia³o).podniesienie_k¹t_pocz¹tkowy > TDzia³o(Self.dzia³o).podniesienie_k¹t_maksymalny then
            TDzia³o(Self.dzia³o).podniesienie_k¹t_pocz¹tkowy := TDzia³o(Self.dzia³o).podniesienie_k¹t_maksymalny;

          if TDzia³o(Self.dzia³o).podniesienie_k¹t_pocz¹tkowy < TDzia³o(Self.dzia³o).podniesienie_k¹t_minimalny then
            TDzia³o(Self.dzia³o).podniesienie_k¹t_pocz¹tkowy := TDzia³o(Self.dzia³o).podniesienie_k¹t_minimalny;

        end
      else//if TDzia³o(Self.dzia³o).czy_lufa_unoszona then
        TDzia³o(Self.dzia³o).podniesienie_k¹t_zadany := TDzia³o(Self.dzia³o).podniesienie_k¹t_pocz¹tkowy;

      // Z przeciwnym znakiem gdy¿ -(minus) w górê, +(plus) w dó³.
      //Self.PitchAngle := -TDzia³o(Self.dzia³o).podniesienie_k¹t_zadany; // Potem zostanie nadpisany wartoœci¹ ustawion¹ przez 'gracza'.
      Self.PitchAngle := -TDzia³o(Self.dzia³o).podniesienie_k¹t_pocz¹tkowy; // Potem zostanie nadpisany wartoœci¹ ustawion¹ przez 'gracza'.

      TDzia³o(Self.dzia³o).podniesienie_k¹t_zadany_bezwzglêdny := TDzia³o(Self.dzia³o).podniesienie_k¹t_zadany;

    end;
  //---//if    ( Self.dzia³o <> nil ) (...)

end;//---//Funkcja Dodatkowe_Elementy_Lufy_Pozycja_Ustaw().

//Funkcja Prze³adowanie().
function TLufa.Prze³adowanie( const delta_czasu_f : double ) : boolean;
var
  czy_dzia³o_uszkodzone_l : boolean;
  milisekund_prze³adowania_l : Int64;
  ztr : real;
begin

  //
  // Funkcja ³aduje lufê w odpowiednim czasie i ustawia jej gotowoœæ.
  //
  // Zwraca prawdê gdy zakoñczono prze³adowanie (lufa osi¹gnê³a stan gotowoœci do oddania strza³u).
  //

  Result := false;


  if Self.dzia³o <> nil then
    begin

      // Oznacza lufê wybran¹ do strza³u tylko na dziale, które te¿ jest wybrane do strza³u.

      // Mo¿e zmieniæ ustawienia koloru zwi¹zane z por¹ dnia.
      if    ( Self.czy_indeks_do_strza³u_lufa )
        and ( TTorpedy_Wyrzutnia(Self.dzia³o).czy_indeks_do_strza³u ) then
        Self.prze³adowanie_wskaŸnik.Material.FrontProperties.Ambient.Color := GLS.Color.clrGreenYellow //clrBlue clrGreenYellow
      else//if    ( Self.czy_indeks_do_strza³u_lufa ) (...)
        Self.prze³adowanie_wskaŸnik.Material.FrontProperties.Ambient.Color := GLS.Color.clrGreen;

    end;
  //---//if Self.dzia³o <> nil then


  // Lufa osi¹gnê³a wymagany do strza³u k¹t.
  if Self.czy_wycelowane_podniesienie then
    Self.prze³adowanie_wskaŸnik.Position.Y := Self.prze³adowanie_wskaŸnik__pozycja_wycelowany_Y
  else//if Self.czy_wycelowane_podniesienie then
    Self.prze³adowanie_wskaŸnik.Position.Y := Self.prze³adowanie_wskaŸnik__pozycja_wycelowany_Y - Self.prze³adowanie_wskaŸnik.Radius;

  if Self.strza³_gotowoœæ then
    Exit;


  //if    ( Self.dzia³o <> nil )
  //  and ( Self.dzia³o.uszkodzone_czas_sekundy_i <> 0 ) then // Uszkodzenie resetuje prze³adowywanie.
  //  Self.strza³_czas__lufa_sekundy_i := Czas_Teraz_W_Sekundach();

  // Je¿eli dzia³o zostanie uszkodzone to wstrzymuje prze³adowywanie, po ustaniu uszkodzenia dzia³a kontynuuje prze³adowywanie od przerwanego poziomu (przerwañ prze³adowywanie mo¿e byæ wiele).
  if    ( Self.dzia³o <> nil )
    and ( Self.dzia³o.uszkodzone_czas_sekundy_i <> 0 ) then
    czy_dzia³o_uszkodzone_l := true
  else//if    ( Self.dzia³o <> nil ) (...)
    czy_dzia³o_uszkodzone_l := false;

  if czy_dzia³o_uszkodzone_l then
    begin

      if not Self.milisekund_prze³adowania_do_uszkodzenia_zliczono then
        begin

          Self.milisekund_prze³adowania_do_uszkodzenia_zliczono := true;
          Self.milisekund_prze³adowania_do_uszkodzenia := Self.milisekund_prze³adowania_do_uszkodzenia + Czas_Miêdzy_W_Milisekundach( Self.strza³_czas__lufa_sekundy_i );

        end;
      //---//if not Self.milisekund_prze³adowania_do_uszkodzenia_zliczono then


      Self.strza³_czas__lufa_sekundy_i := Czas_Teraz_W_Sekundach();

    end
  else//if czy_dzia³o_uszkodzone_l then
    if Self.milisekund_prze³adowania_do_uszkodzenia_zliczono then
      begin

        Self.milisekund_prze³adowania_do_uszkodzenia_zliczono := false;
        Self.strza³_czas__lufa_sekundy_i := Czas_Teraz_W_Sekundach(); // Aby p³ynnie przechodzi³ do kontynuacji prze³adowywania po ustaniu uszkodzenia dzia³a.

      end;
    //---//if Self.milisekund_prze³adowania_do_uszkodzenia_zliczono then
  //---// Je¿eli dzia³o zostanie uszkodzone to wstrzymuje prze³adowywanie, po ustaniu uszkodzenia dzia³a kontynuuje prze³adowywanie od przerwanego poziomu (przerwañ prze³adowywanie mo¿e byæ wiele).

  //sekund_prze³adowania_l := SecondsBetween( Now(), Self.strza³_czas );
  if czy_dzia³o_uszkodzone_l then
    milisekund_prze³adowania_l := Self.milisekund_prze³adowania_do_uszkodzenia
  else//if czy_dzia³o_uszkodzone_l then
    milisekund_prze³adowania_l := Czas_Miêdzy_W_Milisekundach( Self.strza³_czas__lufa_sekundy_i ) + Self.milisekund_prze³adowania_do_uszkodzenia;


  if Self.amunicja_pobrana then
    if Self.prze³adowanie_czas_milisekundy__lufa <> 0 then
      Self.prze³adowanie_procent := milisekund_prze³adowania_l * 100 / Self.prze³adowanie_czas_milisekundy__lufa
    else//if Self.prze³adowanie_czas_milisekundy__lufa <> 0 then
      Self.prze³adowanie_procent := 0;


  if Self.prze³adowanie_procent > 100 then
    Self.prze³adowanie_procent := 100
  else//if Self.prze³adowanie_procent > 100 then
  if Self.prze³adowanie_procent < 0 then
    Self.prze³adowanie_procent := 0;


  if    ( Self.dzia³o <> nil )
    and ( Self.dzia³o is TDzia³o ) then // TArtyleria, TDzia³o.
    //if milisekund_prze³adowania_l < cofanie_wystrza³_powrót_milisekund_c then
    if milisekund_prze³adowania_l < Self.prze³adowanie_czas_milisekundy__lufa * 0.25 then
      begin

        ////ztr := ( milisekund_prze³adowania_l * 100 / cofanie_wystrza³_powrót_milisekund_c * 0.01 ); // Wariant z przesuwaniem wed³ug dystansu proporcjonalnie do czasu prze³adowania.
        //ztr := milisekund_prze³adowania_l / cofanie_wystrza³_powrót_milisekund_c; // Wariant z przesuwaniem wed³ug dystansu proporcjonalnie do czasu prze³adowania (uproszczone obliczenia).

        if Self.prze³adowanie_czas_milisekundy__lufa <> 0 then
          ztr := milisekund_prze³adowania_l / ( Self.prze³adowanie_czas_milisekundy__lufa * 0.25 ) // Wariant z przesuwaniem wed³ug dystansu proporcjonalnie do czasu prze³adowania (uproszczone obliczenia).
        else//if Self.prze³adowanie_czas_milisekundy__lufa <> 0 then
          ztr := 1;

        Self.korpus__lufa.Position.Z := TDzia³o(Self.dzia³o).cofanie_wystrza³_pozycja_pocz¹tkowa + TDzia³o(Self.dzia³o).cofanie_wystrza³_odleg³oœæ * ( 1 - ztr );

      end
    else//if milisekund_prze³adowania_l < Self.prze³adowanie_czas_milisekundy__lufa * 0.25 then
      begin

        Self.korpus__lufa.Position.Z := TDzia³o(Self.dzia³o).cofanie_wystrza³_pozycja_pocz¹tkowa;

      end;
    //---//if milisekund_prze³adowania_l < Self.prze³adowanie_czas_milisekundy__lufa * 0.25 then


  //if Self.strza³_gotowoœæ then
  //  Exit;


  if not Self.amunicja_pobrana then
    if    ( Self.dzia³o <> nil )
      and ( TTorpedy_Wyrzutnia(Self.dzia³o).amunicja_iloœæ > 0 ) then
      begin

        Dec( TTorpedy_Wyrzutnia(Self.dzia³o).amunicja_iloœæ );
        Self.amunicja_pobrana := true;

      end
    else//if    ( Self.dzia³o <> nil ) (...)
      begin

        // Wskazuje brak amunicji.

        Self.prze³adowanie_wskaŸnik.Material.FrontProperties.Ambient.Color := GLS.Color.clrRed;
        Exit;

      end;
    //---//if    ( Self.dzia³o <> nil ) (...)


  //if SecondsBetween( Now(), Self.strza³_czas ) >= Self.prze³adowanie_czas_milisekundy__lufa then
  //if milisekund_prze³adowania_l >= Self.prze³adowanie_czas_milisekundy__lufa then
  if Self.prze³adowanie_procent >= 100 then
    begin

      Self.strza³_gotowoœæ := true;
      Self.prze³adowanie_wskaŸnik.Position.Z := Self.prze³adowanie_wskaŸnik__pozycja_za³adowany.Z;
      Self.prze³adowanie_wskaŸnik.Material.FrontProperties.Ambient.Color := GLS.Color.clrGreen;

      Result := true;

      Exit;

    end;
  //---//if Self.prze³adowanie_procent >= 100 then

  //ztr := Abs( Self.prze³adowanie_wskaŸnik__pozycja_za³adowany.Z ) - Abs( Self.prze³adowanie_wskaŸnik__pozycja_roz³adowany.Z );
  //ztr := ztr - ztr * 0.025; // Lekka korekta pomniejszaj¹ca zakres aby wskaŸnik za daleko siê nie przesun¹³


  // Przesuwa wskaŸnik za³adowania od pozycji roz³adowany do pozycji za³adowany.
  if Self.prze³adowanie_wskaŸnik.Position.Z > Self.prze³adowanie_wskaŸnik__pozycja_za³adowany.Z then
    begin

      //Self.prze³adowanie_wskaŸnik.Move( -ztr * delta_czasu_f / Self.prze³adowanie_czas_milisekundy__lufa );
      //Self.prze³adowanie_wskaŸnik.Move( -Self.prze³adowanie_wskaŸnik__dystans_do_przesuniêcia * 1000 * delta_czasu_f / Self.prze³adowanie_czas_milisekundy__lufa ); // Wariant z przesuwaniem funkcj¹ Move().

      ////ztr := ( milisekund_prze³adowania_l * 100 / Self.prze³adowanie_czas_milisekundy__lufa * 0.01 ); // Wariant z przesuwaniem wed³ug dystansu proporcjonalnie do czasu prze³adowania.
      //ztr :=  ( milisekund_prze³adowania_l / Self.prze³adowanie_czas_milisekundy__lufa ); // Wariant z przesuwaniem wed³ug dystansu proporcjonalnie do czasu prze³adowania (uproszczone obliczenia).

      //Self.prze³adowanie_wskaŸnik.Position.Z := Self.prze³adowanie_wskaŸnik__pozycja_roz³adowany.Z - Self.prze³adowanie_wskaŸnik__dystans_do_przesuniêcia * ztr;
      Self.prze³adowanie_wskaŸnik.Position.Z := Self.prze³adowanie_wskaŸnik__pozycja_roz³adowany.Z - Self.prze³adowanie_wskaŸnik__dystans_do_przesuniêcia * Self.prze³adowanie_procent * 0.01;

    end;
  //---//if Self.prze³adowanie_wskaŸnik.Position.Z > Self.prze³adowanie_wskaŸnik__pozycja_za³adowany.Z then

end;//---//Funkcja Prze³adowanie().

//Funkcja Strza³().
function TLufa.Strza³( const obracaj_dzia³a_f, podnoœ_lufy_f, lufa_unoszona_f : boolean; const cel_wspó³rzêdne_f : GLS.VectorGeometry.TAffineVector ) : boolean;
var
  rodzic_l : TGLBaseSceneObject;
begin

  //
  // Funkcja strzela z lufy i ustawia amunicjê do lotu.
  //
  // Zwraca prawdê gdy wystrzeli.
  //

  Result := false;

  if   ( not Self.strza³_gotowoœæ ) then
    //or ( not Self.czy_wycelowane_podniesienie ) then
    Exit;


  if podnoœ_lufy_f then // Je¿eli lufy s¹ zablokowane mo¿na strzeliæ mimo nie wycelowania.
    //if not Self.czy_wycelowane_podniesienie then
    if    ( lufa_unoszona_f )
      and ( not Self.czy_wycelowane_podniesienie ) then
      Exit;


  Self.amunicja_pobrana := false;
  Self.milisekund_prze³adowania_do_uszkodzenia_zliczono := false;
  Self.milisekund_prze³adowania_do_uszkodzenia := 0;
  Self.prze³adowanie_procent := 0;
  Self.strza³_gotowoœæ := false;
  //Self.strza³_czas := Now();
  Self.strza³_czas__lufa_sekundy_i := Czas_Teraz_W_Sekundach();

  //Self.prze³adowanie_wskaŸnik.Move( Self.korpus__lufa.Height * 0.5 );
  Self.prze³adowanie_wskaŸnik.Position.Z := Self.prze³adowanie_wskaŸnik__pozycja_roz³adowany.Z;
  Self.prze³adowanie_wskaŸnik.Material.FrontProperties.Ambient.Color := GLS.Color.clrYellow;

  rodzic_l := Self;

  //while rodzic_l.HasParent do // Aby rodzicem by³a scena.
  //  rodzic_l := rodzic_l.Parent;

  while ( rodzic_l.HasParent ) // Aby rodzicem by³ Gra_Obiekty_GLDummyCube.
    and ( rodzic_l.Parent.HasParent ) do
    rodzic_l := rodzic_l.Parent;


  if @Self.amunicja_wystrzelona_utwórz_jeden <> nil then
    Self.amunicja_wystrzelona_utwórz_jeden( rodzic_l, Self, obracaj_dzia³a_f, cel_wspó³rzêdne_f );


  if    ( Self.dzia³o <> nil )
    and ( Self.dzia³o is TDzia³o ) then
    begin

      // TArtyleria, TDzia³o.

      Self.korpus__lufa.Position.Z := TDzia³o(Self.dzia³o).cofanie_wystrza³_pozycja_pocz¹tkowa + TDzia³o(Self.dzia³o).cofanie_wystrza³_odleg³oœæ;

    end;
  //---//if    ( Self.dzia³o <> nil ) (...)


  Result := true;

end;//---//Funkcja Strza³().

//Funkcja Wygl¹d_Elementy__Noc_Zmieñ().
procedure TLufa.Wygl¹d_Elementy__Noc_Zmieñ( const dzieñ_jasnoœæ_f : real; const wygl¹d_elementy__kolor_noc_zmieñ_f : TWygl¹d_Elementy__Kolor_Noc_Zmieñ );
begin

  if @wygl¹d_elementy__kolor_noc_zmieñ_f <> nil then
    begin

      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.prze³adowanie_wskaŸnik.Material, dzieñ_jasnoœæ_f );
      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.wylot_pozycja.Material, dzieñ_jasnoœæ_f );
      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.korpus__lufa.Material, dzieñ_jasnoœæ_f );

    end;
  //---//if @wygl¹d_elementy__kolor_noc_zmieñ_f <> nil then

end;//---//Funkcja Wygl¹d_Elementy__Noc_Zmieñ().

//Konstruktor klasy TTorpedy_Wyrzutnia.
constructor TTorpedy_Wyrzutnia.Create( AOwner : TGLBaseSceneObject; AStatek : TStatek; gl_collision_mmanager_f : TGLCollisionManager; efekt__element_uszkodzenie_gl_thor_fx_manager_f : TGLThorFXManager; const lufy_iloœæ_f : integer; const statek_create_funkcje_f : TStatek_Create_Funkcje; amunicja_rodzaj_f : Typy_Wspolne.TAmunicja_Rodzaj = Typy_Wspolne.ar_Torpeda );
var
  i,
  zti,
  id_statek_l
    : integer;
  ztr : real;
begin

  inherited Create( AOwner );

  //Self.ShowAxes := true;
  //Self.VisibleAtRunTime := true;

  Self.statek__tw := AStatek;

  if Self.statek__tw <> nil then
    id_statek_l := Self.statek__tw.id_statek
  else//if Self.statek__tw <> nil then
    id_statek_l := -1;


  //Self.indeks_w_tabeli := -1;

  Self.obrót_kierunek_zadany.Y := 0;

  Self.obrót_k¹t_zadany := 0;

  Self.obrót_k¹t_zablokowany_do := 0;
  Self.obrót_k¹t_zablokowany_od := 0;
  Self.obrót_szybkoœæ := 25.0;

  Self.amunicja_iloœæ := 1500;
  Self.amunicja_iloœæ_pocz¹tkowa := Self.amunicja_iloœæ;
  Self.amunicja_uzbrajanie_odleg³oœæ := 1;
  Self.obra¿enia_zasiêg := -1;
  //Self.celownik_linia_szerokoœæ_obrót := 0;
  Self.lufa_ostatni_strza³_indeks := -1;
  Self.obra¿enia_zadawane := 1;
  Self.prze³adowanie_czas_milisekundy__broñ := 1000; // 7000 //???
  Self.skala__broñ := 1;
  Self.strza³_od_blokada_milisekundy := 750;
  Self.strza³y_iloœæ := 0;
  Self.zasiêg__broñ := 35; // 35 15 25 5

  Self.celownik_linia_bez_falowania__position_y__kamera_nad_wod¹ := 0;
  Self.celownik_linia_bez_falowania__position_y__standardowa := 0;

  Self.czy_indeks_do_strza³u := false;
  //Self.czy_lufa_podnoszona := false;
  Self.czy_lufa_unoszona := false;
  Self.czy_usun¹æ_torpedy_wyrzutnia := false;

  Self.czy_wycelowane_podniesienie := true; // Nie unosi luf wiêc ma zawsze wycelowane podniesienie.

  SetLength( Self.obrót_k¹t_zablokowany_strza³_do, 0 );
  SetLength( Self.obrót_k¹t_zablokowany_strza³_od, 0 );
  SetLength( Self.obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny, 0 );

  Self.amunicja_rodzaj := amunicja_rodzaj_f;

  if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa ] then
    begin

      Self.czy_broñ_obracana := false;
      Self.czy_wycelowany_obrót := true

    end
  else//if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa ] then
    begin

      Self.czy_broñ_obracana := true;
      Self.czy_wycelowany_obrót := false;

    end;
  //---//if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa ] then


  //Self.strza³_czas := Now();
  Self.strza³_czas__broñ_sekundy_i := Czas_Teraz_W_Sekundach();
  Self.uszkodzone_czas_sekundy_i := 0;

  Self.Parent := AOwner;
  Self.TurnAngle := 0;
  Self.Direction.SetVector( 0, 0, -1 );
  Self.Position.SetPoint( 0, 1, 0 );
  //Self.VisibleAtRunTime := true;

  Self.elementy_wizualne_gl_dummy_cube := TGLDummyCube.Create( Self );
  Self.elementy_wizualne_gl_dummy_cube.Parent := Self;
  Self.elementy_wizualne_gl_dummy_cube.Pickable := false;
  Self.elementy_wizualne_gl_dummy_cube.EdgeColor.Color := GLS.Color.clrRed;
  //Self.elementy_wizualne_gl_dummy_cube.ShowAxes := true;
  //Self.elementy_wizualne_gl_dummy_cube.VisibleAtRunTime := true;

  Self.podstawa := Wyglad_Elementy.TSt_GLCylinder.Create( Self );
  Self.podstawa.Parent := Self.elementy_wizualne_gl_dummy_cube;
  Self.podstawa.TopRadius := 0.25;
  Self.podstawa.BottomRadius := Self.podstawa.TopRadius;
  Self.podstawa.Height := 0.1;
  //Self.podstawa.Position.Y := -( Self.CubeSize * 0.5 ) + Self.podstawa.Height * 0.5;
  Self.podstawa.Position.Y := Self.podstawa.Height * 0.5;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.podstawa, Wyglad_Elementy.or_Statek );
  Wyglad_Elementy.Identyfikator_Elementu( Self.podstawa, id_statek_l );

  Self.efekt__element_uszkodzenie_gl_dummy_cube := TGLDummyCube.Create( Self );
  Self.efekt__element_uszkodzenie_gl_dummy_cube.Parent := Self.elementy_wizualne_gl_dummy_cube;
  Self.efekt__element_uszkodzenie_gl_dummy_cube.Pickable := false;
  Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible := false;
  //Self.efekt__element_uszkodzenie_gl_dummy_cube.VisibleAtRunTime := true;

  //Self.k¹t_test_gl_dummy_cube := TGLDummyCube.Create( Self );
  //Self.k¹t_test_gl_dummy_cube.Parent := Self.elementy_wizualne_gl_dummy_cube;
  //Self.k¹t_test_gl_dummy_cube.Pickable := false;
  //Self.k¹t_test_gl_dummy_cube.Position := Self.podstawa.Position;
  //Self.k¹t_test_gl_dummy_cube.Up.SetVector( 0, 1, 0 ); //???
  //Self.k¹t_test_gl_dummy_cube.EdgeColor.Color := GLS.Color.clrBlack;
  //Self.k¹t_test_gl_dummy_cube.ShowAxes := true;
  //Self.k¹t_test_gl_dummy_cube.VisibleAtRunTime := true;


  Self.korpus__broñ := Wyglad_Elementy.TSt_GLCube.Create( Self );
  Self.korpus__broñ.Parent := Self.elementy_wizualne_gl_dummy_cube;
  Self.korpus__broñ.CubeDepth := Self.podstawa.TopRadius * 2;
  Self.korpus__broñ.CubeHeight := 0.1;
  Self.korpus__broñ.CubeWidth := Self.podstawa.TopRadius * 3;
  //Self.korpus__broñ.Position.Y := -( Self.CubeSize * 0.5 ) + Self.podstawa.Height * 2 - Self.korpus__broñ.CubeHeight * 0.5;
  Self.korpus__broñ.Position.Y := Self.podstawa.Position.Y + Self.podstawa.Height * 0.5 + Self.korpus__broñ.CubeHeight * 0.5;
  Self.korpus__broñ.TurnAngle := 0;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.korpus__broñ, Wyglad_Elementy.or_Statek );
  Wyglad_Elementy.Identyfikator_Elementu( Self.korpus__broñ, id_statek_l );

  Self.korpus_przód := Wyglad_Elementy.TSt_GLCylinder.Create( Self );
  Self.korpus_przód.Parent := Self.elementy_wizualne_gl_dummy_cube;
  Self.korpus_przód.TopRadius := 0.05;
  Self.korpus_przód.BottomRadius := Self.korpus_przód.TopRadius;
  Self.korpus_przód.Height := Self.korpus__broñ.CubeWidth + Self.korpus_przód.TopRadius * 2;
  Self.korpus_przód.PitchAngle := 90;
  Self.korpus_przód.RollAngle := 90;
  Self.korpus_przód.Position.Y := Self.korpus__broñ.Position.Y;
  Self.korpus_przód.Position.Z := -Self.korpus__broñ.CubeDepth * 0.5 - Self.korpus_przód.TopRadius * 0.5;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.korpus_przód, Wyglad_Elementy.or_Statek );
  Wyglad_Elementy.Identyfikator_Elementu( Self.korpus_przód, id_statek_l );


  i := lufy_iloœæ_f;

  if i < 1 then
    i := 1; // Iloœæ luf.

  SetLength( Self.lufy_t, i );

  if Length( Self.lufy_t ) > 0 then
    begin

      if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Je¿e_G³êbinowe ] then
        ztr := Self.korpus__broñ.CubeWidth * 0.25 // Iloœæ kolców je¿a w rzêdzie 4.
      else//if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Je¿e_G³êbinowe ] then
        ztr := Self.korpus__broñ.CubeWidth / Length( lufy_t ); // Iloœæ miejsca na lufê.

    end
  else//if Length( lufy_t ) > 0 then
    ztr := 0;

  zti := -1;

  for i := 0 to Length( Self.lufy_t ) - 1 do
    begin

      if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Je¿e_G³êbinowe ] then
        begin

          inc( zti );

          if zti >= 4 then // Iloœæ kolców je¿a w rzêdzie 4.
            zti := 0;

        end
      else//if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Je¿e_G³êbinowe ] then
        zti := i;


      Self.lufy_t[ i ] := TLufa.Create( Self, Self.statek__tw, gl_collision_mmanager_f );
      Self.lufy_t[ i ].Position.Y := Self.korpus_przód.Position.Y + Self.lufy_t[ i ].korpus__lufa.TopRadius * 2;
      Self.lufy_t[ i ].Position.X := zti * ztr - Self.korpus__broñ.CubeWidth * 0.5 + ztr * 0.5 ; // Przesuniêcie o pó³ szerokoœci korpusu, wyœrodkowanie na obszarze dla lufy.


      Self.lufy_t[ i ].amunicja_wystrzelona_utwórz_jeden := statek_create_funkcje_f.Amunicja_Wystrzelona_Utwórz_Jeden;


      if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa ] then
        begin

          Self.lufy_t[ i ].korpus__lufa.TopRadius := 0.15;
          Self.lufy_t[ i ].korpus__lufa.Height := 0.5;

        end
      else//if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa ] then
      if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Je¿e_G³êbinowe ] then
        begin

          Self.lufy_t[ i ].korpus__lufa.TopRadius := 0.025;
          Self.lufy_t[ i ].korpus__lufa.Height := 0.25;
          Self.lufy_t[ i ].PitchAngle := -50 - System.Math.Floor( i * 0.25 ) * 4; // Iloœæ kolców je¿a w rzêdzie 4. // Ka¿dy kolejny rz¹d jest uniesiony pod wiêkszym k¹tem.
          //Self.lufy_t[ i ].TurnAngle := -(   i - (  Length( Self.lufy_t ) * 0.5  )   ) * 6;
          Self.lufy_t[ i ].TurnAngle := -(   zti - (  2  )   ) * 4; // 4 / 2 = 2 // Iloœæ kolców je¿a w rzêdzie 4. Odchyla kolce na boki (na zewn¹trz).

          Self.lufy_t[ i ].Position.Z :=
              System.Math.Floor( i * 0.25 ) * Self.lufy_t[ i ].korpus__lufa.TopRadius * 4 // Iloœæ kolców je¿a w rzêdzie 4. Ka¿de co 4 kolce przesuwa w ty³.
            - (    System.Math.Floor(   (  Length( Self.lufy_t ) - 1  ) * 0.25   ) * Self.lufy_t[ i ].korpus__lufa.TopRadius * 5.25    ) * 0.5; // Ca³¹ grupê kolców przesuwa w przód o oko³o po³owê przesuniêcia w ty³ aby nie wystawa³y poza dzia³o.

        end
      else//if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Je¿e_G³êbinowe ] then
        begin

          Self.lufy_t[ i ].korpus__lufa.TopRadius := 0.05;
          Self.lufy_t[ i ].korpus__lufa.Height := 1.25;

        end;
      //---//if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Je¿e_G³êbinowe ] then

      Self.lufy_t[ i ].korpus__lufa.BottomRadius := Self.lufy_t[ i ].korpus__lufa.TopRadius;
      Self.lufy_t[ i ].Dodatkowe_Elementy_Lufy_Pozycja_Ustaw();

      if i = 0 then
        Self.lufy_t[ i ].czy_indeks_do_strza³u_lufa := true;

    end;
  //---//for i := 0 to Length( Self.lufy_t ) - 1 do


  Self.cel_linia := TGLLines.Create( Self );
  Self.cel_linia.Parent := AStatek;
  Self.cel_linia.Visible := false;
  Self.cel_linia.Pickable := false;
  Self.cel_linia.Up.SetVector( 0, 1, 0 );
  Self.cel_linia.Direction.SetVector( 0, 0, -1 );
  Self.cel_linia.Position := Self.elementy_wizualne_gl_dummy_cube.Position; //Self.podstawa.Position elementy_wizualne_gl_dummy_cube
  //Self.cel_linia.NodesAspect := lnaInvisible;
  Self.cel_linia.AddNode( 0, 0, 0 );
  Self.cel_linia.AddNode( 0, 0, -1 );

  Self.celownik_linia := TGLLines.Create( Self );
  Self.celownik_linia.Parent := Self;
  Self.celownik_linia.Pickable := false;
  Self.celownik_linia.AntiAliased := true;
  Self.celownik_linia.LineWidth := 0;
  Self.celownik_linia.LineColor.Color := GLS.Color.clrYellow;
  Self.celownik_linia.NodesAspect := lnaInvisible;
  Self.celownik_linia.Position := Self.elementy_wizualne_gl_dummy_cube.Position; //Self.podstawa.Position elementy_wizualne_gl_dummy_cube
  Self.celownik_linia.Position.Y := Self.podstawa.Height * 0.5; // Y - w po³owie wysokoœci podstawy.
  //Self.celownik_linia.ShowAxes := true;
  //Self.celownik_linia.Up.SetVector( 0, 1, 0 );
  //Self.celownik_linia.Visible := false;
  Self.celownik_linia.AddNode( 0, 0, 0 );
  Self.celownik_linia.AddNode( 0, 0, -Self.zasiêg__broñ ); // Zasiêg torpedy.
  Self.celownik_linia__widoczne := true;

  Self.celownik_linia_bez_falowania := TGLLines.Create( Self );
  Self.celownik_linia_bez_falowania.Parent := AStatek;
  Self.celownik_linia_bez_falowania.Pickable := false;
  Self.celownik_linia_bez_falowania.AntiAliased := Self.celownik_linia.AntiAliased;
  Self.celownik_linia_bez_falowania.LineWidth := Self.celownik_linia.LineWidth;
  Self.celownik_linia_bez_falowania.LineColor.Color := GLS.Color.clrRichBlue; //Self.celownik_linia.LineColor.Color;
  Self.celownik_linia_bez_falowania.NodesAspect := Self.celownik_linia.NodesAspect;
  Self.celownik_linia_bez_falowania.Position := Self.elementy_wizualne_gl_dummy_cube.Position; //Self.podstawa.Position elementy_wizualne_gl_dummy_cube
  Self.celownik_linia_bez_falowania.Position.Y := Self.podstawa.Height * 0.5; // Y - w po³owie wysokoœci podstawy.
  Self.celownik_linia_bez_falowania.AddNode( 0, 0, Self.celownik_linia.Nodes[ 0 ].Z );
  Self.celownik_linia_bez_falowania.AddNode( 0, 0, -Self.zasiêg__broñ ); // Zasiêg torpedy.

  Self.celownik_linia__do_punktu_uzbrajania := TGLLines.Create( Self );
  Self.celownik_linia__do_punktu_uzbrajania.Parent := Self.celownik_linia;
  Self.celownik_linia__do_punktu_uzbrajania.Pickable := false;
  Self.celownik_linia__do_punktu_uzbrajania.AntiAliased := Self.celownik_linia.AntiAliased;
  Self.celownik_linia__do_punktu_uzbrajania.LineWidth := 2;
  Self.celownik_linia__do_punktu_uzbrajania.LineColor.Color := GLS.Color.clrGray50;
  Self.celownik_linia__do_punktu_uzbrajania.LinePattern := System.Math.Floor( MAXWORD * 0.05 ); // Punktowana $CCCC, ci¹g³a $FFFF.
  Self.celownik_linia__do_punktu_uzbrajania.NodesAspect := Self.celownik_linia.NodesAspect;
  Self.celownik_linia__do_punktu_uzbrajania.AddNode( 0, 0, 0 );
  Self.celownik_linia__do_punktu_uzbrajania.AddNode( 0, 0, -Self.amunicja_uzbrajanie_odleg³oœæ );

  Self.celownik_linia_bez_falowania__do_punktu_uzbrajania := TGLLines.Create( Self );
  Self.celownik_linia_bez_falowania__do_punktu_uzbrajania.Parent := Self.celownik_linia_bez_falowania;
  Self.celownik_linia_bez_falowania__do_punktu_uzbrajania.Pickable := false;
  Self.celownik_linia_bez_falowania__do_punktu_uzbrajania.AntiAliased := Self.celownik_linia.AntiAliased;
  Self.celownik_linia_bez_falowania__do_punktu_uzbrajania.LineWidth := Self.celownik_linia__do_punktu_uzbrajania.LineWidth;
  Self.celownik_linia_bez_falowania__do_punktu_uzbrajania.LineColor.Color := Self.celownik_linia__do_punktu_uzbrajania.LineColor.Color;
  Self.celownik_linia_bez_falowania__do_punktu_uzbrajania.LinePattern := Self.celownik_linia__do_punktu_uzbrajania.LinePattern;
  Self.celownik_linia_bez_falowania__do_punktu_uzbrajania.NodesAspect := Self.celownik_linia.NodesAspect;
  Self.celownik_linia_bez_falowania__do_punktu_uzbrajania.AddNode( 0, 0, 0 );
  Self.celownik_linia_bez_falowania__do_punktu_uzbrajania.AddNode( 0, 0, -Self.amunicja_uzbrajanie_odleg³oœæ );

  Self.obrót_k¹t_zablokowany_GLDisk := TGLDisk.Create( Self );
  Self.obrót_k¹t_zablokowany_GLDisk.Parent := AOwner;
  Self.obrót_k¹t_zablokowany_GLDisk.Pickable := false;
  Self.obrót_k¹t_zablokowany_GLDisk.Direction.SetVector( 0, 1, 0 );
  Self.obrót_k¹t_zablokowany_GLDisk.RollAngle := 180;
  Self.obrót_k¹t_zablokowany_GLDisk.OuterRadius := 0.75;
  Self.obrót_k¹t_zablokowany_GLDisk.Visible := AStatek.obrót_k¹t_zablokowany_wskaŸnik_widoczne;
  Self.obrót_k¹t_zablokowany_GLDisk.Material.BlendingMode := bmOpaque;


  Self.si__cel__przeliczone_namiary := false;
  Self.si__namiar_pocz¹tkowy__obrót_k¹t_zadany := 0;
  Self.Si_Wartoœci_Pocz¹tkowe_Ustaw();


  if gl_collision_mmanager_f <> nil then
    begin

      with TGLBCollision.Create( Self.korpus__broñ.Behaviours ) do
        begin

          GroupIndex := 0;
          BoundingMode := cbmCube;
          Manager := gl_collision_mmanager_f;

        end;
      //---//with TGLBCollision.Create( Self.korpus__broñ.Behaviours ) do

      with TGLBCollision.Create( Self.korpus_przód.Behaviours ) do
        begin

          GroupIndex := 0;
          BoundingMode := cbmCube;
          Manager := gl_collision_mmanager_f;

        end;
      //---//with TGLBCollision.Create( Self.korpus_przód.Behaviours ) do

      with TGLBCollision.Create( Self.podstawa.Behaviours ) do
        begin

          GroupIndex := 0;
          BoundingMode := cbmCube;
          Manager := gl_collision_mmanager_f;

        end;
      //---//with TGLBCollision.Create( Self.podstawa.Behaviours ) do

    end;
  //---//if gl_collision_mmanager_f <> nil then


  if efekt__element_uszkodzenie_gl_thor_fx_manager_f <> nil then
    TGLBThorFX(Self.efekt__element_uszkodzenie_gl_dummy_cube.AddNewEffect( TGLBThorFX )).Manager := efekt__element_uszkodzenie_gl_thor_fx_manager_f;

end;//---//Konstruktor klasy TTorpedy_Wyrzutnia.

//Destruktor klasy TTorpedy_Wyrzutnia.
destructor TTorpedy_Wyrzutnia.Destroy();
var
  i : integer;
begin

  SetLength( Self.obrót_k¹t_zablokowany_strza³_do, 0 );
  SetLength( Self.obrót_k¹t_zablokowany_strza³_od, 0 );
  SetLength( Self.obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny, 0 );


  FreeAndNil( Self.efekt__element_uszkodzenie_gl_dummy_cube );
  //FreeAndNil( Self.k¹t_test_gl_dummy_cube );

  FreeAndNil( Self.podstawa );
  FreeAndNil( Self.korpus__broñ );
  FreeAndNil( Self.korpus_przód );


  for i := 0 to Length( Self.lufy_t ) - 1 do
    FreeAndNil( Self.lufy_t[ i ] );

  SetLength( Self.lufy_t, 0 );


  FreeAndNil( Self.elementy_wizualne_gl_dummy_cube );

  FreeAndNil( Self.celownik_linia__do_punktu_uzbrajania );
  FreeAndNil( Self.celownik_linia_bez_falowania__do_punktu_uzbrajania );
  FreeAndNil( Self.cel_linia );
  FreeAndNil( Self.celownik_linia );
  FreeAndNil( Self.celownik_linia_bez_falowania );

  FreeAndNil( Self.obrót_k¹t_zablokowany_GLDisk );


  for i := 0 to Length( Self.obrót_k¹t_zablokowany_strza³_GLDisk_t ) - 1 do
    FreeAndNil( Self.obrót_k¹t_zablokowany_strza³_GLDisk_t[ i ] );

  SetLength( Self.obrót_k¹t_zablokowany_strza³_GLDisk_t, 0 );


  inherited;

end;//---//Destruktor klasy TTorpedy_Wyrzutnia.

//Funkcja Dodatkowe_Elementy_Ustaw().
procedure TTorpedy_Wyrzutnia.Dodatkowe_Elementy_Ustaw();

  //Funkcja K¹t_Zablokowany_Obszar_Rysuj() w Dodatkowe_Elementy_Ustaw().
  function K¹t_Zablokowany_Obszar_Rysuj( gl_disk_f : TGLDisk; const k¹t_do_f, k¹t_od_f : real; const indeks_f : integer; const czy_obrót_k¹t_zablokowany_strza³_f : boolean ) : integer;
  var
    i : integer;
    zt_gl_sphere : TGLSphere;
  begin

    gl_disk_f.Position := Self.Position;
    gl_disk_f.Position.Y := gl_disk_f.Position.Y + Self.podstawa.Height * 0.5;

    gl_disk_f.StartAngle := k¹t_od_f;
    gl_disk_f.SweepAngle := 0;

    zt_gl_sphere := TGLSphere.Create( Self.Parent );

    zt_gl_sphere.TurnAngle := gl_disk_f.StartAngle;
    zt_gl_sphere.TurnAngle := zt_gl_sphere.TurnAngle + 1;


    if czy_obrót_k¹t_zablokowany_strza³_f then
      begin

        // K¹t zablokowany strza³.

        gl_disk_f.Position.Y := gl_disk_f.Position.Y + 0.002 + indeks_f * 0.0001 + Random( 100 ) * 0.00001; // Je¿eli jest na tym samym poziomie co inny element to migocze.


        // Sprawdza czy k¹t zablokowany strza³u rozci¹ga siê w kierunku rosn¹cym czy malej¹cym wzglêdem k¹ta obrót_k¹t_zablokowany_od.
        if Self.Obrót_K¹t_Zablokowany_Strza³u_SprawdŸ( zt_gl_sphere.TurnAngle, indeks_f ) then
          Result := 1
        else//if Self.Obrót_K¹t_Zablokowany_Strza³u_SprawdŸ( zt_gl_sphere.TurnAngle, indeks_f ) then
          Result := -1;
        //---// Sprawdza czy k¹t zablokowany strza³u rozci¹ga siê w kierunku rosn¹cym czy malej¹cym wzglêdem k¹ta obrót_k¹t_zablokowany_od.

      end
    else//if czy_obrót_k¹t_zablokowany_strza³_f then
      begin

        // K¹t zablokowany.

        gl_disk_f.Position.Y := gl_disk_f.Position.Y + 0.001 + Random( 100 ) * 0.00001; // Je¿eli jest na tym samym poziomie co inny element to migocze.


        // Sprawdza czy k¹t zablokowany rozci¹ga siê w kierunku rosn¹cym czy malej¹cym wzglêdem k¹ta obrót_k¹t_zablokowany_od.
        if Self.Obrót_K¹t_Zablokowany_SprawdŸ( zt_gl_sphere.TurnAngle ) then
          Result := 1
        else//if Self.Obrót_K¹t_Zablokowany_SprawdŸ( zt_gl_sphere.TurnAngle ) then
          Result := -1;
        //---// Sprawdza czy k¹t zablokowany rozci¹ga siê w kierunku rosn¹cym czy malej¹cym wzglêdem k¹ta obrót_k¹t_zablokowany_od.

      end;
    //---//if czy_obrót_k¹t_zablokowany_strza³_f then


    zt_gl_sphere.TurnAngle := gl_disk_f.StartAngle;

    for i := -179 to 180 do
      begin

        zt_gl_sphere.TurnAngle := zt_gl_sphere.TurnAngle + Result;


        if czy_obrót_k¹t_zablokowany_strza³_f then
          begin

            // K¹t zablokowany strza³.

            if Self.Obrót_K¹t_Zablokowany_Strza³u_SprawdŸ( zt_gl_sphere.TurnAngle, indeks_f ) then
              gl_disk_f.SweepAngle := gl_disk_f.SweepAngle + Result
            else//if Self.Obrót_K¹t_Zablokowany_Strza³u_SprawdŸ( zt_gl_sphere.TurnAngle, indeks_f ) then
              Break;

          end
        else//if czy_obrót_k¹t_zablokowany_strza³_f then
          begin

            // K¹t zablokowany.

            if Self.Obrót_K¹t_Zablokowany_SprawdŸ( zt_gl_sphere.TurnAngle ) then
              gl_disk_f.SweepAngle := gl_disk_f.SweepAngle + Result
            else//if Self.Obrót_K¹t_Zablokowany_SprawdŸ( zt_gl_sphere.TurnAngle ) then
              Break;

          end;
        //---//if czy_obrót_k¹t_zablokowany_strza³_f then

      end;
    //---//for i := -179 to 180 do


    FreeAndNil( zt_gl_sphere );


    // Zamiana znaków, gdy¿ tak siê rysuje GLDisk.
    gl_disk_f.StartAngle := -gl_disk_f.StartAngle;
    gl_disk_f.SweepAngle := -gl_disk_f.SweepAngle;

  end;//---//Funkcja K¹t_Zablokowany_Obszar_Rysuj() w Dodatkowe_Elementy_Ustaw().

var
  i,
  zti
    : integer;
  ztsi : single;
  //zt_gl_sphere : TGLSphere;
begin//Funkcja Dodatkowe_Elementy_Ustaw().

  //
  // Funkcja po utworzeniu i ustawieniu parametrów dostosowuje elementy dzia³a.
  //

  // Aktualizuje dane z pliku schematu.
  Self.cel_linia.Position := Self.Position; // Nie jest wa¿ne aby ca³a linia wskazywa³a dok³adny kierunek lotu do celu, wa¿ny jest punkt koñca linii, który jest celem.

  Self.celownik_linia.Nodes[ 1 ].Z := -Self.zasiêg__broñ;

  for i := 0 to Length( Self.lufy_t ) - 1 do
    Self.lufy_t[ i ].prze³adowanie_czas_milisekundy__lufa := Self.prze³adowanie_czas_milisekundy__broñ;

  if Length( Self.lufy_t ) <= 0 then
    Self.si__strza³_lufa_opóŸnienie_czas_milisekundy := 0
  else//if Length( Self.lufy_t ) <= 0 then
    Self.si__strza³_lufa_opóŸnienie_czas_milisekundy := Round(  Self.prze³adowanie_czas_milisekundy__broñ / Length( Self.lufy_t )  );
  //---// Aktualizuje dane z pliku schematu.


  SetLength(  Self.obrót_k¹t_zablokowany_strza³_GLDisk_t, Length( Self.obrót_k¹t_zablokowany_strza³_do )  );

  for i := 0 to Length( Self.obrót_k¹t_zablokowany_strza³_do ) - 1 do
    begin

      Self.obrót_k¹t_zablokowany_strza³_GLDisk_t[ i ] := TGLDisk.Create( Self );
      Self.obrót_k¹t_zablokowany_strza³_GLDisk_t[ i ].Parent := Self.Parent;
      Self.obrót_k¹t_zablokowany_strza³_GLDisk_t[ i ].Pickable := false;
      Self.obrót_k¹t_zablokowany_strza³_GLDisk_t[ i ].Direction.SetVector( 0, 1, 0 );
      Self.obrót_k¹t_zablokowany_strza³_GLDisk_t[ i ].RollAngle := 180;
      Self.obrót_k¹t_zablokowany_strza³_GLDisk_t[ i ].OuterRadius := 0.75;
      Self.obrót_k¹t_zablokowany_strza³_GLDisk_t[ i ].Visible := Self.statek__tw.obrót_k¹t_zablokowany_strza³_wskaŸnik_widoczne;
      //Self.obrót_k¹t_zablokowany_strza³_GLDisk_t[ i ].Material.FrontProperties.Ambient.Color := Self.obrót_k¹t_zablokowany_GLDisk.Material.FrontProperties.Ambient.Color;
      //Self.obrót_k¹t_zablokowany_strza³_GLDisk_t[ i ].Material.FrontProperties.Diffuse.Color := Self.obrót_k¹t_zablokowany_GLDisk.Material.FrontProperties.Diffuse.Color;
      Self.obrót_k¹t_zablokowany_strza³_GLDisk_t[ i ].Material.FrontProperties.Emission.Color := Self.obrót_k¹t_zablokowany_GLDisk.Material.FrontProperties.Emission.Color;
      //Self.obrót_k¹t_zablokowany_strza³_GLDisk_t[ i ].Material.FrontProperties.Emission.Color := Self.obrót_k¹t_zablokowany_GLDisk.Material.FrontProperties.Ambient.Color;
      Self.obrót_k¹t_zablokowany_strza³_GLDisk_t[ i ].Material.BlendingMode := bmOpaque;

      if    ( Self.skala__broñ <> 1 )
        and ( Self.skala__broñ <> 0 ) then
        Self.obrót_k¹t_zablokowany_strza³_GLDisk_t[ i ].Scale.Scale( Self.skala__broñ );

      K¹t_Zablokowany_Obszar_Rysuj( Self.obrót_k¹t_zablokowany_strza³_GLDisk_t[ i ], Self.obrót_k¹t_zablokowany_strza³_do[ i ], Self.obrót_k¹t_zablokowany_strza³_od[ i ], i, true );

    end;
  //---//for i := 0 to Length( Self.obrót_k¹t_zablokowany_strza³_do ) - 1 do


  if    ( Self.skala__broñ <> 1 )
    and ( Self.skala__broñ <> 0 ) then
    begin

      //Self.Scale.Scale( Self.skala__broñ );
      Self.elementy_wizualne_gl_dummy_cube.Scale.Scale( Self.skala__broñ );
      //Self.elementy_wizualne_gl_dummy_cube.Position.Y := Self.elementy_wizualne_gl_dummy_cube.CubeSize * 0.5;

      Self.obrót_k¹t_zablokowany_GLDisk.Scale.Scale( Self.skala__broñ );

    end;
  //---//if    ( Self.skala__broñ <> 1 ) (...)


  // Ustawia linie celownicze.
  Self.celownik_linia.Position.Z := Self.korpus_przód.Position.Z * Self.skala__broñ;
  //Self.celownik_linia_bez_falowania.Position.AsVector := Self.celownik_linia_bez_falowania.AbsoluteToLocal( Self.celownik_linia.AbsolutePosition );
  Self.celownik_linia_bez_falowania.Position.AsVector := Self.celownik_linia_bez_falowania.AbsoluteToLocal( Self.AbsolutePosition );
  Self.celownik_linia.Position.Y := ( Self.podstawa.Height + Self.korpus__broñ.CubeHeight * 0.5 ) * Self.skala__broñ; // Y - w po³owie wysokoœci korpusu. // Linia celownicza z wysokoœci luf.

  Self.celownik_linia_bez_falowania__position_y__standardowa := Self.celownik_linia_bez_falowania.Position.Y;

  if Self.celownik_linia_bez_falowania.LocalToAbsolute( Self.celownik_linia_bez_falowania.Position.AsVector ).Y < 0 then
    Self.celownik_linia_bez_falowania__position_y__kamera_nad_wod¹ := zanurzanie_precyzja_c
  else//if Self.celownik_linia_bez_falowania.LocalToAbsolute( Self.celownik_linia_bez_falowania.Position.AsVector ).Y < 0 then
    Self.celownik_linia_bez_falowania__position_y__kamera_nad_wod¹ := Self.celownik_linia_bez_falowania__position_y__standardowa;


  if Length( Self.lufy_t ) > 0 then
  //  Self.celownik_linia.Nodes[ 0 ].Z := -( Self.lufy_t[ 0 ].korpus__lufa.Height * Self.skala__broñ + Self.amunicja_uzbrajanie_odleg³oœæ ) + Self.korpus_przód.Position.Z * Self.skala__broñ
    Self.celownik_linia__do_punktu_uzbrajania.Nodes[ 0 ].Z := -( Self.lufy_t[ 0 ].korpus__lufa.Height * Self.skala__broñ ) + Self.korpus_przód.Position.Z * Self.skala__broñ;
  //else//if Length( Self.lufy_t ) > 0 then
  //  Self.celownik_linia.Nodes[ 0 ].Z := -Self.amunicja_uzbrajanie_odleg³oœæ;
  //
  //Self.celownik_linia.Nodes[ 1 ].Z := -Self.zasiêg__broñ; // Zasiêg dzia³a. Aktualizacja wartoœci.

  if Length( Self.lufy_t ) > 0 then
    ztsi := ( Self.korpus_przód.Position.Z - Self.lufy_t[ 0 ].korpus__lufa.Height ) * Self.skala__broñ
  else//if Length( Self.lufy_t ) > 0 then
    ztsi := 0;

  Self.celownik_linia.Nodes[ 0 ].Z := ztsi - Self.amunicja_uzbrajanie_odleg³oœæ;
  Self.celownik_linia.Nodes[ 1 ].Z := ztsi - Self.zasiêg__broñ; // Zasiêg dzia³a. Aktualizacja wartoœci.

  Self.celownik_linia_bez_falowania.Nodes[ 0 ].Z := Self.celownik_linia.Nodes[ 0 ].Z + Self.korpus_przód.Position.Z * Self.skala__broñ;
  Self.celownik_linia_bez_falowania.Nodes[ 1 ].Z := Self.celownik_linia.Nodes[ 1 ].Z + Self.korpus_przód.Position.Z * Self.skala__broñ;

  Self.celownik_linia__do_punktu_uzbrajania.Nodes[ 1 ].Z := Self.celownik_linia.Nodes[ 0 ].Z;

  Self.celownik_linia_bez_falowania__do_punktu_uzbrajania.Nodes[ 0 ].Z := Self.celownik_linia__do_punktu_uzbrajania.Nodes[ 0 ].Z;
  Self.celownik_linia_bez_falowania__do_punktu_uzbrajania.Nodes[ 1 ].Z := Self.celownik_linia_bez_falowania.Nodes[ 0 ].Z;
  //---// Ustawia linie celownicze.


  zti := K¹t_Zablokowany_Obszar_Rysuj( Self.obrót_k¹t_zablokowany_GLDisk, Self.obrót_k¹t_zablokowany_do, Self.obrót_k¹t_zablokowany_od, -99, false );

  {$region '//Rysuje obszar zablokowanego k¹ta obrotu.'}
  //zt_gl_sphere := TGLSphere.Create( Self.Parent );
  //
  //Self.obrót_k¹t_zablokowany_GLDisk.Position := Self.Position;
  //Self.obrót_k¹t_zablokowany_GLDisk.Position.Y := Self.obrót_k¹t_zablokowany_GLDisk.Position.Y + Self.podstawa.Height * 0.5;
  //Self.obrót_k¹t_zablokowany_GLDisk.Position.Y := Self.obrót_k¹t_zablokowany_GLDisk.Position.Y + 0.001; // Je¿eli jest na tym samym poziomie co inny element to migocze.
  //
  //Self.obrót_k¹t_zablokowany_GLDisk.StartAngle := Self.obrót_k¹t_zablokowany_od;
  //Self.obrót_k¹t_zablokowany_GLDisk.SweepAngle := 0;
  //
  //
  //// Sprawdza czy k¹t zablokowany rozci¹ga siê w kierunku rosn¹cym czy malej¹cym wzglêdem k¹ta obrót_k¹t_zablokowany_od.
  //zt_gl_sphere.TurnAngle := Self.obrót_k¹t_zablokowany_GLDisk.StartAngle;
  //zt_gl_sphere.TurnAngle := zt_gl_sphere.TurnAngle + 1;
  //
  //if Self.Obrót_K¹t_Zablokowany_SprawdŸ( zt_gl_sphere.TurnAngle ) then
  //  zti := 1
  //else//if Self.Obrót_K¹t_Zablokowany_SprawdŸ( zt_gl_sphere.TurnAngle ) then
  //  zti := -1;
  //
  //zt_gl_sphere.TurnAngle := Self.obrót_k¹t_zablokowany_GLDisk.StartAngle;
  ////---// Sprawdza czy k¹t zablokowany rozci¹ga siê w kierunku rosn¹cym czy malej¹cym wzglêdem k¹ta obrót_k¹t_zablokowany_od.
  //
  //for i := -179 to 180 do
  //  begin
  //
  //    zt_gl_sphere.TurnAngle := zt_gl_sphere.TurnAngle + zti;
  //
  //    if Self.Obrót_K¹t_Zablokowany_SprawdŸ( zt_gl_sphere.TurnAngle ) then
  //      Self.obrót_k¹t_zablokowany_GLDisk.SweepAngle := Self.obrót_k¹t_zablokowany_GLDisk.SweepAngle + zti
  //    else
  //      Break;
  //
  //  end;
  ////---//for i := -179 to 180 do
  //
  //FreeAndNil( zt_gl_sphere );
  //
  //// Zamiana znaków, gdy¿ tak siê rysuje GLDisk.
  //Self.obrót_k¹t_zablokowany_GLDisk.StartAngle := -Self.obrót_k¹t_zablokowany_GLDisk.StartAngle;
  //Self.obrót_k¹t_zablokowany_GLDisk.SweepAngle := -Self.obrót_k¹t_zablokowany_GLDisk.SweepAngle;
  {$endregion '//Rysuje obszar zablokowanego k¹ta obrotu.'}

    
  // Je¿eli w schemacie wczytanym z pliku zadany k¹t obrotu jest w zablokowanym zakresie.
  if Self.Obrót_K¹t_Zablokowany_SprawdŸ( Self.obrót_k¹t_zadany ) then
    if Abs( Self.obrót_k¹t_zadany - Self.obrót_k¹t_zablokowany_do ) < Abs( Self.obrót_k¹t_zadany - Self.obrót_k¹t_zablokowany_od ) then
      Self.obrót_k¹t_zadany := Self.obrót_k¹t_zablokowany_do + zti
    else//if Abs( Self.obrót_k¹t_zadany - Self.obrót_k¹t_zablokowany_do ) < Abs( Self.obrót_k¹t_zadany - Self.obrót_k¹t_zablokowany_od ) then
      Self.obrót_k¹t_zadany := Self.obrót_k¹t_zablokowany_od - zti;
      
  Self.TurnAngle := Self.obrót_k¹t_zadany;
  Self.si__namiar_pocz¹tkowy__obrót_k¹t_zadany := Self.obrót_k¹t_zadany;

  Self.cel_linia.Nodes[ 1 ].AsAffineVector := GLS.VectorGeometry.VectorAdd(  Self.cel_linia.Nodes[ 1 ].AsAffineVector, GLS.VectorGeometry.VectorScale( Self.Direction.AsAffineVector, 10 )  );
  Self.cel_linia.Nodes[ 1 ].Y := -Self.cel_linia.Nodes[ 1 ].Y;

  //Self.k¹t_test_obrót.Position.AsVector := Self.statek.AbsoluteToLocal( Self.podstawa.AbsolutePosition );
  //
  //Self.k¹t_test_podniesienie.Position.AsVector := Self.statek.AbsoluteToLocal( Self.podstawa.AbsolutePosition );
  //Self.k¹t_test_podniesienie.Position.Y := Self.statek.AbsoluteToLocal( Self.korpus_przód.AbsolutePosition ).Y; // Dok³adniej celuje w punkt.

end;//---//Funkcja Dodatkowe_Elementy_Ustaw().

//Funkcja Obrót_K¹t_Zablokowany_SprawdŸ().
function TTorpedy_Wyrzutnia.Obrót_K¹t_Zablokowany_SprawdŸ( k¹t_f : real ) : boolean;
begin

  //
  // Funkcja sprawdza czy zadana wartoœæ k¹ta znajduje siê w zablokowanym obszarze k¹ta obrotu.
  //
  // Zwraca prawdê gdy zadana wartoœæ k¹ta znajduje siê w zablokowanym obszarze k¹ta obrotu.
  //
  // Parametry:
  //   k¹t_f - sprawdzana wartoœæ k¹ta.
  //

  // Opis jest analogiczny jak w TTorpedy_Wyrzutnia.Obrót_K¹t_Zablokowany_Strza³u_SprawdŸ().


  Result := false;

  if Self.obrót_k¹t_zablokowany_od = Self.obrót_k¹t_zablokowany_do then
    Exit;


  // Wartoœci powy¿ej 180 przechodz¹ na -180, a wartoœci poni¿ej -180 przechodz¹ na 180.
  if k¹t_f > 180 then
    k¹t_f := 180
  else//if k¹t_f > 180 then
    if k¹t_f < -180 then
      k¹t_f := -180;


  // Wartoœci 180 i -180 s¹ sobie równe.
  if    (  Abs( k¹t_f ) = 180  )
    and (
             (  Abs( Self.obrót_k¹t_zablokowany_do ) = 180  )
          or (  Abs( Self.obrót_k¹t_zablokowany_od ) = 180  )
        ) then
    begin

      Result := true;
      Exit;

    end;
  //---//if    (  Abs( k¹t_f ) = 180  ) (...)


  if Self.obrót_k¹t_zablokowany_od >= Self.obrót_k¹t_zablokowany_do then
    begin

      // Zakres k¹ta obrotu 'od do' nie przechodzi przez œrodek rufy.

      if    ( k¹t_f <= Self.obrót_k¹t_zablokowany_od )
        and ( k¹t_f >= Self.obrót_k¹t_zablokowany_do ) then
        begin

          Result := true;

        end;
      //---//if    ( k¹t_f <= Self.obrót_k¹t_zablokowany_od ) (...)

    end
  else//if Self.obrót_k¹t_od >= Self.obrót_k¹t_do then
    begin

      // Zakres k¹ta obrotu 'od do' przechodzi przez œrodek rufy.

      if   ( k¹t_f <= Self.obrót_k¹t_zablokowany_od )
        or ( k¹t_f >= Self.obrót_k¹t_zablokowany_do ) then
        begin

          Result := true;

        end;
      //---//if    ( k¹t_f <= Self.obrót_k¹t_zablokowany_od ) (...)

    end;
  //---//if Self.obrót_k¹t_od >= Self.obrót_k¹t_do then

end;//---//Funkcja Obrót_K¹t_Zablokowany_SprawdŸ().

//Funkcja Obrót_Zadany_Zmieñ().
procedure TTorpedy_Wyrzutnia.Obrót_Zadany_Zmieñ( const celownik_linia_widocznoœæ_f : boolean = true );

  //Funkcja Obrót_K¹t_Zadany_Wyznacz() w Obrót_Zadany_Zmieñ().
  function Obrót_K¹t_Zadany_Wyznacz( gt_lines_f : TGLLines ) : real;
  var
    //statek_obrót_k¹t_l : real; // K¹t obrotu statku w poziomie (lewo prawo).
    zt_vector
    //zt_vector1
      : GLS.VectorTypes.TVector4f;
  begin

    //
    // Funkcja wyznacza zadany k¹t obrotu wzglêdem statku.
    //
    // Zwraca zadany k¹t obrotu wzglêdem statku.
    //

    GLS.VectorGeometry.SetVector( zt_vector, 0, 0, 0 ); // Najlepiej sprawdzaæ k¹t w punkcie zero.
    //GLS.VectorGeometry.SetVector( zt_vector1, 0, 0, -1 ); // Kierunek w przód.

    //statek_obrót_k¹t_l := System.Math.RadToDeg(  GLS.VectorGeometry.AngleBetweenVectors( Self.statek.AbsoluteDirection, zt_vector1, zt_vector )  );

    //if Self.statek.AbsoluteDirection.X > 0 then
    //  statek_obrót_k¹t_l := -statek_obrót_k¹t_l;


    Result := System.Math.RadToDeg(  GLS.VectorGeometry.AngleBetweenVectors( Self.statek__tw.AbsoluteDirection, Self.obrót_kierunek_zadany, zt_vector )  );

    if gt_lines_f.Nodes[ 1 ].AsAffineVector.X > 0 then
      Result := -Result;

  end;//---//Funkcja Obrót_K¹t_Zadany_Wyznacz() w Obrót_Zadany_Zmieñ().

var
  odleg³oœæ_k¹t_zablokowany_do_l,
  odleg³oœæ_k¹t_zablokowany_od_l
    : real;
  zt_gt_lines : TGLLines;
  //zt_vector : GLS.VectorTypes.TVector4d;
begin//Funkcja Obrót_Zadany_Zmieñ().

  //
  // Funkcja ustawia zadany kierunek obrotu na kierunek, w którym patrzy kamera (w p³aszczyŸnie poziomej).
  //

  //Self.obrót_kierunek_zadany.Y := 0;

  if Self.Parent = nil then
    Exit;

  if not Self.czy_broñ_obracana then
    Exit;

  if Self.uszkodzone_czas_sekundy_i <> 0 then
    Exit;

  // Namierzanie wed³ug linii celowniczej statku.


  if Self.statek__tw.celowanie__bronie_osobno then
    zt_gt_lines := Self.cel_linia
  else//if Self.statek__tw.celowanie__bronie_osobno then
    zt_gt_lines := Self.statek__tw.celownicza_linia;


  case Self.statek__tw.celowanie__tryb of
      ct_Linia :
        begin

          // Namierzanie równoleg³e do linii celowania.

          zt_gt_lines := Self.statek__tw.celownicza_linia;

          Self.obrót_kierunek_zadany.X := zt_gt_lines.Nodes[ 1 ].X; // TStatek(Self.Parent).celownicza_linia.Nodes[ 1 ].X.
          Self.obrót_kierunek_zadany.Z := zt_gt_lines.Nodes[ 1 ].Z;

          Self.obrót_kierunek_zadany := zt_gt_lines.LocalToAbsolute( Self.obrót_kierunek_zadany );

        end;
      //---//ct_Linia :

      else//case Self.statek__tw.celowanie__tryb of
        begin

          // Namierzanie zbie¿ne do punktu celowania.

          //Self.k¹t_test_gl_dummy_cube.Direction.SetVector
          //  (   // Cel                 Obiekt celuj¹cy
          //      Statki_Form.Celowniczy_GLDummyCube.Position.X - Self.k¹t_test_gl_dummy_cube.AbsolutePosition.X
          //    , 0
          //    , Statki_Form.Celowniczy_GLDummyCube.Position.Z - Self.k¹t_test_gl_dummy_cube.AbsolutePosition.Z
          //  );
          // Lub.
          //Self.k¹t_test_gl_dummy_cube.Direction.SetVector
          //  (   // Cel                 Obiekt celuj¹cy
          //      zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector ).X - Self.k¹t_test_gl_dummy_cube.AbsolutePosition.X
          //    , 0
          //    , zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector ).Z - Self.k¹t_test_gl_dummy_cube.AbsolutePosition.Z
          //  );
          //
          //Self.obrót_kierunek_zadany.X := Self.k¹t_test_gl_dummy_cube.Direction.X;
          //Self.obrót_kierunek_zadany.Z := Self.k¹t_test_gl_dummy_cube.Direction.Z;
          // Lub.
          Self.obrót_kierunek_zadany.X := zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector ).X - Self.podstawa.AbsolutePosition.X;
          Self.obrót_kierunek_zadany.Z := zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector ).Z - Self.podstawa.AbsolutePosition.Z;

        end;
      //---//case Self.statek__tw.celowanie__tryb of
    end;
  //---//case Self.statek__tw.celowanie__tryb of


  Self.obrót_k¹t_zadany := Obrót_K¹t_Zadany_Wyznacz( zt_gt_lines );
  Self.obrót_k¹t_zadany_bezwzglêdny := Self.obrót_k¹t_zadany;


  // Je¿eli k¹t zadany jest w zakresie zablokowanego k¹ta obrotu ustali wartoœæ k¹ta zadanego na najbli¿sz¹ mu wartoœæ granicy zakresu zablokowanego k¹ta obrotu.
  if    ( Self.obrót_k¹t_zablokowany_od <> Self.obrót_k¹t_zablokowany_do )
    and (  Self.Obrót_K¹t_Zablokowany_SprawdŸ( Self.obrót_k¹t_zadany )  ) then
    begin

      odleg³oœæ_k¹t_zablokowany_od_l := Abs( Self.obrót_k¹t_zadany - Self.obrót_k¹t_zablokowany_od );
      odleg³oœæ_k¹t_zablokowany_do_l := Abs( Self.obrót_k¹t_zadany - Self.obrót_k¹t_zablokowany_do );

      // Wartoœæ k¹ta obrotu nie mo¿e byæ równa wartoœci zablokowanego zakresu ( +/- Self.obrót_szybkoœæ).
      if odleg³oœæ_k¹t_zablokowany_od_l < odleg³oœæ_k¹t_zablokowany_do_l then
        //Self.obrót_k¹t_zadany := Self.obrót_k¹t_zablokowany_od + Self.obrót_szybkoœæ
        Self.obrót_k¹t_zadany := Self.obrót_k¹t_zablokowany_od + 0.01 // Gdy szybkoœæ obrotu jest du¿a, k¹t jest ustalany za daleko.
      else//if odleg³oœæ_k¹t_zablokowany_od_l < odleg³oœæ_k¹t_zablokowany_do_l then
        //Self.obrót_k¹t_zadany := Self.obrót_k¹t_zablokowany_do - Self.obrót_szybkoœæ;
        Self.obrót_k¹t_zadany := Self.obrót_k¹t_zablokowany_do - 0.01; // Gdy szybkoœæ obrotu jest du¿a, k¹t jest ustalany za daleko.


      // Wartoœæ k¹ta obrotu nie mo¿e przekroczyæ zakresu od -180 do 180.
      if Self.obrót_k¹t_zadany > 180 then
        Self.obrót_k¹t_zadany := Self.obrót_k¹t_zadany - 360
      else//if Self.obrót_k¹t_zadany > 180 then
        if Self.obrót_k¹t_zadany < -180 then
          Self.obrót_k¹t_zadany := Self.obrót_k¹t_zadany + 360;

    end;
  //---//if    ( Self.obrót_k¹t_zablokowany_od <> Self.obrót_k¹t_zablokowany_do ) (...)


  //if Self.Parent <> nil then
  //  begin
  //
  //    GLS.VectorGeometry.SetVector( zt_vector, 0, 1, 0 );
  //    //RotateVector(  Self.obrót_kierunek_zadany, zt_vector, DegToRad( Self.statek.xNx__K¹t_Obrotu_Statku() )  );
  //    //RotateVector(  Self.obrót_kierunek_zadany, zt_vector, DegToRad( Self.statek.TurnAngle )  );
  //    //RotateVectorAroundY( Self.obrót_kierunek_zadany, Self.statek.xNx__K¹t_Obrotu_Statku() );
  //
  //  end;
  ////---//if Self.Parent <> nil then


  Self.Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj( celownik_linia_widocznoœæ_f );

end;//---//Funkcja Obrót_Zadany_Zmieñ().

//Funkcja Obrót_Kierunek_Zmieñ().
procedure TTorpedy_Wyrzutnia.Obrót_Kierunek_Zmieñ( const delta_czasu_f : double; const gra_wspó³czynnik_trudnoœci_f : integer; const broñ_nie_unosi_luf_f : boolean = false );

  //Funkcja Obrót_Kierunek_Ustal() w Obrót_Kierunek_Zmieñ().
  function Obrót_Kierunek_Ustal() : real;

    //Funkcja Znak_SprawdŸ() w Obrót_Kierunek_Ustal() w Obrót_Kierunek_Zmieñ().
    function Znak_SprawdŸ( const liczba_f : real ) : SmallInt;
    begin

      //
      // Funkcja sprawdza znak liczby.
      //
      // Zwraca
      //  1 dla liczb dodatnich i zera oraz
      //  -1 dla liczb ujemnych.
      //

      if liczba_f >= 0 then
        Result := 1
      else//if liczba_f >= 0 then
        Result := -1;

    end;//---//Funkcja Znak_SprawdŸ() w Obrót_Kierunek_Ustal() w Obrót_Kierunek_Zmieñ().

  var
    odleg³oœæ_przez_0_l,
    odleg³oœæ_przez_180_l,
    do_1,
    do_2,
    od_1,
    od_2,
    ztr_l
      : real;
  begin//Funkcja Obrót_Kierunek_Ustal() w Obrót_Kierunek_Zmieñ().

    //
    // Funkcja ustala, w któr¹ stronê obracaæ aby najszybciej osi¹gn¹æ zadany k¹t obrotu
    // uwzglêdnia zablokowany obszar obrotu.
    //
    // Tutaj jest mniej kodu ale chyba trudniej go zrozumieæ.
    //
    // Zwraca
    //  1 obrotu w lewo
    //  -1 obrotu w prawo.
    //

    Result := 1;


    if Znak_SprawdŸ( Self.TurnAngle ) = Znak_SprawdŸ( Self.obrót_k¹t_zadany ) then
      begin

        // Znaki s¹ takie same.

        if Self.obrót_k¹t_zadany < Self.TurnAngle then
          Result := -1;

      end
    else//if Znak_SprawdŸ( Self.TurnAngle ) = Znak_SprawdŸ( Self.obrót_k¹t_zadany ) then
      begin

        // Znaki s¹ ró¿ne.

        odleg³oœæ_przez_0_l := Abs( Self.obrót_k¹t_zadany ) + Abs( Self.TurnAngle );
        odleg³oœæ_przez_180_l := 180 - Abs( Self.obrót_k¹t_zadany ) + 180 - Abs( Self.TurnAngle );


        // Analogiczny warunek.
        if odleg³oœæ_przez_0_l <= odleg³oœæ_przez_180_l then
          Result := -1;
        
        // Korygowanie dla przeciwnej strony statku.
        if Self.obrót_k¹t_zadany >= 0 then
          Result := -Result;


        //// Analogiczny, skrócony warunek. // To skrócenie jest b³êdne.
        //if    ( odleg³oœæ_przez_0_l <= odleg³oœæ_przez_180_l )
        //  and ( Self.obrót_k¹t_zadany < 0 ) then
        //  Result := -1;

      end;
    //---//if Znak_SprawdŸ( Self.TurnAngle ) = Znak_SprawdŸ( Self.obrót_k¹t_zadany ) then


    // Je¿eli ustalony kierunek obrotu przechodzi przez zablokowany zakres k¹ta obrotu zmieni kierunek obrotu.
    if Self.obrót_k¹t_zablokowany_od = Self.obrót_k¹t_zablokowany_do then
      Exit;


    {$region 'Ustala zakres k¹tów przez który odbywa siê obrót.'}
    // od_1 i do_1 okreœlaj¹ zakres k¹tów z tym samym znakiem.
    // od_2 i do_2 okreœlaj¹ zakres k¹tów z przeciwnym znakiem wzglêdem od_1 i do_1,
    //   s¹ dokoñczeniem ruchu od 0 do zakres ruchu lub zakres ruchu do 180,
    //   gdy obie wartoœci s¹ równe 0 zakres nie jest aktywny.

    if    ( Self.TurnAngle >= 0 )
      and ( Result = 1 ) then
      begin

        od_1 := Self.TurnAngle;

        if Self.obrót_k¹t_zadany >= 0 then
          begin

            do_1 := Self.obrót_k¹t_zadany;

            do_2 := 0;
            od_2 := 0;

          end
        else//if Self.obrót_k¹t_zadany >= 0 then
          begin

            do_1 := 180;

            do_2 := Self.obrót_k¹t_zadany;
            od_2 := -180;

          end;
        //---//if Self.obrót_k¹t_zadany >= 0 then

      end
    else//if    ( Self.TurnAngle >= 0 ) (...)
    if    ( Self.TurnAngle >= 0 )
      and ( Result = -1 ) then
      begin

        od_1 := Self.TurnAngle;

        if Self.obrót_k¹t_zadany >= 0 then
          begin

            do_1 := Self.obrót_k¹t_zadany;

            do_2 := 0;
            od_2 := 0;

          end
        else//if Self.obrót_k¹t_zadany >= 0 then
          begin

            do_1 := 0;

            do_2 := Self.obrót_k¹t_zadany;
            od_2 := 0;

          end;
        //---//if Self.obrót_k¹t_zadany >= 0 then

      end
    else//if    ( Self.TurnAngle >= 0 ) (...)
    if    ( Self.TurnAngle < 0 )
      and ( Result = 1 ) then
      begin

        od_1 := Self.TurnAngle;

        if Self.obrót_k¹t_zadany < 0 then
          begin

            do_1 := Self.obrót_k¹t_zadany;

            do_2 := 0;
            od_2 := 0;

          end
        else//if Self.obrót_k¹t_zadany < 0 then
          begin

            do_1 := 0;

            do_2 := Self.obrót_k¹t_zadany;
            od_2 := 0;

          end;
        //---//if Self.obrót_k¹t_zadany < 0 then

      end
    else//if    ( Self.TurnAngle < 0 ) (...)
    if    ( Self.TurnAngle < 0 )
      and ( Result = -1 ) then
      begin

        od_1 := Self.TurnAngle;

        if Self.obrót_k¹t_zadany < 0 then
          begin

            do_1 := Self.obrót_k¹t_zadany;

            do_2 := 0;
            od_2 := 0;

          end
        else//if Self.obrót_k¹t_zadany < 0 then
          begin

            do_1 := -180;

            do_2 := Self.obrót_k¹t_zadany;
            od_2 := 180;

          end;
        //---//if Self.obrót_k¹t_zadany < 0 then

      end;
    //---//if    ( Self.TurnAngle < 0 ) (...)


    // Sprawdza kolejnoœæ wartoœci brzegowych odcinków aby by³a rosn¹ca.
    if od_1 > do_1 then
      begin

        ztr_l := od_1;
        od_1 := do_1;
        do_1 := ztr_l;

      end;
    //---//if od_1 > do_1 then

    if od_2 > do_2 then
      begin

        ztr_l := od_2;
        od_2 := do_2;
        do_2 := ztr_l;

      end;
    //---//if od_2 > do_2 then
    {$endregion 'Ustala zakres k¹tów przez który odbywa siê obrót.'}


    // Je¿eli obrót odbywa siê przez zablokowany zakres k¹tów odwraca kierunek obrotu.
    if   (
               ( Self.obrót_k¹t_zablokowany_do >= od_1 )
           and ( Self.obrót_k¹t_zablokowany_do <= do_1 )
         )
      or (
               ( Self.obrót_k¹t_zablokowany_od >= od_1 )
           and ( Self.obrót_k¹t_zablokowany_od <= do_1 )
         )
      or (
               ( do_2 <> od_2 )
           and (
                    (
                          ( Self.obrót_k¹t_zablokowany_do >= od_2 )
                      and ( Self.obrót_k¹t_zablokowany_do <= do_2 )
                    )
                 or (
                          ( Self.obrót_k¹t_zablokowany_od >= od_2 )
                      and ( Self.obrót_k¹t_zablokowany_od <= do_2 )
                    )
               )
         )
    then
      begin

        Result := -Result;

      end;
    //---//if   ( (...)

  end;//---//Funkcja Obrót_Kierunek_Ustal() w Obrót_Kierunek_Zmieñ().

  //Funkcja xNx__Obrót_Kierunek_Ustal_2() w Obrót_Kierunek_Zmieñ().
  function xNx__Obrót_Kierunek_Ustal_2() : real;

    //Funkcja Znak_SprawdŸ() w xNx__Obrót_Kierunek_Ustal_2() w Obrót_Kierunek_Zmieñ().
    function Znak_SprawdŸ( const liczba_f : real ) : SmallInt;
    begin

      //
      // Funkcja sprawdza znak liczby.
      //
      // Zwraca
      //  1 dla liczb dodatnich i zera oraz
      //  -1 dla liczb ujemnych.
      //

      if liczba_f >= 0 then
        Result := 1
      else//if liczba_f >= 0 then
        Result := -1;

    end;//---//Funkcja Znak_SprawdŸ() w xNx__Obrót_Kierunek_Ustal_2() w Obrót_Kierunek_Zmieñ().

    //Funkcja Posortuj_Wartoœci() w xNx__Obrót_Kierunek_Ustal_2() w Obrót_Kierunek_Zmieñ().
    procedure Posortuj_Wartoœci( var liczba_od_f, liczba_do_f : real );
    var
      ztr_l
        : real;
    begin

      //
      // Funkcja ustawia podane liczby w kolejnoœci rosn¹cej (liczba_od_f <= liczba_do_f).
      //
      // Parametry:
      //   liczba_od_f
      //   liczba_do_f
      //

      if liczba_od_f > liczba_do_f then
        begin

          ztr_l := liczba_od_f;
          liczba_od_f := liczba_do_f;
          liczba_do_f := ztr_l;

        end;
      //---//if liczba_od_f > liczba_do_f then

    end;//---//Funkcja Posortuj_Wartoœci() w xNx__Obrót_Kierunek_Ustal_2() w Obrót_Kierunek_Zmieñ().

  var
    odleg³oœæ_przez_0_l,
    odleg³oœæ_przez_180_l,
    do_1,
    do_2,
    do_3,
    od_1,
    od_2,
    od_3
      : real;
    czy_obrót_przez_0_l, //???
    czy_obrót_przez_zablokowany_zakres_l //???
      : boolean;
  begin//Funkcja xNx__Obrót_Kierunek_Ustal_2() w Obrót_Kierunek_Zmieñ().

    //
    // Funkcja ustala, w któr¹ stronê obracaæ aby najszybciej osi¹gn¹æ zadany k¹t obrotu,
    // uwzglêdnia zablokowany obszar obrotu.
    //
    // Tutaj jest wiêcej kodu ale chyba ³atwiej go zrozumieæ.
    //
    // Zwraca
    //  1 obrotu w lewo
    //  -1 obrotu w prawo.
    //

    Exit; // Nieu¿ywane.

    {$region 'Okreœla cechy wariantów obrotów.'}
    if Znak_SprawdŸ( Self.TurnAngle ) = Znak_SprawdŸ( Self.obrót_k¹t_zadany ) then
      begin

        // Znaki s¹ takie same.

        if Abs( Self.TurnAngle ) >= Abs( Self.obrót_k¹t_zadany ) then
          begin

            // K¹t zadany obrotu jest miêdzy k¹tem aktualnym a 0.

            odleg³oœæ_przez_0_l := Abs( Self.TurnAngle ) - Abs( Self.obrót_k¹t_zadany );
            odleg³oœæ_przez_180_l := 360 - odleg³oœæ_przez_0_l;


            if odleg³oœæ_przez_0_l <= odleg³oœæ_przez_180_l then
              begin

                // Zakresy przez 0.

                od_1 := Self.TurnAngle;
                do_1 := Self.obrót_k¹t_zadany;

                do_2 := 0;
                od_2 := 0;

                od_3 := 0;
                do_3 := 0;

              end
            else//if odleg³oœæ_przez_0_l <= odleg³oœæ_przez_180_l then
              begin

                // Zakresy przez 180.

                od_1 := 180;

                if Self.TurnAngle < 0 then
                  od_1 := -od_1;

                do_1 := Self.TurnAngle;


                od_2 := 0;
                do_2 := 180;

                if Self.TurnAngle >= 0 then
                  do_2 := -do_2;


                od_3 := Self.obrót_k¹t_zadany;
                do_3 := 0;

              end;
            //---//if odleg³oœæ_przez_0_l <= odleg³oœæ_przez_180_l then

          end
        else//if Abs( Self.TurnAngle ) >= Abs( Self.obrót_k¹t_zadany ) then
          begin

            // K¹t zadany obrotu jest miêdzy k¹tem aktualnym a 180 (te¿ -180).

            odleg³oœæ_przez_180_l := Abs( Self.obrót_k¹t_zadany ) - Abs( Self.TurnAngle );
            odleg³oœæ_przez_0_l := 360 - odleg³oœæ_przez_180_l;


            if odleg³oœæ_przez_0_l <= odleg³oœæ_przez_180_l then
              begin

                // Zakresy przez 0.

                od_1 := Self.TurnAngle;
                do_1 := 0;


                od_2 := 0;
                do_2 := 180;

                if Self.obrót_k¹t_zadany >= 0 then
                  do_2 := -do_2;


                od_3 := 180;

                if Self.obrót_k¹t_zadany < 0 then
                  od_3 := -od_3;

                do_3 := Self.obrót_k¹t_zadany;

              end
            else//if odleg³oœæ_przez_0_l <= odleg³oœæ_przez_180_l then
              begin

                // Zakresy przez 180.

                od_1 := Self.obrót_k¹t_zadany;
                do_1 := Self.TurnAngle;

                do_2 := 0;
                od_2 := 0;

                od_3 := 0;
                do_3 := 0;

              end;
            //---//if odleg³oœæ_przez_0_l <= odleg³oœæ_przez_180_l then

          end;
        //---//if Abs( Self.TurnAngle ) >= Abs( Self.obrót_k¹t_zadany ) then

      end
    else//if Znak_SprawdŸ( Self.TurnAngle ) = Znak_SprawdŸ( Self.obrót_k¹t_zadany ) then
      begin

        // Znaki s¹ ró¿ne.

        if Abs( Self.TurnAngle ) >= Abs( Self.obrót_k¹t_zadany ) then
          begin

            // 0 jest miêdzy k¹tem aktualnym a zadanym k¹tem obrotu.

            odleg³oœæ_przez_0_l := Abs( Self.TurnAngle ) + Abs( Self.obrót_k¹t_zadany );
            odleg³oœæ_przez_180_l := 360 - odleg³oœæ_przez_0_l;


            if odleg³oœæ_przez_0_l <= odleg³oœæ_przez_180_l then
              begin

                // Zakresy przez 0.

                od_1 := Self.TurnAngle;
                do_1 := 0;

                do_2 := 0;
                od_2 := Self.obrót_k¹t_zadany;

                od_3 := 0;
                do_3 := 0;

              end
            else//if odleg³oœæ_przez_0_l <= odleg³oœæ_przez_180_l then
              begin

                // Zakresy przez 180.

                od_1 := 180;

                if Self.TurnAngle < 0 then
                  od_1 := -od_1;

                do_1 := Self.TurnAngle;


                od_2 := 180;

                if Self.obrót_k¹t_zadany < 0 then
                  od_2 := -od_2;

                do_2 := Self.obrót_k¹t_zadany;


                od_3 := 0;
                do_3 := 0;

              end;
            //---//if odleg³oœæ_przez_0_l <= odleg³oœæ_przez_180_l then

          end
        else//if Abs( Self.TurnAngle ) >= Abs( Self.obrót_k¹t_zadany ) then
          begin

            // 180 (te¿ -180) jest miêdzy k¹tem aktualnym a zadanym k¹tem obrotu.

            odleg³oœæ_przez_0_l := Abs( Self.obrót_k¹t_zadany ) + Abs( Self.TurnAngle );
            odleg³oœæ_przez_180_l := 360 - odleg³oœæ_przez_0_l;


            if odleg³oœæ_przez_0_l <= odleg³oœæ_przez_180_l then
              begin

                // Zakresy przez 0.

                od_1 := Self.TurnAngle;
                do_1 := 0;

                do_2 := 0;
                od_2 := Self.obrót_k¹t_zadany;

                od_3 := 0;
                do_3 := 0;

              end
            else//if odleg³oœæ_przez_0_l <= odleg³oœæ_przez_180_l then
              begin

                // Zakresy przez 180.

                od_1 := 180;

                if Self.TurnAngle < 0 then
                  od_1 := -od_1;

                do_1 := Self.TurnAngle;


                od_2 := 180;

                if Self.obrót_k¹t_zadany < 0 then
                  od_2 := -od_2;

                do_2 := Self.obrót_k¹t_zadany;


                od_3 := 0;
                do_3 := 0;

              end;
            //---//if odleg³oœæ_przez_0_l <= odleg³oœæ_przez_180_l then

          end;
        //---//if Abs( Self.TurnAngle ) >= Abs( Self.obrót_k¹t_zadany ) then

      end;
    //---//if Znak_SprawdŸ( Self.TurnAngle ) = Znak_SprawdŸ( Self.obrót_k¹t_zadany ) then


    Posortuj_Wartoœci( od_1, do_1 );
    Posortuj_Wartoœci( od_2, do_2 );
    Posortuj_Wartoœci( od_3, do_3 );
    {$endregion 'Okreœla cechy wariantów obrotów.'}


    if odleg³oœæ_przez_0_l <= odleg³oœæ_przez_180_l then
      czy_obrót_przez_0_l := true
    else//if odleg³oœæ_przez_0_l <= odleg³oœæ_przez_180_l then
      czy_obrót_przez_0_l := false;


    // Je¿eli obrót odbywa siê przez zablokowany zakres k¹tów odwraca kierunek obrotu.
    if    ( Self.obrót_k¹t_zablokowany_od <> Self.obrót_k¹t_zablokowany_do )
      and (
               (
                     ( Self.obrót_k¹t_zablokowany_do >= od_1 )
                 and ( Self.obrót_k¹t_zablokowany_do <= do_1 )
               )
            or (
                     ( Self.obrót_k¹t_zablokowany_od >= od_1 )
                 and ( Self.obrót_k¹t_zablokowany_od <= do_1 )
               )
            or (
                     ( do_2 <> od_2 )
                 and (
                          (
                                ( Self.obrót_k¹t_zablokowany_do >= od_2 )
                            and ( Self.obrót_k¹t_zablokowany_do <= do_2 )
                          )
                       or (
                                ( Self.obrót_k¹t_zablokowany_od >= od_2 )
                            and ( Self.obrót_k¹t_zablokowany_od <= do_2 )
                          )
                     )
               )
            or (
                     ( do_3 <> od_3 )
                 and (
                          (
                                ( Self.obrót_k¹t_zablokowany_do >= od_3 )
                            and ( Self.obrót_k¹t_zablokowany_do <= do_3 )
                          )
                       or (
                                ( Self.obrót_k¹t_zablokowany_od >= od_3 )
                            and ( Self.obrót_k¹t_zablokowany_od <= do_3 )
                          )
                     )
               )
          )
    then
      czy_obrót_przez_zablokowany_zakres_l := true
    else//if    ( Self.obrót_k¹t_zablokowany_od <> Self.obrót_k¹t_zablokowany_do ) (...)
      czy_obrót_przez_zablokowany_zakres_l  := false;


    if Self.TurnAngle >= 0 then
      begin

        //if odleg³oœæ_przez_0_l <= odleg³oœæ_przez_180_l then
        if czy_obrót_przez_0_l then
          Result := -1
        else//if czy_obrót_przez_0_l then
          Result := 1;

      end
    else//if Self.TurnAngle >= 0 then
      begin

        //if odleg³oœæ_przez_0_l <= odleg³oœæ_przez_180_l then
        if czy_obrót_przez_0_l then
          Result := 1
        else//if czy_obrót_przez_0_l then
          Result := -1;

      end;
    //---//if Self.TurnAngle >= 0 then

    if czy_obrót_przez_zablokowany_zakres_l then
      Result := -Result;


    //if czy_obrót_przez_0_l then
    //  Statki_Form.Caption := 'P_0'
    //else//if czy_obrót_przez_0_l then
    //  Statki_Form.Caption := 'P_180';


    //if czy_obrót_przez_zablokowany_zakres_l then
    //  Statki_Form.Caption := Statki_Form.Caption + ' O ';


    //Statki_Form.Caption := Statki_Form.Caption +
    //  //FloatToStr( Result ) +
    //  ' I ' + FloatToStr(  Round( od_1 )  ) + ' ' + FloatToStr(  Round( do_1 )  ) +
    //  ' II ' + FloatToStr(  Round( od_2 )  ) + ' ' + FloatToStr(  Round( do_2 )  ) +
    //  ' III ' + FloatToStr(  Round( od_3 )  ) + ' ' + FloatToStr(  Round( do_3 )  ) +
    //  //' | ' + FloatToStr(  Round( odleg³oœæ_1_l )  ) + ' ' + FloatToStr(  Round( odleg³oœæ_2_l )  ) +
    //  ' | ' + FloatToStr(  Round( odleg³oœæ_przez_0_l )  ) + ' ' + FloatToStr(  Round( odleg³oœæ_przez_180_l )  ); //???

  end;//---//Funkcja xNx__Obrót_Kierunek_Ustal_2() w Obrót_Kierunek_Zmieñ().

var
  ztr,
  celowanie_precyzja_obrót_l,
  //k¹t_1,
  //k¹t_2,
  k¹t_do_k¹t_obrócenia_l,
  k¹t_do_k¹t_obrócenia_bezwzglêdny_l,
  k¹t_do_k¹t_obrócenia_odleg³oœæ_procent_l, // Okreœla jaki procent precyzji celowania stanowi aktualna ró¿nica k¹ta zadanego wzglêdem k¹ta wycelowania (wartoœæ ograniczana do zakresu 0 - 100).
  obrót_kierunek_l,
  obrót_szybkoœæ_l
    : real;
  //zt_vector : GLS.VectorTypes.TVector4d;
begin//Funkcja Obrót_Kierunek_Zmieñ().

  //
  // Funkcja modyfikuje obrót.
  //
  //  Zmiana obrótu odbywa siê zawsze pe³n¹ moc¹ i liniowo.
  //

  if not Self.czy_broñ_obracana then
    Exit;

  if Self.uszkodzone_czas_sekundy_i <> 0 then
    Exit;

  //if MilliSecondsBetween( Now(), Self.strza³_czas ) <= Self.strza³_od_blokada_milisekundy then
  if Czas_Miêdzy_W_Milisekundach( Self.strza³_czas__broñ_sekundy_i ) <= Self.strza³_od_blokada_milisekundy then
    begin

      // Sygnalizuje, ¿e dzia³o jest w trakcie strza³u i nie obraca siê.

      //if Self.czy_indeks_do_strza³u then
      //  Self.celownik_linia.LineColor.Color := GLS.Color.clrLightGray // Jasny szary.
      //else//if Self.czy_indeks_do_strza³u then
      //  Self.celownik_linia.LineColor.Color := GLS.Color.clrBlack; // Ciemny czarny.
      //
      //Self.celownik_linia_bez_falowania.LineColor.Color := Self.celownik_linia.LineColor.Color;
      Exit;

    end;
  //---//if Czas_Miêdzy_W_Milisekundach( Self.strza³_czas__broñ_sekundy_i ) <= Self.strza³_od_blokada_milisekundy then

  {$region 'Wersja 1.'}
  //GLS.VectorGeometry.SetVector( zt_vector, 0, 0, 0 ); // Najlepiej sprawdzaæ k¹t w punkcie zero.
  //
  //Self.k¹t_test_gl_dummy_cube.Up.SetVector( 0, 1, 0 ); // Je¿eli k¹t testowy jest u¿ywany do wyliczania podniesienia mo¿e go obróciæ.
  //
  //// Ustawia k¹t bry³y testowej na taki jak ma aktualnie dzia³o.
  //Self.k¹t_test_gl_dummy_cube.AbsoluteDirection := Self.AbsoluteDirection;
  //
  //// Sprawdza k¹t miêdzy kierunkiem zadanym a kierunkiem dzia³a.
  //k¹t_1 := 180 - System.Math.RadToDeg(  GLS.VectorGeometry.AngleBetweenVectors( Self.k¹t_test_gl_dummy_cube.AbsoluteDirection, Self.obrót_kierunek_zadany, zt_vector )  );
  //
  //
  //// Obraca bry³ê testow¹ i ponownie wylicza k¹t.
  ////Self.k¹t_test_gl_dummy_cube.Turn( Self.obrót_szybkoœæ );
  //Self.k¹t_test_gl_dummy_cube.TurnAngle := Self.k¹t_test_gl_dummy_cube.TurnAngle - Self.obrót_szybkoœæ;
  //k¹t_2 := 180 - System.Math.RadToDeg(  GLS.VectorGeometry.AngleBetweenVectors( Self.k¹t_test_gl_dummy_cube.AbsoluteDirection, Self.obrót_kierunek_zadany, zt_vector )  );
  //
  //// Je¿eli po obrocie k¹t siê zmniejsza obraca dzia³o w tym samym kierunki, w przeciwnym wypadku obraca w przeciwn¹ stronê.

  //if k¹t_1 < Self.obrót_szybkoœæ then // Coœ jest nie tak z ustawianiem kierunków ale obrót o same k¹ty dzia³a.
  //  Self.Direction.AsVector := Self.obrót_kierunek_zadany
  //else//if k¹t_1 < Self.obrót_szybkoœæ then
  {$endregion 'Wersja 1.'}

  if Self.statek__tw <> nil then
    celowanie_precyzja_obrót_l := Self.statek__tw.celowanie_precyzja__obrót
  else//if Self.statek__tw <> nil then
    celowanie_precyzja_obrót_l := 0;


  k¹t_do_k¹t_obrócenia_l := Abs( Self.TurnAngle - Self.obrót_k¹t_zadany );
  k¹t_do_k¹t_obrócenia_bezwzglêdny_l := Abs( Self.TurnAngle - Self.obrót_k¹t_zadany_bezwzglêdny );


  if celowanie_precyzja_obrót_l <> 0 then
    k¹t_do_k¹t_obrócenia_odleg³oœæ_procent_l := k¹t_do_k¹t_obrócenia_l * 100 / celowanie_precyzja_obrót_l
  else//if celowanie_precyzja_obrót_l <> 0 then
    k¹t_do_k¹t_obrócenia_odleg³oœæ_procent_l := 100;


  if k¹t_do_k¹t_obrócenia_odleg³oœæ_procent_l > 100 then
    k¹t_do_k¹t_obrócenia_odleg³oœæ_procent_l := 100
  else//if k¹t_do_k¹t_obrócenia_odleg³oœæ_procent_l > 100 then
  if k¹t_do_k¹t_obrócenia_odleg³oœæ_procent_l < 0 then
    k¹t_do_k¹t_obrócenia_odleg³oœæ_procent_l := 0;

  obrót_szybkoœæ_l := Self.obrót_szybkoœæ * k¹t_do_k¹t_obrócenia_odleg³oœæ_procent_l * 0.01 * delta_czasu_f; // Im bli¿ej zadanego k¹ta wycelowana tym wolniej obraca bronie ale z wiêksz¹ precyzj¹.

  // Powy¿ej pewnej prêdkoœci gry nie mo¿e ustawiæ w³aœciwego k¹ta (za szybko zmienia k¹t i broñ dr¿y na boki).
  ztr := obrót_szybkoœæ_l;

  //if ztr > 20 then // Po zmianie na Gra_GLCadencer.TimeMultiplier powinno dzia³aæ bez tego zabezpieczenia. //???
  //  ztr := 20;

  if k¹t_do_k¹t_obrócenia_l < ztr then
    begin

      if not Obrót_K¹t_Zablokowany_SprawdŸ( obrót_k¹t_zadany ) then // Dodatkowe zabezpieczenie.
        Self.TurnAngle := obrót_k¹t_zadany;

    end
  else//if k¹t_do_k¹t_obrócenia_l < ztr then
    begin

      obrót_kierunek_l := Obrót_Kierunek_Ustal();

      ztr := ztr * obrót_kierunek_l;

      if not Obrót_K¹t_Zablokowany_SprawdŸ( Self.TurnAngle + ztr ) then // Dodatkowe zabezpieczenie. //// Je¿eli obrót wykonuje siê po Self.obrót_k¹t_zadany_bezwzglêdny.
        Self.TurnAngle := Self.TurnAngle + ztr;


      {$region 'Wersja 1.'}
      //if k¹t_2 < k¹t_1 then
      // begin
      //
      //    //Self.Turn( Self.obrót_szybkoœæ ); // Prawo.
      //
      //    if not Obrót_K¹t_Zablokowany_SprawdŸ( Self.TurnAngle - Self.obrót_szybkoœæ ) then
      //      Self.TurnAngle := Self.TurnAngle - Self.obrót_szybkoœæ;
      //
      //  end
      //else//if k¹t_2 < k¹t_1 then
      //  begin
      //
      //    //Self.Turn( -Self.obrót_szybkoœæ ); // Lewo.
      //
      //    if not Obrót_K¹t_Zablokowany_SprawdŸ( Self.TurnAngle + Self.obrót_szybkoœæ ) then
      //      Self.TurnAngle := Self.TurnAngle + Self.obrót_szybkoœæ;
      //
      //  end;
      ////---//if k¹t_2 < k¹t_1 then
      {$endregion 'Wersja 1.'}

    end;
  //---//if k¹t_do_k¹t_obrócenia_l < ztr then


  if k¹t_do_k¹t_obrócenia_bezwzglêdny_l < obrót_szybkoœæ_l + celowanie_precyzja_obrót_l then // Je¿eli wycelowano w obrêbie zablokowanego obszaru obrotu oznacza jako nie wycelowane.
    Self.czy_wycelowany_obrót := true
  else//if k¹t_do_k¹t_obrócenia_bezwzglêdny_l < obrót_szybkoœæ_l then
    Self.czy_wycelowany_obrót := false;


  if    ( Self.czy_wycelowany_obrót )
    and ( Self.Obrót_K¹t_Zablokowany_Strza³u_SprawdŸ() ) then // W martwym k¹cie nie oznacza jako wycelowane.
      begin

        if    ( Self.statek__tw <> nil )
          and (
                   ( Self.statek__tw.si_decyduje )
                or ( Self.statek__tw.si__statek_gracza__p³ywa )
              )
          and (  Czas_Miêdzy_W_Sekundach( Self.si__cel__korekta_losowa_namiaru_procent__wyszukanie_ostatnie_sekundy_i ) >= si__cel__wyszukanie_sekundy_c * 0.1  ) then
          begin

            Self.Si__Cel__Korekta_Losowa_Namiaru_Procent_Ustaw( gra_wspó³czynnik_trudnoœci_f );

            Self.si__cel__korekta_losowa_namiaru_procent__wyszukanie_ostatnie_sekundy_i := Czas_Teraz_W_Sekundach();

          end;
        //---//if    ( Self.statek__tw <> nil ) (...)

        Self.czy_wycelowany_obrót := false;

      end;
    //---//if    ( Self.czy_wycelowany_obrót ) (...)



  //if Self.czy_wycelowany_obrót then
  //  begin
  //
  //    if Self.czy_indeks_do_strza³u then
  //      Self.celownik_linia.LineColor.Color := GLS.Color.clrGreenYellow // Jasny zielony.
  //    else//if Self.czy_indeks_do_strza³u then
  //      Self.celownik_linia.LineColor.Color := GLS.Color.clrGreen; // Ciemny zielony.
  //
  //
  //    if celowanie_precyzja_obrót_l <> 0 then
  //      begin
  //
  //        // Okreœla jaki procent precyzji celowania stanowi aktualna ró¿nica k¹ta zadanego wzglêdem k¹ta wycelowania (wartoœæ ograniczana do zakresu 0 - 100).
  //        ztr := k¹t_do_k¹t_obrócenia_bezwzglêdny_l * 100 / celowanie_precyzja_obrót_l;
  //
  //        if ztr > 100 then
  //          ztr := 100
  //        else//if ztr > 100 then
  //        if ztr < 0 then
  //          ztr := 0;
  //        //---// Okreœla jaki procent precyzji celowania stanowi aktualna ró¿nica k¹ta zadanego wzglêdem k¹ta wycelowania (wartoœæ ograniczana do zakresu 0 - 100).
  //
  //      end
  //    else//if celowanie_precyzja_obrót_l <> 0 then
  //      ztr := 0;
  //
  //    // Gruboœæ linii jest odwrotna do procenta (im mniejszy procent tym linia grubsza).
  //    if broñ_nie_unosi_luf_f then
  //      ztr := ( celownik_linia_szerokoœæ_maksymalna__obrót_c + celownik_linia_szerokoœæ_maksymalna__podniesienie_c ) * ( 100 - ztr ) * 0.01
  //    else//if broñ_nie_unosi_luf_f then
  //      ztr := celownik_linia_szerokoœæ_maksymalna__obrót_c * ( 100 - ztr ) * 0.01;
  //
  //
  //    Self.celownik_linia_szerokoœæ_obrót := ztr;
  //
  //  end
  //else//if Self.czy_wycelowany_obrót then
  //  begin
  //
  //    if Self.czy_indeks_do_strza³u then
  //      Self.celownik_linia.LineColor.Color := GLS.Color.clrRed // Jasny czerwony.
  //    else//if Self.czy_indeks_do_strza³u then
  //      Self.celownik_linia.LineColor.Color := GLS.Color.clrDarkPurple; // Ciemny czerwony.
  //
  //    //Self.celownik_linia_szerokoœæ_obrót := ztr;
  //
  //  end;
  ////---//if Self.czy_wycelowany_obrót then
  //
  //
  //Self.celownik_linia.LineWidth := Self.celownik_linia_szerokoœæ_obrót;
  //
  //Self.celownik_linia_bez_falowania.LineColor.Color := Self.celownik_linia.LineColor.Color;
  //Self.celownik_linia_bez_falowania.LineWidth := Self.celownik_linia.LineWidth;

end;//---//Funkcja Obrót_Kierunek_Zmieñ().

//Funkcja Strza³().
function TTorpedy_Wyrzutnia.Strza³( const czy_wszystkie_lufy_f, obracaj_dzia³a_f, podnoœ_lufy_f : boolean; var wystrzeli³y_wszystkie_f : boolean; const cel_wspó³rzêdne_f : GLS.VectorGeometry.TAffineVector  ) : boolean;

  //Funkcja Strza³y_Iloœæ_SprawdŸ() w Strza³().
  procedure Strza³y_Iloœæ_SprawdŸ();
  begin

    //
    // Funkcja gdy iloœæ oddanych strza³ów równa siê iloœci luf zeruje licznik iloœci strza³ów i oznacza, ¿e wszystkie lufy mog³y strzelaæ.
    //

    inc( Self.strza³y_iloœæ );

    if Self.strza³y_iloœæ >= Length( Self.lufy_t ) then
      begin

        wystrzeli³y_wszystkie_f := true;
        Self.strza³y_iloœæ := 0;

      end;
    //---//if Self.strza³y_iloœæ >= Length( Self.lufy_t ) then

  end;//---//Funkcja Strza³y_Iloœæ_SprawdŸ() w Strza³().

var
  i,
  próby_strza³u_iloœæ
    : integer;
begin//Funkcja Strza³().

  //
  // Funkcja strzela wszystkimi lufami lub ustala kolejn¹ (nastêpn¹ po poprzednim strzale) gotow¹ lufê i strzela jedn¹ luf¹.
  //
  // Zwraca prawdê gdy wystrzeli.
  //
  // Parametry:
  //   czy_wszystkie_lufy_f:
  //     false - strza³ jedn¹ luf¹.
  //     true - strza³ wszystkimi lufami.
  //   obracaj_dzia³a_f
  //     false - je¿eli dzia³a s¹ zablokowane mo¿na strzeliæ mimo nie wycelowania.
  //     true - strzela tylko gdy dzia³o jest wycelowane.
  //  wystrzeli³y_wszystkie_f
  //     false.
  //     true - z dzia³a wystrzelono tyle razy ile jest luf (w strzelaniu pojedynczym oznacza ¿eby prze³¹czyæ strzelanie na inne dzia³o).
  //  cel_wspó³rzêdne_f - potrzebne przy tworzeniu amunicji.
  //

  Result := false;
  wystrzeli³y_wszystkie_f := false;

  //if    ( not Self.czy_wycelowany_obrót )
  //  and ( not obracaj_dzia³a_f ) then
  //  Exit;

  if obracaj_dzia³a_f then // Je¿eli dzia³a s¹ zablokowane mo¿na strzeliæ mimo nie wycelowania.
    //if not Self.czy_wycelowany_obrót then
    if    ( Self.czy_broñ_obracana )
      and ( not Self.czy_wycelowany_obrót ) then
      Exit;

  if Self.uszkodzone_czas_sekundy_i <> 0 then
    Exit;


  if Self.Obrót_K¹t_Zablokowany_Strza³u_SprawdŸ() then // Nie strzela w martwym k¹cie.
    Exit;


  if   ( czy_wszystkie_lufy_f )
    or ( Self.amunicja_rodzaj = Typy_Wspolne.ar_Je¿e_G³êbinowe ) then
    begin

      // Strza³ wszystkimi lufami.

      for i := 0 to Length( Self.lufy_t ) - 1 do
        if    ( Self.lufy_t[ i ] <> nil )
          and ( Self.lufy_t[ i ].strza³_gotowoœæ )
          //and ( Self.lufy_t[ i ].czy_wycelowane_podniesienie )
          and (
                   ( not obracaj_dzia³a_f )
                or ( not Self.czy_lufa_unoszona )
                or ( Self.lufy_t[ i ].czy_wycelowane_podniesienie )
              ) then
          if Self.lufy_t[ i ].Strza³( obracaj_dzia³a_f, podnoœ_lufy_f, Self.czy_lufa_unoszona, cel_wspó³rzêdne_f ) then
            begin

              //Self.strza³_czas := Now();
              Self.strza³_czas__broñ_sekundy_i := Czas_Teraz_W_Sekundach();

              Strza³y_Iloœæ_SprawdŸ();

              if not Result then
                Result := true;

            end;
          //---//if Self.lufy_t[ i ].Strza³( obracaj_dzia³a_f, podnoœ_lufy_f, cel_wspó³rzêdne_f ) then

      Self.strza³y_iloœæ := 0;

    end
  else//if   ( czy_wszystkie_lufy_f ) (...)
    begin

      // Strza³ jedn¹ luf¹.

      próby_strza³u_iloœæ := 1;

      i := Self.lufa_ostatni_strza³_indeks;

      inc( i );

      if i > Length( Self.lufy_t ) - 1 then
        i := 0;


      while próby_strza³u_iloœæ <= Length( Self.lufy_t ) do
        begin

          inc( próby_strza³u_iloœæ );


          if    ( Self.lufy_t[ i ] <> nil )
            and ( Self.lufy_t[ i ].strza³_gotowoœæ )
            //and ( Self.lufy_t[ i ].czy_wycelowane_podniesienie )
            and (
                     ( not obracaj_dzia³a_f )
                  or ( not Self.czy_lufa_unoszona )
                  or ( Self.lufy_t[ i ].czy_wycelowane_podniesienie )
                ) then
            begin

              if Self.lufy_t[ i ].Strza³( obracaj_dzia³a_f, podnoœ_lufy_f, Self.czy_lufa_unoszona, cel_wspó³rzêdne_f ) then
                begin

                  //Self.strza³_czas := Now();
                  Self.strza³_czas__broñ_sekundy_i := Czas_Teraz_W_Sekundach();
                  Self.lufa_ostatni_strza³_indeks := i;

                  Result := true;

                  Strza³y_Iloœæ_SprawdŸ();

                  // Oznacza, która lufa bêdzie strzelaæ pojedynczo jako kolejna.
                  //Self.lufy_t[ i ].czy_indeks_do_strza³u_lufa := false;
                  for próby_strza³u_iloœæ := 0 to Length( Self.lufy_t ) - 1 do
                    if    ( Self.lufy_t[ próby_strza³u_iloœæ ] <> nil )
                      and ( Self.lufy_t[ próby_strza³u_iloœæ ].czy_indeks_do_strza³u_lufa ) then
                      begin

                        // Mog³a strzeliæ inna lufa ni¿ wybrana (je¿eli ta nie by³a gotowa).

                        Self.lufy_t[ próby_strza³u_iloœæ ].czy_indeks_do_strza³u_lufa := false;
                        Break;

                      end;
                    //---//if    ( Self.lufy_t[ próby_strza³u_iloœæ ] <> nil ) (...)

                  inc( i );

                  if i > Length( Self.lufy_t ) - 1 then
                    i := 0;

                  Self.lufy_t[ i ].czy_indeks_do_strza³u_lufa := true;
                  //---// Oznacza, która lufa bêdzie strzelaæ pojedynczo jako kolejna.

                  Exit;

                end;
              //---//if Self.lufy_t[ i ].Strza³( obracaj_dzia³a_f, podnoœ_lufy_f, cel_wspó³rzêdne_f ) then

            end
          else//if    ( Self.lufy_t[ i ] <> nil ) (...)
            begin

              inc( i );

              if i > Length( Self.lufy_t ) - 1 then
                i := 0;

            end;
          //---//if    ( Self.lufy_t[ i ] <> nil ) (...)

        end;
      //---//while próby_strza³u_iloœæ <= Length( Self.lufy_t ) do

    end;
  //---//if   ( czy_wszystkie_lufy_f ) (...)

end;//---//Funkcja Strza³().

//Funkcja Obrót_K¹t_Zablokowany_Strza³u_SprawdŸ().
function TTorpedy_Wyrzutnia.Obrót_K¹t_Zablokowany_Strza³u_SprawdŸ() : boolean;
var
  i : integer;
begin

  //
  // Funkcja sprawdza czy aktualny obrót znajduje siê w zablokowanym k¹cie strza³u.
  //
  // Zwraca prawdê gdy aktualny obrót znajduje siê w zablokowanym k¹cie strza³u.
  //

  Result := false;

  if   (  Length( Self.obrót_k¹t_zablokowany_strza³_do ) <= 0  )
    or (  (  Length( Self.obrót_k¹t_zablokowany_strza³_do ) <> Length( Self.obrót_k¹t_zablokowany_strza³_od )  )  ) then
    Exit;


  for i := 0 to Length( Self.obrót_k¹t_zablokowany_strza³_do ) - 1 do
    if Obrót_K¹t_Zablokowany_Strza³u_SprawdŸ( Self.TurnAngle, i ) then
      begin

        Result := true;
        Exit;

      end;
    //---//if Obrót_K¹t_Zablokowany_Strza³u_SprawdŸ( Self.TurnAngle, i ) then

end;//---//Funkcja Obrót_K¹t_Zablokowany_Strza³u_SprawdŸ().

//Funkcja Obrót_K¹t_Zablokowany_Strza³u_SprawdŸ().
function TTorpedy_Wyrzutnia.Obrót_K¹t_Zablokowany_Strza³u_SprawdŸ( k¹t_f : real; const indeks_f : integer ) : boolean;
var
  i : integer;
begin

  //
  // Funkcja sprawdza czy aktualny obrót znajduje siê w zablokowanym k¹cie strza³u.
  //
  // Zwraca prawdê gdy aktualny obrót znajduje siê w zablokowanym k¹cie strza³u.
  //

  // K¹ty na oko³o statku.
  //
  //     0
  // 90  A -90
  // 180 / -180
  //

  // Mo¿na traktowaæ jak: czy aktualna wartoœæ (k¹t) nale¿y do przedzia³u (zablokowany zakres k¹ta strza³u).
  // 180 ___ -180
  // Wtedy 'k¹t od' musi byæ wiêkszy od 'k¹ta do'.

  // W przypadku przedzia³u (zablokowany zakres k¹ta strza³u) przechodz¹cego przez ty³ (rufê)
  // 0 ___ 180 | -0 ___ -180
  // mo¿na traktowaæ jak: czy aktualna wartoœæ (k¹t) jest mniejsza od 'wartoœci od' (zablokowany zakres k¹ta strza³u od)
  // lub czy aktualna wartoœæ (k¹t) jest wiêksza od 'wartoœci do' (zablokowany zakres k¹ta strza³u do).
  //
  // Aby zachowaæ regu³ê, ¿e 'wartoœæ od' (zablokowany zakres k¹ta strza³u od) jest pierwsza wzglêdem 'wartoœci do' (zablokowany zakres k¹ta strza³u do)
  // zgodnie z kierunkiem ruchu wskazówek zegara 'wartoœæ od' (zablokowany zakres k¹ta strza³u od) jest ujemna, a 'wartoœæ do' (zablokowany zakres k¹ta strza³u do) jest dodatnia
  // i zakres przedzia³u (zablokowany zakres k¹ta strza³u) przechodzi przez œrodek ty³u (rufy) [180 / -180].


  Result := false;

  if   (  Length( Self.obrót_k¹t_zablokowany_strza³_do ) <= 0  )
    or ( indeks_f < 0 )
    or (  indeks_f > Length( Self.obrót_k¹t_zablokowany_strza³_do ) - 1  )
    or (  (  Length( Self.obrót_k¹t_zablokowany_strza³_do ) <> Length( Self.obrót_k¹t_zablokowany_strza³_od )  )  ) then
    Exit;


  // Wartoœci powy¿ej 180 przechodz¹ na -180, a wartoœci poni¿ej -180 przechodz¹ na 180.
  if k¹t_f > 180 then
    k¹t_f := 180
  else//if k¹t_f > 180 then
    if k¹t_f < -180 then
      k¹t_f := -180;


  if Self.obrót_k¹t_zablokowany_strza³_od[ indeks_f ] >= Self.obrót_k¹t_zablokowany_strza³_do[ indeks_f ] then
    begin

      // Zablokowany zakres k¹ta strza³u nie przechodzi przez œrodek rufy.

      if    ( k¹t_f <= Self.obrót_k¹t_zablokowany_strza³_od[ indeks_f ] )
        and ( k¹t_f >= Self.obrót_k¹t_zablokowany_strza³_do[ indeks_f ] ) then
        Result := true;

    end
  else//if Self.obrót_k¹t_zablokowany_strza³_od[ indeks_f ] >= Self.obrót_k¹t_zablokowany_strza³_do[ indeks_f ] then
    begin

      // Zablokowany zakres k¹ta strza³u przechodzi przez œrodek rufy.

      if   ( k¹t_f <= Self.obrót_k¹t_zablokowany_strza³_od[ indeks_f ] )
        or ( k¹t_f >= Self.obrót_k¹t_zablokowany_strza³_do[ indeks_f ] ) then
        Result := true;

    end;
  //---//if Self.obrót_k¹t_zablokowany_strza³_od[ indeks_f ] >= Self.obrót_k¹t_zablokowany_strza³_do[ i ] then


  if Result then
    begin

      // Sprawdza czy w k¹cie zablokowanym ka¿da lufa jest uniesiona na wysokoœæ umo¿liwiaj¹c¹ strza³

      if   (  not ( Self is TDzia³o )  ) // Wyrzutnia torped nie unosi luf.
        or (  Length( Self.obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny ) <= 0  )
        //or ( indeks_f < 0 )
        or (  indeks_f > Length( Self.obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny ) - 1  )
        or (  (  Length( Self.obrót_k¹t_zablokowany_strza³_do ) <> Length( Self.obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny )  )  ) then
        Exit;


      for i := 0 to Length( Self.lufy_t ) - 1 do
        if Self.lufy_t[ i ].PitchAngle > -Self.obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny[ indeks_f ] then // W górê PitchAngle jest ujemny.
          Exit; // Je¿eli którakolwiek z luf jest zbyt nisko nie zezwala na strza³.


      Result := false;

    end;
  //---//if Result then

end;//---//Funkcja Obrót_K¹t_Zablokowany_Strza³u_SprawdŸ().

//Funkcja Celownik_Linia_Wygl¹d_Ustaw().
procedure TTorpedy_Wyrzutnia.Celownik_Linia_Wygl¹d_Ustaw();
var
  przynajmniej_jedna_lufa_pobra³a_amunicjê : boolean;
  i : integer;
  prze³adowanie_procent_najwiêksze : real;
begin

  //
  // Funkcja sprawdza czy jest zapas amunicji lub czy przynajmniej jedna lufa jest za³adowana.
  //
  // Zwraca prawdê gdy jest zapas amunicji lub przynajmniej jedna lufa jest za³adowana.
  //

  //Result := false;

  if    (  not ( Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] )  )
    and ( Self.statek__tw.Zanurzenie_Strza³_Przekroczone() ) then
    begin

      // Sygnalizuje, ¿e dzia³o nie mo¿e strzelaæ w zanurzeniu.

      if Self.czy_indeks_do_strza³u then
        Self.celownik_linia.LineColor.Color := GLS.Color.clrMediumTurquoise
      else//if Self.czy_indeks_do_strza³u then
        Self.celownik_linia.LineColor.Color := GLS.Color.clrDarkTurquoise;

      Self.celownik_linia.LineWidth := 0;

    end
  else//if    (  not ( Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] )  ) (...)
    //if MilliSecondsBetween( Now(), Self.strza³_czas ) <= Self.strza³_od_blokada_milisekundy then
    if Czas_Miêdzy_W_Milisekundach( Self.strza³_czas__broñ_sekundy_i ) <= Self.strza³_od_blokada_milisekundy then
      begin

        // Sygnalizuje, ¿e dzia³o jest w trakcie strza³u i nie obraca siê.

        if Self.czy_indeks_do_strza³u then
          Self.celownik_linia.LineColor.Color := GLS.Color.clrLightGray // Jasny szary.
        else//if Self.czy_indeks_do_strza³u then
          Self.celownik_linia.LineColor.Color := GLS.Color.clrBlack; // Ciemny czarny.

        Self.celownik_linia.LineWidth := 0;

      end
    else//if Czas_Miêdzy_W_Milisekundach( Self.strza³_czas__broñ_sekundy_i ) <= Self.strza³_od_blokada_milisekundy then
      begin

        przynajmniej_jedna_lufa_pobra³a_amunicjê := false;
        prze³adowanie_procent_najwiêksze := 0;

        for i := 0 to Length( Self.lufy_t ) - 1 do
          if Self.lufy_t[ i ].amunicja_pobrana then
            begin

              if prze³adowanie_procent_najwiêksze < Self.lufy_t[ i ].prze³adowanie_procent then
                prze³adowanie_procent_najwiêksze := Self.lufy_t[ i ].prze³adowanie_procent;

              //if not Result then
              //  Result := true;

              if not przynajmniej_jedna_lufa_pobra³a_amunicjê then
                przynajmniej_jedna_lufa_pobra³a_amunicjê := true;

              if prze³adowanie_procent_najwiêksze >= 100 then
                Break;

            end;
          //---//if Self.lufy_t[ i ].amunicja_pobrana then


        //if not Result then
        if not przynajmniej_jedna_lufa_pobra³a_amunicjê then
          begin

            // Brak amunicji.

            Self.celownik_linia.LineColor.Color := GLS.Color.clrBlack;

            //if Self.celownik_linia.NodesAspect <> lnaInvisible then
            //  Self.celownik_linia.NodesAspect := lnaInvisible;

            //Self.celownik_linia.LinePattern := System.Math.Floor( MAXWORD * 0.01 ); // Punktowana $CCCC, ci¹g³a $FFFF.
            Self.celownik_linia.LinePattern := MAXWORD; // Punktowana $CCCC, ci¹g³a $FFFF.

          end
        else//if not przynajmniej_jedna_lufa_pobra³a_amunicjê then
          begin

            //if not Result then
            //  Result := true;

            //if Self.celownik_linia.NodesAspect <> lnaAxes then
            //  Self.celownik_linia.NodesAspect := lnaAxes;


            if not Self.statek__tw.obracaj_dzia³a then
              begin

                if Self.czy_indeks_do_strza³u then
                  Self.celownik_linia.LineColor.Color := GLS.Color.clrOrange
                else//if Self.czy_indeks_do_strza³u then
                  Self.celownik_linia.LineColor.Color := GLS.Color.clrYellow;

              end
            else//if not Self.statek__tw.obracaj_dzia³a then
              //if    ( Self.czy_wycelowany_obrót )
              if    (
                         ( not Self.czy_broñ_obracana )
                      or ( Self.czy_wycelowany_obrót )
                    )
                //and ( Self.czy_wycelowane_podniesienie ) then
                and (
                         ( not Self.czy_lufa_unoszona )
                      or ( Self.czy_wycelowane_podniesienie )
                    ) then
                begin

                  if Self.czy_indeks_do_strza³u then
                    Self.celownik_linia.LineColor.Color := GLS.Color.clrGreenYellow // Jasny zielony.
                  else//if Self.czy_indeks_do_strza³u then
                    Self.celownik_linia.LineColor.Color := GLS.Color.clrGreen; // Ciemny zielony.

                end
              else//if    ( Self.czy_wycelowany_obrót ) (...)
                begin

                  if Self.czy_indeks_do_strza³u then
                    Self.celownik_linia.LineColor.Color := GLS.Color.clrRed // Jasny czerwony.
                  else//if Self.czy_indeks_do_strza³u then
                    Self.celownik_linia.LineColor.Color := GLS.Color.clrDarkPurple; // Ciemny czerwony.

                end;
              //---//if    ( Self.czy_wycelowany_obrót ) (...)


            Self.celownik_linia.LinePattern := System.Math.Floor( MAXWORD * prze³adowanie_procent_najwiêksze * 0.01 ); // Punktowana $CCCC, ci¹g³a $FFFF.
            //Self.celownik_linia.LinePattern := System.Math.Floor( MAXWORD * prze³adowanie_procent_najwiêksze * 0.01 * 0.01 ); // Punktowana $CCCC, ci¹g³a $FFFF.
            //Self.celownik_linia.LineWidth := 7 * prze³adowanie_procent_najwiêksze * 0.01; // Powy¿ej wartoœci 7 nie widaæ ró¿nicy w szerokoœci linii celowania.

          end;
        //---//if not przynajmniej_jedna_lufa_pobra³a_amunicjê then


        if prze³adowanie_procent_najwiêksze >= 100 then
          Self.celownik_linia.LineWidth := 2 // Powy¿ej wartoœci 7 nie widaæ ró¿nicy w szerokoœci linii celowania.
        else//if prze³adowanie_procent_najwiêksze >= 100 then
          Self.celownik_linia.LineWidth := 0;

      end;
    //---//if Czas_Miêdzy_W_Milisekundach( Self.strza³_czas__broñ_sekundy_i ) <= Self.strza³_od_blokada_milisekundy then



  //if Self.celownik_linia_bez_falowania.NodesAspect <> Self.celownik_linia.NodesAspect then
  //  Self.celownik_linia_bez_falowania.NodesAspect := Self.celownik_linia.NodesAspect;

  Self.celownik_linia_bez_falowania.LineColor.Color := Self.celownik_linia.LineColor.Color;
  Self.celownik_linia_bez_falowania.LinePattern := Self.celownik_linia.LinePattern;
  Self.celownik_linia_bez_falowania.LineWidth := Self.celownik_linia.LineWidth;

end;//---//Funkcja Celownik_Linia_Wygl¹d_Ustaw().

//Funkcja Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj().
procedure TTorpedy_Wyrzutnia.Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj( const celownik_linia_widocznoœæ_f : boolean = true );
begin

  //
  // Funkcja ustawia obrót linii celowniczej nieruchomej na podstawie linii celowniczej faluj¹cej.
  //

  // Pomija wspó³rzêdna uniesienia kierunku (tylko obrót).
  //Self.celownik_linia_bez_falowania.AbsoluteDirection := Self.celownik_linia.AbsoluteDirection;
  //Self.celownik_linia_bez_falowania.Direction.Y := 0;
  Self.celownik_linia_bez_falowania.AbsoluteDirection := GLS.VectorGeometry.VectorMake( Self.celownik_linia.AbsoluteDirection.X, 0, Self.celownik_linia.AbsoluteDirection.Z );


  if    ( Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda, Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe ] )
    and ( Self.celownik_linia__widoczne ) then
    begin

      Self.celownik_linia.Visible := false;
      Self.celownik_linia_bez_falowania.Visible := ( not Self.celownik_linia.Visible ) and celownik_linia_widocznoœæ_f;

    end;
  //---//if    ( Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda, Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe ] ) (...)

end;//---//Funkcja Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj().

//Funkcja Celownik_Linia_Bez_Falowania__Pozycja_Y_Dostosuj().
procedure TTorpedy_Wyrzutnia.Celownik_Linia_Bez_Falowania__Pozycja_Y_Dostosuj( const kamera_pod_wod¹_f : boolean; const nad_powierzchni¹_wody_utrzymuj_f : boolean = false );
begin

  //
  // Funkcja dostosowuje wysokoœæ 'wyœwietlania' linii celowniczej 'bez falowania'.
  //
  // Parametry:
  //   kamera_pod_wod¹_f:
  //     false - kamera nad wod¹.
  //     true - kamera pod wod¹.
  //   nad_powierzchni¹_wody_utrzymuj_f:
  //     false - u¿ywa przygotowanej wartoœci.
  //     true - oblicza wartoœæ tak aby linia utrzymywa³a siê nad powierzchni¹ wody.
  //

  if    ( Self.celownik_linia_bez_falowania.Visible )
    and (
             ( nad_powierzchni¹_wody_utrzymuj_f )
          or ( Self.celownik_linia_bez_falowania__position_y__kamera_nad_wod¹ <> Self.celownik_linia_bez_falowania__position_y__standardowa )
        ) then
    begin

      if    ( not kamera_pod_wod¹_f )
        and ( nad_powierzchni¹_wody_utrzymuj_f )
        and ( Self.statek__tw <> nil ) then
        Self.celownik_linia_bez_falowania.Position.Y := Self.statek__tw.AbsoluteToLocal(  GLS.VectorGeometry.AffineVectorMake( 0, zanurzanie_precyzja_c, 0 )  ).Y
      else//if    ( not kamera_pod_wod¹_f ) (...)
      if    ( not kamera_pod_wod¹_f )
        and ( Self.celownik_linia_bez_falowania.Position.Y <> Self.celownik_linia_bez_falowania__position_y__kamera_nad_wod¹ ) then
        Self.celownik_linia_bez_falowania.Position.Y := Self.celownik_linia_bez_falowania__position_y__kamera_nad_wod¹
      else//if    ( not kamera_pod_wod¹_f ) (...)
      if    ( kamera_pod_wod¹_f )
        and ( Self.celownik_linia_bez_falowania.Position.Y <> Self.celownik_linia_bez_falowania__position_y__standardowa ) then
        Self.celownik_linia_bez_falowania.Position.Y := Self.celownik_linia_bez_falowania__position_y__standardowa;

    end;
  //---//if    ( Self.celownik_linia_bez_falowania.Visible ) (...)

end;//---//Funkcja Celownik_Linia_Bez_Falowania__Pozycja_Y_Dostosuj().

//Funkcja Wygl¹d_Elementy__Noc_Zmieñ().
procedure TTorpedy_Wyrzutnia.Wygl¹d_Elementy__Noc_Zmieñ( const dzieñ_jasnoœæ_f : real; const wygl¹d_elementy__kolor_noc_zmieñ_f : TWygl¹d_Elementy__Kolor_Noc_Zmieñ );
var
  i : integer;
begin

  if @wygl¹d_elementy__kolor_noc_zmieñ_f <> nil then
    begin

      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.podstawa.Material, dzieñ_jasnoœæ_f );
      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.korpus__broñ.Material, dzieñ_jasnoœæ_f );
      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.korpus_przód.Material, dzieñ_jasnoœæ_f );


      //wygl¹d_elementy__kolor_noc_zmieñ_f( Self.cel_linia.Material, dzieñ_jasnoœæ_f );
      //wygl¹d_elementy__kolor_noc_zmieñ_f( Self.celownik_linia.Material, dzieñ_jasnoœæ_f );
      //wygl¹d_elementy__kolor_noc_zmieñ_f( Self.celownik_linia_bez_falowania.Material, dzieñ_jasnoœæ_f );

      //wygl¹d_elementy__kolor_noc_zmieñ_f( Self.obrót_k¹t_zablokowany_GLDisk.Material, dzieñ_jasnoœæ_f );


      //for i := 0 to Length( Self.obrót_k¹t_zablokowany_strza³_GLDisk_t ) - 1 do
      //  wygl¹d_elementy__kolor_noc_zmieñ_f( Self.obrót_k¹t_zablokowany_strza³_GLDisk_t[ i ].Material, dzieñ_jasnoœæ_f );

    end;
  //---//if @wygl¹d_elementy__kolor_noc_zmieñ_f <> nil then


  for i := 0 to Length( Self.lufy_t ) - 1 do
    Self.lufy_t[ i ].Wygl¹d_Elementy__Noc_Zmieñ( dzieñ_jasnoœæ_f, wygl¹d_elementy__kolor_noc_zmieñ_f );

end;//---//Funkcja Wygl¹d_Elementy__Noc_Zmieñ().

//Funkcja Element_Uszkodzenie_Przeliczaj().
procedure TTorpedy_Wyrzutnia.Element_Uszkodzenie_Przeliczaj( const oczekiwanie_na__naprawienie_elementu__czas_sekundy_f : Int64; const czy_klient_f : boolean = false );
begin

  //
  // Funkcja przelicza wartoœæ i zarz¹dza wyœwietlaniem efektu uszkodzenia.
  //
  // Parametry:
  //   czy_klient_f:
  //     false - przelicza wartoœæ i zarz¹dza wyœwietlaniem efektu uszkodzenia.
  //     true - tylko zarz¹dza wyœwietlaniem efektu uszkodzenia.
  //

  if not czy_klient_f then
    if    ( Self.uszkodzone_czas_sekundy_i <> 0 )
      and ( Czas_Miêdzy_W_Sekundach( Self.uszkodzone_czas_sekundy_i ) > oczekiwanie_na__naprawienie_elementu__czas_sekundy_f ) then
      begin

        Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible := false;
        Self.uszkodzone_czas_sekundy_i := 0;

      end;
    //---//if    ( Self.uszkodzone_czas_sekundy_i <> 0 ) (...)


  if    ( Self.uszkodzone_czas_sekundy_i <> 0 )
    and ( not Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible ) then
    Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible := true
  else//if    ( Self.uszkodzone_czas_sekundy_i <> 0 ) (...)
    if    ( czy_klient_f )
      and ( Self.uszkodzone_czas_sekundy_i = 0 )
      and ( Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible ) then
      Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible := false;

end;//---//Funkcja Element_Uszkodzenie_Przeliczaj().

//Funkcja Si__Cel__Brak_Ustaw().
procedure TTorpedy_Wyrzutnia.Si__Cel__Brak_Ustaw();
begin

  Self.si__cel__wyznaczony := false;
  Self.si__cel__wyszukanie_ostatnie_sekundy_i := 0;

end;//---//Funkcja Si__Cel__Brak_Ustaw().

//Funkcja Si__Cel__Korekta_Losowa_Namiaru_Procent_Ustaw().
//procedure TTorpedy_Wyrzutnia.Si__Cel__Korekta_Losowa_Namiaru_Procent_Ustaw( odleg³oœæ_do_celu_f : single = -1 );
procedure TTorpedy_Wyrzutnia.Si__Cel__Korekta_Losowa_Namiaru_Procent_Ustaw( const gra_wspó³czynnik_trudnoœci_f : integer );
begin

  // Zale¿enie od pozycji statków czasami losowa korekta uniemo¿liwi trafienie a czasami przeciwnie.

  //// Je¿eli cel jest blisko to zakres losowej korekty jest mniejszy.
  //if odleg³oœæ_do_celu_f = -1 then
  //  odleg³oœæ_do_celu_f := Self.DistanceTo( Self.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor );
  //
  //
  //if Self.zasiêg__broñ <> 0 then
  //  odleg³oœæ_do_celu_f := odleg³oœæ_do_celu_f / Self.zasiêg__broñ
  //else//if Self.zasiêg__broñ <> 0 then
  //  odleg³oœæ_do_celu_f := 1;
  //
  //if odleg³oœæ_do_celu_f > 1 then
  //  odleg³oœæ_do_celu_f := 1;
  ////---// Je¿eli cel jest blisko to zakres losowej korekty jest mniejszy.
  //
  //Self.si__cel__korekta_losowa_namiaru_procent := (  Random( 201 ) - 100  ) * 0.01 * odleg³oœæ_do_celu_f;

  //Self.si__cel__korekta_losowa_namiaru_procent := (  Random( 201 ) - 100  ) * 0.01;
  Self.si__cel__korekta_losowa_namiaru_procent :=
    (  Random( 201 + gra_wspó³czynnik_trudnoœci_f ) - ( 100 + gra_wspó³czynnik_trudnoœci_f )  ) * 0.01;

end;//---//Funkcja Si__Cel__Korekta_Losowa_Namiaru_Procent_Ustaw().

//Funkcja Si_Wartoœci_Pocz¹tkowe_Ustaw().
procedure TTorpedy_Wyrzutnia.Si_Wartoœci_Pocz¹tkowe_Ustaw();
begin

  //
  // Funkcja ustawia pocz¹tkowe wartoœci dla zmiennych zwi¹zanych z si.
  //

  Self.si__cel__wyznaczony := false;
  Self.si__cel__id_statek := -99;
  Self.si__cel__korekta_losowa_namiaru_procent := 0;
  Self.si__cel__korekta_losowa_namiaru_procent__wyszukanie_ostatnie_sekundy_i := 0;
  Self.si__cel__namiar_wyznaczenie_ostatnie_sekundy_i := -si__cel__namiar_wyznaczenie_sekundy_c;
  Self.si__cel__wyszukanie_ostatnie_sekundy_i := -si__cel__wyszukanie_sekundy_c;
  GLS.VectorGeometry.MakeVector( Self.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor, 0, 0, 0 ); // Zostanie potem nadpisane w funkcji Broñ__Namiar_Wyznacz(). //???

end;//---//Funkcja Si_Wartoœci_Pocz¹tkowe_Ustaw().

//Funkcja Parametry_Odczytaj().
function TTorpedy_Wyrzutnia.Parametry_Odczytaj( const odstêp_f : string; const t³umaczenie_komunikaty_r_f : TT³umaczenie_Komunikaty_r; const dane_wszystkie_f : boolean = false ) : string;
var
  i : integer;
begin

  //
  // Funkcja wypisuje dane (parametry).
  //
  // Zwraca napis z danymi (parametrami).
  //
  // Parametry:
  //   odstêp_f
  //   t³umaczenie_komunikaty_r_f
  //   dane_wszystkie_f:
  //     false - wypisuje tylko dane podstawowe.
  //     true - wypisujewszystkie dane.
  //

  Result :=
    #13 + #10 + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__amunicja_iloœæ + ': ' + Trim(  FormatFloat( '### ### ##0', Self.amunicja_iloœæ )  ) +
    #13 + #10 + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__amunicja_iloœæ_pocz¹tkowa + ': ' + Trim(  FormatFloat( '### ### ##0', Self.amunicja_iloœæ_pocz¹tkowa )  ) +
    #13 + #10 + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__amunicja_uzbrajanie_odleg³oœæ + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.amunicja_uzbrajanie_odleg³oœæ )  ) +
    #13 + #10 + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__broñ_obracana + ': ';

  if Self.czy_broñ_obracana then
    Result := Result + t³umaczenie_komunikaty_r_f.s³owo__tak
  else//if Self.czy_broñ_obracana then
    Result := Result + t³umaczenie_komunikaty_r_f.s³owo__nie;

  Result := Result +
    #13 + #10 + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__lufy_iloœæ + ': ' + Trim(   FormatFloat(  '### ### ##0', Length( Self.lufy_t )  )   ) +
    #13 + #10 + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__lufa_unoszona + ': ';

  if Self.czy_lufa_unoszona then
    Result := Result + t³umaczenie_komunikaty_r_f.s³owo__tak
  else//if Self.czy_lufa_unoszona then
    Result := Result + t³umaczenie_komunikaty_r_f.s³owo__nie;

  Result := Result +
    #13 + #10 + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__obra¿enia_zadawane + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.obra¿enia_zadawane )  ) +
    #13 + #10 + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__obrót_k¹t_zablokowany_do + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.obrót_k¹t_zablokowany_do )  ) +
    #13 + #10 + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__obrót_k¹t_zablokowany_od + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.obrót_k¹t_zablokowany_od )  ) +
    #13 + #10 + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__obrót_szybkoœæ + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.obrót_szybkoœæ )  ) +
    #13 + #10 + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__prze³adowanie_czas_milisekundy + ': ' + Trim(  FormatFloat( '### ### ##0', Self.prze³adowanie_czas_milisekundy__broñ )  ) +
    #13 + #10 + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__strza³_od_blokada_milisekundy + ': ' + Trim(  FormatFloat( '### ### ##0', Self.strza³_od_blokada_milisekundy )  ) +
    #13 + #10 + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__zasiêg + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.zasiêg__broñ )  );


  for i := 0 to Length( Self.obrót_k¹t_zablokowany_strza³_do ) - 1 do
    Result := Result +
      #13 + #10 + odstêp_f + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__obrót_k¹t_zablokowany_strza³_do + ' ' + Trim(  FormatFloat( '### ### ##0', i + 1 )  ) + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.obrót_k¹t_zablokowany_strza³_do[ i ] )  );

  for i := 0 to Length( Self.obrót_k¹t_zablokowany_strza³_od ) - 1 do
    Result := Result +
      #13 + #10 + odstêp_f + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__obrót_k¹t_zablokowany_strza³_od + ' ' + Trim(  FormatFloat( '### ### ##0', i + 1 )  ) + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.obrót_k¹t_zablokowany_strza³_od[ i ] )  );

  for i := 0 to Length( Self.obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny ) - 1 do
    Result := Result +
      #13 + #10 + odstêp_f + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny + ' ' + Trim(  FormatFloat( '### ### ##0', i + 1 )  ) + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny[ i ] )  );


  if dane_wszystkie_f then
    for i := 0 to Length( Self.lufy_t ) - 1 do
      Result := Result +
        #13 + #10 + odstêp_f + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__prze³adowanie_czas_milisekundy_lufa + ' ' + Trim(  FormatFloat( '### ### ##0', i + 1 )  ) + ': ' + Trim(  FormatFloat( '### ### ##0', Self.lufy_t[ i ].prze³adowanie_czas_milisekundy__lufa )  );

end;//---//Funkcja Parametry_Odczytaj().

//Konstruktor klasy TDzia³o.
constructor TDzia³o.Create( AOwner : TGLBaseSceneObject; AStatek : TStatek; gl_collision_mmanager_f : TGLCollisionManager; efekt__element_uszkodzenie_gl_thor_fx_manager_f : TGLThorFXManager; const lufy_iloœæ_f : integer; const lufy_podniesienie_k¹t_f : real; const statek_create_funkcje_f : TStatek_Create_Funkcje );
var
  i : integer;
  //ztr : real;
begin

  inherited Create( AOwner, AStatek, gl_collision_mmanager_f, efekt__element_uszkodzenie_gl_thor_fx_manager_f, lufy_iloœæ_f, statek_create_funkcje_f );


  Self.obrót_szybkoœæ := 37.5;

  Self.cofanie_wystrza³_odleg³oœæ := 0;
  Self.cofanie_wystrza³_pozycja_pocz¹tkowa := 0;

  Self.podniesienie_k¹t_maksymalny := 20;
  Self.podniesienie_k¹t_minimalny := -10;
  Self.podniesienie_k¹t_pocz¹tkowy := 0;
  Self.podniesienie_k¹t_zadany := 0; // -(minus) w dó³, +(plus) w górê.
  Self.podniesienie_k¹t_zadany_bezwzglêdny := 0;
  Self.podniesienie_szybkoœæ := 5.0;

  //Self.amunicja_iloœæ := 1500;
  //Self.amunicja_iloœæ_pocz¹tkowa := Self.amunicja_iloœæ;
  //Self.amunicja_uzbrajanie_odleg³oœæ := 1;
  //Self.obra¿enia_zadawane := 1;
  //Self.prze³adowanie_czas_milisekundy__broñ := 1000; // 7000 //???
  Self.strza³_od_blokada_milisekundy := 250;
  Self.zasiêg__broñ := 4; // 12 20

  Self.amunicja_rodzaj := Typy_Wspolne.ar_Pocisk;

  Self.czy_lot_parabol¹ := false;
  Self.czy_lufa_unoszona := true;
  Self.czy_wycelowane_podniesienie := false;

  //SetLength( Self.obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny, 0 ); //???

  Self.korpus__broñ.CubeHeight := Self.podstawa.TopRadius;
  //Self.korpus__broñ.Position.Y := -( Self.CubeSize * 0.5 ) + Self.podstawa.Height * 2;
  Self.korpus__broñ.Position.Y := Self.podstawa.Position.Y + Self.podstawa.Height * 0.5 + Self.korpus__broñ.CubeHeight * 0.5;
  //Self.korpus__broñ.Visible := false;

  TTorpedy_Wyrzutnia(Self).korpus_przód.Visible := false;

  Self.korpus_przód := Wyglad_Elementy.TSt_GLCube.Create( Self );
  Self.korpus_przód.Parent := Self.elementy_wizualne_gl_dummy_cube;
  Self.korpus_przód.CubeDepth := Self.podstawa.TopRadius;
  Self.korpus_przód.CubeHeight := Self.podstawa.TopRadius;
  Self.korpus_przód.CubeWidth := Self.korpus__broñ.CubeWidth;
  Self.korpus_przód.PitchAngle := 45;
  Self.korpus_przód.Position.Y := Self.korpus__broñ.Position.Y;
  Self.korpus_przód.Position.Z := -Self.korpus__broñ.CubeDepth + Self.korpus_przód.CubeDepth;
  //Self.korpus_przód.Visible := false;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.korpus_przód, Wyglad_Elementy.or_Statek );

  if Self.statek__tw <> nil then
    Wyglad_Elementy.Identyfikator_Elementu( Self.korpus_przód, Self.statek__tw.id_statek )
  else//if Self.statek__tw <> nil then
    Wyglad_Elementy.Identyfikator_Elementu( Self.korpus_przód, -1 );


  //Self.k¹t_test_gl_dummy_cube.Position.Y := Self.korpus_przód.Position.Y; // Dok³adniej celuje w punkt.


  //if Length( Self.lufy_t ) > 0 then
  //  ztr := Self.korpus__broñ.CubeWidth / Length( lufy_t ) // Iloœæ miejsca na lufê.
  //else//if Length( Self.lufy_t ) > 0 then
  //  ztr := 0;

  for i := 0 to Length( Self.lufy_t ) - 1 do
    begin

      Self.lufy_t[ i ].Position.Y := Self.korpus_przód.Position.Y;
      //Self.lufy_t[ i ].Position.X := i * ztr - Self.korpus__broñ.CubeWidth * 0.5 + ztr * 0.5 ; // Przesuniêcie o pó³ szerokoœci korpusu, wyœrodkowanie na obszarze dla lufy.
      Self.lufy_t[ i ].Position.Z := Self.korpus_przód.Position.Z;
      Self.lufy_t[ i ].korpus__lufa.TopRadius := 0.05;
      Self.lufy_t[ i ].korpus__lufa.BottomRadius := Self.lufy_t[ i ].korpus__lufa.TopRadius;

      if Self is TArtyleria then
        Self.lufy_t[ i ].korpus__lufa.Height := 1.2
      else//if Self is TArtyleria then
        Self.lufy_t[ i ].korpus__lufa.Height := 0.6;

      Self.lufy_t[ i ].korpus__lufa.Position.Z := -Self.lufy_t[ i ].korpus__lufa.Height * 0.5;
      Self.lufy_t[ i ].Dodatkowe_Elementy_Lufy_Pozycja_Ustaw();

      //ztr := lufy_podniesienie_k¹t_f

    end;
  //---//for i := 0 to Length( Self.lufy_t ) - 1 do


  if Length( Self.lufy_t ) > 0 then
    begin

      Self.cofanie_wystrza³_odleg³oœæ := Self.lufy_t[ 0 ].korpus__lufa.Height * 0.25;
      Self.cofanie_wystrza³_pozycja_pocz¹tkowa := Self.lufy_t[ 0 ].korpus__lufa.Position.Z;

    end;
  //---//if Length( Self.lufy_t ) > 0 then


  if gl_collision_mmanager_f <> nil then
    with TGLBCollision.Create( Self.korpus_przód.Behaviours ) do
      begin

        GroupIndex := 0;
        BoundingMode := cbmCube;
        Manager := gl_collision_mmanager_f;

      end;
    //---//with TGLBCollision.Create( Self.korpus_przód.Behaviours ) do

end;//---//Konstruktor klasy TDzia³o.

//Destruktor klasy TDzia³o.
destructor TDzia³o.Destroy();
begin

  //SetLength( Self.obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny, 0 ); //???

  FreeAndNil( Self.podstawa );
  FreeAndNil( Self.korpus__broñ );
  FreeAndNil( Self.korpus_przód );

  inherited;

end;//---//Destruktor klasy TDzia³o.

//Funkcja Podniesienie_Zadane_Zmieñ().
procedure TDzia³o.Podniesienie_Zadane_Zmieñ( const celownik_linia_widocznoœæ_f : boolean = true );
var
  //celowanie_precyzja__falowanie_niwelowanie_l,
  k¹t_zakres_l,
  podniesienie_procent_l,
  odleg³oœæ_do_celu_l,
  ztr
    : real;
  zt_vector : GLS.VectorTypes.TVector4f;
  celowanie_tryb_l : TCelowanie_Tryb;
  zt_gt_lines : TGLLines;
begin

  //
  // Funkcja ustawia zadany k¹t podniesienia na k¹t, w którym patrzy kamera (w p³aszczyŸnie pionowej).
  // Od -90 (dó³) 0 (poziomo) 90 (góra).
  //

  // Self.podniesienie_k¹t_zadany; -(minus) w dó³, +(plus) w górê

  // Statki_Form.Gra_GLCamera.AbsoluteDirection.Y: -(minus) w dó³, +(plus) w górê

  //Self.podniesienie_k¹t_zadany := Statki_Form.Gra_GLCamera.AbsoluteDirection.Y * 90;

  if Self.Parent = nil then
    Exit;

  if not Self.czy_lufa_unoszona then
    Exit;

  if Self.uszkodzone_czas_sekundy_i <> 0 then
    Exit;

  // Namierzanie wed³ug linii celowniczej statku.

  //Self.k¹t_test_gl_dummy_cube.Up.SetVector( 0, 1, 0 ); // Je¿eli k¹t testowy jest u¿ywany do wyliczania podniesienia mo¿e go obróciæ.
  ////Self.k¹t_test_gl_dummy_cube.Position := TTorpedy_Wyrzutnia(Self).celownik_linia.Position;


  if Self.statek__tw.celowanie__bronie_osobno then
    zt_gt_lines := Self.cel_linia
  else//if Self.statek__tw.celowanie__bronie_osobno then
    zt_gt_lines := Self.statek__tw.celownicza_linia;


  odleg³oœæ_do_celu_l := Self.DistanceTo(  zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector )  );


  if Self.amunicja_rodzaj = Typy_Wspolne.ar_Artyleria then
    begin

      if odleg³oœæ_do_celu_l > TArtyleria(Self).zasiêg_od_parabola then
        celowanie_tryb_l := ct_Odleg³oœæ
      else//if odleg³oœæ_do_celu_l > TArtyleria(Self).zasiêg_od_parabola then
        celowanie_tryb_l := Self.statek__tw.celowanie__tryb;

    end
  else//if Self.amunicja_rodzaj = Typy_Wspolne.ar_Artyleria then
    celowanie_tryb_l := Self.statek__tw.celowanie__tryb;


  case celowanie_tryb_l of
      //ct_Linia :
      //  begin
      //
      //    // Namierzanie równoleg³e do linii celowania.
      //
      //                   // Cel                 Obiekt celuj¹cy
      //    //zt_vector.X := zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector ).X - Self.k¹t_test_gl_dummy_cube.AbsolutePosition.X;
      //    //zt_vector.Y := zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector ).Y - Self.k¹t_test_gl_dummy_cube.AbsolutePosition.Y;
      //    //zt_vector.Z := zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector ).Z - Self.k¹t_test_gl_dummy_cube.AbsolutePosition.Z;
      //    //Self.k¹t_test_gl_dummy_cube.AbsoluteDirection := GLS.VectorGeometry.VectorNormalize( zt_vector );
      //    //
      //    //Self.podniesienie_k¹t_zadany := Self.k¹t_test_gl_dummy_cube.AbsoluteDirection.Y * 90;
      //    // Lub.
      //    zt_vector.X := zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector ).X - Self.podstawa.AbsolutePosition.X;
      //    zt_vector.Y := zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector ).Y - Self.korpus_przód.AbsolutePosition.Y; // Dok³adniej celuje w punkt.
      //    zt_vector.Z := zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector ).Z - Self.podstawa.AbsolutePosition.Z;
      //    zt_vector := GLS.VectorGeometry.VectorNormalize( zt_vector );
      //
      //    Self.podniesienie_k¹t_zadany := zt_vector.Y * 90;
      //
      //  end;
      ////---//ct_Linia :

      ct_Odleg³oœæ :
        begin

          // Wyznaczanie zadanego k¹ta wed³ug zasiêgu odleg³oœci namiaru.

          k¹t_zakres_l := Self.podniesienie_k¹t_maksymalny - Self.podniesienie_k¹t_minimalny; // Gdy k¹t maksymalny jest dodatni a minimalny mo¿e byæ ujemny.

          if k¹t_zakres_l = 0 then
            Exit;

          //odleg³oœæ_do_celu_l := Self.DistanceTo(  zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector )  );

          if odleg³oœæ_do_celu_l > Self.zasiêg__broñ then
            odleg³oœæ_do_celu_l := Self.zasiêg__broñ
          else
          if odleg³oœæ_do_celu_l < 0 then
            odleg³oœæ_do_celu_l := 0;


          podniesienie_procent_l := 100 * odleg³oœæ_do_celu_l / Self.zasiêg__broñ;

          Self.podniesienie_k¹t_zadany := k¹t_zakres_l * podniesienie_procent_l * 0.01 + Self.podniesienie_k¹t_minimalny;

          //Self.obrót_kierunek_zadany.X := zt_gt_lines.Nodes[ 1 ].X;
          //Self.obrót_kierunek_zadany.Z := zt_gt_lines.Nodes[ 1 ].Z;

        end;
      //---//ct_Odleg³oœæ :

      else//case celowanie_tryb_l of
        begin

          // Namierzanie zbie¿ne do punktu celowania.
          // Namierzanie równoleg³e do linii celowania.

          //zt_vector.X := zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector ).X - Self.k¹t_test_gl_dummy_cube.AbsolutePosition.X;
          //zt_vector.Y := zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector ).Y - Self.k¹t_test_gl_dummy_cube.AbsolutePosition.Y;
          //zt_vector.Z := zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector ).Z - Self.k¹t_test_gl_dummy_cube.AbsolutePosition.Z;
          //Self.k¹t_test_gl_dummy_cube.AbsoluteDirection := GLS.VectorGeometry.VectorNormalize( zt_vector );
          //
          //GLS.VectorGeometry.SetVector( zt_vector, 0, 0, 0 ); // Najlepiej sprawdzaæ k¹t w punkcie zero.
          //
          //// Sprawdza k¹t miêdzy kierunkiem zadanym a kierunkiem dzia³a.
          //ztr := 180 -
          //  System.Math.RadToDeg
          //    (
          //      GLS.VectorGeometry.AngleBetweenVectors
          //        (
          //          Self.k¹t_test_gl_dummy_cube.AbsoluteDirection,
          //          Self.AbsoluteDirection,
          //          zt_vector
          //        )
          //    );
          // Lub.
          zt_vector.X := zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector ).X - Self.podstawa.AbsolutePosition.X;
          zt_vector.Y := zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector ).Y - Self.korpus_przód.AbsolutePosition.Y; // Dok³adniej celuje w punkt.
          zt_vector.Z := zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector ).Z - Self.podstawa.AbsolutePosition.Z;

          //if    ( not Self.statek.celowanie__bronie_osobno )
          //  and ( celowanie_tryb_l = ct_Linia ) then // Namierzanie równoleg³e do linii celowania.
          if celowanie_tryb_l = ct_Linia then // Namierzanie równoleg³e do linii celowania.
            begin

              // Koryguje celowanie o ró¿nicê wysokoœci umieszczenia broni.

              ztr := Abs( zt_vector.Y - zt_gt_lines.Nodes[ 1 ].AsAffineVector.Y );

              if zt_vector.Y < zt_gt_lines.Nodes[ 1 ].AsAffineVector.Y then
                ztr := -ztr;

              zt_vector.Y := zt_vector.Y - ztr;

            end;
          //---//if celowanie_tryb_l = ct_Linia then

          zt_vector := GLS.VectorGeometry.VectorNormalize( zt_vector );


          {$region 'Zakomentowane - wariant z prze³¹czaniem na celowanie niweluj¹ce falowanie.'}
          //if Self.statek <> nil then
          //  celowanie_precyzja__falowanie_niwelowanie_l := Self.statek.celowanie_precyzja__falowanie_niwelowanie
          //else//if Self.statek <> nil then
          //  celowanie_precyzja__falowanie_niwelowanie_l := 0;
          //
          //
          //if Abs( Self.TurnAngle - Self.obrót_k¹t_zadany_bezwzglêdny ) < celowanie_precyzja__falowanie_niwelowanie_l then
          //  begin
          //
          //    // Dobrze unosi lufê gdy obrót jest ustawiony, niweluje wp³yw falowania.
          //    //   Podczas obracania broni zawy¿a (na plus lub minus) k¹t uniesienia luf (wynika to z tego, ¿e nie mierzy k¹ta w p³aszczyŸnie pionowej tylko wychyla wzglêdem k¹ta obrotu).
          //
          //    // Sprawdza k¹t miêdzy kierunkiem zadanym a kierunkiem dzia³a.
          //    ztr := 180 -
          //      System.Math.RadToDeg
          //        (
          //          GLS.VectorGeometry.AngleBetweenVectors
          //            (
          //              zt_vector,
          //              Self.AbsoluteDirection,
          //              GLS.VectorGeometry.VectorMake( 0, 0, 0 ) // Najlepiej sprawdzaæ k¹t w punkcie zero.
          //            )
          //        );
          //
          //  end
          //else//if Abs( Self.TurnAngle - Self.obrót_k¹t_zadany_bezwzglêdny ) < celowanie_precyzja__falowanie_niwelowanie_l then
          //  begin
          //
          //    // Dobrze unosi lufê dla dowolnego obrotu, nie niweluje wp³ywu falowania.
          //
          //    // Sprawdza k¹t miêdzy kierunkiem zadanym a kierunkiem dzia³a.
          //    ztr :=
          //      System.Math.RadToDeg
          //        (
          //          GLS.VectorGeometry.AngleBetweenVectors
          //            (
          //              zt_vector,
          //              GLS.VectorGeometry.VectorMake( zt_vector.X, Self.AbsoluteDirection.Y, zt_vector.Z ),
          //              GLS.VectorGeometry.VectorMake( 0, 0, 0 ) // Najlepiej sprawdzaæ k¹t w punkcie zero.
          //            )
          //        );
          //
          //  end;
          ////---//if Abs( Self.TurnAngle - Self.obrót_k¹t_zadany_bezwzglêdny ) < celowanie_precyzja__falowanie_niwelowanie_l then
          //
          //
          ////if Self.k¹t_test_gl_dummy_cube.AbsolutePosition.Y >= zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector ).Y then // Lub.
          //if Self.korpus_przód.AbsolutePosition.Y >= zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector ).Y then
          //  Self.podniesienie_k¹t_zadany := -ztr
          //else//if Self.korpus_przód.AbsolutePosition.Y >= zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector ).Y then
          //  Self.podniesienie_k¹t_zadany := ztr;
          {$endregion 'Zakomentowane - wariant z prze³¹czaniem na celowanie niweluj¹ce falowanie.'}

          // K¹t linii celowniczej wzglêdem poziomu.
          Self.podniesienie_k¹t_zadany :=
            System.Math.RadToDeg
              (
                GLS.VectorGeometry.AngleBetweenVectors
                  (
                    zt_vector,
                    GLS.VectorGeometry.VectorMake( zt_vector.X, 0, zt_vector.Z ),
                    GLS.VectorGeometry.VectorMake( 0, 0, 0 ) // Najlepiej sprawdzaæ k¹t w punkcie zero.
                  )
              );

          if System.Math.IsNan( Self.podniesienie_k¹t_zadany ) then // Raczej siê tutaj nie pojawia.
            Self.podniesienie_k¹t_zadany := 0
          else//if System.Math.IsNan( Self.podniesienie_k¹t_zadany ) then
            if zt_vector.Y < 0 then
              Self.podniesienie_k¹t_zadany := -Self.podniesienie_k¹t_zadany;


          // K¹t wychylenia dzia³a wzglêdem poziomu.
          ztr :=
            System.Math.RadToDeg
              (
                GLS.VectorGeometry.AngleBetweenVectors
                  (
                    Self.AbsoluteDirection,
                    GLS.VectorGeometry.VectorMake( Self.AbsoluteDirection.X, 0, Self.AbsoluteDirection.Z ),
                    GLS.VectorGeometry.VectorMake( 0, 0, 0 ) // Najlepiej sprawdzaæ k¹t w punkcie zero.
                  )
              );

          if System.Math.IsNan( ztr ) then
            ztr := 0
          else//if System.Math.IsNan( ztr ) then
            if Self.AbsoluteDirection.Y > 0 then
              ztr := -ztr;


          Self.podniesienie_k¹t_zadany := Self.podniesienie_k¹t_zadany - ztr;

          if Self.AbsoluteUp.Y < 0 then
            Self.podniesienie_k¹t_zadany := -Self.podniesienie_k¹t_zadany;

        end;
      //---//case celowanie_tryb_l of
    end;
  //---//case celowanie_tryb_l of

  Self.podniesienie_k¹t_zadany_bezwzglêdny := Self.podniesienie_k¹t_zadany;

  if Self.podniesienie_k¹t_zadany > Self.podniesienie_k¹t_maksymalny then
    Self.podniesienie_k¹t_zadany := Self.podniesienie_k¹t_maksymalny
  else//if Self.podniesienie_k¹t_zadany > Self.podniesienie_k¹t_maksymalny then
  if Self.podniesienie_k¹t_zadany < Self.podniesienie_k¹t_minimalny then
    Self.podniesienie_k¹t_zadany := Self.podniesienie_k¹t_minimalny;


  Self.Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj( celownik_linia_widocznoœæ_f );

end;//---//Funkcja Podniesienie_Zadane_Zmieñ().

//Funkcja Podniesienie_Kierunek_Zmieñ().
procedure TDzia³o.Podniesienie_Kierunek_Zmieñ( const delta_czasu_f : double );

  //Funkcja Podniesienie_Kierunek_Zmieñ_Lufa() w Podniesienie_Kierunek_Zmieñ().
  function Podniesienie_Kierunek_Zmieñ_Lufa( lufa_f : TLufa ) : real;
  var
    ztr_l,
    celowanie_precyzja_podniesienie_l,
    k¹t_do_k¹t_podniesienia_l, // K¹t o jaki nale¿y zmieniæ podniesienie lufy.
    k¹t_podniesienia_aktualny_l,
    //odleg³oœæ_do_celu_l,
    podniesienie_k¹t_zadany_odleg³oœæ_procent_l, // Okreœla jaki procent precyzji celowania stanowi aktualna ró¿nica k¹ta zadanego wzglêdem k¹ta wycelowania (wartoœæ ograniczana do zakresu 0 - 100).
    podniesienie_szybkoœæ_l
      : real;
  begin

    //
    // Funkcja modyfikuje podniesienie.
    //
    //  Zmiana podniesienia odbywa siê zawsze pe³n¹ moc¹ i liniowo.
    //
    // Zwraca wartoœæ szerokoœci linii celowania odzwierciedlaj¹c¹ precyzjê wycelowania podniesienia lufy.
    //

    //lufa_f.PitchAngle  -(minus) w górê, +(plus) w dó³.

    //lufa_f.AbsoluteDirection.Z: -(minus) w dó³, +(plus) w górê

    ////if lufa_f.AbsoluteDirection.Z >= 0 then
    //if lufa_f.Direction.Z >= 0 then // Wariant, w którym lufa by³a samodzielnym cylindrem (bez obiektu dummy).
    //  k¹t_podniesienia_aktualny_l := -Abs( lufa_f.PitchAngle )
    //else//if lufa_f.AbsoluteDirection.Z >= 0 then
    //  k¹t_podniesienia_aktualny_l := Abs( lufa_f.PitchAngle );

    if Self.statek__tw <> nil then
      celowanie_precyzja_podniesienie_l := Self.statek__tw.celowanie_precyzja__podniesienie
    else//if Self.statek__tw <> nil then
      celowanie_precyzja_podniesienie_l := 0;


    k¹t_podniesienia_aktualny_l := -lufa_f.PitchAngle;
    k¹t_do_k¹t_podniesienia_l := Abs( k¹t_podniesienia_aktualny_l - Self.podniesienie_k¹t_zadany );


    if celowanie_precyzja_podniesienie_l <> 0 then
      podniesienie_k¹t_zadany_odleg³oœæ_procent_l := Abs( k¹t_podniesienia_aktualny_l - Self.podniesienie_k¹t_zadany_bezwzglêdny ) * 100 / celowanie_precyzja_podniesienie_l
    else//if celowanie_precyzja_podniesienie_l <> 0 then
      podniesienie_k¹t_zadany_odleg³oœæ_procent_l := 100;


    if podniesienie_k¹t_zadany_odleg³oœæ_procent_l > 100 then
      podniesienie_k¹t_zadany_odleg³oœæ_procent_l := 100
    else//if podniesienie_k¹t_zadany_odleg³oœæ_procent_l > 100 then
    if podniesienie_k¹t_zadany_odleg³oœæ_procent_l < 0 then
      podniesienie_k¹t_zadany_odleg³oœæ_procent_l := 0;

    //podniesienie_szybkoœæ_l := Self.podniesienie_szybkoœæ * podniesienie_k¹t_zadany_odleg³oœæ_procent_l * 0.01 * delta_czasu_f; // Im bli¿ej zadanego k¹ta wycelowana tym wolniej zmienia podniesienie luf ale z wiêksz¹ precyzj¹.
    podniesienie_szybkoœæ_l := ( Self.podniesienie_szybkoœæ + lufa_f.podniesienie_szybkoœæ_modyfikator ) * podniesienie_k¹t_zadany_odleg³oœæ_procent_l * 0.01 * delta_czasu_f; // Im bli¿ej zadanego k¹ta wycelowana tym wolniej zmienia podniesienie luf ale z wiêksz¹ precyzj¹.

    // Powy¿ej pewnej prêdkoœci gry nie mo¿e ustawiæ w³aœciwego k¹ta (za szybko zmienia k¹t i obraca lufami dooko³a).
    //ztr_l := ( podniesienie_szybkoœæ_l + lufa_f.podniesienie_szybkoœæ_modyfikator );
    ztr_l := podniesienie_szybkoœæ_l;

    //if ztr_l > 10 then // Po zmianie na Gra_GLCadencer.TimeMultiplier powinno dzia³aæ bez tego zabezpieczenia. //???
    //  ztr_l := 10;


    if k¹t_do_k¹t_podniesienia_l < ztr_l then // Coœ jest nie tak z ustawianiem k¹tów ale podnoszenie dzia³a. //???
      begin

        lufa_f.PitchAngle := -Self.podniesienie_k¹t_zadany;
        lufa_f.czy_wycelowane_podniesienie := true;

      end
    else//if k¹t_do_k¹t_podniesienia_l < ztr_l then
    //if k¹t_do_k¹t_podniesienia_l > ztr_l then
      begin

        //lufa_f.czy_wycelowane_podniesienie := false;

        // Je¿eli k¹t jest mniejszy ni¿ zadana precyzja celowania, przyjmuje siê, ¿e lufa jest podniesiona w kierunku celu.
        if k¹t_do_k¹t_podniesienia_l < celowanie_precyzja_podniesienie_l then
          lufa_f.czy_wycelowane_podniesienie := true
        else//if k¹t_do_k¹t_podniesienia_l < celowanie_precyzja_podniesienie_l then
          lufa_f.czy_wycelowane_podniesienie := false;


        if k¹t_podniesienia_aktualny_l < Self.podniesienie_k¹t_zadany then
          begin

            // Góra.
            //lufa_f.Pitch(  -( podniesienie_szybkoœæ_l + lufa_f.podniesienie_szybkoœæ_modyfikator )  );
            lufa_f.PitchAngle := lufa_f.PitchAngle - ztr_l;

          end
        else//if k¹t_podniesienia_aktualny_l < Self.podniesienie_k¹t_zadany then
          begin

            // Dó³.
            //lufa_f.Pitch(  podniesienie_szybkoœæ_l + lufa_f.podniesienie_szybkoœæ_modyfikator );
            lufa_f.PitchAngle := lufa_f.PitchAngle + ztr_l;

          end;
        //---//if k¹t_podniesienia_aktualny_l < Self.podniesienie_k¹t_zadany then

      end;
    //---//if k¹t_do_k¹t_podniesienia_l < ztr_l then



    //if lufa_f.czy_wycelowane_podniesienie then
    //  begin
    //
    //    if celowanie_precyzja_podniesienie_l <> 0 then
    //      Result := podniesienie_k¹t_zadany_odleg³oœæ_procent_l
    //    else//if celowanie_precyzja_podniesienie_l <> 0 then
    //      Result := 0;
    //
    //    // Gruboœæ linii jest odwrotna do procenta (im mniejszy procent tym linia grubsza).
    //    Result := celownik_linia_szerokoœæ_maksymalna__podniesienie_c * ( 100 - Result ) * 0.01;
    //
    //  end
    //else//if lufa_f.czy_wycelowane_podniesienie then
    //  Result := 0;
    Result := 0;

  end;//---//Funkcja Podniesienie_Kierunek_Zmieñ_Lufa() w Podniesienie_Kierunek_Zmieñ().

var
  i : integer;
  //ztr : real;
  //przynajmniej_jedna_lufa_wycelowa³a : boolean;
  zt_gt_lines : TGLLines;
begin//Funkcja Podniesienie_Kierunek_Zmieñ().

  //
  // Funkcja modyfikuje podniesienie.
  //
  //  Zmiana podniesienia odbywa siê zawsze pe³n¹ moc¹ i liniowo.
  //

  if not Self.czy_lufa_unoszona then
    Exit;

  if Self.uszkodzone_czas_sekundy_i <> 0 then
    Exit;

  //if MilliSecondsBetween( Now(), Self.strza³_czas ) <= Self.strza³_od_blokada_milisekundy then
  if Czas_Miêdzy_W_Milisekundach( Self.strza³_czas__broñ_sekundy_i ) <= Self.strza³_od_blokada_milisekundy then
      begin

      // Sygnalizuje, ¿e dzia³o jest w trakcie strza³u i nie obraca siê.

      //Self.celownik_linia.LineColor.Color := GLS.Color.clrGray50;
      //Self.celownik_linia_bez_falowania.LineColor.Color := Self.celownik_linia.LineColor.Color;
      Exit;

    end;
  //---//if Czas_Miêdzy_W_Milisekundach( Self.strza³_czas__broñ_sekundy_i ) <= Self.strza³_od_blokada_milisekundy then


  Self.czy_wycelowane_podniesienie := false;

  for i := 0 to Length( Self.lufy_t ) - 1 do
    begin

      Podniesienie_Kierunek_Zmieñ_Lufa( Self.lufy_t[ i ] );

      if    ( not Self.czy_wycelowane_podniesienie )
        and ( Self.lufy_t[ i ].czy_wycelowane_podniesienie ) then
        Self.czy_wycelowane_podniesienie := true;

    end;
  //---//for i := 0 to Length( lufy_t ) - 1 do

  //ztr := 0;
  //przynajmniej_jedna_lufa_wycelowa³a := false;
  //
  //for i := 0 to Length( Self.lufy_t ) - 1 do
  //  begin
  //
  //    ztr := ztr +
  //      Podniesienie_Kierunek_Zmieñ_Lufa( Self.lufy_t[ i ] );
  //
  //    if    ( not przynajmniej_jedna_lufa_wycelowa³a )
  //      and ( Self.lufy_t[ i ].czy_wycelowane_podniesienie ) then
  //      przynajmniej_jedna_lufa_wycelowa³a := true;
  //
  //  end;
  ////---//for i := 0 to Length( lufy_t ) - 1 do
  //
  //
  //// Œrednia arytmetyczna z wycelowania podniesienia wszystkich luf broni.
  //if Length( Self.lufy_t ) > 0 then
  //  ztr := ztr / Length( Self.lufy_t );
  //
  ////Self.celownik_linia.LineWidth := Self.celownik_linia_szerokoœæ_obrót + ztr;
  //
  //
  //// Je¿eli przynajmniej jedna lufa osi¹gnê³a wymagany do strza³u k¹t to linia jest ci¹g³a.
  //if not przynajmniej_jedna_lufa_wycelowa³a then
  //  Self.celownik_linia.LinePattern := $CCCC // Punktowana.
  //else//if not przynajmniej_jedna_lufa_wycelowa³a then
  //  Self.celownik_linia.LinePattern := $FFFF; // Ci¹g³a.
  //
  //Self.celownik_linia_bez_falowania.LinePattern := Self.celownik_linia.LinePattern;
  //Self.celownik_linia_bez_falowania.LineWidth := Self.celownik_linia.LineWidth;


  //if    ( Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Pocisk ] )
  //  and ( Length( Self.lufy_t ) > 0 ) then
  //  Self.celownik_linia.PitchAngle := -Self.lufy_t[ 0 ].PitchAngle;

  if    ( Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Pocisk ] )
    and ( Length( Self.lufy_t ) > 0 ) then
    begin

      if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Pocisk ] then
        Self.celownik_linia.PitchAngle := Self.lufy_t[ 0 ].PitchAngle
      else//if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Pocisk ] then
        begin

          // Gdy lot pocisku jest liniowy lina celownicza wskazuje cel, gdy jest paraboliczny linia celownicza jest pozioma i wskazuje zasiêg.

          if Self.statek__tw.celowanie__bronie_osobno then
            zt_gt_lines := Self.cel_linia
          else//if Self.statek__tw.celowanie__bronie_osobno then
            zt_gt_lines := Self.statek__tw.celownicza_linia;


          if Self.DistanceTo(  zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector )  ) > TArtyleria(Self).zasiêg_od_parabola then
            begin

              Self.celownik_linia.PitchAngle := 0;
              Self.czy_lot_parabol¹ := true;

            end
          else//if Self.DistanceTo(  zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector )  ) > TArtyleria(Self).zasiêg_od_parabola then
            begin

              Self.celownik_linia.PitchAngle := Self.lufy_t[ 0 ].PitchAngle;
              Self.czy_lot_parabol¹ := false;

            end
          //---//if Self.DistanceTo(  zt_gt_lines.LocalToAbsolute( zt_gt_lines.Nodes[ 1 ].AsAffineVector )  ) > TArtyleria(Self).zasiêg_od_parabola then

        end;
      //---//if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Pocisk ] then

    end;
  //---//if    ( Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Pocisk ] ) (...)

end;//---//Funkcja Podniesienie_Kierunek_Zmieñ().

//Funkcja Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj().
procedure TDzia³o.Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj( const celownik_linia_widocznoœæ_f : boolean = true );
begin

  //
  // Funkcja ustawia k¹t podniesienia linii celowniczej nieruchomej na podstawie linii celowniczej faluj¹cej.
  //

  if Self.statek__tw.celownicze_linie_unoœ then
    begin

      if not Self.czy_lot_parabol¹ then
        Self.celownik_linia_bez_falowania.Direction.Y := Self.celownik_linia.AbsoluteDirection.Y
        //Self.celownik_linia_bez_falowania.AbsoluteDirection := Self.celownik_linia.AbsoluteDirection
      else//if not Self.czy_lot_parabol¹ then
        Self.celownik_linia_bez_falowania.Direction.Y := 0; // Je¿eli nie obraca dzia³ linia siê nie wypoziomuje.


      if Self.celownik_linia__widoczne then
        begin

          Self.celownik_linia.Visible := ( not Self.czy_lot_parabol¹ ) and celownik_linia_widocznoœæ_f;
          Self.celownik_linia_bez_falowania.Visible := ( not Self.celownik_linia.Visible ) and celownik_linia_widocznoœæ_f;

        end;
      //---//if Self.celownik_linia__widoczne then

    end
  else//if Self.statek__tw.celownicze_linie_unoœ then
    begin

      Self.celownik_linia_bez_falowania.Direction.Y := 0; // Je¿eli nie obraca dzia³ linia siê nie wypoziomuje.

      Self.celownik_linia.Visible := false;
      Self.celownik_linia_bez_falowania.Visible := celownik_linia_widocznoœæ_f;

    end;
  //---//if Self.statek__tw.celownicze_linie_unoœ then

end;//---//Funkcja Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj().

//Funkcja Wygl¹d_Elementy__Noc_Zmieñ().
procedure TDzia³o.Wygl¹d_Elementy__Noc_Zmieñ( const dzieñ_jasnoœæ_f : real; const wygl¹d_elementy__kolor_noc_zmieñ_f : TWygl¹d_Elementy__Kolor_Noc_Zmieñ );
begin

  if @wygl¹d_elementy__kolor_noc_zmieñ_f <> nil then
    begin

      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.podstawa.Material, dzieñ_jasnoœæ_f );
      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.korpus__broñ.Material, dzieñ_jasnoœæ_f );
      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.korpus_przód.Material, dzieñ_jasnoœæ_f );

    end;
  //---//if @wygl¹d_elementy__kolor_noc_zmieñ_f <> nil then


  TTorpedy_Wyrzutnia(Self).Wygl¹d_Elementy__Noc_Zmieñ( dzieñ_jasnoœæ_f, wygl¹d_elementy__kolor_noc_zmieñ_f );

end;//---//Funkcja Wygl¹d_Elementy__Noc_Zmieñ().

//Funkcja Parametry_Odczytaj().
function TDzia³o.Parametry_Odczytaj( const odstêp_f : string; const t³umaczenie_komunikaty_r_f : TT³umaczenie_Komunikaty_r; const dane_wszystkie_f : boolean = false ) : string;
//var
//  i : integer;
begin

  //
  // Funkcja wypisuje dane (parametry).
  //
  // Zwraca napis z danymi (parametrami).
  //
  // Parametry:
  //   odstêp_f
  //   t³umaczenie_komunikaty_r_f
  //   dane_wszystkie_f:
  //     false - wypisuje tylko dane podstawowe.
  //     true - wypisujewszystkie dane.
  //

  Result :=
    TTorpedy_Wyrzutnia(Self).Parametry_Odczytaj( odstêp_f, t³umaczenie_komunikaty_r_f ) +
    #13 + #10 + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__podniesienie_k¹t_maksymalny + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.podniesienie_k¹t_maksymalny )  ) +
    #13 + #10 + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__podniesienie_k¹t_minimalny + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.podniesienie_k¹t_minimalny )  ) +
    #13 + #10 + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__podniesienie_k¹t_pocz¹tkowy + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.podniesienie_k¹t_pocz¹tkowy )  ) +
    #13 + #10 + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__podniesienie_szybkoœæ + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.podniesienie_szybkoœæ )  );


  //for i := 0 to Length( Self.obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny ) - 1 do //???
  //  Result := Result +
  //    #13 + #10 + odstêp_f + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny + ' ' + Trim(  FormatFloat( '### ### ##0', i + 1 )  ) + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny[ i ] )  );

end;//---//Funkcja Parametry_Odczytaj().

//Konstruktor klasy TArtyleria.
constructor TArtyleria.Create( AOwner : TGLBaseSceneObject; AStatek : TStatek; gl_collision_mmanager_f : TGLCollisionManager; efekt__element_uszkodzenie_gl_thor_fx_manager_f : TGLThorFXManager; const lufy_iloœæ_f : integer; const lufy_podniesienie_k¹t_f : real; const statek_create_funkcje_f : TStatek_Create_Funkcje );
begin

  inherited Create( AOwner, AStatek, gl_collision_mmanager_f, efekt__element_uszkodzenie_gl_thor_fx_manager_f, lufy_iloœæ_f, lufy_podniesienie_k¹t_f, statek_create_funkcje_f );


  Self.obrót_szybkoœæ := 2.5; // 2.5

  Self.podniesienie_k¹t_maksymalny := 60; // 60 // Dla k¹ta innego ni¿ 60 maksymalny zasiêg pocisk osi¹ga na dnie.
  //Self.podniesienie_k¹t_minimalny := -10;
  //Self.podniesienie_k¹t_zadany := 0;
  //Self.podniesienie_k¹t_zadany_bezwzglêdny := 0;
  Self.podniesienie_szybkoœæ := 25.0;

  //Self.amunicja_iloœæ := 1500;
  //Self.amunicja_iloœæ_pocz¹tkowa := Self.amunicja_iloœæ;
  //Self.amunicja_uzbrajanie_odleg³oœæ := 1;
  //Self.obra¿enia_zadawane := 1;
  Self.prze³adowanie_czas_milisekundy__broñ := 3000; // 7000 //???
  Self.strza³_od_blokada_milisekundy := 500;
  Self.zasiêg__broñ := 32; // 12 20
  Self.zasiêg_od_parabola := Self.zasiêg__broñ * 0.3; // 30 procent ca³kowitego zasiêgu.

  Self.amunicja_rodzaj := Typy_Wspolne.ar_Artyleria;

  Self.celownik_linia.Nodes[ 1 ].Z := -Self.zasiêg__broñ; // Zasiêg dzia³a. Aktualizacja wartoœci.
  Self.celownik_linia_bez_falowania.Nodes[ 1 ].Z := Self.celownik_linia.Nodes[ 1 ].Z;

end;//---//Konstruktor klasy TArtyleria.

//Funkcja Parametry_Odczytaj().
function TArtyleria.Parametry_Odczytaj( const odstêp_f : string; const t³umaczenie_komunikaty_r_f : TT³umaczenie_Komunikaty_r; const dane_wszystkie_f : boolean = false ) : string;
begin

  //
  // Funkcja wypisuje dane (parametry).
  //
  // Zwraca napis z danymi (parametrami).
  //
  // Parametry:
  //   odstêp_f
  //   t³umaczenie_komunikaty_r_f
  //   dane_wszystkie_f:
  //     false - wypisuje tylko dane podstawowe.
  //     true - wypisujewszystkie dane.
  //

  Result :=
    TDzia³o(Self).Parametry_Odczytaj( odstêp_f, t³umaczenie_komunikaty_r_f ) +
        #13 + #10 + odstêp_f + t³umaczenie_komunikaty_r_f.parametry_odczytaj__zasiêg_od_parabola + ': ' + Trim(  FormatFloat( '### ### ##0.0000', Self.zasiêg_od_parabola )  );
    
end;//---//Funkcja Parametry_Odczytaj().

//Konstruktor klasy TAmunicja.
constructor TAmunicja.Create( AOwner : TGLBaseSceneObject; ALufa : TLufa; const obracaj_dzia³a_f : boolean; cel_wspó³rzêdne_f : GLS.VectorGeometry.TAffineVector; const amunicja_prêdkoœæ_zakresy_r_f : TAmunicja_Prêdkoœæ_Zakresy_r; gl_collision_mmanager_f : TGLCollisionManager );

  //Funkcja xNx__Równanie_Paraboli_3_Punkty() w Konstruktor klasy TAmunicja.
  function xNx__Równanie_Paraboli_3_Punkty( x1, y1, x2, y2, x3, y3 : real; var a, b, c : real ) : boolean;
  var
    sx1,
    sx2,
    sx3
      : real;
  begin

    Exit; // Obliczenia dla lotu parabol¹ - wersja 1. Nieu¿ywane.

    //
    // Funkcja wylicza parametry równania paraboli przechodz¹cej przez 3 punkty.
    //
    // Zwraca prawdê gdy nie napotkano b³êdów podczas wyliczania parametrów równania paraboli przechodz¹cej przez 3 punkty.
    //
    // y = a * x^2 + b * x + c
    //
    // P1( -4, 1 ), P2( -3, -2 ), P3( 1, -2 ) // P( x, y )
    //
    // 16a - 4b + c = 1 // x1^2 * a + x1 * b + c = y1
    // 9a - 3b + c = 2 // x2^2 * a + x2 * b + c = y2
    // a + b + c = -2 // x3^2 * a + x3 * b + c = y3
    //
    // y = 3/5*x^2 + 6/5*x - 19/5
    // y = 0.6 * x^2 + 1.2 * x - 3.8
    //

    Result := false;

    sx1 := Sqr( x1 );
    sx2 := Sqr( x2 );
    sx3 := Sqr( x3 );

    if   (  ( x2 - x1 ) * ( x1 - x3 ) = 0  ) // Z równania na a.
      or (  ( x2 - x1 ) * ( x1 - x3 ) = 0  )
      or (  ( sx3 - sx1 ) - ( sx1 - sx2 ) / ( x2 - x1 ) * ( x1 - x3 ) = 0  )
      or (  x2 - x1 = 0  ) then // Z równania na b.
      Exit;

    //if    (  ( x2 - x1 ) * ( x1 - x3 ) <> 0  )
    //  and (  ( x2 - x1 ) * ( x1 - x3 )  <> 0  )
    //  and (  ( sx3 - sx1 ) - ( sx1 - sx2 ) / ( x2 - x1 ) * ( x1 - x3 ) <> 0  ) then
      a := (  ( y2 - y1  ) / ( x2 - x1 ) * ( x1 - x3 ) - y1 + y3  ) / (  ( sx3 - sx1 ) - ( sx1 - sx2 ) / ( x2 - x1 ) * ( x1 - x3 )  );

    //if x2 - x1 <> 0 then
      b := (  a * ( sx1 - sx2 ) + y2 - y1  ) / ( x2 - x1 );

    c := y1 - a * sx1 - b * x1;


    Result := true;

    //Statki_Form.Caption := FloatToStr( a ) + ' ' + FloatToStr( b ) + ' ' + FloatToStr( c );

    {
    c := y1 - Sqr( x1 ) * a - x1 * b;
    b := ( y2 - Sqr( x2 ) * a - c ) / x2;
    a := ( y3 - x3 * b - c ) / Sqr( x3 );

    sx1 := Sqr( x1 );
    sx2 := Sqr( x2 );
    sx3 := Sqr( x3 );

    c := y1 - a * sx1 - b * x1;
    b := ( y2 - a * sx2 - c ) / x2;
    a := ( y3 - b * x3 - c ) / sx3;

    // Z c do b.
    b * x2 := y2 - a * sx2 - c;
    b * x2 := y2 - a * sx2 - y1 + a * sx1 + b * x1;
    b * x2 - b * x1 := a * sx1 - a * sx2 + y2 - y1;
    b * ( x2 - x1 ) := a * ( sx1 - sx2 ) + y2 - y1;
    b := (  a * ( sx1 - sx2 ) + y2 - y1  ) / ( x2 - x1 );

    // Z c do a
    a * sx3 := y3 - b * x3 - c;
    a * sx3 := y3 - b * x3 - y1 + a * sx1 + b * x1;
    a * sx3 - a * sx1 := b * x1 - b * x3 - y1 + y3;
    a * ( sx3 - sx1 ) := b * ( x1 - x3 ) - y1 + y3;

    // Z b do a (po c)
    a * ( sx3 - sx1 ) := b * ( x1 - x3 ) - y1 + y3;
    a * ( sx3 - sx1 ) := (  a * ( sx1 - sx2 ) + y2 - y1  ) / ( x2 - x1 ) * ( x1 - x3 ) - y1 + y3;

    a * ( sx3 - sx1 ) := a * ( sx1 - sx2 ) / ( x2 - x1 ) * ( x1 - x3 ) + ( y2 - y1  ) / ( x2 - x1 ) * ( x1 - x3 ) - y1 + y3;
    a * ( sx3 - sx1 ) - a * ( sx1 - sx2 ) / ( x2 - x1 ) * ( x1 - x3 ) := ( y2 - y1  ) / ( x2 - x1 ) * ( x1 - x3 ) - y1 + y3;
    a * (  ( sx3 - sx1 ) - ( sx1 - sx2 ) / ( x2 - x1 ) * ( x1 - x3 )  ) := ( y2 - y1  ) / ( x2 - x1 ) * ( x1 - x3 ) - y1 + y3;
    a := (  ( y2 - y1  ) / ( x2 - x1 ) * ( x1 - x3 ) - y1 + y3  ) / (  ( sx3 - sx1 ) - ( sx1 - sx2 ) / ( x2 - x1 ) * ( x1 - x3 )  );
    }

  end;//---//Funkcja xNx__Równanie_Paraboli_3_Punkty() w Konstruktor klasy TAmunicja.

var
  ztr,
  obra¿enia_zasiêg_l
  //cel_oddalenie_l
    : real;
  //czy_lot_parabol¹_l : boolean;
begin//Konstruktor klasy TAmunicja.

  inherited Create( AOwner ); // Nie mo¿e byæ ALufa gdy¿ po zwolnieniu statku pojawiaj¹ siê b³êdy dostêpu je¿eli amunicja wystrzelona z tego statku nadal jest na scenie.


  Self.id_gracz := ALufa.statek__lu.id_gracz;
  Self.id_statek := ALufa.statek__lu.id_statek;
  Self.statek__am := ALufa.statek__lu;

  inc( id_amunicja_g ); // Po osi¹gniêciu maksymalnej wartoœci powinno ustawiæ siê na wartoœæ minimaln¹ (bez b³êdów).
  Self.id_amunicja := id_amunicja_g; //DateTimeToUnix( Now() );

  Self.amunicja_lot_parabol¹_etap := alpe_Brak;
  Self.amunicja_uzbrajanie_odleg³oœæ := ALufa.dzia³o.amunicja_uzbrajanie_odleg³oœæ;
  Self.cel_odleg³oœæ := ALufa.wylot_pozycja.DistanceTo( cel_wspó³rzêdne_f ); //ALufa.DistanceTo( cel_wspó³rzêdne_f )
  //Self.dzia³o_podniesienie_k¹t_maksymalny := TDzia³o(ALufa.dzia³o).podniesienie_k¹t_maksymalny;

  if TDzia³o(ALufa.dzia³o).podniesienie_k¹t_maksymalny <> TDzia³o(ALufa.dzia³o).podniesienie_k¹t_minimalny then
    Self.dzia³o_podniesienie_procent_k¹ta_maksymalnego := ( TDzia³o(ALufa.dzia³o).podniesienie_k¹t_zadany - TDzia³o(ALufa.dzia³o).podniesienie_k¹t_minimalny ) * 100 / ( TDzia³o(ALufa.dzia³o).podniesienie_k¹t_maksymalny - TDzia³o(ALufa.dzia³o).podniesienie_k¹t_minimalny )
  else//if TDzia³o(ALufa.dzia³o).podniesienie_k¹t_maksymalny <> TDzia³o(ALufa.dzia³o).podniesienie_k¹t_minimalny then
    Self.dzia³o_podniesienie_procent_k¹ta_maksymalnego := 100;

  Self.lot_parabol¹__opadanie__k¹t_wzglêdem_wody := 1360;

  Self.obra¿enia_zadawane_wspó³czynnik := 1;
  Self.obra¿enia_zadawane_wspó³czynnik_zmodyfikowany := Self.obra¿enia_zadawane_wspó³czynnik;
  //Self.parabola_k¹t_lotu_pocz¹tkowy := 0;
  //Self.parabola_k¹t_lotu_wspó³czynnik := 0;
  Self.prêdkoœæ__amunicja := amunicja_prêdkoœæ_zakresy_r_f.prêdkoœæ__apz;
  Self.prêdkoœæ_opadania := 0; // 0.0035
  Self.prêdkoœæ_opadania_wspó³czynnik := amunicja_prêdkoœæ_zakresy_r_f.prêdkoœæ_opadania_wspó³czynnik;
  Self.strza³_od_blokada_dystans := 1;
  Self.statek_prêdkoœæ := 0;
  //Self.zanurzenie_g³êbokoœæ_po_wpadniêciu_do_wody := -5;
  Self.zanurzenie_g³êbokoœæ_zadana := -0.3; // -0.25

  Self.czy_efekt_wpadniêcia_do_wody := false;
  Self.czy_jasna_linia_wyd³u¿ona := false;
  Self.czy_lot_parabol¹ := false;
  Self.czy_poza_luf¹ := false;
  Self.czy_uzbrojona := false;

  GLS.VectorGeometry.MakeVector( Self.uzbrojenie_wspó³rzêdne_vector, 0, 0, 0 );

  Self.pozycja_celu := TGLSphere.Create( Self );
  Self.pozycja_celu.Parent := AOwner; // Aby pozycja startowa siê nie przesuwa³a.
  Self.pozycja_celu.Pickable := false;
  Self.pozycja_celu.Radius := 0.15;
  Self.pozycja_celu.Visible := false;
  Self.pozycja_celu.AbsolutePosition := ALufa.wylot_pozycja.AbsolutePosition;

  Self.pozycja_woda := TGLSphere.Create( Self );
  Self.pozycja_woda.Parent := AOwner; // Aby pozycja startowa siê nie przesuwa³a.
  Self.pozycja_woda.Pickable := false;
  Self.pozycja_woda.Radius := 0.15;
  Self.pozycja_woda.Visible := false;
  Self.pozycja_woda.AbsolutePosition := ALufa.wylot_pozycja.AbsolutePosition;


  if ALufa.HasParent then
    begin

      obra¿enia_zasiêg_l := ALufa.dzia³o.obra¿enia_zasiêg;

      Self.skala__amunicja := TTorpedy_Wyrzutnia(ALufa.dzia³o.elementy_wizualne_gl_dummy_cube).Scale.X; // Przy za³o¿eniu, ¿e skalowanie jest proporcjonalne.

      if Self.skala__amunicja = 0 then //???
        Self.skala__amunicja := 1;


      Self.amunicja_rodzaj := TTorpedy_Wyrzutnia(ALufa.dzia³o).amunicja_rodzaj;
      Self.obra¿enia_zadawane := TTorpedy_Wyrzutnia(ALufa.dzia³o).obra¿enia_zadawane;
      Self.zasiêg__amunicja := TTorpedy_Wyrzutnia(ALufa.dzia³o).zasiêg__broñ;

      if ALufa.dzia³o is TArtyleria then
        begin

          Self.czy_lot_parabol¹ := TDzia³o(ALufa.dzia³o).czy_lot_parabol¹;

          if Self.czy_lot_parabol¹ then
            begin

              Self.amunicja_lot_parabol¹_etap := alpe_Wystrzelenie;

              // Przy aktualnym podniesieniu lufy strza³ bêdzie oddany na procent zasiêgu.
              if    ( TDzia³o(ALufa.dzia³o).podniesienie_k¹t_maksymalny <> TDzia³o(ALufa.dzia³o).podniesienie_k¹t_minimalny )
                and (  Abs( TDzia³o(ALufa.dzia³o).podniesienie_k¹t_maksymalny - TDzia³o(ALufa.dzia³o).podniesienie_k¹t_minimalny ) <> 0  ) then
                ztr := // Procent uniesienia lufy.
                    100
                  //* ( -TDzia³o(ALufa.dzia³o).podniesienie_k¹t_minimalny + ALufa.PitchAngle )
                  * ( -TDzia³o(ALufa.dzia³o).podniesienie_k¹t_minimalny - ALufa.PitchAngle ) // Aktualny k¹t uniesienia lufy przesuniêty aby k¹t minimalny wynosi³ 0 (minus, gdy¿ tutaj podniesienie w górê ma wartoœci ujemne).
                  / (  Abs( TDzia³o(ALufa.dzia³o).podniesienie_k¹t_maksymalny - TDzia³o(ALufa.dzia³o).podniesienie_k¹t_minimalny )  ) // Zakres podnoszenia lufy.
              else//if    ( TDzia³o(ALufa.dzia³o).podniesienie_k¹t_maksymalny <> TDzia³o(ALufa.dzia³o).podniesienie_k¹t_minimalny ) (...)
                ztr := 100;

              Self.cel_odleg³oœæ := Self.zasiêg__amunicja * ztr * 0.01;


              // Inicjuje pocz¹tkow¹ pozycjê wskaŸnika celu do wyliczenia pozycji celu przy opuszczaniu lufy przez amunicjê.
              //Self.pozycja_celu.Visible := true;
              Self.pozycja_celu.Material.FrontProperties.Emission.Color := GLS.Color.clrGreen;
              //Self.pozycja_celu.AbsolutePosition := TDzia³o(ALufa.dzia³o).AbsolutePosition;

              Self.pozycja_celu.Parent := ALufa.dzia³o;
              Self.pozycja_celu.Position := ALufa.Position;
              Self.pozycja_celu.Position.X := Self.pozycja_celu.Position.X * ALufa.dzia³o.skala__broñ; // Wspó³rzêdna nie uwzglêdnia wielkoœci dzia³a, pozycja_celu s¹ zbyt blisko siebie i amunicja zderza siê w locie (gdy s¹siednie lufy strzelaj¹ równoczeœnie).
              Self.pozycja_celu.Position.Z := 0;

              Self.dzia³o_pozycja_absolutna_vector := Self.pozycja_celu.AbsolutePosition; // Lepiej chyba tak.

              Self.pozycja_celu.Parent := AOwner;
              Self.pozycja_celu.AbsolutePosition := Self.dzia³o_pozycja_absolutna_vector;
              //---// Inicjuje pocz¹tkow¹ pozycjê wskaŸnika celu do wyliczenia pozycji celu przy opuszczaniu lufy przez amunicjê.


              //Self.dzia³o_pozycja_absolutna_vector := TDzia³o(ALufa.dzia³o).AbsolutePosition;

              Self.pozycja_woda.Position.Y := Self.dzia³o_pozycja_absolutna_vector.Y;

            end;
          //---//if Self.czy_lot_parabol¹ then

          {$region 'Obliczenia dla lotu parabol¹ - wersja 1.'}
          //Self.zasiêg_od_parabola := TArtyleria(ALufa.dzia³o).zasiêg_od_parabola;
          //
          //czy_lot_parabol¹_l := false;
          //
          //if obracaj_dzia³a_f then // Przy zablokowanym obrocie dzia³ wyliczanie paraboli odbywa³o siê zawsze do aktualnej pozycji celu.
          //  begin
          //
          //    //cel_oddalenie_l := TDzia³o(ALufa.dzia³o).korpus__broñ.DistanceTo( cel_wspó³rzêdne_f )
          //    //cel_oddalenie_l := ALufa.DistanceTo( cel_wspó³rzêdne_f );
          //
          //    if ALufa.DistanceTo( cel_wspó³rzêdne_f ) > Self.zasiêg_od_parabola then
          //      czy_lot_parabol¹_l := true;
          //
          //  end
          //else//if obracaj_dzia³a_f then
          //  begin
          //
          //    czy_lot_parabol¹_l := true;
          //
          //    //// Przy aktualnym podniesieniu lufy strza³ bêdzie oddany na procent zasiêgu.
          //    //if TDzia³o(ALufa.dzia³o).podniesienie_k¹t_maksymalny <> TDzia³o(ALufa.dzia³o).podniesienie_k¹t_minimalny then
          //    //  cel_oddalenie_l := 100 * ALufa.PitchAngle / Abs( TDzia³o(ALufa.dzia³o).podniesienie_k¹t_maksymalny - TDzia³o(ALufa.dzia³o).podniesienie_k¹t_minimalny )
          //    //else//if TDzia³o(ALufa.dzia³o).podniesienie_k¹t_maksymalny <> TDzia³o(ALufa.dzia³o).podniesienie_k¹t_minimalny then
          //    //  cel_oddalenie_l := 0;
          //    //
          //    //cel_oddalenie_l := Self.zasiêg__amunicja * cel_oddalenie_l / 100;
          //
          //    cel_wspó³rzêdne_f.Y := 0; // Aby pozycja celu nie zmienia³a parametrów.
          //
          //  end;
          ////---//if obracaj_dzia³a_f then
          //
          //// Trafia trochê za daleko.
          ////if cel_oddalenie_l > 1 then
          ////  cel_oddalenie_l := cel_oddalenie_l - 1;
          ////cel_oddalenie_l := cel_oddalenie_l - cel_oddalenie_l * 0.025;
          ////cel_wspó³rzêdne_f.Y := cel_wspó³rzêdne_f.Y - cel_wspó³rzêdne_f.Y * 0.1;
          //////w miarê dobrze //???
          //////      cel_oddalenie_l := cel_oddalenie_l - Self.zasiêg__amunicja * 0.03; //0.05
          //////
          //////      if cel_oddalenie_l < 0 then
          //////        cel_oddalenie_l := 0;
          //
          //
          //
          ////if cel_oddalenie_l > Self.zasiêg_od_parabola then
          //if czy_lot_parabol¹_l then
          //  begin
          //
          //    // Ze wzglêdu na precyzjê k¹ta podniesienia dystans jest liczony wed³ug k¹ta lufy (inaczej od razu strzela na wskazany celem dystans).
          //    // Przy aktualnym podniesieniu lufy strza³ bêdzie oddany na procent zasiêgu.
          //    // Pociski mog¹ zalecieæ dalej ni¿ zasiêg w linii prostej gdy cel jest ponad wod¹ (y dodatni).
          //    // cel_oddalenie_l - tutaj tymczasowo jako procent wychylenia lufy.
          //    if TDzia³o(ALufa.dzia³o).podniesienie_k¹t_maksymalny <> 0 then
          //      //cel_oddalenie_l := 100 * ( -ALufa.PitchAngle ) / Abs( TDzia³o(ALufa.dzia³o).podniesienie_k¹t_maksymalny )
          //      cel_oddalenie_l := 100 * ( -ALufa.PitchAngle - TDzia³o(ALufa.dzia³o).podniesienie_k¹t_minimalny ) / Abs( TDzia³o(ALufa.dzia³o).podniesienie_k¹t_maksymalny - TDzia³o(ALufa.dzia³o).podniesienie_k¹t_minimalny ) // 100 * (k¹t aktualny - k¹t minimalny) / zakres k¹t
          //    else//if TDzia³o(ALufa.dzia³o).podniesienie_k¹t_maksymalny <> TDzia³o(ALufa.dzia³o).podniesienie_k¹t_minimalny then
          //      cel_oddalenie_l := 0;
          //
          //    cel_oddalenie_l := Self.zasiêg__amunicja * cel_oddalenie_l * 0.01;
          //
          //
          //    Self.czy_lot_parabol¹ := true;
          //    Self.amunicja_lot_parabol¹_etap := alpe_Wystrzelenie;
          //
          //
          //    if cel_oddalenie_l > Self.zasiêg__amunicja then
          //      cel_oddalenie_l := Self.zasiêg__amunicja;
          //
          //
          //    Self.parabola_k¹t_lotu_pocz¹tkowy := ALufa.PitchAngle;
          //
          //    if cel_oddalenie_l <> 0 then
          //      Self.parabola_k¹t_lotu_wspó³czynnik := Abs( 80 - ALufa.PitchAngle ) / cel_oddalenie_l; // 80 - k¹t do jakiego ma siê odchyliæ podczas opadania (w dó³ s¹ stopnie dodatnie).
          //
          //    ztr := ALufa.wylot_pozycja.AbsolutePosition.Y + cel_oddalenie_l * 0.4;
          //
          //    if ztr < cel_wspó³rzêdne_f.Y then // Gdy cel by³ wysoko parabola by³a wygiêta w dó³.
          //      ztr := ztr + cel_wspó³rzêdne_f.Y;
          //
          //    if not xNx__Równanie_Paraboli_3_Punkty(
          //               0, ALufa.wylot_pozycja.AbsolutePosition.Y, // Punkt wylotu - wa¿na jest wysokoœæ (x dla paraboli to bêdzie przebyty dystans od dzia³a).
          //               cel_oddalenie_l * 0.5, ztr, // Punkt w trakcie lotu. //???
          //               cel_oddalenie_l, cel_wspó³rzêdne_f.Y, // Punkt celu (x dla paraboli to bêdzie dystans do celu).
          //               Self.parabola_równanie__a, Self.parabola_równanie__b, Self.parabola_równanie__c
          //             ) then
          //      begin
          //
          //        Self.parabola_k¹t_lotu_wspó³czynnik := 0;
          //        Self.czy_lot_parabol¹ := false;
          //        Self.amunicja_lot_parabol¹_etap := alpe_Brak;
          //        Self.parabola_równanie__a := 0;
          //        Self.parabola_równanie__b := 0;
          //        Self.parabola_równanie__c := 0;
          //
          //      end;
          //    //---//if not xNx__Równanie_Paraboli_3_Punkty( (...)
          //
          //  end;
          ////---//if czy_lot_parabol¹_l then
          {$endregion 'Obliczenia dla lotu parabol¹ - wersja 1.'}

        end;
      //---//if ALufa.dzia³o is TArtyleria then

    end
  else//if ALufa.HasParent then
    begin

      obra¿enia_zasiêg_l := -1; // -1 - ustawi domyœln¹ wartoœæ.

      Self.amunicja_rodzaj := Typy_Wspolne.ar_Brak;
      Self.skala__amunicja := 1;

    end;
  //---//if ALufa.HasParent then

  //Self.statek_kierunek := 0;

  {$region 'Obliczenia dla lotu parabol¹ - wersja 1.'}
  //if not Self.czy_lot_parabol¹ then
  //  Self.prêdkoœæ_opadania_wspó³czynnik := 0.00003
  //else//if not Self.czy_lot_parabol¹ then
  //  Self.prêdkoœæ_opadania_wspó³czynnik := 0.003; // 0.003
  {$endregion 'Obliczenia dla lotu parabol¹ - wersja 1.'}

  Self.czy_pod_wod¹ := false;
  Self.czy_poza_zasiêgiem := false;
  //Self.czy_statek_dane := false;
  Self.czy_usun¹æ_amunicja := false;
  Self.czy_wynurzanie := false;


  Self.Parent := ALufa; //AOwner; // Rodzicem jest Gra_Obiekty_GLDummyCube aby kontener obiektu porusza³ siê po wspó³rzêdnych absolutnych sceny (nie lokalnych).
  //Self.Direction.AsAffineVector := TTorpedy_Wyrzutnia(ALufa.dzia³o).Direction.AsAffineVector;
  //Self.VisibleAtRunTime := true;
  //Self.ShowAxes := true;


  Self.korpus_opadanie_obrót_gl_dummy_cube := TGLDummyCube.Create( Self );
  Self.korpus_opadanie_obrót_gl_dummy_cube.Parent := Self;
  Self.korpus_opadanie_obrót_gl_dummy_cube.Pickable := false;
  Self.korpus_opadanie_obrót_gl_dummy_cube.EdgeColor.Color := GLS.Color.clrGreen;
  //Self.korpus_opadanie_obrót_gl_dummy_cube.VisibleAtRunTime := true;
  //Self.korpus_opadanie_obrót_gl_dummy_cube.ShowAxes := true;

  Self.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube := TGLDummyCube.Create( Self );
  Self.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.Parent := Self.korpus_opadanie_obrót_gl_dummy_cube;
  Self.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.Pickable := false;
  Self.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.EdgeColor.Color := GLS.Color.clrYellow;
  //Self.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.VisibleAtRunTime := true;
  //Self.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.ShowAxes := true;


  Self.torpeda_efekt_na_wodzie_gl_dummy_cube := TGLDummyCube.Create( Self );
  Self.torpeda_efekt_na_wodzie_gl_dummy_cube.Parent := nil;
  Self.torpeda_efekt_na_wodzie_gl_dummy_cube.Pickable := false;
  Self.torpeda_efekt_na_wodzie_gl_dummy_cube.EdgeColor.Color := GLS.Color.clrRed;
  //Self.torpeda_efekt_na_wodzie_gl_dummy_cube.VisibleAtRunTime := true;
  //Self.torpeda_efekt_na_wodzie_gl_dummy_cube.ShowAxes := true;


  Self.korpus__amunicja := Wyglad_Elementy.TSt_GLCylinder.Create( Self );
  Self.korpus__amunicja.Parent := Self.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.korpus__amunicja, Wyglad_Elementy.or_Amunicja );
  Wyglad_Elementy.Identyfikator_Elementu( Self.korpus__amunicja, Self.id_statek );


  if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe, Typy_Wspolne.ar_Torpeda ] then
    begin

      if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] then
        begin

          Self.prêdkoœæ__amunicja := amunicja_prêdkoœæ_zakresy_r_f.prêdkoœæ_torpeda; //Self.prêdkoœæ__amunicja * 0.05; //???
          Self.prêdkoœæ_wytracanie_wspó³czynnik := Self.prêdkoœæ__amunicja * 0.025; //??? 0.0005

        end
      else//if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] then
        begin

          Self.prêdkoœæ__amunicja := amunicja_prêdkoœæ_zakresy_r_f.prêdkoœæ_torpeda;
          Self.prêdkoœæ_opadania_wspó³czynnik := Self.prêdkoœæ_opadania_wspó³czynnik * 2;
          Self.prêdkoœæ_wytracanie_wspó³czynnik := Self.prêdkoœæ__amunicja * 0.5; // 0.01

        end;
      //---//if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] then


      Self.AbsolutePosition := ALufa.AbsolutePosition;
      Self.Position.Y := 0;

      //Self.strza³_od_blokada_dystans := Self.korpus__amunicja.Height + Self.korpus__amunicja.Height * 0.3; // Na pocz¹tku wykrywa dystans wiêkszy od d³ugoœci korpusu.
      Self.zanurzenie_g³êbokoœæ_po_wpadniêciu_do_wody := Self.korpus_opadanie_obrót_gl_dummy_cube.Position.Y * 0.5; // 0.25

      Self.korpus__amunicja.Height := ALufa.korpus__lufa.Height - ALufa.korpus__lufa.Height * 0.1; // Tak samo wyliczyæ wskaŸnik uzbrojenia amunicji.

    end
  else//if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe, Typy_Wspolne.ar_Torpeda ] then
    if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Pocisk ] then
      begin

        Self.prêdkoœæ_wytracanie_wspó³czynnik := Self.prêdkoœæ__amunicja * 0.05; // 0.001

        Self.AbsolutePosition := ALufa.wylot_pozycja.AbsolutePosition;

        {$region 'Obliczenia dla lotu parabol¹ - wersja 1.'}
        //if Self.czy_lot_parabol¹ then // Je¿eli lot odbywa siê po paraboli to wysokoœæ modyfikuje siê ze wzoru (a nie z kierunku lotu).
        //  begin
        //
        //    Self.Direction.Y := 0;
        //    Self.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle := -ALufa.PitchAngle;
        //
        //  end;
        ////---//if Self.czy_lot_parabol¹ then
        {$endregion 'Obliczenia dla lotu parabol¹ - wersja 1.'}


        if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Pocisk ] then
          begin

            Self.korpus__amunicja.Height := ALufa.korpus__lufa.Height * 0.3;

          end
        else//if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Pocisk ] then
          Self.korpus__amunicja.Height := ALufa.korpus__lufa.Height * 0.3;

      end;
    //---//if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Pocisk ] then


  Self.prêdkoœæ_pocz¹tkowa := Self.prêdkoœæ__amunicja;

  Self.strza³_od_blokada_dystans := Self.korpus__amunicja.Height;
  Self.strza³_od_blokada_dystans := Self.strza³_od_blokada_dystans * Self.skala__amunicja; // Dzia³o mo¿e byæ skalowane. Koryguje wartoœæ o skalê dzia³a.


  Self.AbsoluteDirection := ALufa.AbsoluteDirection;
  Self.Direction.AsVector := GLS.VectorGeometry.VectorNegate( Self.Direction.AsVector ); // Lepiej dzia³a.
  Self.opadanie_obrót_korekta_o_k¹t_na_granicy_zasiêgu := 0;
  Self.opadanie_obrót_korekta_o_ustawienie_pocz¹tkowe := 0;

  Self.korpus__amunicja.PitchAngle := 90; // 90


  //Self.korpus__amunicja.TopRadius := ( ALufa.korpus__lufa.TopRadius - ALufa.korpus__lufa.TopRadius * 0.2 ) * skala_l;
  Self.korpus__amunicja.TopRadius := ( ALufa.korpus__lufa.TopRadius - ALufa.korpus__lufa.TopRadius * 0.2 );
  Self.korpus__amunicja.BottomRadius := Self.korpus__amunicja.TopRadius;
  //Self.korpus__amunicja.Height := 1.25;

//  Self.korpus__amunicja.TopRadius := 0.05;
//  Self.korpus__amunicja.BottomRadius := Self.korpus__amunicja.TopRadius;
//  Self.korpus__amunicja.Height := 1.25;

  Self.czubek := Wyglad_Elementy.TSt_GLCone.Create( Self );
  Self.czubek.Parent := Self.korpus__amunicja.Parent;
  Self.czubek.BottomRadius := Self.korpus__amunicja.TopRadius;
  Self.czubek.PitchAngle := -Self.korpus__amunicja.PitchAngle;
  Self.czubek.Height := Self.czubek.BottomRadius;
  Self.czubek.Position.Z := ( Self.korpus__amunicja.Height + Self.czubek.Height ) * 0.5;
  //Self.czubek.Position.Y := ( Self.korpus__amunicja.Height + Self.czubek.Height ) * 0.5; //???
  Wyglad_Elementy.Obiekt_Rodzaj( Self.czubek, Wyglad_Elementy.or_Amunicja );
  Wyglad_Elementy.Identyfikator_Elementu( Self.czubek, Self.id_statek );


  Self.jasna_linia := Wyglad_Elementy.TSt_GLCylinder.Create( Self );
  Self.jasna_linia.Parent := Self.korpus__amunicja.Parent;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.jasna_linia, Wyglad_Elementy.or_Amunicja );
  Wyglad_Elementy.Identyfikator_Elementu( Self.jasna_linia, Self.id_statek );
  Self.jasna_linia.PitchAngle := Self.korpus__amunicja.PitchAngle;
  Self.jasna_linia.Height := Self.korpus__amunicja.Height;
  Self.jasna_linia.TopRadius := Self.korpus__amunicja.TopRadius * 0.1;
  Self.jasna_linia.BottomRadius := Self.korpus__amunicja.BottomRadius * 0.1;
  Self.jasna_linia.Material.FrontProperties.Emission.Color := GLS.Color.clrWhite;
  //Self.jasna_linia.Position.Y := Self.korpus__amunicja.TopRadius;
  //Self.jasna_linia.Height := Self.jasna_linia.Height * 2;
  //Self.jasna_linia.Position.Z := Self.korpus__amunicja.Height * 0.5 - Self.jasna_linia.Height * 0.5;

  Self.obra¿enia_zasiêg_st_gl_sphere := Wyglad_Elementy.TSt_GLSphere.Create( Self );
  Self.obra¿enia_zasiêg_st_gl_sphere.Parent := Self.korpus__amunicja.Parent;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.obra¿enia_zasiêg_st_gl_sphere, Wyglad_Elementy.or_Amunicja__Obra¿enia_Zasiêg );
  Wyglad_Elementy.Identyfikator_Elementu( Self.obra¿enia_zasiêg_st_gl_sphere, Self.id_statek );
  Self.obra¿enia_zasiêg_st_gl_sphere.Visible := false; // Je¿eli jest niewidoczna to te¿ wykrywa kolizje.
  Self.obra¿enia_zasiêg_st_gl_sphere.Material.PolygonMode := GLS.State.pmLines; // pmPoints - bardzo spowalnia grê.
  Self.obra¿enia_zasiêg_st_gl_sphere.Material.FrontProperties.Ambient.Color := GLS.Color.clrGreen;
  //Self.obra¿enia_zasiêg_st_gl_sphere.Material.BlendingMode := bmTransparency; // Przezroczystoœæ sprawia, ¿e widaæ przez wodê.
  //Self.obra¿enia_zasiêg_st_gl_sphere.Material.FrontProperties.Ambient.Color := GLS.Color.clrTransparent;
  //Self.obra¿enia_zasiêg_st_gl_sphere.Material.FrontProperties.Diffuse.SetColor( 1, 0, 0, 0.01 );
  //Self.obra¿enia_zasiêg_st_gl_sphere.Material.FrontProperties.Emission.Color := GLS.Color.clrTransparent;

  if   ( obra¿enia_zasiêg_l = -1 )
    or ( Self.skala__amunicja = 0 ) then
    begin

      if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa ] then
        Self.obra¿enia_zasiêg_st_gl_sphere.Radius := 1.5
      else//if Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa ] then
        Self.obra¿enia_zasiêg_st_gl_sphere.Radius := Self.korpus__amunicja.TopRadius * 0.1;

    end
  else//if   ( obra¿enia_zasiêg_l = -1 ) (...)
    Self.obra¿enia_zasiêg_st_gl_sphere.Radius := obra¿enia_zasiêg_l / Self.skala__amunicja;


  Self.pozycja_startowa := TGLSphere.Create( Self ); //???
  Self.pozycja_startowa.Parent := Self.Parent; //Self.Parent AOwner; // Aby pozycja startowa siê nie przesuwa³a.
  Self.pozycja_startowa.Pickable := false;
  Self.pozycja_startowa.Radius := 0.15;
  Self.pozycja_startowa.Visible := false;
  Self.pozycja_startowa.AbsolutePosition := ALufa.wylot_pozycja.AbsolutePosition;
  //Self.pozycja_startowa.ShowAxes := true;


  // Dynamiczne dodanie zdarzenia kolizji.
  if gl_collision_mmanager_f <> nil then
    begin

      with TGLBCollision.Create( Self.korpus__amunicja.Behaviours ) do
        begin

          GroupIndex := 0;
          BoundingMode := cbmCube;
          Manager := gl_collision_mmanager_f;

        end;
      //---//with TGLBCollision.Create( Self.korpus__amunicja.Behaviours ) do

      with TGLBCollision.Create( Self.czubek.Behaviours ) do
        begin

          GroupIndex := 0;
          BoundingMode := cbmCube;
          Manager := gl_collision_mmanager_f;

        end;
      //---//with TGLBCollision.Create( Self.czubek.Behaviours ) do

      with TGLBCollision.Create( Self.jasna_linia.Behaviours ) do
        begin

          GroupIndex := 0;
          BoundingMode := cbmCube;
          Manager := gl_collision_mmanager_f;

        end;
      //---//with TGLBCollision.Create( Self.jasna_linia.Behaviours ) do

      if   ( Self.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa ] )
        or ( obra¿enia_zasiêg_l <> -1 ) then
        with TGLBCollision.Create( Self.obra¿enia_zasiêg_st_gl_sphere.Behaviours ) do
          begin

            GroupIndex := 0;
            BoundingMode := cbmSphere;
            Manager := gl_collision_mmanager_f;

          end;
        //---//with TGLBCollision.Create( Self.obra¿enia_zasiêg_st_gl_sphere.Behaviours ) do

    end;
  //---//if gl_collision_mmanager_f <> nil then

  //Self.pozycja_startowa.Position.Y := 0; // Zawsze poziom wody. // Zostanie zmodyfikowana po opuszczeniu amunicji z lufy.

  //Self.korpus__amunicja.Position.Y := Self.korpus_przód.Position.Y + Self.korpus__amunicja.TopRadius * 2;
  //Self.korpus__amunicja.Position.AsAffineVector := Self.korpus__amunicja.AbsoluteToLocal( ALufa.Position.AsAffineVector );
  //Self.korpus__amunicja.AbsolutePosition := ALufa.AbsolutePosition;
  //Self.korpus__amunicja.Position.Y := ALufa.AbsolutePosition.Y;


//  Self.pozycja_startowa.Position.X := 0;
//  Self.pozycja_startowa.Position.Z := 0;
//  //Self.pozycja_startowa.Position.Y := Self.pozycja_startowa.LocalToAbsolute( Self.pozycja_startowa.Position.AsAffineVector ).Y;
//  Self.pozycja_startowa.Position.Y := Self.pozycja_startowa.AbsoluteToLocal( Self.pozycja_startowa.Position.AsAffineVector ).Y;


  //Self.ShowAxes := true;
  //Self.korpus_opadanie_obrót_gl_dummy_cube.ShowAxes := true;
  //Self.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.ShowAxes := true;
  //Self.korpus__amunicja.ShowAxes := true;

end;//---//Konstruktor klasy TAmunicja.

//Konstruktor klasy TAmunicja - tylko do wyœwietlenia.
constructor TAmunicja.Create( AObiekty_Wieloosobowe_Amunicja_r : TObiekty_Wieloosobowe__Amunicja_r; AOwner : TGLBaseSceneObject );
//constructor TAmunicja.Create( AAmunicja : TAmunicja );
begin

  //
  // Konstruktor utworzy kopiê obiektu amunicja w zakresie wystarczaj¹cym tylko do wyœwietlenia.
  //

  inherited Create( AOwner );


  Self.id_amunicja := AObiekty_Wieloosobowe_Amunicja_r.id_wieloosobowe_amunicja__owo;
  Self.id_gracz := AObiekty_Wieloosobowe_Amunicja_r.id_gracz_am__owo;
  Self.id_statek := AObiekty_Wieloosobowe_Amunicja_r.id_statek_am__owo;
  Self.statek__am := nil;

  Self.amunicja_lot_parabol¹_etap := alpe_Brak;
  Self.amunicja_uzbrajanie_odleg³oœæ := 1;
  Self.cel_odleg³oœæ := 0;
  //Self.dzia³o_podniesienie_k¹t_maksymalny := 0;
  Self.dzia³o_podniesienie_procent_k¹ta_maksymalnego := 100;
  Self.obra¿enia_zadawane_wspó³czynnik := 1;
  Self.obra¿enia_zadawane_wspó³czynnik_zmodyfikowany := Self.obra¿enia_zadawane_wspó³czynnik;
  Self.opadanie_obrót_korekta_o_k¹t_na_granicy_zasiêgu := 0;
  Self.opadanie_obrót_korekta_o_ustawienie_pocz¹tkowe := 0;
  //Self.parabola_k¹t_lotu_pocz¹tkowy := 0;
  //Self.parabola_k¹t_lotu_wspó³czynnik := 0;
  Self.prêdkoœæ__amunicja := 0.01;
  Self.prêdkoœæ_opadania := 0;
  Self.prêdkoœæ_opadania_wspó³czynnik := 0;
  Self.prêdkoœæ_pocz¹tkowa := Self.prêdkoœæ__amunicja;
  Self.prêdkoœæ_wytracanie_wspó³czynnik := 0;
  Self.skala__amunicja := AObiekty_Wieloosobowe_Amunicja_r.skala__amunicja__owo;
  Self.statek_prêdkoœæ := 0;
  Self.zanurzenie_g³êbokoœæ_po_wpadniêciu_do_wody := -5;
  Self.zanurzenie_g³êbokoœæ_zadana := 0;

  Self.czy_efekt_wpadniêcia_do_wody := false;
  Self.czy_jasna_linia_wyd³u¿ona := false;
  Self.czy_lot_parabol¹ := false;

  Self.amunicja_rodzaj := AObiekty_Wieloosobowe_Amunicja_r.amunicja_rodzaj_am__owo;

  Self.czy_pod_wod¹ := false;
  Self.czy_poza_luf¹ := false;
  Self.czy_poza_zasiêgiem := false;
  //Self.czy_statek_dane := false;
  Self.czy_usun¹æ_amunicja := false;
  Self.czy_uzbrojona := false;
  Self.czy_wynurzanie := false;

  Self.strza³_od_blokada_dystans := 0;

  GLS.VectorGeometry.MakeVector( Self.uzbrojenie_wspó³rzêdne_vector, 0, 0, 0 );

  Self.Parent := AOwner; // Rodzicem jest scena aby kontener obiektu porusza³ siê po wspó³rzêdnych absolutnych sceny (nie lokalnych).
  //Self.Direction.AsAffineVector := TTorpedy_Wyrzutnia(ALufa.dzia³o).Direction.AsAffineVector;
  //Self.VisibleAtRunTime := true;
  Self.AbsolutePosition := AObiekty_Wieloosobowe_Amunicja_r.pozycja_am__owo;
  Self.Direction.AsVector := AObiekty_Wieloosobowe_Amunicja_r.kierunek_am__owo;


  Self.korpus_opadanie_obrót_gl_dummy_cube := TGLDummyCube.Create( Self );
  Self.korpus_opadanie_obrót_gl_dummy_cube.Parent := Self;
  Self.korpus_opadanie_obrót_gl_dummy_cube.Pickable := false;
  Self.korpus_opadanie_obrót_gl_dummy_cube.EdgeColor.Color := GLS.Color.clrGreen;
  //Self.korpus_opadanie_obrót_gl_dummy_cube.VisibleAtRunTime := true;


  Self.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube := TGLDummyCube.Create( Self );
  Self.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.Parent := AOwner;
  Self.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.Pickable := false;
  Self.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.EdgeColor.Color := GLS.Color.clrYellow;
  //Self.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.VisibleAtRunTime := true;


  Self.torpeda_efekt_na_wodzie_gl_dummy_cube := TGLDummyCube.Create( Self );
  Self.torpeda_efekt_na_wodzie_gl_dummy_cube.Parent := nil;
  Self.torpeda_efekt_na_wodzie_gl_dummy_cube.Pickable := false;
  Self.torpeda_efekt_na_wodzie_gl_dummy_cube.EdgeColor.Color := GLS.Color.clrRed;
  //Self.torpeda_efekt_na_wodzie_gl_dummy_cube.VisibleAtRunTime := true;
  //Self.torpeda_efekt_na_wodzie_gl_dummy_cube.ShowAxes := true;


  // Elementy wizualne s¹ potomkami Self.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube i ustawiane s¹ wed³ug jego pozycji i kierunku.
  Self.korpus__amunicja := Wyglad_Elementy.TSt_GLCylinder.Create( Self );
  Self.korpus__amunicja.Parent := Self.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube;
  Self.korpus__amunicja.Height := AObiekty_Wieloosobowe_Amunicja_r.korpus__Height__owo;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.korpus__amunicja, Wyglad_Elementy.or_Amunicja );
  Wyglad_Elementy.Identyfikator_Elementu( Self.korpus__amunicja, Self.id_statek );

  Self.korpus__amunicja.PitchAngle := 90;

  Self.korpus__amunicja.TopRadius := AObiekty_Wieloosobowe_Amunicja_r.korpus__TopRadius__owo;
  Self.korpus__amunicja.BottomRadius := AObiekty_Wieloosobowe_Amunicja_r.korpus__BottomRadius__owo;

  Self.czubek := Wyglad_Elementy.TSt_GLCone.Create( Self );
  Self.czubek.Parent := Self.korpus__amunicja.Parent;
  Self.czubek.BottomRadius := Self.korpus__amunicja.TopRadius;
  Self.czubek.PitchAngle := -Self.korpus__amunicja.PitchAngle;
  Self.czubek.Height := Self.czubek.BottomRadius;
  Self.czubek.Position.Z := ( Self.korpus__amunicja.Height + Self.czubek.Height ) * 0.5 ;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.czubek, Wyglad_Elementy.or_Amunicja );
  Wyglad_Elementy.Identyfikator_Elementu( Self.czubek, Self.id_statek );


  Self.jasna_linia := Wyglad_Elementy.TSt_GLCylinder.Create( Self );
  Self.jasna_linia.Parent := Self.korpus__amunicja.Parent;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.jasna_linia, Wyglad_Elementy.or_Amunicja );
  Wyglad_Elementy.Identyfikator_Elementu( Self.jasna_linia, Self.id_statek );
  Self.jasna_linia.PitchAngle := Self.korpus__amunicja.PitchAngle;
  Self.jasna_linia.Height := Self.korpus__amunicja.Height;
  Self.jasna_linia.TopRadius := Self.korpus__amunicja.TopRadius * 0.1;
  Self.jasna_linia.BottomRadius := Self.korpus__amunicja.BottomRadius * 0.1;
  //Self.jasna_linia.Material.FrontProperties.Emission.Color := GLS.Color.clrWhite;
  Self.jasna_linia.Material.FrontProperties.Emission.SetColor( 1, 0, 0, 1 ); // Klient na razie ma ca³y czas czerwony kolor.

  Self.obra¿enia_zasiêg_st_gl_sphere := Wyglad_Elementy.TSt_GLSphere.Create( Self );
  Self.obra¿enia_zasiêg_st_gl_sphere.Parent := Self.korpus__amunicja.Parent;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.obra¿enia_zasiêg_st_gl_sphere, Wyglad_Elementy.or_Amunicja__Obra¿enia_Zasiêg );
  Wyglad_Elementy.Identyfikator_Elementu( Self.obra¿enia_zasiêg_st_gl_sphere, Self.id_statek );

  Self.pozycja_celu := TGLSphere.Create( Self );
  Self.pozycja_celu.Parent := AOwner; // Aby pozycja startowa siê nie przesuwa³a.
  Self.pozycja_celu.Pickable := false;
  Self.pozycja_celu.Radius := 0.15;
  Self.pozycja_celu.Visible := false;
  Self.pozycja_celu.Position.SetPoint( 0, 0, 0 );

  if AObiekty_Wieloosobowe_Amunicja_r.czy_lot_parabol¹_am__owo then
    Self.pozycja_celu.Material.FrontProperties.Emission.Color := GLS.Color.clrGreen;


  Self.pozycja_startowa := TGLSphere.Create( Self );
  Self.pozycja_startowa.Parent := AOwner; // Aby pozycja startowa siê nie przesuwa³a.
  Self.pozycja_startowa.Pickable := false;
  Self.pozycja_startowa.Radius := 0.15;
  Self.pozycja_startowa.Visible := false;
  Self.pozycja_startowa.Position.SetPoint( 0, 0, 0 );

  Self.pozycja_woda := TGLSphere.Create( Self );
  Self.pozycja_woda.Parent := AOwner; // Aby pozycja startowa siê nie przesuwa³a.
  Self.pozycja_woda.Pickable := false;
  Self.pozycja_woda.Radius := 0.15;
  Self.pozycja_woda.Visible := false;
  Self.pozycja_woda.Position.SetPoint( 0, 0, 0 );

end;//---//Konstruktor klasy TAmunicja - tylko do wyœwietlenia.

//Destruktor klasy TAmunicja.
destructor TAmunicja.Destroy();
begin

  FreeAndNil( Self.czubek );
  FreeAndNil( Self.jasna_linia );
  FreeAndNil( Self.obra¿enia_zasiêg_st_gl_sphere );
  FreeAndNil( Self.korpus__amunicja );
  FreeAndNil( Self.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube );
  FreeAndNil( Self.korpus_opadanie_obrót_gl_dummy_cube );
  FreeAndNil( Self.torpeda_efekt_na_wodzie_gl_dummy_cube );
  FreeAndNil( Self.pozycja_celu );
  FreeAndNil( Self.pozycja_startowa );
  FreeAndNil( Self.pozycja_woda );

  inherited;

end;//---//Destruktor klasy TAmunicja.

//Funkcja Jasna_Linia_Pozycja_Z_Ustaw().
procedure TAmunicja.Jasna_Linia_Pozycja_Z_Ustaw();
begin

  Self.jasna_linia.Position.Z := Self.korpus__amunicja.Height * 0.5 - Self.jasna_linia.Height * 0.5;

end;//---//Funkcja Jasna_Linia_Pozycja_Z_Ustaw().

//Konstruktor klasy TKotwica.
constructor TKotwica.Create( AOwner : TGLBaseSceneObject; AStatek : TStatek; gl_collision_mmanager_f : TGLCollisionManager; efekt__element_uszkodzenie_gl_thor_fx_manager_f : TGLThorFXManager; x_f, y_f, z_f : real );
var
  id_statek_l : integer;
begin

  inherited Create( AOwner );

  Self.statek__ko := AStatek;

  Self.Parent := Self.statek__ko.falowanie_gl_dummy_cube;

  //Self.VisibleAtRunTime := true;

  if Self.statek__ko <> nil then
    id_statek_l := Self.statek__ko.id_statek
  else//if Self.statek__ko <> nil then
    id_statek_l := -1;

  Self.id_kotwica := Length( Self.statek__ko.kotwica_t );
  Self.kotwica_lina_mocowanie := GLS.VectorGeometry.AffineVectorMake( 0, 0, 0 );
  Self.kotwica_statek_mocowanie := GLS.VectorGeometry.AffineVectorMake( 0, 0, 0 );
  Self.kotwica_ruch_etap__ko := kre_Statek;
  Self.uszkodzone_czas_sekundy_i := 0;
  Self.dno_wspó³rzêdna_y := 0;

  Self.kotwica_podstawa := Wyglad_Elementy.TSt_GLCube.Create( Self );
  Self.kotwica_podstawa.Parent := Self;
  Self.kotwica_podstawa.CubeHeight := 0.2;
  Self.kotwica_podstawa.CubeWidth := 0.1;
  Self.kotwica_podstawa.CubeDepth := 0.5;
  Self.kotwica_podstawa.Position.Y := -Self.kotwica_podstawa.CubeDepth;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.kotwica_podstawa, Wyglad_Elementy.or_Statek );
  Wyglad_Elementy.Identyfikator_Elementu( Self.kotwica_podstawa, id_statek_l );

  Self.kotwica_trzon := Wyglad_Elementy.TSt_GLCylinder.Create( Self );
  Self.kotwica_trzon.Parent := Self;
  Self.kotwica_trzon.TopRadius := Self.kotwica_podstawa.CubeWidth * 0.5;
  Self.kotwica_trzon.BottomRadius := Self.kotwica_trzon.TopRadius;
  Self.kotwica_trzon.Height := Self.kotwica_podstawa.CubeDepth * 2;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.kotwica_trzon, Wyglad_Elementy.or_Statek );
  Wyglad_Elementy.Identyfikator_Elementu( Self.kotwica_trzon, id_statek_l );

  Self.kotwica_ramiê__lewo := Wyglad_Elementy.TSt_GLFrustrum.Create( Self );
  Self.kotwica_ramiê__lewo.Parent := Self;
  Self.kotwica_ramiê__lewo.Height := 0.6;
  Self.kotwica_ramiê__lewo.BaseDepth := Self.kotwica_podstawa.CubeWidth * 0.5;
  Self.kotwica_ramiê__lewo.BaseWidth := Self.kotwica_podstawa.CubeDepth * 0.5;
  Self.kotwica_ramiê__lewo.Position.Y := -Self.kotwica_ramiê__lewo.BaseDepth * 5;
  Self.kotwica_ramiê__lewo.Position.Z := -Self.kotwica_podstawa.CubeDepth * 0.7;
  Self.kotwica_ramiê__lewo.PitchAngle := 30;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.kotwica_ramiê__lewo, Wyglad_Elementy.or_Statek );
  Wyglad_Elementy.Identyfikator_Elementu( Self.kotwica_ramiê__lewo, id_statek_l );

  Self.kotwica_ramiê__prawo := Wyglad_Elementy.TSt_GLFrustrum.Create( Self );
  Self.kotwica_ramiê__prawo.Parent := Self;
  Self.kotwica_ramiê__prawo.Height := Self.kotwica_ramiê__lewo.Height;
  Self.kotwica_ramiê__prawo.BaseDepth := Self.kotwica_ramiê__lewo.BaseDepth;
  Self.kotwica_ramiê__prawo.BaseWidth := Self.kotwica_ramiê__lewo.BaseWidth;
  Self.kotwica_ramiê__prawo.Position.Y := Self.kotwica_ramiê__lewo.Position.Y;
  Self.kotwica_ramiê__prawo.Position.Z := -Self.kotwica_ramiê__lewo.Position.Z;
  Self.kotwica_ramiê__prawo.PitchAngle := -Self.kotwica_ramiê__lewo.PitchAngle;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.kotwica_ramiê__prawo, Wyglad_Elementy.or_Statek );
  Wyglad_Elementy.Identyfikator_Elementu( Self.kotwica_ramiê__prawo, id_statek_l );

  Self.kotwica_trzon__góra := Wyglad_Elementy.TSt_GLTorus.Create( Self );
  Self.kotwica_trzon__góra.Parent := Self;
  Self.kotwica_trzon__góra.MajorRadius := Self.kotwica_trzon.TopRadius * 1.5;
  Self.kotwica_trzon__góra.MinorRadius := Self.kotwica_trzon__góra.MajorRadius * 0.5;
  Self.kotwica_trzon__góra.Position.Y := Self.kotwica_trzon.Height * 0.5 + Self.kotwica_trzon__góra.MajorRadius - Self.kotwica_trzon__góra.MinorRadius;
  Self.kotwica_trzon__góra.TurnAngle := 90;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.kotwica_trzon__góra, Wyglad_Elementy.or_Statek );
  Wyglad_Elementy.Identyfikator_Elementu( Self.kotwica_trzon__góra, id_statek_l );

  Self.kotwica_trzon__dó³ := Wyglad_Elementy.TSt_GLSphere.Create( Self );
  Self.kotwica_trzon__dó³.Parent := Self;
  Self.kotwica_trzon__dó³.Radius := Self.kotwica_trzon.TopRadius * 1.5;
  Self.kotwica_trzon__dó³.Position.Y := -Self.kotwica_trzon.Height * 0.5 - Self.kotwica_podstawa.CubeHeight * 0.5;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.kotwica_trzon__dó³, Wyglad_Elementy.or_Statek );
  Wyglad_Elementy.Identyfikator_Elementu( Self.kotwica_trzon__dó³, id_statek_l );

  Self.kotwica_lina := TGLLines.Create( Self );
  Self.kotwica_lina.Parent := Self;
  Self.kotwica_lina.LineWidth := 5;
  Self.kotwica_lina.LinePattern := 45000;
  Self.kotwica_lina.NodesAspect := lnaInvisible; // W IDE 10.2 brak lnaDodecahedron. // lnaInvisible
  Self.kotwica_lina.NodeSize := 0.1;
  Self.kotwica_lina.AddNode( 0, Self.kotwica_trzon__góra.Position.Y, 0 );
  Self.kotwica_lina.AddNode( 0, Self.kotwica_lina.Nodes[ 0 ].Y + Self.kotwica_trzon__góra.MajorRadius * 2, 0 );

  Self.efekt__element_uszkodzenie_gl_dummy_cube := TGLDummyCube.Create( Self );
  Self.efekt__element_uszkodzenie_gl_dummy_cube.Parent := Self; //Self.kotwica_trzon
  Self.efekt__element_uszkodzenie_gl_dummy_cube.Pickable := false;
  Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible := false;
  //Self.efekt__element_uszkodzenie_gl_dummy_cube.VisibleAtRunTime := true;
  Self.efekt__element_uszkodzenie_gl_dummy_cube.Scale.Scale( 1.5 );

  Self.efekt__dŸwiêk_kontener_gl_dummy_cube := TGLDummyCube.Create( Self );
  Self.efekt__dŸwiêk_kontener_gl_dummy_cube.Parent := Self;
  Self.efekt__dŸwiêk_kontener_gl_dummy_cube.Pickable := false;
  //Self.efekt__dŸwiêk_kontener_gl_dummy_cube.VisibleAtRunTime := true;

  if gl_collision_mmanager_f <> nil then
    begin

      with TGLBCollision.Create( Self.kotwica_podstawa.Behaviours ) do
        begin

          GroupIndex := 0;
          BoundingMode := cbmCube;
          Manager := gl_collision_mmanager_f;

        end;
      //---//with TGLBCollision.Create( Self.kotwica_podstawa.Behaviours ) do

      with TGLBCollision.Create( Self.kotwica_trzon.Behaviours ) do
        begin

          GroupIndex := 0;
          BoundingMode := cbmCube;
          Manager := gl_collision_mmanager_f;

        end;
      //---//with TGLBCollision.Create( Self.kotwica_trzon.Behaviours ) do

      with TGLBCollision.Create( Self.kotwica_ramiê__lewo.Behaviours ) do
        begin

          GroupIndex := 0;
          BoundingMode := cbmCube;
          Manager := gl_collision_mmanager_f;

        end;
      //---//with TGLBCollision.Create( Self.kotwica_ramiê__lewo.Behaviours ) do

      with TGLBCollision.Create( Self.kotwica_ramiê__prawo.Behaviours ) do
        begin

          GroupIndex := 0;
          BoundingMode := cbmCube;
          Manager := gl_collision_mmanager_f;

        end;
      //---//with TGLBCollision.Create( Self.kotwica_ramiê__prawo.Behaviours ) do

      with TGLBCollision.Create( Self.kotwica_trzon__dó³.Behaviours ) do
        begin

          GroupIndex := 0;
          BoundingMode := cbmSphere;
          Manager := gl_collision_mmanager_f;

        end;
      //---//with TGLBCollision.Create( Self.kotwica_trzon__dó³.Behaviours ) do

      with TGLBCollision.Create( Self.kotwica_trzon__góra.Behaviours ) do
        begin

          GroupIndex := 0;
          BoundingMode := cbmCube;
          Manager := gl_collision_mmanager_f;

        end;
      //---//with TGLBCollision.Create( Self.kotwica_trzon__góra.Behaviours ) do

    end;
  //---//if gl_collision_mmanager_f <> nil then


  if efekt__element_uszkodzenie_gl_thor_fx_manager_f <> nil then
    TGLBThorFX(Self.efekt__element_uszkodzenie_gl_dummy_cube.AddNewEffect( TGLBThorFX )).Manager := efekt__element_uszkodzenie_gl_thor_fx_manager_f;

end;//---//Konstruktor klasy TKotwica.

//Destruktor klasy TKotwica.
destructor TKotwica.Destroy();
begin

  FreeAndNil( Self.efekt__dŸwiêk_kontener_gl_dummy_cube );
  FreeAndNil( Self.efekt__element_uszkodzenie_gl_dummy_cube );
  FreeAndNil( Self.kotwica_lina );
  FreeAndNil( Self.kotwica_ramiê__lewo );
  FreeAndNil( Self.kotwica_ramiê__prawo );
  FreeAndNil( Self.kotwica_podstawa );
  FreeAndNil( Self.kotwica_trzon__dó³ );
  FreeAndNil( Self.kotwica_trzon__góra );
  FreeAndNil( Self.kotwica_trzon );

  inherited;

end;//---//Destruktor klasy TKotwica.

//Funkcja Dodatkowe_Elementy_Ustaw().
procedure TKotwica.Dodatkowe_Elementy_Ustaw();
begin

  // Wspó³rzêdne s¹ ustawiane po utworzeniu kotwicy (podczas wczytywania kolejnych wêz³ów ze schematu statku).

  if    ( Self.Parent <> nil )
    and (  Assigned( Self.Parent )  ) then
    Self.kotwica_lina_mocowanie := Self.Parent.AbsoluteToLocal(  Self.kotwica_lina.LocalToAbsolute( Self.kotwica_lina.Nodes[ 1 ].AsAffineVector )  );

  Self.kotwica_statek_mocowanie := GLS.VectorGeometry.AffineVectorMake( Self.AbsolutePosition );

  Self.kotwica_statek_mocowanie.X := -Self.kotwica_statek_mocowanie.X;
  Self.kotwica_statek_mocowanie.Z := -Self.kotwica_statek_mocowanie.Z;

end;//---//Funkcja Dodatkowe_Elementy_Ustaw().

//Funkcja Kotwica_Lina_Odœwie¿().
procedure TKotwica.Kotwica_Lina_Odœwie¿();
begin

  //
  // Funkcja odœwie¿a po³o¿enie górnego koñca liny kotwicy aby by³ na sta³ym miejscu przy statku.
  //

  if Self.statek__ko <> nil then
    begin

      Self.kotwica_lina.Nodes[ 1 ].AsAffineVector := Self.kotwica_lina.AbsoluteToLocal(  Self.statek__ko.falowanie_gl_dummy_cube.LocalToAbsolute( Self.kotwica_lina_mocowanie )  );

      Self.efekt__dŸwiêk_kontener_gl_dummy_cube.Position.AsAffineVector := Self.kotwica_lina.Nodes[ 1 ].AsAffineVector;
      Self.efekt__element_uszkodzenie_gl_dummy_cube.Position.AsAffineVector := Self.kotwica_lina.Nodes[ 1 ].AsAffineVector;

    end;
  //---//if Self.statek__ko <> nil then

end;//---//Funkcja Kotwica_Lina_Odœwie¿().

//Funkcja Kotwica_Na_Dnie_Status_Ustaw().
procedure TKotwica.Kotwica_Na_Dnie_Status_Ustaw( const kotwica_zakresy_r_f : TKotwica_Zakresy_r );
var
  ztsi : single;
begin

  Self.kotwica_ruch_etap__ko := kre_Dno;

  // Je¿eli kotwica zatrzyma siê za g³êboko to podczas zanurzania statku, gdy kotwica dotknie dna nie przestawia siê ze kre_Stop na kre_Dno.
  ztsi := Self.kotwica_trzon__dó³.DistanceTo(  GLS.VectorGeometry.VectorMake( Self.kotwica_trzon__dó³.AbsolutePosition.X, Self.statek__ko.AbsolutePosition.Y, Self.kotwica_trzon__dó³.AbsolutePosition.Z )  );

  if ztsi > kotwica_zakresy_r_f.odleg³oœæ_maksymalna__kz then
    if Self.Position.Y <= 0 then
      Self.Position.Y := Self.Position.Y + Abs( ztsi - kotwica_zakresy_r_f.odleg³oœæ_maksymalna__kz )
    else//if Self.Position.Y <= 0 then
      Self.Position.Y := Self.Position.Y - Abs( ztsi - kotwica_zakresy_r_f.odleg³oœæ_maksymalna__kz );

  Self.dno_wspó³rzêdna_y := Self.AbsolutePosition.Y;

end;//---//Funkcja Kotwica_Na_Dnie_Status_Ustaw().

//Funkcja Kotwica_Przesuwaj().
procedure TKotwica.Kotwica_Przesuwaj( const dno_poziom_f : single; const delta_czasu_f : double; const kotwica_zakresy_r_f : TKotwica_Zakresy_r; const kotwica_resetuj_f : boolean = false );
var
  ztsi : single;
begin

  //
  // Parametry:
  //   kotwica_resetuj_f:
  //     false - standardowy ruch kotwic.
  //     true - ustawia kotwicê na pozycjê pocz¹tkow¹.
  //

  if   ( Self.statek__ko = nil  )
    or ( Self.statek__ko.punkty_¿ycia_aktualne <= 0 )
    or ( Self.statek__ko.kotwica_ruch_etap__st = kre_Stop )
    or ( Self.statek__ko.uszkodzone_czas_sekundy_i__kotwica <> 0 ) then
    begin

      if    ( Self.statek__ko.kotwica_ruch_etap__st = kre_Stop )
        and (  not ( Self.kotwica_ruch_etap__ko in [ kre_Dno, kre_Statek ] )  ) then
        Self.kotwica_ruch_etap__ko := kre_Stop;


      Self.Kotwica_Lina_Odœwie¿();

      Exit;

    end;
  //---//if   ( Self.statek__ko = nil  ) (...)


  ztsi := 0;


  if    ( Self.statek__ko.kotwica_ruch_etap__st = kre_W_Dó³ )
    and ( not kotwica_resetuj_f ) then
    begin

      // W dó³.

      if Self.kotwica_ruch_etap__ko = kre_Statek then
        begin

          Self.kotwica_ruch_etap__ko := kre_W_Dó³;
          Self.Kotwica_Rodzic_Zmieñ( kre_Brak );
          Self.Position.AsAffineVector := Self.statek__ko.AbsoluteToLocal(  Self.statek__ko.falowanie_gl_dummy_cube.LocalToAbsolute( Self.kotwica_statek_mocowanie )  );

        end;
      //---//if Self.kotwica_ruch_etap__ko = kre_Statek then


      if    ( Self.kotwica_ruch_etap__ko = kre_Dno )
        and (  Abs( Self.AbsolutePosition.Y - Self.dno_wspó³rzêdna_y ) > 0.01  )
        and (   Self.kotwica_trzon__dó³.DistanceTo(  GLS.VectorGeometry.VectorMake( Self.kotwica_trzon__dó³.AbsolutePosition.X, Self.statek__ko.AbsolutePosition.Y, Self.kotwica_trzon__dó³.AbsolutePosition.Z )  ) <= kotwica_zakresy_r_f.odleg³oœæ_maksymalna__kz   ) then
        begin

          // Aby podci¹ga³ kotwicê gdy np. statek siê zanurza.

          Self.Position.Y := Self.Position.Y - ( Self.AbsolutePosition.Y - Self.dno_wspó³rzêdna_y );

        end
      else//if    ( Self.kotwica_ruch_etap__ko = kre_Dno ) (...)
      if    ( Self.kotwica_ruch_etap__ko <> kre_Dno )
        and ( Self.LocalToAbsolute( Self.kotwica_trzon__dó³.Position.AsAffineVector ).Y <= dno_poziom_f ) then
        begin

          Self.Kotwica_Na_Dnie_Status_Ustaw( kotwica_zakresy_r_f );

        end
      else//if    ( Self.kotwica_ruch_etap__ko <> kre_Dno ) (...)
      //if    ( Self.kotwica_ruch_etap__ko <> kre_Stop )
      //  and (   Self.kotwica_trzon__dó³.DistanceTo(  GLS.VectorGeometry.VectorMake( Self.kotwica_trzon__dó³.AbsolutePosition.X, Self.statek__ko.AbsolutePosition.Y, Self.kotwica_trzon__dó³.AbsolutePosition.Z )  ) > kotwica_zakresy_r_f.odleg³oœæ_maksymalna__kz   ) then
      if Self.kotwica_trzon__dó³.DistanceTo(  GLS.VectorGeometry.VectorMake( Self.kotwica_trzon__dó³.AbsolutePosition.X, Self.statek__ko.AbsolutePosition.Y, Self.kotwica_trzon__dó³.AbsolutePosition.Z )  ) > kotwica_zakresy_r_f.odleg³oœæ_maksymalna__kz then
        begin

            Self.kotwica_ruch_etap__ko := kre_Stop;

        end
      else//if Self.kotwica_trzon__dó³.DistanceTo(  GLS.VectorGeometry.VectorMake( Self.kotwica_trzon__dó³.AbsolutePosition.X, Self.statek__ko.AbsolutePosition.Y, Self.kotwica_trzon__dó³.AbsolutePosition.Z )  ) > kotwica_zakresy_r_f.odleg³oœæ_maksymalna__kz then
      if Self.kotwica_ruch_etap__ko <> kre_Dno then
        begin

          ztsi := -kotwica_zakresy_r_f.prêdkoœæ__opadania;

          if Self.kotwica_ruch_etap__ko <> kre_W_Dó³ then
            Self.kotwica_ruch_etap__ko := kre_W_Dó³;

        end;
      //---//if Self.kotwica_lina.LocalToAbsolute( Self.kotwica_lina.Nodes[ 0 ].AsAffineVector ).Y <= dno_poziom_f then

    end
  else//if    ( Self.statek__ko.kotwica_ruch_etap__st = kre_W_Dó³ ) (...)
    begin

      // W górê.

      if Self.kotwica_ruch_etap__ko = kre_Statek then
        Exit;


      if Self.kotwica_ruch_etap__ko <> kre_W_Górê then
        Self.kotwica_ruch_etap__ko := kre_W_Górê;


      if   (  Self.kotwica_lina.LocalToAbsolute( Self.kotwica_lina.Nodes[ 0 ].AsAffineVector ).Y > Self.Parent.LocalToAbsolute( Self.kotwica_lina_mocowanie ).Y  )
        or ( kotwica_resetuj_f ) then
        begin

          Self.kotwica_ruch_etap__ko := kre_Statek;
          Self.Kotwica_Rodzic_Zmieñ( kre_Statek );
          Self.Position.AsAffineVector := Self.kotwica_statek_mocowanie;

        end
      else//if   (  Self.kotwica_lina.LocalToAbsolute( Self.kotwica_lina.Nodes[ 0 ].AsAffineVector ).Y > Self.Parent.LocalToAbsolute( Self.kotwica_lina_mocowanie ).Y  ) (...)
        begin

          ztsi := kotwica_zakresy_r_f.prêdkoœæ__podnoszenia;

        end;
      //---//if   (  Self.kotwica_lina.LocalToAbsolute( Self.kotwica_lina.Nodes[ 0 ].AsAffineVector ).Y > Self.Parent.LocalToAbsolute( Self.kotwica_lina_mocowanie ).Y  ) (...)

    end;
  //---//if    ( Self.statek__ko.kotwica_ruch_etap__st = kre_W_Dó³ ) (...)


  if    ( ztsi <> 0 )
    and ( Self.statek__ko.uszkodzone_czas_sekundy_i__kotwica = 0 ) then
    Self.Lift( ztsi * delta_czasu_f);


  Self.Kotwica_Lina_Odœwie¿();

end;//---//Funkcja Kotwica_Przesuwaj().

//Funkcja Kotwica_Rodzic_Zmieñ().
procedure TKotwica.Kotwica_Rodzic_Zmieñ( const kotwica_ruch_etap_f : TKotwica_Ruch_Etap );
var
  owner_kopia_Component : TComponent;
begin

  if    ( kotwica_ruch_etap_f = kre_Statek )
    and ( Self.Parent <> Self.statek__ko.falowanie_gl_dummy_cube ) then
    begin

      owner_kopia_Component := Self.Owner;
      Self.Parent := Self.statek__ko.falowanie_gl_dummy_cube;
      owner_kopia_Component.InsertComponent( Self ); // Chyba nie trzeba.

    end
  else//if    ( kotwica_ruch_etap_f = kre_Statek ) (...)
  if    ( kotwica_ruch_etap_f <> kre_Statek )
    and ( Self.Parent <> Self.statek__ko ) then
    begin

      owner_kopia_Component := Self.Owner;
      Self.Parent := Self.statek__ko; // Zmienia Self.Owner na nil.
      owner_kopia_Component.InsertComponent( Self );

    end;
  //---//if    ( kotwica_ruch_etap_f = kre_Statek ) (...)

end;//---//Funkcja Kotwica_Rodzic_Zmieñ().

//Funkcja Wygl¹d_Elementy__Noc_Zmieñ().
procedure TKotwica.Wygl¹d_Elementy__Noc_Zmieñ( const dzieñ_jasnoœæ_f : real; const wygl¹d_elementy__kolor_noc_zmieñ_f : TWygl¹d_Elementy__Kolor_Noc_Zmieñ );
begin

  if @wygl¹d_elementy__kolor_noc_zmieñ_f <> nil then
    begin

      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.kotwica_podstawa.Material, dzieñ_jasnoœæ_f );
      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.kotwica_ramiê__lewo.Material, dzieñ_jasnoœæ_f );
      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.kotwica_ramiê__prawo.Material, dzieñ_jasnoœæ_f );
      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.kotwica_trzon__dó³.Material, dzieñ_jasnoœæ_f );
      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.kotwica_trzon__góra.Material, dzieñ_jasnoœæ_f );
      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.kotwica_trzon.Material, dzieñ_jasnoœæ_f );
      Self.kotwica_lina.LineColor.Color := GLS.VectorGeometry.VectorScale( GLS.Color.clrWhite, dzieñ_jasnoœæ_f );
      Self.kotwica_lina.LineColor.Alpha := 1;

    end;
  //---//if @wygl¹d_elementy__kolor_noc_zmieñ_f <> nil then

end;//---//Funkcja Wygl¹d_Elementy__Noc_Zmieñ().

//Funkcja Element_Uszkodzenie_Przeliczaj().
procedure TKotwica.Element_Uszkodzenie_Przeliczaj( const oczekiwanie_na__naprawienie_elementu__czas_sekundy_f : Int64; const czy_klient_f : boolean = false );
begin

  //
  // Funkcja przelicza wartoœæ i zarz¹dza wyœwietlaniem efektu uszkodzenia.
  //
  // Parametry:
  //   czy_klient_f:
  //     false - przelicza wartoœæ i zarz¹dza wyœwietlaniem efektu uszkodzenia.
  //     true - tylko zarz¹dza wyœwietlaniem efektu uszkodzenia.
  //

  if not czy_klient_f then
    if    ( Self.uszkodzone_czas_sekundy_i <> 0 )
      and ( Czas_Miêdzy_W_Sekundach( Self.uszkodzone_czas_sekundy_i ) > oczekiwanie_na__naprawienie_elementu__czas_sekundy_f ) then
      begin

        Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible := false;
        Self.uszkodzone_czas_sekundy_i := 0;

      end;
    //---//if    ( Self.uszkodzone_czas_sekundy_i <> 0 ) (...)


  if    ( Self.uszkodzone_czas_sekundy_i <> 0 )
    and ( not Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible ) then
    Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible := true
  else//if    ( Self.uszkodzone_czas_sekundy_i <> 0 ) (...)
    if    ( czy_klient_f )
      and ( Self.uszkodzone_czas_sekundy_i = 0 )
      and ( Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible ) then
      Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible := false;

end;//---//Funkcja Element_Uszkodzenie_Przeliczaj().

//Konstruktor klasy TSter.
constructor TSter.Create( AOwner : TGLBaseSceneObject; const id_statek_f : integer; gl_collision_mmanager_f : TGLCollisionManager; efekt__element_uszkodzenie_gl_thor_fx_manager_f : TGLThorFXManager; x_f, y_f, z_f : real );
begin

  inherited Create( AOwner );

  Self.Parent := AOwner;

  //Self.ster_dummy.VisibleAtRunTime := true;

  Self.uszkodzone_czas_sekundy_i := 0;


  Self.ster := Wyglad_Elementy.TSt_GLCube.Create( Self );
  Self.ster.Parent := Self;
  Self.ster.CubeWidth := 0.05;
  Self.ster.CubeDepth := 1;
  //Self.ster.TurnAngle := 90;
  Self.ster.Position.Z := -Self.ster.CubeDepth * 0.5;
  Self.ster.Position.Y := -Self.ster.CubeHeight * 0.5;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.ster, Wyglad_Elementy.or_Statek );
  Wyglad_Elementy.Identyfikator_Elementu( Self.ster, id_statek_f );

  Self.ster_mocowanie := Wyglad_Elementy.TSt_GLCylinder.Create( Self );
  Self.ster_mocowanie.Parent := Self;
  Self.ster_mocowanie.TopRadius := Self.ster.CubeWidth;
  Self.ster_mocowanie.BottomRadius := Self.ster_mocowanie.TopRadius;
  Self.ster_mocowanie.Height := Self.ster.CubeDepth;
  Self.ster_mocowanie.Position.Y := Self.ster.Position.Y;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.ster_mocowanie, Wyglad_Elementy.or_Statek );
  Wyglad_Elementy.Identyfikator_Elementu( Self.ster_mocowanie, id_statek_f );

  Self.efekt__element_uszkodzenie_gl_dummy_cube := TGLDummyCube.Create( Self );
  Self.efekt__element_uszkodzenie_gl_dummy_cube.Parent := Self.ster_mocowanie;
  Self.efekt__element_uszkodzenie_gl_dummy_cube.Pickable := false;
  Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible := false;
  //Self.efekt__element_uszkodzenie_gl_dummy_cube.VisibleAtRunTime := true;
  Self.efekt__element_uszkodzenie_gl_dummy_cube.Scale.Scale( 1.5 );


  if gl_collision_mmanager_f <> nil then
    begin

      with TGLBCollision.Create( Self.ster.Behaviours ) do
        begin

          GroupIndex := 0;
          BoundingMode := cbmCube;
          Manager := gl_collision_mmanager_f;

        end;
      //---//with TGLBCollision.Create( Self.ster.Behaviours ) do

      with TGLBCollision.Create( Self.ster_mocowanie.Behaviours ) do
        begin

          GroupIndex := 0;
          BoundingMode := cbmCube;
          Manager := gl_collision_mmanager_f;

        end;
      //---//with TGLBCollision.Create( Self.ster_mocowanie.Behaviours ) do

    end;
  //---//if gl_collision_mmanager_f <> nil then


  if efekt__element_uszkodzenie_gl_thor_fx_manager_f <> nil then
    TGLBThorFX(Self.efekt__element_uszkodzenie_gl_dummy_cube.AddNewEffect( TGLBThorFX )).Manager := efekt__element_uszkodzenie_gl_thor_fx_manager_f;

end;//---//Konstruktor klasy TSter.

//Destruktor klasy TSter.
destructor TSter.Destroy();
begin

  FreeAndNil( Self.efekt__element_uszkodzenie_gl_dummy_cube );
  FreeAndNil( Self.ster );
  FreeAndNil( Self.ster_mocowanie );

  inherited;

end;//---//Destruktor klasy TSter.

//Funkcja Wygl¹d_Elementy__Noc_Zmieñ().
procedure TSter.Wygl¹d_Elementy__Noc_Zmieñ( const dzieñ_jasnoœæ_f : real; const wygl¹d_elementy__kolor_noc_zmieñ_f : TWygl¹d_Elementy__Kolor_Noc_Zmieñ );
begin

  if @wygl¹d_elementy__kolor_noc_zmieñ_f <> nil then
    begin

      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.ster.Material, dzieñ_jasnoœæ_f );
      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.ster_mocowanie.Material, dzieñ_jasnoœæ_f );

    end;
  //---//if @wygl¹d_elementy__kolor_noc_zmieñ_f <> nil then

end;//---//Funkcja Wygl¹d_Elementy__Noc_Zmieñ().

//Funkcja Element_Uszkodzenie_Przeliczaj().
procedure TSter.Element_Uszkodzenie_Przeliczaj( const oczekiwanie_na__naprawienie_elementu__czas_sekundy_f : Int64; const czy_klient_f : boolean = false );
begin

  //
  // Funkcja przelicza wartoœæ i zarz¹dza wyœwietlaniem efektu uszkodzenia.
  //
  // Parametry:
  //   czy_klient_f:
  //     false - przelicza wartoœæ i zarz¹dza wyœwietlaniem efektu uszkodzenia.
  //     true - tylko zarz¹dza wyœwietlaniem efektu uszkodzenia.
  //

  if not czy_klient_f then
    if    ( Self.uszkodzone_czas_sekundy_i <> 0 )
      and ( Czas_Miêdzy_W_Sekundach( Self.uszkodzone_czas_sekundy_i ) > oczekiwanie_na__naprawienie_elementu__czas_sekundy_f ) then
      begin

        Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible := false;
        Self.uszkodzone_czas_sekundy_i := 0;

      end;
    //---//if    ( Self.uszkodzone_czas_sekundy_i <> 0 ) (...)


  if    ( Self.uszkodzone_czas_sekundy_i <> 0 )
    and ( not Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible ) then
    Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible := true
  else//if    ( Self.uszkodzone_czas_sekundy_i <> 0 ) (...)
    if    ( czy_klient_f )
      and ( Self.uszkodzone_czas_sekundy_i = 0 )
      and ( Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible ) then
      Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible := false;

end;//---//Funkcja Element_Uszkodzenie_Przeliczaj().

//Konstruktor klasy TSter_G³êbokoœci.
constructor TSter_G³êbokoœci.Create( AOwner : TGLBaseSceneObject; const id_statek_f : integer; gl_collision_mmanager_f : TGLCollisionManager; efekt__element_uszkodzenie_gl_thor_fx_manager_f : TGLThorFXManager; x_f, y_f, z_f : real );
begin

  inherited Create( AOwner );

  Self.Parent := AOwner;
  //Self.ster_dummy.VisibleAtRunTime := true;

  Self.uszkodzone_czas_sekundy_i := 0;

  Self.ster := Wyglad_Elementy.TSt_GLCapsule.Create( Self );
  Self.ster.Parent := Self;
  Self.ster.TurnAngle := 90;
  Self.ster.Scale.Y := 0.25;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.ster, Wyglad_Elementy.or_Statek );
  Wyglad_Elementy.Identyfikator_Elementu( Self.ster, id_statek_f );

  Self.efekt__element_uszkodzenie_gl_dummy_cube := TGLDummyCube.Create( Self );
  Self.efekt__element_uszkodzenie_gl_dummy_cube.Parent := Self;
  Self.efekt__element_uszkodzenie_gl_dummy_cube.Pickable := false;
  Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible := false;
  //Self.efekt__element_uszkodzenie_gl_dummy_cube.VisibleAtRunTime := true;
  Self.efekt__element_uszkodzenie_gl_dummy_cube.Scale.Scale( 1.5 );


  if gl_collision_mmanager_f <> nil then
    begin

      with TGLBCollision.Create( Self.ster.Behaviours ) do
        begin

          GroupIndex := 0;
          BoundingMode := cbmCube;
          Manager := gl_collision_mmanager_f;

        end;
      //---//with TGLBCollision.Create( Self.ster.Behaviours ) do

    end;
  //---//if gl_collision_mmanager_f <> nil then


  if efekt__element_uszkodzenie_gl_thor_fx_manager_f <> nil then
    TGLBThorFX(Self.efekt__element_uszkodzenie_gl_dummy_cube.AddNewEffect( TGLBThorFX )).Manager := efekt__element_uszkodzenie_gl_thor_fx_manager_f;

end;//---//Konstruktor klasy TSter_G³êbokoœci.

//Destruktor klasy TSter_G³êbokoœci.
destructor TSter_G³êbokoœci.Destroy();
begin

  FreeAndNil( Self.efekt__element_uszkodzenie_gl_dummy_cube );
  FreeAndNil( Self.ster );

  inherited;

end;//---//Destruktor klasy TSter_G³êbokoœci.

//Funkcja Wygl¹d_Elementy__Noc_Zmieñ().
procedure TSter_G³êbokoœci.Wygl¹d_Elementy__Noc_Zmieñ( const dzieñ_jasnoœæ_f : real; const wygl¹d_elementy__kolor_noc_zmieñ_f : TWygl¹d_Elementy__Kolor_Noc_Zmieñ );
begin

  if @wygl¹d_elementy__kolor_noc_zmieñ_f <> nil then
    wygl¹d_elementy__kolor_noc_zmieñ_f( Self.ster.Material, dzieñ_jasnoœæ_f );

end;//---//Funkcja Wygl¹d_Elementy__Noc_Zmieñ().

//Funkcja Element_Uszkodzenie_Przeliczaj().
procedure TSter_G³êbokoœci.Element_Uszkodzenie_Przeliczaj( const oczekiwanie_na__naprawienie_elementu__czas_sekundy_f : Int64; const czy_klient_f : boolean = false );
begin

  //
  // Funkcja przelicza wartoœæ i zarz¹dza wyœwietlaniem efektu uszkodzenia.
  //
  // Parametry:
  //   czy_klient_f:
  //     false - przelicza wartoœæ i zarz¹dza wyœwietlaniem efektu uszkodzenia.
  //     true - tylko zarz¹dza wyœwietlaniem efektu uszkodzenia.
  //

  if not czy_klient_f then
    if    ( Self.uszkodzone_czas_sekundy_i <> 0 )
      and ( Czas_Miêdzy_W_Sekundach( Self.uszkodzone_czas_sekundy_i ) > oczekiwanie_na__naprawienie_elementu__czas_sekundy_f ) then
      begin

        Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible := false;
        Self.uszkodzone_czas_sekundy_i := 0;

      end;
    //---//if    ( Self.uszkodzone_czas_sekundy_i <> 0 ) (...)


  if    ( Self.uszkodzone_czas_sekundy_i <> 0 )
    and ( not Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible ) then
    Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible := true
  else//if    ( Self.uszkodzone_czas_sekundy_i <> 0 ) (...)
    if    ( czy_klient_f )
      and ( Self.uszkodzone_czas_sekundy_i = 0 )
      and ( Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible ) then
      Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible := false;

end;//---//Funkcja Element_Uszkodzenie_Przeliczaj().

//Konstruktor klasy TŒlad_Torowy.
constructor TŒlad_Torowy.Create( AOwner : TGLBaseSceneObject; const kierunek_f, pozycja_f : GLS.VectorTypes.TVector4f; œlad_torowy__d³ugoœæ_f, œlad_torowy__szerokoœæ_f : single; const dzieñ_jasnoœæ_f : real; const zanurzenie_peryskopowe__utrzymywane_f : boolean );
begin

  inherited Create( AOwner );

  Self.Parent := AOwner;
  Self.Pickable := false;
  Self.Position.SetPoint( pozycja_f.X, 0, pozycja_f.Z );
  Self.Direction.SetVector( kierunek_f.X, 0, kierunek_f.Z );

  if zanurzenie_peryskopowe__utrzymywane_f then
    begin

      œlad_torowy__d³ugoœæ_f := œlad_torowy__d³ugoœæ_f * zanurzenie_peryskopowe__utrzymywane_modyfikator_c;
      œlad_torowy__szerokoœæ_f := œlad_torowy__szerokoœæ_f * zanurzenie_peryskopowe__utrzymywane_modyfikator_c;

    end;
  //---//if zanurzenie_peryskopowe__utrzymywane_f then

  Self.Scale.X := œlad_torowy__szerokoœæ_f;
  Self.Scale.Y := 0.01;
  Self.Scale.Z := œlad_torowy__d³ugoœæ_f;

  Self.powiêksza_siê := true;
  Self.zmieni³_kolor := false;

  Self.œlad_torowy__szerokoœæ_pocz¹tkowa := œlad_torowy__szerokoœæ_f;
  Self.œlad_torowy__d³ugoœæ_pocz¹tkowa := œlad_torowy__d³ugoœæ_f;

  Self.VisibleAtRunTime := true;

  Self.czas_trwania_milisekundy_œt := œlad_torowy__czas_trwania_milisekundy_c;
  Self.czas_utworzenia_milisekundy_œt := Czas_Teraz_W_Milisekundach();

  Self.EdgeColor.Color := GLS.VectorGeometry.VectorScale( GLS.Color.clrLightBlue, dzieñ_jasnoœæ_f );

  // Za bardzo migocze.
  //Self.œlad := TGLCube.Create( AOwner );
  //Self.œlad.Parent := Self;
  //Self.œlad.Pickable := false;
  //Self.œlad.Scale.Y := 1 - 0.1 * Random( 100 ) * 0.01; // Aby nie migota³o pod wod¹.
  //
  //Self.œlad.Material.BlendingMode := Statki_Form.Woda_Góra_GLPlane.Material.BlendingMode;
  //Self.œlad.Material.FrontProperties.Ambient.Color := Statki_Form.Woda_Góra_GLPlane.Material.FrontProperties.Ambient.Color;
  //Self.œlad.Material.FrontProperties.Diffuse.Color := Statki_Form.Woda_Góra_GLPlane.Material.FrontProperties.Diffuse.Color;
  //Self.œlad.Material.FrontProperties.Emission.Color := Statki_Form.Woda_Góra_GLPlane.Material.FrontProperties.Emission.Color;
  //
  //Self.œlad.Material.FrontProperties.Ambient.Alpha := Self.œlad.Material.FrontProperties.Ambient.Alpha * 0.5;
  //Self.œlad.Material.FrontProperties.Diffuse.Alpha := Self.œlad.Material.FrontProperties.Diffuse.Alpha * 0.5;
  //Self.œlad.Material.FrontProperties.Emission.Alpha := Self.œlad.Material.FrontProperties.Emission.Alpha * 0.5;

end;//---//Konstruktor klasy TŒlad_Torowy.

//Destruktor klasy TŒlad_Torowy.
destructor TŒlad_Torowy.Destroy();
begin

  //FreeAndNil( Self.œlad );

  inherited;

end;//---//Destruktor klasy TŒlad_Torowy.

//Konstruktor klasy TŒruba.
constructor TŒruba.Create( AOwner : TGLBaseSceneObject; AStatek : TStatek; const czy_obrót_lewo_f : boolean; gl_collision_mmanager_f : TGLCollisionManager; efekt__element_uszkodzenie_gl_thor_fx_manager_f : TGLThorFXManager );
var
  i,
  id_statek_l
    : integer;
  ztr : real;
begin

  inherited Create( AOwner );

  Self.statek__œr := AStatek;

  if Self.statek__œr <> nil then
    id_statek_l := Self.statek__œr.id_statek
  else//if Self.statek__œr <> nil then
    id_statek_l := -1;


  Self.prêdkoœæ_obrotowa_aktualna_procent := 0;
  Self.prêdkoœæ_obrotowa_maksymalna := 400;
  Self.prêdkoœæ_obrotowa_przyspieszanie := Self.prêdkoœæ_obrotowa_maksymalna * 0.2;

  //Self.czy_obrót_lewo := false;

  Self.czy_obrót_lewo := czy_obrót_lewo_f;

  Self.uszkodzone_czas_sekundy_i := 0;


  Self.Parent := AOwner;
  //Self.TurnAngle := 0;
  //Self.Direction.SetVector( 0, 0, -1 );
  //Self.Position.SetPoint( 0, 1, 0 );
  //Self.VisibleAtRunTime := true;
  //Self.ShowAxes := true;


  Self.wa³ := Wyglad_Elementy.TSt_GLCylinder.Create( Self );
  Self.wa³.Parent := Self;
  Self.wa³.PitchAngle := 105;
  Self.wa³.TopRadius := 0.05;
  Self.wa³.BottomRadius := Self.wa³.TopRadius;
  Self.wa³.Height := 2;
  Self.wa³.Position.Y := 0.24;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.wa³, Wyglad_Elementy.or_Statek );
  Wyglad_Elementy.Identyfikator_Elementu( Self.wa³, id_statek_l );

  Self.wa³_³o¿ysko := Wyglad_Elementy.TSt_GLCylinder.Create( Self );
  Self.wa³_³o¿ysko.Parent := Self;
  Self.wa³_³o¿ysko.PitchAngle := 90;
  Self.wa³_³o¿ysko.TopRadius := Self.wa³.TopRadius * 2.5;
  Self.wa³_³o¿ysko.BottomRadius := Self.wa³_³o¿ysko.TopRadius;
  Self.wa³_³o¿ysko.Height := Self.wa³_³o¿ysko.TopRadius * 2;
  Self.wa³_³o¿ysko.Position.Z := -Self.wa³.Height * 0.5;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.wa³_³o¿ysko, Wyglad_Elementy.or_Statek );
  Wyglad_Elementy.Identyfikator_Elementu( Self.wa³_³o¿ysko, id_statek_l );

  Self.wa³_podpórka := Wyglad_Elementy.TSt_GLCylinder.Create( Self );
  Self.wa³_podpórka.Parent := Self;
  Self.wa³_podpórka.TopRadius := Self.wa³.TopRadius;
  Self.wa³_podpórka.BottomRadius := Self.wa³_podpórka.TopRadius;
  Self.wa³_podpórka.Height := 0.5;
  Self.wa³_podpórka.Position.Y := Self.wa³_podpórka.Height * 0.5;
  Self.wa³_podpórka.Position.Z := Self.wa³_³o¿ysko.Position.Z;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.wa³_podpórka, Wyglad_Elementy.or_Statek );
  Wyglad_Elementy.Identyfikator_Elementu( Self.wa³_podpórka, id_statek_l );

  Self.wa³_do_wirnika := Wyglad_Elementy.TSt_GLCylinder.Create( Self );
  Self.wa³_do_wirnika.Parent := Self;
  Self.wa³_do_wirnika.PitchAngle := 90;
  Self.wa³_do_wirnika.TopRadius := Self.wa³.TopRadius;
  Self.wa³_do_wirnika.BottomRadius := Self.wa³_do_wirnika.TopRadius;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.wa³_do_wirnika, Wyglad_Elementy.or_Statek );
  Wyglad_Elementy.Identyfikator_Elementu( Self.wa³_do_wirnika, id_statek_l );


  Self.wa³_mocowanie := Wyglad_Elementy.TSt_GLCylinder.Create( Self );
  Self.wa³_mocowanie.Parent := Self;
  Self.wa³_mocowanie.PitchAngle := 90;
  Self.wa³_mocowanie.TopRadius := Self.wa³.TopRadius * 2;
  Self.wa³_mocowanie.BottomRadius := Self.wa³.TopRadius;
  Self.wa³_mocowanie.Height := 0.2;
  Self.wa³_mocowanie.Position.Y := Self.wa³_podpórka.Height;
  Self.wa³_mocowanie.Position.Z := Self.wa³.Height * 0.5 + Self.wa³_mocowanie.Height * 0.3;
  //Self.wa³_mocowanie.Position.Y := 0.05;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.wa³_mocowanie, Wyglad_Elementy.or_Statek );
  Wyglad_Elementy.Identyfikator_Elementu( Self.wa³_mocowanie, id_statek_l );



  Self.efekt__element_uszkodzenie_gl_dummy_cube := TGLDummyCube.Create( Self );
  Self.efekt__element_uszkodzenie_gl_dummy_cube.Parent := Self.wa³_podpórka;
  Self.efekt__element_uszkodzenie_gl_dummy_cube.Pickable := false;
  Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible := false;
  //Self.efekt__element_uszkodzenie_gl_dummy_cube.VisibleAtRunTime := true;
  Self.efekt__element_uszkodzenie_gl_dummy_cube.Scale.Scale( 1.5 );


  Self.obrót_gl_dummy_cube := TGLDummyCube.Create( Self );
  Self.obrót_gl_dummy_cube.Parent := Self;
  Self.obrót_gl_dummy_cube.Pickable := false;
  //Self.obrót_gl_dummy_cube.Position.Z := -Self.wa³.Height * 0.5;
  //Self.obrót_gl_dummy_cube.VisibleAtRunTime := true;
  //Self.obrót_gl_dummy_cube.ShowAxes := true;


  Self.wirnik_œrodek := Wyglad_Elementy.TSt_GLSphere.Create( Self );
  Self.wirnik_œrodek.Parent := Self.obrót_gl_dummy_cube;
  Self.wirnik_œrodek.Radius := Self.wa³.TopRadius * 3;
  //Self.wirnik_œrodek.Position.Z := -Self.wirnik_œrodek.Radius * 1.35;
  Wyglad_Elementy.Obiekt_Rodzaj( Self.wirnik_œrodek, Wyglad_Elementy.or_Statek );
  Wyglad_Elementy.Identyfikator_Elementu( Self.wirnik_œrodek, id_statek_l );

  Self.wa³_do_wirnika.Height := Self.wa³_³o¿ysko.Height + Self.wirnik_œrodek.Radius;
  Self.wa³_do_wirnika.Position.Z := Self.wa³_³o¿ysko.Position.Z + Self.wa³_³o¿ysko.Height * 0.4 - Self.wa³_do_wirnika.Height * 0.5;
  //Self.wa³_do_wirnika.Position.Y := -0.15;


  Self.obrót_gl_dummy_cube.Position.Z := -Self.wa³.Height * 0.5 - Self.wa³_³o¿ysko.Height * 0.25 - Self.wirnik_œrodek.Radius * 1.35;


  SetLength( Self.wirnik_³opaty_t, 4 ); // Iloœæ ³opat wirnika.

  if Length( Self.wirnik_³opaty_t ) <> 0 then
    ztr := 360 / Length( Self.wirnik_³opaty_t )
  else//if Length( Self.wirnik_³opaty_t ) <> 0 then
    ztr := 180;

  for i := 0 to Length( Self.wirnik_³opaty_t ) - 1 do
    begin

      Self.wirnik_³opaty_t[ i ] := Wyglad_Elementy.TSt_GLCone.Create( Self );
      Self.wirnik_³opaty_t[ i ].Parent := Self.obrót_gl_dummy_cube;
      Self.wirnik_³opaty_t[ i ].BottomRadius := Self.wirnik_œrodek.Radius;
      //Self.wirnik_³opaty_t[ i ].ShowAxes := true;
      Wyglad_Elementy.Obiekt_Rodzaj( Self.wirnik_³opaty_t[ i ], Wyglad_Elementy.or_Statek );
      Wyglad_Elementy.Identyfikator_Elementu( Self.wirnik_³opaty_t[ i ], id_statek_l );

      Self.wirnik_³opaty_t[ i ].PitchAngle := -90;

      Self.wirnik_³opaty_t[ i ].Height := Self.wirnik_œrodek.Radius;

      Self.wirnik_³opaty_t[ i ].Position.Y := Self.wirnik_œrodek.Radius + Self.wirnik_³opaty_t[ i ].BottomRadius * 0.5;

      Self.wirnik_³opaty_t[ i ].Position.AsVector :=
        GLS.VectorGeometry.MoveObjectAround
          (
            Self.wirnik_³opaty_t[ i ].Position.AsVector,
            GLS.VectorGeometry.VectorMake( 0, 0, 1 ),
            Self.wirnik_œrodek.Position.AsVector, 0, i * ztr
          );

      // Self.wirnik_³opaty_t[ i ].RollAngle := Self.wirnik_³opaty_t[ i ].RollAngle + i * 80 / 4;

    end;
  //---//for i := 0 to Length( Self.wirnik_³opaty_t ) - 1 do


  if gl_collision_mmanager_f <> nil then
    begin

      with TGLBCollision.Create( Self.wa³.Behaviours ) do
        begin

          GroupIndex := 0;
          BoundingMode := cbmCube;
          Manager := gl_collision_mmanager_f;

        end;
      //---//with TGLBCollision.Create( Self.wa³.Behaviours ) do

      with TGLBCollision.Create( Self.wa³_³o¿ysko.Behaviours ) do
        begin

          GroupIndex := 0;
          BoundingMode := cbmCube;
          Manager := gl_collision_mmanager_f;

        end;
      //---//with TGLBCollision.Create( Self.wa³_³o¿ysko.Behaviours ) do

      with TGLBCollision.Create( Self.wa³_mocowanie.Behaviours ) do
        begin

          GroupIndex := 0;
          BoundingMode := cbmCube;
          Manager := gl_collision_mmanager_f;

        end;
      //---//with TGLBCollision.Create( Self.wa³_mocowanie.Behaviours ) do

      with TGLBCollision.Create( Self.wa³_podpórka.Behaviours ) do
        begin

          GroupIndex := 0;
          BoundingMode := cbmCube;
          Manager := gl_collision_mmanager_f;

        end;
      //---//with TGLBCollision.Create( Self.wa³_podpórka.Behaviours ) do

      with TGLBCollision.Create( Self.wa³_do_wirnika.Behaviours ) do
        begin

          GroupIndex := 0;
          BoundingMode := cbmCube;
          Manager := gl_collision_mmanager_f;

        end;
      //---//with TGLBCollision.Create( Self.wa³_do_wirnika.Behaviours ) do

      with TGLBCollision.Create( Self.wirnik_œrodek.Behaviours ) do
        begin

          GroupIndex := 0;
          BoundingMode := cbmCube;
          Manager := gl_collision_mmanager_f;

        end;
      //---//with TGLBCollision.Create( Self.wirnik_œrodek.Behaviours ) do


      for i := 0 to Length( Self.wirnik_³opaty_t ) - 1 do
        with TGLBCollision.Create( Self.wirnik_³opaty_t[ i ].Behaviours ) do
          begin

            GroupIndex := 0;
            BoundingMode := cbmCube;
            Manager := gl_collision_mmanager_f;

          end;
        //---//with TGLBCollision.Create( Self.wirnik_³opaty_t[ i ].Behaviours ) do

    end;
  //---//if gl_collision_mmanager_f <> nil then


  if efekt__element_uszkodzenie_gl_thor_fx_manager_f <> nil then
    TGLBThorFX(Self.efekt__element_uszkodzenie_gl_dummy_cube.AddNewEffect( TGLBThorFX )).Manager := efekt__element_uszkodzenie_gl_thor_fx_manager_f;

end;//---//Konstruktor klasy TŒruba.

//Destruktor klasy TŒruba.
destructor TŒruba.Destroy();
var
  i : integer;
begin

  FreeAndNil( Self.efekt__element_uszkodzenie_gl_dummy_cube );

  FreeAndNil( Self.wa³ );
  FreeAndNil( Self.wa³_³o¿ysko );
  FreeAndNil( Self.wa³_mocowanie );
  FreeAndNil( Self.wa³_podpórka );
  FreeAndNil( Self.wa³_do_wirnika );

  FreeAndNil( Self.wirnik_œrodek );


  for i := 0 to Length( Self.wirnik_³opaty_t ) - 1 do
    FreeAndNil( Self.wirnik_³opaty_t[ i ] );

  SetLength( Self.wirnik_³opaty_t, 0 );


  FreeAndNil( Self.obrót_gl_dummy_cube );

  inherited;

end;//---//Destruktor klasy TŒruba.

//Funkcja Wirnik_£opat_K¹t_Ustaw().
procedure TŒruba.Wirnik_£opat_K¹t_Ustaw();
var
  i : integer;
begin

  for i := 0 to Length( Self.wirnik_³opaty_t ) - 1 do
    begin

      // Self.wirnik_³opaty_t[ i ].RollAngle := Self.wirnik_³opaty_t[ i ].RollAngle + i * 80 / 4;

      {$region 'K¹t ³opat wirnika.'}
      {$region '£opaty 4.'}
      if Length( Self.wirnik_³opaty_t ) = 4 then
        begin

          if i = 0 then
            begin

              if Self.czy_obrót_lewo then
                begin

                  // Lewo.

                  Self.wirnik_³opaty_t[ i ].PitchAngle := -90;
                  Self.wirnik_³opaty_t[ i ].RollAngle := 40;

                end
              else//if Self.czy_obrót_lewo then
                begin

                  // Prawo.

                  Self.wirnik_³opaty_t[ i ].PitchAngle := -90;
                  Self.wirnik_³opaty_t[ i ].RollAngle := -40;

                end;
              //---//if Self.czy_obrót_lewo then

            end
          else//
          if i = 1 then
            begin

              if Self.czy_obrót_lewo then
                begin

                  // Lewo.

                  Self.wirnik_³opaty_t[ i ].PitchAngle := -130;
                  Self.wirnik_³opaty_t[ i ].RollAngle := 0;

                end
              else//if Self.czy_obrót_lewo then
                begin

                  // Prawo.

                  Self.wirnik_³opaty_t[ i ].PitchAngle := -50;
                  Self.wirnik_³opaty_t[ i ].RollAngle := 0;

                end;
              //---//if Self.czy_obrót_lewo then

            end
          else//
          if i = 2 then
            begin

              if Self.czy_obrót_lewo then
                begin

                  // Lewo.

                  Self.wirnik_³opaty_t[ i ].PitchAngle := -90;
                  Self.wirnik_³opaty_t[ i ].RollAngle := -40;

                end
              else//if Self.czy_obrót_lewo then
                begin

                  // Prawo.

                  Self.wirnik_³opaty_t[ i ].PitchAngle := -90;
                  Self.wirnik_³opaty_t[ i ].RollAngle := 40;

                end;
              //---//if Self.czy_obrót_lewo then

            end
          else//
          if i = 3 then
            begin

              if Self.czy_obrót_lewo then
                begin

                  // Lewo.

                  Self.wirnik_³opaty_t[ i ].PitchAngle := -50;
                  Self.wirnik_³opaty_t[ i ].RollAngle := 0;

                end
              else//if Self.czy_obrót_lewo then
                begin

                  // Prawo.

                  Self.wirnik_³opaty_t[ i ].PitchAngle := -130;
                  Self.wirnik_³opaty_t[ i ].RollAngle := 0;

                end;
              //---//if Self.czy_obrót_lewo then

            end;

        end;
      //---//if Length( Self.wirnik_³opaty_t ) = 4 then
      {$endregion '£opaty 4.'}
      {$endregion 'K¹t ³opat wirnika.'}

    end;
  //---//for i := 0 to Length( Self.wirnik_³opaty_t ) - 1 do

end;//---//Funkcja Wirnik_£opat_K¹t_Ustaw().

//Funkcja Œruba_Obracaj().
procedure TŒruba.Œruba_Obracaj( const delta_czasu_f : double );
var
  prêdkoœæ_zadana_procent_kopia : real;
begin

  if Self.statek__œr.uszkodzone_czas_sekundy_i__œruba <> 0 then
    prêdkoœæ_zadana_procent_kopia := 0
  else//if Self.statek__œr.uszkodzone_czas_sekundy_i__œruba <> 0 then
    prêdkoœæ_zadana_procent_kopia := Self.statek__œr.prêdkoœæ_zadana_procent;


  if    (  Abs( Self.prêdkoœæ_obrotowa_aktualna_procent - prêdkoœæ_zadana_procent_kopia ) <= Self.prêdkoœæ_obrotowa_przyspieszanie * delta_czasu_f  )
    and (
                   ( Self.prêdkoœæ_obrotowa_aktualna_procent >= 0 )
               and ( prêdkoœæ_zadana_procent_kopia >= 0 )
          or (
                   ( Self.prêdkoœæ_obrotowa_aktualna_procent <= 0 )
               and ( prêdkoœæ_zadana_procent_kopia <= 0 )
             )
        ) then
    Self.prêdkoœæ_obrotowa_aktualna_procent := prêdkoœæ_zadana_procent_kopia
  else
  if Self.prêdkoœæ_obrotowa_aktualna_procent < ( prêdkoœæ_zadana_procent_kopia - Self.prêdkoœæ_obrotowa_przyspieszanie * delta_czasu_f ) then
    Self.prêdkoœæ_obrotowa_aktualna_procent := Self.prêdkoœæ_obrotowa_aktualna_procent + Self.prêdkoœæ_obrotowa_przyspieszanie * delta_czasu_f
  else
  if Self.prêdkoœæ_obrotowa_aktualna_procent > ( prêdkoœæ_zadana_procent_kopia - Self.prêdkoœæ_obrotowa_przyspieszanie * delta_czasu_f ) then
    Self.prêdkoœæ_obrotowa_aktualna_procent := Self.prêdkoœæ_obrotowa_aktualna_procent - Self.prêdkoœæ_obrotowa_przyspieszanie * delta_czasu_f;


  if Self.czy_obrót_lewo then
    Self.obrót_gl_dummy_cube.RollAngle := Self.obrót_gl_dummy_cube.RollAngle - Self.prêdkoœæ_obrotowa_aktualna_procent * Self.prêdkoœæ_obrotowa_maksymalna * 0.01 * delta_czasu_f // Lewo.
  else
    Self.obrót_gl_dummy_cube.RollAngle := Self.obrót_gl_dummy_cube.RollAngle + Self.prêdkoœæ_obrotowa_aktualna_procent * Self.prêdkoœæ_obrotowa_maksymalna * 0.01 * delta_czasu_f;

end;//---//Funkcja Œruba_Obracaj().

//Funkcja Wygl¹d_Elementy__Noc_Zmieñ().
procedure TŒruba.Wygl¹d_Elementy__Noc_Zmieñ( const dzieñ_jasnoœæ_f : real; const wygl¹d_elementy__kolor_noc_zmieñ_f : TWygl¹d_Elementy__Kolor_Noc_Zmieñ );
var
  i : integer;
begin

  if @wygl¹d_elementy__kolor_noc_zmieñ_f <> nil then
    begin

      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.wa³.Material, dzieñ_jasnoœæ_f );
      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.wa³_³o¿ysko.Material, dzieñ_jasnoœæ_f );
      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.wa³_mocowanie.Material, dzieñ_jasnoœæ_f );
      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.wa³_podpórka.Material, dzieñ_jasnoœæ_f );
      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.wa³_do_wirnika.Material, dzieñ_jasnoœæ_f );

      wygl¹d_elementy__kolor_noc_zmieñ_f( Self.wirnik_œrodek.Material, dzieñ_jasnoœæ_f );


      for i := 0 to Length( Self.wirnik_³opaty_t ) - 1 do
        wygl¹d_elementy__kolor_noc_zmieñ_f( Self.wirnik_³opaty_t[ i ].Material, dzieñ_jasnoœæ_f );

    end;
  //---//if @wygl¹d_elementy__kolor_noc_zmieñ_f <> nil then

end;//---//Funkcja Wygl¹d_Elementy__Noc_Zmieñ().

//Funkcja Element_Uszkodzenie_Przeliczaj().
procedure TŒruba.Element_Uszkodzenie_Przeliczaj( const oczekiwanie_na__naprawienie_elementu__czas_sekundy_f : Int64; const czy_klient_f : boolean = false );
begin

  //
  // Funkcja przelicza wartoœæ i zarz¹dza wyœwietlaniem efektu uszkodzenia.
  //
  // Parametry:
  //   czy_klient_f:
  //     false - przelicza wartoœæ i zarz¹dza wyœwietlaniem efektu uszkodzenia.
  //     true - tylko zarz¹dza wyœwietlaniem efektu uszkodzenia.
  //

  if not czy_klient_f then
    if    ( Self.uszkodzone_czas_sekundy_i <> 0 )
      and ( Czas_Miêdzy_W_Sekundach( Self.uszkodzone_czas_sekundy_i ) > oczekiwanie_na__naprawienie_elementu__czas_sekundy_f ) then
      begin

        Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible := false;
        Self.uszkodzone_czas_sekundy_i := 0;

      end;
    //---//if    ( Self.uszkodzone_czas_sekundy_i <> 0 ) (...)


  if    ( Self.uszkodzone_czas_sekundy_i <> 0 )
    and ( not Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible ) then
    Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible := true
  else//if    ( Self.uszkodzone_czas_sekundy_i <> 0 ) (...)
    if    ( czy_klient_f )
      and ( Self.uszkodzone_czas_sekundy_i = 0 )
      and ( Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible ) then
      Self.efekt__element_uszkodzenie_gl_dummy_cube.Visible := false;

end;//---//Funkcja Element_Uszkodzenie_Przeliczaj().

//Konstruktor klasy TTrafienia_Efekt.
//constructor TTrafienia_Efekt.Create( AOwner : TGLBaseSceneObject; gl_fire_fx_manager_f : TGLFireFXManager; x_f, y_f, z_f : real );
//constructor TTrafienia_Efekt.Create( AOwner : TGLBaseSceneObject; gl_cadence_able_component_f : TGLCadenceAbleComponent; x_f, y_f, z_f : real; gl_cadencer__current_time_f : double; amunicja_f : TAmunicja );
constructor TTrafienia_Efekt.Create( AOwner : TGLBaseSceneObject; x_f, y_f, z_f : real; const efekt_rodzaj_f : TEfekt_Rodzaj; const mg³a_f : boolean = false );
//var
//  zt_gl_base_scene_object : TGLBaseSceneObject;
begin

  //inherited Create( AOwner ); // Nie mo¿e byæ TStatek gdy¿ po zwolnieniu statku pojawiaj¹ siê b³êdy dostêpu je¿eli efekty umieszczone na tym statku nadal s¹ na scenie.

  //if    ( AOwner is TStatek )
  //  and ( AOwner.HasParent ) then
  //  inherited Create( AOwner.Parent )
  //else
  //  inherited Create( AOwner );

  inherited Create( AOwner ); //Statki_Form.Gra_Obiekty_GLDummyCube

  Self.Parent := AOwner;
  //Self.VisibleAtRunTime := true;
  //Self.ShowAxes := true;
  Self.Position.SetPoint( x_f, y_f, z_f );

  Self.czas_animowania_wizualizacji_alternatywnej_ostatniego_milisekundy_i := 0;
  Self.czas_rozb³ysku_ostatniego_sekundy_i := Czas_Teraz_W_Sekundach();
  Self.czas_trwania_milisekundy_te := Random( 10000 ) + 2500;
  Self.czas_utworzenia_milisekundy_te := Czas_Teraz_W_Milisekundach();

  Self.dzieñ_jasnoœæ_te := 1;

  Self.efekt_rodzaj := efekt_rodzaj_f;

  Self.mg³a_te := mg³a_f;

  Self.wizualizacja_alternatywna__gl_custom_scene_object := nil;

  //Self.statek := AStatek; //???

  //Exit;
  //
  // Gdy elementy gry by³y tworzone bezpoœrednio na scenie jedne z nich przes³ania³y inne.
  //  Dzia³a gdy AOwner = Statki_Form.Gra_GLScene.Objects
  //
  //if   ( AOwner = nil )
  //  or (  not Assigned( AOwner )  ) then
  //  Exit;
  //
  //
  //// Aby efekt nie by³ przes³aniany przez inne obiekty.
  //zt_gl_base_scene_object := AOwner.FindChild( 'GLParticleFXRenderer1', true ); //??? Czy szukaæ po nazwie.
  //
  //if zt_gl_base_scene_object <> nil then
  //  zt_gl_base_scene_object.MoveLast();
  //
  //
  //// Aby efekt nie przes³ania³ napisów na ekranie.
  //zt_gl_base_scene_object := AOwner.FindChild( 'Informacje_G³ówne_GLHUDText', true ); //??? Czy szukaæ po nazwie.
  //
  //if zt_gl_base_scene_object <> nil then
  //  zt_gl_base_scene_object.MoveLast();

end;//---//Konstruktor klasy TTrafienia_Efekt.

//Destruktor klasy TTrafienia_Efekt.
destructor TTrafienia_Efekt.Destroy();
begin

  if Self.wizualizacja_alternatywna__gl_custom_scene_object <> nil then
    FreeAndNil( Self.wizualizacja_alternatywna__gl_custom_scene_object );


  inherited;

end;//---//Destruktor klasy TTrafienia_Efekt.

//Funkcja Wizualizacja_Alternatywna__Utwórz().
procedure TTrafienia_Efekt.Wizualizacja_Alternatywna__Utwórz( const dzieñ_jasnoœæ_f : real );
begin

  Self.dzieñ_jasnoœæ_te := dzieñ_jasnoœæ_f;

  if not Self.mg³a_te then
    begin

      if Self.efekt_rodzaj = er_SOS then
        begin

          Self.wizualizacja_alternatywna__gl_custom_scene_object := TGLSphere.Create( Self );
          Self.wizualizacja_alternatywna__gl_custom_scene_object.Material.FrontProperties.Emission.RandomColor();
          Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X := 0.1;
          Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.Y := Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X;
          Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.Z := Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X;

          Self.czas_opóŸnienia_animowania_wizualizacji_alternatywnej_milisekundy_i := 100;

        end
      else//if Self.efekt_rodzaj = er_SOS then
      if Self.efekt_rodzaj in [ er_Trafienie_L¹d__Obra¿enia, er_Trafienie_Statek, er_Trafienie_Statek_Zatopienie, er_Wystrza³ ] then
        begin

          if Self.efekt_rodzaj = er_Trafienie_Statek_Zatopienie then
            Self.wizualizacja_alternatywna__gl_custom_scene_object := TGLSphere.Create( Self )
          else//if Self.efekt_rodzaj = er_Trafienie_Statek_Zatopienie then
            Self.wizualizacja_alternatywna__gl_custom_scene_object := TGLCone.Create( Self );


          Self.wizualizacja_alternatywna__gl_custom_scene_object.Material.FrontProperties.Emission.SetColor(  0.8 + Random( 3 ) * 0.1, 0.5 + Random( 6 ) * 0.1, 0  );

          if Self.efekt_rodzaj = er_Trafienie_Statek_Zatopienie then
            begin

              Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X := 0.5;

              Self.czas_opóŸnienia_animowania_wizualizacji_alternatywnej_milisekundy_i := 100;

            end
          else//if Self.efekt_rodzaj = er_Trafienie_Statek_Zatopienie then
            begin

              Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X := 4;

              Self.czas_opóŸnienia_animowania_wizualizacji_alternatywnej_milisekundy_i := 100 + Random( 100 );

            end;
          //---//if Self.efekt_rodzaj = er_Trafienie_Statek_Zatopienie then


          Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.Y := Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X;
          Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.Z := Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X;

        end
      else//if Self.efekt_rodzaj in [ er_Trafienie_L¹d__Obra¿enia, er_Trafienie_Statek, er_Trafienie_Statek_Zatopienie, er_Wystrza³ ] then
      if Self.efekt_rodzaj = er_Trafienie_Woda then
        begin

          Self.wizualizacja_alternatywna__gl_custom_scene_object := TGLSphere.Create( Self );
          Self.wizualizacja_alternatywna__gl_custom_scene_object.Material.FrontProperties.Emission.Color := GLS.Color.clrBlue;
          Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X := 0.1;
          Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.Y := Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X;
          Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.Z := Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X;

          Self.czas_trwania_milisekundy_te := Self.czas_trwania_milisekundy_te * 2;

          Self.czas_opóŸnienia_animowania_wizualizacji_alternatywnej_milisekundy_i := 100;


          Self.wizualizacja_alternatywna__gl_custom_scene_object.Material.FrontProperties.Emission.Red := Self.wizualizacja_alternatywna__gl_custom_scene_object.Material.FrontProperties.Emission.Red * Self.dzieñ_jasnoœæ_te;
          Self.wizualizacja_alternatywna__gl_custom_scene_object.Material.FrontProperties.Emission.Green := Self.wizualizacja_alternatywna__gl_custom_scene_object.Material.FrontProperties.Emission.Green * Self.dzieñ_jasnoœæ_te;
          Self.wizualizacja_alternatywna__gl_custom_scene_object.Material.FrontProperties.Emission.Blue := Self.wizualizacja_alternatywna__gl_custom_scene_object.Material.FrontProperties.Emission.Blue * Self.dzieñ_jasnoœæ_te;

        end;
      //---//if Self.efekt_rodzaj = er_Trafienie_Woda then

    end
  else//if not Self.mg³a_te then
    begin

      Self.wizualizacja_alternatywna__gl_custom_scene_object := TGLSphere.Create( Self );
      Self.wizualizacja_alternatywna__gl_custom_scene_object.Material.FrontProperties.Emission.Color := GLS.Color.clrGray50;
      Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X := 3;
      Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.Y := Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X;
      Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.Z := Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X;

      Self.czas_trwania_milisekundy_te := Self.czas_trwania_milisekundy_te * 5;

      Self.czas_opóŸnienia_animowania_wizualizacji_alternatywnej_milisekundy_i := 150;


      Self.wizualizacja_alternatywna__gl_custom_scene_object.Material.FrontProperties.Emission.Red := Self.wizualizacja_alternatywna__gl_custom_scene_object.Material.FrontProperties.Emission.Red * Self.dzieñ_jasnoœæ_te;
      Self.wizualizacja_alternatywna__gl_custom_scene_object.Material.FrontProperties.Emission.Green := Self.wizualizacja_alternatywna__gl_custom_scene_object.Material.FrontProperties.Emission.Green * Self.dzieñ_jasnoœæ_te;
      Self.wizualizacja_alternatywna__gl_custom_scene_object.Material.FrontProperties.Emission.Blue := Self.wizualizacja_alternatywna__gl_custom_scene_object.Material.FrontProperties.Emission.Blue * Self.dzieñ_jasnoœæ_te;

    end;
  //---//if not Self.mg³a_te then


  if Self.wizualizacja_alternatywna__gl_custom_scene_object <> nil then
    begin

      Self.wizualizacja_alternatywna__gl_custom_scene_object.Parent := Self;
      Self.wizualizacja_alternatywna__gl_custom_scene_object.Pickable := false;

      if   ( Self.mg³a_te )
        or ( Self.efekt_rodzaj in [ er_SOS, er_Trafienie_Statek_Zatopienie ] ) then
        Self.wizualizacja_alternatywna__gl_custom_scene_object.Material.PolygonMode := pmPoints
      else//if   ( Self.mg³a_te ) (...)
        Self.wizualizacja_alternatywna__gl_custom_scene_object.Material.PolygonMode := pmLines;

    end;
  //---//if Self.wizualizacja_alternatywna__gl_custom_scene_object <> nil then


  if Self.efekt_rodzaj <> er_SOS then
    Self.czas_animowania_wizualizacji_alternatywnej_ostatniego_milisekundy_i := Czas_Teraz_W_Milisekundach();

end;//---//Funkcja Wizualizacja_Alternatywna__Utwórz().

//Funkcja Wizualizacja_Alternatywna__Animuj().
procedure TTrafienia_Efekt.Wizualizacja_Alternatywna__Animuj();
var
  sos_wyzerowany_l : boolean;
begin

  if Self.wizualizacja_alternatywna__gl_custom_scene_object = nil then
    Exit;


  sos_wyzerowany_l := false;


  if not Self.mg³a_te then
    begin

      if Self.efekt_rodzaj in [ er_SOS ] then
        begin

          Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X := Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X * 1.15;
          Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.Y := Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.Y * 1.1;
          Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.Z := Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X;


          if Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X > 100 then
            begin

              if Self.czas_opóŸnienia_animowania_wizualizacji_alternatywnej_milisekundy_i > 100 then
                begin

                  Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X := 0.1;
                  Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.Y := Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X;
                  Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.Z := Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X;

                  Self.czas_opóŸnienia_animowania_wizualizacji_alternatywnej_milisekundy_i := 100;
                  Self.czas_animowania_wizualizacji_alternatywnej_ostatniego_milisekundy_i := 0;

                end
              else//if Self.czas_animowania_wizualizacji_alternatywnej_ostatniego_milisekundy_i > 100 then
                Self.czas_opóŸnienia_animowania_wizualizacji_alternatywnej_milisekundy_i := 2000 + Random( 3000 ); // Po osi¹gniêciu maksymalnego rozmiaru efekt jeszcze siê jakiœ czas utrzymuje.

              sos_wyzerowany_l := true;

            end;
          //---//if Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X > 10 then

        end
      else//if Self.efekt_rodzaj in [ er_SOS ] then
      if Self.efekt_rodzaj in [ er_Trafienie_L¹d__Obra¿enia, er_Trafienie_Statek, er_Trafienie_Statek_Zatopienie, er_Wystrza³ ] then
        begin

          if Self.efekt_rodzaj in [ er_Trafienie_Statek_Zatopienie ] then
            begin

              Self.wizualizacja_alternatywna__gl_custom_scene_object.Material.FrontProperties.Emission.SetColor(  0.9 + Random( 2 ) * 0.1, 0.2 + Random( 3 ) * 0.1, 0  );

              if Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X < 10 then
                Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.Scale( 1.05 );

            end
          else//if Self.efekt_rodzaj = er_Trafienie_Woda then
            begin

              Self.wizualizacja_alternatywna__gl_custom_scene_object.Material.FrontProperties.Emission.SetColor(  0.8 + Random( 3 ) * 0.1, 0.5 + Random( 6 ) * 0.1, 0  );

              Self.czas_opóŸnienia_animowania_wizualizacji_alternatywnej_milisekundy_i := 100 + Random( 100 );

            end;

        end
      else//if Self.efekt_rodzaj in [ er_Trafienie_L¹d__Obra¿enia, er_Trafienie_Statek, er_Trafienie_Statek_Zatopienie, er_Wystrza³ ] then
      if Self.efekt_rodzaj in [ er_Trafienie_Woda ] then
        begin

          Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.Scale( 1.15 );

        end;
      //---//if Self.efekt_rodzaj in [ er_Trafienie_Woda ] then

    end
  else//if not Self.mg³a_te then
    begin

      if Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X <= 500 then
        Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.Scale( 1.05 )
      else//if Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.X <= 500 then
        Self.wizualizacja_alternatywna__gl_custom_scene_object.Scale.Scale( 1.005 );

    end;
  //---//if not Self.mg³a_te then


  if not sos_wyzerowany_l then
    Self.czas_animowania_wizualizacji_alternatywnej_ostatniego_milisekundy_i := Czas_Teraz_W_Milisekundach();

end;//---//Funkcja Wizualizacja_Alternatywna__Animuj().

//Konstruktor klasy TInformacje_Dodatkowe.
constructor TInformacje_Dodatkowe.Create( const napis_f : string = '' );
begin

  Self.utworzenie_data_czas := Now();
  Self.wyœwietlanie_czas_sekundy := informacja_dodatkowa__wyœwietlanie_czas_sekundy__domyœlny_c;
  Self.napis := napis_f;

end;//---//Konstruktor klasy TInformacje_Dodatkowe.

//Konstruktor klasy TInformacje_Dodatkowe.
constructor TInformacje_Dodatkowe.Create( const napis_f : string; const wyœwietlanie_czas_sekundy_f : smallint );
begin

  Self.utworzenie_data_czas := Now();
  Self.wyœwietlanie_czas_sekundy := wyœwietlanie_czas_sekundy_f;
  Self.napis := napis_f;

end;//---//Konstruktor klasy TInformacje_Dodatkowe

//Konstruktor klasy TKlawisz_Konfiguracja.
constructor TKlawisz_Konfiguracja.Create( AOwner : TComponent; const klawiatura_konfiguracja_r_wsk_f, t³umaczenie_komunikaty_r_wsk_f : Pointer );
begin

  inherited Create( AOwner );


  Self.t³umaczenie_komunikaty_r_wsk := t³umaczenie_komunikaty_r_wsk_f;

  Self.klawisz_pole__skupienie_ustawione := false;
  Self.wyszukany := false;
  Self.wyszukany__jako_nastêpny_poprzedni := false;

  Self.Parent := TWinControl(AOwner);
  Self.Align := alBottom; // Aby kolejnoœæ siê nie odwraca³a.
  Self.Align := alTop;
  Self.Height := klawisz_konfiguracja_wysokoœæ_c;

  Self.klawiatura_konfiguracja_r_w := klawiatura_konfiguracja_r_wsk_f;

  Self.klawiatura_konfiguracja_r_w.mysz_niezdefiniowana := false;

  Self.ParentBackground := false;
  Self.Color := clWhite;
  Self.OnMouseEnter := Self.Panel_Mouse_Enter;
  Self.OnMouseLeave := Self.Panel_Mouse_Leave;

  Self.domyœlna_konfiguracja_r.klawisz := Self.klawiatura_konfiguracja_r_w.klawisz;
  Self.domyœlna_konfiguracja_r.czy_mysz := Self.klawiatura_konfiguracja_r_w.czy_mysz;
  Self.domyœlna_konfiguracja_r.plus_alt := Self.klawiatura_konfiguracja_r_w.plus_alt;
  Self.domyœlna_konfiguracja_r.plus_ctrl := Self.klawiatura_konfiguracja_r_w.plus_ctrl;
  Self.domyœlna_konfiguracja_r.plus_shift := Self.klawiatura_konfiguracja_r_w.plus_shift;


  Self.Klawisz_Edit := TEdit.Create( Self );
  Self.Klawisz_Edit.Parent := Self;
  Self.Klawisz_Edit.Left := 5;
  Self.Klawisz_Edit.Top := 5;
  Self.Klawisz_Edit.Width := 100;
  Self.Klawisz_Edit.ShowHint := true;
  Self.Klawisz_Edit.Hint := '';
  Self.Klawisz_Edit.ReadOnly := true;
  Self.Nazwa_Klawisza();
  Self.Klawisz_Edit.OnExit := Self.Edit_Exit;
  Self.Klawisz_Edit.OnKeyDown := Self.Edit_Key_Down;
  Self.Klawisz_Edit.OnMouseDown := Self.Edit_Mouse_Down;
  Self.Klawisz_Edit.OnMouseEnter := Self.Panel_Mouse_Enter;
  Self.Klawisz_Edit.OnMouseLeave := Self.Panel_Mouse_Leave;


  Self.Niezdefiniowane_Button := TButton.Create( Self );
  Self.Niezdefiniowane_Button.Parent := Self;
  Self.Niezdefiniowane_Button.Caption := Self.t³umaczenie_komunikaty_r_wsk.s³owo__brak__du¿¹_liter¹;
  Self.Niezdefiniowane_Button.Left := Self.Klawisz_Edit.Left + Self.Klawisz_Edit.Width + 15;
  Self.Niezdefiniowane_Button.Top := Self.Klawisz_Edit.Top;
  Self.Niezdefiniowane_Button.Height := 20;
  Self.Niezdefiniowane_Button.Width := 55;
  Self.Niezdefiniowane_Button.ShowHint := true;
  Self.Niezdefiniowane_Button.Hint := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__niezdefiniowane__podpowiedŸ;
  Self.Niezdefiniowane_Button.OnClick := Self.Niezdefiniowane_Button_Click;
  Self.Niezdefiniowane_Button.OnMouseEnter := Self.Panel_Mouse_Enter;
  Self.Niezdefiniowane_Button.OnMouseLeave := Self.Panel_Mouse_Leave;

  Self.Domyœlny_Button := TButton.Create( Self );
  Self.Domyœlny_Button.Parent := Self;
  Self.Domyœlny_Button.Caption := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__domyœlny;
  Self.Domyœlny_Button.Left := Self.Niezdefiniowane_Button.Left + Self.Niezdefiniowane_Button.Width + 15;
  Self.Domyœlny_Button.Top := Self.Klawisz_Edit.Top;
  Self.Domyœlny_Button.Height := 20;
  Self.Domyœlny_Button.Width := 55;
  Self.Domyœlny_Button.ShowHint := true;
  Self.Domyœlny_Button.Hint := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__domyœlny__podpowiedŸ;
  Self.Domyœlny_Button.OnClick := Self.Domyœlny_Button_Click;
  Self.Domyœlny_Button.OnMouseEnter := Self.Panel_Mouse_Enter;
  Self.Domyœlny_Button.OnMouseLeave := Self.Panel_Mouse_Leave;


  Self.Czy_Mysz_Klawisz_Konfiguracja_CheckBox := TKlawisz_Konfiguracja_CheckBox.Create( Self );
  Self.Czy_Mysz_Klawisz_Konfiguracja_CheckBox.Parent := Self;
  Self.Czy_Mysz_Klawisz_Konfiguracja_CheckBox.klawisz_rodzaj := [ ssLeft ];
  Self.Czy_Mysz_Klawisz_Konfiguracja_CheckBox.Caption := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__mysz;
  Self.Czy_Mysz_Klawisz_Konfiguracja_CheckBox.Left := Self.Domyœlny_Button.Left + Self.Domyœlny_Button.Width + 15;
  Self.Czy_Mysz_Klawisz_Konfiguracja_CheckBox.Top := Self.Klawisz_Edit.Top;
  Self.Czy_Mysz_Klawisz_Konfiguracja_CheckBox.Width := 45;
  Self.Czy_Mysz_Klawisz_Konfiguracja_CheckBox.ShowHint := true;
  Self.Czy_Mysz_Klawisz_Konfiguracja_CheckBox.Hint := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__mysz__podpowiedŸ;
  Self.Czy_Mysz_Klawisz_Konfiguracja_CheckBox.Checked := Self.klawiatura_konfiguracja_r_w.czy_mysz;
  Self.Czy_Mysz_Klawisz_Konfiguracja_CheckBox.OnClick := Self.Check_Box_Click;
  Self.Czy_Mysz_Klawisz_Konfiguracja_CheckBox.OnMouseEnter := Self.Panel_Mouse_Enter;
  Self.Czy_Mysz_Klawisz_Konfiguracja_CheckBox.OnMouseLeave := Self.Panel_Mouse_Leave;


  Self.Plus_Alt_Klawisz_Konfiguracja_CheckBox := TKlawisz_Konfiguracja_CheckBox.Create( Self );
  Self.Plus_Alt_Klawisz_Konfiguracja_CheckBox.Parent := Self;
  Self.Plus_Alt_Klawisz_Konfiguracja_CheckBox.klawisz_rodzaj := [ ssAlt ];
  Self.Plus_Alt_Klawisz_Konfiguracja_CheckBox.Caption := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__alt;
  Self.Plus_Alt_Klawisz_Konfiguracja_CheckBox.Left := Self.Czy_Mysz_Klawisz_Konfiguracja_CheckBox.Left + Self.Czy_Mysz_Klawisz_Konfiguracja_CheckBox.Width + 15;
  Self.Plus_Alt_Klawisz_Konfiguracja_CheckBox.Top := Self.Klawisz_Edit.Top;
  Self.Plus_Alt_Klawisz_Konfiguracja_CheckBox.Width := 30;
  Self.Plus_Alt_Klawisz_Konfiguracja_CheckBox.ShowHint := true;
  Self.Plus_Alt_Klawisz_Konfiguracja_CheckBox.Hint := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__alt__podpowiedŸ;
  Self.Plus_Alt_Klawisz_Konfiguracja_CheckBox.Checked := Self.klawiatura_konfiguracja_r_w.plus_alt;
  //Self.klawiatura_konfiguracja_r_w.plus_alt := true;
  Self.Plus_Alt_Klawisz_Konfiguracja_CheckBox.OnClick := Self.Check_Box_Click;
  Self.Plus_Alt_Klawisz_Konfiguracja_CheckBox.OnMouseEnter := Self.Panel_Mouse_Enter;
  Self.Plus_Alt_Klawisz_Konfiguracja_CheckBox.OnMouseLeave := Self.Panel_Mouse_Leave;

  Self.Plus_Ctrl_Klawisz_Konfiguracja_CheckBox := TKlawisz_Konfiguracja_CheckBox.Create( Self );
  Self.Plus_Ctrl_Klawisz_Konfiguracja_CheckBox.Parent := Self;
  Self.Plus_Ctrl_Klawisz_Konfiguracja_CheckBox.klawisz_rodzaj := [ ssCtrl ];
  Self.Plus_Ctrl_Klawisz_Konfiguracja_CheckBox.Caption := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__ctrl;
  Self.Plus_Ctrl_Klawisz_Konfiguracja_CheckBox.Left := Self.Plus_Alt_Klawisz_Konfiguracja_CheckBox.Left + Self.Plus_Alt_Klawisz_Konfiguracja_CheckBox.Width + 10;
  Self.Plus_Ctrl_Klawisz_Konfiguracja_CheckBox.Top := Self.Klawisz_Edit.Top;
  Self.Plus_Ctrl_Klawisz_Konfiguracja_CheckBox.Width := 35;
  Self.Plus_Ctrl_Klawisz_Konfiguracja_CheckBox.ShowHint := true;
  Self.Plus_Ctrl_Klawisz_Konfiguracja_CheckBox.Hint := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__ctrl__podpowiedŸ;
  Self.Plus_Ctrl_Klawisz_Konfiguracja_CheckBox.Checked := Self.klawiatura_konfiguracja_r_w.plus_ctrl;
  Self.Plus_Ctrl_Klawisz_Konfiguracja_CheckBox.OnClick := Self.Check_Box_Click;
  Self.Plus_Ctrl_Klawisz_Konfiguracja_CheckBox.OnMouseEnter := Self.Panel_Mouse_Enter;
  Self.Plus_Ctrl_Klawisz_Konfiguracja_CheckBox.OnMouseLeave := Self.Panel_Mouse_Leave;

  Self.Plus_Shift_Klawisz_Konfiguracja_CheckBox := TKlawisz_Konfiguracja_CheckBox.Create( Self );
  Self.Plus_Shift_Klawisz_Konfiguracja_CheckBox.Parent := Self;
  Self.Plus_Shift_Klawisz_Konfiguracja_CheckBox.klawisz_rodzaj := [ ssShift ];
  Self.Plus_Shift_Klawisz_Konfiguracja_CheckBox.Caption := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__shift;
  Self.Plus_Shift_Klawisz_Konfiguracja_CheckBox.Left := Self.Plus_Ctrl_Klawisz_Konfiguracja_CheckBox.Left + Self.Plus_Ctrl_Klawisz_Konfiguracja_CheckBox.Width + 10;
  Self.Plus_Shift_Klawisz_Konfiguracja_CheckBox.Top := Self.Klawisz_Edit.Top;
  Self.Plus_Shift_Klawisz_Konfiguracja_CheckBox.Width := 40;
  Self.Plus_Shift_Klawisz_Konfiguracja_CheckBox.ShowHint := true;
  Self.Plus_Shift_Klawisz_Konfiguracja_CheckBox.Hint := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__shift__podpowiedŸ;
  Self.Plus_Shift_Klawisz_Konfiguracja_CheckBox.Checked := Self.klawiatura_konfiguracja_r_w.plus_shift;
  Self.Plus_Shift_Klawisz_Konfiguracja_CheckBox.OnClick := Self.Check_Box_Click;
  Self.Plus_Shift_Klawisz_Konfiguracja_CheckBox.OnMouseEnter := Self.Panel_Mouse_Enter;
  Self.Plus_Shift_Klawisz_Konfiguracja_CheckBox.OnMouseLeave := Self.Panel_Mouse_Leave;


  Self.Polecenie_Nazwa_Label := TLabel.Create( Self );
  Self.Polecenie_Nazwa_Label.Parent := Self;

  if Trim( Self.klawiatura_konfiguracja_r_w.polecenie__t³umaczenie ) <> '' then
    Self.Polecenie_Nazwa_Label.Caption := Self.klawiatura_konfiguracja_r_w.polecenie__t³umaczenie
  else//if Trim( Self.klawiatura_konfiguracja_r_w.polecenie__t³umaczenie ) <> '' then
    Self.Polecenie_Nazwa_Label.Caption := Self.klawiatura_konfiguracja_r_w.polecenie__nazwa;

  Self.Polecenie_Nazwa_Label.Left := Self.Plus_Shift_Klawisz_Konfiguracja_CheckBox.Left + Self.Plus_Shift_Klawisz_Konfiguracja_CheckBox.Width + 10;
  Self.Polecenie_Nazwa_Label.Top := Self.Klawisz_Edit.Top;
  Self.Polecenie_Nazwa_Label.Font.Style := [ fsBold ];
  //Self.Polecenie_Nazwa_Label.Tag := Self.Polecenie_Nazwa_Label.Left;
  //Self.Polecenie_Nazwa_Label.Tag := Self.Polecenie_Nazwa_Label.Font.Size;
  Self.Polecenie_Nazwa_Label.OnMouseEnter := Self.Panel_Mouse_Enter;
  Self.Polecenie_Nazwa_Label.OnMouseLeave := Self.Panel_Mouse_Leave;

end;//---//Konstruktor klasy TKlawisz_Konfiguracja.

//Destruktor klasy TKlawisz_Konfiguracja.
destructor TKlawisz_Konfiguracja.Destroy();
begin

  Self.klawiatura_konfiguracja_r_w := nil;

  FreeAndNil( Self.Polecenie_Nazwa_Label );
  FreeAndNil( Self.Klawisz_Edit );
  FreeAndNil( Self.Domyœlny_Button );
  FreeAndNil( Self.Niezdefiniowane_Button );
  FreeAndNil( Self.Czy_Mysz_Klawisz_Konfiguracja_CheckBox );
  FreeAndNil( Self.Plus_Alt_Klawisz_Konfiguracja_CheckBox );
  FreeAndNil( Self.Plus_Ctrl_Klawisz_Konfiguracja_CheckBox );
  FreeAndNil( Self.Plus_Shift_Klawisz_Konfiguracja_CheckBox );

  inherited;

end;//---//Destruktor klasy TKlawisz_Konfiguracja.

//Funkcja Nazwa_Klawisza().
function TKlawisz_Konfiguracja.Nazwa_Klawisza() : string;
var
  bufor : array [ 0..255 ] of Char;
begin

  if not Self.klawiatura_konfiguracja_r_w.czy_mysz then
    begin

      if Self.klawiatura_konfiguracja_r_w.klawisz = 0 then
        Result := '<' + Self.t³umaczenie_komunikaty_r_wsk.s³owo__brak__ma³¹_liter¹ + '>'
      else
      if Self.klawiatura_konfiguracja_r_w.klawisz = 19 then
        Result := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__klawisz__pause_break
      else
      if Self.klawiatura_konfiguracja_r_w.klawisz = 33 then
        Result := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__klawisz__page_up
      else
      if Self.klawiatura_konfiguracja_r_w.klawisz = 34 then
        Result := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__klawisz__page_down
      else
      if Self.klawiatura_konfiguracja_r_w.klawisz = 35 then
        Result := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__klawisz__end
      else
      if Self.klawiatura_konfiguracja_r_w.klawisz = 36 then
        Result := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__klawisz__home
      else
      if Self.klawiatura_konfiguracja_r_w.klawisz = 37 then
        Result := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__klawisz__kursor_lewo
      else
      if Self.klawiatura_konfiguracja_r_w.klawisz = 38 then
        Result := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__klawisz__kursor_góra
      else
      if Self.klawiatura_konfiguracja_r_w.klawisz = 39 then
        Result := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__klawisz__kursor_prawo
      else
      if Self.klawiatura_konfiguracja_r_w.klawisz = 40 then
        Result := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__klawisz__kursor_dó³
      else
      if Self.klawiatura_konfiguracja_r_w.klawisz = 45 then
        Result := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__klawisz__insert
      else
      if Self.klawiatura_konfiguracja_r_w.klawisz = 46 then
        Result := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__klawisz__delete
      else
      if Self.klawiatura_konfiguracja_r_w.klawisz = 91 then
        Result := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__klawisz__windows_lewy
      else
      if Self.klawiatura_konfiguracja_r_w.klawisz = 92 then
        Result := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__klawisz__windows_prawy
      else
      if Self.klawiatura_konfiguracja_r_w.klawisz = 93 then
        Result := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__klawisz__menu
      else
      if Self.klawiatura_konfiguracja_r_w.klawisz = 111 then
        Result := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__klawisz__num_dzielenie // Num /
      else
      if Self.klawiatura_konfiguracja_r_w.klawisz = 144 then
        Result := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__klawisz__num_lock
      else
        begin

          GetKeyNameText(  MapVirtualKey( Self.klawiatura_konfiguracja_r_w.klawisz, 0  ) shl 16, bufor, 256  );
          Result := bufor;

        end;
      //---//

    end
  else//if not Self.klawiatura_konfiguracja_r_w.czy_mysz then
    begin

      if Self.klawiatura_konfiguracja_r_w.mysz_niezdefiniowana then
        Result := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja___kliknij_w_polu_przyciskiem_myszy_
      else
      if Self.klawiatura_konfiguracja_r_w.klawisz = word(mbLeft) then
        Result := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__klawisz__mysz_lewy
      else
      if Self.klawiatura_konfiguracja_r_w.klawisz = word(mbMiddle) then
        Result := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__klawisz__mysz_œrodkowy
      else
      if Self.klawiatura_konfiguracja_r_w.klawisz = word(mbRight) then
        Result := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__klawisz__mysz_prawy
      else
        Result := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__mysz + ' ' + IntToStr( Self.klawiatura_konfiguracja_r_w.klawisz );

    end;
  //---//if not Self.klawiatura_konfiguracja_r_w.czy_mysz then

  Self.Klawisz_Edit.Text := Result;
  Self.Klawisz_Edit.Hint := Self.Klawisz_Edit.Text + ' (' + IntToStr( Self.klawiatura_konfiguracja_r_w.klawisz ) + ').';

end;//---//Funkcja Nazwa_Klawisza().

//Funkcja Check_Box_Click().
procedure TKlawisz_Konfiguracja.Check_Box_Click( Sender : TObject );
var
  czy_mysz_l : boolean;
begin

  if   ( Sender = nil )
    or (  not Assigned( Sender )  )
    or (  not ( Sender is TKlawisz_Konfiguracja_CheckBox )  )
    or ( Self = nil )
    or (  not Assigned( Self )  ) then
    Exit;

  czy_mysz_l := Self.klawiatura_konfiguracja_r_w.czy_mysz;


  //if TKlawisz_Konfiguracja_CheckBox(Sender).Caption = 'Mysz' then
  if TKlawisz_Konfiguracja_CheckBox(Sender).klawisz_rodzaj = [ ssLeft ] then
    begin

      Self.klawiatura_konfiguracja_r_w.czy_mysz := TKlawisz_Konfiguracja_CheckBox(Sender).Checked;
      Self.klawiatura_konfiguracja_r_w.klawisz := 0;

      if    ( czy_mysz_l <> Self.klawiatura_konfiguracja_r_w.czy_mysz )
        and ( Self.klawiatura_konfiguracja_r_w.czy_mysz ) then
        begin

          Self.klawiatura_konfiguracja_r_w.mysz_niezdefiniowana := true;

        end
      else//if    ( czy_mysz_l <> Self.klawiatura_konfiguracja_r_w.czy_mysz ) (...)
        begin

          if Self.klawiatura_konfiguracja_r_w.mysz_niezdefiniowana then
            Self.klawiatura_konfiguracja_r_w.mysz_niezdefiniowana := false;

        end;
      //---//if    ( czy_mysz_l <> Self.klawiatura_konfiguracja_r_w.czy_mysz ) (...)

    end
  else
  //if TKlawisz_Konfiguracja_CheckBox(Sender).Caption = 'Alt' then
  if TKlawisz_Konfiguracja_CheckBox(Sender).klawisz_rodzaj = [ ssAlt ] then
    Self.klawiatura_konfiguracja_r_w.plus_alt := TKlawisz_Konfiguracja_CheckBox(Sender).Checked
  else
  //if TKlawisz_Konfiguracja_CheckBox(Sender).Caption = 'Ctrl' then
  if TKlawisz_Konfiguracja_CheckBox(Sender).klawisz_rodzaj = [ ssCtrl ] then
    Self.klawiatura_konfiguracja_r_w.plus_ctrl := TKlawisz_Konfiguracja_CheckBox(Sender).Checked
  else
  //if TKlawisz_Konfiguracja_CheckBox(Sender).Caption = 'Shift' then
  if TKlawisz_Konfiguracja_CheckBox(Sender).klawisz_rodzaj = [ ssShift ] then
    Self.klawiatura_konfiguracja_r_w.plus_shift := TKlawisz_Konfiguracja_CheckBox(Sender).Checked;


  Self.Nazwa_Klawisza();

end;//---//Funkcja Check_Box_Click().

//Funkcja Edit_Exit().
procedure TKlawisz_Konfiguracja.Edit_Exit( Sender : TObject );
begin

  if   ( Sender = nil )
    or (  not Assigned( Sender )  )
    or (  not ( Sender is TEdit )  )
    or ( Self = nil )
    or (  not Assigned( Self )  ) then
    Exit;

  Self.klawisz_pole__skupienie_ustawione := false;

end;//---//Funkcja Edit_Exit().

//Funkcja Edit_Key_Down().
procedure TKlawisz_Konfiguracja.Edit_Key_Down( Sender : TObject; var Key : Word; Shift : TShiftState );
begin

  if   ( Sender = nil )
    or (  not Assigned( Sender )  )
    or (  not ( Sender is TEdit )  )
    or ( Self = nil )
    or (  not Assigned( Self )  )
    or ( Self.klawiatura_konfiguracja_r_w.czy_mysz ) then
    Exit;


  if Key = VK_MENU then // Alt.
    begin

      Self.klawiatura_konfiguracja_r_w.plus_alt := true;

    end
  else//if Key = VK_MENU then
    if Self.klawiatura_konfiguracja_r_w.klawisz = VK_MENU then
      begin

         Self.klawiatura_konfiguracja_r_w.plus_alt := false;

         if Self.klawiatura_konfiguracja_r_w.plus_ctrl then // Prawy Alt zg³asza siê jako Alt i Ctrl jednoczeœnie.
           Self.klawiatura_konfiguracja_r_w.plus_ctrl := false;

      end;
    //---//if Self.klawiatura_konfiguracja_r_w.klawisz = VK_MENU then

  if   ( Key = VK_CONTROL )
    or (
             ( ssAlt in Shift ) // Prawy Alt zg³asza siê jako Alt i Ctrl jednoczeœnie.
         and ( ssCtrl in Shift )
       ) then
    begin

      Self.klawiatura_konfiguracja_r_w.plus_ctrl := true;

    end
  else//if Key = VK_CONTROL then
    if Self.klawiatura_konfiguracja_r_w.klawisz = VK_CONTROL then
      begin

         Self.klawiatura_konfiguracja_r_w.plus_ctrl := false;

      end;
    //---//if Self.klawiatura_konfiguracja_r_w.klawisz = VK_CONTROL then

  if Key = VK_SHIFT then
    begin

      Self.klawiatura_konfiguracja_r_w.plus_shift := true;

    end
  else//if Key = VK_SHIFT then
    if Self.klawiatura_konfiguracja_r_w.klawisz = VK_SHIFT then
      begin

         Self.klawiatura_konfiguracja_r_w.plus_shift := false;

      end;
    //---//if Self.klawiatura_konfiguracja_r_w.klawisz = VK_SHIFT then


  Self.Plus_Alt_Klawisz_Konfiguracja_CheckBox.Checked := Self.klawiatura_konfiguracja_r_w.plus_alt;
  Self.Plus_Ctrl_Klawisz_Konfiguracja_CheckBox.Checked := Self.klawiatura_konfiguracja_r_w.plus_ctrl;
  Self.Plus_Shift_Klawisz_Konfiguracja_CheckBox.Checked := Self.klawiatura_konfiguracja_r_w.plus_shift;


  Self.klawiatura_konfiguracja_r_w.klawisz := Key;
  Self.Nazwa_Klawisza();

end;//---//Funkcja Edit_Key_Down().

//Funkcja Edit_Mouse_Down().
procedure TKlawisz_Konfiguracja.Edit_Mouse_Down( Sender : TObject; Button : TMouseButton; Shift : TShiftState; X, Y : Integer );
begin

  if   ( Sender = nil )
    or (  not Assigned( Sender )  )
    or (  not ( Sender is TEdit )  )
    or ( Self = nil )
    or (  not Assigned( Self )  )
    or ( not Self.klawiatura_konfiguracja_r_w.czy_mysz ) then
    Exit;


  if not Self.klawisz_pole__skupienie_ustawione then
    begin

      // Aby pierwsze klikniêcie mysz¹ w polu (ustawienie siê w polu) nie zmienia³o definicji klawisza.

      Self.klawisz_pole__skupienie_ustawione := true;
      Exit

    end;
  //---//if not Self.klawisz_pole__skupienie_ustawione then


  if Self.klawiatura_konfiguracja_r_w.mysz_niezdefiniowana then
    Self.klawiatura_konfiguracja_r_w.mysz_niezdefiniowana := false;


  Self.klawiatura_konfiguracja_r_w.klawisz := word(Button);
  Self.Nazwa_Klawisza();

end;//---//Funkcja Edit_Mouse_Down().

//Funkcja Domyœlny_Button_Click().
procedure TKlawisz_Konfiguracja.Domyœlny_Button_Click( Sender : TObject );
begin

  if   ( Sender = nil )
    or (  not Assigned( Sender )  )
    or (  not ( Sender is TButton )  )
    or ( Self = nil )
    or (  not Assigned( Self )  ) then
    Exit;


  Self.klawiatura_konfiguracja_r_w.klawisz := Self.domyœlna_konfiguracja_r.klawisz;
  Self.klawiatura_konfiguracja_r_w.czy_mysz := Self.domyœlna_konfiguracja_r.czy_mysz;
  Self.klawiatura_konfiguracja_r_w.plus_alt := Self.domyœlna_konfiguracja_r.plus_alt;
  Self.klawiatura_konfiguracja_r_w.plus_ctrl := Self.domyœlna_konfiguracja_r.plus_ctrl;
  Self.klawiatura_konfiguracja_r_w.plus_shift := Self.domyœlna_konfiguracja_r.plus_shift;

  Self.Czy_Mysz_Klawisz_Konfiguracja_CheckBox.Checked := Self.domyœlna_konfiguracja_r.czy_mysz;
  Self.Plus_Alt_Klawisz_Konfiguracja_CheckBox.Checked := Self.domyœlna_konfiguracja_r.plus_alt;
  Self.Plus_Ctrl_Klawisz_Konfiguracja_CheckBox.Checked := Self.domyœlna_konfiguracja_r.plus_ctrl;
  Self.Plus_Shift_Klawisz_Konfiguracja_CheckBox.Checked := Self.domyœlna_konfiguracja_r.plus_shift;

  // Dodatkowe sprawdzenie (nie powinny zmieniæ siê te wartoœci).
  if Self.klawiatura_konfiguracja_r_w.mysz_niezdefiniowana then
    Self.klawiatura_konfiguracja_r_w.mysz_niezdefiniowana := false;

  if Self.klawiatura_konfiguracja_r_w.klawisz <> Self.domyœlna_konfiguracja_r.klawisz then
    Self.klawiatura_konfiguracja_r_w.klawisz := Self.domyœlna_konfiguracja_r.klawisz;
  //---// Dodatkowe sprawdzenie (nie powinny zmieniæ siê te wartoœci).

  Self.Nazwa_Klawisza();

end;//---//Funkcja Domyœlny_Button_Click().

//Funkcja Niezdefiniowane_Button_Click().
procedure TKlawisz_Konfiguracja.Niezdefiniowane_Button_Click( Sender : TObject );
begin

  if   ( Sender = nil )
    or (  not Assigned( Sender )  )
    or (  not ( Sender is TButton )  )
    or ( Self = nil )
    or (  not Assigned( Self )  ) then
    Exit;


  Self.klawiatura_konfiguracja_r_w.czy_mysz := false;
  Self.klawiatura_konfiguracja_r_w.klawisz := 0;

  Self.Czy_Mysz_Klawisz_Konfiguracja_CheckBox.Checked := false;
  Self.Plus_Alt_Klawisz_Konfiguracja_CheckBox.Checked := false;
  Self.Plus_Ctrl_Klawisz_Konfiguracja_CheckBox.Checked := false;
  Self.Plus_Shift_Klawisz_Konfiguracja_CheckBox.Checked := false;

  Self.Nazwa_Klawisza();

end;//---//Funkcja Niezdefiniowane_Button_Click().

//Funkcja Panel_Mouse_Enter().
procedure TKlawisz_Konfiguracja.Panel_Mouse_Enter( Sender : TObject );
begin

  if   ( Self = nil )
    or (  not Assigned( Self )  ) then
    Exit;


  Self.Color := kolor__niebieski_jasny_c; //clWhite
  //Self.Polecenie_Nazwa_Label.Font.Color := clNavy;
  //Self.Polecenie_Nazwa_Label.Left := Self.Polecenie_Nazwa_Label.Tag + 10;
  //Self.Polecenie_Nazwa_Label.Font.Size := Self.Polecenie_Nazwa_Label.Font.Size + 3;

end;//---//Funkcja Panel_Mouse_Enter().

//Funkcja Panel_Mouse_Leave().
procedure TKlawisz_Konfiguracja.Panel_Mouse_Leave( Sender : TObject );
begin

  if   ( Self = nil )
    or (  not Assigned( Self )  ) then
    Exit;


  //Self.Polecenie_Nazwa_Label.Left := Self.Polecenie_Nazwa_Label.Tag;
  //Self.Polecenie_Nazwa_Label.Font.Color := clWindowText;
  //Self.Polecenie_Nazwa_Label.Font.Size := Self.Polecenie_Nazwa_Label.Tag;

  if not Self.wyszukany then
    Self.Color := clWhite //clBtnFace
  else//if not Self.wyszukany then
    if Self.wyszukany__jako_nastêpny_poprzedni then
      Self.Color := clInfoBk
    else//if Self.wyszukany__jako_nastêpny_poprzedni then
      Self.Color := clMoneyGreen;

end;//---//Funkcja Panel_Mouse_Leave().

//Funkcja T³umaczenie_Ustaw().
procedure TKlawisz_Konfiguracja.T³umaczenie_Ustaw();
var
  polecenie__opis_l : string;
  rtti_field : TRttiField;
  rtti_type : TRttiType;
begin

  if   ( Self = nil )
    or (  not Assigned( Self )  ) then
    Exit;


  Self.Niezdefiniowane_Button.Caption := Self.t³umaczenie_komunikaty_r_wsk.s³owo__brak__du¿¹_liter¹;
  Self.Niezdefiniowane_Button.Hint := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__niezdefiniowane__podpowiedŸ;
  Self.Domyœlny_Button.Caption := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__domyœlny;
  Self.Domyœlny_Button.Hint := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__domyœlny__podpowiedŸ;
  Self.Czy_Mysz_Klawisz_Konfiguracja_CheckBox.Caption := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__mysz;
  Self.Czy_Mysz_Klawisz_Konfiguracja_CheckBox.Hint := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__mysz__podpowiedŸ;
  Self.Plus_Alt_Klawisz_Konfiguracja_CheckBox.Caption := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__alt;
  Self.Plus_Alt_Klawisz_Konfiguracja_CheckBox.Hint := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__alt__podpowiedŸ;
  Self.Plus_Ctrl_Klawisz_Konfiguracja_CheckBox.Caption := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__ctrl;
  Self.Plus_Ctrl_Klawisz_Konfiguracja_CheckBox.Hint := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__ctrl__podpowiedŸ;
  Self.Plus_Shift_Klawisz_Konfiguracja_CheckBox.Caption := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__shift;
  Self.Plus_Shift_Klawisz_Konfiguracja_CheckBox.Hint := Self.t³umaczenie_komunikaty_r_wsk.klawiatura_konfiguracja__shift__podpowiedŸ;


  // Klawiatura konfiguracja.
  polecenie__opis_l := '';
  rtti_type := TRTTIContext.Create.GetType(  System.TypeInfo( TT³umaczenie_Komunikaty_r )  );

  for rtti_field in rtti_type.GetFields do
    if rtti_field.Name = Self.klawiatura_konfiguracja_r_w.polecenie__nazwa then
      begin

        if rtti_field.GetValue( Self.t³umaczenie_komunikaty_r_wsk ).Kind in [ System.TypInfo.tkUString, System.TypInfo.tkString, System.TypInfo.tkWString ] then
          polecenie__opis_l := rtti_field.GetValue( Self.t³umaczenie_komunikaty_r_wsk ).ToString;

        Break;

      end;
    //---//if rtti_field.Name = Self.klawiatura_konfiguracja_r_w.polecenie__nazwa then

  if Trim( polecenie__opis_l ) <> '' then
    Self.Polecenie_Nazwa_Label.Caption := polecenie__opis_l;
  //---// Klawiatura konfiguracja.

end;//---//Funkcja T³umaczenie_Ustaw().

//Konstruktor klasy TWygl¹d_Kolor_Definicja.
constructor TWygl¹d_Kolor_Definicja.Create();
begin

  SetLength( Self.wygl¹d_kolor_definicja_t, 0 );

end;//---//Konstruktor klasy TWygl¹d_Kolor_Definicja.

//Destruktor klasy TWygl¹d_Kolor_Definicja.
destructor TWygl¹d_Kolor_Definicja.Destroy();
begin

  SetLength( Self.wygl¹d_kolor_definicja_t, 0 );

end;//---//Destruktor klasy TWygl¹d_Kolor_Definicja.

//Funkcja Definicja_Istnieje().
function TWygl¹d_Kolor_Definicja.Definicja_Istnieje( const kolor_definicja_nazwa_f : string ) : boolean;
var
  i : integer;
begin

  //
  // Funkcja sprawdza czy definicja danego koloru ju¿ jest zapamiêtana.
  //
  // Zwraca prawdê gdy definicja danego koloru ju¿ jest zapamiêtana.
  //
  // Parametry:
  //   kolor_definicja_nazwa_f
  //

  Result := false;

  for i := 0 to Length( Self.wygl¹d_kolor_definicja_t ) - 1 do
    if Self.wygl¹d_kolor_definicja_t[ i ].kolor_definicja_nazwa = kolor_definicja_nazwa_f then
      begin

        Result := true;
        Break;

      end;
    //---//if Self.wygl¹d_kolor_definicja_t[ i ].kolor_definicja_nazwa = kolor_definicja_nazwa_f then

end;//---//Funkcja Definicja_Istnieje().

//Funkcja Dodaj_Definicjê().
procedure TWygl¹d_Kolor_Definicja.Dodaj_Definicjê( const czerwony_f, zielony_f, niebieski_f, przezroczystoœæ_f : real; const kolor_definicja_nazwa_f : string );
var
  i : integer;
begin

  //
  // Funkcja dodaje definicjê liczby koloru.
  //
  // Parametry:
  //   czerwony_f
  //   zielony_f
  //   niebieski_f
  //   przezroczystoœæ_f
  //   kolor_definicja_nazwa_f
  //

  i := Length( Self.wygl¹d_kolor_definicja_t );
  SetLength( wygl¹d_kolor_definicja_t, i + 1 );

  wygl¹d_kolor_definicja_t[ i ].kolor_definicja_nazwa := kolor_definicja_nazwa_f;
  GLS.VectorGeometry.SetVector( wygl¹d_kolor_definicja_t[ i ].kolor_vector, czerwony_f, zielony_f, niebieski_f, przezroczystoœæ_f );

end;//---//Funkcja Dodaj_Definicjê().

//Funkcja Odczytaj_Definicjê().
function TWygl¹d_Kolor_Definicja.Odczytaj_Definicjê( const kolor_definicja_nazwa_f : string ) : GLS.VectorTypes.TVector4f;
var
  i : integer;
begin

  //
  // Zwraca zdefiniowany kolor.
  //
  // Parametry:
  //   kolor_definicja_nazwa_f
  //

  //GLS.VectorGeometry.SetVector( Result, 0, 0, 0, 1 );
  Result := GLS.Color.clrGray20;

  for i := 0 to Length( Self.wygl¹d_kolor_definicja_t ) - 1 do
    if Self.wygl¹d_kolor_definicja_t[ i ].kolor_definicja_nazwa = kolor_definicja_nazwa_f then
      begin

        Result := Self.wygl¹d_kolor_definicja_t[ i ].kolor_vector;
        Break;

      end;
    //---//if Self.wygl¹d_kolor_definicja_t[ i ].kolor_definicja_nazwa = kolor_definicja_nazwa_f then

end;//---//Funkcja Odczytaj_Definicjê().

//Konstruktor klasy TWygl¹d_Liczba_Definicja.
constructor TWygl¹d_Liczba_Definicja.Create();
begin

  SetLength( Self.wygl¹d_liczba_definicja_t, 0 );

end;//---//Konstruktor klasy TWygl¹d_Liczba_Definicja.

//Destruktor klasy TWygl¹d_Liczba_Definicja.
destructor TWygl¹d_Liczba_Definicja.Destroy();
begin

  SetLength( Self.wygl¹d_liczba_definicja_t, 0 );

end;//---//Destruktor klasy TWygl¹d_Liczba_Definicja.

//Funkcja Definicja_Istnieje().
function TWygl¹d_Liczba_Definicja.Definicja_Istnieje( const liczba_definicja_nazwa_f : string ) : boolean;
var
  i : integer;
begin

  //
  // Funkcja sprawdza czy definicja danej liczby ju¿ jest zapamiêtana.
  //
  // Zwraca prawdê gdy definicja danej liczby ju¿ jest zapamiêtana.
  //
  // Parametry:
  //   liczba_definicja_nazwa_f
  //

  Result := false;

  for i := 0 to Length( Self.wygl¹d_liczba_definicja_t ) - 1 do
    if Self.wygl¹d_liczba_definicja_t[ i ].liczba_definicja_nazwa = liczba_definicja_nazwa_f then
      begin

        Result := true;
        Break;

      end;
    //---//if Self.wygl¹d_liczba_definicja_t[ i ].liczba_definicja_nazwa = liczba_definicja_nazwa_f then

end;//---//Funkcja Definicja_Istnieje().

//Funkcja Dodaj_Definicjê().
procedure TWygl¹d_Liczba_Definicja.Dodaj_Definicjê( const liczba_f : real; const liczba_definicja_nazwa_f : string );
var
  i : integer;
begin

  //
  // Funkcja dodaje definicjê liczby.
  //
  // Parametry:
  //   liczba_f
  //   liczba_definicja_nazwa_f
  //

  i := Length( Self.wygl¹d_liczba_definicja_t );
  SetLength( wygl¹d_liczba_definicja_t, i + 1 );

  wygl¹d_liczba_definicja_t[ i ].liczba_definicja_nazwa := liczba_definicja_nazwa_f;
  wygl¹d_liczba_definicja_t[ i ].liczba := liczba_f;

end;//---//Funkcja Dodaj_Definicjê().

//Funkcja Odczytaj_Definicjê().
function TWygl¹d_Liczba_Definicja.Odczytaj_Definicjê( const liczba_definicja_nazwa_f : string ) : real;
var
  i : integer;
begin

  //
  // Zwraca zdefiniowan¹ liczbê.
  //
  // Parametry:
  //   liczba_definicja_nazwa_f
  //

  Result := 0;

  for i := 0 to Length( Self.wygl¹d_liczba_definicja_t ) - 1 do
    if Self.wygl¹d_liczba_definicja_t[ i ].liczba_definicja_nazwa = liczba_definicja_nazwa_f then
      begin

        Result := Self.wygl¹d_liczba_definicja_t[ i ].liczba;
        Break;

      end;
    //---//if Self.wygl¹d_liczba_definicja_t[ i ].liczba_definicja_nazwa = liczba_definicja_nazwa_f then

end;//---//Funkcja Odczytaj_Definicjê().

//Konstruktor klasy TTCP_Klienci_Lista.
constructor TTCP_Klienci_Lista.Create();
begin

  Self.identyfikator_najmniejszy := -1;
  Self.identyfikator_najwiêkszy := 0;

  Self.klienci_lista_list := TList.Create();

end;//---//Konstruktor klasy TTCP_Klienci_Lista.

//Destruktor klasy TTCP_Klienci_Lista.
destructor TTCP_Klienci_Lista.Destroy();
begin

  Self.Usuñ_Wszystkich();

  FreeAndNil( Self.klienci_lista_list );

end;//---//Destruktor klasy TTCP_Klienci_Lista.

//Funkcja Dodaj_Aktualizuj().
function TTCP_Klienci_Lista.Dodaj_Aktualizuj( const peer_port_f, identyfikator_f : integer ) : TTCP_Klient_Dane;
var
  i : integer;
begin

  //
  // Funkcja dodaje albo aktualizuje dane gracza.
  //
  // Zwraca rekord danych gracza.
  //
  // Parametry:
  //   peer_port_f
  //   identyfikator_f:
  //

  Result := nil;

  if peer_port_f >= 0 then
    for i := Self.klienci_lista_list.Count - 1 downto 0 do
      if TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).identyfikator__kd = identyfikator_f then
        begin

          // Sprawdza czy klient, który siê po³¹czy³ jest na liœcie.

          Result := TTCP_Klient_Dane(Self.klienci_lista_list[ i ]);
          Result.peer_port_tcp__kd := peer_port_f;
          Result.data_czas__od³¹czenia__kd := 0;
          Result.data_czas__pod³¹czenia_ostatniego__kd := Now();
          Result.od³¹czony__kd := false;

          Exit;

        end;
      //---//if TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).identyfikator__kd = identyfikator_f then


  if identyfikator_f > 0 then
    Exit; // Wskazanego identyfikatora nie ma na liœcie.


  Result := TTCP_Klient_Dane.Create();
  Result.id_grupa__kd := 0;
  Result.id_statek_schemat__kd := -1; // W statystykach wyœwietla dane pierwszego statku z listy.
  Result.id_statek__samolot_schemat__kd := -1; // W statystykach wyœwietla dane pierwszego statku z listy.
  Result.peer_port_tcp__kd := peer_port_f;
  Result.peer_port_udp__kd := 0;
  Result.data_czas__od³¹czenia__kd := 0;
  Result.data_czas__pod³¹czenia__kd := Now();
  Result.data_czas__pod³¹czenia_ostatniego__kd := Result.data_czas__pod³¹czenia__kd;
  Result.data_czas__udp_kontakt__kd := 0;
  Result.dane_wys³ane__kd := false;
  Result.gotowy__kd := false;
  Result.od³¹czony__kd := false;
  Result.w_grze__kd := false;

  if Self.klienci_lista_list.Count <= 0 then
    begin

      // Dodaje do listy serwer.
      Result.dane_wys³ane__kd := true;

      if peer_port_f >= 0 then
        Result.identyfikator__kd := 1
      else//if peer_port_f >= 0 then
        Result.identyfikator__kd := peer_port_f;

    end
  else//if Self.klienci_lista_list.Count <= 0 then
    if peer_port_f >= 0 then
      begin

        // Dodaje do listy gracza.

        Self.identyfikator_najwiêkszy := Self.identyfikator_najwiêkszy + 1;
        Result.identyfikator__kd := Self.identyfikator_najwiêkszy;

      end
    else//if Self.klienci_lista_list.Count <= 0 then
      begin

        // Dodaje do listy SI.

        Result.dane_wys³ane__kd := true;
        Result.gotowy__kd := true;

        Self.identyfikator_najmniejszy := Self.identyfikator_najmniejszy - 1;
        Result.identyfikator__kd := Self.identyfikator_najmniejszy;

      end;
    //---//if Self.klienci_lista_list.Count <= 0 then


  Self.klienci_lista_list.Add( Result );

end;//---//Funkcja Dodaj_Aktualizuj().

//Funkcja Usuñ().
procedure TTCP_Klienci_Lista.Usuñ( const indeks_f : integer );
var
  i,
  zti
    : integer;
begin

  if   ( indeks_f < 0 )
    or ( indeks_f > Self.klienci_lista_list.Count - 1 ) then
    Exit;

  zti := TTCP_Klient_Dane(Self.klienci_lista_list[ indeks_f ]).identyfikator__kd;

  TTCP_Klient_Dane(Self.klienci_lista_list[ indeks_f ]).Free();
  Self.klienci_lista_list.Delete( indeks_f );

  // Je¿eli usuwany jest klient z najwiêkszym albo najmniejszym identyfikatorem koryguje wartoœæ zapamiêtan¹ najwiêkszego i najmniejszego identyfikatora.
  if    ( zti = Self.identyfikator_najmniejszy )
    and ( Self.identyfikator_najmniejszy < -1 ) then
    Self.identyfikator_najmniejszy := Self.identyfikator_najmniejszy + 1
  else//if    ( zti = Self.identyfikator_najmniejszy ) (...)
  if    ( zti = Self.identyfikator_najwiêkszy )
    and ( Self.identyfikator_najwiêkszy > 0 ) then
    Self.identyfikator_najwiêkszy := Self.identyfikator_najwiêkszy - 1;


  // Sprawdza czy s¹ jacyœ klienci z ujemnymi identyfikatorami i je¿eli nie ma resetuje wartoœæ zapamiêtan¹ najmniejszego identyfikatora.
  zti := -1;

  for i := Self.klienci_lista_list.Count - 1 downto 0 do
    if zti > TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).identyfikator__kd then
      zti := TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).identyfikator__kd;

  if zti = -1 then
    Self.identyfikator_najmniejszy := -1;


  // Sprawdza czy s¹ jacyœ klienci z dodatnimi identyfikatorami i je¿eli nie ma resetuje wartoœæ zapamiêtan¹ najwiêkszego identyfikatora.
  zti := 0;

  for i := Self.klienci_lista_list.Count - 1 downto 0 do
    if zti < TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).identyfikator__kd then
      zti := TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).identyfikator__kd;

  if zti = 0 then
    Self.identyfikator_najwiêkszy := 0;

end;//---//Funkcja Usuñ().

//Funkcja Usuñ_Identyfikator().
procedure TTCP_Klienci_Lista.Usuñ_Identyfikator( const identyfikator_f : integer );
var
  i : integer;
begin

  for i := Self.klienci_lista_list.Count - 1 downto 0 do
    if TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).identyfikator__kd = identyfikator_f then
      begin

        Self.Usuñ( i );
        Exit;

      end;
    //---//if TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).identyfikator__kd = identyfikator_f then

end;//---//Funkcja Usuñ_Identyfikator().

//Funkcja Usuñ_Peer_Port().
procedure TTCP_Klienci_Lista.Usuñ_Peer_Port( const peer_port_f : integer );
var
  i : integer;
begin

  for i := Self.klienci_lista_list.Count - 1 downto 0 do
    if TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).peer_port_tcp__kd = peer_port_f then
      begin

        Self.Usuñ( i );
        Exit;

      end;
    //---//if TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).peer_port_tcp__kd = peer_port_f then

end;//---//Funkcja Usuñ_Peer_Port().

//Funkcja Usuñ_Wszystkich().
procedure TTCP_Klienci_Lista.Usuñ_Wszystkich();
var
  i : integer;
begin

  for i := Self.klienci_lista_list.Count - 1 downto 0 do
    Self.Usuñ( i );


  Self.identyfikator_najmniejszy := -1;
  Self.identyfikator_najwiêkszy := 0;

end;//---//Funkcja Usuñ_Wszystkich().

//Funkcja Nazwa_Niepowtarzalna().
function TTCP_Klienci_Lista.Nazwa_Niepowtarzalna( const peer_port_f : integer; const nazwa_f : string ) : boolean;
var
  i : integer;
begin

  //
  // Funkcja sprawdza czy podana nazwa gracza jest niepowtarzalna.
  //
  // Zwraca prawdê gdy podana nazwa gracza jest niepowtarzalna.
  //
  // Parametry:
  //   peer_port_f - gracz, którego nazwa jest sprawdzana (aby nie porównywaæ gracza z samym sob¹).
  //   nazwa_f - sprawdzana nazwa.
  //

  Result := true;

  for i := 0 to Self.klienci_lista_list.Count - 1 do
    if    ( TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).peer_port_tcp__kd <> peer_port_f )
      and (  AnsiLowerCase( TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).nazwa__kd ) = AnsiLowerCase( nazwa_f )  ) then
      begin

        Result := false;
        Exit;

      end;
    //---//if    ( TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).peer_port_tcp__kd <> peer_port_f ) (...)

end;//---//Funkcja Nazwa_Niepowtarzalna().

//Funkcja Nazwa_Niepowtarzalna().
function TTCP_Klienci_Lista.Nazwa_Niepowtarzalna( const nazwa_f : string ) : boolean;
var
  i : integer;
begin

  //
  // Funkcja sprawdza czy podana nazwa gracza jest niepowtarzalna.
  //
  // Zwraca prawdê gdy podana nazwa gracza jest niepowtarzalna.
  //
  // Parametry:
  //   nazwa_f - sprawdzana nazwa.
  //

  Result := true;

  for i := 0 to Self.klienci_lista_list.Count - 1 do
    if AnsiLowerCase( TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).nazwa__kd ) = AnsiLowerCase( nazwa_f ) then
      begin

        Result := false;
        Exit;

      end;
    //---//if AnsiLowerCase( TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).nazwa__kd ) = AnsiLowerCase( nazwa_f ) then

end;//---//Funkcja Nazwa_Niepowtarzalna().

//Funkcja Od³¹czony_Peer_Port().
procedure TTCP_Klienci_Lista.Od³¹czony_Peer_Port( const peer_port_f : integer );
var
  i : integer;
begin

  for i := Self.klienci_lista_list.Count - 1 downto 0 do
    if TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).peer_port_tcp__kd = peer_port_f then
      begin

        TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).data_czas__od³¹czenia__kd := Now();
        TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).od³¹czony__kd := true;
        Exit;

      end;
    //---//if TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).peer_port_tcp__kd = peer_port_f then

end;//---//Funkcja Od³¹czony_Peer_Port().

//Funkcja ZnajdŸ_Identyfikator().
function TTCP_Klienci_Lista.ZnajdŸ_Identyfikator( const identyfikator_f : integer ) : TTCP_Klient_Dane;
var
  i : integer;
begin

  Result := nil;

  for i := 0 to Self.klienci_lista_list.Count - 1 do
    if TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).identyfikator__kd = identyfikator_f then
      begin

        Result := TTCP_Klient_Dane(Self.klienci_lista_list[ i ]);
        Exit;

      end;
    //---//if TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).identyfikator__kd = identyfikator_f then

end;//---//Funkcja ZnajdŸ_Identyfikator().

//Funkcja ZnajdŸ_Peer_Port().
function TTCP_Klienci_Lista.ZnajdŸ_Peer_Port( const peer_port_f : integer ) : TTCP_Klient_Dane;
var
  i : integer;
begin

  Result := nil;

  for i := 0 to Self.klienci_lista_list.Count - 1 do
    if TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).peer_port_tcp__kd = peer_port_f then
      begin

        Result := TTCP_Klient_Dane(Self.klienci_lista_list[ i ]);
        Exit;

      end;
    //---//if TTCP_Klient_Dane(Self.klienci_lista_list[ i ]).peer_port_tcp__kd = peer_port_f then

end;//---//Funkcja ZnajdŸ_Peer_Port().

//Konstruktor klasy TUDP_Klienci_Lista.
constructor TUDP_Klienci_Lista.Create();
begin

  Self.klienci_lista_list := TList.Create();

end;//---//Konstruktor klasy TUDP_Klienci_Lista.

//Destruktor klasy TUDP_Klienci_Lista.
destructor TUDP_Klienci_Lista.Destroy();
begin

  Self.Usuñ_Wszystkich();

  FreeAndNil( Self.klienci_lista_list );

end;//---//Destruktor klasy TUDP_Klienci_Lista.

//Funkcja Dodaj().
procedure TUDP_Klienci_Lista.Dodaj( const adres_ip_f : string; const peer_port_f : word; const identyfikator_f : integer );
var
  i : integer;
  zt_udp_klient_dane : TUDP_Klient_Dane;
begin

  for i := Self.klienci_lista_list.Count - 1 downto 0 do
    if    ( TUDP_Klient_Dane(Self.klienci_lista_list[ i ]).adres_ip = adres_ip_f )
      and ( TUDP_Klient_Dane(Self.klienci_lista_list[ i ]).peer_port = peer_port_f )
      and ( TUDP_Klient_Dane(Self.klienci_lista_list[ i ]).identyfikator = identyfikator_f ) then
      begin

        // Sprawdza czy klient, który siê odezwa³ jest na liœcie. //???
        // Odœwie¿a czas ostatniego kontaktu.
        // Sprawdza czy dla danego klienta zosta³a wyznaczona komenda czynnoœci.


        TUDP_Klient_Dane(Self.klienci_lista_list[ i ]).data_czas_kontakt_ostatni := Now();

        Exit;

      end;
    //---//if    ( TUDP_Klient_Dane(Self.klienci_lista_list[ i ]).adres_ip = adres_ip_f ) (...)


  zt_udp_klient_dane := TUDP_Klient_Dane.Create();
  zt_udp_klient_dane.adres_ip := adres_ip_f;
  zt_udp_klient_dane.data_czas_kontakt_ostatni := Now();
  zt_udp_klient_dane.identyfikator := identyfikator_f;
  zt_udp_klient_dane.peer_port := peer_port_f;
  //zt_udp_klient_dane.komenda := '';

  Self.klienci_lista_list.Add( zt_udp_klient_dane );

end;//---//Funkcja Dodaj().

//Funkcja Usuñ().
procedure TUDP_Klienci_Lista.Usuñ( const indeks_f : integer );
begin

  if   ( indeks_f < 0 )
    or ( indeks_f > Self.klienci_lista_list.Count - 1 ) then
    Exit;

  TUDP_Klient_Dane(Self.klienci_lista_list[ indeks_f ]).Free();
  Self.klienci_lista_list.Delete( indeks_f );

end;//---//Funkcja Usuñ().

//Funkcja Usuñ_Peer_Port().
procedure TUDP_Klienci_Lista.Usuñ_Peer_Port( const peer_port_f : integer );
var
  i : integer;
begin

  for i := Self.klienci_lista_list.Count - 1 downto 0 do
    if TUDP_Klient_Dane(Self.klienci_lista_list[ i ]).peer_port = peer_port_f then
      begin

        Usuñ( i );
        Exit;

      end;
    //---//if TUDP_Klient_Dane(Self.klienci_lista_list[ i ]).peer_port = peer_port_f then

end;//---//Funkcja Usuñ_Peer_Port().

//Funkcja Usuñ_Przeterminowanych().
procedure TUDP_Klienci_Lista.Usuñ_Przeterminowanych();
var
  i : integer;
begin

  for i := Self.klienci_lista_list.Count - 1 downto 0 do
    if SecondsBetween( Now(), TUDP_Klient_Dane(Self.klienci_lista_list[ i ]).data_czas_kontakt_ostatni ) > udp_klient_po³¹czenie_potwierdzanie_sekundy_c  + udp_klient_po³¹czenie_potwierdzanie_sekundy_c * 0.5 then
      Self.Usuñ( i );

end;//---//Funkcja Usuñ_Przeterminowanych().

//Funkcja Usuñ_Wszystkich().
procedure TUDP_Klienci_Lista.Usuñ_Wszystkich();
var
  i : integer;
begin

  for i := Self.klienci_lista_list.Count - 1 downto 0 do
    Self.Usuñ( i );

end;//---//Funkcja Usuñ_Wszystkich().

//Funkcja Log_Wypisz().
procedure TStatek_Create_Funkcje.Log_Wypisz( const napis_f : string; const prze³¹cz_zak³adkê_f : boolean = true );
begin

  if @Self.Log_Wypisz_wsk <> nil then
    Self.Log_Wypisz_wsk( napis_f, prze³¹cz_zak³adkê_f );

end;//---//Funkcja Log_Wypisz().

//Funkcja Odczytaj_Liczbê_Z_Napisu().
function TStatek_Create_Funkcje.Odczytaj_Liczbê_Z_Napisu( napis_f : string; const wartoœæ_minimalna_f : variant; const prze³¹cz_zak³adkê_f : boolean = true ) : real;
begin

  if @Self.Odczytaj_Liczbê_Z_Napisu_wsk <> nil then
    Result := Self.Odczytaj_Liczbê_Z_Napisu_wsk( napis_f, wartoœæ_minimalna_f, prze³¹cz_zak³adkê_f )
  else//if @Self.Odczytaj_Liczbê_Z_Napisu_wsk <> nil then
    Result := 1;

end;//---//Funkcja Odczytaj_Liczbê_Z_Napisu().

//Funkcja Odczytaj_Liczbê_Z_Napisu_Xml().
function TStatek_Create_Funkcje.Odczytaj_Liczbê_Z_Napisu_Xml( const i_xml_node_f : Xml.XMLIntf.IXMLNode; const wygl¹d_liczba_definicja_f : TWygl¹d_Liczba_Definicja; const wartoœæ_minimalna_f : variant; const prze³¹cz_zak³adkê_f : boolean = true ) : real;
begin

  if @Self.Odczytaj_Liczbê_Z_Napisu_Xml_wsk <> nil then
    Result := Self.Odczytaj_Liczbê_Z_Napisu_Xml_wsk( i_xml_node_f, wygl¹d_liczba_definicja_f, wartoœæ_minimalna_f, prze³¹cz_zak³adkê_f )
  else//if @Self.Odczytaj_Liczbê_Z_Napisu_Xml_wsk <> nil then
    Result := 1;

end;//---//Funkcja Odczytaj_Liczbê_Z_Napisu_Xml().

//Funkcja Pêtla_Wzorzec_Oznacz().
procedure TStatek_Create_Funkcje.Pêtla_Wzorzec_Oznacz( gl_custom_scene_object_f : TGLCustomSceneObject );
begin

  if @Self.Pêtla_Wzorzec_Oznacz_wsk <> nil then
    Self.Pêtla_Wzorzec_Oznacz_wsk( gl_custom_scene_object_f );

end;//---//Funkcja Pêtla_Wzorzec_Oznacz().

//Funkcja Œwiat³a_Miganie__Wartoœci_Ustaw().
procedure TStatek_Create_Funkcje.Œwiat³a_Miganie__Wartoœci_Ustaw( const gl_custom_scene_object_f : TGLCustomSceneObject; czas_odstêpy_f : string );
begin

  if @Self.Œwiat³a_Miganie__Wartoœci_Ustaw_wsk <> nil then
    Self.Œwiat³a_Miganie__Wartoœci_Ustaw_wsk( gl_custom_scene_object_f, czas_odstêpy_f );

end;//---//Funkcja Œwiat³a_Miganie__Wartoœci_Ustaw().

//Funkcja Wygl¹d_Elementy__DŸwiêk_Wczytaj().
function TStatek_Create_Funkcje.Wygl¹d_Elementy__DŸwiêk_Wczytaj( wzorzec__gl_custom_scene_object_f : TGLCustomSceneObject; dŸwiêk_nazwa_f : string; const dŸwiêki__zasiêg_minimalny_f : real; const zt_statek_f : TStatek = nil ) : boolean;
begin

  if @Self.Wygl¹d_Elementy__DŸwiêk_Wczytaj_wsk <> nil then
    Result := Self.Wygl¹d_Elementy__DŸwiêk_Wczytaj_wsk( wzorzec__gl_custom_scene_object_f, dŸwiêk_nazwa_f, dŸwiêki__zasiêg_minimalny_f, zt_statek_f )
  else//if @Self.Wygl¹d_Elementy__DŸwiêk_Wczytaj_wsk <> nil then
    Result := false;
  
end;//---//Funkcja Wygl¹d_Elementy__DŸwiêk_Wczytaj().

//Funkcja Wygl¹d_Elementy__Kolor_Losowy_Wylicz().
function TStatek_Create_Funkcje.Wygl¹d_Elementy__Kolor_Losowy_Wylicz( kolor_od_f, kolor_do_f : real ) : GLS.VectorTypes.TVector4f;
begin

  if @Self.Wygl¹d_Elementy__Kolor_Losowy_Wylicz_wsk <> nil then
    Result := Self.Wygl¹d_Elementy__Kolor_Losowy_Wylicz_wsk( kolor_od_f, kolor_do_f )
  else//if @Self.Wygl¹d_Elementy__Kolor_Losowy_Wylicz_wsk <> nil then
    GLS.VectorGeometry.SetVector
      (
        Result,
        Random(),
        Random(),
        Random(),
        Random()
      );

end;//---//Funkcja Wygl¹d_Elementy__Kolor_Losowy_Wylicz().

//Funkcja Wygl¹d_Elementy__Kolor_Ustaw().
procedure TStatek_Create_Funkcje.Wygl¹d_Elementy__Kolor_Ustaw( const gl_material_f : TGLMaterial; const vector_f : GLS.VectorTypes.TVector4f );
begin

  if @Self.Wygl¹d_Elementy__Kolor_Ustaw_wsk <> nil then
    Self.Wygl¹d_Elementy__Kolor_Ustaw_wsk( gl_material_f, vector_f );

end;//---//Funkcja Wygl¹d_Elementy__Kolor_Ustaw().

//Funkcja Wygl¹d_Elementy__Kopiuj_W³aœciwoœci().
procedure TStatek_Create_Funkcje.Wygl¹d_Elementy__Kopiuj_W³aœciwoœci( zt_gl_custom_scene_object_wzorzec_f, zt_gl_custom_scene_object_kopia_f : TGLCustomSceneObject; kolor_od_f : real = -1; kolor_do_f : real = -1 );
begin

  if @Self.Wygl¹d_Elementy__Kopiuj_W³aœciwoœci_wsk <> nil then
    Self.Wygl¹d_Elementy__Kopiuj_W³aœciwoœci_wsk( zt_gl_custom_scene_object_wzorzec_f, zt_gl_custom_scene_object_kopia_f, kolor_od_f, kolor_do_f );

end;//---//Funkcja Wygl¹d_Elementy__Kopiuj_W³aœciwoœci().

//Funkcja Wygl¹d_Elementy__Tekstura_Wczytaj_2().
function TStatek_Create_Funkcje.Wygl¹d_Elementy__Tekstura_Wczytaj_2( gl_custom_scene_object_f : TGLCustomSceneObject; tekstura_œcie¿ka_f : string; const materia³_nazwa_f : string = '' ) :  boolean;
begin

  if @Self.Wygl¹d_Elementy__Tekstura_Wczytaj_2_wsk <> nil then
    Result := Self.Wygl¹d_Elementy__Tekstura_Wczytaj_2_wsk( gl_custom_scene_object_f, tekstura_œcie¿ka_f, materia³_nazwa_f )
  else//if @Self.Wygl¹d_Elementy__Tekstura_Wczytaj_2_wsk <> nil then
    Result := false;

end;//---//Funkcja Wygl¹d_Elementy__Tekstura_Wczytaj_2().

//Funkcja Wygl¹d_Elementy__Utwórz_Elements().
function TStatek_Create_Funkcje.Wygl¹d_Elementy__Utwórz_Element( const statek_f : TStatek; const l¹d_prymityw_f : string; const w³aœciciel_gl_base_scene_object_f : TGLBaseSceneObject; const rodzic_gl_dummy_cube_f : TGLDummyCube = nil ) : TGLCustomSceneObject;
begin

  if @Self.Wygl¹d_Elementy__Utwórz_Element_wsk <> nil then
    Result := Self.Wygl¹d_Elementy__Utwórz_Element_wsk( statek_f, l¹d_prymityw_f, w³aœciciel_gl_base_scene_object_f, rodzic_gl_dummy_cube_f )
  else//if @Self.Wygl¹d_Elementy__Utwórz_Element_wsk <> nil then
    Result := nil;

end;//---//Funkcja Wygl¹d_Elementy__Utwórz_Element().

//Funkcja DoNotify().
procedure TWieloosobowe_Powiadomienie.DoNotify();
begin

  if Self.zt_strings <> nil then
    begin

      Self.zt_strings.Add(  DateTimeToStr( Now() )  );
      Self.zt_strings.Add( Self.powiadomienie_treœæ );

    end;
  //---//if Self.zt_strings <> nil then


  if    ( Self.wyró¿nij )
    and ( Self.zt_page_control <> nil )
    and ( Self.zt_tab_sheet <> nil ) then
    Self.zt_page_control.ActivePage := Self.zt_tab_sheet;

end;//---//Funkcja DoNotify().

//Funkcja DoNotify().
procedure TPokój_Rozmów_Powiadomienie.DoNotify();
const
  odstêp_c_l : string = '   ';
var
  data_czas_s : string;
begin

  //
  // Funkcja wypisuje treœæ wiadomoœci.
  //

  //Self.zt_strings.Add(  IntToStr( Self.pokój_rozmów_r.id_nadawca ) + ': ' + Self.pokój_rozmów_r.wiadomoœæ  );

  if Self.data_czas_wyœwietlaj then
    begin

      DateTimeToString( data_czas_s, 'yyyy-mm-dd hh:mm:ss', pokój_rozmów_r.data_czas_wys³ania );

      Self.nadawca_opis := Self.nadawca_opis +
        ' ' + data_czas_s;

    end;
  //---//if Self.data_czas_wyœwietlaj then


  if Self.zt_strings <> nil then
    begin

      Self.zt_strings.Add( Self.nadawca_opis );
      //Self.zt_strings.Add( odstêp_c_l + Self.pokój_rozmów_r.wiadomoœæ );
      Self.zt_strings.Add(  odstêp_c_l + StringReplace( Self.pokój_rozmów_r.wiadomoœæ, #13 + #10, #13 + #10 + odstêp_c_l, [ rfReplaceAll ] )  );

    end;
  //---//if Self.zt_strings <> nil then


  if    ( Self.informacja_dodatkowa )
    and ( @Self.informacja_dodatkowa_dodaj <> nil ) then
    Self.informacja_dodatkowa_dodaj( Self.nadawca_opis + '   ' + Self.pokój_rozmów_r.wiadomoœæ );

end;//---//Funkcja DoNotify().


//      ***      Funkcje      ***      //

//Funkcja Boolean_W__Tak_Nie().
function Boolean_W__Tak_Nie( const ztb_f : boolean ) : string;
begin

  //
  // Funkcja zamienia wartoœæ boolean na napis.
  //
  // Zwraca tak lub nie.
  //

  // Bez t³umaczenia (obecnie u¿ywane tylko dla pliku ini).

  if ztb_f then
    Result := 'tak'
  else//if ztb_f then
    Result := 'nie'

end;//---//Funkcja Boolean_W__Tak_Nie().

//Funkcja Czas_Miêdzy_W_Sekundach().
function Czas_Miêdzy_W_Sekundach( const czas_poprzedni_f : Int64; const zmienna_w_milisekundach_f : boolean = false ) : Int64;
begin

  //
  // Funkcja wylicza iloœæ sekund bezwzglêdnego czasu gry jaka up³ynê³a od podanego czasu do chwili obecnej.
  //
  // Zwraca iloœæ sekund bezwzglêdnego czasu gry w postaci 123 (1:59 = 1).
  //
  // Parametry:
  //   czas_poprzedni_f - moment czasu gry, od którego liczyæ up³yw czasu.
  //   zmienna_w_milisekundach_f
  //     false - zmienna czas_poprzedni_f przechowuje wartoœæ w sekundach (wartoœæ zmiennej dla 1 sekunda = 1).
  //     true - zmienna czas_poprzedni_f przechowuje wartoœæ w milisekundach (wartoœæ zmiennej dla 1 sekunda = 1 000).
  //

  Result := System.Math.Floor(  Czas_Miêdzy_W_Milisekundach( czas_poprzedni_f, zmienna_w_milisekundach_f ) * 0.001  );

end;//---//Funkcja Czas_Miêdzy_W_Sekundach().

//Funkcja Czas_Miêdzy_W_Milisekundach().
function Czas_Miêdzy_W_Milisekundach( const czas_poprzedni_f : Int64; const zmienna_w_milisekundach_f : boolean = false ) : Int64;
begin

  //
  // Funkcja wylicza iloœæ milisekund bezwzglêdnego czasu gry jaka up³ynê³a od podanego czasu do chwili obecnej.
  //
  // Zwraca iloœæ milisekund bezwzglêdnego czasu gry w postaci 123 (1:30 = 1 500).
  //
  // Parametry:
  //   czas_poprzedni_f - moment czasu gry, od którego liczyæ up³yw czasu.
  //   zmienna_w_milisekundach_f
  //     false - zmienna czas_poprzedni_f przechowuje wartoœæ w sekundach (wartoœæ zmiennej dla 1 sekunda = 1).
  //     true - zmienna czas_poprzedni_f przechowuje wartoœæ w milisekundach (wartoœæ zmiennej dla 1 sekunda = 1 000).
  //

  if not zmienna_w_milisekundach_f then
    Result := Round(   Abs(  ( Statki_Form.Gra_GLCadencer.CurrentTime + klient__cadencer_current_time__korekta_o_czas_serwera_g ) - czas_poprzedni_f  ) * 1000   )
  else//if not zmienna_w_milisekundach_f then
    Result := Round(   Abs(  ( Statki_Form.Gra_GLCadencer.CurrentTime + klient__cadencer_current_time__korekta_o_czas_serwera_g ) * 1000 - czas_poprzedni_f  )   );

end;//---//Funkcja Czas_Miêdzy_W_Milisekundach().

//Funkcja Czas_Teraz().
function Czas_Teraz() : double;
begin

  //
  // Funkcja zwraca aktualny bezwzglêdny czas gry.
  //  Ze wzglêdu na pauzowanie gdy nie mo¿na wyliczaæ na podstawie czasu systemowego.
  //
  // Zwraca aktualny bezwzglêdny czas gry w postaci 123.456 (1:30 = 1.5).
  //

  Result := Statki_Form.Gra_GLCadencer.CurrentTime + klient__cadencer_current_time__korekta_o_czas_serwera_g;

end;//---//Funkcja Czas_Teraz().

//Funkcja Czas_Teraz_W_Sekundach().
function Czas_Teraz_W_Sekundach() : Int64;
begin

  //
  // Funkcja zwraca aktualny bezwzglêdny czas gry bez u³amków sekund.
  //
  // Zwraca aktualny bezwzglêdny czas gry bez u³amków sekund w postaci 123 (1:59 = 1).
  //

  Result := System.Math.Floor( Czas_Teraz() );

end;//---//Funkcja Czas_Teraz_W_Sekundach().

//Funkcja Czas_Teraz_W_Milisekundach().
function Czas_Teraz_W_Milisekundach() : Int64;
begin

  //
  // Funkcja zwraca aktualny bezwzglêdny czas gry w milisekundach.
  //
  // Zwraca aktualny bezwzglêdny czas gry w milisekundach w postaci 123.456 (1:30 = 1 500).
  //

  Result := Round(  ( Statki_Form.Gra_GLCadencer.CurrentTime + klient__cadencer_current_time__korekta_o_czas_serwera_g ) * 1000  );

end;//---//Funkcja Czas_Teraz_W_Milisekundach().

//Funkcja Separator_Dziesiêtny__Ustal().
function Separator_Dziesiêtny__Ustal() : string;
begin

  //
  // Funkcja ustala systemowy separator dziesiêtny liczb.
  // Dla ró¿nych ustawieñ lokalnych komputera mo¿e byæ inny separator dziesiêtny liczb.
  //
  // Zwraca systemowy separator dziesiêtny liczb.
  //

  Result := FloatToStr( 1.1 );
  Result := Copy( Result, 2, 1 );

end;//---//Funkcja Separator_Dziesiêtny__Ustal().

//Funkcja String_To__Float().
function String_To__Float( napis_f : string ) : real;
var
  i : integer;

  zts,
  separator_dziesiêtny_l
    : string;
begin

  //
  // Funkcja konwertuje napis na liczbê.
  // Dla ró¿nych ustawieñ lokalnych komputera mo¿e byæ inny separator dziesiêtny liczb.
  //
  // Zwraca liczbê.
  //

  separator_dziesiêtny_l := Separator_Dziesiêtny__Ustal();

  napis_f := Trim( napis_f );
  napis_f := StringReplace( napis_f, ' ', '', [ rfReplaceAll ] );

  zts := '';

  for i := 1 to Length( napis_f ) do
    begin

      if napis_f[ i ] = '-' then
        zts := zts + napis_f[ i ]
      else//if napis_f[ i ] = '-' then
        try
          StrToInt( napis_f[ i ] );
          zts := zts + napis_f[ i ];
        except
          zts := zts + separator_dziesiêtny_l;
        end;
        //---//try

    end;
  //---//for i := 1 to Length( zts_l ) do


  Result := StrToFloat( zts );

end;//---//Funkcja String_To__Float().

//Funkcja Zaokr¹glij__W_Górê().
function Zaokr¹glij__W_Górê( const liczba_f : real ) : integer;
begin

  //
  // Funkcja zaokr¹gla liczbê w górê (2,1 = 3, -2,1 = -3).
  //
  // Zwraca liczbê zaokr¹glon¹ w górê.
  //

  Result := System.Math.Ceil(  Abs( liczba_f )  ); // Bo System.Math.Ceil( -2.1 ) = -2.

  if liczba_f < 0 then
    Result := -Result;

end;//---//Funkcja Zaokr¹glij__W_Górê().

//Funkcja Czas_Miêdzy_W_Milisekundach_SF().
class function TStatek_Funkcje.Czas_Miêdzy_W_Milisekundach_SF( const czas_poprzedni_f : Int64; const zmienna_w_milisekundach_f : boolean = false ) : Int64;
begin

  Result := Czas_Miêdzy_W_Milisekundach( czas_poprzedni_f, zmienna_w_milisekundach_f );

end;//---//Funkcja Czas_Miêdzy_W_Milisekundach_SF().

//Funkcja Amunicja_Ruch().
procedure TStatki_Form.Amunicja_Ruch( delta_czasu_f : double );
var
  czy_zmiana_rodzica : boolean; // Po opuszczeniu lufy gdy statek p³ynie amunicja wyprzedza statek (1 skok). Pominiêcie pierwszego przesuniêcia niweluje ten efekt.
  i,
  zti
    : integer;
  ztr,
  lot_parabol¹__k¹ta_opadania__przed_namierzaniem_modyfikator_l // Zale¿nie od ustawionego procentu zasiêgu celu artylerii modyfikuje k¹t do jakiego pochylaæ amunicjê przed rozpoczêciem nakierowywania na cel.
    : real;
  zt_vector : GLS.VectorTypes.TVector4f;
  zt_amunicja : TAmunicja;
begin

  if   ( amunicja_wystrzelona_list = nil )
    or (  not Assigned( amunicja_wystrzelona_list )  ) then
    Exit;


  if czy_klient_g then
    Exit;


  for i := amunicja_wystrzelona_list.Count - 1 downto 0 do
    begin

      zt_amunicja := TAmunicja(amunicja_wystrzelona_list[ i ]);

      if zt_amunicja <> nil then
        begin

          // Gdy osi¹gnie odpowiedni¹ g³êbokoœæ jest usuwany (na wypadek gdyby nie dotknê³a dna).
          //if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y <= Dno_GLPlane.AbsolutePosition.Y - 1 then
          if zt_amunicja.AbsolutePosition.Y <= Dno_GLPlane.AbsolutePosition.Y - 1 then
            zt_amunicja.czy_usun¹æ_amunicja := true;


          if zt_amunicja.czy_usun¹æ_amunicja then
            Amunicja_Wystrzelona_Zwolnij_Jeden( zt_amunicja )
          else//if zt_amunicja.czy_usun¹æ_amunicja then
            begin

              {$region 'Ruch do przodu.'}
              //if not zt_amunicja.czy_poza_luf¹ then
              //  ztr := zt_amunicja.prêdkoœæ__amunicja // Amunicjê jest w lufie.
              //else//if not zt_amunicja.czy_poza_luf¹ then
              //  ztr := zt_amunicja.prêdkoœæ__amunicja * zt_amunicja.skala__amunicja; // Amunicja jest poza luf¹. // Dzia³o mo¿e byæ skalowane. Koryguje wartoœæ o skalê dzia³a, wp³ywa na szybkoœæ ruchu amunicji.

              if    ( not zt_amunicja.czy_poza_luf¹ )
                and ( zt_amunicja.skala__amunicja <> 0 ) then
                ztr := zt_amunicja.prêdkoœæ__amunicja / zt_amunicja.skala__amunicja // Amunicjê jest w lufie. Koryguje wartoœæ o skalê dzia³a, wp³ywa na szybkoœæ ruchu amunicji.
              else//if    ( not zt_amunicja.czy_poza_luf¹ ) (...)
                ztr := zt_amunicja.prêdkoœæ__amunicja; // Amunicja jest poza luf¹. // Dzia³o mo¿e byæ skalowane.

              ztr := ztr * delta_czasu_f;

              if    (  not ( zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe, Typy_Wspolne.ar_Torpeda ] )  )
                and ( not zt_amunicja.czy_lot_parabol¹ ) then
                begin

                  // Nie torpeda, nie bomba g³êbinowa, nie je¿ g³êbinowy, nie parabola.

                  zt_amunicja.Move( ztr );

                end
              else//if not ( zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] ) then
                begin

                  // Torpeda, parabola.

                  if zt_amunicja.Parent <> Gra_Obiekty_GLDummyCube then
                    zt_amunicja.Move( ztr ) // Amunicja w lufie.
                  else//if zt_amunicja.Parent <> Gra_Obiekty_GLDummyCube then
                    begin

                      // Amunicja poza luf¹.

                      zt_amunicja.Position.AddScaledVector( ztr, zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsoluteDirection );
                      zt_amunicja.TransformationChanged();

                    end;
                  //---//if zt_amunicja.Parent <> Gra_Obiekty_GLDummyCube then

                end;
              //---//if not ( zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] ) then
              {$endregion 'Ruch do przodu.'}


              if zt_amunicja.torpeda_efekt_na_wodzie_gl_dummy_cube <> nil then
                begin

                  zt_amunicja.torpeda_efekt_na_wodzie_gl_dummy_cube.Position.AsVector := VectorMake(  zt_amunicja.korpus__amunicja.AbsolutePosition.X, 0 + ( Random() - 0.5 ) * 0.25, zt_amunicja.korpus__amunicja.AbsolutePosition.Z  );


                  if zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] then
                    begin

                      // Im torpeda g³êbiej tym œlad na wodzie za ni¹ jest bardziej z ty³u.

                      zt_amunicja.torpeda_efekt_na_wodzie_gl_dummy_cube.Position.AddScaledVector(  -Abs( zt_amunicja.korpus__amunicja.AbsolutePosition.Y ), zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsoluteDirection  );
                      zt_amunicja.torpeda_efekt_na_wodzie_gl_dummy_cube.TransformationChanged();

                    end;
                  //---//if zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] then

                end;
              //---//if zt_amunicja.torpeda_efekt_na_wodzie_gl_dummy_cube <> nil then



              if not zt_amunicja.czy_poza_zasiêgiem then
                begin

                  // W skutecznym zasiêgu.

                  {$region 'Czy poza zasiêgiem.'}
                  //if zt_amunicja.DistanceTo( zt_amunicja.pozycja_startowa ) > zt_amunicja.zasiêg__amunicja then
                  if   (     // Dla lotu liniowego poza zasiêgiem jest gdy wyleci poza swój zasiêg.
                             (
                                  (
                                        ( zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Pocisk ] )
                                    and ( not zt_amunicja.czy_lot_parabol¹ )
                                  )
                               or (  not ( zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Pocisk ] )  )
                             )
                         and ( zt_amunicja.DistanceTo( zt_amunicja.pozycja_startowa ) > zt_amunicja.zasiêg__amunicja )
                       )
//                    or (     // Dla lotu parabolicznego poza zasiêgiem jest gdy znajdzie siê pod pod³o¿em. // A Je¿eli leci (pionowo) w górê to nie znajdzie siê pod pod³o¿em.
//                             ( zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Pocisk ] )
//                         and ( zt_amunicja.czy_lot_parabol¹ )
//                         and ( zt_amunicja.AbsolutePosition.Y <= Dno_GLPlane.AbsolutePosition.Y )
//                       )
//                    or (     // Dla lotu parabolicznego poza zasiêgiem jest gdy wyleci poza swój zasiêg (liczony w poziomie). // A Je¿eli leci (pionowo) w górê to odleg³oœæ w poziomie mo¿e siê prawie nie zmieniaæ.
//                             ( zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Pocisk ] )
//                         and ( zt_amunicja.czy_lot_parabol¹ )
//                         and (   zt_amunicja.pozycja_startowa.DistanceTo(  GLS.VectorGeometry.VectorMake( zt_amunicja.AbsolutePosition.X, zt_amunicja.pozycja_startowa.AbsolutePosition.Y, zt_amunicja.AbsolutePosition.Z )  ) > zt_amunicja.zasiêg__amunicja   )
//                       )
                    or (
                             ( zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Pocisk ] )
                         and ( zt_amunicja.czy_lot_parabol¹ )
                         //and ( zt_amunicja.DistanceTo( zt_amunicja.pozycja_startowa ) > zt_amunicja.zasiêg__amunicja )
                         and (
                                  ( zt_amunicja.pozycja_woda.DistanceTo( zt_amunicja.pozycja_startowa ) > zt_amunicja.zasiêg__amunicja )
                               or ( zt_amunicja.DistanceTo( zt_amunicja.pozycja_startowa ) > zt_amunicja.zasiêg__amunicja * 1.5 ) // Je¿eli leci pionowo w górê.
                             )
                       )
                    then
                    begin

                      zt_amunicja.czy_poza_zasiêgiem := true;

                      zt_amunicja.opadanie_obrót_korekta_o_k¹t_na_granicy_zasiêgu := zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle;

                      zt_amunicja.jasna_linia.Material.FrontProperties.Emission.Color := GLS.Color.clrBlack;
                      zt_amunicja.obra¿enia_zasiêg_st_gl_sphere.Material.FrontProperties.Ambient.Color := GLS.Color.clrBlack;

                    end;
                  //---//if   ( (...)
                  {$endregion 'Czy poza zasiêgiem.'}


                  {$region 'Przesuwa i obraca amunicjê razem ze statkiem - wersja 1.'}
                  //if zt_amunicja.statek <> nil then
                  //  begin
                  //
                  //    //zt_amunicja.statek_obrót := statek_obrót_f;
                  //    //zt_amunicja.czy_statek_dane := true;
                  //
                  //
                  //    if zt_amunicja.korpus__amunicja.DistanceTo( zt_amunicja.pozycja_startowa.AbsolutePosition ) <= zt_amunicja.strza³_od_blokada_dystans then
                  //      begin
                  //
                  //        // Amunicjê jest w lufie.
                  //
                  //        zt_amunicja.statek_prêdkoœæ := zt_amunicja.statek.prêdkoœæ_aktualna;
                  //
                  //
                  //        // Obraca amunicjê gdy amunicja jest w lufie.
                  //
                  //        //zt_amunicja.Turn( zt_amunicja.statek.prêdkoœæ_obrotu_aktualna );
                  //        zt_amunicja.TurnAngle := zt_amunicja.TurnAngle - zt_amunicja.statek.prêdkoœæ_obrotu_aktualna;
                  //        zt_amunicja.korpus__amunicja.Material.FrontProperties.Ambient.Color := GLS.Color.clrGreen;
                  //
                  //      end
                  //    else//if zt_amunicja.korpus__amunicja.DistanceTo( zt_amunicja.pozycja_startowa.AbsolutePosition ) <= zt_amunicja.strza³_od_blokada_dystans then
                  //      begin
                  //
                  //        // Amunicjê jest poza luf¹.
                  //
                  //        if not zt_amunicja.czy_poza_luf¹ then
                  //          zt_amunicja.czy_poza_luf¹ := true;
                  //
                  //
                  //        zt_amunicja.korpus__amunicja.Material.FrontProperties.Ambient.Color := GLS.Color.clrRed;
                  //
                  //        //if zt_amunicja.pozycja_startowa.AbsolutePosition.Y <> 0 then
                  //          //??? zt_amunicja.pozycja_startowa.Position.Y := zt_amunicja.pozycja_startowa.AbsoluteToLocal( GLS.VectorTypes.TVector4d(0, 0, 0) ).Y; // Zawsze poziom wody.
                  //        //  zt_amunicja.pozycja_startowa.Position.Y := 0;
                  //
                  //
                  //        if Abs( zt_amunicja.statek_prêdkoœæ ) > 0 then
                  //          begin
                  //
                  //            // Zmniejsza wspó³czynnik prêdkoœci statku gdy amunicja poza luf¹.
                  //
                  //            ztr := Abs( zt_amunicja.statek_prêdkoœæ );
                  //
                  //            if zt_amunicja.statek_prêdkoœæ < 0 then
                  //              ztr := -ztr;
                  //
                  //            zt_amunicja.statek_prêdkoœæ := zt_amunicja.statek_prêdkoœæ - ztr;
                  //
                  //
                  //            if Abs( zt_amunicja.statek_prêdkoœæ ) < 0.001 then
                  //              zt_amunicja.statek_prêdkoœæ := 0;
                  //
                  //          end;
                  //        //---//if Abs( zt_amunicja.statek_prêdkoœæ ) > 0 then
                  //
                  //      end;
                  //    //---//if zt_amunicja.korpus__amunicja.DistanceTo( zt_amunicja.pozycja_startowa.AbsolutePosition ) <= zt_amunicja.strza³_od_blokada_dystans then
                  //
                  //
                  //    if Abs( zt_amunicja.statek_prêdkoœæ ) > 0 then
                  //      begin
                  //
                  //        // Przesuwa amunicjê o prêdkoœæ ruchu statku.
                  //
                  //        //zt_amunicja.Position.AddScaledVector( zt_amunicja.statek_prêdkoœæ, zt_amunicja.statek_kierunek );
                  //        //zt_amunicja.Position.AddScaledVector( zt_amunicja.statek_prêdkoœæ, statek_gracza.AbsoluteDirection );
                  //        zt_amunicja.Position.AddScaledVector( zt_amunicja.statek_prêdkoœæ, zt_amunicja.statek.AbsoluteDirection );
                  //        zt_amunicja.TransformationChanged();
                  //
                  //      end;
                  //    //---//if Abs( zt_amunicja.statek_prêdkoœæ ) > 0 then
                  //
                  //  end;
                  ////---//if zt_amunicja.statek <> nil then
                  {$endregion 'Przesuwa i obraca amunicjê razem ze statkiem - wersja 1.'}


                  czy_zmiana_rodzica := false;

                  if    ( not zt_amunicja.czy_poza_luf¹ )
                    and (  zt_amunicja.korpus__amunicja.DistanceTo( zt_amunicja.pozycja_startowa.AbsolutePosition ) > zt_amunicja.strza³_od_blokada_dystans  ) then
                    begin

                      // Amunicja opuszcza lufê.

                      zt_amunicja.czy_poza_luf¹ := true;
                      czy_zmiana_rodzica := true;

                      zt_amunicja.jasna_linia.Position.Y := zt_amunicja.korpus__amunicja.TopRadius; // To samo .jasna_linia.Height.
                      zt_amunicja.obra¿enia_zasiêg_st_gl_sphere.Material.FrontProperties.Ambient.Color := GLS.Color.clrWhite;


                      {$region 'Po opuszczeniu lufy amunicja zmienia rodzica.'}
                      // Istotna jest wartoœæ nie w momencie strza³u tylko w momencie opuszczenia lufy (ze wzglêdu na falowanie statku).
                      zt_amunicja.opadanie_obrót_korekta_o_ustawienie_pocz¹tkowe :=
                        System.Math.RadToDeg
                          (
                            GLS.VectorGeometry.AngleBetweenVectors
                              (
                                GLS.VectorGeometry.VectorMake(  zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsoluteDirection.X, Abs( zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsoluteDirection.Y ), zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsoluteDirection.Z  ),
                                GLS.VectorGeometry.VectorMake( zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsoluteDirection.X, 0, zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsoluteDirection.Z ),
                                GLS.VectorGeometry.VectorMake( 0, 0, 0 )
                              )
                          );

                      if System.Math.IsNan( zt_amunicja.opadanie_obrót_korekta_o_ustawienie_pocz¹tkowe ) then // Torpedy lec¹ w górê gdy równa siê NAN, -NAN.
                        zt_amunicja.opadanie_obrót_korekta_o_ustawienie_pocz¹tkowe := 0;

                      if zt_amunicja.AbsoluteDirection.Y < 0 then
                        zt_amunicja.opadanie_obrót_korekta_o_ustawienie_pocz¹tkowe := -zt_amunicja.opadanie_obrót_korekta_o_ustawienie_pocz¹tkowe;


                      zt_amunicja.pozycja_startowa.Parent := Gra_Obiekty_GLDummyCube;
                      zt_amunicja.pozycja_startowa.AbsolutePosition := zt_amunicja.AbsolutePosition;
                      zt_amunicja.pozycja_startowa.AbsoluteDirection := zt_amunicja.AbsoluteDirection; // Tutaj tymczasowo zapamiêtuje aktualny kierunek amunicji.
                      zt_amunicja.pozycja_startowa.AbsoluteUp := zt_amunicja.AbsoluteUp; // Tutaj tymczasowo zapamiêtuje bezwzglêdn¹ górê amunicji.

                      zt_vector := zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsoluteUp;


                      zt_amunicja.Parent := Gra_Obiekty_GLDummyCube; // Po zmianie rodzica amunicja:
                      zt_amunicja.AbsolutePosition := zt_amunicja.pozycja_startowa.AbsolutePosition; // jest w tej samej bezwzglêdnej pozycji;
                      zt_amunicja.AbsoluteDirection := zt_amunicja.pozycja_startowa.AbsoluteDirection; // zachowuje ten sam bezwzglêdny kierunek;
                      zt_amunicja.AbsoluteUp := zt_amunicja.pozycja_startowa.AbsoluteUp; // bezwzglêdna góra znajduje siê w tym samym miejscu (kierunku).

                      if zt_amunicja.czy_lot_parabol¹ then
                        zt_amunicja.pozycja_startowa.AbsolutePosition := zt_amunicja.dzia³o_pozycja_absolutna_vector;

                      zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsoluteDirection := zt_amunicja.AbsoluteDirection;
                      zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsoluteUp := GLS.VectorGeometry.VectorMake( 0, 1, 0 );

                      zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsoluteDirection := zt_amunicja.AbsoluteDirection;
                      zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsoluteUp := zt_vector;


                      // Wylicza pozycjê wskaŸnika celu.
                      zt_amunicja.pozycja_celu.AbsoluteDirection := zt_amunicja.AbsoluteDirection;
                      zt_amunicja.pozycja_celu.Direction.Y := 0;
                      zt_amunicja.pozycja_celu.Move( zt_amunicja.cel_odleg³oœæ );
                      //---// Wylicza pozycjê wskaŸnika celu.


                      zti := Gra_Statystyki_R_Identyfikator_ZnajdŸ( zt_amunicja.id_gracz );

                      if zti >= 0 then
                        begin

                          gra_statystyki_r_t[ zti ].amunicja_wystrzelona_iloœæ__gs := gra_statystyki_r_t[ zti ].amunicja_wystrzelona_iloœæ__gs + 1;
                          gra_statystyki_r_t[ zti ].amunicja_wystrzelona_obra¿enia_zadawane__gs := gra_statystyki_r_t[ zti ].amunicja_wystrzelona_obra¿enia_zadawane__gs + zt_amunicja.obra¿enia_zadawane;

                        end;
                      //---//if zti >= 0 then
                      {$endregion 'Po opuszczeniu lufy amunicja zmienia rodzica.'}


                      zt_amunicja.Scale.Scale( zt_amunicja.skala__amunicja );


                      zt_amunicja.czy_pod_wod¹ := zt_amunicja.AbsolutePosition.Y < 0;
                      zt_amunicja.czy_wynurzanie := zt_amunicja.czy_pod_wod¹;


                      if zt_amunicja.statek__am <> nil then
                        begin

                          zt_amunicja.statek_prêdkoœæ := zt_amunicja.statek__am.prêdkoœæ_aktualna;
                          zt_amunicja.pozycja_startowa.AbsoluteDirection := zt_amunicja.statek__am.AbsoluteDirection; // Tutaj zapamiêtuje aktualny kierunek statku.
                          zt_amunicja.zanurzenie_g³êbokoœæ_zadana := zt_amunicja.statek__am.amunicja_zanurzenie_g³êbokoœæ_zadana;

                        end;
                      //---//if zt_amunicja.statek__am <> nil then


                      if    ( zt_amunicja.czy_lot_parabol¹ ) // Taki sam warunek pozycja_celu_Visible.
                        and ( Amunicja__Cel_Pozycja_Dla_Lotu_Parabol¹_Wyœwietl_CheckBox.Checked )
                        and ( not zt_amunicja.pozycja_celu.Visible )
                        and (
                                 ( zt_amunicja.id_gracz = Gracz_Identyfikator() )
                              or ( // Gdy gra nie jest rozpoczêta.
                                       (
                                            ( Wieloosobowe_Identyfikator_Edit.Text = '' )
                                         or ( Wieloosobowe_Identyfikator_Edit.Text = '-1' ) // Gra nie jest rozpoczêta ale jest pod³¹czenie jako gra lokalna albo serwer (klient bez rozpoczêtej gry nie mo¿e sterowaæ statkiem). //???
                                       )
                                   and ( zt_amunicja.id_gracz = 0 )
                                 )
                            ) then
                        zt_amunicja.pozycja_celu.Visible := true;

                    end;
                  //---//if    ( not zt_amunicja.czy_poza_luf¹ ) (...)


                  if zt_amunicja.czy_poza_luf¹ then
                    begin

                      // Amunicja jest poza luf¹.

                      {$region 'Przesuwa i obraca amunicjê razem ze statkiem.'}
                      if Abs( zt_amunicja.statek_prêdkoœæ ) > 0 then
                        begin

                          // Zmniejsza wspó³czynnik prêdkoœci statku gdy amunicja jest poza luf¹.

                          ztr := Abs( zt_amunicja.statek_prêdkoœæ ) * 0.05; // 0.01

                          if zt_amunicja.statek_prêdkoœæ > 0 then
                            zt_amunicja.statek_prêdkoœæ := zt_amunicja.statek_prêdkoœæ - ztr
                          else//if zt_amunicja.statek_prêdkoœæ > 0 then
                            zt_amunicja.statek_prêdkoœæ := zt_amunicja.statek_prêdkoœæ + ztr;


                          if Abs( zt_amunicja.statek_prêdkoœæ ) < 0.001 then
                            zt_amunicja.statek_prêdkoœæ := 0;

                        end;
                      //---//if Abs( zt_amunicja.statek_prêdkoœæ ) > 0 then


                      if    (  Abs( zt_amunicja.statek_prêdkoœæ ) > 0  )
                        and ( not czy_zmiana_rodzica ) then
                        begin

                          // Przesuwa amunicjê o prêdkoœæ ruchu statku.

                          //zt_amunicja.Position.AddScaledVector( zt_amunicja.statek_prêdkoœæ, zt_amunicja.statek_kierunek );
                          //zt_amunicja.Position.AddScaledVector( zt_amunicja.statek_prêdkoœæ, statek_gracza.AbsoluteDirection );
                          zt_amunicja.Position.AddScaledVector( zt_amunicja.statek_prêdkoœæ * delta_czasu_f, zt_amunicja.pozycja_startowa.AbsoluteDirection );
                          zt_amunicja.TransformationChanged();


                          if zt_amunicja.czy_lot_parabol¹ then
                            begin

                              // Przesuwa te¿ pozycjê celu aby pod koniec lotu parabol¹ amunicja nie skrêca³a w bok (amunicja przesuwa siê razem ze statkiem wiêc pozycjê celu te¿ trzeba skorygowaæ).

                              zt_amunicja.pozycja_celu.Position.AddScaledVector( zt_amunicja.statek_prêdkoœæ * delta_czasu_f, zt_amunicja.pozycja_startowa.AbsoluteDirection );
                              zt_amunicja.pozycja_celu.TransformationChanged();

                            end;
                          //---//if zt_amunicja.czy_lot_parabol¹ then

                        end;
                      //---//if    (  Abs( zt_amunicja.statek_prêdkoœæ ) > 0  ) (...)
                      {$endregion 'Przesuwa i obraca amunicjê razem ze statkiem.'}


                      if zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Pocisk ] then
                        begin

                          // Artyleria, pocisk.

                          {$region 'Wysokoœæ i obrót dla ruchu parabol¹.'}
                          if zt_amunicja.amunicja_rodzaj = Typy_Wspolne.ar_Artyleria then
                            begin

                              // Artyleria.

                              if zt_amunicja.czy_lot_parabol¹ then
                                begin

                                  if zt_amunicja.amunicja_lot_parabol¹_etap = alpe_Wystrzelenie then
                                    begin

                                      ztr := zt_amunicja.pozycja_startowa.DistanceTo( zt_amunicja.pozycja_woda ); // Odleg³oœæ od pozycji startowej w poziomie.

                                      if ztr >= zt_amunicja.cel_odleg³oœæ * lot_parabol¹__k¹ta_opadania__odleg³oœæ_od_procent_c then
                                        begin

                                          zt_amunicja.amunicja_lot_parabol¹_etap := alpe_Opadanie;

                                          // K¹t pod jakim amunicja leci wzglêdem wody w momencie kiedy amunicja zaczyna opadaæ w locie parabol¹.
                                          zt_amunicja.lot_parabol¹__opadanie__k¹t_wzglêdem_wody := System.Math.RadToDeg(  GLS.VectorGeometry.AngleBetweenVectors( zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsoluteDirection, GLS.VectorGeometry.VectorMake( zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsoluteDirection.X, 0, zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsoluteDirection.Z ), GLS.VectorGeometry.VectorMake( 0, 0, 0 ) )  );

                                        end;
                                      //---//if ztr >= zt_amunicja.cel_odleg³oœæ * lot_parabol¹__k¹ta_opadania__odleg³oœæ_od_procent_c then

                                    end;
                                  //---//if zt_amunicja.amunicja_lot_parabol¹_etap = alpe_Wystrzelenie then


                                  if zt_amunicja.amunicja_lot_parabol¹_etap = alpe_Opadanie then
                                    begin

                                      ztr := zt_amunicja.pozycja_startowa.DistanceTo( zt_amunicja.pozycja_woda ); // Odleg³oœæ od pozycji startowej w poziomie.

                                      if ztr >= zt_amunicja.cel_odleg³oœæ * 0.9 then
                                        //if zt_amunicja.dzia³o_podniesienie_procent_k¹ta_maksymalnego >= 70 then
                                        //  zt_amunicja.amunicja_lot_parabol¹_etap := alpe_Koñcówka_Zasiêgu
                                        //else//if zt_amunicja.dzia³o_podniesienie_procent_k¹ta_maksymalnego >= 48 then
                                        //  zt_amunicja.amunicja_lot_parabol¹_etap := alpe_Koñcówka_Zasiêgu; // Dla bliskiego dystansu nie naprowadza amunicji na cel.
                                        zt_amunicja.amunicja_lot_parabol¹_etap := alpe_Koñcówka_Zasiêgu;


                                      if zt_amunicja.dzia³o_podniesienie_procent_k¹ta_maksymalnego <= 33 then
                                        lot_parabol¹__k¹ta_opadania__przed_namierzaniem_modyfikator_l := ( 2 * zt_amunicja.dzia³o_podniesienie_procent_k¹ta_maksymalnego / 100 )
                                      else//if zt_amunicja.dzia³o_podniesienie_procent_k¹ta_maksymalnego <= 38 then
                                      if zt_amunicja.dzia³o_podniesienie_procent_k¹ta_maksymalnego <= 66 then
                                        lot_parabol¹__k¹ta_opadania__przed_namierzaniem_modyfikator_l := ( 1.5 * zt_amunicja.dzia³o_podniesienie_procent_k¹ta_maksymalnego / 100 )
                                      else//if zt_amunicja.dzia³o_podniesienie_procent_k¹ta_maksymalnego <= 58 then
                                        lot_parabol¹__k¹ta_opadania__przed_namierzaniem_modyfikator_l := 1;


                                      // Podczas przelatywania zadanego odcinka obni¿a k¹t lotu z pozycji pocz¹tkowej (po wystrzeleniu) do koñcowej (opadania).
                                      zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle :=
                                          ( -lot_parabol¹__k¹ta_opadania__przed_namierzaniem_c - zt_amunicja.lot_parabol¹__opadanie__k¹t_wzglêdem_wody ) // K¹t o jaki nale¿y zmieniæ pochylenie.
                                        * lot_parabol¹__k¹ta_opadania__przed_namierzaniem_modyfikator_l
                                        * (   ( ztr - zt_amunicja.cel_odleg³oœæ * lot_parabol¹__k¹ta_opadania__odleg³oœæ_od_procent_c ) // Pocz¹tek odcinka, na którym nale¿y zmieniæ k¹t (aktualna odleg³oœæ minus odleg³oœæ pocz¹tku odcinka zmiany k¹ta).
                                        * 100
                                        / ( zt_amunicja.cel_odleg³oœæ * lot_parabol¹__k¹ta_opadania__odleg³oœæ_od_odcinek_zmiany_k¹ta_procent_c )  ) // Odcinek, na którym nale¿y zmieniæ k¹t.
                                        * 0.01;


                                      //// K¹t na cel z aktualnego po³o¿enia amunicji.
                                      //GLS.VectorGeometry.SetVector
                                      //  (
                                      //      zt_vector
                                      //      // Cel                 Obiekt celuj¹cy
                                      //    , zt_amunicja.pozycja_celu.AbsolutePosition.X - zt_amunicja.AbsolutePosition.X
                                      //    , zt_amunicja.pozycja_celu.AbsolutePosition.Y - zt_amunicja.AbsolutePosition.Y
                                      //    , zt_amunicja.pozycja_celu.AbsolutePosition.Z - zt_amunicja.AbsolutePosition.Z
                                      //  );
                                      //
                                      //// K¹t miêdzy kierunkiem lotu amunicji a kierunkiem na cel z aktualnego po³o¿enia amunicji.
                                      //ztr := System.Math.RadToDeg(  GLS.VectorGeometry.AngleBetweenVectors( zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsoluteDirection, zt_vector, GLS.VectorGeometry.VectorMake( 0, 0, 0 ) )  );

                                    end
                                  else//if zt_amunicja.amunicja_lot_parabol¹_etap = alpe_Opadanie then
                                  if zt_amunicja.amunicja_lot_parabol¹_etap in [ alpe_Koñcówka_Zasiêgu, alpe_Cel_Naprowadzanie ] then
                                    begin

                                      if zt_amunicja.korpus__amunicja.AbsolutePosition.Y <= zt_amunicja.pozycja_celu.AbsolutePosition.Y then
                                        zt_amunicja.amunicja_lot_parabol¹_etap := alpe_Poni¿ej_Celu;

                                      if zt_amunicja.amunicja_lot_parabol¹_etap <> alpe_Poni¿ej_Celu then
                                        begin

                                          if zt_amunicja.amunicja_lot_parabol¹_etap <> alpe_Cel_Naprowadzanie then
                                            ztr := zt_amunicja.pozycja_startowa.DistanceTo( zt_amunicja.pozycja_woda ); // Odleg³oœæ od pozycji startowej w poziomie.

                                          if   ( zt_amunicja.amunicja_lot_parabol¹_etap = alpe_Cel_Naprowadzanie )
                                            or (  ztr > zt_amunicja.cel_odleg³oœæ * ( lot_parabol¹__k¹ta_opadania__odleg³oœæ_od_procent_c + lot_parabol¹__k¹ta_opadania__odleg³oœæ_od_odcinek_zmiany_k¹ta_procent_c )  ) then
                                            begin

                                              zt_amunicja.amunicja_lot_parabol¹_etap := alpe_Cel_Naprowadzanie;

                                              // Nakierowuje amunicjê na cel (jak rakietê).
                                              zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsoluteDirection := GLS.VectorGeometry.VectorMake
                                                (
                                                    // Cel                 Obiekt celuj¹cy
                                                    zt_amunicja.pozycja_celu.AbsolutePosition.X - zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsolutePosition.X
                                                  , zt_amunicja.pozycja_celu.AbsolutePosition.Y - zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsolutePosition.Y
                                                  , zt_amunicja.pozycja_celu.AbsolutePosition.Z - zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsolutePosition.Z
                                                );

                                              //zt_amunicja.korpus__amunicja.Material.FrontProperties.Ambient.SetColor( 10, 0, 0 ); // Test.

                                            end;
                                          //---//if   ( zt_amunicja.amunicja_lot_parabol¹_etap = alpe_Cel_Naprowadzanie ) (...)


                                          ztr := zt_amunicja.DistanceTo( zt_amunicja.pozycja_celu ); // Odleg³oœæ amunicji do celu.

                                          if   ( ztr <= 1 )
                                            or ( ztr <= zt_amunicja.korpus__amunicja.Height * 2 ) then
                                            zt_amunicja.amunicja_lot_parabol¹_etap := alpe_Poni¿ej_Celu;


                                          if zt_amunicja.amunicja_lot_parabol¹_etap = alpe_Poni¿ej_Celu then
                                            begin

                                              zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsoluteDirection := GLS.VectorGeometry.VectorMake( 0, -1, 0 ); // Zabezpieczenie aby poza kontrol¹ naprowadzania amunicja lecia³a tylko w dó³.
                                              //zt_amunicja.korpus__amunicja.Material.FrontProperties.Ambient.SetColor( 10, 10, 10 ); // Test.

                                            end;
                                          //---//if zt_amunicja.amunicja_lot_parabol¹_etap = alpe_Poni¿ej_Celu then

                                        end;
                                      //---//if zt_amunicja.amunicja_lot_parabol¹_etap <> alpe_Poni¿ej_Celu then

                                    end;
                                  //---//if zt_amunicja.amunicja_lot_parabol¹_etap in [ alpe_Koñcówka_Zasiêgu, alpe_Cel_Naprowadzanie ] then

                                end;
                              //---//if zt_amunicja.czy_opadanie_parabola then

                            end;
                          //---//if zt_amunicja.amunicja_rodzaj = Typy_Wspolne.ar_Artyleria then
                          {$endregion 'Wysokoœæ i obrót dla ruchu parabol¹.'}


                          {$region 'Wysokoœæ i obrót dla ruchu parabol¹ - wersja 1.'}
                          // Na podstawie punktów i równania paraboli.
                          //
                          //if zt_amunicja.amunicja_rodzaj = Typy_Wspolne.ar_Artyleria then
                          //  begin
                          //
                          //    // Artyleria.
                          //
                          //    if zt_amunicja.czy_lot_parabol¹ then
                          //      begin
                          //
                          //        //ztr := zt_amunicja.korpus__amunicja.DistanceTo( zt_amunicja.pozycja_startowa.AbsolutePosition );
                          //
                          //        // Jest utworzony jako bezpoœredni potomek sceny.
                          //        zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.Position.X := zt_amunicja.AbsolutePosition.X;
                          //        zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.Position.Z := zt_amunicja.AbsolutePosition.Z;
                          //
                          //        // Dla paraboli wa¿na jest odleg³oœæ w linii prostej jako x dla równania na y ni¿ odleg³oœæ rzeczywista pocisku od lufy.
                          //        ztr := zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.DistanceTo( zt_amunicja.pozycja_startowa.AbsolutePosition );
                          //
                          //        //Statki_Form.Caption := FloatToStr( ztr );
                          //
                          //        zt_amunicja.Position.Y := zt_amunicja.parabola_równanie__a * Sqr( ztr ) + zt_amunicja.parabola_równanie__b * ztr + zt_amunicja.parabola_równanie__c;
                          //
                          //        //if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle > -80 then
                          //          zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle := -zt_amunicja.parabola_k¹t_lotu_pocz¹tkowy - ztr * zt_amunicja.parabola_k¹t_lotu_wspó³czynnik; //???
                          //
                          //      end;
                          //    //---//if zt_amunicja.czy_opadanie_parabola then
                          //
                          //  end;
                          ////---//if zt_amunicja.amunicja_rodzaj = Typy_Wspolne.ar_Artyleria then
                          {$endregion 'Wysokoœæ i obrót dla ruchu parabol¹ - wersja 1.'}

                          {$region 'Wysokoœæ i obrót dla ruchu parabol¹ - wersja 2.'}
                          // Na podstawie d¹¿enia do zadanego k¹ta procentowo wzglêdem przebytej drogi z zadanej odleg³oœci (z uwzglêdnieniem zasiêgu dzia³a).
                          //
                          //if zt_amunicja.amunicja_rodzaj = Typy_Wspolne.ar_Artyleria then
                          //  begin
                          //
                          //    // Artyleria.
                          //
                          //    if zt_amunicja.czy_lot_parabol¹ then
                          //      begin
                          //
                          //        ztr := zt_amunicja.pozycja_startowa.DistanceTo(  GLS.VectorGeometry.VectorMake( zt_amunicja.AbsolutePosition.X, zt_amunicja.pozycja_startowa.AbsolutePosition.Y, zt_amunicja.AbsolutePosition.Z )  ); // Odleg³oœæ od pozycji startowej w poziomie.
                          //
                          //        // Obraca czubkiem w dó³ (im mniejszy dystans do celu tym k¹t jest bli¿szy 80).
                          //        //   Samo wykrywa, w któr¹ stronê obracaæ aby obraca³o siê czubkiem do do³u (najkrótsz¹ drog¹).
                          //        if    ( ztr <= zt_amunicja.cel_odleg³oœæ )
                          //          and ( zt_amunicja.cel_odleg³oœæ <> 0 )
                          //          and ( zt_amunicja.amunicja_lot_parabol¹_etap = alpe_Wystrzelenie ) then
                          //          zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle :=
                          //            // -( 80 + zt_amunicja.opadanie_obrót_korekta_o_ustawienie_pocz¹tkowe ) // K¹t docelowy 80 skorygowany o k¹t pocz¹tkowy.
                          //            // -( 60? + zt_amunicja.opadanie_obrót_korekta_o_ustawienie_pocz¹tkowe ) // K¹t docelowy 80 skorygowany o k¹t pocz¹tkowy. //??? daæ k¹t maksymalny podniesienia lufy + 10
                          //             -(  ( zt_amunicja.dzia³o_podniesienie_k¹t_maksymalny + zt_amunicja.dzia³o_podniesienie_k¹t_maksymalny * 0.3 ) + zt_amunicja.opadanie_obrót_korekta_o_ustawienie_pocz¹tkowe  )
                          //            * ( 100 * ztr / zt_amunicja.cel_odleg³oœæ ) // Procentowa modyfikacja wzglêdem odleg³oœci (odleg³oœæ od pozycji pocz¹tkowej jest bli¿sza odleg³oœci do celu si³a modyfikacji wzrasta do 100%).
                          //            * 0.01;
                          //
                          //      end;
                          //    //---//if zt_amunicja.czy_opadanie_parabola then
                          //
                          //  end;
                          ////---//if zt_amunicja.amunicja_rodzaj = Typy_Wspolne.ar_Artyleria then
                          {$endregion 'Wysokoœæ i obrót dla ruchu parabol¹ - wersja 2.'}

                        end
                      else//if zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Pocisk ] then
                      if zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Torpeda ] then
                        begin

                          // Bomba g³êbinowa, torpeda.

                          {$region 'Bomba g³êbinowa, torpeda - zanurzanie i wynurzanie.'}
                          if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y > 0 then // Lepiej wygl¹da gdy porównuje wzglêdem zera. // zanurzenie_spowalnianie_g³êbokoœæ_od_c
                            begin

                              // Amunicja ponad wod¹.

                              if zt_amunicja.czy_wynurzanie then
                                zt_amunicja.czy_wynurzanie := false;

                              if zt_amunicja.czy_pod_wod¹ then
                                zt_amunicja.czy_pod_wod¹ := false;


                              // Obraca czubkiem w dó³.
                              //   Samo wykrywa, w któr¹ stronê obracaæ aby obraca³o siê czubkiem do do³u (najkrótsz¹ drog¹).
                              if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle + zt_amunicja.opadanie_obrót_korekta_o_ustawienie_pocz¹tkowe > -45 then
                                zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle := zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle - amunicja_prêdkoœæ_zakresy_r_g.zmiana_k¹ta_opadania_prêdkoœæ * delta_czasu_f
                              else//if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle > -45 then
                                zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle := zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle + amunicja_prêdkoœæ_zakresy_r_g.zmiana_k¹ta_opadania_prêdkoœæ * delta_czasu_f;


                              {$region 'Modyfikuje prêdkoœci lotu - w powietrzu amunicja zwalnia.'}
                              if zt_amunicja.prêdkoœæ__amunicja > zt_amunicja.prêdkoœæ_wytracanie_wspó³czynnik * delta_czasu_f then
                                zt_amunicja.prêdkoœæ__amunicja := zt_amunicja.prêdkoœæ__amunicja - zt_amunicja.prêdkoœæ_wytracanie_wspó³czynnik * delta_czasu_f;

                              if zt_amunicja.prêdkoœæ__amunicja < 0 then
                                zt_amunicja.prêdkoœæ__amunicja := 0;
                              {$endregion 'Modyfikuje prêdkoœci lotu - w powietrzu amunicja zwalnia.'}


                              // Opada po wystrzeleniu.
                              zt_amunicja.prêdkoœæ_opadania := zt_amunicja.prêdkoœæ_opadania + zt_amunicja.prêdkoœæ_opadania_wspó³czynnik;

                              zt_amunicja.Position.AddScaledVector(  zt_amunicja.prêdkoœæ_opadania * delta_czasu_f, GLS.VectorGeometry.VectorMake( 0, -1, 0 )  );
                              zt_amunicja.TransformationChanged();

                            end
                          else//if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y > 0 then
                            begin

                              // Amunicja w wodzie.

                              if zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] then
                                begin

                                  // Poziomuje w kierunku ruchu.
                                  //   Samo wykrywa, w któr¹ stronê obracaæ aby obraca³o siê czubkiem do do³u (najkrótsz¹ drog¹).
                                  if Abs( zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle + zt_amunicja.opadanie_obrót_korekta_o_ustawienie_pocz¹tkowe ) - 2 - delta_czasu_f > 0 then // Zabezpiecza aby nie drga³o.
                                    begin

                                      if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle + zt_amunicja.opadanie_obrót_korekta_o_ustawienie_pocz¹tkowe + delta_czasu_f > 0 then
                                        zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle := zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle - amunicja_prêdkoœæ_zakresy_r_g.zmiana_k¹ta_opadania_prêdkoœæ * delta_czasu_f
                                      else//if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle > -45 then
                                        zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle := zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle + amunicja_prêdkoœæ_zakresy_r_g.zmiana_k¹ta_opadania_prêdkoœæ * delta_czasu_f;

                                    end
                                  else//if Abs( zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle + zt_amunicja.opadanie_obrót_korekta_o_ustawienie_pocz¹tkowe ) - 2 - delta_czasu_f > 0 then
                                    begin

                                      zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle := -zt_amunicja.opadanie_obrót_korekta_o_ustawienie_pocz¹tkowe;

                                    end;
                                  //---//if Abs( zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle + zt_amunicja.opadanie_obrót_korekta_o_ustawienie_pocz¹tkowe ) - 2 - delta_czasu_f > 0 then


                                  {$region 'Modyfikuje prêdkoœci lotu - w wodzie amunicja przyspiesza.'}
                                  if zt_amunicja.prêdkoœæ__amunicja < zt_amunicja.prêdkoœæ_pocz¹tkowa - zt_amunicja.prêdkoœæ_wytracanie_wspó³czynnik * delta_czasu_f then
                                    zt_amunicja.prêdkoœæ__amunicja := zt_amunicja.prêdkoœæ__amunicja + zt_amunicja.prêdkoœæ_wytracanie_wspó³czynnik * delta_czasu_f;

                                  if zt_amunicja.prêdkoœæ__amunicja > zt_amunicja.prêdkoœæ_pocz¹tkowa then
                                    zt_amunicja.prêdkoœæ__amunicja := zt_amunicja.prêdkoœæ_pocz¹tkowa;
                                  {$endregion 'Modyfikuje prêdkoœci lotu - w wodzie amunicja przyspiesza.'}

                                end;
                              //---//if zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] then


                              if not zt_amunicja.czy_pod_wod¹ then
                                begin

                                  // Pierwsze wpadniêcie do wody (po wpadniêciu do wody prêdkoœæ opadania maleje).

                                  zt_amunicja.czy_pod_wod¹ := true;
                                  zt_amunicja.zanurzenie_g³êbokoœæ_po_wpadniêciu_do_wody := zt_amunicja.zanurzenie_g³êbokoœæ_po_wpadniêciu_do_wody + zt_amunicja.prêdkoœæ_opadania * 1.5; // Modyfikuje g³êbokoœæ zanurzenia o prêdkoœæ opadania.
                                  zt_amunicja.prêdkoœæ_opadania := zt_amunicja.prêdkoœæ_opadania * woda_wspó³czynnik_t³umienia_c;

                                  if zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa ] then
                                    zt_amunicja.prêdkoœæ__amunicja := zt_amunicja.prêdkoœæ__amunicja * woda_wspó³czynnik_t³umienia_c;


                                  if    ( zt_amunicja.torpeda_efekt_na_wodzie_gl_dummy_cube <> nil )
                                    and ( zt_amunicja.torpeda_efekt_na_wodzie_gl_dummy_cube.Parent = nil ) then
                                    begin

                                      Amunicja_Wystrzelona_Efekt_Utwórz( zt_amunicja, true, dzieñ_jasnoœæ_g );
                                      zt_amunicja.torpeda_efekt_na_wodzie_gl_dummy_cube.Parent := Gra_Obiekty_GLDummyCube;

                                    end;
                                  //---//if    ( zt_amunicja.torpeda_efekt_na_wodzie_gl_dummy_cube <> nil ) (...)

                                end;
                              //---//if not zt_amunicja.czy_pod_wod¹ then


                              if not zt_amunicja.czy_wynurzanie then
                                begin

                                  // Zwiêksza g³êbokoœæ zanurzenia.

                                  zt_amunicja.prêdkoœæ_opadania := zt_amunicja.prêdkoœæ_opadania + zt_amunicja.prêdkoœæ_opadania_wspó³czynnik * woda_wspó³czynnik_t³umienia_c;

                                  zt_amunicja.Position.AddScaledVector(  zt_amunicja.prêdkoœæ_opadania * delta_czasu_f, GLS.VectorGeometry.VectorMake( 0, -1, 0 )  );
                                  zt_amunicja.TransformationChanged();

                                  if zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] then
                                    if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y <= -zt_amunicja.zanurzenie_g³êbokoœæ_po_wpadniêciu_do_wody then
                                      begin

                                        zt_amunicja.czy_wynurzanie := true;
                                        zt_amunicja.zanurzenie_g³êbokoœæ_po_wpadniêciu_do_wody := 0; // Zeruje wartoœæ na wypadek je¿eli znów amunicja wyskoczy³aby z wody.

                                      end;
                                    //---//if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y <= -zt_amunicja.zanurzenie_g³êbokoœæ_po_wpadniêciu_do_wody then

                                end
                              else//if not zt_amunicja.czy_wynurzanie then
                                begin

                                  // D¹¿y do zadanej g³êbokoœci.

                                  if    ( zt_amunicja.torpeda_efekt_na_wodzie_gl_dummy_cube <> nil )
                                    and ( zt_amunicja.torpeda_efekt_na_wodzie_gl_dummy_cube.Parent = nil ) then
                                    begin

                                      Amunicja_Wystrzelona_Efekt_Utwórz( zt_amunicja, true, dzieñ_jasnoœæ_g );
                                      zt_amunicja.torpeda_efekt_na_wodzie_gl_dummy_cube.Parent := Gra_Obiekty_GLDummyCube;

                                    end;
                                  //---//if    ( zt_amunicja.torpeda_efekt_na_wodzie_gl_dummy_cube <> nil ) (...)


                                  if Abs( zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y - zt_amunicja.zanurzenie_g³êbokoœæ_zadana ) > Abs( 0.01 ) then // Zabezpiecza aby nie drga³o.
                                    begin

                                      if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y < zt_amunicja.zanurzenie_g³êbokoœæ_zadana then
                                        zt_amunicja.prêdkoœæ_opadania := zt_amunicja.prêdkoœæ_opadania - zt_amunicja.prêdkoœæ_opadania_wspó³czynnik * woda_wspó³czynnik_t³umienia_c * torpeda_d¹¿enie_do_zadanej_g³êbokoœci_szybkoœæ_c
                                      else//if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y < zt_amunicja.zanurzenie_g³êbokoœæ_zadana then
                                        zt_amunicja.prêdkoœæ_opadania := zt_amunicja.prêdkoœæ_opadania + zt_amunicja.prêdkoœæ_opadania_wspó³czynnik * woda_wspó³czynnik_t³umienia_c * torpeda_d¹¿enie_do_zadanej_g³êbokoœci_szybkoœæ_c;


                                      //if zt_amunicja.zanurzenie_g³êbokoœæ_zadana = 0 then
                                      //  ztr := 0.25
                                      //else//if zt_amunicja.zanurzenie_g³êbokoœæ_zadana = 0 then
                                      //  begin
                                      //
                                      //    // Im mniejszy dystans do zadanej g³êbokoœci tym prêdkoœæ opadania jest procentowo obni¿ana do 0 (im dalej tym jej skutecznoœæ osi¹ga 100%).
                                      //    //??? wielkoœæ wskaŸnika os³abiæ os³abianie gdy daleko
                                      //    ztr := Abs( 100 - Abs( zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y * 100 / zt_amunicja.zanurzenie_g³êbokoœæ_zadana )  ) * 0.01;
                                      //
                                      //    if ztr > 1 then
                                      //      ztr := 1; // Nie wiêcej ni¿ 100%.
                                      //
                                      //  end;
                                      ////---//if zt_amunicja.zanurzenie_g³êbokoœæ_zadana = 0 then

                                      // Im mniejszy dystans do zadanej g³êbokoœci tym prêdkoœæ opadania jest procentowo obni¿ana do 0 (im dalej tym jej skutecznoœæ osi¹ga 100%). Zakres modyfikacji zmienia siê w odleg³oœci 0 - 1.
                                      ztr := Abs( zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y - zt_amunicja.zanurzenie_g³êbokoœæ_zadana );

                                      if ztr > 1 then
                                        ztr := 1; // Nie wiêcej ni¿ 100%.

                                      //zt_amunicja.Position.AddScaledVector(  zt_amunicja.prêdkoœæ_opadania * torpeda_d¹¿enie_do_zadanej_g³êbokoœci_szybkoœæ_c * ztr * delta_czasu_f, GLS.VectorGeometry.VectorMake( 0, -1, 0 )  );
                                      zt_amunicja.Position.AddScaledVector(  zt_amunicja.prêdkoœæ_opadania * ztr * delta_czasu_f, GLS.VectorGeometry.VectorMake( 0, -1, 0 )  );
                                      zt_amunicja.TransformationChanged();

                                    end
                                  else//if Abs( zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y - zt_amunicja.zanurzenie_g³êbokoœæ_zadana ) > Abs( 0.01 ) then
                                    begin

                                      if zt_amunicja.prêdkoœæ_opadania <> 0 then
                                        zt_amunicja.prêdkoœæ_opadania := 0;

                                    end;
                                  //---//if Abs( zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y - zt_amunicja.zanurzenie_g³êbokoœæ_zadana ) > Abs( 0.01 ) then

                                end;
                              //---//if not zt_amunicja.czy_wynurzanie then

                            end;
                          //---//if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y > 0 then
                          {$endregion 'Bomba g³êbinowa, torpeda - zanurzanie i wynurzanie.'}


                          {$region 'Torpeda - zanurzanie i wynurzanie - wersja 1.'}
                          //if not zt_amunicja.czy_wynurzanie then
                          //  begin
                          //
                          //    // Opada i zanurza siê po wystrzeleniu.
                          //
                          //    if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y > -zt_amunicja.zanurzenie_g³êbokoœæ_po_wpadniêciu_do_wody then
                          //      begin
                          //
                          //        if not zt_amunicja.czy_pod_wod¹ then
                          //          zt_amunicja.prêdkoœæ_opadania := zt_amunicja.prêdkoœæ_opadania + zt_amunicja.prêdkoœæ_opadania_wspó³czynnik
                          //        else//if not zt_amunicja.czy_pod_wod¹ then
                          //          zt_amunicja.prêdkoœæ_opadania := zt_amunicja.prêdkoœæ_opadania + zt_amunicja.prêdkoœæ_opadania_wspó³czynnik * woda_wspó³czynnik_t³umienia_c;
                          //
                          //
                          //        if    ( not zt_amunicja.czy_pod_wod¹ )
                          //          and ( zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y <= 0 ) then
                          //          begin
                          //
                          //            // Po wpadniêciu do wody prêdkoœæ opadania maleje.
                          //
                          //            zt_amunicja.czy_pod_wod¹ := true;
                          //            zt_amunicja.zanurzenie_g³êbokoœæ_po_wpadniêciu_do_wody := zt_amunicja.zanurzenie_g³êbokoœæ_po_wpadniêciu_do_wody + zt_amunicja.prêdkoœæ_opadania * 10; // Modyfikuje g³êbokoœæ zanurzenia o prêdkoœæ opadania.
                          //            zt_amunicja.prêdkoœæ_opadania := zt_amunicja.prêdkoœæ_opadania * woda_wspó³czynnik_t³umienia_c;
                          //
                          //          end;
                          //        //---//if    ( not zt_amunicja.czy_pod_wod¹ ) (...)
                          //
                          //
                          //        zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.Lift( -zt_amunicja.prêdkoœæ_opadania );
                          //
                          //      end
                          //    else//if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y > -zt_amunicja.zanurzenie_g³êbokoœæ_po_wpadniêciu_do_wody then
                          //      begin
                          //
                          //        if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y <= -zt_amunicja.zanurzenie_g³êbokoœæ_po_wpadniêciu_do_wody then
                          //          zt_amunicja.czy_wynurzanie := true;
                          //
                          //      end;
                          //    //---//if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y > -zt_amunicja.zanurzenie_g³êbokoœæ_po_wpadniêciu_do_wody then
                          //
                          //
                          //
                          //    // Przechyla siê przodem w dó³ po wystrzeleniu.
                          //    // Je¿eli przechyli siê za mocno to zmieni¹ siê wspó³rzêdne i nie wykryje warunku do wynurzania.
                          //    //if    ( zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle < 89 )
                          //    //  and ( zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y > 0 ) then
                          //    //  zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.PitchAngle := zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.PitchAngle - gra_wspó³czynnik_prêdkoœci_g;
                          //
                          //    if    ( zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.PitchAngle > -89 )
                          //      and ( zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsolutePosition.Y > 0 ) then
                          //      zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.PitchAngle := zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.PitchAngle - gra_wspó³czynnik_prêdkoœci_g;
                          //
                          //  end
                          //else//if not zt_amunicja.czy_wynurzanie then
                          //  begin
                          //
                          //    // Wynurza siê do poziomu standardowego p³yniêcia.
                          //
                          //    if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y < 0 then
                          //      zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.Lift( zt_amunicja.prêdkoœæ_opadania * 0.25 )
                          //    else//if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y < 0 then
                          //      if zt_amunicja.prêdkoœæ_opadania <> 0 then
                          //        zt_amunicja.prêdkoœæ_opadania := 0;
                          //
                          //  end;
                          ////---//if not zt_amunicja.czy_wynurzanie then
                          //
                          //
                          //if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y <= 0 then
                          //  begin
                          //
                          //    // Gdy jest ju¿ w wodzie.
                          //
                          //    // Wyrównuje przechylenie do poziomu.
                          //    //if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle > 0 then
                          //    //  zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.Pitch( gra_wspó³czynnik_prêdkoœci_g );
                          //    if zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.PitchAngle < 0 then
                          //      zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.PitchAngle := zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.PitchAngle + gra_wspó³czynnik_prêdkoœci_g;
                          //
                          //  end;
                          ////---//if zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y > 0 then
                          {$endregion 'Torpeda - zanurzanie i wynurzanie - wersja 1.'}

                        end;
                      //---//if zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Torpeda ] then

                    end;
                  //---//if zt_amunicja.czy_poza_luf¹ then

                end
              else//if not zt_amunicja.czy_poza_zasiêgiem then
                begin

                  // Poza skutecznym zasiêgiem.

                  {$region 'Modyfikuje prêdkoœci lotu.'}
                  if zt_amunicja.prêdkoœæ__amunicja > zt_amunicja.prêdkoœæ_wytracanie_wspó³czynnik * delta_czasu_f then
                    zt_amunicja.prêdkoœæ__amunicja := zt_amunicja.prêdkoœæ__amunicja - zt_amunicja.prêdkoœæ_wytracanie_wspó³czynnik * delta_czasu_f;

                  if zt_amunicja.prêdkoœæ__amunicja < 0 then
                    zt_amunicja.prêdkoœæ__amunicja := 0;


                  if not zt_amunicja.czy_pod_wod¹ then
                    zt_amunicja.prêdkoœæ_opadania := zt_amunicja.prêdkoœæ_opadania + zt_amunicja.prêdkoœæ_opadania_wspó³czynnik
                  else//if not zt_amunicja.czy_pod_wod¹ then
                    zt_amunicja.prêdkoœæ_opadania := zt_amunicja.prêdkoœæ_opadania + zt_amunicja.prêdkoœæ_opadania_wspó³czynnik * woda_wspó³czynnik_t³umienia_c;


                  if    ( not zt_amunicja.czy_pod_wod¹ )
                    and ( zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y <= 0 ) then
                    begin

                      // Po wpadniêciu do wody prêdkoœæ opadania maleje.

                      zt_amunicja.czy_pod_wod¹ := true;
                      zt_amunicja.prêdkoœæ_opadania := zt_amunicja.prêdkoœæ_opadania * woda_wspó³czynnik_t³umienia_c;

                      if zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa ] then
                        zt_amunicja.prêdkoœæ__amunicja := zt_amunicja.prêdkoœæ__amunicja * woda_wspó³czynnik_t³umienia_c;

                    end;
                  //---//if    ( not zt_amunicja.czy_pod_wod¹ ) (...)
                  {$endregion 'Modyfikuje prêdkoœci lotu.'}


                  {$region 'Poza skutecznym zasiêgiem amunicja opada.'}
                  zt_amunicja.Position.AddScaledVector(  -Abs(zt_amunicja.prêdkoœæ_opadania) * delta_czasu_f, GLS.VectorGeometry.VectorMake( 0, 1, 0 )  );
                  zt_amunicja.TransformationChanged();
                  {$endregion 'Poza skutecznym zasiêgiem amunicja opada.'}


                  // Obraca czubkiem w dó³ (im mniejsza prêdkoœæ tym k¹t jest bli¿szy 90).
                  //   Samo wykrywa, w któr¹ stronê obracaæ aby obraca³o siê czubkiem do do³u (najkrótsz¹ drog¹).
                  //if not ( zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Torpeda ] ) then
                  if not ( zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa ] ) then
                    if zt_amunicja.prêdkoœæ_pocz¹tkowa <> 0 then
                      //zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle := -( 90 + zt_amunicja.opadanie_obrót_korekta_o_ustawienie_pocz¹tkowe ) * ( 100 - 100 * zt_amunicja.prêdkoœæ__amunicja / zt_amunicja.prêdkoœæ_pocz¹tkowa ) * 0.01;
                      zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.PitchAngle :=
                            zt_amunicja.opadanie_obrót_korekta_o_k¹t_na_granicy_zasiêgu
                        - ( 90 + zt_amunicja.opadanie_obrót_korekta_o_ustawienie_pocz¹tkowe + zt_amunicja.opadanie_obrót_korekta_o_k¹t_na_granicy_zasiêgu ) // K¹t docelowy 90 skorygowany o k¹t pocz¹tkowy i k¹t na granicy zasiêgu.
                        * ( 100 - 100 * zt_amunicja.prêdkoœæ__amunicja / zt_amunicja.prêdkoœæ_pocz¹tkowa ) // Procentowa modyfikacja wzglêdem prêdkoœci (prêdkoœæ d¹¿y do 0 si³a modyfikacji wzrasta do 100%).
                        * 0.01;


                  {$region 'Modyfikacja wspó³czynnika zadawanych obra¿eñ.'}
                  if not ( zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe ] ) then // Bomby g³êbinowe, je¿e g³êbinowe nie trac¹ si³y poza skutecznym zasiêgiem.
                    if zt_amunicja.obra¿enia_zadawane_wspó³czynnik_zmodyfikowany > 0 then
                      begin

                        // zt_amunicja.zasiêg__amunicja + zt_amunicja.zasiêg__amunicja * 0.1{10%} // Koñcowy zakres zadawania obra¿eñ - 0.1 = 10%.
                        //
                        // ( zt_amunicja.zasiêg__amunicja + zt_amunicja.zasiêg__amunicja * 0.1 ) - zt_amunicja.DistanceTo( zt_amunicja.pozycja_startowa ) // Procent wartoœci obra¿eñ - obni¿enie.
                        //
                        // 100 * (  zt_amunicja.DistanceTo( zt_amunicja.pozycja_startowa ) - ( zt_amunicja.zasiêg__amunicja + zt_amunicja.zasiêg__amunicja * 0.1 )  ) / ( zt_amunicja.zasiêg__amunicja * 0.1 )


                        ztr := zt_amunicja.zasiêg__amunicja * 0.5; // Koñcowy zakres zadawania obra¿eñ 50%.

                        if ztr <> 0 then
                          begin

                            ztr := 100 * (  ( zt_amunicja.zasiêg__amunicja + ztr ) - zt_amunicja.DistanceTo( zt_amunicja.pozycja_startowa )  ) / ztr;

                            zt_amunicja.obra¿enia_zadawane_wspó³czynnik_zmodyfikowany := ( zt_amunicja.obra¿enia_zadawane_wspó³czynnik * ztr / 100 );

                            if zt_amunicja.obra¿enia_zadawane_wspó³czynnik_zmodyfikowany > 1 then
                              zt_amunicja.obra¿enia_zadawane_wspó³czynnik_zmodyfikowany := 1
                            else//if zt_amunicja.obra¿enia_zadawane_wspó³czynnik_zmodyfikowany > 1 then
                              if zt_amunicja.obra¿enia_zadawane_wspó³czynnik_zmodyfikowany < 0.001 then
                                zt_amunicja.obra¿enia_zadawane_wspó³czynnik_zmodyfikowany := 0;


                            //zt_amunicja.Move( zt_amunicja.prêdkoœæ__amunicja * zt_amunicja.obra¿enia_zadawane_wspó³czynnik_zmodyfikowany );

                          end;
                        //---//if ztr <> 0 then

                      end;
                    //---//if zt_amunicja.obra¿enia_zadawane_wspó³czynnik_zmodyfikowany > 0 then
                  {$endregion 'Modyfikacja wspó³czynnika zadawanych obra¿eñ.'}



                  if    ( zt_amunicja.torpeda_efekt_na_wodzie_gl_dummy_cube <> nil )
                    and ( zt_amunicja.torpeda_efekt_na_wodzie_gl_dummy_cube.Parent <> nil )
                    and ( zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsolutePosition.Y < zt_amunicja.zanurzenie_g³êbokoœæ_zadana - 1 ) then
                    begin

                      FreeAndNil( zt_amunicja.torpeda_efekt_na_wodzie_gl_dummy_cube );

                    end;
                  //---//if    ( zt_amunicja.torpeda_efekt_na_wodzie_gl_dummy_cube <> nil ) (...)

                end;
              //---//if not zt_amunicja.czy_poza_zasiêgiem then


              {$region 'Wp³yw wiatru na amunicjê.'}
              if    ( Wiatr__Wp³yw_Na_Rozgrywkê_CheckBox.Checked )
                and ( wiatr_vector_g.W > 0 ) then
                begin

                  // Przesuwanie.
                  if zt_amunicja.AbsolutePosition.Y > -zanurzanie_precyzja_c then // Pod wod¹ wiatr nie przesuwa.
                    begin

                      // Im k¹t wzglêdem wiatru jest bli¿szy 90 stopniom tym silniej wiatr przesuwa amunicjê.
                      // Modyfikator nie s³abnie poni¿ej 0.5.
                      // Zakres ztr < 1, 0.5 >.

                      ztr :=
                        System.Math.RadToDeg
                          (
                            GLS.VectorGeometry.AngleBetweenVectors
                              (
                                GLS.VectorGeometry.VectorMake( zt_amunicja.AbsoluteDirection.X, 0, zt_amunicja.AbsoluteDirection.Z ),
                                GLS.VectorGeometry.VectorMake( -wiatr_vector_g.X, 0, -wiatr_vector_g.Z ),
                                GLS.VectorGeometry.VectorMake( 0, 0, 0 )
                              )
                          );


                      ztr := Abs( ztr );

                      if ztr > 90 then
                        ztr := 180 - ztr;

                      if ztr <= 45 then
                        ztr := 0.5
                      else//if ztr <= 45 then
                        ztr := ztr / 90;
                      //---// Im k¹t wzglêdem wiatru jest bli¿szy 90 stopniom tym silniej wiatr przesuwa statek.


                      zt_amunicja.Position.AddScaledVector
                        (
                          wiatr_vector_g.W * ztr * wiatr__wp³yw_na__amunicjê__przesuwanie_g * delta_czasu_f,
                          GLS.VectorGeometry.AffineVectorMake
                            (
                              -wiatr_vector_g.X,
                              0,
                              -wiatr_vector_g.Z
                            )
                        );
                      zt_amunicja.TransformationChanged();

                    end;
                  //---//if zt_amunicja.AbsolutePosition.Y > -zanurzanie_precyzja_c then


                  // Unoszenie.
                  if zt_amunicja.AbsolutePosition.Y > zanurzanie_precyzja_c then
                    begin

                      // Je¿eli samolot leci to wiatr unosi go w górê i w dó³.

                      zt_amunicja.Position.AddScaledVector
                        (
                          wiatr_vector_g.Y * wiatr__wp³yw_na__amunicjê__unoszenie_g * delta_czasu_f,
                          GLS.VectorGeometry.AffineVectorMake
                            (
                              0,
                              1, // Na kierunek wp³ynie znak wiatr_vector_g.Y.
                              0
                            )
                        );
                      zt_amunicja.TransformationChanged();

                    end;
                  //---//if zt_amunicja.AbsolutePosition.Y > zanurzanie_precyzja_c then

                end;
              //---//if    ( Wiatr__Wp³yw_Na_Rozgrywkê_CheckBox.Checked ) (...)
              {$endregion 'Wp³yw wiatru na amunicjê.'}


              zt_amunicja.pozycja_woda.Position.X := zt_amunicja.AbsolutePosition.X;
              zt_amunicja.pozycja_woda.Position.Z := zt_amunicja.AbsolutePosition.Z;


              // Czy uzbrojona.
              if    ( zt_amunicja.czy_poza_luf¹ )
                and ( not zt_amunicja.czy_uzbrojona )
                and (  zt_amunicja.korpus__amunicja.DistanceTo( zt_amunicja.pozycja_startowa.AbsolutePosition ) > zt_amunicja.amunicja_uzbrajanie_odleg³oœæ  ) then // Wykrywa samotrafienia tu¿ po opuszczeniu lufy przez amunicjê (je¿eli nie oddali siê odpowiednio daleko od statku).
                begin

                  zt_amunicja.czy_uzbrojona := true;
                  zt_amunicja.jasna_linia.Material.FrontProperties.Emission.SetColor( 1, 0, 0, 1 );
                  zt_amunicja.obra¿enia_zasiêg_st_gl_sphere.Material.FrontProperties.Ambient.Color := GLS.Color.clrRed;

                  GLS.VectorGeometry.MakeVector( zt_amunicja.uzbrojenie_wspó³rzêdne_vector, zt_amunicja.korpus__amunicja.AbsolutePosition );

                  if not ( zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Pocisk ] ) then // To samo .jasna_linia.Height.
                    begin

                      zt_amunicja.jasna_linia.Height := zt_amunicja.jasna_linia.Height + zt_amunicja.jasna_linia.Height * 0.1; // Tylko aby zaznaczyæ wizualnie, ¿e pocisk jest uzbrojony.

                      zt_amunicja.Jasna_Linia_Pozycja_Z_Ustaw();

                      zt_amunicja.czy_jasna_linia_wyd³u¿ona := true;

                    end;
                  //---//if not ( zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Pocisk ] ) then

                end;
              //---//if    ( zt_amunicja.czy_poza_luf¹ ) (...)


              if    ( zt_amunicja.czy_uzbrojona )
                and ( not zt_amunicja.czy_jasna_linia_wyd³u¿ona )
                and ( not zt_amunicja.czy_poza_zasiêgiem ) then
                begin

                  if zt_amunicja.skala__amunicja <> 0 then
                    ztr := 1 / zt_amunicja.skala__amunicja
                  else//if zt_amunicja.skala__amunicja <> 0 then
                    ztr := 1;

                  if zt_amunicja.jasna_linia.Height < jasna_linia_d³ugoœæ_c * ztr then // To samo .jasna_linia.Height.
                    begin

                      zt_amunicja.jasna_linia.Height := zt_amunicja.korpus__amunicja.DistanceTo( zt_amunicja.uzbrojenie_wspó³rzêdne_vector ) * ztr;

                      if zt_amunicja.jasna_linia.Height < zt_amunicja.korpus__amunicja.Height then
                        zt_amunicja.jasna_linia.Height := zt_amunicja.korpus__amunicja.Height;

                      zt_amunicja.Jasna_Linia_Pozycja_Z_Ustaw();

                    end
                  else//if zt_amunicja.jasna_linia.Height < jasna_linia_d³ugoœæ_c * ztr then
                    zt_amunicja.czy_jasna_linia_wyd³u¿ona := true;

                end;
              //---//if zt_amunicja.czy_uzbrojona then


              // To samo der_Amunicja__Lot.
              if    ( DŸwiêk__Aktywnoœæ_CheckBox.Checked )
                and ( GLSMOpenAL1.Active )
                and ( ActiveSoundManager() <> nil ) then
                if    ( zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] )
                  and ( zt_amunicja.AbsolutePosition.Y < 0 )
                  and (  zt_amunicja.Behaviours.IndexOfClass( TGLBSoundEmitter ) > -1  ) // -1 - brak, >= 0 zachowania.
                  and ( not TGLBSoundEmitter(zt_amunicja.Behaviours.Items[ 0 ]).Playing ) then
                  TGLBSoundEmitter(zt_amunicja.Behaviours.Items[ 0 ]).Playing := true // Gdy torpeda pierwszy raz wpadnie do wody w³¹cza efekt dŸwiêkowy.
                else//if    ( zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] ) (...)
                  if    (  not ( zt_amunicja.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] )  )
                    and (  zt_amunicja.Behaviours.IndexOfClass( TGLBSoundEmitter ) > -1  ) then // -1 - brak, >= 0 zachowania.
                    if    ( zt_amunicja.AbsolutePosition.Y < 0 )
                      and ( TGLBSoundEmitter(zt_amunicja.Behaviours.Items[ 0 ]).Playing ) then
                      TGLBSoundEmitter(zt_amunicja.Behaviours.Items[ 0 ]).Playing := false // Gdy amunicja wpadnie pod wodê wy³¹cza dŸwiêk lotu.
                    else//if    ( zt_amunicja.AbsolutePosition.Y < 0 ) (...)
                    if    ( zt_amunicja.AbsolutePosition.Y >= 0 )
                      and ( not TGLBSoundEmitter(zt_amunicja.Behaviours.Items[ 0 ]).Playing ) then
                      TGLBSoundEmitter(zt_amunicja.Behaviours.Items[ 0 ]).Playing := true; // Gdy amunicja wzleci na wodê w³¹cza dŸwiêk lotu.

            end;
          //---//if zt_amunicja.czy_usun¹æ_amunicja then

        end;
      //---//if zt_amunicja <> nil then

    end;
  //---//for i := amunicja_wystrzelona_list.Count - 1 downto 0 do

end;//---//Funkcja Amunicja_Ruch().

//Funkcja Amunicja_Wystrzelona_Utwórz_Jeden().
procedure TStatki_Form.Amunicja_Wystrzelona_Utwórz_Jeden( AOwner : TGLBaseSceneObject; ALufa : TLufa; const obracaj_dzia³a_f : boolean; const cel_wspó³rzêdne_f : GLS.VectorGeometry.TAffineVector );
var
  zt_vector : GLS.VectorTypes.TVector4f;
  zt_amunicja : TAmunicja;
begin

  if   ( amunicja_wystrzelona_list = nil )
    or (  not Assigned( amunicja_wystrzelona_list )  ) then
    Exit;

  zt_amunicja := TAmunicja.Create( AOwner, ALufa, obracaj_dzia³a_f, cel_wspó³rzêdne_f, amunicja_prêdkoœæ_zakresy_r_g, Gra_GLCollisionManager );

  Amunicja_Wystrzelona_Efekt_Utwórz( zt_amunicja, false, dzieñ_jasnoœæ_g );

  DŸwiêki__Efekt__Utwórz_Jeden( zt_amunicja, der_Amunicja__Lot, 0, 0, 0 );

  // Dla u³atwienia zwalniania statków w³aœcicielem jest scena a nie lufa.
  //if ALufa <> nil then
  //  Trafienia_Efekt__Utwórz_Jeden( Gra_Obiekty_GLDummyCube, er_Wystrza³, ALufa.wylot_pozycja.AbsolutePosition.X, ALufa.wylot_pozycja.AbsolutePosition.Y, ALufa.wylot_pozycja.AbsolutePosition.Z, zt_amunicja, -1, -1 );

  if ALufa <> nil then
    begin

      // Przesuniêcie efektu przed wylot lufy.
      zt_vector := ALufa.wylot_pozycja.AbsolutePosition;

      GLS.VectorGeometry.AddVector
        (
          zt_vector,
          GLS.VectorGeometry.VectorScale
            (
              ALufa.AbsoluteDirection,
              -ALufa.wylot_pozycja.Radius * 3
            )
        );

      Trafienia_Efekt__Utwórz_Jeden( Gra_Obiekty_GLDummyCube, er_Wystrza³, zt_vector.X, zt_vector.Y, zt_vector.Z, zt_amunicja, -1, -1 );

    end;
  //---//if ALufa <> nil then


  zt_amunicja.obra¿enia_zasiêg_st_gl_sphere.Visible := amunicja__obra¿enia_zasiêg_widoczne_g;


  amunicja_wystrzelona_list.Add( zt_amunicja );

end;//---//Funkcja Amunicja_Wystrzelona_Utwórz_Jeden().

//Funkcja Amunicja_Wystrzelona_Zwolnij_Jeden().
procedure TStatki_Form.Amunicja_Wystrzelona_Zwolnij_Jeden( amunicja_f : TAmunicja );
begin

  // Usuwaæ tylko w jednym miejscu. //!!!
  // Wywo³anie tej funkcji w kliku miejscach mo¿e coœ zepsuæ.

  if   ( amunicja_wystrzelona_list = nil )
    or (  not Assigned( amunicja_wystrzelona_list )  )
    or ( amunicja_f = nil ) then
    Exit;

  //pociski_magiczne_blokada := true;


  if Gra_GLCamera <> nil then
    if Gra_GLCamera.Parent = amunicja_f then
      if amunicja_wystrzelona_list.Count > 1 then
        Kamera_Prze³¹cz( kt_Amunicja ) // Prze³¹cza na kolejn¹ wystrzelon¹ amunicjê.
      else//if amunicja_wystrzelona_list.Count > 1 then
        Kamera_Prze³¹cz( kt_Statek );

  // Aby nie zwolni³o kamery wraz z amunicj¹.
  while Gra_GLCamera.Parent = amunicja_f do
    Kamera_Prze³¹cz( kt_Statek__Swobodna );


  amunicja_wystrzelona_list.Remove( amunicja_f );
  FreeAndNil( amunicja_f );

end;//---//Funkcja Amunicja_Wystrzelona_Zwolnij_Jeden().

//Funkcja Amunicja_Wystrzelona_Zwolnij_Wszystkie().
procedure TStatki_Form.Amunicja_Wystrzelona_Zwolnij_Wszystkie();
var
  i : integer;
begin

  if   ( amunicja_wystrzelona_list = nil )
    or (  not Assigned( amunicja_wystrzelona_list )  ) then
    Exit;


  if    ( Gra_GLCamera <> nil )
    and ( Gra_GLCamera.Parent is TAmunicja ) then
    Kamera_Prze³¹cz( kt_Statek__Swobodna );


  for i := amunicja_wystrzelona_list.Count - 1 downto 0 do
    begin

      TAmunicja(amunicja_wystrzelona_list[ i ]).Free();
      amunicja_wystrzelona_list.Delete( i );

    end;
  //---//for i := amunicja_wystrzelona_list.Count - 1 downto 0 do

end;//---//Funkcja Amunicja_Wystrzelona_Zwolnij_Wszystkie().

//Funkcja Amunicja_Wystrzelona_Efekt_Utwórz().
procedure TStatki_Form.Amunicja_Wystrzelona_Efekt_Utwórz( amunicja_f : TAmunicja; const czy_torpeda_efekt_na_wodzie_f : boolean; const dzieñ_jasnoœæ_f : real; const czy_wieloosobowa_f : boolean = false  );
var
  zt_gl_dummy_cube : TGLDummyCube;
begin

  //
  // Funkcja dodaje efekt lotu amunicji.
  //
  // Parametry:
  //   czy_torpeda_efekt_na_wodzie_f
  //     false - dodaje efekt œladu za amunicj¹.
  //     true - dodaje efekt œladu amunicji na wodzie.
  //   czy_wieloosobowa_f:
  //     false - amunicja przeliczana w grze pojedynczej lub na serwerze.
  //     true - amunicja tylko wyœwietlana u klientów wieloosobowych.
  //


  if   ( amunicja_f = nil )
    or (  not Assigned( amunicja_f )  ) then
    Exit;


  if czy_torpeda_efekt_na_wodzie_f then
    zt_gl_dummy_cube := amunicja_f.torpeda_efekt_na_wodzie_gl_dummy_cube
  else//if czy_torpeda_efekt_na_wodzie_f then
    zt_gl_dummy_cube := amunicja_f.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube;


  // Dodaje efekt smugi za pociskiem.
  if   (
             ( amunicja_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Pocisk ] )
         and ( Efekty__Smuga_D³uga_CheckBox.Checked )
       )
    or (
             (  not ( amunicja_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Pocisk ] )  )
         and ( Efekty__Smuga_CheckBox.Checked )
       ) then
    with GLS.ParticleFX.GetOrCreateSourcePFX( zt_gl_dummy_cube ) do
      begin

        //Manager := Efekt__Smuga_GLPerlinPFXManager;

        if amunicja_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Pocisk ] then
          begin

            Manager := Efekt__Smuga_D³uga_GLPerlinPFXManager;
            ParticleInterval := 0.01;

          end
        else//if amunicja_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Pocisk ] then
          Manager := Efekt__Smuga_GLPerlinPFXManager;



        //TGLPerlinPFXManager(Manager).Acceleration.AsVector := VectorNegate( zt_amunicja.korpus_opadanie_obrót_gl_dummy_cube.AbsoluteDirection );

        VelocityMode := GLS.ParticleFX.svmAbsolute;

        if not czy_torpeda_efekt_na_wodzie_f then // Efekt na wodzie jest w poziomie.
          if not czy_wieloosobowa_f then
            InitialVelocity.AsVector := VectorNegate( amunicja_f.AbsoluteDirection )
          else//if not czy_wieloosobowa_f then
            InitialVelocity.AsVector := amunicja_f.AbsoluteDirection; // Nie wiem dlaczego amunicja wieloosobowa ma odwrócony kierunek bezwzglêdny.

        //InitialVelocity.AsVector := amunicja_f.AbsoluteDirection;
        //VelocityDispersion := 0.0001;
        //DispersionMode := GLS.ParticleFX.sdmIsotropic;

        //if amunicja_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria ] then
        //  EffectScale := 3
        //else//if amunicja_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria ] then
        if amunicja_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe ] then
          EffectScale := 0.1;

      end;
    //---//with GLS.ParticleFX.GetOrCreateSourcePFX( zt_gl_dummy_cube ) do


  if    ( amunicja_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] )
    and ( not Efekty__Smuga_CheckBox.Checked ) then
    begin

      // Je¿eli efekty graficzne s¹ wy³¹czone to aby by³o widaæ œlad za torped¹.

      amunicja_f.torpeda_efekt_na_wodzie_gl_dummy_cube.VisibleAtRunTime := true;
      amunicja_f.torpeda_efekt_na_wodzie_gl_dummy_cube.EdgeColor.Color := GLS.VectorGeometry.VectorScale( GLS.Color.clrLightBlue, dzieñ_jasnoœæ_f ); // Kolor nie jest aktualizowany wraz ze zmian¹ pory dnia ale pora dnia raczej nie bêdzie siê tak szybko zmieniaæ by amunicja nie zosta³a wczeœniej zwolniona.

    end;
  //---//if    ( amunicja_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] ) (...)

end;//---//Funkcja Amunicja_Wystrzelona_Efekt_Utwórz().

//Funkcja BabyMetal_Statek__Ruch Statki_Ruch().
procedure TStatki_Form.BabyMetal_Statek__Ruch( delta_czasu_f : double );
const
  obrót_precyzja_c_l : single = 0.01;
  obrót_spowalnianie_k¹t_c_l : single = 90;

var
  k¹t,
  ztsi
    : single;
  zt_vector : GLS.VectorTypes.TVector4f;
  zt_statek : TStatek;
begin

  if BabyMetal_Statek_GLDummyCube.Visible then
    begin

      BabyMetal_Statek_GLDummyCube.Move( babymetal_statek__prêdkoœæ_maksymalna_g * babymetal_statek__prêdkoœæ_mmno¿nik_aktualny_g * delta_czasu_f );

      if babymetal_statek__rotacja_w³asna_g then
        BabyMetal_Statek__Rotacja_W³asna_GLDummyCube.TurnAngle := BabyMetal_Statek__Rotacja_W³asna_GLDummyCube.TurnAngle + babymetal_statek__rotacja_w³asna_prêdkoœæ_g * delta_czasu_f
      else//if babymetal_statek__rotacja_w³asna_g then
        if Abs( BabyMetal_Statek__Rotacja_W³asna_GLDummyCube.TurnAngle ) > obrót_precyzja_c_l then
          begin

            ztsi := babymetal_statek__rotacja_w³asna_prêdkoœæ_g;

            // Im bli¿ej k¹ta zero tym wolniej siê obraca.
            if   (
                       ( babymetal_statek__rotacja_w³asna_prêdkoœæ_g >= 0 )
                   and ( BabyMetal_Statek__Rotacja_W³asna_GLDummyCube.TurnAngle > -obrót_spowalnianie_k¹t_c_l )
                   and ( BabyMetal_Statek__Rotacja_W³asna_GLDummyCube.TurnAngle < 0 )
                 )
              or (
                       ( babymetal_statek__rotacja_w³asna_prêdkoœæ_g < 0 )
                   and ( BabyMetal_Statek__Rotacja_W³asna_GLDummyCube.TurnAngle < obrót_spowalnianie_k¹t_c_l )
                   and ( BabyMetal_Statek__Rotacja_W³asna_GLDummyCube.TurnAngle > 0 )
                 ) then
              ztsi := ztsi * Abs( BabyMetal_Statek__Rotacja_W³asna_GLDummyCube.TurnAngle ) / obrót_spowalnianie_k¹t_c_l;


            BabyMetal_Statek__Rotacja_W³asna_GLDummyCube.TurnAngle := BabyMetal_Statek__Rotacja_W³asna_GLDummyCube.TurnAngle + ztsi * delta_czasu_f

          end
        else//if Abs( BabyMetal_Statek__Rotacja_W³asna_GLDummyCube.TurnAngle ) > obrót_precyzja_c_l then
          if BabyMetal_Statek__Rotacja_W³asna_GLDummyCube.TurnAngle <> 0 then
            BabyMetal_Statek__Rotacja_W³asna_GLDummyCube.TurnAngle := 0;

    end;
  //---//if BabyMetal_Statek_GLDummyCube.Visible then


  zt_statek := Statek_Gracza__Gracz_Tryb_Zwróæ();

  if zt_statek = nil then
    Exit;


  if Czas_Miêdzy_W_Sekundach( babymetal_statek__widocznoœæ_losowanie__ostatnie__czas_sekundy_g ) > babymetal_statek__widocznoœæ_losowanie__sekundy_i_g then
    begin

      babymetal_statek__rotacja_w³asna_g :=  System.Math.RandomRange( 0, 11 ) < 8;

      ztsi := System.Math.RandomRange( 0, 101 );

      if    ( not BabyMetal_Statek_GLDummyCube.Visible )
        and ( ztsi <= babymetal_statek__prawdopodobieñstwo_pojawienia_siê_g ) then
        begin

          // BabyMetal statek siê pojawia.

          babymetal_statek__prêdkoœæ_mmno¿nik_aktualny_g := 0.5;

          BabyMetal_Statek_GLDummyCube.Position.X := zt_statek.AbsolutePosition.X;
          BabyMetal_Statek_GLDummyCube.Position.Z := zt_statek.AbsolutePosition.Z;

          BabyMetal_Statek_GLDummyCube.Direction.X := zt_statek.AbsoluteDirection.X;
          BabyMetal_Statek_GLDummyCube.Direction.Z := zt_statek.AbsoluteDirection.Z;

          BabyMetal_Statek_GLDummyCube.Visible := true;

        end
      else//if    ( not BabyMetal_Statek_GLDummyCube.Visible ) (...)
        if    ( BabyMetal_Statek_GLDummyCube.Visible )
          and ( ztsi > babymetal_statek__prawdopodobieñstwo_pojawienia_siê_g ) then
          BabyMetal_Statek_GLDummyCube.Visible := false; // BabyMetal statek znika.


      if    ( DŸwiêk__Aktywnoœæ_CheckBox.Checked )
        and ( GLSMOpenAL1.Active )
        and ( ActiveSoundManager() <> nil ) then
        if DŸwiêki__BabyMetal_Statek_GLDummyCube.Behaviours.IndexOfClass( TGLBSoundEmitter ) > -1 then // -1 - brak, >= 0 zachowania.
          TGLBSoundEmitter(DŸwiêki__BabyMetal_Statek_GLDummyCube.Behaviours.Items[ 0 ]).Playing := BabyMetal_Statek_GLDummyCube.Visible;


      babymetal_statek__widocznoœæ_losowanie__ostatnie__czas_sekundy_g := Czas_Teraz_W_Sekundach();

    end;
  //---//if Czas_Miêdzy_W_Sekundach( babymetal_statek__widocznoœæ_losowanie__ostatnie__czas_sekundy_g ) > babymetal_statek__widocznoœæ_losowanie__sekundy_i_g then



  if not BabyMetal_Statek_GLDummyCube.Visible then
    Exit;


  // Je¿eli BabyMetal statek jest blisko któregoœ ze statków gracza to leci wolniej (odleg³oœæ w poziomie).
  if   (
             ( statek_gracza <> nil )
         //and ( BabyMetal_Statek_GLDummyCube.DistanceTo( statek_gracza ) <= statek_gracza.z_prymityw_odleg³oœæ * 3 )
         //and ( DŸwiêki__BabyMetal_Statek_GLDummyCube.DistanceTo( statek_gracza ) <= statek_gracza.z_prymityw_odleg³oœæ * 3 )
         and (   GLS.VectorGeometry.VectorDistance(  GLS.VectorGeometry.VectorMake( BabyMetal_Statek_GLDummyCube.AbsolutePosition.X, 0, BabyMetal_Statek_GLDummyCube.AbsolutePosition.Z ), GLS.VectorGeometry.VectorMake( statek_gracza.AbsolutePosition.X, 0, statek_gracza.AbsolutePosition.Z )  ) <= statek_gracza.z_prymityw_odleg³oœæ * 3   )
       )
    or (
             ( samolot__statek_gracza <> nil )
         //and ( BabyMetal_Statek_GLDummyCube.DistanceTo( samolot__statek_gracza ) <= samolot__statek_gracza.z_prymityw_odleg³oœæ * 3 )
         //and ( DŸwiêki__BabyMetal_Statek_GLDummyCube.DistanceTo( samolot__statek_gracza ) <= samolot__statek_gracza.z_prymityw_odleg³oœæ * 3 )
         and (   GLS.VectorGeometry.VectorDistance(  GLS.VectorGeometry.VectorMake( BabyMetal_Statek_GLDummyCube.AbsolutePosition.X, 0, BabyMetal_Statek_GLDummyCube.AbsolutePosition.Z ), GLS.VectorGeometry.VectorMake( samolot__statek_gracza.AbsolutePosition.X, 0, samolot__statek_gracza.AbsolutePosition.Z )  ) <= samolot__statek_gracza.z_prymityw_odleg³oœæ * 3   )
       ) then
    begin

      if babymetal_statek__prêdkoœæ_mmno¿nik_aktualny_g <> 0.5 then
        babymetal_statek__prêdkoœæ_mmno¿nik_aktualny_g := 0.5;

    end
  else//if   ( (...)
    if babymetal_statek__prêdkoœæ_mmno¿nik_aktualny_g <> 1 then
      babymetal_statek__prêdkoœæ_mmno¿nik_aktualny_g := 1;


  if BabyMetal_Statek_GLDummyCube.DistanceTo( zt_statek ) > babymetal_statek__odleg³oœæ_maksymalna_g then
    begin

      //BabyMetal_Statek_GLDummyCube.Direction.SetVector
      //  (   // Cel                 Obiekt celuj¹cy
      //      zt_statek.AbsolutePosition.X - BabyMetal_Statek_GLDummyCube.AbsolutePosition.X
      //    , 0
      //    , zt_statek.AbsolutePosition.Z - BabyMetal_Statek_GLDummyCube.AbsolutePosition.Z
      //  );


      zt_vector := BabyMetal_Statek_GLDummyCube.AbsolutePosition;
      zt_vector.Y := 0;

      // Przesuniêcie punktu w stronê dziobu statku BabyMetal.
      GLS.VectorGeometry.AddVector
        (
          zt_vector,
          GLS.VectorGeometry.VectorMake
            (
              BabyMetal_Statek_GLDummyCube.AbsoluteDirection.X,
              0,
              BabyMetal_Statek_GLDummyCube.AbsoluteDirection.Z
            )
        );

      k¹t := // K¹t w poziomie miêdzy pozycj¹ statku i pozycj¹ torpedy. Wartoœæ jest zawsze dodatnia, bez znaczenia, jak i nie okreœla, w któr¹ stronê s¹ obrócone obiekty.
        RadToDeg // uses System.Math.
          (
            GLS.VectorGeometry.AngleBetweenVectors
              (
                GLS.VectorGeometry.VectorMake( zt_statek.AbsolutePosition.X, 0, zt_statek.AbsolutePosition.Z ),
                zt_vector,
                GLS.VectorGeometry.VectorMake( BabyMetal_Statek_GLDummyCube.AbsolutePosition.X, 0, BabyMetal_Statek_GLDummyCube.AbsolutePosition.Z )
              )
          );


      if System.Math.IsNan( k¹t ) then
        Exit;


      if k¹t > obrót_precyzja_c_l then
        begin

          //ztsi := BabyMetal_Statek_GLDummyCube.AbsoluteToLocal( zt_statek.AbsolutePosition ).X;
          //
          //if ztsi < 0 then // Je¿eli cel jest na prawo od statku BabyMetal.
          //  ztsi := -3
          //else//if ztsi < 0 then
          //  ztsi := 3;

          ztsi := babymetal_statek__skrêt_prêdkoœæ_g;


          if BabyMetal_Statek_GLDummyCube.AbsoluteToLocal( zt_statek.AbsolutePosition ).X < 0 then // Je¿eli cel jest na prawo od statku BabyMetal.
            ztsi := -ztsi;

          if System.Math.IsNan( ztsi ) then
            Exit;

          // Im bli¿ej 'zadanego' k¹ta tym wolniej skrêca.
          if k¹t < obrót_spowalnianie_k¹t_c_l then
            ztsi := ztsi * k¹t / obrót_spowalnianie_k¹t_c_l;

          BabyMetal_Statek_GLDummyCube.TurnAngle := BabyMetal_Statek_GLDummyCube.TurnAngle + ztsi * delta_czasu_f;

        end;
      //---//if k¹t > obrót_precyzja_c_l then

    end;
  //---//if BabyMetal_Statek_GLDummyCube.DistanceTo( zt_statek ) > babymetal_statek__odleg³oœæ_maksymalna_g then

end;//---//Funkcja BabyMetal_Statek__Ruch().

//Funkcja Celownicza_Kula_Zmieñ_Pozycjê().
procedure TStatki_Form.Celownicza_Kula_Zmieñ_Pozycjê();
var
  mysz_pozycja_point : TPoint;
  zt_statek : TStatek;
begin

  zt_statek := Statek_Gracza__Gracz_Tryb_Zwróæ();

  //if zt_statek = nil then
  //  Exit;


  if not Gra_GLUserInterface.MouseLookActive then
    begin

      // Pozycja wed³ug kursora myszy.

      mysz_pozycja_point := Mouse.CursorPos;
      mysz_pozycja_point := ScreenToClient( mysz_pozycja_point );

    end
  else//if not Gra_GLUserInterface.MouseLookActive then
    begin

      // Pozycja wed³ug œrodka Gra_GLSceneViewer.

      mysz_pozycja_point.X := Gra_GLSceneViewer.Left + Round( Gra_GLSceneViewer.Width * 0.5 );
      mysz_pozycja_point.Y := Gra_GLSceneViewer.Top + Round( Gra_GLSceneViewer.Height * 0.5 );

    end;
  //---//if not Gra_GLUserInterface.MouseLookActive then


  if zt_statek <> nil then
    begin

      zt_statek.cel_wspó³rzêdne_bezwzglêdne_affine_vektor := Gra_GLSceneViewer.Buffer.PixelRayToWorld( mysz_pozycja_point.X, mysz_pozycja_point.Y );

      Celowniczy_GLDummyCube.Position.AsAffineVector := zt_statek.cel_wspó³rzêdne_bezwzglêdne_affine_vektor;

      zt_statek.Cel_Wspó³rzêdne_Ustaw( zt_statek.cel_wspó³rzêdne_bezwzglêdne_affine_vektor, czy_klient_g );

    end
  else//if zt_statek <> nil then
    if Projektowy_Tryb__Wspó³rzêdne_Sceny_Wyœwietlaj_CheckBox.Checked then
      Celowniczy_GLDummyCube.Position.AsAffineVector := Gra_GLSceneViewer.Buffer.PixelRayToWorld( mysz_pozycja_point.X, mysz_pozycja_point.Y );


  // Celownik na ekranie.
  if Celownik_Ekranowy__Dó³_GLHUDSprite.Visible then
    begin

      Celownik_Ekranowy__Dó³_GLHUDSprite.Position.X := Gra_GLSceneViewer.Width * 0.5;
      Celownik_Ekranowy__Dó³_GLHUDSprite.Position.Y := Gra_GLSceneViewer.Height * 0.5;

      Celownik_Ekranowy__Góra_GLHUDSprite.Position := Celownik_Ekranowy__Dó³_GLHUDSprite.Position;
      Celownik_Ekranowy__Lewo_GLHUDSprite.Position := Celownik_Ekranowy__Dó³_GLHUDSprite.Position;
      Celownik_Ekranowy__Prawo_GLHUDSprite.Position := Celownik_Ekranowy__Dó³_GLHUDSprite.Position;

      Celownik_Ekranowy__Dó³_GLHUDSprite.Position.Y := Celownik_Ekranowy__Dó³_GLHUDSprite.Position.Y + Celownik_Ekranowy__Lewo_GLHUDSprite.Height * 0.5 + Celownik_Ekranowy__Dó³_GLHUDSprite.Height * 0.5;
      Celownik_Ekranowy__Góra_GLHUDSprite.Position.Y := Celownik_Ekranowy__Góra_GLHUDSprite.Position.Y - Celownik_Ekranowy__Lewo_GLHUDSprite.Height * 0.5 - Celownik_Ekranowy__Dó³_GLHUDSprite.Height * 0.5;

      Celownik_Ekranowy__Lewo_GLHUDSprite.Position.X := Celownik_Ekranowy__Lewo_GLHUDSprite.Position.X - Celownik_Ekranowy__Dó³_GLHUDSprite.Width * 0.5 - Celownik_Ekranowy__Lewo_GLHUDSprite.Width * 0.5;
      Celownik_Ekranowy__Prawo_GLHUDSprite.Position.X := Celownik_Ekranowy__Prawo_GLHUDSprite.Position.X + Celownik_Ekranowy__Dó³_GLHUDSprite.Width * 0.5 + Celownik_Ekranowy__Lewo_GLHUDSprite.Width * 0.5;

    end;
  //---//if Celownik_Ekranowy__Dó³_GLHUDSprite.Visible then
  //---// Celownik na ekranie.

end;//---//Funkcja Celownicza_Kula_Zmieñ_Pozycjê().

//Funkcja Chmury__Utwórz().
procedure TStatki_Form.Chmury__Utwórz();
var
  i : integer;
begin

  //
  // Funkcja tworzy chmury.
  //

  for i := 1 to chmury__iloœæ_g do
    with TGLDummyCube.Create( Chmury_GLDummyCube ) do
      begin

        Parent := Chmury_GLDummyCube;
        Pickable := false;
        //VisibleAtRunTime := true;

        with GLS.ParticleFX.GetOrCreateSourcePFX( Chmury_GLDummyCube.Children[ Chmury_GLDummyCube.Count - 1 ] ) do
          begin

            Manager := Efekt__Chmury_GLPerlinPFXManager;
            ParticleInterval := 0.25;
            EffectScale := 50;

          end;
        //---//with GLS.ParticleFX.GetOrCreateSourcePFX( Chmury_GLDummyCube.Children[ Chmury_GLDummyCube.Count - 1 ] ) do

      end;
    //---//with TGLDummyCube.Create( Chmury_GLDummyCube ) do


  Chmury__Pozycje_Wylicz( true );

end;//---//Funkcja Chmury__Utwórz().

//Funkcja Chmury__Pozycje_Wylicz().
procedure TStatki_Form.Chmury__Pozycje_Wylicz( const przelicz_wszystkie_f : boolean = false );
var
  i : integer;
begin

  //
  // Funkcja zmienia pozycje chmur.
  //
  // Parametry:
  //   przelicz_wszystkie_f:
  //     false - sprawdza opóŸnienie przeliczania.
  //     true - nie sprawdza opóŸnienia przeliczania.
  //

  if    ( not przelicz_wszystkie_f )
    and (  Czas_Miêdzy_W_Sekundach( chmury__pozycje__czas_przeliczenia_ostatniego_sekundy_i_g ) < chmury__pozycje__przeliczenie_sekundy_g  ) then
    Exit;


  for i := 0 to Chmury_GLDummyCube.Count - 1 do
    if   ( przelicz_wszystkie_f )
      or (  Random( 11 ) >= 5  ) then
      begin

        Chmury_GLDummyCube.Children[ i ].Position.X := RandomRange( -chmury__rozpiêtoœæ_w__poziomie_g, chmury__rozpiêtoœæ_w__poziomie_g + 1 );
        Chmury_GLDummyCube.Children[ i ].Position.Y := RandomRange( -chmury__rozpiêtoœæ_w__pionie_g, chmury__rozpiêtoœæ_w__pionie_g + 1 );
        Chmury_GLDummyCube.Children[ i ].Position.Z := RandomRange( -chmury__rozpiêtoœæ_w__poziomie_g, chmury__rozpiêtoœæ_w__poziomie_g + 1 );

      end;
    //---//if   ( przelicz_wszystkie_f ) (...)


  chmury__pozycje__czas_przeliczenia_ostatniego_sekundy_i_g := Czas_Teraz_W_Sekundach();

end;//---//Funkcja Chmury__Pozycje_Wylicz().

//Funkcja Chmury__Ruch().
procedure TStatki_Form.Chmury__Ruch( const delta_czasu_f : double );
var
  i : integer;
begin

  //
  // Funkcja przesuwa chmury.
  //

  for i := 0 to Chmury_GLDummyCube.Count - 1 do
    begin

      Chmury_GLDummyCube.Children[ i ].Position.X := Chmury_GLDummyCube.Children[ i ].Position.X - wiatr_vector_g.X * wiatr_vector_g.W * delta_czasu_f;
      Chmury_GLDummyCube.Children[ i ].Position.Y := Chmury_GLDummyCube.Children[ i ].Position.Y + wiatr_vector_g.Y * wiatr_vector_g.W * 0.1 * delta_czasu_f;
      Chmury_GLDummyCube.Children[ i ].Position.Z := Chmury_GLDummyCube.Children[ i ].Position.Z - wiatr_vector_g.Z * wiatr_vector_g.W * delta_czasu_f;

    end;
  //---//for i := 0 to Chmury_GLDummyCube.Count - 1 do

end;//---//Funkcja Chmury__Ruch().

//Funkcja Chmury__Zwolnij().
procedure TStatki_Form.Chmury__Zwolnij();
var
  i : integer;
begin

  //
  // Funkcja zwalnia wszystkie chmury.
  //

  for i := Chmury_GLDummyCube.Count - 1 downto 0 do
    begin

      Chmury_GLDummyCube.Children[ i ].Free();

    end;
  //---//for i := Chmury_GLDummyCube.Count - 1 downto 0 do

end;//---//Funkcja Chmury__Zwolnij().

//Funkcja DŸwiêk__Losowe_Uruchamianie().
procedure TStatki_Form.DŸwiêk__Losowe_Uruchamianie();
var
  ztb : boolean;
  i,
  j,
  k
    : integer;
begin

  //
  // Funkcja w³¹cza z opóŸnieniem odtwarzanie dŸwiêków.
  //

  if   (
             ( dŸwiêki__losowe_uruchomione__wszystkie__l¹d_g )
         and ( dŸwiêki__losowe_uruchomione__wszystkie__statki_g )
       )
    or ( not DŸwiêk__Aktywnoœæ_CheckBox.Checked )
    or ( not GLSMOpenAL1.Active )
    or ( ActiveSoundManager() = nil )
    or (  Czas_Miêdzy_W_Milisekundach( dŸwiêki__losowe_uruchomione__czas_przeliczenia_ostatniego_milisekundy_i_g, true ) < dŸwiêki__losowe_uruchomione__przeliczenie_milisekundy_c + dŸwiêki__losowe_uruchomione__milisekundy__modyfikator_losowy_i_g  ) then
    Exit;


  if not dŸwiêki__losowe_uruchomione__wszystkie__l¹d_g then
    begin

      ztb := false; // Sprawdza czy jakiœ dŸwiêk zosta³ w³¹czony lub oczekuje na w³¹czenie.

      if    ( l¹d_list <> nil )
        and (  Assigned( l¹d_list )  ) then
        for i := 0 to l¹d_list.Count - 1 do
          if Wyglad_Elementy.Obiekt_Rodzaj( l¹d_list[ i ] ) = Wyglad_Elementy.or_DŸwiêk_Emiter then
            if Wyglad_Elementy.DŸwiêki__OpóŸnienie_Losowe( l¹d_list[ i ] ) > 0 then
              begin

                ztb := true;

                Wyglad_Elementy.DŸwiêki__OpóŸnienie_Losowe(  l¹d_list[ i ], Wyglad_Elementy.DŸwiêki__OpóŸnienie_Losowe( l¹d_list[ i ] ) - 1  );

              end
            else//if Wyglad_Elementy.DŸwiêki__OpóŸnienie_Losowe( l¹d_list[ i ] ) > 0 then
              for k := 0 to TGLCustomSceneObject(l¹d_list[ i ]).Behaviours.Count - 1 do
                if    ( TGLCustomSceneObject(l¹d_list[ i ]).Behaviours.Items[ k ] is TGLBSoundEmitter )
                  and ( not TGLBSoundEmitter(TGLCustomSceneObject(l¹d_list[ i ]).Behaviours.Items[ k ]).Playing ) then
                  begin

                    ztb := true;

                    TGLBSoundEmitter(TGLCustomSceneObject(l¹d_list[ i ]).Behaviours.Items[ k ]).Playing := true;


                    if dŸwiêk_emiter__wyœwietlanie_poziom_g >= 1 then
                      TGLCustomSceneObject(l¹d_list[ i ]).ShowAxes := true;

                  end;
                //---//if    ( TGLCustomSceneObject(l¹d_list[ i ]).Behaviours.Items[ k ] is TGLBSoundEmitter ) (...)

      if not ztb then
        dŸwiêki__losowe_uruchomione__wszystkie__l¹d_g := true;

    end;
  //---//if not dŸwiêki__losowe_uruchomione__wszystkie__l¹d_g then


  if not dŸwiêki__losowe_uruchomione__wszystkie__statki_g then
    begin

      ztb := false; // Sprawdza czy jakiœ dŸwiêk zosta³ w³¹czony lub oczekuje na w³¹czenie.

      for i := 0 to Length( statki_t ) - 1 do
        if    ( statki_t[ i ] <> nil )
          and ( statki_t[ i ].wygl¹d_elementy_list <> nil )
          and (  Assigned( statki_t[ i ].wygl¹d_elementy_list )  ) then
          for j := 0 to statki_t[ i ].wygl¹d_elementy_list.Count - 1 do
            if Wyglad_Elementy.Obiekt_Rodzaj( statki_t[ i ].wygl¹d_elementy_list[ j ] ) = Wyglad_Elementy.or_DŸwiêk_Emiter then
              if Wyglad_Elementy.DŸwiêki__OpóŸnienie_Losowe( statki_t[ i ].wygl¹d_elementy_list[ j ] ) > 0 then
                begin

                  ztb := true;

                  Wyglad_Elementy.DŸwiêki__OpóŸnienie_Losowe(  statki_t[ i ].wygl¹d_elementy_list[ j ], Wyglad_Elementy.DŸwiêki__OpóŸnienie_Losowe( statki_t[ i ].wygl¹d_elementy_list[ j ] ) - 1  );

                end
              else//if Wyglad_Elementy.DŸwiêki__OpóŸnienie_Losowe( statki_t[ i ].wygl¹d_elementy_list[ j ] ) > 0 then
                for k := 0 to TGLCustomSceneObject(statki_t[ i ].wygl¹d_elementy_list[ j ]).Behaviours.Count - 1 do
                  if    ( TGLCustomSceneObject(statki_t[ i ].wygl¹d_elementy_list[ j ]).Behaviours.Items[ k ] is TGLBSoundEmitter )
                    and ( not TGLBSoundEmitter(TGLCustomSceneObject(statki_t[ i ].wygl¹d_elementy_list[ j ]).Behaviours.Items[ k ]).Playing ) then
                    begin

                      ztb := true;

                      TGLBSoundEmitter(TGLCustomSceneObject(statki_t[ i ].wygl¹d_elementy_list[ j ]).Behaviours.Items[ k ]).Playing := true;


                      if dŸwiêk_emiter__wyœwietlanie_poziom_g >= 1 then
                        TGLCustomSceneObject(statki_t[ i ].wygl¹d_elementy_list[ j ]).ShowAxes := true;

                    end;
                  //---//if    ( TGLCustomSceneObject(statki_t[ i ].wygl¹d_elementy_list[ j ]).Behaviours.Items[ k ] is TGLBSoundEmitter ) (...)

      if not ztb then
        dŸwiêki__losowe_uruchomione__wszystkie__statki_g := true;

    end;
  //---//if not dŸwiêki__losowe_uruchomione__wszystkie__statki_g then


  dŸwiêki__losowe_uruchomione__milisekundy__modyfikator_losowy_i_g := Random( dŸwiêki__losowe_uruchomione__przeliczenie_milisekundy_c );
  dŸwiêki__losowe_uruchomione__czas_przeliczenia_ostatniego_milisekundy_i_g := Czas_Teraz_W_Milisekundach();

end;//---//Funkcja DŸwiêk__Losowe_Uruchamianie().

//Funkcja DŸwiêk__Plik_Dodaj_Do_Biblioteki().
procedure TStatki_Form.DŸwiêk__Plik_Dodaj_Do_Biblioteki( const plik_nazwa_f : string; dŸwiêk_nazwa_f : string = '' );
var
  zts : string;
  zt_gl_sound_library : TGLSoundLibrary;
begin

  // dŸwiêk_nazwa_f - je¿eli jest niepuste to dodaje dŸwiêki komunikatów.

  zts := ExtractFilePath( Application.ExeName ) + katalog__dŸwiêki_c + '\';

  if FileExists( zts + plik_nazwa_f ) then
    begin

      if Trim( dŸwiêk_nazwa_f ) = '' then
        begin

          // Dodaje dŸwiêki.

          zt_gl_sound_library := Gra_GLSoundLibrary;
          dŸwiêk_nazwa_f := plik_nazwa_f;


          {$region 'DŸwiêki.'}
          if Pos( dŸwiêki___amunicja__lot_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__amunicja__lot_g );

            end
          else//if Pos( dŸwiêki___amunicja__lot_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___amunicja__lot__du¿e_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__amunicja__lot__du¿e_g );

            end
          else//if Pos( dŸwiêki___amunicja_lot__du¿e_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___amunicja__p³yniêcie_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__amunicja__p³yniêcie_g );

            end
          else//if Pos( dŸwiêki___amunicja__p³yniêcie_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___kotwica__statek_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__kotwica__statek_g );

            end
          else//if Pos( dŸwiêki___kotwica__statek_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___kotwica__stop_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__kotwica__stop_g );

            end
          else//if Pos( dŸwiêki___kotwica__stop_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___kotwica__w_dó³_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__kotwica__w_dó³_g );

            end
          else//if Pos( dŸwiêki___kotwica__w_dó³_c, dŸwiêki___kotwica__w_dó³_c ) = 1 then
          if Pos( dŸwiêki___kotwica__w_górê_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__kotwica__w_górê_g );

            end
          else//if Pos( dŸwiêki___kotwica__w_górê_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___lufa_za³adowanie_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__lufa_za³adowanie_g );

            end
          else//if Pos( dŸwiêki___lufa_za³adowanie_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___lufa_za³adowanie__du¿e_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__lufa_za³adowanie__du¿e_g );

            end
          else//if Pos( dŸwiêki___lufa_za³adowanie__du¿e_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___silnik__25_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__silnik__25_g );

            end
          else//if Pos( dŸwiêki___silnik__25_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___silnik__50_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__silnik__50_g );

            end
          else//if Pos( dŸwiêki___silnik__50_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___silnik__75_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__silnik__75_g );

            end
          else//if Pos( dŸwiêki___silnik__75_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___silnik__100_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__silnik__100_g );

            end
          else//if Pos( dŸwiêki___silnik__100_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___sos_lot_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__sos_lot_g );

            end
          else//if Pos( dŸwiêki___sos_lot_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___sos_rozb³ysk_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__sos_rozb³ysk_g );

            end
          else//if Pos( dŸwiêki___sos_rozb³ysk_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___syrena_okrêtowa_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__syrena_okrêtowa_g );

            end
          else//if Pos( dŸwiêki___syrena_okrêtowa_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___trafienie_l¹d_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__trafienie_l¹d_g );

            end
          else//if Pos( dŸwiêki___trafienie_l¹d_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___trafienie_l¹d__du¿e_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__trafienie_l¹d__du¿e_g );

            end
          else//if Pos( dŸwiêki___trafienie_l¹d__du¿e_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___trafienie_statek_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__trafienie_statek_g );

            end
          else//if Pos( dŸwiêki___trafienie_statek_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___trafienie_statek__du¿e_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__trafienie_statek__du¿e_g );

            end
          else//if Pos( dŸwiêki___trafienie_statek__du¿e_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___trafienie_woda_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__trafienie_woda_g );

            end
          else//if Pos( dŸwiêki___trafienie_woda_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___trafienie_woda__du¿e_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__trafienie_woda__du¿e_g );

            end
          else//if Pos( dŸwiêki___trafienie_woda__du¿e_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___wiatr_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__wiatr_g );

            end
          else//if Pos( dŸwiêki___wiatr_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___wystrza³_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__wystrza³_g );

            end
          else//if Pos( dŸwiêki___wystrza³_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___wystrza³__du¿e_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__wystrza³__du¿e_g );

            end
          else//if Pos( dŸwiêki___wystrza³__du¿e_c, plik_nazwa_f ) = 1 then
          if Pos( dŸwiêki___zatopienie_statek_c, plik_nazwa_f ) = 1 then
            begin

              inc( dŸwiêki__iloœæ__zatopienie_statek_g );

            end
          else//if Pos( dŸwiêki___zatopienie_statek_c, plik_nazwa_f ) = 1 then
          if    (  Pos( dŸwiêki__babymetal_statek_c, plik_nazwa_f ) <= 0  )
            and (  Pos( dŸwiêki__morze_falowanie_c, plik_nazwa_f ) <= 0  ) then
            Exit; // Nieobs³ugiwanych dŸwiêków nie wczytuje.
          {$endregion 'DŸwiêki.'}

        end
      else//if Trim( dŸwiêk_nazwa_f ) = '' then
        zt_gl_sound_library := Gra_Komunikaty_GLSoundLibrary; // Dodaje komunikaty.


      if zt_gl_sound_library.Samples.GetByName( plik_nazwa_f ) = nil then
        try
          zt_gl_sound_library.Samples.AddFile // uses GLS.FileWAV.
            (
              zts + plik_nazwa_f,
              dŸwiêk_nazwa_f
            );
        except
          on E : Exception do
            Log_Wypisz(  t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_wczytaæ_pliku_dŸwiêku + ' ' + E.Message + ' ' + IntToStr( E.HelpContext ) + '.'  );
        end;
        //---//try

    end
  else//if FileExists( zts + plik_nazwa_f ) then
    Log_Wypisz( t³umaczenie_komunikaty_r.komunikat__nie_odnaleziono_pliku + ': ' + zts + plik_nazwa_f + '.', false );

end;//---//Funkcja DŸwiêk__Plik_Dodaj_Do_Biblioteki().

//Funkcja DŸwiêki__Efekt__Utwórz_Jeden().
procedure TStatki_Form.DŸwiêki__Efekt__Utwórz_Jeden( const dŸwiêk_efekt_rodzaj_f : TDŸwiêk_Efekt_Rodzaj; const pozycja_f : GLS.VectorTypes.TVector4f );
begin

  DŸwiêki__Efekt__Utwórz_Jeden( dŸwiêk_efekt_rodzaj_f, pozycja_f.X, pozycja_f.Y, pozycja_f.Z );

end;//---//Funkcja DŸwiêki__Efekt__Utwórz_Jeden().

//Funkcja DŸwiêki__Efekt__Utwórz_Jeden().
procedure TStatki_Form.DŸwiêki__Efekt__Utwórz_Jeden( const dŸwiêk_efekt_rodzaj_f : TDŸwiêk_Efekt_Rodzaj; const pozycja_f : GLS.VectorGeometry.TAffineVector );
begin

  DŸwiêki__Efekt__Utwórz_Jeden( dŸwiêk_efekt_rodzaj_f, pozycja_f.X, pozycja_f.Y, pozycja_f.Z );

end;//---//Funkcja DŸwiêki__Efekt__Utwórz_Jeden().

//Funkcja DŸwiêki__Efekt__Utwórz_Jeden().
procedure TStatki_Form.DŸwiêki__Efekt__Utwórz_Jeden( const dŸwiêk_efekt_rodzaj_f : TDŸwiêk_Efekt_Rodzaj; const x_f, y_f, z_f : real );
begin

  DŸwiêki__Efekt__Utwórz_Jeden( nil, dŸwiêk_efekt_rodzaj_f, er_Brak, x_f, y_f, z_f, nil );

end;//---//Funkcja DŸwiêki__Efekt__Utwórz_Jeden().

//Funkcja DŸwiêki__Efekt__Utwórz_Jeden().
procedure TStatki_Form.DŸwiêki__Efekt__Utwórz_Jeden( AOwner : TGLBaseSceneObject; const dŸwiêk_efekt_rodzaj_f : TDŸwiêk_Efekt_Rodzaj; const x_f, y_f, z_f : real );
begin

  DŸwiêki__Efekt__Utwórz_Jeden( AOwner, dŸwiêk_efekt_rodzaj_f, er_Brak, x_f, y_f, z_f, nil );

end;//---//Funkcja DŸwiêki__Efekt__Utwórz_Jeden().

//Funkcja DŸwiêki__Efekt__Utwórz_Jeden().
procedure TStatki_Form.DŸwiêki__Efekt__Utwórz_Jeden( AOwner : TGLBaseSceneObject; const efekt_rodzaj_f : TEfekt_Rodzaj; const x_f, y_f, z_f : real; amunicja_f : TAmunicja );
begin

  DŸwiêki__Efekt__Utwórz_Jeden( AOwner, der_Brak, efekt_rodzaj_f, x_f, y_f, z_f, amunicja_f );

end;//---//Funkcja DŸwiêki__Efekt__Utwórz_Jeden().

//Funkcja DŸwiêki__Efekt__Utwórz_Jeden().
procedure TStatki_Form.DŸwiêki__Efekt__Utwórz_Jeden( AOwner : TGLBaseSceneObject; const dŸwiêk_efekt_rodzaj_f : TDŸwiêk_Efekt_Rodzaj; const efekt_rodzaj_f : TEfekt_Rodzaj; const x_f, y_f, z_f : real; amunicja_f : TAmunicja );

  //Funkcja Czy_Du¿e() w DŸwiêki__Efekt__Utwórz_Jeden().
  function Czy_Du¿e( const amunicja_f_f : TAmunicja ) : boolean;
  begin

    if    ( amunicja_f <> nil )
      and ( amunicja_f.amunicja_rodzaj in [ ar_Artyleria, ar_Bomba_G³êbinowa, ar_Torpeda ] ) then
      Result := true
    else//if    ( amunicja_f <> nil ) (...)
      Result := false;

  end;//---//Funkcja Czy_Du¿e() w DŸwiêki__Efekt__Utwórz_Jeden().

  //Funkcja DŸwiêk_Numer_Losuj() w DŸwiêki__Efekt__Utwórz_Jeden().
  function DŸwiêk_Numer_Losuj( const dŸwiêki__iloœæ_f : integer ) : string;
  begin

    Result := Trim(   FormatFloat(  '00', Random( dŸwiêki__iloœæ_f ) + 1  )   );

  end;//---//Funkcja DŸwiêk_Numer_Losuj() w DŸwiêki__Efekt__Utwórz_Jeden().

var
  i : integer;
  zts : string;
  zt_GLDummyCube : TGLDummyCube;
  wieloosobowe__efekt_r_l : TObiekty_Wieloosobowe__Efekt_r;
begin//Funkcja DŸwiêki__Efekt__Utwórz_Jeden().

  //
  // Funkcja tworzy efekt dŸwiêkowy.
  //
  // Parametry:
  //   AOwner:
  //     = nil - tworzy oddzielny obiekt i dodaje go na listê efektów dŸwiêkowych.
  //     <> nil - dodaje efekt dŸwiêkowy do wskazanego obiektu (AOwner).
  //

  if   ( not DŸwiêk__Aktywnoœæ_CheckBox.Checked )
    or ( not GLSMOpenAL1.Active )
    or ( ActiveSoundManager() = nil )
    or ( dŸwiêki_efekt_list = nil )
    or (  not Assigned( dŸwiêki_efekt_list )  ) then
    Exit;


  if AOwner = nil then
    begin

      zt_GLDummyCube := TGLDummyCube.Create( Gra_Obiekty_GLDummyCube );
      zt_GLDummyCube.Parent := Gra_Obiekty_GLDummyCube;
      zt_GLDummyCube.Pickable := false;
      //zt_GLDummyCube.VisibleAtRunTime := true;
      //zt_GLDummyCube.ShowAxes := true;

      if    ( not czy_klient_g )
        and ( efekt_rodzaj_f in [ er_Trafienie_Statek, er_Trafienie_Statek_Zatopienie ] )
        and ( amunicja_f <> nil ) then
        zt_GLDummyCube.Position.AsVector := amunicja_f.AbsolutePosition
      else//if    ( efekt_rodzaj_f in [ er_Trafienie_Statek, er_Trafienie_Statek_Zatopienie ] ) (...)
        zt_GLDummyCube.Position.SetPoint( x_f, y_f, z_f );

    end
  else//if AOwner = nil then
    zt_GLDummyCube := TGLDummyCube(AOwner);


  zts := '';
  wieloosobowe__efekt_r_l.id_statek_ef__owo := -1;
  wieloosobowe__efekt_r_l.dŸwiêk_efekt_rodzaj_owo := der_Brak;


  if efekt_rodzaj_f = er_SOS then
    begin

      zts := dŸwiêki___sos_lot_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__sos_lot_g ) + dŸwiêki__rozszerzenie_c;
      //zt_GLDummyCube.EdgeColor.Color := GLS.Color.clrWhite;

    end
  else//if efekt_rodzaj_f = er_SOS then
  //if efekt_rodzaj_f = er_Trafienie_L¹d__Bez_Obra¿eñ then
  //  begin
  //
  //    //zt_GLDummyCube.EdgeColor.Color := GLS.Color.clrGreen;
  //
  //  end
  //else//if efekt_rodzaj_f = er_Trafienie_L¹d__Bez_Obra¿eñ then
  //if efekt_rodzaj_f = er_Trafienie_L¹d__Obra¿enia then
  //  begin
  //
  //    //zt_GLDummyCube.EdgeColor.Color := GLS.Color.clrOrange;
  //
  //  end
  //else//if efekt_rodzaj_f = er_Trafienie_L¹d__Obra¿enia then
  if efekt_rodzaj_f in [ er_Trafienie_L¹d__Bez_Obra¿eñ, er_Trafienie_L¹d__Obra¿enia ] then
    begin

      if Czy_Du¿e( amunicja_f ) then
        zts := dŸwiêki___trafienie_l¹d__du¿e_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__trafienie_l¹d__du¿e_g ) + dŸwiêki__rozszerzenie_c
      else//if Czy_Du¿e( amunicja_f ) then
        zts := dŸwiêki___trafienie_l¹d_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__trafienie_l¹d_g ) + dŸwiêki__rozszerzenie_c;

      //zt_GLDummyCube.EdgeColor.Color := GLS.Color.clrGreen;

    end
  else//if efekt_rodzaj_f in [ er_Trafienie_L¹d__Bez_Obra¿eñ, er_Trafienie_L¹d__Obra¿enia ] then
  if efekt_rodzaj_f = er_Trafienie_Statek then
    begin

      if Czy_Du¿e( amunicja_f ) then
        zts := dŸwiêki___trafienie_statek__du¿e_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__trafienie_statek__du¿e_g ) + dŸwiêki__rozszerzenie_c
      else//if Czy_Du¿e( amunicja_f ) then
        zts := dŸwiêki___trafienie_statek_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__trafienie_statek_g ) + dŸwiêki__rozszerzenie_c;

      //zt_GLDummyCube.EdgeColor.Color := GLS.Color.clrRed;

    end
  else//if efekt_rodzaj_f = er_Trafienie_Statek then
  if efekt_rodzaj_f = er_Trafienie_Statek_Zatopienie then
    begin

      zts := dŸwiêki___zatopienie_statek_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__zatopienie_statek_g ) + dŸwiêki__rozszerzenie_c;
      //zt_GLDummyCube.EdgeColor.Color := GLS.Color.clrViolet;
      //zt_GLDummyCube.Scale.Scale( 10 );

    end
  else//if efekt_rodzaj_f = er_Trafienie_Statek_Zatopienie then
  if efekt_rodzaj_f = er_Trafienie_Woda then
    begin

      if Czy_Du¿e( amunicja_f ) then
        zts := dŸwiêki___trafienie_woda__du¿e_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__trafienie_woda__du¿e_g ) + dŸwiêki__rozszerzenie_c
      else//if Czy_Du¿e( amunicja_f ) then
        zts := dŸwiêki___trafienie_woda_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__trafienie_woda_g ) + dŸwiêki__rozszerzenie_c;

      //zt_GLDummyCube.EdgeColor.Color := GLS.Color.clrBlue;

    end
  else//if efekt_rodzaj_f = er_Trafienie_Woda then
  if efekt_rodzaj_f = er_Wystrza³ then
    begin

      if Czy_Du¿e( amunicja_f ) then
        zts := dŸwiêki___wystrza³__du¿e_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__wystrza³__du¿e_g ) + dŸwiêki__rozszerzenie_c
      else//if Czy_Du¿e( amunicja_f ) then
        zts := dŸwiêki___wystrza³_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__wystrza³_g ) + dŸwiêki__rozszerzenie_c;

      //zt_GLDummyCube.EdgeColor.Color := GLS.Color.clrBlack;

    end
  else//if efekt_rodzaj_f = er_Wystrza³ then
    if dŸwiêk_efekt_rodzaj_f = der_Amunicja__Lot then
      begin

        if zt_GLDummyCube is TAmunicja then
          if TAmunicja(zt_GLDummyCube).amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] then
            zts := dŸwiêki___amunicja__p³yniêcie_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__amunicja__p³yniêcie_g ) + dŸwiêki__rozszerzenie_c
          else//if TAmunicja(zt_GLDummyCube).amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] then
            if TAmunicja(zt_GLDummyCube).amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Bomba_G³êbinowa ] then
              zts := dŸwiêki___amunicja__lot__du¿e_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__amunicja__lot__du¿e_g ) + dŸwiêki__rozszerzenie_c
            else//if TAmunicja(zt_GLDummyCube).amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Bomba_G³êbinowa ] then
              zts := dŸwiêki___amunicja__lot_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__amunicja__lot_g ) + dŸwiêki__rozszerzenie_c;

      end
    else//if dŸwiêk_efekt_rodzaj_f = der_Amunicja__Lot then
    if dŸwiêk_efekt_rodzaj_f in [ der_Kotwica__Brak, der_Kotwica__Statek, der_Kotwica__Stop, der_Kotwica__W_Dó³, der_Kotwica__W_Górê ] then // To samo der_Kotwica__Brak.
      begin

        case dŸwiêk_efekt_rodzaj_f of
            der_Kotwica__Statek : zts := dŸwiêki___kotwica__statek_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__kotwica__statek_g ) + dŸwiêki__rozszerzenie_c;
            der_Kotwica__Stop : zts := dŸwiêki___kotwica__stop_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__kotwica__stop_g ) + dŸwiêki__rozszerzenie_c;
            der_Kotwica__W_Dó³ : zts := dŸwiêki___kotwica__w_dó³_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__kotwica__w_dó³_g ) + dŸwiêki__rozszerzenie_c;
            der_Kotwica__W_Górê : zts := dŸwiêki___kotwica__w_górê_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__kotwica__w_górê_g ) + dŸwiêki__rozszerzenie_c;
            else//dŸwiêk_efekt_rodzaj_f
              zts := '';
          end;
        //---//case dŸwiêk_efekt_rodzaj_f


        if czy_serwer_g then
          begin

            if    ( zt_GLDummyCube.Parent <> nil )
              and ( zt_GLDummyCube.Parent is TKotwica )
              and ( TKotwica(zt_GLDummyCube.Parent).statek__ko <> nil ) then
              begin

                wieloosobowe__efekt_r_l.id_statek_ef__owo := TKotwica(zt_GLDummyCube.Parent).statek__ko.id_statek;
                wieloosobowe__efekt_r_l.czas_trwania__owo := TKotwica(zt_GLDummyCube.Parent).id_kotwica; // Aby nie powiêkszaæ rekordu czas_trwania__owo zapamiêta id_kotwica.
                wieloosobowe__efekt_r_l.dŸwiêk_efekt_rodzaj_owo := dŸwiêk_efekt_rodzaj_f;

              end;
            //---//if    ( zt_GLDummyCube.Parent <> nil ) (...)

          end;
        //---//if czy_serwer_g then


        while zt_GLDummyCube.Behaviours.IndexOfClass( TGLBSoundEmitter ) > -1 do // -1 - brak, >= 0 zachowania.
          zt_GLDummyCube.Behaviours.Delete( 0 );

      end
    else//if dŸwiêk_efekt_rodzaj_f in [ der_Kotwica__Brak, der_Kotwica__Statek, der_Kotwica__Stop, der_Kotwica__W_Dó³, der_Kotwica__W_Górê ] then
    if dŸwiêk_efekt_rodzaj_f in [ der_Lufa_Za³adowanie, der_Lufa_Za³adowanie__Du¿e ] then
      begin

        if dŸwiêk_efekt_rodzaj_f = der_Lufa_Za³adowanie__Du¿e then
          zts := dŸwiêki___lufa_za³adowanie__du¿e_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__lufa_za³adowanie__du¿e_g ) + dŸwiêki__rozszerzenie_c
        else//if dŸwiêk_efekt_rodzaj_f = der_Lufa_Za³adowanie__Du¿e then
          zts := dŸwiêki___lufa_za³adowanie_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__lufa_za³adowanie_g ) + dŸwiêki__rozszerzenie_c;

        if czy_serwer_g then
          begin

            wieloosobowe__efekt_r_l.dŸwiêk_efekt_rodzaj_owo := dŸwiêk_efekt_rodzaj_f;
            //wieloosobowe__efekt_r_l.pozycja_ef__owo := zt_GLDummyCube.AbsolutePosition;

          end;
        //---//if czy_serwer_g then

      end
    else//if dŸwiêk_efekt_rodzaj_f in [ der_Lufa_Za³adowanie, der_Lufa_Za³adowanie__Du¿e ] then
    if    ( dŸwiêk_efekt_rodzaj_f = der_Silnik )
      and ( zt_GLDummyCube is TStatek ) then
      begin

        if TStatek(zt_GLDummyCube).punkty_¿ycia_aktualne <= 0 then
          i := 0
        else//if TStatek(zt_GLDummyCube).punkty_¿ycia_aktualne <= 0 then
          i := Round(  Abs( TStatek(zt_GLDummyCube).prêdkoœæ_aktualna_procent__wzglêdny )  );


        if i <> 0 then
          if i <= 25 then
            i := 25
          else
          if i <= 50 then
            i := 50
          else
          if i <= 75 then
            i := 75
          else
            i := 100;


        if TStatek(zt_GLDummyCube).dŸwiêk_silnika_aktualny <> i then
          begin

            TStatek(zt_GLDummyCube).dŸwiêk_silnika_aktualny := i;


            // Usuwa wczeœniej dodane dŸwiêki silnika.
            for i := zt_GLDummyCube.Behaviours.Count - 1 downto 0 do
              if    ( zt_GLDummyCube.Behaviours.Items[ i ] is TGLBSoundEmitter )
                and (
                         (  Pos( dŸwiêki___silnik__25_c, TGLBSoundEmitter(zt_GLDummyCube.Behaviours.Items[ i ]).Source.SoundName ) = 1  )
                      or (  Pos( dŸwiêki___silnik__50_c, TGLBSoundEmitter(zt_GLDummyCube.Behaviours.Items[ i ]).Source.SoundName ) = 1  )
                      or (  Pos( dŸwiêki___silnik__75_c, TGLBSoundEmitter(zt_GLDummyCube.Behaviours.Items[ i ]).Source.SoundName ) = 1  )
                      or (  Pos( dŸwiêki___silnik__100_c, TGLBSoundEmitter(zt_GLDummyCube.Behaviours.Items[ i ]).Source.SoundName ) = 1  )
                    ) then
                zt_GLDummyCube.Behaviours.Delete( i );


            case TStatek(zt_GLDummyCube).dŸwiêk_silnika_aktualny of
                25 : zts := dŸwiêki___silnik__25_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__silnik__25_g ) + dŸwiêki__rozszerzenie_c;
                50 : zts := dŸwiêki___silnik__50_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__silnik__50_g ) + dŸwiêki__rozszerzenie_c;
                75 : zts := dŸwiêki___silnik__75_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__silnik__75_g ) + dŸwiêki__rozszerzenie_c;
                100 : zts := dŸwiêki___silnik__100_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__silnik__100_g ) + dŸwiêki__rozszerzenie_c;
              end;
            //---//case TStatek(zt_GLDummyCube).dŸwiêk_silnika_aktualny of

          end;
        //---//if TStatek(zt_GLDummyCube).dŸwiêk_silnika_aktualny <> i then

      end
    else//if    ( dŸwiêk_efekt_rodzaj_f = der_Silnik ) (...)
    if dŸwiêk_efekt_rodzaj_f = der_SOS_Rozb³ysk then
      zts := dŸwiêki___sos_rozb³ysk_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__sos_rozb³ysk_g ) + dŸwiêki__rozszerzenie_c
    else
    if dŸwiêk_efekt_rodzaj_f = der_Syrena_Okrêtowa then
      begin

        zts := dŸwiêki___syrena_okrêtowa_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__syrena_okrêtowa_g ) + dŸwiêki__rozszerzenie_c;

        if czy_serwer_g then
          wieloosobowe__efekt_r_l.dŸwiêk_efekt_rodzaj_owo := dŸwiêk_efekt_rodzaj_f;

      end
    else//if dŸwiêk_efekt_rodzaj_f = der_Syrena_Okrêtowa then
    if dŸwiêk_efekt_rodzaj_f = der_Wiatr then
      zts := dŸwiêki___wiatr_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__wiatr_g ) + dŸwiêki__rozszerzenie_c;


  if    (  Trim( zts ) <> ''  )
    and (  Gra_GLSoundLibrary.Samples.GetByName( zts ) <> nil  )
    and (  zt_GLDummyCube.Behaviours.IndexOfClass( TGLBSoundEmitter ) <= -1  ) then // -1 - brak, >= 0 zachowania.
    with TGLBSoundEmitter.Create( zt_GLDummyCube.Behaviours ) do
      begin

        Source.SoundLibrary := Gra_GLSoundLibrary;
        Source.SoundName := zts;

        if   ( dŸwiêk_efekt_rodzaj_f in [ der_SOS_Rozb³ysk ] )
          or ( efekt_rodzaj_f in [ er_SOS, er_Trafienie_Statek_Zatopienie ] ) then
          Source.MinDistance := dŸwiêk_emiter__zasiêg_minimalny_g * 10
        else//if   ( dŸwiêk_efekt_rodzaj_f in [ der_SOS_Rozb³ysk ] ) (...)
        if    ( efekt_rodzaj_f in [ er_Trafienie_L¹d__Bez_Obra¿eñ, er_Trafienie_L¹d__Obra¿enia, er_Trafienie_Statek, er_Trafienie_Woda, er_Wystrza³ ] )
          and (  Czy_Du¿e( amunicja_f )  ) then
          Source.MinDistance := dŸwiêk_emiter__zasiêg_minimalny_g * 3
        else//if    ( efekt_rodzaj_f in [ er_Trafienie_L¹d__Bez_Obra¿eñ, er_Trafienie_L¹d__Obra¿enia, er_Trafienie_Statek, er_Trafienie_Woda, er_Wystrza³ ] ) (...)
          Source.MinDistance := dŸwiêk_emiter__zasiêg_minimalny_g;


        if Source.MaxDistance <= Source.MinDistance then
          Source.MaxDistance := Source.MinDistance * 2;


        if   ( dŸwiêk_efekt_rodzaj_f in [ der_Amunicja__Lot, der_Kotwica__W_Dó³, der_Kotwica__W_Górê, der_Silnik ] )
          or ( efekt_rodzaj_f = er_SOS ) then
          Source.NbLoops := 2
        else//if   ( dŸwiêk_efekt_rodzaj_f in [ der_Kotwica__W_Dó³, der_Kotwica__W_Górê ] ) (...)
          Source.NbLoops := 1; // Wartoœæ wiêksza od 1 zapêtla odtwarzanie w nieskoñczonoœæ.


        if    ( dŸwiêk_efekt_rodzaj_f = der_Amunicja__Lot )
          and ( zt_GLDummyCube is TAmunicja )
          and ( TAmunicja(zt_GLDummyCube).amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] ) then
          Playing := false
        else//if    ( dŸwiêk_efekt_rodzaj_f = der_Amunicja__Lot ) (...)
          Playing := true;

      end;
    //---//with TGLBSoundEmitter.Create( zt_GLDummyCube.Behaviours ) do


  if AOwner = nil then
    dŸwiêki_efekt_list.Add( zt_GLDummyCube );


  if    ( czy_serwer_g )
    and ( wieloosobowe__efekt_r_l.dŸwiêk_efekt_rodzaj_owo <> der_Brak )then
    begin

      wieloosobowe__efekt_r_l.pozycja_ef__owo := zt_GLDummyCube.AbsolutePosition;

      Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__dŸwiêk_efekt_c, -99, wieloosobowe__efekt_r_l, true );

    end;
  //---//if    ( czy_serwer_g ) (...)


  //Informacja_Dodatkowa_Dodaj( zts ); // Test.
  //if dŸwiêk_efekt_rodzaj_f = der_Syrena_Okrêtowa then
  //if efekt_rodzaj_f in [ er_SOS ] then
  //zt_GLDummyCube.ShowAxes := true;
  //zts := dŸwiêki___trafienie_statek_c + DŸwiêk_Numer_Losuj( dŸwiêki__iloœæ__trafienie_statek_g ) + dŸwiêki__rozszerzenie_c;

end;//---//Funkcja DŸwiêki__Efekt__Utwórz_Jeden().

//Funkcja DŸwiêki__Efekt__Zwolnij_Jeden().
procedure TStatki_Form.DŸwiêki__Efekt__Zwolnij_Jeden( dŸwiêki_efekt_f : TGLDummyCube );
begin

  // Usuwaæ tylko w jednym miejscu. //!!!
  // Wywo³anie tej funkcji w kliku miejscach mo¿e coœ zepsuæ.

  if   ( dŸwiêki_efekt_list = nil )
    or (  not Assigned( dŸwiêki_efekt_list )  )
    or ( dŸwiêki_efekt_f = nil ) then
    Exit;

  dŸwiêki_efekt_list.Remove( dŸwiêki_efekt_f );
  FreeAndNil( dŸwiêki_efekt_f );

end;//---//Funkcja DŸwiêki__Efekt__Zwolnij_Jeden().

//Funkcja DŸwiêki__Efekt__Zwolnij_Wszystkie().
procedure TStatki_Form.DŸwiêki__Efekt__Zwolnij_Wszystkie();
var
  i : integer;
begin

  if   ( dŸwiêki_efekt_list = nil )
    or (  not Assigned( dŸwiêki_efekt_list )  ) then
    Exit;


  for i := dŸwiêki_efekt_list.Count - 1 downto 0 do
    begin

      TGLDummyCube(dŸwiêki_efekt_list[ i ]).Free();
      dŸwiêki_efekt_list.Delete( i );

    end;
  //---//for i := dŸwiêki_efekt_list.Count - 1 downto 0 do

end;//---//Funkcja DŸwiêki__Efekt__Zwolnij_Wszystkie().

//Funkcja DŸwiêki__Efekt__Czas_Trwania_SprawdŸ().
procedure TStatki_Form.DŸwiêki__Efekt__Czas_Trwania_SprawdŸ();
var
  i,
  zti
    : integer;
begin

  if   (  MilliSecondsBetween( Now(), dŸwiêki_efekt__czas_trwania_sprawdŸ__ostatnie_wywo³anie_data_czas_g ) < dŸwiêki_efekt__czas_trwania_sprawdŸ__czas_milisekundy_c  )
    or ( dŸwiêki_efekt_list = nil )
    or (  not Assigned( dŸwiêki_efekt_list )  ) then
    Exit;


  for i := dŸwiêki_efekt_list.Count - 1 downto 0 do
    begin

      zti := TGLDummyCube(dŸwiêki_efekt_list[ i ]).Behaviours.IndexOfClass( TGLBSoundEmitter ); // -1 - brak, >= 0 zachowania.

      if   ( zti <= -1 )
        or (
                 ( zti >= 0 )
             and ( ActiveSoundManager() <> nil )
             and ( not TGLBSoundEmitter(TGLDummyCube(dŸwiêki_efekt_list[ i ]).Behaviours.Items[ zti ]).Playing )
           ) then
        DŸwiêki__Efekt__Zwolnij_Jeden( dŸwiêki_efekt_list[ i ] );

    end;
  //---//for i := dŸwiêki_efekt_list.Count - 1 downto 0 do


  dŸwiêki_efekt__czas_trwania_sprawdŸ__ostatnie_wywo³anie_data_czas_g := Now();

end;//---//Funkcja DŸwiêki__Efekt__Czas_Trwania_SprawdŸ().

//Funkcja DŸwiêki__Komunikat__Utwórz_Jeden().
procedure TStatki_Form.DŸwiêki__Komunikat__Utwórz_Jeden( const dŸwiêk_komunikat_rodzaj_f : TDŸwiêk_Komunikat_Rodzaj; const komunikat_wartoœæ_f : real; const komunikat_wartoœæ__dodatkowa_f : real = 0 );
begin

  DŸwiêki__Komunikat__Utwórz_Jeden( dŸwiêk_komunikat_rodzaj_f, Typy_Wspolne.ar_Brak, komunikat_wartoœæ_f, komunikat_wartoœæ__dodatkowa_f );

end;//---//Funkcja DŸwiêki__Komunikat__Utwórz_Jeden().

//Funkcja DŸwiêki__Komunikat__Utwórz_Jeden().
procedure TStatki_Form.DŸwiêki__Komunikat__Utwórz_Jeden( const dŸwiêk_komunikat_rodzaj_f : TDŸwiêk_Komunikat_Rodzaj; const amunicja_rodzaj_f : Typy_Wspolne.TAmunicja_Rodzaj; const komunikat_wartoœæ_f : real; const komunikat_wartoœæ__dodatkowa_f : real = 0 );
var
  i : integer;
  zts_1,
  zts_2
    : string;
begin

  //
  // Wpis na liœcie ma postaæ:
  //
  // dla 'sterowania' statkiem
  //
  // TDŸwiêk_Komunikat_Rodzaj dŸwiêki__komunikat__separator_c wartoœæ
  //
  //
  // dla zmian ustawienia aktywnoœci broni:
  //
  // TDŸwiêk_Komunikat_Rodzaj dŸwiêki__komunikat__separator_c Typy_Wspolne.TAmunicja_Rodzaj dŸwiêki__komunikat__separator_c wartoœæ
  //
  // dkr_Prêdkoœæ;+123
  // dkr_Skrêt;-123
  //
  // dkr_Amunicja__Rodzaj;ar_Pocisk;0
  // dkr_Amunicja__Rodzaj;ar_Pocisk;1
  //
  //
  // dla dkr_Alarm_Torpedowy
  //   w funkcji DŸwiêki__Komunikat__Odtwarzanie_Nastêpny_SprawdŸ() jest dodawany do dŸwiêki_komunikaty_string_list wpis o dkr_Alarm_Torpedowy__Odleg³oœæ.
  //
  // dkr_Alarm_Torpedowy dŸwiêki__komunikat__separator_c odleg³oœæ dŸwiêki__komunikat__separator_c namiar
  //
  // dkr_Alarm_Torpedowy;456;123
  //
  //
  // dkr_Prêdkoœæ
  //   - = ty³
  //   + = przód
  //
  // dkr_Skrêt
  //   - = lewo
  //   + = prawo
  //
  // dkr_Zanurzenie_Pu³ap
  //   ³ódŸ podwodna
  //     0 = brak
  //     + = zanurzenie
  //   samolot
  //     - = w dó³
  //     + = w górê
  //

  if   ( not DŸwiêk__Aktywnoœæ_CheckBox.Checked )
    or ( not GLSMOpenAL1.Active )
    or ( ActiveSoundManager() = nil ) then
    Exit;


  zts_1 := '';
  zts_2 := '';


  // Usuwa wszystkie wczeœniej zapamiêtane komunikaty tego samego rodzaju do wyg³oszenia.
  for i := dŸwiêki_komunikaty_string_list.Count - 1 downto 0 do
    if   (
               ( dŸwiêk_komunikat_rodzaj_f = dkr_Amunicja__Rodzaj )
           and (  Pos(  IntToStr( integer(dŸwiêk_komunikat_rodzaj_f) ) + dŸwiêki__komunikat__separator_c + IntToStr( integer(amunicja_rodzaj_f) ) + dŸwiêki__komunikat__separator_c, dŸwiêki_komunikaty_string_list[ i ]  ) > 0  )
         )
      or (
               ( dŸwiêk_komunikat_rodzaj_f <> dkr_Amunicja__Rodzaj )
           and (  Pos(  IntToStr( integer(dŸwiêk_komunikat_rodzaj_f) ) + dŸwiêki__komunikat__separator_c, dŸwiêki_komunikaty_string_list[ i ]  ) > 0  )
         ) then
      dŸwiêki_komunikaty_string_list.Delete( i );


  if   ( dŸwiêk_komunikat_rodzaj_f = dkr_Amunicja__Rodzaj )
    or ( komunikat_wartoœæ_f < 0 ) then
    zts_1 := '' // Minus ju¿ jest w liczbie.
  else//if   ( dŸwiêk_komunikat_rodzaj_f = dkr_Amunicja__Rodzaj ) (...)
    if    ( komunikat_wartoœæ_f <> 0 )
      and ( dŸwiêk_komunikat_rodzaj_f <> dkr_Alarm_Torpedowy )
      and ( dŸwiêk_komunikat_rodzaj_f <> dkr_Alarm_Torpedowy__Odleg³oœæ )
      and ( dŸwiêk_komunikat_rodzaj_f <> dkr_Pu³ap__Zmiana )
      and ( dŸwiêk_komunikat_rodzaj_f <> dkr_Zanurzenie )
      and ( dŸwiêk_komunikat_rodzaj_f <> dkr_Zanurzenie__Zmiana )
      and ( dŸwiêk_komunikat_rodzaj_f <> dkr_Zanurzenie_Pu³ap__Peryskopowe ) then
      zts_1 := '+';


  if dŸwiêk_komunikat_rodzaj_f = dkr_Alarm_Torpedowy then
    zts_2 := zts_2 + dŸwiêki__komunikat__separator_c + FloatToStr( komunikat_wartoœæ__dodatkowa_f )
  else
  if dŸwiêk_komunikat_rodzaj_f = dkr_Amunicja__Rodzaj then
    zts_1 := IntToStr( integer(amunicja_rodzaj_f) ) + dŸwiêki__komunikat__separator_c + zts_1;


  dŸwiêki_komunikaty_string_list.Add(  IntToStr( integer(dŸwiêk_komunikat_rodzaj_f) ) + dŸwiêki__komunikat__separator_c + zts_1 + FloatToStr( komunikat_wartoœæ_f ) + zts_2  );

end;//---//Funkcja DŸwiêki__Komunikat__Utwórz_Jeden().

//Funkcja DŸwiêki__Komunikat__Zwolnij_Wszystkie().
procedure TStatki_Form.DŸwiêki__Komunikat__Zwolnij_Wszystkie();
begin

  SetLength( dŸwiêki_komunikaty_czasy_trwania_r_t, 0 );


  dŸwiêki_komunikaty_string_list.Clear();

  dŸwiêki__komunikat__wyg³aszany_g := '';
  dŸwiêki__komunikat__wyg³aszany__czas_trwania_milisekundy_g := 0;
  dŸwiêki__komunikat__wyg³aszany__pauza__czas_trwania_milisekundy_g := 0;
  dŸwiêki__komunikat__wyg³aszany__rodzaj_g := dkr_Brak;

  while DŸwiêki__Komunikaty_GLDummyCube.Behaviours.IndexOfClass( TGLBSoundEmitter ) > -1 do // -1 - brak, >= 0 zachowania.
    DŸwiêki__Komunikaty_GLDummyCube.Behaviours.Delete( 0 );

end;//---//Funkcja DŸwiêki__Komunikat__Zwolnij_Wszystkie().

//Funkcja DŸwiêki__Komunikat__Odtwarzanie_Nastêpny_SprawdŸ().
procedure TStatki_Form.DŸwiêki__Komunikat__Odtwarzanie_Nastêpny_SprawdŸ();
var
  czy_wyg³aszanie_wartoœci : boolean; // false - etap odtwarzania nazwy komunikatu; true - etap odtwarzania wartoœci komunikatu.
  zti : integer;
  zts : string;
  amunicja_rodzaj_l : Typy_Wspolne.TAmunicja_Rodzaj;
begin

  if MilliSecondsBetween( Now(), dŸwiêki__komunikat__odtwarzanie_nastêpny_sprawdŸ__ostatnie_wywo³anie_data_czas_g ) < dŸwiêki__komunikat__odtwarzanie_nastêpny_sprawdŸ__czas_milisekundy_c then
    Exit;


  if DŸwiêki__Komunikaty_GLDummyCube.Behaviours.IndexOfClass( TGLBSoundEmitter ) > -1 then // -1 - brak, >= 0 zachowania.
    begin

      if   (
                 ( dŸwiêki__komunikat__wyg³aszany__czas_trwania_milisekundy_g = 0 )
             and ( TGLBSoundEmitter(DŸwiêki__Komunikaty_GLDummyCube.Behaviours.Items[ 0 ]).Playing )
           )
        or (
                 ( dŸwiêki__komunikat__wyg³aszany__czas_trwania_milisekundy_g + dŸwiêki__komunikat__wyg³aszany__pauza__czas_trwania_milisekundy_g > 0 )
             and (  MilliSecondsBetween( Now(), dŸwiêki__komunikat__wyg³aszany__rozpoczêcie_data_czas_g ) < dŸwiêki__komunikat__wyg³aszany__czas_trwania_milisekundy_g + dŸwiêki__komunikat__wyg³aszany__pauza__czas_trwania_milisekundy_g  )
             and ( TGLBSoundEmitter(DŸwiêki__Komunikaty_GLDummyCube.Behaviours.Items[ 0 ]).Playing )
           ) then
        Exit
      else//if TGLBSoundEmitter(DŸwiêki__Komunikaty_GLDummyCube.Behaviours.Items[ 0 ]).Playing then
        begin

          dŸwiêki__komunikat__wyg³aszany__czas_trwania_milisekundy_g := 0;
          dŸwiêki__komunikat__wyg³aszany__pauza__czas_trwania_milisekundy_g := 0;
          DŸwiêki__Komunikaty_GLDummyCube.Behaviours.Delete( 0 );

        end;
      //---//if TGLBSoundEmitter(DŸwiêki__Komunikaty_GLDummyCube.Behaviours.Items[ 0 ]).Playing then

    end;
  //---//if DŸwiêki__Komunikaty_GLDummyCube.Behaviours.IndexOfClass( TGLBSoundEmitter ) > -1 then


  if Trim( dŸwiêki__komunikat__wyg³aszany_g ) = '' then
    begin

      if dŸwiêki_komunikaty_string_list.Count <= 0 then
        Exit
      else//if dŸwiêki_komunikaty_string_list.Count <= 0 then
        begin

          dŸwiêki__komunikat__wyg³aszany_g := dŸwiêki_komunikaty_string_list[ 0 ];
          dŸwiêki_komunikaty_string_list.Delete( 0 );

        end;
      //---//if dŸwiêki_komunikaty_string_list.Count <= 0 then

    end;
  //---//if Trim( dŸwiêki__komunikat__wyg³aszany_g ) = '' then


  amunicja_rodzaj_l := Typy_Wspolne.ar_Brak;

  zts := '';
  zti := Pos( dŸwiêki__komunikat__separator_c, dŸwiêki__komunikat__wyg³aszany_g );

  if zti > 0 then
    begin

      // Odczytuje rodzaj komunikatu.

      czy_wyg³aszanie_wartoœci := false;

      zts := Copy( dŸwiêki__komunikat__wyg³aszany_g, 1, zti - 1 );
      Delete( dŸwiêki__komunikat__wyg³aszany_g, 1, zti );

      try
        zti := StrToInt( zts );
      except
        zti := -99;
      end;
      //---//try

      if    ( zti <> -99 )
        and (  zti >= integer(Low( TDŸwiêk_Komunikat_Rodzaj ))  )
        and (  zti <= integer(High( TDŸwiêk_Komunikat_Rodzaj ))  ) then
        dŸwiêki__komunikat__wyg³aszany__rodzaj_g := TDŸwiêk_Komunikat_Rodzaj(zti)
      else//if    ( zti <> -99 ) (...)
        dŸwiêki__komunikat__wyg³aszany__rodzaj_g := dkr_Brak;


      if dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_Alarm_Torpedowy then
        begin

          zts := '';
          zti := Pos( dŸwiêki__komunikat__separator_c, dŸwiêki__komunikat__wyg³aszany_g );

          if zti > 0 then
            begin

              // Odczytuje odleg³oœæ do torpedy i dodaje kolejny komunikat do listy komunikatów.

              zts := Copy( dŸwiêki__komunikat__wyg³aszany_g, 1, zti - 1 );
              Delete( dŸwiêki__komunikat__wyg³aszany_g, 1, zti );

              try
                zti := StrToInt( zts );
                zts := 'dobrze';
              except
                zti := -99;
                zts := 'b³¹d';
              end;
              //---//try

              if zts = 'dobrze' then
                dŸwiêki_komunikaty_string_list.Insert(  0, IntToStr( integer(dkr_Alarm_Torpedowy__Odleg³oœæ) ) + dŸwiêki__komunikat__separator_c + FloatToStr( zti )  );

            end;
          //---//if zti > 0 then

        end
      else//if dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_Alarm_Torpedowy then
      if dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_Amunicja__Rodzaj then
        begin

          zts := '';
          zti := Pos( dŸwiêki__komunikat__separator_c, dŸwiêki__komunikat__wyg³aszany_g );

          if zti > 0 then
            begin

              // Odczytuje rodzaj amunicji.

              zts := Copy( dŸwiêki__komunikat__wyg³aszany_g, 1, zti - 1 );
              Delete( dŸwiêki__komunikat__wyg³aszany_g, 1, zti );

              try
                zti := StrToInt( zts );
              except
                zti := -99;
              end;
              //---//try

              if    ( zti <> -99 )
                and (  zti >= integer(Low( Typy_Wspolne.TAmunicja_Rodzaj ))  )
                and (  zti <= integer(High( Typy_Wspolne.TAmunicja_Rodzaj ))  ) then
                amunicja_rodzaj_l := Typy_Wspolne.TAmunicja_Rodzaj(zti);

            end;
          //---//if zti > 0 then

        end
      else//if dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_Amunicja__Rodzaj then
      if   ( dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_Lotniskowiec_Katapulta_Gotowa )
        or ( dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_Naprawiono )
        or ( dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_Odnawianie_Zasobów_Zakoñczone )
        or ( dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_Uszkodzenie )
        or ( dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_SOS_Pikanie )
        or ( dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_Start )
        or ( dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_Stop ) then
        dŸwiêki__komunikat__wyg³aszany_g := '';

    end
  else//if zti > 0 then
    begin

      // Odczytuje wartoœæ komunikatu.

      czy_wyg³aszanie_wartoœci := true;

      zts := dŸwiêki__komunikat__wyg³aszany_g[ 1 ];

      if dŸwiêki__komunikat__wyg³aszany_g[ 1 ] = '-' then
        zts := dŸwiêki__komunikat__minus__prefiks_c
      else
      if dŸwiêki__komunikat__wyg³aszany_g[ 1 ] = '+' then
        zts := dŸwiêki__komunikat__plus__prefiks_c
      else
      if   ( dŸwiêki__komunikat__wyg³aszany_g[ 1 ] = ',' )
        or ( dŸwiêki__komunikat__wyg³aszany_g[ 1 ] = '.' ) then
        zts := dŸwiêki__komunikat__przecinek__prefiks_c
      else
        begin

          try
            zti := StrToInt( dŸwiêki__komunikat__wyg³aszany_g[ 1 ] );

            if dŸwiêki__komunikat__wyg³aszany__rodzaj_g <> dkr_Amunicja__Rodzaj then
              zts := dŸwiêki__komunikat__cyfra__prefiks_c + zts;

          except
            zts := '';
          end;
          //---//try

        end;
      //---//

      Delete( dŸwiêki__komunikat__wyg³aszany_g, 1, 1 );

    end;
  //---//if zti > 0 then


  if not czy_wyg³aszanie_wartoœci then
    begin

      if dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_Amunicja__Rodzaj then
        begin

          zts := System.TypInfo.GetEnumName(  System.TypeInfo(Typy_Wspolne.TAmunicja_Rodzaj), Ord( amunicja_rodzaj_l )  ); // Daje nazwy elementów.

          zts := StringReplace( zts, dŸwiêki__typ_prefiks__ar_c, '', [] );

        end
      else//if dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_Amunicja__Rodzaj then
        begin

          zts := System.TypInfo.GetEnumName(  System.TypeInfo(TDŸwiêk_Komunikat_Rodzaj), Ord( dŸwiêki__komunikat__wyg³aszany__rodzaj_g )  ); // Daje nazwy elementów.

          zts := StringReplace( zts, dŸwiêki__typ_prefiks__dkr_c, '', [] );

        end;
      //---//if dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_Amunicja__Rodzaj then

    end
  else//if not czy_wyg³aszanie_wartoœci then
    begin

      if dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_Amunicja__Rodzaj then
        begin

          if zti = 0 then
            zts := dŸwiêki__komunikat__nieaktywne__prefiks_c
          else//if zti = 0 then
            zts := dŸwiêki__komunikat__aktywne__prefiks_c;

        end
      else//if dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_Amunicja__Rodzaj then
      if dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_Prêdkoœæ then
        begin

          if zts = dŸwiêki__komunikat__minus__prefiks_c then
            zts := dŸwiêki__komunikat__ty³__prefiks_c
          else//if zts = dŸwiêki__komunikat__minus__prefiks_c then
            if zts = dŸwiêki__komunikat__plus__prefiks_c then
              zts := dŸwiêki__komunikat__przód__prefiks_c;

        end
      else//if dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_Prêdkoœæ then
      if dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_Pu³ap then
        begin

          if zts = dŸwiêki__komunikat__minus__prefiks_c then
            zts := dŸwiêki__komunikat__dó³__prefiks_c
          else//if zts = dŸwiêki__komunikat__minus__prefiks_c then
            if zts = dŸwiêki__komunikat__plus__prefiks_c then
              zts := dŸwiêki__komunikat__góra__prefiks_c;

        end
      else//if dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_Pu³ap then
      if dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_Skrêt then
        begin

          if zts = dŸwiêki__komunikat__minus__prefiks_c then
            zts := dŸwiêki__komunikat__lewo__prefiks_c
          else//if zts = dŸwiêki__komunikat__minus__prefiks_c then
            if zts = dŸwiêki__komunikat__plus__prefiks_c then
              zts := dŸwiêki__komunikat__prawo__prefiks_c;

        end;
      //---//if dŸwiêki__komunikat__wyg³aszany__rodzaj_g = dkr_Skrêt then

    end;
  //---//if not czy_wyg³aszanie_wartoœci then

  zts := zts + dŸwiêki__rozszerzenie_c;


  if    (  Gra_Komunikaty_GLSoundLibrary.Samples.GetByName( zts ) <> nil  )
    and (  DŸwiêki__Komunikaty_GLDummyCube.Behaviours.IndexOfClass( TGLBSoundEmitter ) <= -1  ) then // -1 - brak, >= 0 zachowania.
    begin

      if    ( DŸwiêk__Aktywnoœæ_CheckBox.Checked )
        and ( GLSMOpenAL1.Active )
        and ( ActiveSoundManager() <> nil ) then
        with TGLBSoundEmitter.Create( DŸwiêki__Komunikaty_GLDummyCube.Behaviours ) do
          begin

            Source.SoundLibrary := Gra_Komunikaty_GLSoundLibrary;
            Source.SoundName := zts;
            Source.NbLoops := 1; // Wartoœæ wiêksza od 1 zapêtla odtwarzanie w nieskoñczonoœæ.
            Source.MinDistance := dŸwiêk_emiter__zasiêg_minimalny_g;
            Playing := true;

          end;
        //---//with TGLBSoundEmitter.Create( DŸwiêki__Komunikaty_GLDummyCube.Behaviours ) do


      for zti := 0 to Length( dŸwiêki_komunikaty_czasy_trwania_r_t ) - 1 do
        if dŸwiêki_komunikaty_czasy_trwania_r_t[ zti ].dŸwiêk_komunikat__nazwa = zts then
          begin

            dŸwiêki__komunikat__wyg³aszany__czas_trwania_milisekundy_g := dŸwiêki_komunikaty_czasy_trwania_r_t[ zti ].dŸwiêk_komunikat__czas_trwania_milisekundy;
            dŸwiêki__komunikat__wyg³aszany__pauza__czas_trwania_milisekundy_g := 0;
            dŸwiêki__komunikat__wyg³aszany__rozpoczêcie_data_czas_g := Now();
            Break;

          end;
        //---//if dŸwiêki_komunikaty_czasy_trwania_r_t[ zti ].dŸwiêk_komunikat__nazwa = zts then

    end;
  //---//if    (  Gra_Komunikaty_GLSoundLibrary.Samples.GetByName( zts ) <> nil  ) (...)


  //Informacja_Dodatkowa_Dodaj( zts ); // Test.


  dŸwiêki__komunikat__odtwarzanie_nastêpny_sprawdŸ__ostatnie_wywo³anie_data_czas_g := Now();

end;//---//Funkcja DŸwiêki__Komunikat__Odtwarzanie_Nastêpny_SprawdŸ().

//Funkcja DŸwiêki__Komunikat__O_Zmianie_Utwórz().
procedure TStatki_Form.DŸwiêki__Komunikat__O_Zmianie_Utwórz();

  //Funkcja Torpedy_Alarm_SprawdŸ__Komunikat() w DŸwiêki__Komunikat__O_Zmianie_Utwórz().
  procedure Torpedy_Alarm_SprawdŸ__Komunikat( statek_f : TStatek );
  var
    i_l : integer;
    id_amunicja_najbli¿sza_l : Int64; // Najbli¿sza wykryta torpeda.
    ztsi_1,
    ztsi_2,
    odleg³oœæ_l
      : single;
    zts : string;
    zt_vector : GLS.VectorTypes.TVector4f;
    amunicja_list_l : TList;
  begin

    if   ( statek_f = nil )
      or (  not Assigned( statek_f )  )
      or ( statek_f.punkty_¿ycia_aktualne <= 0 ) then
      //or ( statek_f.si__statek_gracza__p³ywa ) //???
      Exit;


    id_amunicja_najbli¿sza_l := -99;


    if czy_klient_g then
      amunicja_list_l := wieloosobowe_amunicja_wystrzelona_list
    else//if czy_klient_g then
      amunicja_list_l := amunicja_wystrzelona_list;



    if   ( not statek_f.czy_samolot )
      or (
               ( statek_f.czy_samolot )
           and ( statek_f.AbsolutePosition.Y < samolot_w_powietrzu_wysokoœæ_od_c ) // Je¿eli samolot jest w powietrzu to nie unika torped.
         ) then
      for i_l := 0 to amunicja_list_l.Count - 1 do
        if    ( amunicja_list_l[ i_l ] <> nil )
          and ( TAmunicja(amunicja_list_l[ i_l ]).amunicja_rodzaj = Typy_Wspolne.ar_Torpeda ) then
          begin

            ztsi_1 := statek_f.DistanceTo( TAmunicja(amunicja_list_l[ i_l ]) );

            ztsi_2 := Torpeda_Wykrycie_Zasiêg( statek_f );

            if ztsi_1 < ztsi_2 then
              begin

                if   ( id_amunicja_najbli¿sza_l = -99 ) // Pierwsza wykryta torpeda.
                  or ( ztsi_1 < odleg³oœæ_l ) then
                  begin

                    // Najbli¿sza wykryta torpeda.

                    id_amunicja_najbli¿sza_l := TAmunicja(amunicja_list_l[ i_l ]).id_amunicja;
                    odleg³oœæ_l := ztsi_1;

                  end;
                //---//if   ( id_amunicja_najbli¿sza_l = -99 ) (...)

              end;
            //---//if ztsi_1 < ztsi_2 then

          end;
        //---//if    ( amunicja_list_l[ i_l ] <> nil ) (...)


    if id_amunicja_najbli¿sza_l <> -99 then
      begin

        if statek_f.komunikat__torpedy_alarm__id_amunicja__obserwowana <> id_amunicja_najbli¿sza_l then
          begin

            // Wykryto now¹ torpedê.

            statek_f.komunikat__torpedy_alarm__id_amunicja__obserwowana := id_amunicja_najbli¿sza_l;
            statek_f.komunikat__torpedy_alarm__odleg³oœæ := odleg³oœæ_l;

          end
        else//if statek_f.komunikat__torpedy_alarm__id_amunicja__obserwowana <> id_amunicja_najbli¿sza_l then
          if    ( statek_f.komunikat__torpedy_alarm__id_amunicja__obserwowana = id_amunicja_najbli¿sza_l )
           and ( odleg³oœæ_l < statek_f.komunikat__torpedy_alarm__odleg³oœæ ) then
            begin

              // Torpeda siê zbli¿a.

              statek_f.komunikat__torpedy_alarm__odleg³oœæ := odleg³oœæ_l;


              for i_l := 0 to amunicja_list_l.Count - 1 do
                if    ( amunicja_list_l[ i_l ] <> nil )
                  and ( TAmunicja(amunicja_list_l[ i_l ]).amunicja_rodzaj = Typy_Wspolne.ar_Torpeda )
                  and ( TAmunicja(amunicja_list_l[ i_l ]).id_amunicja = id_amunicja_najbli¿sza_l ) then
                  begin

                    zt_vector := statek_f.AbsolutePosition;
                    zt_vector.Y := 0;

                    // Przesuniêcie punktu w stronê dziobu statku.
                    GLS.VectorGeometry.AddVector
                      (
                        zt_vector,
                        GLS.VectorGeometry.VectorMake
                          (
                            statek_f.AbsoluteDirection.X,
                            0,
                            statek_f.AbsoluteDirection.Z
                          )
                      );


                    ztsi_1 := // K¹t w poziomie miêdzy pozycj¹ statku i pozycj¹ torpedy. Wartoœæ jest zawsze dodatnia, bez znaczenia, jak i nie okreœla, w któr¹ stronê s¹ obrócone obiekty.
                      System.Math.RadToDeg
                        (
                          GLS.VectorGeometry.AngleBetweenVectors
                            (
                              GLS.VectorGeometry.VectorMake( TAmunicja(amunicja_list_l[ i_l ]).AbsolutePosition.X, 0, TAmunicja(amunicja_list_l[ i_l ]).AbsolutePosition.Z ),
                              zt_vector,
                              GLS.VectorGeometry.VectorMake( statek_f.AbsolutePosition.X, 0, statek_f.AbsolutePosition.Z )
                            )
                        );


                    ztsi_2 := statek_f.AbsoluteToLocal( TAmunicja(amunicja_list_l[ i_l ]).AbsolutePosition ).X;

                    if ztsi_2 > 0 then // Je¿eli torpeda jest na lewo od statku.
                      ztsi_1 := 360 - ztsi_1; // Czasami 0 i 360 to prawie identyczne wartoœci obliczeñ.


                    if statek_f.czy_samolot then
                      zts := '(' + t³umaczenie_komunikaty_r.s³owo__samolot + ') '
                    else//if statek_f.czy_samolot then
                      zts := '';

                    Informacja_Dodatkowa_Dodaj(   t³umaczenie_komunikaty_r.komunikat__alarm_torpedowy + ' ' + zts + t³umaczenie_komunikaty_r.s³owo__namiar + ': ' + FloatToStr(  Round( ztsi_1 )  ) + '; ' + t³umaczenie_komunikaty_r.s³owo__odleg³oœæ + ': ' + FloatToStr(  Round( odleg³oœæ_l )  ) + '.'   );


                    if MilliSecondsBetween( Now(), dŸwiêki__komunikat__alarm_torpedowy__ostatnie_wywo³anie_data_czas_g ) >= dŸwiêki__komunikat__o_zmianie_utwórz__czas_milisekundy_c * 3 then
                      begin

                        DŸwiêki__Komunikat__Utwórz_Jeden(  dkr_Alarm_Torpedowy, Round( odleg³oœæ_l ), Round( ztsi_1 )  );
                        dŸwiêki__komunikat__alarm_torpedowy__ostatnie_wywo³anie_data_czas_g := Now();

                      end;
                    //---//if MilliSecondsBetween( Now(), dŸwiêki__komunikat__alarm_torpedowy__ostatnie_wywo³anie_data_czas_g ) >= dŸwiêki__komunikat__o_zmianie_utwórz__czas_milisekundy_c * 3 then


                    Break;

                  end;
                //---//if    ( amunicja_list_l[ i_l ] <> nil ) (...)

            end
          else//if    ( statek_f.komunikat__torpedy_alarm__id_amunicja__obserwowana = id_amunicja_najbli¿sza_l ) (...)
            if    ( statek_f.komunikat__torpedy_alarm__id_amunicja__obserwowana = id_amunicja_najbli¿sza_l )
              and ( odleg³oœæ_l > statek_f.komunikat__torpedy_alarm__odleg³oœæ ) then
              begin

                // Torpeda siê oddala.

                if statek_f.komunikat__torpedy_alarm__id_amunicja__obserwowana <> -99 then
                  statek_f.komunikat__torpedy_alarm__id_amunicja__obserwowana := -99;

              end;
            //---//if    ( id_amunicja_najbli¿sza_l <> -99 ) (...)

      end
    else//if id_amunicja_najbli¿sza_l <> -99 then
      begin

        // Nie wykryto torped.

        if statek_f.komunikat__torpedy_alarm__id_amunicja__obserwowana <> id_amunicja_najbli¿sza_l then
          statek_f.komunikat__torpedy_alarm__id_amunicja__obserwowana := id_amunicja_najbli¿sza_l;

      end;
    //---//if id_amunicja_najbli¿sza_l <> -99 then

  end;//---//Funkcja Torpedy_Alarm_SprawdŸ__Komunikat() w DŸwiêki__Komunikat__O_Zmianie_Utwórz().

  //Funkcja Uszkodzone_SprawdŸ() w DŸwiêki__Komunikat__O_Zmianie_Utwórz().
  procedure Uszkodzone_SprawdŸ( statek_f : TStatek );
  var
    ztb : boolean;
  begin

    if   ( statek_f = nil )
      or (  not Assigned( statek_f )  )
      or ( statek_f.punkty_¿ycia_aktualne <= 0 ) then
      //or ( statek_f.si__statek_gracza__p³ywa ) //???
      Exit;


    if   ( statek_f.uszkodzone_czas_sekundy_i__kotwica <> 0 )
      or ( statek_f.uszkodzone_czas_sekundy_i__radar <> 0 )
      or ( statek_f.uszkodzone_czas_sekundy_i__radio <> 0 )
      or ( statek_f.uszkodzone_czas_sekundy_i__sonar <> 0 )
      or ( statek_f.uszkodzone_czas_sekundy_i__ster <> 0 )
      or ( statek_f.uszkodzone_czas_sekundy_i__ster_g³êbokoœci <> 0 )
      or ( statek_f.uszkodzone_czas_sekundy_i__œruba <> 0 ) then
      ztb := true
    else//if   ( statek_f.uszkodzone_czas_sekundy_i__kotwica <> 0 ) (...)
      ztb := false;


    if statek_f.dŸwiêki__komunikat__uszkodzone <> ztb then
      begin

        statek_f.dŸwiêki__komunikat__uszkodzone := ztb;


        if statek_f.dŸwiêki__komunikat__uszkodzone then
          DŸwiêki__Komunikat__Utwórz_Jeden( dkr_Uszkodzenie, 0 )
        else//if statek_f.dŸwiêki__komunikat__uszkodzone then
          DŸwiêki__Komunikat__Utwórz_Jeden( dkr_Naprawiono, 0 );

      end;
    //---//if statek_f.dŸwiêki__komunikat__uszkodzone <> ztb then

  end;//---//Funkcja Uszkodzone_SprawdŸ() w DŸwiêki__Komunikat__O_Zmianie_Utwórz().

  //Funkcja Zanurzenie_Pu³ap_Zmiana_SprawdŸ() w DŸwiêki__Komunikat__O_Zmianie_Utwórz().
  procedure Zanurzenie_Pu³ap_Zmiana_SprawdŸ( statek_f : TStatek );
  begin

    if   ( statek_f = nil )
      or (  not Assigned( statek_f )  )
      or ( statek_f.punkty_¿ycia_aktualne <= 0 )
      or ( statek_f.si__statek_gracza__p³ywa )
      or (
               ( not statek_f.czy_samolot )
           and ( not statek_f.czy_zanurzanie )
         ) then
      Exit;


    if   ( // Samolot.
               ( statek_f.czy_samolot )
           and ( statek_f.prêdkoœæ_aktualna <> 0 )
           and (
                    (
                          ( statek_f.AbsolutePosition.Y <= samolot_w_powietrzu_wysokoœæ_od_c * 3 )
                      and (  Abs( statek_f.dŸwiêki__komunikat__absolute_position_y - statek_f.AbsolutePosition.Y ) >= 1  )
                    )
                 or (
                          ( statek_f.AbsolutePosition.Y > samolot_w_powietrzu_wysokoœæ_od_c * 3 )
                      and ( statek_f.AbsolutePosition.Y <= samolot_w_powietrzu_wysokoœæ_od_c * 10 )
                      and (  Abs( statek_f.dŸwiêki__komunikat__absolute_position_y - statek_f.AbsolutePosition.Y ) >= samolot_w_powietrzu_wysokoœæ_od_c  )
                    )
                 or (
                          ( statek_f.AbsolutePosition.Y > samolot_w_powietrzu_wysokoœæ_od_c * 10 )
                      and (  Abs( statek_f.dŸwiêki__komunikat__absolute_position_y - statek_f.AbsolutePosition.Y ) >= 50  )
                    )
               )
         )
      or ( // Zanurzanie.
               ( not statek_f.czy_samolot )
           and (  Abs( statek_f.dŸwiêki__komunikat__absolute_position_y - statek_f.AbsolutePosition.Y ) >= samolot_w_powietrzu_wysokoœæ_od_c  )
         ) then
      begin

        statek_f.dŸwiêki__komunikat__absolute_position_y := statek_f.AbsolutePosition.Y;

        if not statek_f.czy_samolot then
          DŸwiêki__Komunikat__Utwórz_Jeden(  dkr_Zanurzenie__Zmiana, Round( -statek_f.dŸwiêki__komunikat__absolute_position_y )  ) // Minus, gdy¿ podczas zanurzania wspó³rzêdne s¹ ujemne a g³êbokoœæ zanurzenia wzrasta.
        else//if not statek_f.czy_samolot then
          DŸwiêki__Komunikat__Utwórz_Jeden(  dkr_Pu³ap__Zmiana, Round( statek_f.dŸwiêki__komunikat__absolute_position_y )  );

      end;
    //---//if Abs( statek_f.AbsolutePosition.Y - statek_f.dŸwiêki__komunikat__absolute_position_y ) >= 1 then

  end;//---//Funkcja Zanurzenie_Pu³ap_Zmiana_SprawdŸ() w DŸwiêki__Komunikat__O_Zmianie_Utwórz().

begin//Funkcja DŸwiêki__Komunikat__O_Zmianie_Utwórz().

  if MilliSecondsBetween( Now(), dŸwiêki__komunikat__o_zmianie_utwórz__ostatnie_wywo³anie_data_czas_g ) < dŸwiêki__komunikat__o_zmianie_utwórz__czas_milisekundy_c then
    Exit;


  Torpedy_Alarm_SprawdŸ__Komunikat( statek_gracza );
  Torpedy_Alarm_SprawdŸ__Komunikat( samolot__statek_gracza );

  Uszkodzone_SprawdŸ( statek_gracza );
  Uszkodzone_SprawdŸ( samolot__statek_gracza );

  Zanurzenie_Pu³ap_Zmiana_SprawdŸ( statek_gracza );
  Zanurzenie_Pu³ap_Zmiana_SprawdŸ( samolot__statek_gracza );


  dŸwiêki__komunikat__o_zmianie_utwórz__ostatnie_wywo³anie_data_czas_g := Now();

end;//---//Funkcja DŸwiêki__Komunikat__O_Zmianie_Utwórz().

//Funkcja DŸwiêki__Komunikaty__Wczytaj().
procedure TStatki_Form.DŸwiêki__Komunikaty__Wczytaj();
var
  i,
  zti_1,
  zti_2
    : integer;
  zts_1,
  zts_2,
  dŸwiêk__t³umaczenia_nazwa_kopia_l
    : string;
  search_rec : TSearchRec;
  zt_string_list : TStringList;
begin

  //
  // Funkcja wczytuje dŸwiêki komunikatów (t³umaczenia).
  //

  DŸwiêki__Komunikat__Zwolnij_Wszystkie();


  for i := Gra_Komunikaty_GLSoundLibrary.Samples.Count - 1 downto 0 do
    Gra_Komunikaty_GLSoundLibrary.Samples.Delete( i );


  if DŸwiêk__T³umaczenia_ComboBox.ItemIndex <= 0 then
    Exit;


  dŸwiêk__t³umaczenia_nazwa_kopia_l := DŸwiêk__T³umaczenia_ComboBox.Text;


  // Je¿eli znajdzie plik zwraca 0, je¿eli nie znajdzie zwraca numer b³êdu. Na pocz¹tku znajduje '.' '..' potem listê plików.
  if FindFirst(  ExtractFilePath( Application.ExeName ) + katalog__dŸwiêki_c + '\' + dŸwiêk__t³umaczenia_nazwa_kopia_l + '\*' + dŸwiêki__rozszerzenie_c, faAnyFile, search_rec  ) = 0 then // Application potrzebuje w uses Forms.
    begin

      repeat

        if    ( search_rec.Attr <> faDirectory )
          and ( search_rec.Name <> '.' )
          and ( search_rec.Name <> '..' ) then
          DŸwiêk__Plik_Dodaj_Do_Biblioteki( dŸwiêk__t³umaczenia_nazwa_kopia_l + '\' + search_rec.Name, search_rec.Name );

      until FindNext( search_rec ) <> 0

    end;
  //---//if FindFirst(  ExtractFilePath( Application.ExeName ) + katalog__dŸwiêki_c + '\' + dŸwiêk__t³umaczenia_nazwa_kopia_l + '\*' + dŸwiêki__rozszerzenie_c, faAnyFile, search_rec  ) = 0 then

  FindClose( search_rec );


  zts_1 := ExtractFilePath( Application.ExeName ) + katalog__dŸwiêki_c + '\' + dŸwiêk__t³umaczenia_nazwa_kopia_l + '\' + dŸwiêki__komunikaty__czasy_trwania_plik_nazwa_c;

  if FileExists( zts_1 ) then
    begin

      zt_string_list := TStringList.Create();
      zt_string_list.LoadFromFile( zts_1, TEncoding.Unicode ); // Lepiej wskazaæ kodowanie.

      for i := 0 to zt_string_list.Count - 1 do
        begin

          zts_1 := zt_string_list[ i ];

          zti_1 := Pos( ';', zts_1 );

          if zti_1 > 1 then
            begin

              zts_2 := Copy( zts_1, 1, zti_1 - 1 );
              Delete( zts_1, 1, zti_1 );

              try
                zti_1 := StrToInt( zts_1 );
              except
                zti_1 := -99;
              end;
              //---//try

              if zti_1 > 0 then
                begin

                  zti_2 := Length( dŸwiêki_komunikaty_czasy_trwania_r_t );
                  SetLength( dŸwiêki_komunikaty_czasy_trwania_r_t, zti_2 + 1 );

                  dŸwiêki_komunikaty_czasy_trwania_r_t[ zti_2 ].dŸwiêk_komunikat__czas_trwania_milisekundy := zti_1;
                  dŸwiêki_komunikaty_czasy_trwania_r_t[ zti_2 ].dŸwiêk_komunikat__nazwa := zts_2;

                end;
              //---//if zti_1 > 0 then

            end;
          //---//if zti_1 > 1 then

        end;
      //---//for i := 0 to zt_string_list.Count - 1 do

      FreeAndNil( zt_string_list );

    end;
  //---//if FileExists( zts_1 ) then

end;//---//Funkcja DŸwiêki__Komunikaty__Wczytaj().

//Funkcja DŸwiêki__Komunikaty__Lista_Wczytaj().
procedure TStatki_Form.DŸwiêki__Komunikaty__Lista_Wczytaj( const komunikaty_wczytaj_f : boolean = true );
var
  i : integer;
  dŸwiêk__t³umaczenia_nazwa_kopia_l : string;
  search_rec : TSearchRec;
begin

  //
  // Funkcja tworzy listê dostêpnych t³umaczeñ komunikatów i opcjonalnie wczytuje dŸwiêki komunikatów (t³umaczeñ).
  //
  // Parametry:
  //   komunikaty_wczytaj_f:
  //     false - nie wczytuje dŸwiêków komunikatów (t³umaczeñ).
  //     true - wczytuje dŸwiêki komunikatów (t³umaczeñ).
  //

  dŸwiêk__t³umaczenia_nazwa_kopia_l := DŸwiêk__T³umaczenia_ComboBox.Text;
  DŸwiêk__T³umaczenia_ComboBox.Items.Clear();
  DŸwiêk__T³umaczenia_ComboBox.Items.Add( '<' + t³umaczenie_komunikaty_r.s³owo__brak__ma³¹_liter¹ + '>' );
  DŸwiêk__T³umaczenia_ComboBox.ItemIndex := 0;

  // Je¿eli znajdzie plik zwraca 0, je¿eli nie znajdzie zwraca numer b³êdu. Na pocz¹tku znajduje '.' '..' potem listê plików.
  if FindFirst(  ExtractFilePath( Application.ExeName ) + katalog__dŸwiêki_c + '\*.*', faAnyFile, search_rec  ) = 0 then // Application potrzebuje w uses Forms.
    begin

      repeat

        if    ( search_rec.Attr = faDirectory )
          and ( search_rec.Name <> '.' )
          and ( search_rec.Name <> '..' ) then
          DŸwiêk__T³umaczenia_ComboBox.Items.Add( search_rec.Name );

      until FindNext( search_rec ) <> 0

    end;
  //---//if FindFirst(  ExtractFilePath( Application.ExeName ) + katalog__dŸwiêki_c + '\*.*', faAnyFile, search_rec  ) = 0 then

  FindClose( search_rec );

  if Trim( dŸwiêk__t³umaczenia_nazwa_kopia_l ) <> '' then
    for i := DŸwiêk__T³umaczenia_ComboBox.Items.Count - 1 downto 0 do
      if DŸwiêk__T³umaczenia_ComboBox.Items[ i ] = dŸwiêk__t³umaczenia_nazwa_kopia_l then
        begin

          DŸwiêk__T³umaczenia_ComboBox.ItemIndex := i;
          Break;

        end;
      //---//if DŸwiêk__T³umaczenia_ComboBox.Items[ i ] = dŸwiêk__t³umaczenia_nazwa_kopia_l then


  if komunikaty_wczytaj_f then
    DŸwiêki__Komunikaty__Wczytaj();

end;//---//Funkcja DŸwiêki__Komunikaty__Lista_Wczytaj().

//Funkcja DŸwiêki__L¹dów__Zwolnij_Wszystkie().
procedure TStatki_Form.DŸwiêki__L¹dów__Zwolnij_Wszystkie( const czy_dŸwiêk_dla_l¹du_f, czy_dŸwiêk_dla_statku_f : boolean );
var
  i : integer;
begin

  for i := DŸwiêki_L¹dów_GLSoundLibrary.Samples.Count - 1 downto 0 do
    if   (
               ( czy_dŸwiêk_dla_l¹du_f )
           and (  Pos( dŸwiêki__l¹dów_prefiks__l¹d_c, DŸwiêki_L¹dów_GLSoundLibrary.Samples[ i ].Name ) = 1  )
         )
      or (
               ( czy_dŸwiêk_dla_statku_f )
           and (  Pos( dŸwiêki__l¹dów_prefiks__statek_c, DŸwiêki_L¹dów_GLSoundLibrary.Samples[ i ].Name ) = 1  )
         ) then
      DŸwiêki_L¹dów_GLSoundLibrary.Samples.Delete( i );

end;//---//Funkcja DŸwiêki__L¹dów__Zwolnij_Wszystkie().

//Funkcja Elementy_Gry_Przygotuj().
procedure TStatki_Form.Elementy_Gry_Przygotuj();
var
  i,
  zti
    : integer;
begin

  //
  // Funkcja przygotowuje elementy potrzebne dla gry.
  //

  id_amunicja_g := Low( cardinal );

  if not czy_klient_g then // Klient otrzyma wytyczne tworzenia statków osobno.
    begin

      zti := -1;

      for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
        begin

          inc( zti );

          SetLength( statki_t, zti + 1 );
          statki_t[ zti ] := TStatek.Create(  Gra_Obiekty_GLDummyCube, Gra_GLCollisionManager, Efekt__Element_Uszkodzenie_Menad¿er__Zwróæ(), TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd, zti, Statek_Odczytaj_Schemat( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek_schemat__kd ), prymitywy_lista_t, Punkty_¯ycia_WskaŸnik__Material_Options_Ustal(), statek_create_funkcje_g, t³umaczenie_komunikaty_r  );
          statki_t[ zti ].id_grupa := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_grupa__kd;
          statki_t[ zti ].id_statek_schemat := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek_schemat__kd;
          statki_t[ zti ].gracz__nazwa.Text :=
            TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).nazwa__kd +
            ' (gr ' +
            IntToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_grupa__kd ) +
            ')';
          statki_t[ zti ].Wygl¹d_Elementy__Noc_Zmieñ( dzieñ_jasnoœæ_g, Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBox.Checked, Wygl¹d_Elementy__Kolor_Noc_Zmieñ );

          if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).peer_port_tcp__kd = si_peer_port_c then
            statki_t[ zti ].si_decyduje := true;

          if statki_t[ zti ].czy_lotniskowiec then
            statki_t[ zti ].lotniskowiec__gotowy_na_przyjêcie_samolotu := not statki_t[ zti ].si_decyduje;


          // Gdy gracz nie jest gotowy to ma id_grupa = 0 i przy rozstawianiu statków indeks jest poza zakresem tabeli gra_pozycja_pocz¹tkowa_parametry_t.
          //if    ( statki_t[ zti ].id_grupa <> 1 )
          //  and ( statki_t[ zti ].id_grupa <> 2 ) then
          //   statki_t[ zti ].id_grupa := 1;


          if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd = Gracz_Identyfikator() then
            begin

              // Najpierw na liœcie jest lotniskowiec potem samolot.
              statek_gracza := statki_t[ zti ];

              Celowanie_ParametryClick( nil );

              statek_gracza.Elementy_Gracza_Dostosuj( -99, Celownik_Bombowiec_Widocznoœæ_CheckBox.Checked, Gra_GLCamera.AbsolutePosition.Y < 0, L¹dowanie_U³atwione_CheckBox.Checked, Punkty_¯ycia_WskaŸnik__Gracz_CheckBox.Checked, false, false, Obrót_K¹t_Zablokowany_WskaŸnik_CheckBox.Checked, Obrót_K¹t_Zablokowany_Strza³_WskaŸnik_CheckBox.Checked, Prze³adowanie_WskaŸnik_CheckBox.Checked );

              Interfejs_Parametry_Wed³ug_Statku_Ustaw();

            end
          else//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd = Gracz_Identyfikator() then
            begin

              statki_t[ zti ].Elementy_Gracza_Widocznoœæ( Gracz_Grupa_SpinEdit.Value, false );
              statki_t[ zti ].Elementy_Gracza_Dostosuj( Gracz_Grupa_SpinEdit.Value, Celownik_Bombowiec_Widocznoœæ_CheckBox.Checked, Gra_GLCamera.AbsolutePosition.Y < 0, L¹dowanie_U³atwione_CheckBox.Checked, false, Punkty_¯ycia_WskaŸnik__Przeciwnik_CheckBox.Checked, Punkty_¯ycia_WskaŸnik__Sojusznik_CheckBox.Checked, false, false, false );

            end;
          //---//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd = Gracz_Identyfikator() then


          if    ( statki_t[ zti ].czy_lotniskowiec )
            and ( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek__samolot_schemat__kd > -1 ) then
            begin

              inc( zti );

              SetLength( statki_t, zti + 1 );
              statki_t[ zti ] := TStatek.Create(  Gra_Obiekty_GLDummyCube, Gra_GLCollisionManager, Efekt__Element_Uszkodzenie_Menad¿er__Zwróæ(), TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd, zti, Statek_Odczytaj_Schemat( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek__samolot_schemat__kd ), prymitywy_lista_t, Punkty_¯ycia_WskaŸnik__Material_Options_Ustal(), statek_create_funkcje_g, t³umaczenie_komunikaty_r  );
              statki_t[ zti ].id_grupa := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_grupa__kd;
              statki_t[ zti ].id_statek_schemat := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek__samolot_schemat__kd;
              statki_t[ zti ].gracz__nazwa.Text :=
                '^ ' +
                TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).nazwa__kd +
                ' (gr ' +
                IntToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_grupa__kd ) +
                ')' +
                ' ^';
              statki_t[ zti ].czy_samolot := true;
              statki_t[ zti ].Wygl¹d_Elementy__Noc_Zmieñ( dzieñ_jasnoœæ_g, Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBox.Checked, Wygl¹d_Elementy__Kolor_Noc_Zmieñ );

              statki_t[ zti ].czy_samolot := true;
              statki_t[ zti - 1 ].Samolot_Przyjmij( statki_t[ zti ], true );

              if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).peer_port_tcp__kd = si_peer_port_c then
                statki_t[ zti ].si_decyduje := true;


              // Gdy gracz nie jest gotowy to ma id_grupa = 0 i przy rozstawianiu statków indeks jest poza zakresem tabeli gra_pozycja_pocz¹tkowa_parametry_t.
              //if    ( statki_t[ zti ].id_grupa <> 1 )
              //  and ( statki_t[ zti ].id_grupa <> 2 ) then
              //   statki_t[ zti ].id_grupa := 1;


              if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd = Gracz_Identyfikator() then
                begin

                  samolot__statek_gracza := statki_t[ zti ];

                  Celowanie_ParametryClick( nil );

                  samolot__statek_gracza.Elementy_Gracza_Dostosuj( -99, Celownik_Bombowiec_Widocznoœæ_CheckBox.Checked, Gra_GLCamera.AbsolutePosition.Y < 0, L¹dowanie_U³atwione_CheckBox.Checked, Punkty_¯ycia_WskaŸnik__Gracz_CheckBox.Checked, false, false, Obrót_K¹t_Zablokowany_WskaŸnik_CheckBox.Checked, Obrót_K¹t_Zablokowany_Strza³_WskaŸnik_CheckBox.Checked, Prze³adowanie_WskaŸnik_CheckBox.Checked );

                  Interfejs_Parametry_Wed³ug_Statku_Ustaw();

                end
              else//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd = Gracz_Identyfikator() then
                begin

                  statki_t[ zti ].Elementy_Gracza_Widocznoœæ( Gracz_Grupa_SpinEdit.Value, false );
                  statki_t[ zti ].Elementy_Gracza_Dostosuj( Gracz_Grupa_SpinEdit.Value, Celownik_Bombowiec_Widocznoœæ_CheckBox.Checked, Gra_GLCamera.AbsolutePosition.Y < 0, L¹dowanie_U³atwione_CheckBox.Checked, false, Punkty_¯ycia_WskaŸnik__Przeciwnik_CheckBox.Checked, Punkty_¯ycia_WskaŸnik__Sojusznik_CheckBox.Checked, false, false, false );

                end;
              //---//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd = Gracz_Identyfikator() then


            end;
          //---//if    ( statki_t[ zti ].czy_lotniskowiec ) (...)

        end;
      //---//for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do


      Statki__Punkty_¯ycia_WskaŸnik__Efekty_Tryb_Ustaw();


      L¹d__Utwórz( L¹d_ComboBox.ItemIndex ); // Wczytuje pozycje pocz¹tkowe statków.


      Statki__Rozstaw( nil );


      dŸwiêki__losowe_uruchomione__wszystkie__statki_g := false;

    end;
  //---//if not czy_klient_g then


  if not czy_klient_g then
    if statek_gracza = nil then
      Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_zlokalizowaæ_statku_gracza, t³umaczenie_komunikaty_r.komunikat__informacja, MB_ICONEXCLAMATION )
    else//if statek_gracza = nil then
      if    ( statek_gracza.czy_lotniskowiec )
        and ( samolot__statek_gracza = nil ) then
        //Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_zlokalizowaæ_samolotu_gracza, t³umaczenie_komunikaty_r.komunikat__informacja, MB_ICONEXCLAMATION );
        Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_zlokalizowaæ_samolotu_gracza );

end;//---//Funkcja Elementy_Gry_Przygotuj().

//Funkcja Elementy_Gry_Zwolnij().
procedure TStatki_Form.Elementy_Gry_Zwolnij( const czy_start_gry : boolean = true );
var
  i : integer;
begin

  //
  // Funkcja zwalnia utworzone elementy gry.
  //
  // Parametry:
  //   czy_start_gry:
  //     false - nie zeruje czasu gry.
  //     true - zeruje czas gry.
  //

  Amunicja_Wystrzelona_Zwolnij_Wszystkie();


  for i := wieloosobowe_amunicja_wystrzelona_list.Count - 1 downto 0 do
    Wieloosobowe_Amunicja_Wystrzelona_Zwolnij_Jeden( wieloosobowe_amunicja_wystrzelona_list, i );


  L¹d__Zwolnij();

  DŸwiêki__Efekt__Zwolnij_Wszystkie();
  DŸwiêki__Komunikat__Zwolnij_Wszystkie();
  Œlad_Torowy__Zwolnij_Wszystkie();
  Trafienia_Efekt__Zwolnij_Wszystkie();


  Statki_Zwolnij();


  Wieloosobowe_Statki__Rekord_Czyœæ();

  SetLength( wieloosobowe__amunicja_t, 0 );
  SetLength( wieloosobowe__efekt_t, 0 );


  //if czy_start_gry then // Je¿eli jest widoczny efekt rozb³ysku to po wyzerowaniu czasu efekt ten siê cofa i zwalnia dzia³anie gry.
  //  Gra_GLCadencer.CurrentTime := 0;  // Czas (bezwzglêdny) up³ywaj¹cy w grze (zatrzymuje siê podczas pauzy). // Wywo³uje siê podczas uruchamiania i zakañczania gry lokalnej, na serwerze i u klienta.

end;//---//Funkcja Elementy_Gry_Zwolnij().

//Funkcja Efekt__Element_Uszkodzenie_Menad¿er__Zwróæ().
function TStatki_Form.Efekt__Element_Uszkodzenie_Menad¿er__Zwróæ() : TGLThorFXManager;
begin

  //
  // Funkcja je¿eli w ustawieniach aktywny jest odpowiedni efekt.
  //
  // Zwraca menad¿era efektów uszkodzeñ lub nil.
  //

  if Efekty__Element_Uszkodzenie_CheckBox.Checked then
    Result := Efekt__Element_Uszkodzenie_GLThorFXManager
  else//if Efekty__Element_Uszkodzenie_CheckBox.Checked then
    Result := nil;

end;//---//Funkcja Efekt__Element_Uszkodzenie_Menad¿er__Zwróæ().

//Funkcja Fala__Wysokoœæ_Na_Zboczu().
function TStatki_Form.Fala__Wysokoœæ_Na_Zboczu( const absolute_position_f : GLS.VectorTypes.TVector4f ) : single;
var
  zt_vector : GLS.VectorTypes.TVector4f;
begin

  if not Fale_CheckBox.Checked then
    begin

      Result := 0;
      Exit;

    end;
  //---//if not Fale_CheckBox.Checked then


  zt_vector := Fale_GLTerrainRenderer.AbsoluteToLocal( absolute_position_f );

  Result :=
      (
          fale__woda_poziom_g
        + Sin
            (
              WaterPhase
                (
                  zt_vector.X + Fale_GLTerrainRenderer.TileSize * 0.5,
                  zt_vector.Y + Fale_GLTerrainRenderer.TileSize * 0.5
                )
            )
        * fale__fala_wysokoœæ_g
      )
    * ( Fale_GLTerrainRenderer.Scale.Z / 128 );
    //- 0; // 0 - Korekta w pionie.

end;//---//Funkcja Fala__Wysokoœæ_Na_Zboczu().

//Funkcja Gracz_Identyfikator().
function TStatki_Form.Gracz_Identyfikator() : integer;
begin

  //
  // Funkcja zwraca identyfikator gracza.
  //
  // Zwraca identyfikator gracza lub -9999 gdy brak identyfikatora.
  //

  try
    Result := StrToInt( Wieloosobowe_Identyfikator_Edit.Text );
  except
    Result := -broñ_nie_obracana_c;
  end;
  //---//try

end;//---//Funkcja Gracz_Identyfikator().

//Funkcja Gracze_Lista_Odœwie¿().
procedure TStatki_Form.Gracze_Lista_Odœwie¿();

  //Funkcja Data_Czas_Do_Napisu() w Gracze_Lista_Odœwie¿().
  function Data_Czas_Do_Napisu( const data_czas_f : TDateTime ) : string;
  begin

    DateTimeToString( Result, 'yyyy-mm-dd hh:mm:ss', data_czas_f );

  end;//---//Funkcja Data_Czas_Do_Napisu() w Gracze_Lista_Odœwie¿().

var
  ztb : boolean; // Tylko aby wywo³aæ funkcjê.
  i,
  j,
  k,
  kolumna_kopia,
  wiersz_kopia
    : integer;
  zts,
  pokój_rozmów_ignoruj__wiersze_wybrane_kopia_s, // ', 123.456, 78.91,'
  statek_nazwa_l,
  samolot_nazwa_l
    : string;
  zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj : TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj;
  zt_string_list : TStringList; // Mo¿na zast¹piæ TJvMemoryData i TSMDBGrid.
begin//Funkcja Gracze_Lista_Odœwie¿().

  kolumna_kopia := Gracze_Lista_StringGrid.Col;
  wiersz_kopia := Gracze_Lista_StringGrid.Row;

  if Gracze_Lista_StringGrid.ColCount <> 16 then
    Gracze_Lista_StringGrid.ColCount := 16;

  if tcp_klienci_lista_g.klienci_lista_list.Count > 0 then
    Gracze_Lista_StringGrid.RowCount := tcp_klienci_lista_g.klienci_lista_list.Count + 1
  else//if tcp_klienci_lista_g.klienci_lista_list.Count > 0 then
    Gracze_Lista_StringGrid.RowCount := 2; // Pusta lista.


  if Gracze_Lista_StringGrid.Cells[ 0, 0 ] = '' then
    begin

      Gracze_Lista_StringGrid.Cells[ 0, 0 ] := t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__l_p;
      Gracze_Lista_StringGrid.Cells[ 1, 0 ] := t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__id_gracza;
      Gracze_Lista_StringGrid.Cells[ 2, 0 ] := t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__nazwa;
      Gracze_Lista_StringGrid.Cells[ 3, 0 ] := t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__statek;
      Gracze_Lista_StringGrid.Cells[ 4, 0 ] := t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__samolot;
      Gracze_Lista_StringGrid.Cells[ 5, 0 ] := t³umaczenie_komunikaty_r.s³owo__grupa__du¿¹_liter¹;
      Gracze_Lista_StringGrid.Cells[ 6, 0 ] := t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__gotowy;
      Gracze_Lista_StringGrid.Cells[ 7, 0 ] := t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__w_grze;
      Gracze_Lista_StringGrid.Cells[ 8, 0 ] := t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__peer_port_tcp;
      Gracze_Lista_StringGrid.Cells[ 9, 0 ] := t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__peer_port_udp;
      Gracze_Lista_StringGrid.Cells[ 10, 0 ] := t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__dane_wys³ane;
      Gracze_Lista_StringGrid.Cells[ 11, 0 ] := t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__czas_pod³¹czenia;
      Gracze_Lista_StringGrid.Cells[ 12, 0 ] := t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__czas_pod³¹czenia_ostatniego;
      Gracze_Lista_StringGrid.Cells[ 13, 0 ] := t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__czas_od³¹czenia;
      Gracze_Lista_StringGrid.Cells[ 14, 0 ] := t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__czas_kontaktu_udp_ostatniego;
      Gracze_Lista_StringGrid.Cells[ 15, 0 ] := t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__od³¹czony;

    end;
  //---//if Gracze_Lista_StringGrid.Cells[ 0, 0 ] = '' then


  // Czyœci wpisy.
  for i := 0 to Gracze_Lista_StringGrid.ColCount - 1 do
    for j := 1 to Gracze_Lista_StringGrid.RowCount - 1 do
      Gracze_Lista_StringGrid.Cells[ i, j ] := '';


  {$region 'Wersja bez sortowania.'}
  //for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
  //  begin
  //
  //    Gracze_Lista_StringGrid.Cells[ 0, i + 1 ] := IntToStr( i + 1 );
  //    Gracze_Lista_StringGrid.Cells[ 1, i + 1 ] := IntToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd );
  //    Gracze_Lista_StringGrid.Cells[ 2, i + 1 ] := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).nazwa__kd;
  //
  //    j := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek_schemat__kd;
  //    Gracze_Lista_StringGrid.Cells[ 3, i + 1 ] := Trim(  FormatFloat( '### ### ##0', j )  );
  //      if    ( j >= 0 )
  //        and (  j <= Length( statki_lista_t ) - 1 ) then
  //        Gracze_Lista_StringGrid.Cells[ 3, i + 1 ] := Gracze_Lista_StringGrid.Cells[ 3, i + 1 ] + ' - ' + statki_lista_t[ j ].nazwa;
  //
  //    j := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek__samolot_schemat__kd;
  //    Gracze_Lista_StringGrid.Cells[ 4, i + 1 ] := Trim(  FormatFloat( '### ### ##0', j )  );
  //      if    ( j >= 0 )
  //        and (  j <= Length( statki_lista_t ) - 1 ) then
  //        Gracze_Lista_StringGrid.Cells[ 4, i + 1 ] := Gracze_Lista_StringGrid.Cells[ 4, i + 1 ] + ' - ' + statki_lista_t[ j ].nazwa;
  //
  //    Gracze_Lista_StringGrid.Cells[ 5, i + 1 ] := Trim(  FormatFloat( '### ### ##0', TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_grupa__kd )  );
  //
  //    if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).gotowy then__kd
  //      Gracze_Lista_StringGrid.Cells[ 6, i + 1 ] := t³umaczenie_komunikaty_r.s³owo__tak
  //    else//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).gotowy__kd then
  //      Gracze_Lista_StringGrid.Cells[ 6, i + 1 ] := t³umaczenie_komunikaty_r.s³owo__nie;
  //
  //    if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).w_grze__kd then__kd
  //      Gracze_Lista_StringGrid.Cells[ 7, i + 1 ] := t³umaczenie_komunikaty_r.s³owo__tak
  //    else//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).w_grze__kd then
  //      Gracze_Lista_StringGrid.Cells[ 7, i + 1 ] := t³umaczenie_komunikaty_r.s³owo__nie;
  //
  //    Gracze_Lista_StringGrid.Cells[ 8, i + 1 ] := Trim(  FormatFloat( '### ### ##0', TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).peer_port_tcp__kd )  );
  //    Gracze_Lista_StringGrid.Cells[ 9, i + 1 ] := Trim(  FormatFloat( '### ### ##0', TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).peer_port_udp__kd )  );
  //
  //    if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).dane_wys³ane__kd then__kd
  //      Gracze_Lista_StringGrid.Cells[ 10, i + 1 ] := t³umaczenie_komunikaty_r.s³owo__tak
  //    else//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).dane_wys³ane__kd then
  //      Gracze_Lista_StringGrid.Cells[ 10, i + 1 ] := t³umaczenie_komunikaty_r.s³owo__nie;
  //
  //    Gracze_Lista_StringGrid.Cells[ 11, i + 1 ] := DateTimeToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).data_czas__pod³¹czenia__kd );
  //    Gracze_Lista_StringGrid.Cells[ 12, i + 1 ] := DateTimeToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).data_czas__pod³¹czenia_ostatniego__kd );
  //
  //    if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).data_czas__od³¹czenia__kd <> 0 then
  //      Gracze_Lista_StringGrid.Cells[ 13, i + 1 ] := DateTimeToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).data_czas__od³¹czenia__kd );
  //
  //    if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).data_czas__udp_kontakt__kd <> 0 then
  //      Gracze_Lista_StringGrid.Cells[ 14, i + 1 ] := DateTimeToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).data_czas__udp_kontakt__kd );
  //
  //    if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).od³¹czony__kd then
  //      Gracze_Lista_StringGrid.Cells[ 15, i + 1 ] := t³umaczenie_komunikaty_r.s³owo__tak
  //    else//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).od³¹czony__kd then
  //      Gracze_Lista_StringGrid.Cells[ 15, i + 1 ] := t³umaczenie_komunikaty_r.s³owo__nie;
  //
  //  end;
  ////---//for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
  {$endregion 'Wersja bez sortowania.'}


  zt_string_list := TStringList.Create();


  zt_string_list.Clear();

  for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
    begin

      if    ( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek_schemat__kd >= 0 )
        and (  TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek_schemat__kd <= Length( statki_lista_t ) - 1  ) then
        statek_nazwa_l := statki_lista_t[ TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek_schemat__kd ].nazwa__sl
      else//if    ( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek_schemat__kd >= 0 ) (...)
        statek_nazwa_l := IntToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek_schemat__kd );

      if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek__samolot_schemat__kd <= -1 then
        samolot_nazwa_l := ''
      else//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek__samolot_schemat__kd <= -1 then
        if    ( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek__samolot_schemat__kd >= 0 )
          and (  TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek__samolot_schemat__kd <= Length( statki_lista_t ) - 1  ) then
          samolot_nazwa_l := statki_lista_t[ TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek__samolot_schemat__kd ].nazwa__sl
        else//if    ( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek__samolot_schemat__kd >= 0 ) (...)
          samolot_nazwa_l := IntToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek__samolot_schemat__kd );


      case Gracze_Lista_StringGrid.kolumna_sortowania_indeks of // Indeks kolumny sortowania.
          0, 1 : zts := IntToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd ); // Id.
          2 : zts := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).nazwa__kd; // Nazwa.
          3 : zts := statek_nazwa_l; // Statek.
          4 : zts := samolot_nazwa_l; // Samolot.
          5 : zts := IntToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_grupa__kd ); // Grupa.
          6 : zts := BoolToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).gotowy__kd ); // Gotowy.
          7 : zts := BoolToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).w_grze__kd ); // W grze.
          8 : zts := IntToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).peer_port_tcp__kd ); // Peer port tcp.
          9 : zts := IntToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).peer_port_udp__kd ); // Peer port udp.
          10 : zts := BoolToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).dane_wys³ane__kd ); // Dane wys³ane.
          11 : zts := Data_Czas_Do_Napisu( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).data_czas__pod³¹czenia__kd ); // Czas pod³¹czenia.
          12 : zts := Data_Czas_Do_Napisu( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).data_czas__pod³¹czenia_ostatniego__kd ); // Czas pod³¹czenia ostatniego.
          13 : zts := Data_Czas_Do_Napisu( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).data_czas__od³¹czenia__kd ); // Czas od³¹czenia.
          14 : zts := Data_Czas_Do_Napisu( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).data_czas__udp_kontakt__kd ); // Czas kontaktu udp ostatniego.
          15 : zts := BoolToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).od³¹czony__kd ); // Od³¹czony.
          else//case Gracze_Lista_StringGrid.kolumna_sortowania_indeks of
            zts := '';
        end;
      //---//case Gracze_Lista_StringGrid.kolumna_sortowania_indeks of


      case Gracze_Lista_StringGrid.kolumna_sortowania_indeks of // Indeks kolumny sortowania.
          3, 4 : zts := zts + IntToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_grupa__kd ); // Statek, samolot.
          5 : zts := zts + statek_nazwa_l; // Grupa.
        end;
      //---//case Gracze_Lista_StringGrid.kolumna_sortowania_indeks of


      // Liczby ujemne poprzedza spacj¹ aby lepiej siê sortowa³y (nadal nie s¹ rosn¹co).
      if    ( Gracze_Lista_StringGrid.kolumna_sortowania_indeks in [ 0, 1, 8, 9 ] ) // Id, peer port tcp, peer port udp.
        and ( Length( zts ) > 0 )
        and ( zts[ 1 ] = '-' ) then
        zts := ' ' + zts;


      zts := zts + TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).nazwa__kd;


      zts := zts + ';' + IntToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd );

      zt_string_list.Add( zts );

    end;
  //---//for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do


  zt_string_list.Sort();


  for k := 0 to zt_string_list.Count - 1 do
    for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
      if Identyfikator_Z_Listy_Sortowania_Wy³uskaj( zt_string_list[ k ] ) = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd then
        begin

          Gracze_Lista_StringGrid.Cells[ 0, k + 1 ] := IntToStr( k + 1 );
          Gracze_Lista_StringGrid.Cells[ 1, k + 1 ] := IntToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd );
          Gracze_Lista_StringGrid.Cells[ 2, k + 1 ] := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).nazwa__kd;

          j := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek_schemat__kd;
          Gracze_Lista_StringGrid.Cells[ 3, k + 1 ] := '';
            if    ( j >= 0 )
              and (  j <= Length( statki_lista_t ) - 1  ) then
              Gracze_Lista_StringGrid.Cells[ 3, k + 1 ] := Gracze_Lista_StringGrid.Cells[ 3, k + 1 ] + statki_lista_t[ j ].nazwa__sl;
          Gracze_Lista_StringGrid.Cells[ 3, k + 1 ] := Gracze_Lista_StringGrid.Cells[ 3, k + 1 ] + ' (' + t³umaczenie_komunikaty_r.ekran_napis__id__skrót + ' ' + Trim(  FormatFloat( '### ### ##0', j )  ) + ')';

          j := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek__samolot_schemat__kd;
          Gracze_Lista_StringGrid.Cells[ 4, k + 1 ] := '';
            if    ( j >= 0 )
              and (  j <= Length( statki_lista_t ) - 1  ) then
              Gracze_Lista_StringGrid.Cells[ 4, k + 1 ] := Gracze_Lista_StringGrid.Cells[ 4, k + 1 ] + statki_lista_t[ j ].nazwa__sl;
          if j > -1 then
            Gracze_Lista_StringGrid.Cells[ 4, k + 1 ] := Gracze_Lista_StringGrid.Cells[ 4, k + 1 ] + ' (' + t³umaczenie_komunikaty_r.ekran_napis__id__skrót + ' ' + Trim(  FormatFloat( '### ### ##0', j )  ) + ')';

          Gracze_Lista_StringGrid.Cells[ 5, k + 1 ] := Trim(  FormatFloat( '### ### ##0', TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_grupa__kd )  );

          if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).gotowy__kd then
            Gracze_Lista_StringGrid.Cells[ 6, k + 1 ] := t³umaczenie_komunikaty_r.s³owo__tak
          else//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).gotowy__kd then
            Gracze_Lista_StringGrid.Cells[ 6, k + 1 ] := t³umaczenie_komunikaty_r.s³owo__nie;

          if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).w_grze__kd then
            Gracze_Lista_StringGrid.Cells[ 7, k + 1 ] := t³umaczenie_komunikaty_r.s³owo__tak
          else//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).w_grze__kd then
            Gracze_Lista_StringGrid.Cells[ 7, k + 1 ] := t³umaczenie_komunikaty_r.s³owo__nie;

          Gracze_Lista_StringGrid.Cells[ 8, k + 1 ] := Trim(  FormatFloat( '### ### ##0', TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).peer_port_tcp__kd )  );
          Gracze_Lista_StringGrid.Cells[ 9, k + 1 ] := Trim(  FormatFloat( '### ### ##0', TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).peer_port_udp__kd )  );

          if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).dane_wys³ane__kd then
            Gracze_Lista_StringGrid.Cells[ 10, k + 1 ] := t³umaczenie_komunikaty_r.s³owo__tak
          else//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).dane_wys³ane__kd then
            Gracze_Lista_StringGrid.Cells[ 10, k + 1 ] := t³umaczenie_komunikaty_r.s³owo__nie;

          Gracze_Lista_StringGrid.Cells[ 11, k + 1 ] := DateTimeToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).data_czas__pod³¹czenia__kd );
          Gracze_Lista_StringGrid.Cells[ 12, k + 1 ] := DateTimeToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).data_czas__pod³¹czenia_ostatniego__kd );

          if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).data_czas__od³¹czenia__kd <> 0 then
            Gracze_Lista_StringGrid.Cells[ 13, k + 1 ] := DateTimeToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).data_czas__od³¹czenia__kd );

          if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).data_czas__udp_kontakt__kd <> 0 then
            Gracze_Lista_StringGrid.Cells[ 14, k + 1 ] := DateTimeToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).data_czas__udp_kontakt__kd );

          if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).od³¹czony__kd then
            Gracze_Lista_StringGrid.Cells[ 15, k + 1 ] := t³umaczenie_komunikaty_r.s³owo__tak
          else//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).od³¹czony__kd then
            Gracze_Lista_StringGrid.Cells[ 15, k + 1 ] := t³umaczenie_komunikaty_r.s³owo__nie;


          Break;

        end;
      //---//if Identyfikator_Z_Listy_Sortowania_Wy³uskaj( zt_string_list[ k ] ) = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator then


  if tcp_klienci_lista_g.klienci_lista_list.Count <= 0 then
    Gracze_Lista_StringGrid.Cells[ 1, 1 ] := '<' + t³umaczenie_komunikaty_r.s³owo__brak__ma³¹_liter¹ + '>';


  if Gracze_Lista_StringGrid.ColCount - 1 >= kolumna_kopia then
    Gracze_Lista_StringGrid.Col := kolumna_kopia;

  if Gracze_Lista_StringGrid.RowCount - 1 >= wiersz_kopia then
    Gracze_Lista_StringGrid.Row := wiersz_kopia;


  {$region 'Dodaje odbiorców wiadomoœci dla pokoju rozmów i listy ignorowanych nadawców.'}
  j := Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.ItemIndex;

  for i := 0 to Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Items.Count - 1 do
    TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj(Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Items.Objects[ i ]).Free();

  Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Clear();


  // Zapamiêtuje zaznaczone wiersze.
  pokój_rozmów_ignoruj__wiersze_wybrane_kopia_s := ',';

  for i := 0 to Pokój_Rozmów__Ignoruj_CheckListBox.Items.Count - 1 do
    if Pokój_Rozmów__Ignoruj_CheckListBox.Checked[ i ] then
      pokój_rozmów_ignoruj__wiersze_wybrane_kopia_s := pokój_rozmów_ignoruj__wiersze_wybrane_kopia_s +
        ' ' +
        IntToStr( TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj(Pokój_Rozmów__Ignoruj_CheckListBox.Items.Objects[ i ]).id_odbiorca ) +
        '.' +
        IntToStr( integer(TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj(Pokój_Rozmów__Ignoruj_CheckListBox.Items.Objects[ i ]).odbiorca_rodzaj) ) +
        ',';
  //---// Zapamiêtuje zaznaczone wiersze.

  for i := 0 to Pokój_Rozmów__Ignoruj_CheckListBox.Items.Count - 1 do
    TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj(Pokój_Rozmów__Ignoruj_CheckListBox.Items.Objects[ i ]).Free();

  Pokój_Rozmów__Ignoruj_CheckListBox.Clear();


  zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj := TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj.Create();
  zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj.id_odbiorca := 0;
  zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj.odbiorca_rodzaj := pror_Wszyscy;
  Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Items.AddObject( '<' + t³umaczenie_komunikaty_r.s³owo__wszyscy + '>', zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj );


  zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj := TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj.Create();
  zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj.id_odbiorca := 0;
  zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj.odbiorca_rodzaj := pror_Wszyscy;
  Pokój_Rozmów__Ignoruj_CheckListBox.Items.AddObject( '<' + t³umaczenie_komunikaty_r.s³owo__wszyscy + '>', zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj );


  for i := Gracz_Grupa_SpinEdit.MinValue to Gracz_Grupa_SpinEdit.MaxValue do
    begin

      zts := ' ' + t³umaczenie_komunikaty_r.s³owo__grupa__ma³¹_liter¹ + ' ' + Trim(  FormatFloat( '0', i )  );

      if Gracz_Grupa_SpinEdit.Value = i then
        zts := zts + ' ' + t³umaczenie_komunikaty_r.s³owo__sojusznicy;


      zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj := TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj.Create();
      zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj.id_odbiorca := i;
      zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj.odbiorca_rodzaj := pror_Grupa_Jedna;
      Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Items.AddObject( zts, zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj );


      zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj := TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj.Create();
      zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj.id_odbiorca := i;
      zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj.odbiorca_rodzaj := pror_Grupa_Jedna;
      Pokój_Rozmów__Ignoruj_CheckListBox.Items.AddObject( zts, zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj );

    end;
  //---//for i := Gracz_Grupa_SpinEdit.MinValue to Gracz_Grupa_SpinEdit.MaxValue do


  zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj := TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj.Create();
  zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj.id_odbiorca := 0;
  zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj.odbiorca_rodzaj := pror_Grupa_Jedna;
  Pokój_Rozmów__Ignoruj_CheckListBox.Items.AddObject( t³umaczenie_komunikaty_r.komunikat__grupy_nieokreœlone__klienci_nieuczestnicz¹cy_w_grze_, zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj );

  zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj := TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj.Create();
  zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj.id_odbiorca := si_peer_port_c;
  zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj.odbiorca_rodzaj := pror_Grupa_Jedna;
  Pokój_Rozmów__Ignoruj_CheckListBox.Items.AddObject( t³umaczenie_komunikaty_r.ekran_napis__si, zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj );


  {$region 'Wersja bez sortowania.'}
  //for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
  //  //if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd >= -1 then // Do SI te¿ mo¿na wysy³aæ komunikaty.
  //  if Gracz_Identyfikator() <> TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd then // Samemu do siebie nie mo¿na wysy³aæ wiadomoœci.
  //    begin
  //
  //      zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj := TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj.Create();
  //      zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj.id_odbiorca := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd;
  //      zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj.odbiorca_rodzaj := pror_Gracz_Jeden;
  //
  //      zts := 'gracz ' + TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).nazwa__kd + ' (' + Trim(  FormatFloat( '00', TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd )  ) + ')';
  //
  //      Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Items.AddObject( zts, zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj );
  //
  //    end;
  //  //---//if Gracz_Identyfikator() <> TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd then
  {$endregion 'Wersja bez sortowania.'}


  zt_string_list.Clear();

  for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
    zt_string_list.Add(  TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).nazwa__kd + ';' + IntToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd )  );

  zt_string_list.Sort();


  for k := 0 to zt_string_list.Count - 1 do
    for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
      if Identyfikator_Z_Listy_Sortowania_Wy³uskaj( zt_string_list[ k ] ) = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd then
        begin

          //if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator >= -1 then // Do SI te¿ mo¿na wysy³aæ komunikaty.
          if Gracz_Identyfikator() <> TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd then // Samemu do siebie nie mo¿na wysy³aæ wiadomoœci.
            begin

              zts :=
                //'gracz ' +
                TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).nazwa__kd + ' (' + t³umaczenie_komunikaty_r.ekran_napis__grupa__skrót + ' ' +
                Trim(  FormatFloat( '0', TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_grupa__kd )  ) +
                ', ' + t³umaczenie_komunikaty_r.ekran_napis__id__skrót + ' ' +
                Trim(  FormatFloat( '00', TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd )  ) + ')';


              zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj := TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj.Create();
              zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj.id_odbiorca := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd;
              zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj.odbiorca_rodzaj := pror_Gracz_Jeden;
              Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Items.AddObject( zts, zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj );


              zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj := TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj.Create();
              zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj.id_odbiorca := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd;
              zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj.odbiorca_rodzaj := pror_Gracz_Jeden;
              Pokój_Rozmów__Ignoruj_CheckListBox.Items.AddObject( zts, zt_pokój_rozmów__wyœlij_do__odbiorca_rodzaj );

            end;
          //---//if Gracz_Identyfikator() <> TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd then

          Break;

        end;
      //---//if Identyfikator_Z_Listy_Sortowania_Wy³uskaj( zt_string_list[ k ] ) = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd then


  if j < 0 then
    j := 0;

  if    ( j >= 0 )
    and ( j <= Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Items.Count - 1 ) then
    Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.ItemIndex := j;


  // Przywraca poprzednio zaznaczone wierze.
  for i := 0 to Pokój_Rozmów__Ignoruj_CheckListBox.Items.Count - 1 do
    if Pos
        (
          ', ' +
          IntToStr( TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj(Pokój_Rozmów__Ignoruj_CheckListBox.Items.Objects[ i ]).id_odbiorca ) +
          '.' +
          IntToStr( integer(TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj(Pokój_Rozmów__Ignoruj_CheckListBox.Items.Objects[ i ]).odbiorca_rodzaj) ) +
          ',',
          pokój_rozmów_ignoruj__wiersze_wybrane_kopia_s
        ) > 0
      then
      Pokój_Rozmów__Ignoruj_CheckListBox.Checked[ i ] := true;
  //---// Przywraca poprzednio zaznaczone wierze.
  {$endregion 'Dodaje odbiorców wiadomoœci dla pokoju rozmów i listy ignorowanych nadawców.'}


  FreeAndNil( zt_string_list );


  Gracze_Lista_StringGrid.OnSelectCell( nil, Gracze_Lista_StringGrid.Col, Gracze_Lista_StringGrid.Row, ztb );

end;//---//Funkcja Gracze_Lista_Odœwie¿().

//Funkcja Gracze_Lista_Roz³¹cz().
procedure TStatki_Form.Gracze_Lista_Roz³¹cz( const peer_port_f : integer );
var
  i : integer;
  lista : TList;
begin

  //
  // Funkcja od³¹cza klientów.
  //
  // Parametry:
  //   peer_port_f:
  //     = -99 - od³¹czy wszystkich klientów.
  //     <> -99 - od³¹czy wskazanego klienta.
  //

  lista := IdTCPServer1.Contexts.LockList();

  try
    for i := 0 to lista.Count - 1 do
      if   ( peer_port_f = -99 )
        or ( TIdContext(lista[ i ]).Connection.Socket.Binding.PeerPort = peer_port_f ) then
        TIdContext(lista[ i ]).Connection.Disconnect(); // Nie wywo³uje IdTCPClient1.OnDisconnected().
  finally
    IdTCPServer1.Contexts.UnlockList();
  end;
  //---//try

end;//---//Funkcja Gracze_Lista_Roz³¹cz().

//Funkcja Gra_Statystyki_Zeruj().
procedure TStatki_Form.Gra_Statystyki_Zeruj( var gra_statystyki_r_f : TGra_Statystyki_r );
begin

  gra_statystyki_r_f.id_grupa__gs := -99;
  gra_statystyki_r_f.identyfikator__gs := -99;
  gra_statystyki_r_f.amunicja_wystrzelona_iloœæ__gs := 0;
  gra_statystyki_r_f.amunicja_wystrzelona_obra¿enia_zadawane__gs := 0;
  gra_statystyki_r_f.czas_do_zatoniêcia__najd³u¿szy_sekund__gs := -1;
  gra_statystyki_r_f.czas_do_zatoniêcia__najkrótszy_sekund__gs := -1;
  gra_statystyki_r_f.czas_do_zatoniêcia__suma_sekund__gs := 0;
  gra_statystyki_r_f.obra¿enia_otrzymane__gs := 0;
  gra_statystyki_r_f.obra¿enia_otrzymane__od_sojuszników__gs := 0;
  gra_statystyki_r_f.obra¿enia_otrzymane__z_kolizji__gs := 0;
  gra_statystyki_r_f.obra¿enia_otrzymane__z_zak³óceñ__gs := 0;
  gra_statystyki_r_f.obra¿enia_zadane__amunicja__gs := 0;
  gra_statystyki_r_f.obra¿enia_zadane__amunicja_sojusznikom__gs := 0;
  gra_statystyki_r_f.obra¿enia_zadane__taranowanie__gs := 0;
  gra_statystyki_r_f.obra¿enia_zadane__taranowanie_sojusznikom__gs := 0;
  gra_statystyki_r_f.odnawianie_zasobów_iloœæ_razy__gs := 0;
  gra_statystyki_r_f.taranowania_iloœæ__gs := 0;
  gra_statystyki_r_f.taranowania_iloœæ_sojuszników__gs := 0;
  gra_statystyki_r_f.trafienia__gs := 0;
  gra_statystyki_r_f.zak³ócenia__nieudane__gs := 0;
  gra_statystyki_r_f.zak³ócenia__odbite__cudze__gs := 0;
  gra_statystyki_r_f.zak³ócenia__odbite__w³asne__gs := 0;
  gra_statystyki_r_f.zak³ócenia__udane__gs := 0;
  gra_statystyki_r_f.zatoniêcia__gs := 0;
  gra_statystyki_r_f.zatopienia__gs := 0;
  gra_statystyki_r_f.zatopienia_sojuszników__gs := 0;

end;//---//Funkcja Gra_Statystyki_Zeruj().

//Funkcja Gra_Statystyki_R_Identyfikator_ZnajdŸ().
function TStatki_Form.Gra_Statystyki_R_Identyfikator_ZnajdŸ( const identyfikator_f : integer ) : integer;
var
  i : integer;
begin

  //
  // Funkcja wyszukuje numer indeksu tabeli odpowiadaj¹cy identyfikatorowi gracza.
  //
  // Zwraca numer indeksu tabeli odpowiadaj¹cy identyfikatorowi gracza lub -99 gdy nic nie znajdzie.
  //
  // Parametry:
  //   identyfikator_f równa siê id_gracz //id_statek
  //

  Result := -99;

  for i := 0 to Length( gra_statystyki_r_t ) - 1 do
    if gra_statystyki_r_t[ i ].identyfikator__gs = identyfikator_f then
      begin

        Result := i;
        Exit;

      end;
    //---//if gra_statystyki_r_t[ i ].identyfikator__gs = identyfikator_f then

end;//---//Funkcja Gra_Statystyki_R_Identyfikator_ZnajdŸ().

//Funkcja Gra_Statystyki_Wypisz().
procedure TStatki_Form.Gra_Statystyki_Wypisz( const czy_w_logu_f : boolean );

  //Funkcja Przedstaw_Jako_Procent() w Gra_Statystyki_Wypisz().
  function Przedstaw_Jako_Procent( const suma_cz¹stkowa_f, suma_wszystkich_f : integer; const formatuj_dla_sortowania_f : boolean = false ) : string;
  var
    zts_l : string;
  begin

    if formatuj_dla_sortowania_f then
      zts_l := '000 000 000 000 000.00'
    else//if formatuj_dla_sortowania_f then
      zts_l := '### ### ##0.00';


    if suma_wszystkich_f <> 0 then
      Result := Trim(  FormatFloat( zts_l, suma_cz¹stkowa_f * 100 / suma_wszystkich_f )  )
    else//if suma_wszystkich_f <> 0 then
      Result := '<n/d>';

  end;//---//Funkcja Przedstaw_Jako_Procent() w Gra_Statystyki_Wypisz().

  //Funkcja Œrednia_Wylicz() w Gra_Statystyki_Wypisz().
  function Œrednia_Wylicz( const iloœæ_f, suma_f : integer ) : integer;
  begin

    if iloœæ_f <> 0 then
      Result := Round( suma_f / iloœæ_f )
    else//if iloœæ_f <> 0 then
      Result := -1;

  end;//---//Funkcja Œrednia_Wylicz() w Gra_Statystyki_Wypisz().

  //Funkcja Statystyki_Wypisz() w Gra_Statystyki_Wypisz().
  procedure Statystyki_Wypisz( const gra_statystyki_r_f : TGra_Statystyki_r; const czy_grupa_f : boolean; const kolumna_indeks_f : integer = -99 );
  var
    i_l : integer;
    zts_l,
    nazwa_l_l,
    statek_nazwa_l_l,
    samolot_nazwa_l_l
      : string;

  const
    odstêp_c_l : string = '   ';
  begin

    //
    // Parametry:
    //   kolumna_indeks_f:
    //     0 < wpisuje wartoœci do logu.
    //     0 >= wpisuje wartoœci do tabelki.
    //

    nazwa_l_l := '';
    statek_nazwa_l_l := '';
    samolot_nazwa_l_l := '';


    if not czy_grupa_f then
      begin

        zts_l := '';

        for i_l := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
          if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).identyfikator__kd = gra_statystyki_r_f.identyfikator__gs then
            begin

              zts_l := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).nazwa__kd;
              nazwa_l_l := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).nazwa__kd;


              if    ( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).id_statek_schemat__kd >= 0 )
                and (  TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).id_statek_schemat__kd <= Length( statki_lista_t ) - 1  ) then
                begin

                  zts_l := zts_l + ', ' + statki_lista_t[ TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).id_statek_schemat__kd ].nazwa__sl;
                  statek_nazwa_l_l := statki_lista_t[ TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).id_statek_schemat__kd ].nazwa__sl;

                end;
              //---//if    ( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).id_statek_schemat__kd >= 0 ) (...)


              if    ( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).id_statek__samolot_schemat__kd >= 0 )
                and (  TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).id_statek__samolot_schemat__kd <= Length( statki_lista_t ) - 1  ) then
                samolot_nazwa_l_l := statki_lista_t[ TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).id_statek__samolot_schemat__kd ].nazwa__sl;


              Break;

            end;
          //---//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).identyfikator = gra_statystyki_r_f.identyfikator__gs then


        if Trim( zts_l ) <> '' then
          zts_l := ', ' + zts_l;

        if kolumna_indeks_f < 0 then
          Log_Memo.Lines.Add(   t³umaczenie_komunikaty_r.s³owo__identyfikator + ' ' + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.identyfikator__gs )  ) + zts_l + ', ' + t³umaczenie_komunikaty_r.s³owo__grupa__ma³¹_liter¹ + ' ' + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.id_grupa__gs )  )   );

      end
    else//if not czy_grupa_f then
      begin

        nazwa_l_l := Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.id_grupa__gs )  );

        if kolumna_indeks_f < 0 then
          Log_Memo.Lines.Add(   t³umaczenie_komunikaty_r.s³owo__grupa__ma³¹_liter¹ + ' ' + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.id_grupa__gs )  )   );

      end;
    //---//if not czy_grupa_f then


    if kolumna_indeks_f < 0 then
      begin

        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__amunicja_wystrzelona_iloœæ + ' ' + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.amunicja_wystrzelona_iloœæ__gs )  )   );
        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__amunicja_wystrzelona_obra¿enia_zadawane + ' ' + Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.amunicja_wystrzelona_obra¿enia_zadawane__gs )  )   );
        //Log_Memo.Lines.Add(  odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__czas_do_zatoniêcia_najd³u¿szy + ' ' + Sekundy_W__Minuty_Sekundy( gra_statystyki_r_f.czas_do_zatoniêcia__najd³u¿szy_sekund__gs )  );
        //Log_Memo.Lines.Add(  odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__czas_do_zatoniêcia_najkrótszy + ' ' + Sekundy_W__Minuty_Sekundy( gra_statystyki_r_f.czas_do_zatoniêcia__najkrótszy_sekund__gs )  );
        //Log_Memo.Lines.Add(  odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__czas_do_zatoniêcia_suma + ' ' + Sekundy_W__Minuty_Sekundy( gra_statystyki_r_f.czas_do_zatoniêcia__suma_sekund__gs )  );
        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__czas_do_zatoniêcia_œredni + ' ' + Sekundy_W__Minuty_Sekundy(  Œrednia_Wylicz( gra_statystyki_r_f.zatoniêcia__gs, gra_statystyki_r_f.czas_do_zatoniêcia__suma_sekund__gs )  )   );
        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_otrzymane + ' ' + Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_otrzymane__gs )  )   );
        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_otrzymane_w_tym_od_sojuszników + ' ' + Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_otrzymane__od_sojuszników__gs )  )   );
        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_otrzymane_w_tym_z_kolizji + ' ' + Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_otrzymane__z_kolizji__gs )  )   );
        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_otrzymane_z_zak³óceñ + ' ' + Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_otrzymane__z_zak³óceñ__gs )  )   );
        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_zadane_amunicja + ' ' + Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_zadane__amunicja__gs )  )   );
        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_zadane_amunicja_w_tym_sojusznikom + ' ' + Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_zadane__amunicja_sojusznikom__gs )  )   );
        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_zadane_taranowanie + ' ' + Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_zadane__taranowanie__gs )  )   );
        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_zadane_taranowanie_w_tym_sojusznikom + ' ' + Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_zadane__taranowanie_sojusznikom__gs )  )   );
        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__odnawianie_zasobów_iloœæ_razy + ' ' + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.odnawianie_zasobów_iloœæ_razy__gs )  )   );
        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__taranowania_iloœæ + ' ' + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.taranowania_iloœæ__gs )  )   );
        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__taranowania_iloœæ_sojuszników + ' ' + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.taranowania_iloœæ_sojuszników__gs )  )   );
        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__trafienia + ' ' + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.trafienia__gs )  )   );
        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__zak³ócenia_nieudane + ' ' + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.zak³ócenia__nieudane__gs )  )   );
        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__zak³ócenia_odbite_cudze + ' ' + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.zak³ócenia__odbite__cudze__gs )  )   );
        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__zak³ócenia_odbite_w³asne + ' ' + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.zak³ócenia__odbite__w³asne__gs )  )   );
        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__zak³ócenia_udane + ' ' + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.zak³ócenia__udane__gs )  )   );
        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__zatoniêcia + ' ' + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.zatoniêcia__gs )  )   );
        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__zatopienia + ' ' + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.zatopienia__gs )  )   );
        //Log_Memo.Lines.Add(   odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__zatopienia_w_tym_sojuszników + ' ' + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.zatopienia_sojuszników__gs )  )   );
        //Log_Memo.Lines.Add(  odstêp_c_l + t³umaczenie_komunikaty_r.statystyki__log__celnoœæ_procent + ' ' + Przedstaw_Jako_Procent( gra_statystyki_r_f.trafienia__gs, gra_statystyki_r_f.amunicja_wystrzelona_iloœæ__gs )  );

        Log_Memo.Lines.Add(   odstêp_c_l + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.amunicja_wystrzelona_iloœæ__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__amunicja_wystrzelona_iloœæ   );
        Log_Memo.Lines.Add(   odstêp_c_l + Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.amunicja_wystrzelona_obra¿enia_zadawane__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__amunicja_wystrzelona_obra¿enia_zadawane   );
        Log_Memo.Lines.Add(  odstêp_c_l + Sekundy_W__Minuty_Sekundy( gra_statystyki_r_f.czas_do_zatoniêcia__najd³u¿szy_sekund__gs ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__czas_do_zatoniêcia_najd³u¿szy  );
        Log_Memo.Lines.Add(  odstêp_c_l + Sekundy_W__Minuty_Sekundy( gra_statystyki_r_f.czas_do_zatoniêcia__najkrótszy_sekund__gs ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__czas_do_zatoniêcia_najkrótszy  );
        Log_Memo.Lines.Add(  odstêp_c_l + Sekundy_W__Minuty_Sekundy( gra_statystyki_r_f.czas_do_zatoniêcia__suma_sekund__gs ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__czas_do_zatoniêcia_suma  );
        Log_Memo.Lines.Add(   odstêp_c_l + Sekundy_W__Minuty_Sekundy(  Œrednia_Wylicz( gra_statystyki_r_f.zatoniêcia__gs, gra_statystyki_r_f.czas_do_zatoniêcia__suma_sekund__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__czas_do_zatoniêcia_œredni   );
        Log_Memo.Lines.Add(   odstêp_c_l + Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_otrzymane__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_otrzymane   );
        Log_Memo.Lines.Add(   odstêp_c_l + Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_otrzymane__od_sojuszników__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_otrzymane_w_tym_od_sojuszników   );
        Log_Memo.Lines.Add(   odstêp_c_l + Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_otrzymane__z_kolizji__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_otrzymane_w_tym_z_kolizji   );
        Log_Memo.Lines.Add(   odstêp_c_l + Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_otrzymane__z_zak³óceñ__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_otrzymane_z_zak³óceñ   );
        Log_Memo.Lines.Add(   odstêp_c_l + Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_zadane__amunicja__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_zadane_amunicja   );
        Log_Memo.Lines.Add(   odstêp_c_l + Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_zadane__amunicja_sojusznikom__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_zadane_amunicja_w_tym_sojusznikom   );
        Log_Memo.Lines.Add(   odstêp_c_l + Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_zadane__taranowanie__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_zadane_taranowanie   );
        Log_Memo.Lines.Add(   odstêp_c_l + Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_zadane__taranowanie_sojusznikom__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_zadane_taranowanie_w_tym_sojusznikom   );
        Log_Memo.Lines.Add(   odstêp_c_l + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.odnawianie_zasobów_iloœæ_razy__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__odnawianie_zasobów_iloœæ_razy   );
        Log_Memo.Lines.Add(   odstêp_c_l + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.taranowania_iloœæ__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__taranowania_iloœæ   );
        Log_Memo.Lines.Add(   odstêp_c_l + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.taranowania_iloœæ_sojuszników__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__taranowania_iloœæ_sojuszników   );
        Log_Memo.Lines.Add(   odstêp_c_l + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.trafienia__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__trafienia   );
        Log_Memo.Lines.Add(   odstêp_c_l + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.zak³ócenia__nieudane__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__zak³ócenia_nieudane   );
        Log_Memo.Lines.Add(   odstêp_c_l + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.zak³ócenia__odbite__cudze__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__zak³ócenia_odbite_cudze   );
        Log_Memo.Lines.Add(   odstêp_c_l + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.zak³ócenia__odbite__w³asne__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__zak³ócenia_odbite_w³asne   );
        Log_Memo.Lines.Add(   odstêp_c_l + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.zak³ócenia__udane__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__zak³ócenia_udane   );
        Log_Memo.Lines.Add(   odstêp_c_l + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.zatoniêcia__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__zatoniêcia   );
        Log_Memo.Lines.Add(   odstêp_c_l + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.zatopienia__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__zatopienia   );
        Log_Memo.Lines.Add(   odstêp_c_l + Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.zatopienia_sojuszników__gs )  ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__zatopienia_w_tym_sojuszników   );
        Log_Memo.Lines.Add(  odstêp_c_l + Przedstaw_Jako_Procent( gra_statystyki_r_f.trafienia__gs, gra_statystyki_r_f.amunicja_wystrzelona_iloœæ__gs ) + ' ' + t³umaczenie_komunikaty_r.statystyki__log__celnoœæ_procent  );

      end
    else//if kolumna_indeks_f < 0 then
      begin

        Statystyki_StringGrid.Cells[ 0, kolumna_indeks_f ] := IntToStr( kolumna_indeks_f );

        if not czy_grupa_f then
          Statystyki_StringGrid.Cells[ 1, kolumna_indeks_f ] := IntToStr( gra_statystyki_r_f.identyfikator__gs )
        else//if not czy_grupa_f then
          Statystyki_StringGrid.Cells[ 1, kolumna_indeks_f ] := t³umaczenie_komunikaty_r.s³owo__grupa__du¿¹_liter¹;

        Statystyki_StringGrid.Cells[ 2, kolumna_indeks_f ] := IntToStr( gra_statystyki_r_f.id_grupa__gs );
        Statystyki_StringGrid.Cells[ 3, kolumna_indeks_f ] := nazwa_l_l;
        Statystyki_StringGrid.Cells[ 4, kolumna_indeks_f ] := statek_nazwa_l_l;
        Statystyki_StringGrid.Cells[ 5, kolumna_indeks_f ] := samolot_nazwa_l_l;
        Statystyki_StringGrid.Cells[ 6, kolumna_indeks_f ] := Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.amunicja_wystrzelona_iloœæ__gs )  );
        Statystyki_StringGrid.Cells[ 7, kolumna_indeks_f ] := Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.amunicja_wystrzelona_obra¿enia_zadawane__gs )  );
        Statystyki_StringGrid.Cells[ 8, kolumna_indeks_f ] := Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_otrzymane__gs )  );
        Statystyki_StringGrid.Cells[ 9, kolumna_indeks_f ] := Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_otrzymane__od_sojuszników__gs )  );
        Statystyki_StringGrid.Cells[ 10, kolumna_indeks_f ] := Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_otrzymane__z_kolizji__gs )  );
        Statystyki_StringGrid.Cells[ 11, kolumna_indeks_f ] := Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_zadane__amunicja__gs )  );
        Statystyki_StringGrid.Cells[ 12, kolumna_indeks_f ] := Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_zadane__amunicja_sojusznikom__gs )  );
        Statystyki_StringGrid.Cells[ 13, kolumna_indeks_f ] := Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_zadane__taranowanie__gs )  );
        Statystyki_StringGrid.Cells[ 14, kolumna_indeks_f ] := Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_zadane__taranowanie_sojusznikom__gs )  );
        Statystyki_StringGrid.Cells[ 15, kolumna_indeks_f ] := Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.taranowania_iloœæ__gs )  );
        Statystyki_StringGrid.Cells[ 16, kolumna_indeks_f ] := Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.taranowania_iloœæ_sojuszników__gs )  );
        Statystyki_StringGrid.Cells[ 17, kolumna_indeks_f ] := Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.trafienia__gs )  );
        Statystyki_StringGrid.Cells[ 18, kolumna_indeks_f ] := Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.zatoniêcia__gs )  );
        Statystyki_StringGrid.Cells[ 19, kolumna_indeks_f ] := Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.zatopienia__gs )  );
        Statystyki_StringGrid.Cells[ 20, kolumna_indeks_f ] := Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.zatopienia_sojuszników__gs )  );
        Statystyki_StringGrid.Cells[ 21, kolumna_indeks_f ] := Przedstaw_Jako_Procent( gra_statystyki_r_f.trafienia__gs, gra_statystyki_r_f.amunicja_wystrzelona_iloœæ__gs );
        Statystyki_StringGrid.Cells[ 22, kolumna_indeks_f ] := Sekundy_W__Minuty_Sekundy( gra_statystyki_r_f.czas_do_zatoniêcia__najkrótszy_sekund__gs );
        Statystyki_StringGrid.Cells[ 23, kolumna_indeks_f ] := Sekundy_W__Minuty_Sekundy( gra_statystyki_r_f.czas_do_zatoniêcia__najd³u¿szy_sekund__gs );
        Statystyki_StringGrid.Cells[ 24, kolumna_indeks_f ] := Sekundy_W__Minuty_Sekundy( gra_statystyki_r_f.czas_do_zatoniêcia__suma_sekund__gs );
        Statystyki_StringGrid.Cells[ 25, kolumna_indeks_f ] := Sekundy_W__Minuty_Sekundy(  Œrednia_Wylicz( gra_statystyki_r_f.zatoniêcia__gs, gra_statystyki_r_f.czas_do_zatoniêcia__suma_sekund__gs )  );
        Statystyki_StringGrid.Cells[ 26, kolumna_indeks_f ] := Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.zak³ócenia__udane__gs )  );
        Statystyki_StringGrid.Cells[ 27, kolumna_indeks_f ] := Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.zak³ócenia__nieudane__gs )  );
        Statystyki_StringGrid.Cells[ 28, kolumna_indeks_f ] := Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.zak³ócenia__odbite__cudze__gs )  );
        Statystyki_StringGrid.Cells[ 29, kolumna_indeks_f ] := Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.zak³ócenia__odbite__w³asne__gs )  );
        Statystyki_StringGrid.Cells[ 30, kolumna_indeks_f ] := Trim(  FormatFloat( '### ### ##0.00', gra_statystyki_r_f.obra¿enia_otrzymane__z_zak³óceñ__gs )  );
        Statystyki_StringGrid.Cells[ 31, kolumna_indeks_f ] := Trim(  FormatFloat( '### ### ##0', gra_statystyki_r_f.odnawianie_zasobów_iloœæ_razy__gs )  );

      end;
    //---//if kolumna_indeks_f < 0 then

  end;//---//Funkcja Statystyki_Wypisz().

var
  ztb : boolean; // Tylko aby wywo³aæ funkcjê.
  i,
  j,
  k,
  grupy_iloœæ, // Koryguje wiersz do wpisywania danych o graczach i iloœæ grup.
  kolumna_kopia,
  wiersz_kopia
    : integer;
  zts,
  gracz_nazwa_l,
  statek_nazwa_l,
  samolot_nazwa_l
    : string;
  zt_string_list : TStringList; // Mo¿na zast¹piæ TJvMemoryData i TSMDBGrid.
  statystyki__grupa__1_r_l,
  statystyki__grupa__2_r_l
    : TGra_Statystyki_r;
begin

  //
  // Funkcja wypisuje statystyki gry.
  //
  // Obs³uguje tylko 2 grupy.
  //
  // Parametry:
  //   czy_w_logu_f:
  //     false - wypisuje statystyki w tabelce.
  //     true - wypisuje statystyki w tabelce i w logu.
  //

  Gra_Statystyki_Zeruj( statystyki__grupa__1_r_l );
  Gra_Statystyki_Zeruj( statystyki__grupa__2_r_l );


  for i := 0 to Length( gra_statystyki_r_t ) - 1 do
    begin

      if statystyki__grupa__1_r_l.id_grupa__gs = -99 then
        statystyki__grupa__1_r_l.id_grupa__gs := gra_statystyki_r_t[ i ].id_grupa__gs
      else//if statystyki__grupa__1_r_l.id_grupa__gs = -99 then
        if    ( statystyki__grupa__2_r_l.id_grupa__gs = -99 )
          and ( gra_statystyki_r_t[ i ].id_grupa__gs <> statystyki__grupa__1_r_l.id_grupa__gs ) then
          statystyki__grupa__2_r_l.id_grupa__gs := gra_statystyki_r_t[ i ].id_grupa__gs;


      if gra_statystyki_r_t[ i ].id_grupa__gs = statystyki__grupa__1_r_l.id_grupa__gs then
        begin

          statystyki__grupa__1_r_l.amunicja_wystrzelona_iloœæ__gs := statystyki__grupa__1_r_l.amunicja_wystrzelona_iloœæ__gs + gra_statystyki_r_t[ i ].amunicja_wystrzelona_iloœæ__gs;
          statystyki__grupa__1_r_l.amunicja_wystrzelona_obra¿enia_zadawane__gs := statystyki__grupa__1_r_l.amunicja_wystrzelona_obra¿enia_zadawane__gs + gra_statystyki_r_t[ i ].amunicja_wystrzelona_obra¿enia_zadawane__gs;

          if   ( statystyki__grupa__1_r_l.czas_do_zatoniêcia__najd³u¿szy_sekund__gs < gra_statystyki_r_t[ i ].czas_do_zatoniêcia__najd³u¿szy_sekund__gs )
            or ( statystyki__grupa__1_r_l.czas_do_zatoniêcia__najd³u¿szy_sekund__gs = -1 ) then
            statystyki__grupa__1_r_l.czas_do_zatoniêcia__najd³u¿szy_sekund__gs := gra_statystyki_r_t[ i ].czas_do_zatoniêcia__najd³u¿szy_sekund__gs;

          if   ( statystyki__grupa__1_r_l.czas_do_zatoniêcia__najkrótszy_sekund__gs > gra_statystyki_r_t[ i ].czas_do_zatoniêcia__najkrótszy_sekund__gs )
            or ( statystyki__grupa__1_r_l.czas_do_zatoniêcia__najkrótszy_sekund__gs = -1 ) then
            statystyki__grupa__1_r_l.czas_do_zatoniêcia__najkrótszy_sekund__gs := gra_statystyki_r_t[ i ].czas_do_zatoniêcia__najkrótszy_sekund__gs;

          statystyki__grupa__1_r_l.czas_do_zatoniêcia__suma_sekund__gs := statystyki__grupa__1_r_l.czas_do_zatoniêcia__suma_sekund__gs + gra_statystyki_r_t[ i ].czas_do_zatoniêcia__suma_sekund__gs;
          statystyki__grupa__1_r_l.obra¿enia_otrzymane__gs := statystyki__grupa__1_r_l.obra¿enia_otrzymane__gs + gra_statystyki_r_t[ i ].obra¿enia_otrzymane__gs;
          statystyki__grupa__1_r_l.obra¿enia_otrzymane__od_sojuszników__gs := statystyki__grupa__1_r_l.obra¿enia_otrzymane__od_sojuszników__gs + gra_statystyki_r_t[ i ].obra¿enia_otrzymane__od_sojuszników__gs;
          statystyki__grupa__1_r_l.obra¿enia_otrzymane__z_kolizji__gs := statystyki__grupa__1_r_l.obra¿enia_otrzymane__z_kolizji__gs + gra_statystyki_r_t[ i ].obra¿enia_otrzymane__z_kolizji__gs;
          statystyki__grupa__1_r_l.obra¿enia_otrzymane__z_zak³óceñ__gs := statystyki__grupa__1_r_l.obra¿enia_otrzymane__z_zak³óceñ__gs + gra_statystyki_r_t[ i ].obra¿enia_otrzymane__z_zak³óceñ__gs;
          statystyki__grupa__1_r_l.obra¿enia_zadane__amunicja__gs := statystyki__grupa__1_r_l.obra¿enia_zadane__amunicja__gs + gra_statystyki_r_t[ i ].obra¿enia_zadane__amunicja__gs;
          statystyki__grupa__1_r_l.obra¿enia_zadane__amunicja_sojusznikom__gs := statystyki__grupa__1_r_l.obra¿enia_zadane__amunicja_sojusznikom__gs + gra_statystyki_r_t[ i ].obra¿enia_zadane__amunicja_sojusznikom__gs;
          statystyki__grupa__1_r_l.obra¿enia_zadane__taranowanie__gs := statystyki__grupa__1_r_l.obra¿enia_zadane__taranowanie__gs + gra_statystyki_r_t[ i ].obra¿enia_zadane__taranowanie__gs;
          statystyki__grupa__1_r_l.obra¿enia_zadane__taranowanie_sojusznikom__gs := statystyki__grupa__1_r_l.obra¿enia_zadane__taranowanie_sojusznikom__gs + gra_statystyki_r_t[ i ].obra¿enia_zadane__taranowanie_sojusznikom__gs;
          statystyki__grupa__1_r_l.odnawianie_zasobów_iloœæ_razy__gs := statystyki__grupa__1_r_l.odnawianie_zasobów_iloœæ_razy__gs + gra_statystyki_r_t[ i ].odnawianie_zasobów_iloœæ_razy__gs;
          statystyki__grupa__1_r_l.taranowania_iloœæ__gs := statystyki__grupa__1_r_l.taranowania_iloœæ__gs + gra_statystyki_r_t[ i ].taranowania_iloœæ__gs;
          statystyki__grupa__1_r_l.taranowania_iloœæ_sojuszników__gs := statystyki__grupa__1_r_l.taranowania_iloœæ_sojuszników__gs + gra_statystyki_r_t[ i ].taranowania_iloœæ_sojuszników__gs;
          statystyki__grupa__1_r_l.trafienia__gs := statystyki__grupa__1_r_l.trafienia__gs + gra_statystyki_r_t[ i ].trafienia__gs;
          statystyki__grupa__1_r_l.zak³ócenia__nieudane__gs := statystyki__grupa__1_r_l.zak³ócenia__nieudane__gs + gra_statystyki_r_t[ i ].zak³ócenia__nieudane__gs;
          statystyki__grupa__1_r_l.zak³ócenia__odbite__cudze__gs := statystyki__grupa__1_r_l.zak³ócenia__odbite__cudze__gs + gra_statystyki_r_t[ i ].zak³ócenia__odbite__cudze__gs;
          statystyki__grupa__1_r_l.zak³ócenia__odbite__w³asne__gs := statystyki__grupa__1_r_l.zak³ócenia__odbite__w³asne__gs + gra_statystyki_r_t[ i ].zak³ócenia__odbite__w³asne__gs;
          statystyki__grupa__1_r_l.zak³ócenia__udane__gs := statystyki__grupa__1_r_l.zak³ócenia__udane__gs + gra_statystyki_r_t[ i ].zak³ócenia__udane__gs;
          statystyki__grupa__1_r_l.zatoniêcia__gs := statystyki__grupa__1_r_l.zatoniêcia__gs + gra_statystyki_r_t[ i ].zatoniêcia__gs;
          statystyki__grupa__1_r_l.zatopienia__gs := statystyki__grupa__1_r_l.zatopienia__gs + gra_statystyki_r_t[ i ].zatopienia__gs;
          statystyki__grupa__1_r_l.zatopienia_sojuszników__gs := statystyki__grupa__1_r_l.zatopienia_sojuszników__gs + gra_statystyki_r_t[ i ].zatopienia_sojuszników__gs;

        end
      else//if gra_statystyki_r_t[ i ].id_grupa__gs = statystyki__grupa__1_r_l.id_grupa__gs then
        begin

          statystyki__grupa__2_r_l.amunicja_wystrzelona_iloœæ__gs := statystyki__grupa__2_r_l.amunicja_wystrzelona_iloœæ__gs + gra_statystyki_r_t[ i ].amunicja_wystrzelona_iloœæ__gs;
          statystyki__grupa__2_r_l.amunicja_wystrzelona_obra¿enia_zadawane__gs := statystyki__grupa__2_r_l.amunicja_wystrzelona_obra¿enia_zadawane__gs + gra_statystyki_r_t[ i ].amunicja_wystrzelona_obra¿enia_zadawane__gs;

          if   ( statystyki__grupa__2_r_l.czas_do_zatoniêcia__najd³u¿szy_sekund__gs < gra_statystyki_r_t[ i ].czas_do_zatoniêcia__najd³u¿szy_sekund__gs )
            or ( statystyki__grupa__2_r_l.czas_do_zatoniêcia__najd³u¿szy_sekund__gs = -1 ) then
            statystyki__grupa__2_r_l.czas_do_zatoniêcia__najd³u¿szy_sekund__gs := gra_statystyki_r_t[ i ].czas_do_zatoniêcia__najd³u¿szy_sekund__gs;

          if   ( statystyki__grupa__2_r_l.czas_do_zatoniêcia__najkrótszy_sekund__gs > gra_statystyki_r_t[ i ].czas_do_zatoniêcia__najkrótszy_sekund__gs )
            or ( statystyki__grupa__2_r_l.czas_do_zatoniêcia__najkrótszy_sekund__gs = -1 ) then
            statystyki__grupa__2_r_l.czas_do_zatoniêcia__najkrótszy_sekund__gs := gra_statystyki_r_t[ i ].czas_do_zatoniêcia__najkrótszy_sekund__gs;

          statystyki__grupa__2_r_l.czas_do_zatoniêcia__suma_sekund__gs := statystyki__grupa__2_r_l.czas_do_zatoniêcia__suma_sekund__gs + gra_statystyki_r_t[ i ].czas_do_zatoniêcia__suma_sekund__gs;
          statystyki__grupa__2_r_l.obra¿enia_otrzymane__gs := statystyki__grupa__2_r_l.obra¿enia_otrzymane__gs + gra_statystyki_r_t[ i ].obra¿enia_otrzymane__gs;
          statystyki__grupa__2_r_l.obra¿enia_otrzymane__od_sojuszników__gs := statystyki__grupa__2_r_l.obra¿enia_otrzymane__od_sojuszników__gs + gra_statystyki_r_t[ i ].obra¿enia_otrzymane__od_sojuszników__gs;
          statystyki__grupa__2_r_l.obra¿enia_otrzymane__z_kolizji__gs := statystyki__grupa__2_r_l.obra¿enia_otrzymane__z_kolizji__gs + gra_statystyki_r_t[ i ].obra¿enia_otrzymane__z_kolizji__gs;
          statystyki__grupa__2_r_l.obra¿enia_otrzymane__z_zak³óceñ__gs := statystyki__grupa__2_r_l.obra¿enia_otrzymane__z_zak³óceñ__gs + gra_statystyki_r_t[ i ].obra¿enia_otrzymane__z_zak³óceñ__gs;
          statystyki__grupa__2_r_l.obra¿enia_zadane__amunicja__gs := statystyki__grupa__2_r_l.obra¿enia_zadane__amunicja__gs + gra_statystyki_r_t[ i ].obra¿enia_zadane__amunicja__gs;
          statystyki__grupa__2_r_l.obra¿enia_zadane__amunicja_sojusznikom__gs := statystyki__grupa__2_r_l.obra¿enia_zadane__amunicja_sojusznikom__gs + gra_statystyki_r_t[ i ].obra¿enia_zadane__amunicja_sojusznikom__gs;
          statystyki__grupa__2_r_l.obra¿enia_zadane__taranowanie__gs := statystyki__grupa__2_r_l.obra¿enia_zadane__taranowanie__gs + gra_statystyki_r_t[ i ].obra¿enia_zadane__taranowanie__gs;
          statystyki__grupa__2_r_l.obra¿enia_zadane__taranowanie_sojusznikom__gs := statystyki__grupa__2_r_l.obra¿enia_zadane__taranowanie_sojusznikom__gs + gra_statystyki_r_t[ i ].obra¿enia_zadane__taranowanie_sojusznikom__gs;
          statystyki__grupa__2_r_l.odnawianie_zasobów_iloœæ_razy__gs := statystyki__grupa__2_r_l.odnawianie_zasobów_iloœæ_razy__gs + gra_statystyki_r_t[ i ].odnawianie_zasobów_iloœæ_razy__gs;
          statystyki__grupa__2_r_l.taranowania_iloœæ__gs := statystyki__grupa__2_r_l.taranowania_iloœæ__gs + gra_statystyki_r_t[ i ].taranowania_iloœæ__gs;
          statystyki__grupa__2_r_l.taranowania_iloœæ_sojuszników__gs := statystyki__grupa__2_r_l.taranowania_iloœæ_sojuszników__gs + gra_statystyki_r_t[ i ].taranowania_iloœæ_sojuszników__gs;
          statystyki__grupa__2_r_l.trafienia__gs := statystyki__grupa__2_r_l.trafienia__gs + gra_statystyki_r_t[ i ].trafienia__gs;
          statystyki__grupa__2_r_l.zak³ócenia__nieudane__gs := statystyki__grupa__2_r_l.zak³ócenia__nieudane__gs + gra_statystyki_r_t[ i ].zak³ócenia__nieudane__gs;
          statystyki__grupa__2_r_l.zak³ócenia__odbite__cudze__gs := statystyki__grupa__2_r_l.zak³ócenia__odbite__cudze__gs + gra_statystyki_r_t[ i ].zak³ócenia__odbite__cudze__gs;
          statystyki__grupa__2_r_l.zak³ócenia__odbite__w³asne__gs := statystyki__grupa__2_r_l.zak³ócenia__odbite__w³asne__gs + gra_statystyki_r_t[ i ].zak³ócenia__odbite__w³asne__gs;
          statystyki__grupa__2_r_l.zak³ócenia__udane__gs := statystyki__grupa__2_r_l.zak³ócenia__udane__gs + gra_statystyki_r_t[ i ].zak³ócenia__udane__gs;
          statystyki__grupa__2_r_l.zatoniêcia__gs := statystyki__grupa__2_r_l.zatoniêcia__gs + gra_statystyki_r_t[ i ].zatoniêcia__gs;
          statystyki__grupa__2_r_l.zatopienia__gs := statystyki__grupa__2_r_l.zatopienia__gs + gra_statystyki_r_t[ i ].zatopienia__gs;
          statystyki__grupa__2_r_l.zatopienia_sojuszników__gs := statystyki__grupa__2_r_l.zatopienia_sojuszników__gs + gra_statystyki_r_t[ i ].zatopienia_sojuszników__gs;

        end;
      //---//if gra_statystyki_r_t[ i ].id_grupa__gs = statystyki__grupa__1_r_l.id_grupa__gs then

    end;
  //---//for i := 0 to Length( gra_statystyki_r_t ) - 1 do


  if czy_w_logu_f then
    begin

      Log_Memo.Lines.Add( t³umaczenie_komunikaty_r.komunikat__statystyki_gry );

      if   ( statystyki__grupa__1_r_l.id_grupa__gs <> -99 )
        or ( statystyki__grupa__2_r_l.id_grupa__gs <> -99 ) then
        begin

          Log_Memo.Lines.Add( '' );
          Log_Memo.Lines.Add( t³umaczenie_komunikaty_r.komunikat__grupy );

        end;
      //---//if   ( statystyki__grupa__1_r_l.id_grupa__gs <> -99 ) (...)

      if statystyki__grupa__1_r_l.id_grupa__gs <> -99 then
        Statystyki_Wypisz( statystyki__grupa__1_r_l, true );

      if statystyki__grupa__2_r_l.id_grupa__gs <> -99 then
        Statystyki_Wypisz( statystyki__grupa__2_r_l, true );


      Log_Memo.Lines.Add( '' );
      Log_Memo.Lines.Add( t³umaczenie_komunikaty_r.komunikat__gracze );

      for i := 0 to Length( gra_statystyki_r_t ) - 1 do
        begin

          Statystyki_Wypisz( gra_statystyki_r_t[ i ], false );

        end;
      //---//for i := 0 to Length( gra_statystyki_r_t ) - 1 do

    end;
  //---//if czy_w_logu_f then


  kolumna_kopia := Statystyki_StringGrid.Col;
  wiersz_kopia := Statystyki_StringGrid.Row;

  if Statystyki_StringGrid.ColCount <> 32 then
    Statystyki_StringGrid.ColCount := 32;


  Statystyki_StringGrid.RowCount := 2; // Nag³ówek i jeden pusty wiersz.

  //if statystyki__grupa__1_r_l.id_grupa__gs <> -99 then // Jeden wiersz ju¿ jest.
  //  Statystyki_StringGrid.RowCount := Statystyki_StringGrid.RowCount + 1;

  if    ( statystyki__grupa__1_r_l.id_grupa__gs <> -99 )
    and ( statystyki__grupa__2_r_l.id_grupa__gs <> -99 ) then
    Statystyki_StringGrid.RowCount := Statystyki_StringGrid.RowCount + 1;

  Statystyki_StringGrid.RowCount := Statystyki_StringGrid.RowCount + Length( gra_statystyki_r_t );


  if Statystyki_StringGrid.Cells[ 0, 0 ] = '' then
    begin

      Statystyki_StringGrid.Cells[ 0, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__l_p;
      Statystyki_StringGrid.Cells[ 1, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__identyfikator;
      Statystyki_StringGrid.Cells[ 2, 0 ] := t³umaczenie_komunikaty_r.s³owo__grupa__du¿¹_liter¹;
      Statystyki_StringGrid.Cells[ 3, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__nazwa;
      Statystyki_StringGrid.Cells[ 4, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__statek;
      Statystyki_StringGrid.Cells[ 5, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__samolot;
      Statystyki_StringGrid.Cells[ 6, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__amunicja_wystrzelona_iloœæ;
      Statystyki_StringGrid.Cells[ 7, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__amunicja_wystrzelona_obra¿enia_zadawane;
      Statystyki_StringGrid.Cells[ 8, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__obra¿enia_otrzymane;
      Statystyki_StringGrid.Cells[ 9, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__obra¿enia_otrzymane_w_tym_od_sojuszników;
      Statystyki_StringGrid.Cells[ 10, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__obra¿enia_otrzymane_w_tym_z_kolizji;
      Statystyki_StringGrid.Cells[ 11, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__obra¿enia_zadane_amunicja;
      Statystyki_StringGrid.Cells[ 12, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__obra¿enia_zadane_amunicja_w_tym_sojusznikom;
      Statystyki_StringGrid.Cells[ 13, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__obra¿enia_zadane_taranowanie;
      Statystyki_StringGrid.Cells[ 14, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__obra¿enia_zadane_taranowanie_w_tym_sojusznikom;
      Statystyki_StringGrid.Cells[ 15, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__taranowania_iloœæ;
      Statystyki_StringGrid.Cells[ 16, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__taranowania_iloœæ_sojuszników;
      Statystyki_StringGrid.Cells[ 17, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__trafienia;
      Statystyki_StringGrid.Cells[ 18, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__zatoniêcia;
      Statystyki_StringGrid.Cells[ 19, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__zatopienia;
      Statystyki_StringGrid.Cells[ 20, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__zatopienia_w_tym_sojuszników;
      Statystyki_StringGrid.Cells[ 21, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__celnoœæ_procent;
      Statystyki_StringGrid.Cells[ 22, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__czas_do_zatoniêcia_najkrótszy;
      Statystyki_StringGrid.Cells[ 23, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__czas_do_zatoniêcia_najd³u¿szy;
      Statystyki_StringGrid.Cells[ 24, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__czas_do_zatoniêcia_suma;
      Statystyki_StringGrid.Cells[ 25, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__czas_do_zatoniêcia_œredni;
      Statystyki_StringGrid.Cells[ 26, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__zak³ócenia_udane;
      Statystyki_StringGrid.Cells[ 27, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__zak³ócenia_nieudane;
      Statystyki_StringGrid.Cells[ 28, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__zak³ócenia_odbite_cudze;
      Statystyki_StringGrid.Cells[ 29, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__zak³ócenia_odbite_w³asne;
      Statystyki_StringGrid.Cells[ 30, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__obra¿enia_otrzymane_z_zak³óceñ;
      Statystyki_StringGrid.Cells[ 31, 0 ] := t³umaczenie_komunikaty_r.statystyki__nag³ówek__odnawianie_zasobów_iloœæ_razy;


      for i := 0 to Statystyki_StringGrid.ColCount - 1 do
        case i of
            0, 1, 2 : Statystyki_StringGrid.ColWidths[ i ] := 25; // L. p., Identyfikator, Grupa.

            4, 5 : Statystyki_StringGrid.ColWidths[ i ] := 64; // Domyœlna wartoœæ. Statek, Samolot.

            17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 : Statystyki_StringGrid.ColWidths[ i ] := 50; // Trafienia, Zatoniêcia, Zatopienia, Celnoœæ %, Czas do zatoniêcia najkrótszy, Czas do z. najd³u¿szy, Czas do z. suma, Czas do z. œredni, Zak³ócenia udane, Zak³. nieudane, Zak³. odbite cudze, Zak³. odbite w³asne, O. o. z zak³óceñ.

            else//case przedial of
              Statystyki_StringGrid.ColWidths[ i ] := 100;
          end;
        //---//case i of

    end;
  //---//if Statystyki_StringGrid.Cells[ 0, 0 ] = '' then


  // Czyœci wpisy.
  for i := 0 to Statystyki_StringGrid.ColCount - 1 do
    for j := 1 to Statystyki_StringGrid.RowCount - 1 do
      Statystyki_StringGrid.Cells[ i, j ] := '';


  grupy_iloœæ := 0;

  if statystyki__grupa__1_r_l.id_grupa__gs <> -99 then
    begin

      inc( grupy_iloœæ );
      Statystyki_Wypisz( statystyki__grupa__1_r_l, true, grupy_iloœæ );

    end;
  //---//if statystyki__grupa__1_r_l.id_grupa__gs <> -99 then


  if statystyki__grupa__2_r_l.id_grupa__gs <> -99 then
    begin

      inc( grupy_iloœæ );
      Statystyki_Wypisz( statystyki__grupa__2_r_l, true, grupy_iloœæ );

    end;
  //---//if statystyki__grupa__2_r_l.id_grupa__gs <> -99 then


  zt_string_list := TStringList.Create();


  zt_string_list.Clear();

  for i := 0 to Length( gra_statystyki_r_t ) - 1 do
    begin

      gracz_nazwa_l := '';
      statek_nazwa_l := '';
      samolot_nazwa_l := '';


      for j := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
        if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ j ]).identyfikator__kd = gra_statystyki_r_t[ i ].identyfikator__gs then
          begin

            gracz_nazwa_l := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ j ]).nazwa__kd;


            if    ( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ j ]).id_statek_schemat__kd >= 0 )
              and (  TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ j ]).id_statek_schemat__kd <= Length( statki_lista_t ) - 1  ) then
              statek_nazwa_l := statki_lista_t[ TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ j ]).id_statek_schemat__kd ].nazwa__sl;


            if    ( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ j ]).id_statek__samolot_schemat__kd >= 0 )
              and (  TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ j ]).id_statek__samolot_schemat__kd <= Length( statki_lista_t ) - 1  ) then
              samolot_nazwa_l := statki_lista_t[ TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ j ]).id_statek__samolot_schemat__kd ].nazwa__sl;


            Break;

          end;
        //---//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ j ]).identyfikator = gra_statystyki_r_f.identyfikator__gs then


      case Statystyki_StringGrid.kolumna_sortowania_indeks of // Indeks kolumny sortowania.
          0, 1 : zts := IntToStr( gra_statystyki_r_t[ i ].identyfikator__gs ); // Identyfikator.
          2 : zts := IntToStr( gra_statystyki_r_t[ i ].id_grupa__gs );
          3 : zts := gracz_nazwa_l;
          4 : zts := statek_nazwa_l;
          5 : zts := samolot_nazwa_l;
          6 : zts := Trim(  FormatFloat( '000 000 000 000 000', gra_statystyki_r_t[ i ].amunicja_wystrzelona_iloœæ__gs )  );
          7 : zts := Trim(  FormatFloat( '000 000 000 000 000.00', gra_statystyki_r_t[ i ].amunicja_wystrzelona_obra¿enia_zadawane__gs )  );
          8 : zts := Trim(  FormatFloat( '000 000 000 000 000.00', gra_statystyki_r_t[ i ].obra¿enia_otrzymane__gs )  );
          9 : zts := Trim(  FormatFloat( '000 000 000 000 000.00', gra_statystyki_r_t[ i ].obra¿enia_otrzymane__od_sojuszników__gs )  );
          10 : zts := Trim(  FormatFloat( '000 000 000 000 000.00', gra_statystyki_r_t[ i ].obra¿enia_otrzymane__z_kolizji__gs )  );
          11 : zts := Trim(  FormatFloat( '000 000 000 000 000.00', gra_statystyki_r_t[ i ].obra¿enia_zadane__amunicja__gs )  );
          12 : zts := Trim(  FormatFloat( '000 000 000 000 000.00', gra_statystyki_r_t[ i ].obra¿enia_zadane__amunicja_sojusznikom__gs )  );
          13 : zts := Trim(  FormatFloat( '000 000 000 000 000.00', gra_statystyki_r_t[ i ].obra¿enia_zadane__taranowanie__gs )  );
          14 : zts := Trim(  FormatFloat( '000 000 000 000 000.00', gra_statystyki_r_t[ i ].obra¿enia_zadane__taranowanie_sojusznikom__gs )  );
          15 : zts := Trim(  FormatFloat( '000 000 000 000 000', gra_statystyki_r_t[ i ].taranowania_iloœæ__gs )  );
          16 : zts := Trim(  FormatFloat( '000 000 000 000 000', gra_statystyki_r_t[ i ].taranowania_iloœæ_sojuszników__gs )  );
          17 : zts := Trim(  FormatFloat( '000 000 000 000 000', gra_statystyki_r_t[ i ].trafienia__gs )  );
          18 : zts := Trim(  FormatFloat( '000 000 000 000 000', gra_statystyki_r_t[ i ].zatoniêcia__gs )  );
          19 : zts := Trim(  FormatFloat( '000 000 000 000 000', gra_statystyki_r_t[ i ].zatopienia__gs )  );
          20 : zts := Trim(  FormatFloat( '000 000 000 000 000', gra_statystyki_r_t[ i ].zatopienia_sojuszników__gs )  );
          21 : zts := Przedstaw_Jako_Procent( gra_statystyki_r_t[ i ].trafienia__gs, gra_statystyki_r_t[ i ].amunicja_wystrzelona_iloœæ__gs, true );
          22 : zts := Trim(  FormatFloat( '000 000 000 000 000', gra_statystyki_r_t[ i ].czas_do_zatoniêcia__najkrótszy_sekund__gs )  );
          23 : zts := Trim(  FormatFloat( '000 000 000 000 000', gra_statystyki_r_t[ i ].czas_do_zatoniêcia__najd³u¿szy_sekund__gs )  );
          24 : zts := Trim(  FormatFloat( '000 000 000 000 000', gra_statystyki_r_t[ i ].czas_do_zatoniêcia__suma_sekund__gs )  );
          25 : zts := Trim(   FormatFloat(  '000 000 000 000 000', Œrednia_Wylicz( gra_statystyki_r_t[ i ].zatoniêcia__gs, gra_statystyki_r_t[ i ].czas_do_zatoniêcia__suma_sekund__gs )  )   );
          26 : zts := Trim(  FormatFloat( '000 000 000 000 000', gra_statystyki_r_t[ i ].zak³ócenia__udane__gs )  );
          27 : zts := Trim(  FormatFloat( '000 000 000 000 000', gra_statystyki_r_t[ i ].zak³ócenia__nieudane__gs )  );
          28 : zts := Trim(  FormatFloat( '000 000 000 000 000', gra_statystyki_r_t[ i ].zak³ócenia__odbite__cudze__gs )  );
          29 : zts := Trim(  FormatFloat( '000 000 000 000 000', gra_statystyki_r_t[ i ].zak³ócenia__odbite__w³asne__gs )  );
          30 : zts := Trim(  FormatFloat( '000 000 000 000 000.00', gra_statystyki_r_t[ i ].obra¿enia_otrzymane__z_zak³óceñ__gs )  );
          31 : zts := Trim(  FormatFloat( '000 000 000 000 000', gra_statystyki_r_t[ i ].odnawianie_zasobów_iloœæ_razy__gs )  );

          else//case Statystyki_StringGrid.kolumna_sortowania_indeks of
            zts := '';
        end;
      //---//case Statystyki_StringGrid.kolumna_sortowania_indeks of


      case Statystyki_StringGrid.kolumna_sortowania_indeks of // Indeks kolumny sortowania.
          2 : zts := zts + statek_nazwa_l; // Grupa.
          3, 4, 5 : zts := zts + IntToStr( gra_statystyki_r_t[ i ].id_grupa__gs ); // Nazwa, statek, samolot.
        end;
      //---//case Statystyki_StringGrid.kolumna_sortowania_indeks of


      // Liczby ujemne poprzedza spacj¹ aby lepiej siê sortowa³y (nadal nie s¹ rosn¹co).
      if    ( Statystyki_StringGrid.kolumna_sortowania_indeks in [ 0, 1 ] ) // Identyfikator.
        and ( Length( zts ) > 0 )
        and ( zts[ 1 ] = '-' ) then
        zts := ' ' + zts;


      zts := zts + gracz_nazwa_l;


      zts := zts + ';' + IntToStr( gra_statystyki_r_t[ i ].identyfikator__gs );

      zt_string_list.Add( zts );

    end;
  //---//for i := 0 to Length( gra_statystyki_r_t ) - 1 do


  zt_string_list.Sort();


  for k := 0 to zt_string_list.Count - 1 do
    for i := 0 to Length( gra_statystyki_r_t ) - 1 do
      if Identyfikator_Z_Listy_Sortowania_Wy³uskaj( zt_string_list[ k ] ) = gra_statystyki_r_t[ i ].identyfikator__gs then
        begin

          Statystyki_Wypisz( gra_statystyki_r_t[ i ], false, k + 1 + grupy_iloœæ );

          Break;

        end;
      //---//if Identyfikator_Z_Listy_Sortowania_Wy³uskaj( zt_string_list[ k ] ) = gra_statystyki_r_t[ i ].identyfikator__gs then


  if    ( statystyki__grupa__1_r_l.id_grupa__gs = -99 )
    and ( statystyki__grupa__2_r_l.id_grupa__gs = -99 )
    and (  Length( gra_statystyki_r_t ) <= 0  ) then
    Statystyki_StringGrid.Cells[ 3, 1 ] := '<' + t³umaczenie_komunikaty_r.s³owo__brak__ma³¹_liter¹ + '>'; // Nazwa.


  if Statystyki_StringGrid.ColCount - 1 >= kolumna_kopia then
    Statystyki_StringGrid.Col := kolumna_kopia;

  if Statystyki_StringGrid.RowCount - 1 >= wiersz_kopia then
    Statystyki_StringGrid.Row := wiersz_kopia;


  FreeAndNil( zt_string_list );


  Statystyki_StringGrid.OnSelectCell( nil, Statystyki_StringGrid.Col, Statystyki_StringGrid.Row, ztb );

end;//---//Funkcja Gra_Statystyki_Wypisz().

//Funkcja Grawitacja_Opadanie_Obra¿enia_Wylicz().
function TStatki_Form.Grawitacja_Opadanie_Obra¿enia_Wylicz( const punkty_¿ycia_maksymalne_f, grawitacja_opadanie_szybkoœæ_aktualna_f : real ) : real;
begin

  // Jaki procent maksymalnej szybkoœci grawitacji osi¹gnie tyle obra¿eñ otrzyma przy upadku.

  if Abs( grawitacja_opadanie_szybkoœæ_aktualna_f ) > 9 then
    begin

      Result := grawitacja_opadanie_szybkoœæ_maksymalna_c / grawitacja_opadanie_szybkoœæ_aktualna_f;

      if Result <> 0 then
        Result := punkty_¿ycia_maksymalne_f / Result
      else//if Result <> 0 then
        Result := 0;

    end
  else//if Abs( grawitacja_opadanie_szybkoœæ_aktualna_f ) > 9 then
    Result := 0;

end;//---//Funkcja Grawitacja_Opadanie_Obra¿enia_Wylicz().

//Funkcja Informacja_Dodatkowa_Dodaj().
procedure TStatki_Form.Informacja_Dodatkowa_Dodaj( const napis_f : string; const wyœwietlanie_czas_sekundy_f : smallint = 0 );
begin

  if   ( informacje_dodatkowe_list = nil )
    or (  not Assigned( informacje_dodatkowe_list )  )
    or ( Fotograficzny_Tryb_CheckBox.Checked ) then
    Exit;


  if wyœwietlanie_czas_sekundy_f <= 0 then
    informacje_dodatkowe_list.Add(  TInformacje_Dodatkowe.Create( napis_f )  )
  else//if wyœwietlanie_czas_sekundy_f <= 0 then
    informacje_dodatkowe_list.Add(  TInformacje_Dodatkowe.Create( napis_f, wyœwietlanie_czas_sekundy_f )  );

  Informacje_Dodatkowe_GLAsyncTimerTimer( nil );

end;//---//Funkcja Informacja_Dodatkowa_Dodaj().

//Funkcja Informacja_Dodatkowa_Zwolnij_Jeden().
procedure TStatki_Form.Informacja_Dodatkowa_Zwolnij_Jeden( lista_f : TList; const indeks_f : integer );
begin

  if   ( indeks_f < 0 )
    or ( lista_f = nil )
    or ( indeks_f > lista_f.Count - 1 )
    or ( lista_f.Count < 1 ) then
    Exit;

  TInformacje_Dodatkowe(lista_f[ indeks_f ]).Free();
  lista_f.Delete( indeks_f );

end;//---//Funkcja Informacja_Dodatkowa_Zwolnij_Jeden().

//Funkcja Interfejs_Aktywnoœæ_Ustaw__Klient().
procedure TStatki_Form.Interfejs_Aktywnoœæ_Ustaw__Klient( const aktywne_f : boolean );
begin

  Gra_Wspó³czynnik_Prêdkoœci_SpinEdit.Enabled := aktywne_f;
  Gra_Wspó³czynnik_Trudnoœci_SpinEdit.Enabled := aktywne_f;
  Interfejs_Aktywnoœæ_Ustaw__Grupa_Komponentów( L¹d_GroupBox, aktywne_f );
  L¹dowanie_U³atwione_CheckBox.Enabled := aktywne_f;
  Mg³a_SpinEdit.Enabled := aktywne_f;
  Morze_Wzburzenie_SpinEdit.Enabled := aktywne_f;
  Noc_SpinEdit.Enabled := aktywne_f;


  Projektowy_Tryb_CheckBox.Enabled := aktywne_f;

  if    ( not Projektowy_Tryb_CheckBox.Enabled )
    and ( Projektowy_Tryb_CheckBox.Checked ) then
    Projektowy_Tryb_CheckBox.Checked := false;

  if aktywne_f then
    Projektowy_Tryb_CheckBox.Font.Style := [];


  Projektowy_Tryb__Grawitacja_Wy³¹cz_CheckBox.Enabled := aktywne_f;
  Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBox.Enabled := aktywne_f;
  SI__Patrol_Blisko_Zostaje_CheckBox.Enabled := aktywne_f;
  SI__P³ywa_CheckBox.Enabled := aktywne_f;
  SI__Strzela_CheckBox.Enabled := aktywne_f;
  Statki_Przywracaj_Do_Gry_CheckBox.Enabled := aktywne_f;

  if aktywne_f then
    Sonarowe_U³atwienie_CheckBox.Enabled := aktywne_f;

  Sonarowe_U³atwienie__Klient_Zmieniaæ_Mo¿e_CheckBox.Enabled := aktywne_f;
  Wiatr__Wp³yw_Na_Rozgrywkê_CheckBox.Enabled := aktywne_f;
  Zak³ócanie__Dozwolone_CheckBox.Enabled := aktywne_f;
  Zak³ócanie__Graczy_Nie_SI_Dozwolone_CheckBox.Enabled := aktywne_f;

  Statek__Odœwie¿_Wskazany_BitBtn.Enabled := aktywne_f;
  Statek__Wczytaj_Listê_BitBtn.Enabled := aktywne_f;
  Interfejs_Aktywnoœæ_Ustaw__Grupa_Komponentów( Statki_Pozycje_Pocz¹tkowe_GroupBox, aktywne_f );
  Interfejs_Aktywnoœæ_Ustaw__Grupa_Komponentów( Statki_Zaprezentuj_GroupBox, aktywne_f );
  Interfejs_Aktywnoœæ_Ustaw__Grupa_Komponentów( Zmieniaj_Automatycznie_GroupBox, aktywne_f );

  if not aktywne_f then
    begin

      Zmieniaj_Automatycznie__Mg³a_CheckBox.Checked := false;
      Zmieniaj_Automatycznie__Morze_Wzburzenie_CheckBox.Checked := false;
      Zmieniaj_Automatycznie__Noc_CheckBox.Checked := false;

    end
  else//if not aktywne_f then
    begin

      Gra_Wspó³czynnik_Prêdkoœci_SpinEditChange( nil );
      Gra_Wspó³czynnik_Trudnoœci_SpinEditChange( nil );

    end
  //---//if not aktywne_f then

end;//---//Funkcja Interfejs_Aktywnoœæ_Ustaw__Klient().

//Funkcja Interfejs_Aktywnoœæ_Ustaw__SI().
procedure TStatki_Form.Interfejs_Aktywnoœæ_Ustaw__SI( const aktywne_f : boolean );
begin

  SI_GroupBox.Enabled := aktywne_f;

  SI__Dodaj_BitBtn.Enabled := aktywne_f;
  SI__Grupa_Etykieta_Label.Enabled := aktywne_f;
  SI__Grupa_SpinEdit.Enabled := aktywne_f;
  SI__Kasuj_Wszystkie_BitBtn.Enabled := aktywne_f;
  SI__Nazwa_Edit.Enabled := aktywne_f;
  SI__Statek_ComboBox.Enabled := aktywne_f;

  SI__Schemat_GroupBox.Enabled := aktywne_f;

  SI__Schemat_ComboBox.Enabled := aktywne_f;
  SI__Schemat_Opis_Memo.Enabled := aktywne_f;
  SI__Schemat__Kasuj_BitBtn.Enabled := aktywne_f;
  SI__Schemat__Odœwie¿_Wskazany_BitBtn.Enabled := aktywne_f;
  SI__Schemat__Wczytaj_Listê_BitBtn.Enabled := aktywne_f;
  SI__Schemat__Zapisz_BitBtn.Enabled := aktywne_f;
  SI__Schemat__Zastosuj__Pomiñ__L¹d_CheckBox.Enabled := aktywne_f;
  SI__Schemat__Zastosuj__Pomiñ__Statki_Pozycje_Pocz¹tkowe_CheckBox.Enabled := aktywne_f;
  SI__Schemat__Zastosuj_BitBtn.Enabled := aktywne_f;

end;//---//Funkcja Interfejs_Aktywnoœæ_Ustaw__SI().

//Funkcja Interfejs_Aktywnoœæ_Ustaw__Grupa_Komponentów().
procedure TStatki_Form.Interfejs_Aktywnoœæ_Ustaw__Grupa_Komponentów( const win_control_f :  TWinControl; const aktywne_f : boolean );
var
  i : integer;
begin

  win_control_f.Enabled := aktywne_f;

  for i := 0 to win_control_f.ControlCount - 1 do // Tylko wizualne. Wa¿ny jest rodzic (Parent, nie Owner - Create( ScrollBox1 )).
    win_control_f.Controls[ i ].Enabled := aktywne_f;

end;//---//Funkcja Interfejs_Aktywnoœæ_Ustaw__Grupa_Komponentów().

//Funkcja Interfejs_Aktywnoœæ_Ustaw__Schemat_Samolot_Zmieñ().
procedure TStatki_Form.Interfejs_Aktywnoœæ_Ustaw__Schemat_Samolot_Zmieñ( const aktywne_f : boolean );
begin


  if    ( aktywne_f )
    and ( statek_gracza <> nil )
    and ( statek_gracza.czy_lotniskowiec )
    and ( samolot__statek_gracza <> nil ) then
    begin

      Schemat_Samolot_Zmieñ_BitBtn.Enabled := true;
      Statek__Samolot_ComboBox.Parent := Gracz_Dane_GroupBox;
      Statek__Samolot_ComboBox.Top := Schemat_Samolot_Zmieñ_BitBtn.Top;
      Statek__Samolot_ComboBox.Left := Schemat_Samolot_Zmieñ_BitBtn.Left + Schemat_Samolot_Zmieñ_BitBtn.Width + 10;
      Statek__Samolot_ComboBox.Width := Gracz_Dane_GroupBox.Width - Statek__Samolot_ComboBox.Left - 10;
      Statek__Samolot_ComboBox.Enabled := true;
      //Statek__Samolot_ComboBox.Anchors := [ akTop, akLeft, akRight ];
      Statek__Samolot_ComboBox.Anchors := Statek__Samolot_ComboBox.Anchors + [ akLeft ];

    end
  else//if    ( aktywne_f ) (...)
  if    ( not aktywne_f )
    and ( Schemat_Samolot_Zmieñ_BitBtn.Enabled ) then
    begin

      Schemat_Samolot_Zmieñ_BitBtn.Enabled := false;
      Statek__Samolot_ComboBox.Enabled := false;

      Statek__Samolot_ComboBox.Parent := Statek_GroupBox;
      Statek__Samolot_ComboBox.Top := Statek_ComboBox.Top;
      Statek__Samolot_ComboBox.Left := Statek_ComboBox.Left + Statek_ComboBox.Width + 10;
      Statek__Samolot_ComboBox.Width := Statek_GroupBox.Width - Statek__Samolot_ComboBox.Left - 10;
      //Statek__Samolot_ComboBox.Anchors := [ akTop, akRight ];
      Statek__Samolot_ComboBox.Anchors := Statek__Samolot_ComboBox.Anchors - [ akLeft ];

    end;
  //---//if    ( aktywne_f ) (...)

end;//---//Funkcja Interfejs_Aktywnoœæ_Ustaw__Schemat_Samolot_Zmieñ().

//Funkcja Interfejs_Parametry_Wed³ug_Statku_Ustaw().
procedure TStatki_Form.Interfejs_Parametry_Wed³ug_Statku_Ustaw();
var
  zt_statek : TStatek;
begin

  //
  // Funkcja ustawia podpowiedzi w elementach interfejsu na podstawie danych wczytanego statku.
  //

  zt_statek := Statek_Gracza__Gracz_Tryb_Zwróæ();

  if zt_statek = nil then
    Exit;


  statek_parametry_ustaw__blokuj_g := true;


  Radar_Zasiêg_GLDisk.OuterRadius := zt_statek.radar_zasiêg;
  Radio_Zasiêg_GLDisk.OuterRadius := zt_statek.radio_zasiêg;
  Sonar_Zasiêg_GLDisk.OuterRadius := zt_statek.sonar_zasiêg;

  Radar__Dane_Z_Sonaru_CheckBox.Enabled := zt_statek.sonar_zasiêg > 0;
  Radar__Dane_Z_Sonaru_CheckBox.Checked := Radar__Dane_Z_Sonaru_CheckBox.Enabled;

  if zt_statek.radar_zasiêg > zt_statek.radio_zasiêg then
    kamera_radar__y_domyœlne_g := zt_statek.radar_zasiêg
  else//if zt_statek.radar_zasiêg > zt_statek.radio_zasiêg then
    kamera_radar__y_domyœlne_g := zt_statek.radio_zasiêg;

  Radar_PN_Linia_GLLines.Nodes[ 1 ].Z := -kamera_radar__y_domyœlne_g * 2;

  kamera_radar__y_domyœlne_g := kamera_radar__y_domyœlne_g + kamera_radar__y_domyœlne_g * 2;

  if kamera_radar__y_domyœlne_g < 2 then
    kamera_radar__y_domyœlne_g := 2;

  Radar_GLCamera.Position.Y := kamera_radar__y_domyœlne_g;


  Kamera_Odleg³oœæ_Maksymalna_SpinEdit.MaxValue := zt_statek.kamera_odleg³oœæ_maksymalna;
  Kamera_Odleg³oœæ_Maksymalna_SpinEdit.Value := Kamera_Odleg³oœæ_Maksymalna_SpinEdit.MaxValue;

  Radar__Skala_SpinEdit.Hint :=
    t³umaczenie_komunikaty_r.radar__skala_spinedit__podpowiedŸ__skala_radaru_zasiêg_radaru + ': ' + Trim(  FormatFloat( '### ### ##0', zt_statek.radar_zasiêg )  ) +
    ', ' + t³umaczenie_komunikaty_r.radar__skala_spinedit__podpowiedŸ__radia + ': ' + Trim(  FormatFloat( '### ### ##0', zt_statek.radio_zasiêg )  ) +
    ', ' + t³umaczenie_komunikaty_r.radar__skala_spinedit__podpowiedŸ__sonaru + ': ' + Trim(  FormatFloat( '### ### ##0', zt_statek.sonar_zasiêg )  ) + '.';


  SI__P³ywa__Samolot_Gracza_CheckBox.Enabled := samolot__statek_gracza <> nil;
  SI__Samolot_Gracza__L¹duj_Na_Lotniskowcu_Gracza_Button.Enabled := SI__P³ywa__Samolot_Gracza_CheckBox.Enabled;


  // Tutaj Tag jako kopia poprzedniego ustawienia.
  ar_Artyleria_CheckBox.Tag := integer(ar_Artyleria_CheckBox.Checked);
  ar_Bomba_G³êbinowa_CheckBox.Tag := integer(ar_Bomba_G³êbinowa_CheckBox.Checked);
  ar_Je¿e_G³êbinowe_CheckBox.Tag := integer(ar_Je¿e_G³êbinowe_CheckBox.Checked);
  ar_Pocisk_CheckBox.Tag := integer(ar_Pocisk_CheckBox.Checked);
  ar_Torpeda_CheckBox.Tag := integer(ar_Torpeda_CheckBox.Checked);

  ar_Artyleria_CheckBox.Checked := false;
  ar_Bomba_G³êbinowa_CheckBox.Checked := false;
  ar_Je¿e_G³êbinowe_CheckBox.Checked := false;
  ar_Pocisk_CheckBox.Checked := false;
  ar_Torpeda_CheckBox.Checked := false;


  ar_Artyleria_CheckBox.Enabled := Length( zt_statek.artyleria_t ) > 0;
  ar_Bomba_G³êbinowa_CheckBox.Enabled := Length( zt_statek.bomba_g³êbinowa_t ) > 0;
  ar_Je¿e_G³êbinowe_CheckBox.Enabled := Length( zt_statek.je¿e_g³êbinowe_t ) > 0;
  ar_Pocisk_CheckBox.Enabled := Length( zt_statek.dzia³a_t ) > 0;
  ar_Torpeda_CheckBox.Enabled := Length( zt_statek.torpedy_wyrzutnie_t ) > 0;


  if ar_Artyleria_CheckBox.Enabled then
    ar_Artyleria_CheckBox.Checked := boolean(ar_Artyleria_CheckBox.Tag);

  if ar_Bomba_G³êbinowa_CheckBox.Enabled then
    ar_Bomba_G³êbinowa_CheckBox.Checked := boolean(ar_Bomba_G³êbinowa_CheckBox.Tag);

  if ar_Je¿e_G³êbinowe_CheckBox.Enabled then
    ar_Je¿e_G³êbinowe_CheckBox.Checked := boolean(ar_Je¿e_G³êbinowe_CheckBox.Tag);

  if ar_Pocisk_CheckBox.Enabled then
    ar_Pocisk_CheckBox.Checked := boolean(ar_Pocisk_CheckBox.Tag);

  if ar_Torpeda_CheckBox.Enabled then
    ar_Torpeda_CheckBox.Checked := boolean(ar_Torpeda_CheckBox.Tag);


  statek_parametry_ustaw__blokuj_g := false;


  Statek_Parametry_Ustaw( nil );

end;//---//Funkcja Interfejs_Parametry_Wed³ug_Statku_Ustaw().

//Funkcja Identyfikator_Z_Listy_Sortowania_Wy³uskaj().
function TStatki_Form.Identyfikator_Z_Listy_Sortowania_Wy³uskaj( napis_f : string ) : integer;
var
  zti : integer;
begin

  napis_f := System.StrUtils.ReverseString( napis_f );
  zti := Pos( ';', napis_f );
  Delete(   napis_f, zti, Length( napis_f )  );
  napis_f := System.StrUtils.ReverseString( napis_f );

  try
    Result := StrToInt( napis_f );
  except
    Result := -9999;
  end;
  //---//try

end;//---//Funkcja Identyfikator_Z_Listy_Sortowania_Wy³uskaj().

//Funkcja Kamera_Na_Statek_Gracza_Ustaw().
procedure TStatki_Form.Kamera_Na_Statek_Gracza_Ustaw();
var
  kamera_tryb_kopia_l : TKamera_Tryb;
begin

  //
  // Funkcja ustawia kamerê na statku gracza.
  //

  kamera_tryb_kopia_l := kamera_dla_prze³¹czania_statku_kopia__kamera_tryb_g;

  Kamera_Prze³¹cz( kt_Za_Statkiem ); // Je¿eli kamera bêdzie na statku gdzieœ obrócona to j¹ wyprostuje.

  if kamera_tryb_kopia_l in [ kt_Statek, kt_Statek__Fale, kt_Za_Statkiem__Fale ] then
    Kamera_Prze³¹cz( kamera_tryb_kopia_l );

end;//---//Funkcja Kamera_Na_Statek_Gracza_Ustaw().

//Funkcja Kamera_Odleg³oœæ_Kontroluj_Ustaw().
procedure TStatki_Form.Kamera_Odleg³oœæ_Kontroluj_Ustaw( delta_czasu_f : double );
var
  korekta_o_time_multiplier : real;
  zt_vector : GLS.VectorTypes.TVector4f;
begin

  //
  // Funkcja nie pozwala na odsuniêcie kamery zbyt daleko od statku, amunicji.
  //
  // Parametry:
  //   delta_czasu_f.
  //


  // Komponent dok³adnie nie pilnuje zakresów.
  if Kamera_Odleg³oœæ_Maksymalna_SpinEdit.Value > Kamera_Odleg³oœæ_Maksymalna_SpinEdit.MaxValue then
    Kamera_Odleg³oœæ_Maksymalna_SpinEdit.Value := Kamera_Odleg³oœæ_Maksymalna_SpinEdit.MaxValue
  else//if Kamera_Odleg³oœæ_Maksymalna_SpinEdit.Value > Kamera_Odleg³oœæ_Maksymalna_SpinEdit.MaxValue then
  if Kamera_Odleg³oœæ_Maksymalna_SpinEdit.Value < Kamera_Odleg³oœæ_Maksymalna_SpinEdit.MinValue then
    Kamera_Odleg³oœæ_Maksymalna_SpinEdit.Value := Kamera_Odleg³oœæ_Maksymalna_SpinEdit.MinValue;


  if    ( kamera_tryb_g <> kt_Statek__Projektowy_Tryb )
    and ( Kamera_Odleg³oœæ_Maksymalna_SpinEdit.Value > 0 )
    and ( Gra_GLCamera.Parent <> nil )
    //and (
    //         ( Gra_GLCamera.Parent is TStatek )
    //      or ( Gra_GLCamera.Parent is TAmunicja )
    //    )
    and (
             ( Gra_GLCamera.Parent is TStatek )
          or ( Gra_GLCamera.Parent is TAmunicja )
          or (
                   ( Gra_GLCamera.Parent.Parent <> nil ) // falowanie_gl_dummy_cube
               and ( Gra_GLCamera.Parent.Parent.Parent <> nil ) // toniêcie_gl_dummy_cube
               and ( Gra_GLCamera.Parent.Parent.Parent is TStatek )
             )
        )
    and (  Gra_GLCamera.DistanceTo( Gra_GLCamera.Parent ) > Kamera_Odleg³oœæ_Maksymalna_SpinEdit.Value  ) then
    begin

      //Gra_GLCamera.Position.AddScaledVector
      //  (
      //      //-0.1
      //      -1 * delta_czasu_f
      //    , //GLS.VectorGeometry.NormalizeVector
      //      (
      //        GLS.VectorGeometry.VectorMake
      //          (
      //              Gra_GLCamera.Position.X
      //            , Gra_GLCamera.Position.Y
      //            , Gra_GLCamera.Position.Z
      //          )
      //      )
      //  );


      zt_vector := GLS.VectorGeometry.VectorMake
        (
            Gra_GLCamera.Position.X
          , Gra_GLCamera.Position.Y
          , Gra_GLCamera.Position.Z
        );


      GLS.VectorGeometry.NormalizeVector( zt_vector );


      if    ( not czy_pauza_g )
        and ( Gra_GLCadencer.TimeMultiplier <> 0 ) then
        korekta_o_time_multiplier := 1 / Gra_GLCadencer.TimeMultiplier
      else//if Gra_GLCadencer.TimeMultiplier <> 1 then
        korekta_o_time_multiplier := 1;


      Gra_GLCamera.Position.AddScaledVector
        (
            //-0.1
            -5 * delta_czasu_f * kamera_szybkoœæ_ruchu_g * korekta_o_time_multiplier
          , zt_vector
        );

    end;
  //---//if    ( kamera_tryb_g <> kt_Statek__Projektowy_Tryb ) (...)


  if Fale_CheckBox.Checked then
    begin

      if Gra_GLCamera.AbsolutePosition.Y > 50 then
        begin

          //Woda_Góra_GLPlane.Position.Y := -Gra_GLCamera.AbsolutePosition.Y

          if Woda_Góra_GLPlane.Position.Y > Dno_GLPlane.Position.Y * 0.5 then
            Woda_Góra_GLPlane.Position.Y := Dno_GLPlane.Position.Y * 0.5; // Z wiêkszej odleg³oœci p³aszczyzna migocze pod falami.

        end
      else//if Gra_GLCamera.AbsolutePosition.Y > 50 then
        Woda_Góra_GLPlane.Position.Y := Woda_Dó³_GLPlane.Position.Y;


      // Odleg³oœæ kamery od œrodka obszaru fal w poziomie.
      if Fale_GLTerrainRenderer.DistanceTo(  GLS.VectorGeometry.VectorMake( Gra_GLCamera.AbsolutePosition.X, 0, Gra_GLCamera.AbsolutePosition.Z )  ) > fale__obszar_ograniczenie_g * 0.5 then
        begin

          // Obszar falowania jest zbyt ma³y ze wzglêdu na wydajnoœæ.
          // Je¿eli kamera zbli¿y siê do brzegu obszaru falowania zostanie on przesuniêty w miejsce kamery (dla du¿ych fal to rozwi¹zanie skutkuje skokiem w animacji falowania).

          Fale_GLTerrainRenderer.Position.X := Gra_GLCamera.AbsolutePosition.X;
          Fale_GLTerrainRenderer.Position.Z := Gra_GLCamera.AbsolutePosition.Z;

        end;
      //---//if Fale_GLTerrainRenderer.DistanceTo(  GLS.VectorGeometry.VectorMake( Gra_GLCamera.AbsolutePosition.X, 0, Gra_GLCamera.AbsolutePosition.Z )  ) > fale__obszar_ograniczenie_g * 0.5 then


      // Odleg³oœæ kamery od œrodka obszaru chmur w poziomie.
      if Chmury_GLDummyCube.DistanceTo(  GLS.VectorGeometry.VectorMake( Gra_GLCamera.AbsolutePosition.X, 0, Gra_GLCamera.AbsolutePosition.Z )  ) > chmury__rozpiêtoœæ_w__poziomie_g * 0.5 then
        begin

          // Obszar chmur jest zbyt ma³y ze wzglêdu na wydajnoœæ.
          // Je¿eli kamera zbli¿y siê do brzegu obszaru chmur zostanie on przesuniêty w miejsce kamery.

          Chmury_GLDummyCube.Position.X := Gra_GLCamera.AbsolutePosition.X;
          Chmury_GLDummyCube.Position.Z := Gra_GLCamera.AbsolutePosition.Z;

        end;
      //---//if Chmury_GLDummyCube.DistanceTo(  GLS.VectorGeometry.VectorMake( Gra_GLCamera.AbsolutePosition.X, 0, Gra_GLCamera.AbsolutePosition.Z )  ) > chmury__rozpiêtoœæ_w__poziomie_g * 0.5 then

    end;
  //---//if Fale_CheckBox.Checked then


  //if    ( DŸwiêk__Aktywnoœæ_CheckBox.Checked )
  //  and ( GLSMOpenAL1.Active )
  //  and ( ActiveSoundManager() <> nil ) then
  if DŸwiêk__Aktywnoœæ_CheckBox.Checked then
    begin

      DŸwiêki__Morze_Falowanie_GLDummyCube.Position.X := Gra_GLCamera.AbsolutePosition.X;
      DŸwiêki__Morze_Falowanie_GLDummyCube.Position.Z := Gra_GLCamera.AbsolutePosition.Z;

      if Fale_CheckBox.Checked then
        DŸwiêki__Morze_Falowanie_GLDummyCube.Position.Y := Fala__Wysokoœæ_Na_Zboczu( DŸwiêki__Morze_Falowanie_GLDummyCube.AbsolutePosition )
      else//if Fale_CheckBox.Checked then
        if DŸwiêki__Morze_Falowanie_GLDummyCube.Position.Y <> Woda_Góra_GLPlane.Position.Y then
          DŸwiêki__Morze_Falowanie_GLDummyCube.Position.Y := Woda_Góra_GLPlane.Position.Y;

    end;
  //---//if DŸwiêk__Aktywnoœæ_CheckBox.Checked then


  if BabyMetal_Statek_GLDummyCube.Visible then
    begin

      DŸwiêki__BabyMetal_Statek_GLDummyCube.Position.X := BabyMetal_Statek_GLDummyCube.AbsolutePosition.X;
      DŸwiêki__BabyMetal_Statek_GLDummyCube.Position.Y := Gra_GLCamera.AbsolutePosition.Y;
      DŸwiêki__BabyMetal_Statek_GLDummyCube.Position.Z := BabyMetal_Statek_GLDummyCube.AbsolutePosition.Z;

    end;
  //---//if BabyMetal_Statek_GLDummyCube.Visible then

end;//---//Funkcja Kamera_Odleg³oœæ_Kontroluj_Ustaw().

//Funkcja Kamera_Prze³¹cz().
procedure TStatki_Form.Kamera_Prze³¹cz( const kamera_tryb_f : TKamera_Tryb );
var
  ztb : boolean; // Tylko aby wywo³aæ funkcjê.
  zt_point : TPoint; // Tylko aby wywo³aæ funkcjê.
  i : integer;
  zt_amunicja_wystrzelona_list : TList;
  zt_vector_1,
  zt_vector_2
    : GLS.VectorTypes.TVector4f;
  zt_statek : TStatek;
begin

  //
  // Funkcja zmienia punkt zaczepienia kamery.
  //
  // Parametry:
  //   kamera_tryb_f:
  //     false - ustawi kamerê na statku lub swobodn¹.
  //     true - ustawi kamerê na wystrzelonej amunicji.
  //


  //Gra_GLCamera.ResetRotations(); // Je¿eli ¿aden warunek nie zostanie spe³niony to niepotrzebnie resetuje ustawienie kamery.

  zt_statek := Statek_Gracza__Gracz_Tryb_Zwróæ();


  if czy_klient_g then
    zt_amunicja_wystrzelona_list := wieloosobowe_amunicja_wystrzelona_list
  else//if czy_klient_g then
    zt_amunicja_wystrzelona_list := amunicja_wystrzelona_list;


  if    ( kamera_tryb_f = kt_Amunicja )
    and ( zt_statek <> nil )
    and ( zt_amunicja_wystrzelona_list <> nil )
    and ( zt_amunicja_wystrzelona_list.Count > 0 ) then
    begin

      // Ustawia kamerê na amunicji.

      if kamera_tryb_g <> kt_Amunicja then
        Gra_GLCamera.ResetRotations();

      {$region 'kt_Amunicja.'}
      i := kamera_indeks_amunicji_g;

      if not czy_kamera_od_najnowszego_pocisku then
        begin

          // Od najstarszego.

          if i = zt_amunicja_wystrzelona_list.Count - 1 then
            i := 0
          else//if i = zt_amunicja_wystrzelona_list.Count - 1 then
            if i > zt_amunicja_wystrzelona_list.Count - 1 then
              i := zt_amunicja_wystrzelona_list.Count - 1;

        end
      else//if not czy_kamera_od_najnowszego_pocisku then
        begin

          // Od najnowszego.

          if i = 0 then
            i := zt_amunicja_wystrzelona_list.Count - 1
          else//if i = zt_amunicja_wystrzelona_list.Count - 1 then
            if i > zt_amunicja_wystrzelona_list.Count - 1 then
              i := zt_amunicja_wystrzelona_list.Count - 1;

        end;
      //---//if not czy_kamera_od_najnowszego_pocisku then

      //i := 0;


      if not ( Gra_GLCamera.Parent is TAmunicja ) then
        begin

          //Gra_GLCamera.Position.SetPoint( 0, 1, 0 );
          //Gra_GLCamera.AbsoluteDirection := TAmunicja(Gra_GLCamera.Parent).AbsoluteDirection;
          //Gra_GLCamera.ResetRotations();

          if Gra_GLCamera.FocalLength <> kamera_ogniskowa_domyœlna_c then
            begin

              Gra_GLCamera.FocalLength := kamera_ogniskowa_domyœlna_c;
              kamera_ustawienie_kopia__kamera_tryb_g := kt_Brak;
              kamera_ustawienie_kopia__ogniskowa_g := -99;

            end;
          //---//if Gra_GLCamera.FocalLength <> kamera_ogniskowa_domyœlna_c then

        end;
      //---//if not ( Gra_GLCamera.Parent is TAmunicja ) then


      // Prze³¹cza na kolejn¹ wystrzelon¹ amunicjê.
      if not czy_kamera_od_najnowszego_pocisku then
        begin

          // Od najstarszego.

          while ( zt_amunicja_wystrzelona_list.Count > i )
            and ( Gra_GLCamera.Parent = zt_amunicja_wystrzelona_list[ i ] )
            and ( zt_statek.id_gracz = TAmunicja(zt_amunicja_wystrzelona_list[ i ]).id_gracz ) do // Prze³¹cza tylko na w³asnej amunicji gracza. //???
            inc( i );

        end
      else//if not czy_kamera_od_najnowszego_pocisku then
        begin

          // Od najnowszego.

          while ( zt_amunicja_wystrzelona_list.Count > i )
            and ( i > 0 )
            and ( Gra_GLCamera.Parent = zt_amunicja_wystrzelona_list[ i ] )
            and ( zt_statek.id_gracz = TAmunicja(zt_amunicja_wystrzelona_list[ i ]).id_gracz ) do // Prze³¹cza tylko na w³asnej amunicji gracza. //???
            dec( i );

        end;
      //---//if not czy_kamera_od_najnowszego_pocisku then


      // Ustawia kamerê na amunicji.
      if    ( zt_amunicja_wystrzelona_list.Count > 0 )
        and ( i < zt_amunicja_wystrzelona_list.Count )
        and ( i >= 0 )
        and ( zt_statek.id_gracz = TAmunicja(zt_amunicja_wystrzelona_list[ i ]).id_gracz ) then // Prze³¹cza tylko na w³asnej amunicji gracza. //???
          begin

            Gra_GLCamera.Parent := zt_amunicja_wystrzelona_list[ i ];
            kamera_indeks_amunicji_g := i;

          end;
        //---//if    ( zt_amunicja_wystrzelona_list.Count > 0 ) (...)


      // Ustawia kamerê w kierunku lotu pocisku.
      // U klientów amunicja wieloosobowa jest inaczej tworzona i kamera bêdzie zmieniaæ k¹t wraz z przechy³em amunicji.
      Gra_GLCamera.Position.SetPoint( 0, 1, 0 );
      Gra_GLCamera.ResetRotations();
      Gra_GLCamera.AbsoluteDirection := TAmunicja(Gra_GLCamera.Parent).AbsoluteDirection;
      Gra_GLCamera.Direction.Y := -TAmunicja(Gra_GLCamera.Parent).AbsoluteDirection.Y;
      {$endregion 'kt_Amunicja.'}


      if kamera_tryb_g <> kt_Amunicja then
        kamera_tryb_g := kt_Amunicja;

    end
  else//if czy_na_pocisk then
  if    ( kamera_tryb_f = kt_Artyleria )
    and ( zt_statek <> nil )
    and (  Length( zt_statek.artyleria_t ) > 0  ) then
    begin

      // Ustawia kamerê do celowania artyleri¹ (z góry).

      //zt_vector_1 := Gra_GLCamera.AbsoluteDirection;
      zt_vector_1.Y := Gra_GLCamera.Position.Y;

      if kamera_tryb_g <> kt_Artyleria then
        begin

          //if kamera_tryb_g = kt_Statek then
          //if kamera_tryb_g in [ kt_Statek, kt_Statek__Projektowy_Tryb, kt_Za_Statkiem ] then
          if kamera_tryb_g in [ kt_Statek, kt_Statek__Fale, kt_Statek__Projektowy_Tryb, kt_Za_Statkiem, kt_Za_Statkiem__Fale ] then
            begin

              kamera_ustawienie_kopia__kamera_tryb_g := kamera_tryb_g;
              kamera_ustawienie_kopia__ogniskowa_g := Gra_GLCamera.FocalLength;
              kamera_ustawienie_kopia__kierunek_g := Gra_GLCamera.Direction.AsVector;
              kamera_ustawienie_kopia__góra_g := Gra_GLCamera.Up.AsVector;
              kamera_ustawienie_kopia__pozycja_g := Gra_GLCamera.Position.AsVector;

            end;
          //---//if kamera_tryb_g in [ kt_Statek, kt_Statek__Fale, kt_Statek__Projektowy_Tryb, kt_Za_Statkiem, kt_Za_Statkiem__Fale ] then


          // Resetuje przybli¿enie lunety i wynikaj¹c¹ z tego zmianê szybkoœci ruchu kamery.
          Gra_GLCamera.FocalLength := kamera_ogniskowa_domyœlna_c;
          Gra_GLSceneViewerMouseWheel( nil, [], 0, zt_point, ztb );


          Gra_GLCamera.ResetRotations();

          //if Gra_GLUserInterface.MouseLookActive then
          //  Gra_GLUserInterface.MouseLookActive := false;

          Gra_GLCamera.Parent := Gra_GLScene.Objects;

          // Ustawia kamerê w kierunku od statku do celu.
          Gra_GLCamera.Direction.SetVector
            (   // Cel                 Obiekt celuj¹cy
                zt_statek.celownicza_linia.LocalToAbsolute( zt_statek.celownicza_linia.Nodes[ 1 ].AsAffineVector ).X - zt_statek.AbsolutePosition.X
              , 0
              , zt_statek.celownicza_linia.LocalToAbsolute( zt_statek.celownicza_linia.Nodes[ 1 ].AsAffineVector ).Z - zt_statek.AbsolutePosition.Z
            );

        end;
      //---//if kamera_tryb_g <> kt_Artyleria then


      // Ustawia kamerê nad celem.
      if zt_statek.DistanceTo(  zt_statek.celownicza_linia.LocalToAbsolute( zt_statek.celownicza_linia.Nodes[ 1 ].AsAffineVector )  ) <= zt_statek.artyleria_t[ 0 ].zasiêg__broñ then
        Gra_GLCamera.Position.AsAffineVector := zt_statek.celownicza_linia.LocalToAbsolute( zt_statek.celownicza_linia.Nodes[ 1 ].AsAffineVector )
      else//if zt_statek.DistanceTo(  zt_statek.celownicza_linia.LocalToAbsolute( zt_statek.celownicza_linia.Nodes[ 1 ].AsAffineVector )  ) <= zt_statek.artyleria_t[ 0 ].zasiêg__broñ then
        begin

          // Je¿eli cel jest poza zasiêgiem artylerii ustawi kamerê na granicy zasiêgu w kierunku celu.

          Gra_GLCamera.Position.AsVector := zt_statek.AbsolutePosition;
          //Gra_GLCamera.Position.AddScaledVector( zt_statek.artyleria_t[ 0 ].zasiêg__broñ, Gra_GLCamera.AbsoluteDirection );

          Gra_GLCamera.Position.AddScaledVector
            (
              zt_statek.artyleria_t[ 0 ].zasiêg__broñ,
              GLS.VectorGeometry.VectorNormalize
                (
                  // Ustawia kamerê w kierunku od statku do celu.
                  GLS.VectorGeometry.VectorMake
                    (   // Cel                 Obiekt celuj¹cy
                        zt_statek.celownicza_linia.LocalToAbsolute( zt_statek.celownicza_linia.Nodes[ 1 ].AsAffineVector ).X - zt_statek.AbsolutePosition.X
                      , 0
                      , zt_statek.celownicza_linia.LocalToAbsolute( zt_statek.celownicza_linia.Nodes[ 1 ].AsAffineVector ).Z - zt_statek.AbsolutePosition.Z
                    )
                )
            );

        end;
      //---//if zt_statek.DistanceTo(  zt_statek.celownicza_linia.LocalToAbsolute( zt_statek.celownicza_linia.Nodes[ 1 ].AsAffineVector )  ) <= zt_statek.artyleria_t[ 0 ].zasiêg__broñ then


      if kamera_tryb_g <> kt_Artyleria then
        begin

          // Ustawia wysokoœæ kamery i obraca w dó³.
          Gra_GLCamera.Position.Y := 40;
          Gra_GLCamera.PitchAngle := -90;

          kamera_tryb_g := kt_Artyleria;

        end
      else//if kamera_tryb_g <> kt_Artyleria then
        Gra_GLCamera.Position.Y := zt_vector_1.Y;

    end
  else//if    ( kamera_tryb_f = kt_Artyleria ) (...)
  if    ( kamera_tryb_f in [ kt_Statek, kt_Statek__Fale, kt_Statek__Swobodna ] )
    and ( zt_statek <> nil ) then
    begin

      // Ustawia kamerê na statku.

      if kamera_ustawienie_kopia__kamera_tryb_g <> kt_Artyleria then // Przy pierwszym prze³¹czaniu, je¿eli nie wraca z trybu kamery artyleryjskiej, spróbuje zachowaæ poprzedni kierunek kamery.
        zt_vector_1 := Gra_GLCamera.AbsoluteDirection;

      Gra_GLCamera.ResetRotations();

      if kamera_tryb_f = kt_Statek__Fale then
        Gra_GLCamera.Parent := zt_statek.falowanie_gl_dummy_cube
      else//if kamera_tryb_f = kt_Statek__Fale then
        Gra_GLCamera.Parent := zt_statek;

      //Gra_GLCamera.Position.SetPoint( 0, 1, 0 );
      Gra_GLCamera.Position.AsVector := Wieloosobowe__Wektor_4__Do__Vector( zt_statek.kamera_na_statek_pozycja );


      //if kamera_tryb_g <> kt_Statek then
      if not ( kamera_tryb_g in [ kt_Statek, kt_Statek__Fale ] ) then
        begin

          if kamera_ustawienie_kopia__kamera_tryb_g <> kt_Artyleria then // Przy pierwszym prze³¹czaniu, je¿eli nie wraca z trybu kamery artyleryjskiej, spróbuje zachowaæ poprzedni kierunek kamery.
            ////Gra_GLCamera.Up := zt_statek.Up;
            //Gra_GLCamera.Up.SetVector( 0, 1, 0 );
            //Gra_GLCamera.AbsoluteDirection := zt_statek.AbsoluteDirection;
            Gra_GLCamera.AbsoluteDirection := zt_vector_1;


          if kamera_ustawienie_kopia__ogniskowa_g > 0 then
            begin

              Gra_GLCamera.FocalLength := kamera_ustawienie_kopia__ogniskowa_g;
              Gra_GLCamera.Direction.AsVector := kamera_ustawienie_kopia__kierunek_g;
              Gra_GLCamera.Up.AsVector := kamera_ustawienie_kopia__góra_g;
              Gra_GLCamera.Position.AsVector := kamera_ustawienie_kopia__pozycja_g;

              kamera_ustawienie_kopia__kamera_tryb_g := kt_Brak;
              kamera_ustawienie_kopia__ogniskowa_g := -99;

            end;
          //---//kamera_ustawienie_kopia__ogniskowa_g


          if kamera_tryb_f = kt_Statek__Fale then
            kamera_tryb_g := kt_Statek__Fale
          else//if kamera_tryb_f = kt_Statek__Fale then
            kamera_tryb_g := kt_Statek;

        end;
      //---//if not ( kamera_tryb_g in [ kt_Statek, kt_Statek__Fale ] ) then

    end
  else//if    ( kamera_tryb_f in [ kt_Statek, kt_Statek__Fale, kt_Statek__Swobodna ] ) (...)
  if    ( kamera_tryb_f = kt_Statek__Projektowy_Tryb )
    and ( projektowy_tryb__statek <> nil ) then
    begin

      // Ustawia kamerê na statku wskazanym dla trybu projektowego.

      //Gra_GLCamera.ResetRotations();
      //
      //Gra_GLCamera.Parent := projektowy_tryb__statek;
      //
      //Gra_GLCamera.Position := projektowy_tryb__statek.Position;
      //Gra_GLCamera.Position.AsVector := Wieloosobowe__Wektor_4__Do__Vector( projektowy_tryb__statek.kamera_za_statkiem_pozycja );
      //
      //Gra_GLCamera.Up.SetVector( 0, 1, 0 );
      //Gra_GLCamera.AbsoluteDirection := projektowy_tryb__statek.AbsoluteDirection;
      //
      //
      //if kamera_tryb_g <> kt_Statek__Projektowy_Tryb then
      //  kamera_tryb_g := kt_Statek__Projektowy_Tryb;

      if kamera_tryb_g <> kt_Statek__Projektowy_Tryb then
        begin

          zt_vector_1 := Gra_GLCamera.AbsoluteDirection;
          Gra_GLCamera.ResetRotations();

        end;
      //---//if kamera_tryb_g <> kt_Statek__Projektowy_Tryb then


      Gra_GLCamera.Parent := projektowy_tryb__statek;


      if kamera_tryb_g <> kt_Statek__Projektowy_Tryb then
        begin

          Gra_GLCamera.Position.AsVector := Wieloosobowe__Wektor_4__Do__Vector( projektowy_tryb__statek.kamera_na_statek_pozycja );


          Gra_GLCamera.AbsoluteDirection := zt_vector_1;


          if kamera_ustawienie_kopia__ogniskowa_g > 0 then
            begin

              Gra_GLCamera.FocalLength := kamera_ustawienie_kopia__ogniskowa_g;
              Gra_GLCamera.Direction.AsVector := kamera_ustawienie_kopia__kierunek_g;
              Gra_GLCamera.Up.AsVector := kamera_ustawienie_kopia__góra_g;
              Gra_GLCamera.Position.AsVector := kamera_ustawienie_kopia__pozycja_g;

              kamera_ustawienie_kopia__kamera_tryb_g := kt_Brak;
              kamera_ustawienie_kopia__ogniskowa_g := -99;

            end;
          //---//kamera_ustawienie_kopia__ogniskowa_g


          kamera_tryb_g := kt_Statek__Projektowy_Tryb;

        end;
      //---//if kamera_tryb_g <> kt_Statek__Projektowy_Tryb then

    end
  else//if    ( kamera_tryb_f = kt_Statek__Swobodna ) (...)
  if   ( kamera_tryb_f = kt_Swobodna )
    or (
             ( kamera_tryb_f = kt_Statek__Swobodna )
         and ( zt_statek = nil )
       ) then
    begin

      // Ustawia kamerê swobodn¹.

      if kamera_tryb_g <> kt_Swobodna then
        begin

          zt_vector_1 := Gra_GLCamera.AbsoluteDirection;
          zt_vector_2 := Gra_GLCamera.AbsolutePosition;
          //Gra_GLCamera.ResetRotations();

        end;
      //---//if kamera_tryb_g <> kt_Swobodna then


      Gra_GLCamera.Parent := Gra_GLScene.Objects;


      if kamera_tryb_g <> kt_Swobodna then
        begin

          if Gra_GLCamera.FocalLength <> kamera_ogniskowa_domyœlna_c then
            begin

              Gra_GLCamera.FocalLength := kamera_ogniskowa_domyœlna_c;
              kamera_ustawienie_kopia__kamera_tryb_g := kt_Brak;
              kamera_ustawienie_kopia__ogniskowa_g := -99;

            end;
          //---//if Gra_GLCamera.FocalLength <> kamera_ogniskowa_domyœlna_c then

          Gra_GLCamera.AbsoluteDirection := zt_vector_1;
          Gra_GLCamera.AbsolutePosition := zt_vector_2;
          kamera_tryb_g := kt_Swobodna;

          Mysz_Czu³oœæ_EditChange( nil ); // Przywraca domyœlna prêdkoœæ obracana kamery.

        end;
      //---//if kamera_tryb_g <> kt_Swobodna then

    end
  else//if   ( kamera_tryb_f = kt_Swobodna ) (...)
  if    ( kamera_tryb_f in [ kt_Za_Statkiem, kt_Za_Statkiem__Fale ] )
    and ( zt_statek <> nil ) then
    begin

      // Ustawia kamerê za statkiem.

      Gra_GLCamera.ResetRotations();

      //Gra_GLCamera.Parent := Gra_GLScene.Objects;
      if kamera_tryb_f = kt_Za_Statkiem__Fale then
        Gra_GLCamera.Parent := zt_statek.falowanie_gl_dummy_cube
      else//if kamera_tryb_f = kt_Za_Statkiem__Fale then
        Gra_GLCamera.Parent := zt_statek;

      Gra_GLCamera.Position := zt_statek.Position;
      Gra_GLCamera.Position.AsVector := Wieloosobowe__Wektor_4__Do__Vector( zt_statek.kamera_za_statkiem_pozycja );

      Gra_GLCamera.Up.SetVector( 0, 1, 0 );
      //Gra_GLCamera.Direction.SetVector( 0, 0, -1 );
      Gra_GLCamera.AbsoluteDirection := zt_statek.AbsoluteDirection;


      //if kamera_tryb_g <> kt_Za_Statkiem then
      if not ( kamera_tryb_g in [ kt_Za_Statkiem, kt_Za_Statkiem__Fale ] ) then
        begin

          if kamera_ustawienie_kopia__ogniskowa_g > 0 then
            begin

              Gra_GLCamera.FocalLength := kamera_ustawienie_kopia__ogniskowa_g;
              Gra_GLCamera.Direction.AsVector := kamera_ustawienie_kopia__kierunek_g;
              Gra_GLCamera.Up.AsVector := kamera_ustawienie_kopia__góra_g;
              Gra_GLCamera.Position.AsVector := kamera_ustawienie_kopia__pozycja_g;

              kamera_ustawienie_kopia__kamera_tryb_g := kt_Brak;
              kamera_ustawienie_kopia__ogniskowa_g := -99;

            end;
          //---//kamera_ustawienie_kopia__ogniskowa_g


          if kamera_tryb_f = kt_Za_Statkiem__Fale then
            kamera_tryb_g := kt_Za_Statkiem__Fale
          else//if kamera_tryb_f = kt_Za_Statkiem__Fale then
            kamera_tryb_g := kt_Za_Statkiem;

        end;
      //---//if not ( kamera_tryb_g in [ kt_Za_Statkiem, kt_Za_Statkiem__Fale ] ) then

    end;
  //---//if    ( kamera_tryb_f in [ kt_Za_Statkiem, kt_Za_Statkiem__Fale ] ) (...)


  kamera_dla_prze³¹czania_statku_kopia__kamera_tryb_g := kamera_tryb_f;

end;//---//Funkcja Kamera_Prze³¹cz().

//Funkcja Kamera_Woda_Pod_Nad_Widok_Ustaw().
procedure TStatki_Form.Kamera_Woda_Pod_Nad_Widok_Ustaw();

  //Funkcja Statek_Gracza_W_Zanurzeniu() w Kamera_Woda_Pod_Nad_Widok_Ustaw().
  function Statek_Gracza_W_Zanurzeniu() : boolean;
  begin

    // Je¿eli statek gracza zanurzy siê g³êbiej ni¿ g³êbokoœæ zanurzenia peryskopowego to ca³y ekran jest ustawiany jakby by³ pod wod¹.

    if    ( Statek_Gracza__Gracz_Tryb_Zwróæ() <> nil )
      and ( Statek_Gracza__Gracz_Tryb_Zwróæ().Zanurzenie_Peryskopowe__Przekroczone() ) then
      Result := true
    else//if    ( Statek_Gracza__Gracz_Tryb_Zwróæ() <> nil ) (...)
      Result := false

  end;//---//Funkcja Statek_Gracza_W_Zanurzeniu() w Kamera_Woda_Pod_Nad_Widok_Ustaw().

begin//Funkcja Kamera_Woda_Pod_Nad_Widok_Ustaw().

  //
  // Funkcja zmienia widok dla zanurzania kamery.
  //

  Pod_Wod¹_GLHUDSprite.Position.X := Gra_GLSceneViewer.Width * 0.5;
  Pod_Wod¹_GLHUDSprite.Position.Y := Gra_GLSceneViewer.Height * 0.5;
  Pod_Wod¹_GLHUDSprite.Width := Gra_GLSceneViewer.Width; // Prawy dó³.
  Pod_Wod¹_GLHUDSprite.Height := Gra_GLSceneViewer.Height;


  if    (
             ( Gra_GLCamera.AbsolutePosition.Y < 0 )
          or ( Statek_Gracza_W_Zanurzeniu() )
        )
    and ( not Pod_Wod¹_GLHUDSprite.Visible ) then
    begin

      // Kamera wesz³a pod wodê.

      if not Projektowy_Tryb_CheckBox.Checked then
        begin

          Pod_Wod¹_GLHUDSprite.Visible := true;
          Gra_GLSceneViewer.Buffer.FogEnable := true;
          Gra_GLSceneViewer.Buffer.FogEnvironment.FogColor.Alpha := 0.2;

        end;
      //---//if not Projektowy_Tryb_CheckBox.Checked then

    end
  else//if    ( Gra_GLCamera.AbsolutePosition.Y < 0 ) (...)
  if    ( Gra_GLCamera.AbsolutePosition.Y >= 0 )
    and ( not Statek_Gracza_W_Zanurzeniu() )
    and ( Pod_Wod¹_GLHUDSprite.Visible ) then
    begin

      // Kamera wysz³a spod wody.

      Pod_Wod¹_GLHUDSprite.Visible := false;
      Mg³a_SpinEditChange( Gra_GLCadencer );

    end;
  //---//if    ( Gra_GLCamera.AbsolutePosition.Y >= 0 ) (...)


  if Statek_Gracza__Gracz_Tryb_Zwróæ() <> nil then
    begin

      if Gra_GLCamera.AbsolutePosition.Y < 0 then
        Statek_Gracza__Gracz_Tryb_Zwróæ().Celownik_Linia_Bez_Falowania__Pozycja_Y_Dostosuj( true )
      else//if Gra_GLCamera.AbsolutePosition.Y < 0 then
        Statek_Gracza__Gracz_Tryb_Zwróæ().Celownik_Linia_Bez_Falowania__Pozycja_Y_Dostosuj( false, not Statek_Gracza__Gracz_Tryb_Zwróæ().Zanurzenie_Peryskopowe__Przekroczone() );

    end;
  //---//if Statek_Gracza__Gracz_Tryb_Zwróæ() <> nil then

end;//---//Funkcja Kamera_Woda_Pod_Nad_Widok_Ustaw().

//Funkcja Klawisz_Konfiguracja_Zwolnij().
procedure TStatki_Form.Klawisz_Konfiguracja_Zwolnij();
var
  i : integer;
begin

  for i := Klawiatura_Konfiguracja_ScrollBox.ControlCount - 1 downto 0 do // Tylko wizualne. // Zwalnia elementy okna, które s¹ podrzêdne dla Element_Nadrzedny (tu ScrollBox1).
    Klawiatura_Konfiguracja_ScrollBox.Controls[ i ].Free();

end;//---//Funkcja Klawisz_Konfiguracja_Zwolnij().

//Funkcja Klawisz_Wciœniêto_SprawdŸ().
function TStatki_Form.Klawisz_Wciœniêto_SprawdŸ( const klawiatura_konfiguracja_r_f : TKlawiatura_Konfiguracja_r; const klawisz_f : Word; const mysz_przycisk_f : SmallInt; const shift_f : TShiftState; const czy_z_wieloosobowe__odczytaj_f : boolean = false ) : boolean;

  //Funkcja Klawisz_Plus__Alt_Ctrl_Shift() w Klawisz_Wciœniêto_SprawdŸ().
  function Klawisz_Plus__Alt_Ctrl_Shift( const klawiatura_konfiguracja_r_f : TKlawiatura_Konfiguracja_r ) : boolean; overload;
  begin

    //
    // Funkcja sprawdza czy wciœniêto klawisz z odpowiedni¹ konfiguracj¹ klawiszy Alt, Ctrl, Shift.
    //
    // Zwraca prawdê gdy wciœniêto klawisz z odpowiedni¹ konfiguracj¹ klawiszy Alt, Ctrl, Shift.
    //
    // Parametry:
    //   klawiatura_konfiguracja_r_f
    //

    if    (
               (
                     ( klawiatura_konfiguracja_r_f.plus_alt )
                 and (  GLS.Keyboard.IsKeyDown( VK_MENU )  )
               )
            or (
                     ( not klawiatura_konfiguracja_r_f.plus_alt )
                 and (  not GLS.Keyboard.IsKeyDown( VK_MENU )  )
               )
          )
      and (
               (
                     ( klawiatura_konfiguracja_r_f.plus_ctrl )
                 and ( GLS.Keyboard.IsKeyDown( VK_CONTROL ) )
               )
            or (
                     ( not klawiatura_konfiguracja_r_f.plus_ctrl )
                 and (  not GLS.Keyboard.IsKeyDown( VK_CONTROL )  )
               )

            // Prawy Alt zg³asza siê jako Alt i Ctrl jednoczeœnie.
            // To rozwi¹zanie sprawia, ¿e konfiguracje 'Alt' oraz 'Alt + Ctrl' s¹ nierozró¿nialne
            // ale przynajmniej dzia³aj¹ ustawienia 'Alt +' oraz 'Ctrl +'.
            or (
                     ( klawiatura_konfiguracja_r_f.plus_alt )
                 and ( not klawiatura_konfiguracja_r_f.plus_ctrl )
                 and (  GLS.Keyboard.IsKeyDown( VK_MENU )  )
                 and (  GLS.Keyboard.IsKeyDown( VK_CONTROL )  )
               )
          )
      and (
               (
                     ( klawiatura_konfiguracja_r_f.plus_shift )
                 and ( GLS.Keyboard.IsKeyDown( VK_SHIFT ) )
               )
            or (
                     ( not klawiatura_konfiguracja_r_f.plus_shift )
                 and (  not GLS.Keyboard.IsKeyDown( VK_SHIFT )  )
               )
          )
      then
      Result := true
    else//if    ( (...)
      Result := false;

  end;//---//Funkcja Klawisz_Plus__Alt_Ctrl_Shift() w Klawisz_Wciœniêto_SprawdŸ().

  //Funkcja Klawisz_Plus__Alt_Ctrl_Shift() w Klawisz_Wciœniêto_SprawdŸ().
  function Klawisz_Plus__Alt_Ctrl_Shift( const klawiatura_konfiguracja_r_f : TKlawiatura_Konfiguracja_r; const shift_f : TShiftState ) : boolean; overload;
  begin

    //
    // Funkcja sprawdza czy wciœniêto klawisz z odpowiedni¹ konfiguracj¹ klawiszy Alt, Ctrl, Shift.
    //
    // Zwraca prawdê gdy wciœniêto klawisz z odpowiedni¹ konfiguracj¹ klawiszy Alt, Ctrl, Shift.
    //
    // Parametry:
    //   klawiatura_konfiguracja_r_f
    //   shift_f:
    //

    if    (
               (
                     ( klawiatura_konfiguracja_r_f.plus_alt )
                 and ( ssAlt in shift_f )
               )
            or (
                     ( not klawiatura_konfiguracja_r_f.plus_alt )
                 and (  not ( ssAlt in shift_f )  )
               )
          )
      and (
               (
                     ( klawiatura_konfiguracja_r_f.plus_ctrl )
                 and ( ssCtrl in shift_f )
               )
            or (
                     ( not klawiatura_konfiguracja_r_f.plus_ctrl )
                 and (  not ( ssCtrl in shift_f )  )
               )

            // Prawy Alt zg³asza siê jako Alt i Ctrl jednoczeœnie.
            // To rozwi¹zanie sprawia, ¿e konfiguracje 'Alt' oraz 'Alt + Ctrl' s¹ nierozró¿nialne
            // ale przynajmniej dzia³aj¹ ustawienia 'Alt +' oraz 'Ctrl +'.
            or (
                     ( klawiatura_konfiguracja_r_f.plus_alt )
                 and ( not klawiatura_konfiguracja_r_f.plus_ctrl )
                 and ( ssAlt in shift_f )
                 and ( ssCtrl in shift_f )
               )
          )
      and (
               (
                     ( klawiatura_konfiguracja_r_f.plus_shift )
                 and ( ssShift in shift_f )
               )
            or (
                     ( not klawiatura_konfiguracja_r_f.plus_shift )
                 and (  not ( ssShift in shift_f )  )
               )
          )
      then
      Result := true
    else//if    ( (...)
      Result := false;

  end;//---//Funkcja Klawisz_Plus__Alt_Ctrl_Shift() w Klawisz_Wciœniêto_SprawdŸ().

begin//Funkcja Klawisz_Wciœniêto_SprawdŸ().

  //
  // Funkcja sprawdza czy zosta³a wciœniêta zadana kombinacja klawiszy.
  //
  // Zwraca prawdê gdy zosta³a wciœniêta zadana kombinacja klawiszy.
  //
  // Parametry:
  //   klawiatura_konfiguracja_r_f
  //   klawisz_f - wciœniêty klawisz (0 = brak) (ma znaczenie przy obs³udze klientów wieloosobowych).
  //   mysz_przycisk_f - wciœniêty przycisk myszy (-1 = brak).
  //   shift_f - wciœniêty klawisz funkcyjny (ma znaczenie przy obs³udze przycisków myszy i klientów wieloosobowych).
  //   czy_z_wieloosobowe__odczytaj_f
  //     false - informacja analizowana wewnêtrznie w ramach programu.
  //     true - informacjê przes³a³ klient do serwera.
  //

  if   (
             ( not klawiatura_konfiguracja_r_f.czy_mysz )
         and (
                  (
                        ( not czy_z_wieloosobowe__odczytaj_f )
                    and (  GLS.Keyboard.IsKeyDown( klawiatura_konfiguracja_r_f.klawisz )  )
                    and (  Klawisz_Plus__Alt_Ctrl_Shift( klawiatura_konfiguracja_r_f )  )
                  )
               or (
                        ( czy_z_wieloosobowe__odczytaj_f )
                    and ( klawisz_f <> 0 )
                    and ( klawiatura_konfiguracja_r_f.klawisz = klawisz_f )
                    and (  Klawisz_Plus__Alt_Ctrl_Shift( klawiatura_konfiguracja_r_f, shift_f )  )
                  )
             )
       )
    or (
             ( klawiatura_konfiguracja_r_f.czy_mysz )
         and ( not klawiatura_konfiguracja_r_f.mysz_niezdefiniowana )
         and ( klawiatura_konfiguracja_r_f.klawisz = mysz_przycisk_f )
         and (  Klawisz_Plus__Alt_Ctrl_Shift( klawiatura_konfiguracja_r_f, shift_f )  )
       ) then
    Result := true
  else//if   ( (...)
    Result := false;

end;//---//Funkcja Klawisz_Wciœniêto_SprawdŸ().

//Funkcja Klawisze_Obs³uga().
procedure TStatki_Form.Klawisze_Obs³uga( const klawisz_f : Word; const mysz_przycisk_f : SmallInt; const shift_f : TShiftState );

  //Funkcja Klawisz_Wciœniêto_SprawdŸ_l() w Klawisze_Obs³uga().
  function Klawisz_Wciœniêto_SprawdŸ_l( const klawiatura_konfiguracja_r_f : TKlawiatura_Konfiguracja_r ) : boolean;
  begin

    Result := Klawisz_Wciœniêto_SprawdŸ( klawiatura_konfiguracja_r_f, klawisz_f, mysz_przycisk_f, shift_f );

  end;//---//Funkcja Klawisz_Wciœniêto_SprawdŸ_l() w Klawisze_Obs³uga().

  //Funkcja Statek_Samolot_Gracza_Prze³¹cz_l() w Klawisze_Obs³uga().
  procedure Statek_Samolot_Gracza_Prze³¹cz_l( const gracz_tryb_f : TGracz_Tryb; const kamera_prze³¹cz_f : boolean = false );
  var
    zt_statek_l : TStatek;
  begin

    // To samo w Statek_Samolot_Gracza_Prze³¹cz_l() w Klawisze_Obs³uga(), Statek_Parametry_Ustaw().

    gracz_tryb_g := gracz_tryb_f;

    zt_statek_l := Statek_Gracza__Gracz_Tryb_Zwróæ();

    if zt_statek_l <> nil then
      begin

        gracz_tryb_g := gt_Brak; // Blokuje prze³¹czanie ustawieñ.


        // Ustawia parametry interfejsu zgodnie z ustawieniami statku, na który nastêpuje prze³¹czenie.
        ar_Artyleria_CheckBox.Checked := zt_statek_l.amunicja_rodzaj_wybrana__artyleria;
        ar_Bomba_G³êbinowa_CheckBox.Checked := zt_statek_l.amunicja_rodzaj_wybrana__bomba_g³êbinowa;
        ar_Je¿e_G³êbinowe_CheckBox.Checked := zt_statek_l.amunicja_rodzaj_wybrana__je¿e_g³êbinowe;
        ar_Pocisk_CheckBox.Checked := zt_statek_l.amunicja_rodzaj_wybrana__pocisk;
        ar_Torpeda_CheckBox.Checked := zt_statek_l.amunicja_rodzaj_wybrana__torpeda;
        ar_Wszystkie_CheckBox.Checked := zt_statek_l.amunicja_rodzaj_wybrana__wszystkie;
        Celowanie__Bronie_Osobno_CheckBox.Checked := zt_statek_l.celowanie__bronie_osobno;

        if zt_statek_l.celowanie__tryb = ct_Linia then
          Celowanie__Tryb_RadioGroup.ItemIndex := 0 // równoleg³y.
        else//if zt_statek_l.celowanie__tryb = ct_Linia then
        if zt_statek_l.celowanie__tryb = ct_Punkt then
          Celowanie__Tryb_RadioGroup.ItemIndex := 1; // zbie¿ny.

        Celownicze_Linie_Unoœ_CheckBox.Checked := zt_statek_l.celownicze_linie_unoœ;

        Œwiat³a_CheckBox.Checked := zt_statek_l.œwiat³a_w³¹czone;
        Œwiat³a_Dodatkowe_CheckBox.Checked := zt_statek_l.œwiat³a_dodatkowe_w³¹czone;


        gracz_tryb_g := gracz_tryb_f;

      end;
    //---//if zt_statek_l <> nil then


    if kamera_prze³¹cz_f then
      Kamera_Na_Statek_Gracza_Ustaw();

    Interfejs_Parametry_Wed³ug_Statku_Ustaw();

  end;//---//Funkcja Statek_Samolot_Gracza_Prze³¹cz_l() w Klawisze_Obs³uga().

var
  klawisz_l : word;
begin//Funkcja Klawisze_Obs³uga().

  //if Key = VK_ESCAPE then
  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zamknij_program ) then
    begin

      Close();
      Exit;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zamknij_program ) then


  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__mouse_look_active ) then
    begin

      Gra_GLUserInterface.MouseLookActive := not Gra_GLUserInterface.MouseLookActive;


      if    ( Gra_GLUserInterface.MouseLookActive )
        and ( Celownik_Widocznoœæ_Mouse_Look_Active_CheckBox.Checked )
        and ( not Celownik_Widocznoœæ_CheckBox.Checked ) then
        begin

          celownik_widocznoœæ__prze³¹czony_g := true;
          Celownik_Widocznoœæ_CheckBox.Checked := true;

        end
      else//if    ( Gra_GLUserInterface.MouseLookActive ) (...)
      if    ( not Gra_GLUserInterface.MouseLookActive )
        and ( Celownik_Widocznoœæ_Mouse_Look_Active_CheckBox.Checked )
        and ( Celownik_Widocznoœæ_CheckBox.Checked )
        and ( celownik_widocznoœæ__prze³¹czony_g ) then
        begin

          celownik_widocznoœæ__prze³¹czony_g := false;
          Celownik_Widocznoœæ_CheckBox.Checked := false;

        end;
      //---//if    ( not Gra_GLUserInterface.MouseLookActive ) (...)

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__mouse_look_active ) then


  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__opcje ) then
    begin

      if PageControl1.Width > 1 then
        begin

          if not Pe³ny_Ekran_CheckBox.Checked then
            PageControl1.Width := 1
          else//if not Pe³ny_Ekran_CheckBox.Checked then
            begin

              PageControl1.Width := 0;
              Opcje_Pionowy_Splitter.Visible := not Pe³ny_Ekran_CheckBox.Checked;

            end;
          //---//if not Pe³ny_Ekran_CheckBox.Checked then

        end
      else//if PageControl1.Width > 1 then
        begin

          if not Opcje_Pionowy_Splitter.Visible then
            Opcje_Pionowy_Splitter.Visible := true;


          //PageControl1.Width := Round( Self.Width * 0.2 );

          //if PageControl1.Width < page_control_1_szerokoœæ_pocz¹tkowa_g then
          //  PageControl1.Width := Round( Self.Width * 0.35 );

          PageControl1.Width := page_control_1_szerokoœæ_pocz¹tkowa_g;

        end;
      //---//if PageControl1.Width > 1 then

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__opcje ) then


  //if Key = Ord( 'P' ) then
  if    (  Klawisz_Wciœniêto_SprawdŸ_l( klawisz__pauza )  )
    and ( not czy_klient_g ) then
    begin

      Pauza( not czy_pauza_g );

    end;
  //---//if    (  Klawisz_Wciœniêto_SprawdŸ_l( klawisz__pauza )  ) (...)


  //if not czy_pauza_g then
    begin

      //// Pauza nie jest ca³kowicie aktywna (nie wszystkie klawisze s¹ obs³ugiwane podczas pauzy).
      // Mo¿e lepiej aby pauza by³a aktywna.


      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__amunicja__zanurzenie_g³êbokoœæ_zadana__minus ) then
        begin

          klawisz_l := VK_DOWN;
          Edit_Jako_Spin_KeyDown( Amunicja__Zanurzenie_G³êbokoœæ_Zadana_Edit, klawisz_l, [] );

        end;
      //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__amunicja__zanurzenie_g³êbokoœæ_zadana__minus ) then

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__amunicja__zanurzenie_g³êbokoœæ_zadana__plus ) then
        begin

          klawisz_l := VK_UP;
          Edit_Jako_Spin_KeyDown( Amunicja__Zanurzenie_G³êbokoœæ_Zadana_Edit, klawisz_l, [] );

        end;
      //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__amunicja__zanurzenie_g³êbokoœæ_zadana__plus ) then

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__celowanie_bronie_osobno ) then
        Celowanie__Bronie_Osobno_CheckBox.Checked := not Celowanie__Bronie_Osobno_CheckBox.Checked;

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__celowanie_tryb ) then
        if Celowanie__Tryb_RadioGroup.ItemIndex = 0 then
          Celowanie__Tryb_RadioGroup.ItemIndex := 1
        else//if Celowanie__Tryb_RadioGroup.ItemIndex = 0 then
          Celowanie__Tryb_RadioGroup.ItemIndex := 0;

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__celownicze_linie_unoœ ) then
        Celownicze_Linie_Unoœ_CheckBox.Checked := not Celownicze_Linie_Unoœ_CheckBox.Checked;

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__celownik_bombowiec_widocznoœæ ) then
        Celownik_Bombowiec_Widocznoœæ_CheckBox.Checked := not Celownik_Bombowiec_Widocznoœæ_CheckBox.Checked;

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__celownik_widocznoœæ ) then
        Celownik_Widocznoœæ_CheckBox.Checked := not Celownik_Widocznoœæ_CheckBox.Checked;

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__celownik_widocznoœæ_mouse_look_active ) then
        begin

          Celownik_Widocznoœæ_Mouse_Look_Active_CheckBox.Checked := not Celownik_Widocznoœæ_Mouse_Look_Active_CheckBox.Checked;

          if Celownik_Widocznoœæ_Mouse_Look_Active_CheckBox.Checked then
            Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__wyœwietlaj_celownik_w_trybie_obracania_kamery_mysz¹, 3 )
          else//if Celownik_Widocznoœæ_Mouse_Look_Active_CheckBox.Checked then
            Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__nie_wyœwietlaj_celownika_w_trybie_obracania_kamery_mysz¹, 3 );

        end;
      //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__celownik_widocznoœæ_mouse_look_active ) then


      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__dalmierz ) then
        Dalmierz_CheckBox.Checked := not Dalmierz_CheckBox.Checked;

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__dalmierz_tryb ) then
        begin

          klawisz_l := Dalmierz_Tryb_RadioGroup.ItemIndex + 1; // Tutaj tymczasowo jako indeks trybu dalmierza.

          if klawisz_l > Dalmierz_Tryb_RadioGroup.Items.Count - 1 then
            klawisz_l := 0;

          if    ( Dalmierz_Tryb_RadioGroup.Items.Count > 0 )
            and ( klawisz_l >= 0 )
            and ( klawisz_l <= Dalmierz_Tryb_RadioGroup.Items.Count - 1 ) then
            Dalmierz_Tryb_RadioGroup.ItemIndex := klawisz_l;

        end;
      //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__dalmierz_tryb ) then


      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__dŸwiêk__g³oœnoœæ__minus ) then
        DŸwiêk__G³oœnoœæ_SpinEdit.Value := DŸwiêk__G³oœnoœæ_SpinEdit.Value - 5;

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__dŸwiêk__g³oœnoœæ__plus ) then
        DŸwiêk__G³oœnoœæ_SpinEdit.Value := DŸwiêk__G³oœnoœæ_SpinEdit.Value + 5;


      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__kamera__Amunicja ) then
        Kamera_Prze³¹cz( kt_Amunicja );

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__kamera__Artyleria ) then
        Kamera_Prze³¹cz( kt_Artyleria );

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__kamera__Statek ) then
        Kamera_Prze³¹cz( kt_Statek );

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__kamera__Statek__Fale ) then
        Kamera_Prze³¹cz( kt_Statek__Fale );

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__kamera__Statek__Projektowy_Tryb ) then
        Kamera_Prze³¹cz( kt_Statek__Projektowy_Tryb );

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__kamera__Swobodna ) then
        Kamera_Prze³¹cz( kt_Swobodna );

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__kamera__Za_Statkiem ) then
        Kamera_Prze³¹cz( kt_Za_Statkiem );

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__kamera__Za_Statkiem__Fale ) then
        Kamera_Prze³¹cz( kt_Za_Statkiem__Fale );


      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__l¹dowanie_u³atwione ) then
        if not czy_klient_g then
          L¹dowanie_U³atwione_CheckBox.Checked := not L¹dowanie_U³atwione_CheckBox.Checked;

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__lotniskowiec_samolot_l¹dowanie_informacje ) then
        Lotniskowiec_Samolot_L¹dowanie_Informacje_CheckBox.Checked := not Lotniskowiec_Samolot_L¹dowanie_Informacje_CheckBox.Checked;


      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__obrót_k¹t_zablokowany_strza³_wskaŸnik ) then
        Obrót_K¹t_Zablokowany_Strza³_WskaŸnik_CheckBox.Checked := not Obrót_K¹t_Zablokowany_Strza³_WskaŸnik_CheckBox.Checked;

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__obrót_k¹t_zablokowany_wskaŸnik ) then
        Obrót_K¹t_Zablokowany_WskaŸnik_CheckBox.Checked := not Obrót_K¹t_Zablokowany_WskaŸnik_CheckBox.Checked;


      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__pe³ny_ekran ) then
        Pe³ny_Ekran_CheckBox.Checked := not Pe³ny_Ekran_CheckBox.Checked;


      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__pokój_rozmów__na_ekranie ) then
        Pokój_Rozmów__Na_Ekranie_CheckBox.Checked := not Pokój_Rozmów__Na_Ekranie_CheckBox.Checked;

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__pokój_rozmów__informacja_dodatkowa ) then
        Pokój_Rozmów__Informacja_Dodatkowa_CheckBox.Checked := not Pokój_Rozmów__Informacja_Dodatkowa_CheckBox.Checked;


      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__punkt_naprowadzaj ) then
        Punkt_Naprowadzaj_CheckBox.Checked := not Punkt_Naprowadzaj_CheckBox.Checked;

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__punkt_naprowadzaj__na_lotniskowiec ) then
        Punkt_Naprowadzaj__Na_Lotniskowiec_CheckBox.Checked := not Punkt_Naprowadzaj__Na_Lotniskowiec_CheckBox.Checked;

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__punkt_naprowadzaj__odleg³oœæ_do_punktu_prezentuj ) then
        Punkt_Naprowadzaj__Odleg³oœæ_Do_Punktu_Prezentuj_CheckBox.Checked := not Punkt_Naprowadzaj__Odleg³oœæ_Do_Punktu_Prezentuj_CheckBox.Checked;

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__punkt_naprowadzaj__punkt ) then
        Punkt_Naprowadzaj__Punkt_CheckBox.Checked := not Punkt_Naprowadzaj__Punkt_CheckBox.Checked;

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__punkt_naprowadzaj__radar ) then
        Punkt_Naprowadzaj__Radar_CheckBox.Checked := not Punkt_Naprowadzaj__Radar_CheckBox.Checked;

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__punkt_naprowadzaj__strza³ka ) then
        Punkt_Naprowadzaj__Strza³ka_CheckBox.Checked := not Punkt_Naprowadzaj__Strza³ka_CheckBox.Checked;


      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__punkty_¿ycia_wskaŸnik__gracz ) then
        Punkty_¯ycia_WskaŸnik__Gracz_CheckBox.Checked := not Punkty_¯ycia_WskaŸnik__Gracz_CheckBox.Checked;

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__punkty_¿ycia_wskaŸnik__przeciwnik ) then
        Punkty_¯ycia_WskaŸnik__Przeciwnik_CheckBox.Checked := not Punkty_¯ycia_WskaŸnik__Przeciwnik_CheckBox.Checked;

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__punkty_¿ycia_wskaŸnik__sojusznik ) then
        Punkty_¯ycia_WskaŸnik__Sojusznik_CheckBox.Checked := not Punkty_¯ycia_WskaŸnik__Sojusznik_CheckBox.Checked;


      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__w³¹cz_wy³¹cz ) then
        if czy_klient_g then
          begin

            if Projektowy_Tryb_CheckBox.Checked then
              Projektowy_Tryb_CheckBox.Checked := false;

          end
        else//if    ( czy_klient_g ) (...)
          Projektowy_Tryb_CheckBox.Checked := not Projektowy_Tryb_CheckBox.Checked;


      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__samolot_statek_prze³¹cz ) then
        if    ( gracz_tryb_g = gt_Statek )
          and ( samolot__statek_gracza <> nil ) then
          begin

            Statek_Samolot_Gracza_Prze³¹cz_l( gt_Samolot, true );

          end
        else//if    ( gracz_tryb_g = gt_Statek ) (...)
        if    ( gracz_tryb_g = gt_Samolot )
          and ( statek_gracza <> nil ) then
          begin

            Statek_Samolot_Gracza_Prze³¹cz_l( gt_Statek, true );

          end;
        //---//if    ( gracz_tryb_g = gt_Samolot ) (...)


      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__samolot_statek_prze³¹cz_bez_kamery ) then
        if    ( gracz_tryb_g = gt_Statek )
          and ( samolot__statek_gracza <> nil ) then
          begin

            Statek_Samolot_Gracza_Prze³¹cz_l( gt_Samolot );

          end
        else//if    ( gracz_tryb_g = gt_Statek ) (...)
        if    ( gracz_tryb_g = gt_Samolot )
          and ( statek_gracza <> nil ) then
          begin

            Statek_Samolot_Gracza_Prze³¹cz_l( gt_Statek );

          end;
        //---//if    ( gracz_tryb_g = gt_Samolot ) (...)


      if    ( SI__P³ywa__Samolot_Gracza_CheckBox.Enabled )
        and (  Klawisz_Wciœniêto_SprawdŸ_l( klawisz__si__p³ywa__samolot_gracza )  ) then
        SI__P³ywa__Samolot_Gracza_CheckBox.Checked := not SI__P³ywa__Samolot_Gracza_CheckBox.Checked;

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__si__p³ywa__statek_gracza ) then
        SI__P³ywa__Statek_Gracza_CheckBox.Checked := not SI__P³ywa__Statek_Gracza_CheckBox.Checked;

      if    ( SI__Samolot_Gracza__L¹duj_Na_Lotniskowcu_Gracza_Button.Enabled )
        and (  Klawisz_Wciœniêto_SprawdŸ_l( klawisz__si__samolot_gracza__l¹duj_na_lotniskowcu_gracza )  ) then
        SI__Samolot_Gracza__L¹duj_Na_Lotniskowcu_Gracza_ButtonClick( nil );

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__si__statek_gracza__strzela__nie ) then
        SI__Strzela__Statek_Gracza_RadioGroup.ItemIndex := 0;

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__si__statek_gracza__strzela__tak ) then
        SI__Strzela__Statek_Gracza_RadioGroup.ItemIndex := 1;

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__si__statek_gracza__strzela__wszystkim ) then
        SI__Strzela__Statek_Gracza_RadioGroup.ItemIndex := 2;


      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__sos_nadaj ) then
        SOS_Nadaj_ButtonClick( nil );


      if    (  Klawisz_Wciœniêto_SprawdŸ_l( klawisz__strzelaj_z__artyleria )  )
        and ( ar_Artyleria_CheckBox.Enabled ) then
        ar_Artyleria_CheckBox.Checked := not ar_Artyleria_CheckBox.Checked;

      if    (  Klawisz_Wciœniêto_SprawdŸ_l( klawisz__strzelaj_z__bomba_g³êbinowa )  )
        and ( ar_Bomba_G³êbinowa_CheckBox.Enabled ) then
        ar_Bomba_G³êbinowa_CheckBox.Checked := not ar_Bomba_G³êbinowa_CheckBox.Checked;

      if    (  Klawisz_Wciœniêto_SprawdŸ_l( klawisz__strzelaj_z__je¿e_g³êbinowe )  )
        and ( ar_Je¿e_G³êbinowe_CheckBox.Enabled ) then
        ar_Je¿e_G³êbinowe_CheckBox.Checked := not ar_Je¿e_G³êbinowe_CheckBox.Checked;

      if    (  Klawisz_Wciœniêto_SprawdŸ_l( klawisz__strzelaj_z__pocisk )  )
        and ( ar_Pocisk_CheckBox.Enabled ) then
        ar_Pocisk_CheckBox.Checked := not ar_Pocisk_CheckBox.Checked;

      if    (  Klawisz_Wciœniêto_SprawdŸ_l( klawisz__strzelaj_z__torpeda )  )
        and ( ar_Torpeda_CheckBox.Enabled ) then
        ar_Torpeda_CheckBox.Checked := not ar_Torpeda_CheckBox.Checked;

      if    (  Klawisz_Wciœniêto_SprawdŸ_l( klawisz__strzelaj_z__wszystkie )  )
        and ( ar_Wszystkie_CheckBox.Enabled ) then
        ar_Wszystkie_CheckBox.Checked := not ar_Wszystkie_CheckBox.Checked;


      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__syrena_okrêtowa ) then
        Syrena_Okrêtowa__Inicjuj( Statek_Gracza__Gracz_Tryb_Zwróæ() );


      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__œwiat³a ) then
        Œwiat³a_CheckBox.Checked := not Œwiat³a_CheckBox.Checked;

      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__œwiat³a_dodatkowe ) then
        Œwiat³a_Dodatkowe_CheckBox.Checked := not Œwiat³a_Dodatkowe_CheckBox.Checked;


      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zanurzenie_zadane_przekraczaj_100_procent ) then
        Zanurzenie_Zadane_Przekraczaj_100_Procent_CheckBox.Checked := not Zanurzenie_Zadane_Przekraczaj_100_Procent_CheckBox.Checked;


      if not czy_klient_g then
        begin

          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__gra_wspó³czynnik_prêdkoœci__minus ) then
            Gra_Wspó³czynnik_Prêdkoœci_SpinEdit.Value := Gra_Wspó³czynnik_Prêdkoœci_SpinEdit.Value - Gra_Wspó³czynnik_Prêdkoœci_SpinEdit.Increment;

          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__gra_wspó³czynnik_prêdkoœci__normalna ) then
            Gra_Wspó³czynnik_Prêdkoœci_SpinEdit.Value := 100;

          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__gra_wspó³czynnik_prêdkoœci__plus ) then
            Gra_Wspó³czynnik_Prêdkoœci_SpinEdit.Value := Gra_Wspó³czynnik_Prêdkoœci_SpinEdit.Value + Gra_Wspó³czynnik_Prêdkoœci_SpinEdit.Increment;

          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__gra_wspó³czynnik_prêdkoœci__x_10 ) then
            Gra_Wspó³czynnik_Prêdkoœci_SpinEdit.Value := 1000;


          if    (  Klawisz_Wciœniêto_SprawdŸ_l( klawisz__l¹d_odœwie¿_wskazany )  )
            and ( L¹d_GroupBox.Enabled ) then
            L¹d__Odœwie¿_Wskazany_BitBtnClick( nil );


          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__statek__utwórz ) then
            begin

              klawisz_l := VK_RETURN;
              Statek_ComboBoxKeyDown( Statek__Samolot_ComboBox, klawisz_l, [] );

            end;
          //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__statek__utwórz ) then


        end;
      //---//if not czy_klient_g then



      //if    ( gracz_tryb_g = gt_Samolot )
      //  and ( samolot__statek_gracza <> nil ) then
      //  Klawisze_Obs³uga__Statek( samolot__statek_gracza.id_statek, Key, -1, Shift )
      //else//if    ( gracz_tryb_g = gt_Samolot ) (...)
      //if    ( gracz_tryb_g = gt_Statek )
      //  and ( statek_gracza <> nil ) then
      //  Klawisze_Obs³uga__Statek( statek_gracza.id_statek, Key, -1, Shift );
      if Statek_Gracza__Gracz_Tryb_Zwróæ() <> nil then
        Klawisze_Obs³uga__Statek( Statek_Gracza__Gracz_Tryb_Zwróæ().id_statek, klawisz_f, mysz_przycisk_f, shift_f );

    end;
  //else//if not czy_pauza_g then


  {$region 'Przesuwanie statków (w trybie projektowym).'}
  if Projektowy_Tryb_CheckBox.Checked then
    begin

      if projektowy_tryb__statek <> nil then
        begin

          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__prêdkoœæ_zadana_0_100 ) then
            begin

              if projektowy_tryb__statek.prêdkoœæ_aktualna_procent__bezwzglêdny <> 0 then
                begin

                  projektowy_tryb__statek.prêdkoœæ_aktualna_procent__bezwzglêdny := 0;

                end
              else//if projektowy_tryb__statek.prêdkoœæ_aktualna_procent__bezwzglêdny <> 0 then
                begin

                  projektowy_tryb__statek.prêdkoœæ_aktualna_procent__bezwzglêdny := 100;

                end;
              //---//if projektowy_tryb__statek.prêdkoœæ_aktualna_procent__bezwzglêdny <> 0 then

              projektowy_tryb__statek.prêdkoœæ_zadana_procent := projektowy_tryb__statek.prêdkoœæ_aktualna_procent__bezwzglêdny;

            end;
          //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__prêdkoœæ_zadana_0_100 ) then


          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__prêdkoœæ_zadana_0_m_100 ) then
            begin

              if projektowy_tryb__statek.prêdkoœæ_aktualna_procent__bezwzglêdny <> 0 then
                begin

                  projektowy_tryb__statek.prêdkoœæ_aktualna_procent__bezwzglêdny := 0;

                end
              else//if projektowy_tryb__statek.prêdkoœæ_aktualna_procent__bezwzglêdny <> 0 then
                begin

                  projektowy_tryb__statek.prêdkoœæ_aktualna_procent__bezwzglêdny := -100;

                end;
              //---//if projektowy_tryb__statek.prêdkoœæ_aktualna_procent__bezwzglêdny <> 0 then

              projektowy_tryb__statek.prêdkoœæ_zadana_procent := projektowy_tryb__statek.prêdkoœæ_aktualna_procent__bezwzglêdny;

            end;
          //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__prêdkoœæ_zadana_0_m_100 ) then


          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__zanurzenie_zadane_peryskopowe ) then
            projektowy_tryb__statek.Zanurzenie_Zadane_Procent_Zmieñ( 0, true );


          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__zanurzenie_zadane_procent_0_100 ) then
            begin

              if projektowy_tryb__statek.zanurzenie_pu³ap__zadane_procent <> 0 then
                begin

                  projektowy_tryb__statek.zanurzenie_pu³ap__zadane_procent := 0;

                end
              else//if projektowy_tryb__statek.zanurzenie_pu³ap__zadane_procent <> 0 then
                begin

                  projektowy_tryb__statek.zanurzenie_pu³ap__zadane_procent := 100;

                end;
              //---//if projektowy_tryb__statek.zanurzenie_pu³ap__zadane_procent <> 0 then

            end;
          //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__zanurzenie_zadane_procent_0_100 ) then


          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek___resetuj_obrót ) then
            projektowy_tryb__statek.ResetRotations();

        end;
      //---//if projektowy_tryb__statek <> nil then

    end;
  //---//if Projektowy_Tryb_CheckBox.Checked then
  {$endregion 'Przesuwanie statków (w trybie projektowym).'}


  if czy_pauza_g then
    begin

      if Gra_GLSceneViewer.Focused then
        begin

          //Klawisze_Obs³uga__Zachowanie_Ci¹g³e__Lokalne( 0.15 ); // Aby w trakcie pauzy równie¿ wykonywane by³y zachowania klawiszy.
          Klawisze_Obs³uga__Zachowanie_Ci¹g³e__Lokalne( 0.15, shift_f, mysz_przycisk_f ); // Na wypadek gdyby przypisano np. ruch kamery pod przycisk myszy.

        end;
      //---//if Gra_GLSceneViewer.Focused then


      Napis_Odœwie¿( -1, true );
      Kamera_Woda_Pod_Nad_Widok_Ustaw();

    end;
  //---//if czy_pauza_g then

end;//---//Funkcja Klawisze_Obs³uga().

//Funkcja Klawisze_Obs³uga__Statek().
procedure TStatki_Form.Klawisze_Obs³uga__Statek( const id_statek_f : integer; const klawisz_f : Word; const mysz_przycisk_f : SmallInt; const shift_f : TShiftState; const czy_z_wieloosobowe__odczytaj_f : boolean = false );

  //Funkcja Klawisz_Wciœniêto_SprawdŸ_l() w Klawisze_Obs³uga__Statek().
  function Klawisz_Wciœniêto_SprawdŸ_l( const klawiatura_konfiguracja_r_f : TKlawiatura_Konfiguracja_r ) : boolean;
  begin

    Result := Klawisz_Wciœniêto_SprawdŸ( klawiatura_konfiguracja_r_f, klawisz_f, mysz_przycisk_f, shift_f, czy_z_wieloosobowe__odczytaj_f );

    if    ( czy_klient_g )
      and ( Result )
      and ( Statek_Gracza__Gracz_Tryb_Zwróæ() <> nil ) then
      begin

        Result := false;

        Wieloosobowe_Klawisze_Obs³uga_Parametry_Odczytaj();

        wieloosobowe__statek_klawisze_obs³uga_r.klawisz__owo := klawisz_f;
        wieloosobowe__statek_klawisze_obs³uga_r.mysz_przycisk__owo := mysz_przycisk_f;
        wieloosobowe__statek_klawisze_obs³uga_r.polecenie__nazwa__owo := klawiatura_konfiguracja_r_f.polecenie__nazwa;
        wieloosobowe__statek_klawisze_obs³uga_r.shift__owo := shift_f;

        Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__statek__klawisze_obs³uga_c, -99, '' );

      end;
    //---//if    ( czy_klient_g ) (...)

  end;//---//Funkcja Klawisz_Wciœniêto_SprawdŸ_l() w Klawisze_Obs³uga__Statek().

var
  i : integer;
  dŸwiêk_komunikat_rodzaj_l : TDŸwiêk_Komunikat_Rodzaj;
  zt_statek : TStatek;
begin//Funkcja Klawisze_Obs³uga__Statek().

  //
  // Funkcja ustawia parametry zachowania statku zgodnie z poleceniami gracza.
  //
  // Informacje s¹ wysy³ane sieciowo (przetwarzanie na serwerze).
  //
  // Parametry:
  //   id_statek_f - identyfikator statku, którego dotycz¹ wytyczne.
  //   klawisz_f - wciœniêty klawisz (0 = brak).
  //   mysz_przycisk_f - wciœniêty przycisk myszy (-1 = brak).
  //   shift_f - wciœniêty klawisz funkcyjny.
  //   amunicja_rodzaj_zbiór_f
  //   czy_z_wieloosobowe__odczytaj_f
  //     false - informacja analizowana wewnêtrznie w ramach programu.
  //     true - informacjê przes³a³ klient do serwera.
  //

  if    ( klawisz_f = 0 )
    and ( mysz_przycisk_f = -1 ) then
    Exit;


  zt_statek := nil;


  for i := 0 to Length( statki_t ) - 1 do
    if    ( statki_t[ i ] <> nil )
      and ( statki_t[ i ].id_statek = id_statek_f ) then
      begin

        zt_statek := statki_t[ i ];
        Break;

      end;
    //---//if    ( statki_t[ i ] <> nil ) (...)


  if   ( zt_statek = nil )
    or (  not Assigned( zt_statek )  ) then
    Exit;


  dŸwiêk_komunikat_rodzaj_l := dkr_Brak;


  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__kotwica__stop ) then
    zt_statek.Kotwica_Ruch_Ustaw( kre_Stop );

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__kotwica__w__dó³ ) then
    zt_statek.Kotwica_Ruch_Ustaw( kre_W_Dó³ );

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__kotwica__w__górê ) then
    zt_statek.Kotwica_Ruch_Ustaw( kre_W_Górê );


  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__obracaj_dzia³a ) then
    zt_statek.obracaj_dzia³a := not zt_statek.obracaj_dzia³a;

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__obracaj_dzia³a__na_k¹t_wyznaczony ) then
    zt_statek.obracaj_dzia³a__na_k¹t_wyznaczony := not zt_statek.obracaj_dzia³a__na_k¹t_wyznaczony;


  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__podnoœ_lufy ) then
    zt_statek.podnoœ_lufy := not zt_statek.podnoœ_lufy;

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__podnoœ_lufy__na_k¹t_wyznaczony ) then
    zt_statek.podnoœ_lufy__na_k¹t_wyznaczony := not zt_statek.podnoœ_lufy__na_k¹t_wyznaczony;


  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__prêdkoœæ_zadana_procent_zmieñ__100_plus ) then
    begin

      zt_statek.Prêdkoœæ_Zadana_Procent_Zmieñ( 100 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Prêdkoœæ;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__prêdkoœæ_zadana_procent_zmieñ__100_plus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__prêdkoœæ_zadana_procent_zmieñ__25_plus ) then
    begin

      zt_statek.Prêdkoœæ_Zadana_Procent_Zmieñ( 25 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Prêdkoœæ;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__prêdkoœæ_zadana_procent_zmieñ__25_plus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__prêdkoœæ_zadana_procent_zmieñ__5_plus ) then
    begin

      zt_statek.Prêdkoœæ_Zadana_Procent_Zmieñ( 5 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Prêdkoœæ;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__prêdkoœæ_zadana_procent_zmieñ__5_plus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__prêdkoœæ_zadana_procent_zmieñ__1_plus ) then
    begin

      zt_statek.Prêdkoœæ_Zadana_Procent_Zmieñ( 1 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Prêdkoœæ;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__prêdkoœæ_zadana_procent_zmieñ__1_plus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__prêdkoœæ_zadana_procent_zmieñ__zero ) then
    begin

      zt_statek.Prêdkoœæ_Zadana_Procent_Zmieñ( 0 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Prêdkoœæ;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__prêdkoœæ_zadana_procent_zmieñ__zero ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__prêdkoœæ_zadana_procent_zmieñ__1_minus ) then
    begin

      zt_statek.Prêdkoœæ_Zadana_Procent_Zmieñ( -1 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Prêdkoœæ;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__prêdkoœæ_zadana_procent_zmieñ__1_minus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__prêdkoœæ_zadana_procent_zmieñ__5_minus ) then
    begin

      zt_statek.Prêdkoœæ_Zadana_Procent_Zmieñ( -5 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Prêdkoœæ;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__prêdkoœæ_zadana_procent_zmieñ__5_minus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__prêdkoœæ_zadana_procent_zmieñ__25_minus ) then
    begin

      zt_statek.Prêdkoœæ_Zadana_Procent_Zmieñ( -25 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Prêdkoœæ;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__prêdkoœæ_zadana_procent_zmieñ__25_minus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__prêdkoœæ_zadana_procent_zmieñ__100_minus ) then
    begin

      zt_statek.Prêdkoœæ_Zadana_Procent_Zmieñ( -100 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Prêdkoœæ;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__prêdkoœæ_zadana_procent_zmieñ__100_minus ) then


  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__radar__broñ_zasiêg_wyœwietlaj ) then
    Radar__Broñ_Zasiêg_Wyœwietlaj_CheckBox.Checked := not Radar__Broñ_Zasiêg_Wyœwietlaj_CheckBox.Checked;

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__radar__czu³oœæ__1_minus ) then
    begin

      Radar__Czu³oœæ_SpinEdit.Value := Radar__Czu³oœæ_SpinEdit.Value - 1;

      Informacja_Dodatkowa_Dodaj(  t³umaczenie_komunikaty_r.komunikat__radar__czu³oœæ + IntToStr( Radar__Czu³oœæ_SpinEdit.Value )  );

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__radar__czu³oœæ__1_minus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__radar__czu³oœæ__10_minus ) then
    begin

      Radar__Czu³oœæ_SpinEdit.Value := Radar__Czu³oœæ_SpinEdit.Value - 10;

      Informacja_Dodatkowa_Dodaj(  t³umaczenie_komunikaty_r.komunikat__radar__czu³oœæ + IntToStr( Radar__Czu³oœæ_SpinEdit.Value )  );

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__radar__czu³oœæ__10_minus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__radar__czu³oœæ__1_plus ) then
    begin

      Radar__Czu³oœæ_SpinEdit.Value := Radar__Czu³oœæ_SpinEdit.Value + 1;

      Informacja_Dodatkowa_Dodaj(  t³umaczenie_komunikaty_r.komunikat__radar__czu³oœæ + IntToStr( Radar__Czu³oœæ_SpinEdit.Value )  );

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__radar__czu³oœæ__1_plus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__radar__czu³oœæ__10_plus ) then
    begin

      Radar__Czu³oœæ_SpinEdit.Value := Radar__Czu³oœæ_SpinEdit.Value + 10;

      Informacja_Dodatkowa_Dodaj(  t³umaczenie_komunikaty_r.komunikat__radar__czu³oœæ + IntToStr( Radar__Czu³oœæ_SpinEdit.Value )  );

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__radar__czu³oœæ__10_plus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__radar__skala__1_minus ) then
    begin

      Radar__Skala_SpinEdit.Value := Radar__Skala_SpinEdit.Value - 1;

      Informacja_Dodatkowa_Dodaj(  t³umaczenie_komunikaty_r.komunikat__radar__skala + IntToStr( Radar__Skala_SpinEdit.Value )  );

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__radar__skala__1_minus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__radar__skala__10_minus ) then
    begin

      Radar__Skala_SpinEdit.Value := Radar__Skala_SpinEdit.Value - 10;

      Informacja_Dodatkowa_Dodaj(  t³umaczenie_komunikaty_r.komunikat__radar__skala + IntToStr( Radar__Skala_SpinEdit.Value )  );

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__radar__skala__10_minus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__radar__skala__1_plus ) then
    begin

      Radar__Skala_SpinEdit.Value := Radar__Skala_SpinEdit.Value + 1;

      Informacja_Dodatkowa_Dodaj(  t³umaczenie_komunikaty_r.komunikat__radar__skala + IntToStr( Radar__Skala_SpinEdit.Value )  );

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__radar__skala__1_plus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__radar__skala__10_plus ) then
    begin

      Radar__Skala_SpinEdit.Value := Radar__Skala_SpinEdit.Value + 10;

      Informacja_Dodatkowa_Dodaj(  t³umaczenie_komunikaty_r.komunikat__radar__skala + IntToStr( Radar__Skala_SpinEdit.Value )  );

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__radar__skala__10_plus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__radar__widocznoœæ ) then
    Radar__Widocznoœæ_CheckBox.Checked := not Radar__Widocznoœæ_CheckBox.Checked;


      if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__samolot_katapult¹_startuj ) then
        if not zt_statek.Samolot_Katapult¹_Startuj() then
          for i := 0 to Length( statki_t ) - 1 do // Aby mo¿na by³o wystartowaæ samolotem z katapulty maj¹c wybrany zarówno statek jak i lotniskowiec.
            if    ( statki_t[ i ] <> nil )
              and ( statki_t[ i ] <> zt_statek )
              and ( statki_t[ i ].id_gracz = zt_statek.id_gracz ) then
              begin

                statki_t[ i ].Samolot_Katapult¹_Startuj();
                Break;

              end;
            //---//if    ( statki_t[ i ] <> nil ) (...)


  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__skrêt_zadany_procent_zmieñ__100_lewo ) then
    begin

      zt_statek.Skrêt_Zadany_Procent_Zmieñ( -100 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Skrêt;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__skrêt_zadany_procent_zmieñ__100_lewo ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__skrêt_zadany_procent_zmieñ__25_lewo ) then
    begin

      zt_statek.Skrêt_Zadany_Procent_Zmieñ( -25 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Skrêt;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__skrêt_zadany_procent_zmieñ__25_lewo ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__skrêt_zadany_procent_zmieñ__5_lewo ) then
    begin

      zt_statek.Skrêt_Zadany_Procent_Zmieñ( -5 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Skrêt;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__skrêt_zadany_procent_zmieñ__5_lewo ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__skrêt_zadany_procent_zmieñ__1_lewo ) then
    begin

      zt_statek.Skrêt_Zadany_Procent_Zmieñ( -1 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Skrêt;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__skrêt_zadany_procent_zmieñ__1_lewo ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__skrêt_zadany_procent_zmieñ__zero ) then
    begin

      zt_statek.Skrêt_Zadany_Procent_Zmieñ( 0 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Skrêt;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__skrêt_zadany_procent_zmieñ__zero ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__skrêt_zadany_procent_zmieñ__1_prawo ) then
    begin

      zt_statek.Skrêt_Zadany_Procent_Zmieñ( 1 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Skrêt;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__skrêt_zadany_procent_zmieñ__1_prawo ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__skrêt_zadany_procent_zmieñ__5_prawo ) then
    begin

      zt_statek.Skrêt_Zadany_Procent_Zmieñ( 5 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Skrêt;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__skrêt_zadany_procent_zmieñ__5_prawo ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__skrêt_zadany_procent_zmieñ__25_prawo ) then
    begin

      zt_statek.Skrêt_Zadany_Procent_Zmieñ( 25 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Skrêt;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__skrêt_zadany_procent_zmieñ__25_prawo ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__skrêt_zadany_procent_zmieñ__100_prawo ) then
    begin

      zt_statek.Skrêt_Zadany_Procent_Zmieñ( 100 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Skrêt;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__skrêt_zadany_procent_zmieñ__100_prawo ) then


  if    ( zt_statek.czy_zanurzanie )
    and ( not zt_statek.czy_samolot )
    and (  Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zanurzenie_zadane_peryskopowe )  ) then
    begin

      zt_statek.Zanurzenie_Zadane_Procent_Zmieñ( 0, true );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Zanurzenie_Pu³ap__Peryskopowe;

    end;
  //---//if    ( zt_statek.czy_zanurzanie ) (...)

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zanurzenie_zadane_procent_zmieñ__100_plus ) then
    begin

      zt_statek.Zanurzenie_Zadane_Procent_Zmieñ( 100 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak )
        and (
                 ( zt_statek.czy_zanurzanie )
              or ( zt_statek.czy_samolot )
            ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Zanurzenie;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zanurzenie_zadane_procent_zmieñ__100_plus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zanurzenie_zadane_procent_zmieñ__25_plus ) then
    begin

      zt_statek.Zanurzenie_Zadane_Procent_Zmieñ( 25 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak )
        and (
                 ( zt_statek.czy_zanurzanie )
              or ( zt_statek.czy_samolot )
            ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Zanurzenie;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zanurzenie_zadane_procent_zmieñ__25_plus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zanurzenie_zadane_procent_zmieñ__5_plus ) then
    begin

      zt_statek.Zanurzenie_Zadane_Procent_Zmieñ( 5 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak )
        and (
                 ( zt_statek.czy_zanurzanie )
              or ( zt_statek.czy_samolot )
            ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Zanurzenie;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zanurzenie_zadane_procent_zmieñ__5_plus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zanurzenie_zadane_procent_zmieñ__1_plus ) then
    begin

      zt_statek.Zanurzenie_Zadane_Procent_Zmieñ( 1 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak )
        and (
                 ( zt_statek.czy_zanurzanie )
              or ( zt_statek.czy_samolot )
            ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Zanurzenie;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zanurzenie_zadane_procent_zmieñ__1_plus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zanurzenie_zadane_procent_zmieñ__zero ) then
    begin

      zt_statek.Zanurzenie_Zadane_Procent_Zmieñ( 0 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak )
        and (
                 ( zt_statek.czy_zanurzanie )
              or ( zt_statek.czy_samolot )
            ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Zanurzenie;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zanurzenie_zadane_procent_zmieñ__zero ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zanurzenie_zadane_procent_zmieñ__1_minus ) then
    begin

      zt_statek.Zanurzenie_Zadane_Procent_Zmieñ( -1 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak )
        and (
                 ( zt_statek.czy_zanurzanie )
              or ( zt_statek.czy_samolot )
            ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Zanurzenie;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zanurzenie_zadane_procent_zmieñ__1_minus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zanurzenie_zadane_procent_zmieñ__5_minus ) then
    begin

      zt_statek.Zanurzenie_Zadane_Procent_Zmieñ( -5 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak )
        and (
                 ( zt_statek.czy_zanurzanie )
              or ( zt_statek.czy_samolot )
            ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Zanurzenie;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zanurzenie_zadane_procent_zmieñ__5_minus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zanurzenie_zadane_procent_zmieñ__25_minus ) then
    begin

      zt_statek.Zanurzenie_Zadane_Procent_Zmieñ( -25 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak )
        and (
                 ( zt_statek.czy_zanurzanie )
              or ( zt_statek.czy_samolot )
            ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Zanurzenie;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zanurzenie_zadane_procent_zmieñ__25_minus ) then

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zanurzenie_zadane_procent_zmieñ__100_minus ) then
    begin

      zt_statek.Zanurzenie_Zadane_Procent_Zmieñ( -100 );

      if    ( not czy_z_wieloosobowe__odczytaj_f )
        and ( dŸwiêk_komunikat_rodzaj_l = dkr_Brak )
        and (
                 ( zt_statek.czy_zanurzanie )
              or ( zt_statek.czy_samolot )
            ) then
        dŸwiêk_komunikat_rodzaj_l := dkr_Zanurzenie;

    end;
  //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__zanurzenie_zadane_procent_zmieñ__100_minus ) then


  if   (  Klawisz_Wciœniêto_SprawdŸ_l( klawisz__strza³_1 )  )
    or (  Klawisz_Wciœniêto_SprawdŸ_l( klawisz__strza³_2 )  ) then
    zt_statek.Strza³( false, false, zt_statek.obracaj_dzia³a, zt_statek.podnoœ_lufy, Celowniczy_GLDummyCube.Position.AsAffineVector );

  if   (  Klawisz_Wciœniêto_SprawdŸ_l( klawisz__strza³__wszystkie_lufy_1 )  )
    or (  Klawisz_Wciœniêto_SprawdŸ_l( klawisz__strza³__wszystkie_lufy_2 )  ) then
    zt_statek.Strza³( false, true, zt_statek.obracaj_dzia³a, zt_statek.podnoœ_lufy, Celowniczy_GLDummyCube.Position.AsAffineVector );

  if   (  Klawisz_Wciœniêto_SprawdŸ_l( klawisz__strza³__wszystkie_wybrane_1 )  )
    or (  Klawisz_Wciœniêto_SprawdŸ_l( klawisz__strza³__wszystkie_wybrane_2 )  ) then
    zt_statek.Strza³( true, true, zt_statek.obracaj_dzia³a, zt_statek.podnoœ_lufy, Celowniczy_GLDummyCube.Position.AsAffineVector );


  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__strza³__broñ_indeks_zmieniaj ) then
    zt_statek.Broñ__Indeks_Zmieniaj_Ustaw();

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__strza³__broñ_indeks_poprzedni ) then
    zt_statek.Broñ__Indeks_Zmieniaj_Ustaw( true );

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__strza³__broñ_indeks_nastêpny ) then
    zt_statek.Broñ__Indeks_Zmieniaj_Ustaw( false );


  // Je¿eli gracz ma statek i samolot to taka sama wartoœæ jest ustawiana do obu.
  if czy_z_wieloosobowe__odczytaj_f then
    for i := 0 to Length( statki_t ) - 1 do
      if    ( statki_t[ i ] <> nil )
        and ( statki_t[ i ].id_statek <> zt_statek.id_statek )
        and ( statki_t[ i ].id_gracz = zt_statek.id_gracz )
        and ( statki_t[ i ].si__statek_gracza__strzela <> zt_statek.si__statek_gracza__strzela ) then
        begin

          statki_t[ i ].si__statek_gracza__strzela := zt_statek.si__statek_gracza__strzela;

        end;
      //---//if    ( statki_t[ i ] <> nil ) (...)


  if dŸwiêk_komunikat_rodzaj_l <> dkr_Brak then
    begin

      // Tworzy komunikat dŸwiêkowy niezw³ocznie po wyst¹pieniu zdarzenia.
      case dŸwiêk_komunikat_rodzaj_l of
          //dkr_Prêdkoœæ : DŸwiêki__Komunikat__Utwórz_Jeden(  dkr_Prêdkoœæ, Round( zt_statek.prêdkoœæ_zadana_procent )  );
          //dkr_Skrêt : DŸwiêki__Komunikat__Utwórz_Jeden(  dkr_Skrêt, Round( zt_statek.skrêt_zadany_procent )  );
          //
          //dkr_Zanurzenie :
          //  begin
          //
          //    if zt_statek.czy_samolot then
          //      DŸwiêki__Komunikat__Utwórz_Jeden(  dkr_Pu³ap, Round( zt_statek.zanurzenie_pu³ap__zadane_procent )  )
          //    else//if zt_statek.czy_samolot then
          //      DŸwiêki__Komunikat__Utwórz_Jeden(  dkr_Zanurzenie, Round( zt_statek.zanurzenie_pu³ap__zadane_procent )  );
          //
          //  end;
          ////---//dkr_Zanurzenie :

          dkr_Zanurzenie_Pu³ap__Peryskopowe : DŸwiêki__Komunikat__Utwórz_Jeden(  dkr_Zanurzenie_Pu³ap__Peryskopowe, Round( zt_statek.zanurzenie_pu³ap__zadane_procent )  );

        end;
      //---//case dŸwiêk_komunikat_rodzaj_l of

      // Komunikaty dŸwiêkowe s¹ tworzone z pewnym opóŸnieniem (aby ograniczyæ ich iloœæ).
      case dŸwiêk_komunikat_rodzaj_l of
          dkr_Prêdkoœæ :
            begin

              dŸwiêki__komunikat__prêdkoœæ__ostatnie_wywo³anie__data_czas_g := Now();
              dŸwiêki__komunikat__prêdkoœæ__ostatnie_wywo³anie__id_statek_g := zt_statek.id_statek;

            end;
          //---//dkr_Prêdkoœæ :

          dkr_Skrêt :
            begin

              dŸwiêki__komunikat__skrêt__ostatnie_wywo³anie__data_czas_g := Now();
              dŸwiêki__komunikat__skrêt__ostatnie_wywo³anie__id_statek_g := zt_statek.id_statek;

            end;
          //---//dkr_Skrêt :

          dkr_Zanurzenie :
            begin

              dŸwiêki__komunikat__zanurzenie__ostatnie_wywo³anie__data_czas_g := Now();
              dŸwiêki__komunikat__zanurzenie__ostatnie_wywo³anie__id_statek_g := zt_statek.id_statek;

            end;
          //---//dkr_Zanurzenie :

        end;
      //---//case dŸwiêk_komunikat_rodzaj_l of

    end;
  //---//if dŸwiêk_komunikat_rodzaj_l <> dkr_Brak then

end;//---//Funkcja Klawisze_Obs³uga__Statek().

//Funkcja Klawisze_Obs³uga__Zachowanie_Ci¹g³e__Lokalne().
procedure TStatki_Form.Klawisze_Obs³uga__Zachowanie_Ci¹g³e__Lokalne( delta_czasu_f : double; const shift_f : TShiftState = []; const mysz_przycisk_f : SmallInt = -1 );

  //Funkcja Klawisz_Wciœniêto_SprawdŸ_l() w Klawisze_Obs³uga__Zachowanie_Ci¹g³e__Lokalne().
  function Klawisz_Wciœniêto_SprawdŸ_l( const klawiatura_konfiguracja_r_f : TKlawiatura_Konfiguracja_r ) : boolean;
  begin

    Result := Klawisz_Wciœniêto_SprawdŸ( klawiatura_konfiguracja_r_f, 0, mysz_przycisk_f, shift_f );

  end;//---//Funkcja Klawisz_Wciœniêto_SprawdŸ_l() w Klawisze_Obs³uga__Zachowanie_Ci¹g³e__Lokalne().

var
  korekta_o_time_multiplier,
  korekta_o_time_multiplier__projektowy_tryb
    : real;
begin//Funkcja Klawisze_Obs³uga__Zachowanie_Ci¹g³e__Lokalne().

  //
  // Funkcja przetwarza obs³ugê klawiszy, które nale¿y obs³ugiwaæ ca³y czas gdy s¹ wciœniête (np. ruch kamery).
  //
  // Informacje nie s¹ wysy³ane sieciowo (przetwarzanie tylko lokalne).
  //
  // Parametry:
  //   delta_czasu_f
  //   shift_f
  //   mysz_przycisk_f
  //

  if not Gra_GLSceneViewer.Focused then
    Exit;


  if    ( not czy_pauza_g )
    and ( Gra_GLCadencer.TimeMultiplier <> 0 ) then
    korekta_o_time_multiplier := 1 / Gra_GLCadencer.TimeMultiplier
  else//if Gra_GLCadencer.TimeMultiplier <> 1 then
    korekta_o_time_multiplier := 1;


  // Ruch kamery.
  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__kamera__do_przodu ) then
    Gra_GLCamera.Move( delta_czasu_f * kamera_szybkoœæ_ruchu_g * korekta_o_time_multiplier );

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__kamera__do_ty³u ) then
    Gra_GLCamera.Move( -delta_czasu_f * kamera_szybkoœæ_ruchu_g * korekta_o_time_multiplier );

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__kamera__w_lewo ) then
    Gra_GLCamera.Slide( -delta_czasu_f * kamera_szybkoœæ_ruchu_g * korekta_o_time_multiplier );

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__kamera__w_prawo ) then
    Gra_GLCamera.Slide( delta_czasu_f * kamera_szybkoœæ_ruchu_g * korekta_o_time_multiplier );


  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__kamera__w_górê ) then // Góra.
    Gra_GLCamera.Lift( delta_czasu_f * kamera_szybkoœæ_ruchu_g * korekta_o_time_multiplier );

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__kamera__w_dó³ ) then // Dó³.
    Gra_GLCamera.Lift( -delta_czasu_f * kamera_szybkoœæ_ruchu_g * korekta_o_time_multiplier );


  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__kamera__w_lewo_obrót ) then // Obrót  w lewo.
    Gra_GLCamera.Turn( -delta_czasu_f * kamera_szybkoœæ_ruchu_g * korekta_o_time_multiplier * 10 );

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__kamera__w_prawo_obrót ) then // Obrót  w prawo.
    Gra_GLCamera.Turn( delta_czasu_f * kamera_szybkoœæ_ruchu_g * korekta_o_time_multiplier * 10 );

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__kamera__w_górê_obrót ) then // Obrót  w górê.
    Gra_GLCamera.Pitch( delta_czasu_f * kamera_szybkoœæ_ruchu_g * korekta_o_time_multiplier * 10 );

  if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__kamera__w_dó³_obrót ) then // Obrót  w dó³.
    Gra_GLCamera.Pitch( -delta_czasu_f * kamera_szybkoœæ_ruchu_g * korekta_o_time_multiplier * 10 );

  //if GLS.Keyboard.IsKeyDown( 'Q' ) then // Beczka w lewo.
  //  Gra_GLCamera.Roll( delta_czasu_f * 10 );
  //
  //if GLS.Keyboard.IsKeyDown( 'E' ) then // Beczka w prawo.
  //  Gra_GLCamera.Roll( -delta_czasu_f * 10 );
  //---// Ruch kamery.


  Pauza_Podczas_Funkcje();


  {$region 'Przesuwanie statków (w trybie projektowym).'}
  if Projektowy_Tryb_CheckBox.Checked then
    begin

      if projektowy_tryb__statek <> nil then
        begin

          if Projektowy_Tryb__Przesuwanie_Skaluj_CheckBox.Checked then
            korekta_o_time_multiplier__projektowy_tryb := Gra_GLCadencer.TimeMultiplier
          else//if Projektowy_Tryb__Przesuwanie_Skaluj_CheckBox.Checked then
            korekta_o_time_multiplier__projektowy_tryb := 1;

          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__obrót_lewo ) then // Obrót lewo.
            begin

              projektowy_tryb__statek.TurnAngle := projektowy_tryb__statek.TurnAngle + korekta_o_time_multiplier__projektowy_tryb;

            end;
          //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__obrót_lewo ) then

          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__obrót_prawo ) then // Obrót prawo.
            begin

              projektowy_tryb__statek.TurnAngle := projektowy_tryb__statek.TurnAngle - korekta_o_time_multiplier__projektowy_tryb;

            end;
          //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__obrót_prawo ) then


          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__opuszczenie ) then // Opuszczenie.
            begin

              projektowy_tryb__statek.Lift( -korekta_o_time_multiplier__projektowy_tryb );

            end;
          //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__opuszczenie ) then

          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__podniesienie ) then // Podniesienie.
            begin

              projektowy_tryb__statek.Lift( korekta_o_time_multiplier__projektowy_tryb );

            end;
          //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__podniesienie ) then


          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__przesuniêcie_w_lewo ) then // Przesuniêcie w lewo.
            begin

              projektowy_tryb__statek.Slide( -korekta_o_time_multiplier__projektowy_tryb );

            end;
          //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__przesuniêcie_w_lewo ) then

          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__przesuniêcie_w_prawo ) then // Przesuniêcie w prawo.
            begin

              projektowy_tryb__statek.Slide( korekta_o_time_multiplier__projektowy_tryb );

            end;
          //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__przesuniêcie_w_prawo ) then


          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__przesuniêcie_w_przód ) then // Przesuniêcie w przód.
            begin

              projektowy_tryb__statek.Move( korekta_o_time_multiplier__projektowy_tryb );

            end;
          //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__przesuniêcie_w_przód ) then

          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__przesuniêcie_w_ty³ ) then // Przesuniêcie w ty³.
            begin

              projektowy_tryb__statek.Move( -korekta_o_time_multiplier__projektowy_tryb );

            end;
          //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__przesuniêcie_w_ty³ ) then


          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__przechylenie_w_lewo ) then // Przechylenie w lewo.
            begin

              projektowy_tryb__statek.RollAngle := projektowy_tryb__statek.RollAngle - korekta_o_time_multiplier__projektowy_tryb;

            end;
          //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__przechylenie_w_lewo ) then

          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__przechylenie_w_prawo ) then // Przechylenie w prawo.
            begin

              projektowy_tryb__statek.RollAngle := projektowy_tryb__statek.RollAngle + korekta_o_time_multiplier__projektowy_tryb;

            end;
          //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__przechylenie_w_prawo ) then


          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__uniesienie_przodu ) then // Uniesienie przodu.
            begin

              projektowy_tryb__statek.PitchAngle := projektowy_tryb__statek.PitchAngle - korekta_o_time_multiplier__projektowy_tryb;

            end;
          //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__uniesienie_przodu ) then

          if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__uniesienie_ty³u ) then // Uniesienie ty³u.
            begin

              projektowy_tryb__statek.PitchAngle := projektowy_tryb__statek.PitchAngle + korekta_o_time_multiplier__projektowy_tryb;

            end;
          //---//if Klawisz_Wciœniêto_SprawdŸ_l( klawisz__projektowy_tryb__statek__uniesienie_ty³u ) then

        end;
      //---//if projektowy_tryb__statek <> nil then

    end;
  //---//if Projektowy_Tryb_CheckBox.Checked then
  {$endregion 'Przesuwanie statków (w trybie projektowym).'}


  {$IFNDEF DEBUG}
    Exit; // Test. //?????
  {$ENDIF}

  if GLS.Keyboard.IsKeyDown( 'J' ) then
    begin

      Button1Click( nil );

    end;
  //---//if GLS.Keyboard.IsKeyDown( 'V' ) then

  if GLS.Keyboard.IsKeyDown( 'N' ) then
    begin

      if projektowy_tryb__statek.id_grupa = 1 then
        projektowy_tryb__statek.id_grupa := 2
      else
        projektowy_tryb__statek.id_grupa := 1;

      Informacja_Dodatkowa_Dodaj(  IntToStr( projektowy_tryb__statek.id_grupa )  );

    end;
  //---//if GLS.Keyboard.IsKeyDown( 'N' ) then

end;//---//Funkcja Klawisze_Obs³uga__Zachowanie_Ci¹g³e__Lokalne().

//Funkcja Komunikat_Wyœwietl().
procedure TStatki_Form.Komunikat_Wyœwietl( const text_f : string );
var
  czy_pauza : boolean;
begin

  czy_pauza := czy_pauza_g;

  if    ( not czy_klient_g )
    and ( not czy_pauza ) then
    Pauza( true );


  ShowMessage( text_f );


  if    ( not czy_klient_g )
    and ( not czy_pauza ) then
    Pauza( false );

end;//---//Funkcja Komunikat_Wyœwietl().

//Funkcja Komunikat_Wyœwietl().
function TStatki_Form.Komunikat_Wyœwietl( const text_f, caption_f : string; const flags_f : integer ) : integer;
var
  czy_pauza : boolean;
begin

  czy_pauza := czy_pauza_g;

  if    ( not czy_klient_g )
    and ( not czy_pauza ) then
    Pauza( true );


  Result := Application.MessageBox( PChar(text_f), PChar(caption_f), flags_f );


  if    ( not czy_klient_g )
    and ( not czy_pauza ) then
    Pauza( false );

end;//---//Funkcja Komunikat_Wyœwietl().

//Funkcja L¹d__DŸwiêków_Emitery_Utwórz().
procedure TStatki_Form.L¹d__DŸwiêków_Emitery_Utwórz();
var
  i : integer;
begin

  if   ( l¹d_list = nil )
    or (  not Assigned( l¹d_list )  ) then
    Exit;


  for i := 0 to l¹d_list.Count - 1 do
    if Wyglad_Elementy.Obiekt_Rodzaj( l¹d_list[ i ] ) = Wyglad_Elementy.or_DŸwiêk_Emiter then
      Exit; // Tylko raz tworzy emitery dŸwiêków (je¿eli ju¿ jakieœ s¹ to nie dodaje ich ponownie).


  for i := l¹d_list.Count - 1 downto 0 do
    if Trim(  Wyglad_Elementy.DŸwiêk_Nazwa( l¹d_list[ i ] )  ) <> '' then
      if not Wygl¹d_Elementy__DŸwiêk_Wczytaj(  l¹d_list[ i ], Wyglad_Elementy.DŸwiêk_Nazwa( l¹d_list[ i ] ), Wyglad_Elementy.DŸwiêki__Zasiêg_Minimalny( l¹d_list[ i ] )  ) then
        Log_Wypisz(  t³umaczenie_komunikaty_r.komunikat__tworzenie_l¹du___b³¹d_wczytania_dŸwiêku + ': ' + Wyglad_Elementy.DŸwiêk_Nazwa( l¹d_list[ i ] ) + '.', not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked  );

end;//---//Funkcja L¹d__DŸwiêków_Emitery_Utwórz().

//Funkcja L¹d__Elementy_Iloœæ_Wyszukaj().
procedure TStatki_Form.L¹d__Elementy_Iloœæ_Wyszukaj();
var
  i,
  zti_1,
  zti_2
    : integer;
begin

  zti_1 := 0;
  zti_2 := 0;

  for i := 0 to l¹d_list.Count - 1 do
    begin

      if    (  not Wyglad_Elementy.Radar_Ignoruje( l¹d_list[ i ] )  )
        and (  Wyglad_Elementy.Obiekt_Rodzaj( l¹d_list[ i ] ) <> Wyglad_Elementy.or_DŸwiêk_Emiter  )
        and (  not ( TGLCustomSceneObject(l¹d_list[ i ]) is TSt_GLDummyCube )  ) then // Kontenerów na obiekty nie rysuje na radarze.
        inc( zti_1 );

      if Wyglad_Elementy.Obiekt_Rodzaj( l¹d_list[ i ] ) = Wyglad_Elementy.or_DŸwiêk_Emiter then
        inc( zti_2 );

    end;
  //---//for i := 0 to l¹d_list.Count - 1 do


  L¹d_Elementy_Iloœæ_Label.Caption := Trim(  FormatFloat( '### ### ##0', l¹d_list.Count )  ) + ' / ' + Trim(  FormatFloat( '### ### ##0', zti_1 )  ) + ' / ' + Trim(  FormatFloat( '### ### ##0', zti_2 )  );

end;//---//Funkcja L¹d__Elementy_Iloœæ_Wyszukaj().

//Funkcja L¹d__Punkty_¯ycia_Zmieñ().
function TStatki_Form.L¹d__Punkty_¯ycia_Zmieñ( gl_custom_scene_object_f : TGLCustomSceneObject; wartoœæ_f : real; const czy_do_zera_f : boolean = false ) : string;
var
  i : integer;
  punkty_¿ycia_kopia_l : real;
begin

  //
  // Funkcja modyfikuje wartoœæ punktów ¿ycia.
  //
  // Zwraca wartoœæ o jak¹ modyfikowaæ punkty ¿ycia i identyfikator obiektu l¹du, któremu modyfikowaæ punkty ¿ycia.
  //
  // Parametry:
  //   gl_custom_scene_object_f
  //   wartoœæ_f
  //   czy_do_zera_f - dla klientów ponowna informacja o usuniêciu obiektu l¹du
  //

  if czy_serwer_g then
    //Result := gl_custom_scene_object_f.Name + ';' + FloatToStr( wartoœæ_f ) + ';'
    Result := FloatToStr( wartoœæ_f ) + ';' + IntToStr(  Wyglad_Elementy.Identyfikator_Elementu( gl_custom_scene_object_f )  )
  else//if czy_serwer_g then
    Result := '';


  if czy_do_zera_f then
    begin

      Wyglad_Elementy.Punkty_¯ycia( gl_custom_scene_object_f, 0 );
      Exit;

    end
  else//if czy_do_zera_f then
    begin

      punkty_¿ycia_kopia_l := Wyglad_Elementy.Punkty_¯ycia( gl_custom_scene_object_f );
      wartoœæ_f := punkty_¿ycia_kopia_l + wartoœæ_f;

      if wartoœæ_f < 0 then
        wartoœæ_f := 0;

      Wyglad_Elementy.Punkty_¯ycia( gl_custom_scene_object_f, wartoœæ_f );

    end;
  //---//if czy_do_zera_f then


  // Przyciemnia kolor trafionego obiektu.

  // Jakim procentem aktualnych punktów ¿ycia s¹ zadane obra¿enia.
  // 100% (tutaj ju¿ po przeliczeniach jako 1) minus wyliczony procent.

  if punkty_¿ycia_kopia_l <> 0 then
    wartoœæ_f := 1 - (  ( punkty_¿ycia_kopia_l - wartoœæ_f ) * 100 / punkty_¿ycia_kopia_l  ) * 0.01
  else//if punkty_¿ycia_kopia_l <> 0 then
    wartoœæ_f := 0.5;

  // Przypadek, w którym obiekt l¹du jest leczony.
  if wartoœæ_f < 0 then
    wartoœæ_f := Abs( wartoœæ_f ) * 10;


  gl_custom_scene_object_f.Material.FrontProperties.Ambient.Color := GLS.VectorGeometry.VectorScale( gl_custom_scene_object_f.Material.FrontProperties.Ambient.Color, wartoœæ_f );
  gl_custom_scene_object_f.Material.FrontProperties.Diffuse.Color := GLS.VectorGeometry.VectorScale( gl_custom_scene_object_f.Material.FrontProperties.Diffuse.Color, wartoœæ_f );
  gl_custom_scene_object_f.Material.FrontProperties.Emission.Color := GLS.VectorGeometry.VectorScale( gl_custom_scene_object_f.Material.FrontProperties.Emission.Color, wartoœæ_f );
  //---// Przyciemnia kolor trafionego obiektu.


  for i := 0 to l¹d_list.Count - 1 do
    if    (  Wyglad_Elementy.Obiekt_Rodzaj( l¹d_list[ i ] ) = Wyglad_Elementy.or_DŸwiêk_Emiter  )
      and (  Wyglad_Elementy.Identyfikator_Elementu( l¹d_list[ i ] ) =  Wyglad_Elementy.Identyfikator_Elementu( gl_custom_scene_object_f )  ) then
      Wyglad_Elementy.Punkty_¯ycia(  l¹d_list[ i ], Wyglad_Elementy.Punkty_¯ycia( gl_custom_scene_object_f )  );

end;//---//Funkcja L¹d__Punkty_¯ycia_Zmieñ().

//Funkcja L¹d__Utwórz().
procedure TStatki_Form.L¹d__Utwórz( const lista_indeks_f : integer; const prymityw_indeks_f : integer = -99; const prymityw_rodzic_gl_dummy_cube_f : TGLDummyCube = nil );

  //Funkcja Potomkom_Cechy_Nadaj__Radar_Ignoruje() w L¹d__Utwórz().
  procedure Potomkom_Cechy_Nadaj__Radar_Ignoruje( zt_gl_custom_scene_object_f : TGLCustomSceneObject; const radar_ignoruje_f : boolean );
  var
    i_l : integer;
  begin

    //
    // Funkcja ustawia wartoœæ radar_ignoruje obiektom w kontenerze.
    // Wartoœæ kontenera nadrzêdnego nadpisuje wartoœci ustawione w kontenerach podrzêdnych.
    //

    if zt_gl_custom_scene_object_f = nil then
      Exit;


    for i_l := 0 to zt_gl_custom_scene_object_f.Count - 1 do
      begin

        if    (  not ( zt_gl_custom_scene_object_f[ i_l ] is TSt_GLDummyCube )  ) // Kontener na obiekty.
          and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(zt_gl_custom_scene_object_f[ i_l ]) ) <> Wyglad_Elementy.or_Kontener_Prymitywów  ) then
          begin

            // Nie jest to kontener na prymitywy.

            //Wyglad_Elementy.Radar_Ignoruje(  ( TGLCustomSceneObject(zt_gl_custom_scene_object_f[ i_l ]) ), Wyglad_Elementy.Radar_Ignoruje( zt_gl_custom_scene_object_f )  );
            Wyglad_Elementy.Radar_Ignoruje(  ( TGLCustomSceneObject(zt_gl_custom_scene_object_f[ i_l ]) ), radar_ignoruje_f  );

          end
        else//if    (  not ( zt_gl_custom_scene_object_f[ i_l ] is TSt_GLDummyCube )  ) // Kontener na obiekty. (...)
          if    ( zt_gl_custom_scene_object_f[ i_l ].Count > 0 )
            and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(zt_gl_custom_scene_object_f[ i_l ]) ) = Wyglad_Elementy.or_Kontener_Prymitywów  ) // Jest to kontener na prymitywy.
            //and (  Wyglad_Elementy.Radar_Ignoruje__Przeka¿_Potomkom( TGLCustomSceneObject(zt_gl_custom_scene_object_f[ i_l ]) )  )
            and ( zt_gl_custom_scene_object_f[ i_l ] is TSt_GLDummyCube ) then // Kontener na obiekty.
            begin

              // Jest to kontener na prymitywy.

              Potomkom_Cechy_Nadaj__Radar_Ignoruje( TGLCustomSceneObject(zt_gl_custom_scene_object_f[ i_l ]), radar_ignoruje_f );

            end;
          //---//if    ( TGLCustomSceneObject(l¹d_list[ i_l ]).Count > 0 ) (...)

      end;
    //---//for i_l := 0 to zt_gl_custom_scene_object_f.Count - 1 do

  end;//---//Funkcja Potomkom_Cechy_Nadaj__Radar_Ignoruje() w L¹d__Utwórz().

var
  pêtla_rosn¹ca : boolean;

  i,
  j,
  jj,
  jjj,
  pêtla_x_i,
  pêtla_y_i,
  pêtla_z_i,
  pêtla_x_iloœæ,
  pêtla_y_iloœæ,
  pêtla_z_iloœæ
    : integer;

  ztr_1,
  ztr_2,
  ztr_3,
  ztr_4,
  kolor_losowy__do,
  kolor_losowy__od,
  pêtla_x_skok,
  pêtla_y_skok,
  pêtla_z_skok
    : real;

  definicja_treœæ : string;
  zt_xml_document : Xml.XMLDoc.TXMLDocument;
  zt_gl_custom_scene_object,
  zt_pêtla_gl_custom_scene_object
    : TGLCustomSceneObject;
  wygl¹d_kolor_definicja : TWygl¹d_Kolor_Definicja;
  wygl¹d_liczba_definicja : TWygl¹d_Liczba_Definicja;
  zt_cursor_kopia : TCursor;
begin//Funkcja L¹d__Utwórz().

  //
  // Funkcja tworzy l¹d (mapê gry).
  //
  // Parametry:
  //   lista_indeks_f:
  //     = -99 - l¹d tworzony na podstawie danych otrzymanych z serwera.
  //     <> -99 - l¹d tworzony na podstawie danych z pola wyboru l¹du.
  //   prymityw_indeks_f:
  //     = -99 - tworzy l¹d.
  //     <> -99 - tworzy prymityw.
  //   prymityw_rodzic_gl_dummy_cube_f
  //     = nil - tworzy l¹d.
  //     <> nil - tworzy prymityw (rodzicem tworzonych obiektów jest utworzony wczeœniej kontener TGLDummyCube).
  //

  if prymityw_indeks_f = -99 then
    begin

      // Tworzy l¹d.

      Pozycja_Pocz¹tkowa_Parametry_Domyœlne_Ustaw( l¹d_pozycja_pocz¹tkowa_parametry_t[ 1 ], false );
      Pozycja_Pocz¹tkowa_Parametry_Domyœlne_Ustaw( l¹d_pozycja_pocz¹tkowa_parametry_t[ 2 ], true );

    end;
  //---//if prymityw_indeks_f = -99 then


  if   ( l¹d_list = nil )
    or (  not Assigned( l¹d_list )  ) then
    Exit;


  if prymityw_indeks_f = -99 then
    begin

      // Tworzy l¹d.

      if lista_indeks_f <> -99 then
        begin

          if   ( lista_indeks_f < 0 )
            or (  lista_indeks_f > Length( l¹dy_lista_t ) - 1  ) then
            begin

              Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__brak_definicji_l¹du, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION );
              Exit;

            end;
          //---//if   ( lista_indeks_f < 0 ) (...)

          l¹d_definicja_g := l¹dy_lista_t[ lista_indeks_f ].treœæ__sl;
          definicja_treœæ := l¹d_definicja_g;

        end
      else//if lista_indeks_f <> -99 then
        definicja_treœæ := l¹d_definicja_g; // Dla klientów.

    end
  else//if prymityw_indeks_f = -99 then
    begin

      // Tworzy prymityw.

      if   ( l¹d_list = nil )
        or (  not Assigned( l¹d_list )  ) then
        Exit;


      if prymityw_indeks_f <> -99 then
        begin

          if   ( prymityw_indeks_f < 0 )
            or (  prymityw_indeks_f > Length( prymitywy_lista_t ) - 1  ) then
            begin

              Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__brak_definicji_prymitywu, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION );
              Exit;

            end;
          //---//if   ( prymityw_indeks_f < 0 ) (...)

          definicja_treœæ := prymitywy_lista_t[ prymityw_indeks_f ].treœæ__sl;

        end;
      //---//if prymityw_indeks_f <> -99 then

    end;
  //---//if prymityw_indeks_f = -99 then


  zt_cursor_kopia := Screen.Cursor;
  Screen.Cursor := crHourGlass;


  zt_xml_document := Xml.XMLDoc.TXMLDocument.Create( Application );

  zt_xml_document.Options := zt_xml_document.Options + [ doNodeAutoIndent ]; // Domyœlnie ma: doNodeAutoCreate, doAttrNull, doAutoPrefix, doNamespaceDecl.

  try
    // Serwer zg³asza b³¹d podczas odczytu danych o l¹dzie od klienta
    //   MSXML is not installed
    //   Assertion failure GLContext.pas
    // W L¹d__Zwolnij() chyba te¿ takie coœ siê dzieje (inne b³êdy) ale z podobnego powodu.
    //
    // Uda³o siê unikn¹æ b³êdów tak:
    //   w zdarzeniu odczytania danych o l¹dzie tylko w³¹czyæ Timer;
    //   w Timer.OnTimet wy³¹czyæ Timer i wywo³aæ zwalnianie i wczytywanie l¹du.
    //
    zt_xml_document.LoadFromXML( definicja_treœæ );
  except
    on E : Exception do
      if prymityw_indeks_f = -99 then
        //Komunikat_Wyœwietl(  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_l¹du + #13 + E.Message + ' ' + IntToStr( E.HelpContext ), t³umaczenie_komunikaty_r.komunikat__b³¹d, MB_OK + MB_ICONEXCLAMATION  );
        Log_Wypisz(  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_l¹du + #13 + #10 + E.Message + ' ' + IntToStr( E.HelpContext ), not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked  )
      else//if prymityw_indeks_f = -99 then
        Log_Wypisz(  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_prymitywu + #13 + #10 + E.Message + ' ' + IntToStr( E.HelpContext ), not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked  );
  end;
  //---//try

  {$region 'Odczyt danych xml.'}
  if zt_xml_document.Active then
    begin

      wygl¹d_kolor_definicja := TWygl¹d_Kolor_Definicja.Create();
      wygl¹d_liczba_definicja := TWygl¹d_Liczba_Definicja.Create();


      for i := 0 to zt_xml_document.DocumentElement.ChildNodes.Count - 1 do
        begin

          if    ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'kolor_definicja' )
            and (   Trim(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] )  ) <> ''   )
            and (   not wygl¹d_kolor_definicja.Definicja_Istnieje(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] )  )   ) then
            begin

              ztr_1 := 0;
              ztr_2 := 0;
              ztr_3 := 0;
              ztr_4 := 0;

              for j := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes.Count - 1 do
                begin

                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'r' then
                    ztr_1 := Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, 0, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'g' then
                    ztr_2 := Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, 0, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'b' then
                    ztr_3 := Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, 0, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'a' then
                    ztr_4 := Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, 0, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked );

                end;
              //---//for j := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes.Count - 1 do


              wygl¹d_kolor_definicja.Dodaj_Definicjê(  ztr_1, ztr_2, ztr_3, ztr_4, VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] )  );

            end
          else//if    ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'kolor_definicja' ) (...)
          if    ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'liczba_definicja' )
            and (   Trim(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] )  ) <> ''   )
            and (   not wygl¹d_liczba_definicja.Definicja_Istnieje(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] )  )   ) then
            begin

              ztr_1 := Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].Text, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked );

              wygl¹d_liczba_definicja.Dodaj_Definicjê(  ztr_1, VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] )  );

            end
          else//if    ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'liczba_definicja' ) (...)
          if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' )
            or ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c ) then
            begin

              zt_gl_custom_scene_object := nil;


              if    ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' )
                and (  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'typ' ] ) <> wygl¹d_specjalny__dŸwiêk_emiter_c  ) then
                zt_gl_custom_scene_object := Wygl¹d_Elementy__Utwórz_Element(  nil, VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'typ' ] ), Gra_Obiekty_GLDummyCube, prymityw_rodzic_gl_dummy_cube_f  )
              else//if    ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' ) (...)
              if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c then
                //zt_gl_custom_scene_object := Wygl¹d_Elementy__Utwórz_Element( nil, wygl¹d_prymityw_c, Gra_Obiekty_GLDummyCube );
                zt_gl_custom_scene_object := Wygl¹d_Elementy__Utwórz_Element( nil, wygl¹d_prymityw_c, Gra_Obiekty_GLDummyCube, prymityw_rodzic_gl_dummy_cube_f ); // Dla prymitywów umieszczanych w prymitywach.


              if zt_gl_custom_scene_object <> nil then
                begin

                  l¹d_list.Add( zt_gl_custom_scene_object );


                  if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c then
                    begin

                      jj := 0; // Tutaj tymczasowo jako sprawdzenie czy istnieje definicja prymitywu.

                      for j := 0 to Length( prymitywy_lista_t ) - 1 do
                        if prymitywy_lista_t[ j ].plik_nazwa__sl = VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] ) then
                          begin

                            jj:= 1;
                            L¹d__Utwórz( lista_indeks_f, j, TGLDummyCube(zt_gl_custom_scene_object) ); // lista_indeks_f nie ma tutaj znaczenia.
                            Break;

                          end;
                        //---//if prymitywy_lista_t[ j ].plik_nazwa__sl = VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] ) then

                      if jj <> 1 then
                        Log_Wypisz(  t³umaczenie_komunikaty_r.komunikat__nie_odnaleziono_definicji_prymitywu + ' ''' + VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] ) + '''.'  );

                    end;
                  //---//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c then


                  kolor_losowy__do := -1;
                  kolor_losowy__od := -1;


                  for j := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes.Count - 1 do
                    begin

                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'dŸwiêk' then
                        begin

                          //if not Wygl¹d_Elementy__DŸwiêk_Wczytaj( zt_gl_custom_scene_object, zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text ) then
                          //  Log_Wypisz( t³umaczenie_komunikaty_r.komunikat__tworzenie_l¹du___b³¹d_wczytania_dŸwiêku + ': ' + zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text + '.', not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked );

                          // Tutaj tylko ustawi informacjê o efekcie dŸwiêkowym, a sam efekt zostanie dodany póŸniej.

                          Wyglad_Elementy.DŸwiêk_Nazwa( zt_gl_custom_scene_object, zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text );


                          try
                            jj := StrToInt(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'losowoœæ' ] )  );
                          except
                            jj := -1;
                          end;
                          //---//try

                          if jj > 0 then
                            begin

                              Wyglad_Elementy.DŸwiêki__Losowoœæ( zt_gl_custom_scene_object, jj );
                              //Wyglad_Elementy.DŸwiêki__OpóŸnienie_Losowe__Wylicz( zt_gl_custom_scene_object );

                            end;
                          //---//if jj > 0 then


                          try
                            ztr_1 := String_To__Float(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'zasiêg_minimalny' ] )  );
                          except
                            ztr_1 := -1;
                          end;
                          //---//try

                          if ztr_1 >= 0 then
                            begin

                              Wyglad_Elementy.DŸwiêki__Zasiêg_Minimalny( zt_gl_custom_scene_object, ztr_1 );

                            end;
                          //---//if ztr_1 >= 0 then

                        end
                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'dŸwiêk' then
                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'kolizja_wp³yw__amunicja_uzupe³nianie' then
                        begin

                          Wyglad_Elementy.Kolizja_Wp³yw__Amunicja_Uzupe³nianie(  zt_gl_custom_scene_object, Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  );

                          if Wyglad_Elementy.Kolizja_Wp³yw__Amunicja_Uzupe³nianie( zt_gl_custom_scene_object ) < 0 then
                            Wyglad_Elementy.Kolizja_Wp³yw__Amunicja_Uzupe³nianie( zt_gl_custom_scene_object, 0 );

                        end
                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'kolizja_wp³yw__amunicja_uzupe³nianie' then
                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'kolizja_wp³yw__obra¿enia' then
                        begin

                          Wyglad_Elementy.Kolizja_Wp³yw__Obra¿enia(  zt_gl_custom_scene_object, Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  );

                          if Wyglad_Elementy.Kolizja_Wp³yw__Obra¿enia( zt_gl_custom_scene_object ) > 100 then
                            Wyglad_Elementy.Kolizja_Wp³yw__Obra¿enia( zt_gl_custom_scene_object, 100 )
                          else//if Wyglad_Elementy.Kolizja_Wp³yw__Obra¿enia( zt_gl_custom_scene_object ) > 100 then
                          if Wyglad_Elementy.Kolizja_Wp³yw__Obra¿enia( zt_gl_custom_scene_object ) < -100 then
                            Wyglad_Elementy.Kolizja_Wp³yw__Obra¿enia( zt_gl_custom_scene_object, -100 );

                        end
                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'kolizja_wp³yw__obra¿enia' then
                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'kolizja_wp³yw__prêdkoœæ' then
                        begin

                          Wyglad_Elementy.Kolizja_Wp³yw__Prêdkoœæ(  zt_gl_custom_scene_object, Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  );

                        end
                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'kolizja_wp³yw__prêdkoœæ' then
                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'kolor' then
                        begin

                          if    (   Trim(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'nazwa' ] )  ) <> ''   )
                            and (   wygl¹d_kolor_definicja.Definicja_Istnieje(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'nazwa' ] )  )   ) then
                            begin

                              if zt_gl_custom_scene_object is TGLLines then
                                TGLLines(zt_gl_custom_scene_object).LineColor.Color := wygl¹d_kolor_definicja.Odczytaj_Definicjê(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'nazwa' ] )  )
                              else//if zt_gl_custom_scene_object is TGLLines then
                                //zt_gl_custom_scene_object.Material.FrontProperties.Emission.Color := wygl¹d_kolor_definicja.Odczytaj_Definicjê(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'nazwa' ] )  );
                                Wygl¹d_Elementy__Kolor_Ustaw(   zt_gl_custom_scene_object.Material, wygl¹d_kolor_definicja.Odczytaj_Definicjê(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'nazwa' ] )  )   );

                            end
                          else//if    (   Trim(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'nazwa' ] )  ) <> ''   ) (...)
                            begin

                              ztr_1 := 0;
                              ztr_2 := 0;
                              ztr_3 := 0;
                              ztr_4 := 0;

                              for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do
                                begin

                                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'r' then
                                    ztr_1 := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )
                                  else
                                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'g' then
                                    ztr_2 := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )
                                  else
                                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'b' then
                                    ztr_3 := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )
                                  else
                                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'a' then
                                    ztr_4 := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked );

                                end;
                              //---//for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do


                              if zt_gl_custom_scene_object is TGLLines then
                                TGLLines(zt_gl_custom_scene_object).LineColor.Color := VectorMake( ztr_1, ztr_2, ztr_3, ztr_4 )
                              else//if zt_gl_custom_scene_object is TGLLines then
                                //zt_gl_custom_scene_object.Material.FrontProperties.Emission.SetColor( ztr_1, ztr_2, ztr_3, ztr_4 );
                                Wygl¹d_Elementy__Kolor_Ustaw(  zt_gl_custom_scene_object.Material, VectorMake( ztr_1, ztr_2, ztr_3, ztr_4 )  );

                            end;
                          //---//if    (   Trim(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'nazwa' ] )  ) <> ''   ) (...)

                        end
                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'kolor' then
                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'kolor_losowy' then
                        begin

                          if Trim(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'do' ] )  ) <> '' then
                            kolor_losowy__do := Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'do' ], null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )
                          else//if Trim(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'do' ] )  ) <> '' then
                            kolor_losowy__do := -2; // Aby kopiowany element mia³ kolor losowy z pe³nego zakresu.

                          if Trim(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'od' ] )  ) <> '' then
                            kolor_losowy__od := Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'od' ], null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )
                          else//if Trim(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'od' ] )  ) <> '' then
                            kolor_losowy__od := -2; // Aby kopiowany element mia³ kolor losowy z pe³nego zakresu.


                          if zt_gl_custom_scene_object is TGLLines then
                            TGLLines(zt_gl_custom_scene_object).LineColor.RandomColor()
                          else//if zt_gl_custom_scene_object is TGLLines then
                            Wygl¹d_Elementy__Kolor_Ustaw_Losowy( zt_gl_custom_scene_object.Material, kolor_losowy__od, kolor_losowy__do );

                        end
                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'kolor_losowy' then
                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'kolor_nazwa' then
                        begin

                          if zt_gl_custom_scene_object is TGLLines then
                            TGLLines(zt_gl_custom_scene_object).LineColor.Color := GLS.Color.ColorManager.GetColor( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text )
                          else//if zt_gl_custom_scene_object is TGLLines then
                            //zt_gl_custom_scene_object.Material.FrontProperties.Emission.Color := GLS.Color.ColorManager.GetColor( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text ); // Robi wyciek pamiêci. // clrGreen clrYellowGreen clrBronze2 clrGray40
                            Wygl¹d_Elementy__Kolor_Ustaw(  zt_gl_custom_scene_object.Material, GLS.Color.ColorManager.GetColor( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text )  ); // Robi wyciek pamiêci. // clrGreen clrYellowGreen clrBronze2 clrGray40

                        end
                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'kolor_nazwa' then
                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'obrót__lewo_prawo' then
                        begin

                          zt_gl_custom_scene_object.TurnAngle := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked );

                        end
                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'obrót__lewo_prawo' then
                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'punkty_¿ycia_maksymalne' then
                        begin

                          ztr_1 := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked );

                          if    ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' )
                            //and (  Trim( zt_gl_custom_scene_object.Name ) <> ''  ) // Kontenerom na prymitywy nie wpisuje wartoœci.
                            and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(zt_gl_custom_scene_object) ) <> Wyglad_Elementy.or_Kontener_Prymitywów  ) then // Kontenerom na prymitywy nie wpisuje wartoœci.
                            Wyglad_Elementy.Punkty_¯ycia( zt_gl_custom_scene_object, ztr_1 )
                          else//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                          if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c then
                            for jj := 0 to zt_gl_custom_scene_object.Count - 1 do // Wszystkim obiektom prymitywu w kontenerze ustawia zadan¹ wartoœæ.
                              Wyglad_Elementy.Punkty_¯ycia( TGLCustomSceneObject(zt_gl_custom_scene_object.Children[ jj ]), ztr_1 );

                        end
                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'punkty_¿ycia_maksymalne' then
                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'radar_ignoruje' then
                        begin

                          if AnsiLowerCase( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text ) = 'nie' then
                            Wyglad_Elementy.Radar_Ignoruje( zt_gl_custom_scene_object, false )
                          else//if AnsiLowerCase( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text ) = 'nie' then
                          if AnsiLowerCase( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text ) = 'tak' then
                            Wyglad_Elementy.Radar_Ignoruje( zt_gl_custom_scene_object, true );

                          if   ( AnsiLowerCase( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text ) = 'nie' )
                            or ( AnsiLowerCase( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text ) = 'tak' ) then
                            begin

                              Wyglad_Elementy.Radar_Ignoruje__Przeka¿_Potomkom( zt_gl_custom_scene_object, true );

                              Potomkom_Cechy_Nadaj__Radar_Ignoruje( zt_gl_custom_scene_object, Wyglad_Elementy.Radar_Ignoruje( zt_gl_custom_scene_object ) ); // Istotne je¿eli kontener na obiekty nie jest w nadrzêdnym kontenerze na obiekty.

                            end;
                          //---//if   ( AnsiLowerCase( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text ) = 'nie' ) (...)

                        end
                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'radar_ignoruje' then
                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'skala' then
                        begin

                          for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do
                            begin

                              if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'x' then
                                zt_gl_custom_scene_object.Scale.X := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0.0001, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )
                              else
                              if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'y' then
                                zt_gl_custom_scene_object.Scale.Y := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0.0001, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )
                              else
                              if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'z' then
                                zt_gl_custom_scene_object.Scale.Z := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0.0001, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked );

                            end;
                          //---//for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do

                        end
                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'skala' then
                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'skala_proporcjonalna' then
                        begin

                          //zt_gl_custom_scene_object.Scale.Scale(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, 0.0001, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  );
                          zt_gl_custom_scene_object.Scale.Scale(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, 0.0001, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  );

                        end
                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'skala_proporcjonalna' then
                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'œwiat³a_miganie' then
                        begin

                          Œwiat³a_Miganie__Wartoœci_Ustaw( zt_gl_custom_scene_object, zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text );


                          try
                            jj := StrToInt(  VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Attributes[ 'losowoœæ' ] )  );
                          except
                            jj := -1;
                          end;
                          //---//try

                          if jj > 0 then
                            begin

                              Wyglad_Elementy.Œwiat³a_Miganie__Losowoœæ( zt_gl_custom_scene_object, jj );
                              Wyglad_Elementy.Œwiat³a_Miganie__OpóŸnienie_Losowe__Wylicz( zt_gl_custom_scene_object );

                            end;
                          //---//if jj > 0 then

                        end
                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'œwiat³a_miganie' then
                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'œwiat³o' then
                        begin

                          if AnsiLowerCase( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text ) = 'tak' then
                            Wyglad_Elementy.Œwiat³o( zt_gl_custom_scene_object, true );

                        end
                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'œwiat³o' then
                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'œwiat³o_dodatkowe' then
                        begin

                          if AnsiLowerCase( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text ) = 'tak' then
                            Wyglad_Elementy.Œwiat³o_Dodatkowe( zt_gl_custom_scene_object, true );

                        end
                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'œwiat³o_dodatkowe' then
                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'tekstura' then
                        begin

                          if not ( zt_gl_custom_scene_object is TGLLines ) then
                            if not Wygl¹d_Elementy__Tekstura_Wczytaj_2( zt_gl_custom_scene_object, zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text ) then
                              Log_Wypisz( t³umaczenie_komunikaty_r.komunikat__tworzenie_l¹du___b³¹d_wczytania_tekstury + ': ' + zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text + '.', not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked );

                        end
                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'tekstura' then
                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'wartoœæ_dodatkowa_01' then
                        begin

                          if zt_gl_custom_scene_object is TGLFrustrum then
                            TGLFrustrum(zt_gl_custom_scene_object).Height := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )
                          else
                          if zt_gl_custom_scene_object is TGLLines then
                            TGLLines(zt_gl_custom_scene_object).Nodes[ 1 ].Z := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not Statek__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )
                          else
                          if zt_gl_custom_scene_object is TGLTorus then
                            TGLTorus(zt_gl_custom_scene_object).MajorRadius := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not Statek__Komunikat_B³êdu_Pomiñ_CheckBox.Checked );

                        end
                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'wartoœæ_dodatkowa_01' then
                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'wartoœæ_dodatkowa_02' then
                        begin

                          if zt_gl_custom_scene_object is TGLLines then
                            TGLLines(zt_gl_custom_scene_object).LineWidth := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, 0, not Statek__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )
                          else
                          if zt_gl_custom_scene_object is TGLTorus then
                            TGLTorus(zt_gl_custom_scene_object).MinorRadius := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not Statek__Komunikat_B³êdu_Pomiñ_CheckBox.Checked );

                        end
                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'wartoœæ_dodatkowa_02' then
                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'wspó³rzêdne' then
                        begin

                          for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do
                            begin

                              if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'x' then
                                zt_gl_custom_scene_object.Position.X := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )
                              else
                              if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'y' then
                                zt_gl_custom_scene_object.Position.Y := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )
                              else
                              if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'z' then
                                zt_gl_custom_scene_object.Position.Z := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked );

                            end;
                          //---//for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do

                        end
                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'wspó³rzêdne' then
                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'wychylenie__lewo_prawo' then
                        begin

                          zt_gl_custom_scene_object.RollAngle := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked );

                        end
                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'wychylenie__lewo_prawo' then
                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'wychylenie__przód_ty³' then
                        begin

                          zt_gl_custom_scene_object.PitchAngle := -Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked );

                        end
                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'wychylenie__przód_ty³' then
                      if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla_x' )
                        or ( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla_y' )
                        or ( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla_z' ) then
                        begin

                          // Powinien to byæ ostatni wêze³.

                          // Tutaj nie ma znaczenia, ¿e jest to zmienna dotycz¹ca x.
                          ztr_1 := 0;
                          pêtla_x_iloœæ := 0;
                          ztr_2 := 0;
                          pêtla_x_skok := 0;

                          for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do
                            begin

                              if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'pêtla_do' then
                                ztr_1 := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )
                              else
                              if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'pêtla_iloœæ' then
                                pêtla_x_iloœæ := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                              else
                              if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'pêtla_od' then
                                ztr_2 := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )
                              else
                              if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'pêtla_skok' then
                                pêtla_x_skok := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked );

                            end;
                          //---//for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do


                          if pêtla_x_skok <> 0 then
                            begin

                              if pêtla_x_iloœæ > 0 then
                                begin

                                  for jj := 1 to pêtla_x_iloœæ do
                                    begin

                                      zt_pêtla_gl_custom_scene_object := nil;


                                      if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                                        zt_pêtla_gl_custom_scene_object := Wygl¹d_Elementy__Utwórz_Element(  nil, VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'typ' ] ), Gra_Obiekty_GLDummyCube, prymityw_rodzic_gl_dummy_cube_f  )
                                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                                      if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c then
                                        //zt_pêtla_gl_custom_scene_object := Wygl¹d_Elementy__Utwórz_Element( nil, wygl¹d_prymityw_c, Gra_Obiekty_GLDummyCube );
                                        zt_pêtla_gl_custom_scene_object := Wygl¹d_Elementy__Utwórz_Element( nil, wygl¹d_prymityw_c, Gra_Obiekty_GLDummyCube, prymityw_rodzic_gl_dummy_cube_f ); // Dla prymitywów umieszczanych w prymitywach.


                                      if zt_pêtla_gl_custom_scene_object <> nil then
                                        begin

                                          l¹d_list.Add( zt_pêtla_gl_custom_scene_object );

                                          if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c then
                                            for jjj := 0 to Length( prymitywy_lista_t ) - 1 do
                                              if prymitywy_lista_t[ jjj ].plik_nazwa__sl = VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] ) then
                                                begin

                                                  L¹d__Utwórz( lista_indeks_f, jjj, TGLDummyCube(zt_pêtla_gl_custom_scene_object) ); // lista_indeks_f nie ma tutaj znaczenia.
                                                  Break;

                                                end;
                                              //---//if prymitywy_lista_t[ jjj ].plik_nazwa__sl = VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] ) then


                                          Wygl¹d_Elementy__Kopiuj_W³aœciwoœci( zt_gl_custom_scene_object, zt_pêtla_gl_custom_scene_object, kolor_losowy__od, kolor_losowy__do );


                                          if Wyglad_Elementy.Radar_Ignoruje__Przeka¿_Potomkom( zt_gl_custom_scene_object ) then
                                            Potomkom_Cechy_Nadaj__Radar_Ignoruje( zt_pêtla_gl_custom_scene_object, Wyglad_Elementy.Radar_Ignoruje( zt_gl_custom_scene_object ) );


                                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla_x' then
                                            zt_pêtla_gl_custom_scene_object.Position.X := zt_pêtla_gl_custom_scene_object.Position.X + jj * pêtla_x_skok
                                          else
                                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla_y' then
                                            zt_pêtla_gl_custom_scene_object.Position.Y := zt_pêtla_gl_custom_scene_object.Position.Y + jj * pêtla_x_skok
                                          else
                                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla_z' then
                                            zt_pêtla_gl_custom_scene_object.Position.Z := zt_pêtla_gl_custom_scene_object.Position.Z + jj * pêtla_x_skok;

                                        end;
                                      //---//if zt_pêtla_gl_custom_scene_object <> nil then

                                    end;
                                  //---//for jj := 1 to pêtla_x_iloœæ do

                                end
                              else//if pêtla_x_iloœæ > 0 then
                              if ztr_1 <> ztr_2 then
                                begin

                                  Pêtla_Wzorzec_Oznacz( zt_gl_custom_scene_object );

                                  pêtla_rosn¹ca := ztr_2 < ztr_1;
                                  pêtla_x_iloœæ := 1;
                                  pêtla_x_skok := Abs( pêtla_x_skok );

                                  while pêtla_x_iloœæ = 1 do
                                    begin

                                      zt_pêtla_gl_custom_scene_object := nil;


                                      if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                                        zt_pêtla_gl_custom_scene_object := Wygl¹d_Elementy__Utwórz_Element(  nil, VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'typ' ] ), Gra_Obiekty_GLDummyCube, prymityw_rodzic_gl_dummy_cube_f  )
                                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                                      if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c then
                                        //zt_pêtla_gl_custom_scene_object := Wygl¹d_Elementy__Utwórz_Element( nil, wygl¹d_prymityw_c, Gra_Obiekty_GLDummyCube );
                                        zt_pêtla_gl_custom_scene_object := Wygl¹d_Elementy__Utwórz_Element( nil, wygl¹d_prymityw_c, Gra_Obiekty_GLDummyCube, prymityw_rodzic_gl_dummy_cube_f ); // Dla prymitywów umieszczanych w prymitywach.


                                      if zt_pêtla_gl_custom_scene_object <> nil then
                                        begin

                                          l¹d_list.Add( zt_pêtla_gl_custom_scene_object );

                                          if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c then
                                            for jjj := 0 to Length( prymitywy_lista_t ) - 1 do
                                              if prymitywy_lista_t[ jjj ].plik_nazwa__sl = VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] ) then
                                                begin

                                                  L¹d__Utwórz( lista_indeks_f, jjj, TGLDummyCube(zt_pêtla_gl_custom_scene_object) ); // lista_indeks_f nie ma tutaj znaczenia.
                                                  Break;

                                                end;
                                              //---//if prymitywy_lista_t[ jjj ].plik_nazwa__sl = VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] ) then


                                          Wygl¹d_Elementy__Kopiuj_W³aœciwoœci( zt_gl_custom_scene_object, zt_pêtla_gl_custom_scene_object, kolor_losowy__od, kolor_losowy__do );


                                          if Wyglad_Elementy.Radar_Ignoruje__Przeka¿_Potomkom( zt_gl_custom_scene_object ) then
                                            Potomkom_Cechy_Nadaj__Radar_Ignoruje( zt_pêtla_gl_custom_scene_object, Wyglad_Elementy.Radar_Ignoruje( zt_gl_custom_scene_object ) );


                                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla_x' then
                                            zt_pêtla_gl_custom_scene_object.Position.X := ztr_2
                                          else
                                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla_y' then
                                            zt_pêtla_gl_custom_scene_object.Position.Y := ztr_2
                                          else
                                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla_z' then
                                            zt_pêtla_gl_custom_scene_object.Position.Z := ztr_2;

                                        end;
                                      //---//if zt_pêtla_gl_custom_scene_object <> nil then


                                      if pêtla_rosn¹ca then
                                        begin

                                          ztr_2 := ztr_2 + pêtla_x_skok;

                                          if ztr_2 >= ztr_1 then
                                            pêtla_x_iloœæ := 0;

                                        end
                                      else//if pêtla_rosn¹ca then
                                        begin

                                          ztr_2 := ztr_2 - pêtla_x_skok;

                                          if ztr_2 <= ztr_1 then
                                            pêtla_x_iloœæ := 0;

                                        end;
                                      //---//if pêtla_rosn¹ca then

                                    end;
                                  //---//while pêtla_x_iloœæ = 1 do

                                end;
                              //---//if ztr_1 <> ztr_2 then

                            end;
                          //---//if pêtla_x_skok <> 0 then

                        end
                      else//if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla_x' ) (...)
                      if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla' then
                        begin

                          // Powinien to byæ ostatni wêze³.

                          pêtla_x_iloœæ := 0;
                          pêtla_x_skok := 0;

                          pêtla_y_iloœæ := 0;
                          pêtla_y_skok := 0;

                          pêtla_z_iloœæ := 0;
                          pêtla_z_skok := 0;

                          for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do
                            begin

                              if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'pêtla_x_iloœæ' then
                                pêtla_x_iloœæ := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                              else
                              if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'pêtla_x_skok' then
                                pêtla_x_skok := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )
                              else// x
                              if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'pêtla_y_iloœæ' then
                                pêtla_y_iloœæ := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                              else
                              if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'pêtla_y_skok' then
                                pêtla_y_skok := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )
                              else// y
                              if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'pêtla_z_iloœæ' then
                                pêtla_z_iloœæ := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, 0, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                              else
                              if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'pêtla_z_skok' then
                                pêtla_z_skok := Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked );

                            end;
                          //---//for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do


                          if    ( pêtla_x_skok <> 0 )
                            and ( pêtla_y_skok <> 0 )
                            and ( pêtla_z_skok <> 0 )
                            and ( pêtla_x_iloœæ > 0 )
                            and ( pêtla_y_iloœæ > 0 )
                            and ( pêtla_z_iloœæ > 0 ) then
                            begin

                              for pêtla_x_i := 1 to pêtla_x_iloœæ do
                                for pêtla_y_i := 1 to pêtla_y_iloœæ do
                                  for pêtla_z_i := 1 to pêtla_z_iloœæ do
                                    begin

                                      zt_pêtla_gl_custom_scene_object := nil;


                                      if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                                        zt_pêtla_gl_custom_scene_object := Wygl¹d_Elementy__Utwórz_Element(  nil, VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'typ' ] ), Gra_Obiekty_GLDummyCube, prymityw_rodzic_gl_dummy_cube_f  )
                                      else//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' then
                                      if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c then
                                        //zt_pêtla_gl_custom_scene_object := Wygl¹d_Elementy__Utwórz_Element( nil, wygl¹d_prymityw_c, Gra_Obiekty_GLDummyCube );
                                        zt_pêtla_gl_custom_scene_object := Wygl¹d_Elementy__Utwórz_Element( nil, wygl¹d_prymityw_c, Gra_Obiekty_GLDummyCube, prymityw_rodzic_gl_dummy_cube_f ); // Dla prymitywów umieszczanych w prymitywach.


                                      if zt_pêtla_gl_custom_scene_object <> nil then
                                        begin

                                          l¹d_list.Add( zt_pêtla_gl_custom_scene_object );

                                          if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = wygl¹d_prymityw_c then
                                            for jjj := 0 to Length( prymitywy_lista_t ) - 1 do
                                              if prymitywy_lista_t[ jjj ].plik_nazwa__sl = VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] ) then
                                                begin

                                                  L¹d__Utwórz( lista_indeks_f, jjj, TGLDummyCube(zt_pêtla_gl_custom_scene_object) ); // lista_indeks_f nie ma tutaj znaczenia.
                                                  Break;

                                                end;
                                              //---//if prymitywy_lista_t[ jjj ].plik_nazwa__sl = VarToStr( zt_xml_document.DocumentElement.ChildNodes[ i ].Attributes[ 'nazwa' ] ) then


                                          Wygl¹d_Elementy__Kopiuj_W³aœciwoœci( zt_gl_custom_scene_object, zt_pêtla_gl_custom_scene_object, kolor_losowy__od, kolor_losowy__do );


                                          if Wyglad_Elementy.Radar_Ignoruje__Przeka¿_Potomkom( zt_gl_custom_scene_object ) then
                                            Potomkom_Cechy_Nadaj__Radar_Ignoruje( zt_pêtla_gl_custom_scene_object, Wyglad_Elementy.Radar_Ignoruje( zt_gl_custom_scene_object ) );


                                          // Je¿eli mia³yby byæ losowe przesuniêcia w pêtli to nale¿y klientom wys³aæ te losowe wartoœci.
                                          zt_pêtla_gl_custom_scene_object.Position.X := zt_pêtla_gl_custom_scene_object.Position.X + ( pêtla_x_i - 1 ) * pêtla_x_skok;
                                          zt_pêtla_gl_custom_scene_object.Position.Y := zt_pêtla_gl_custom_scene_object.Position.Y + ( pêtla_y_i - 1 ) * pêtla_y_skok;
                                          zt_pêtla_gl_custom_scene_object.Position.Z := zt_pêtla_gl_custom_scene_object.Position.Z + ( pêtla_z_i - 1 ) * pêtla_z_skok;

                                        end;
                                      //---//if zt_pêtla_gl_custom_scene_object <> nil then

                                    end;
                                  //---//for pêtla_z_i := 1 to pêtla_z_iloœæ do

                            end;
                          //---//if    ( pêtla_x_skok <> 0 ) (...)


                          // Oznacza obiekt, który jest wzorcem dla obiektów powielonych w pêtli do usuniêcia poprzez ustawienie mu punktów ¿ycia na zero.
                          if zt_gl_custom_scene_object.Count <= 0 then
                            Wyglad_Elementy.Punkty_¯ycia( zt_gl_custom_scene_object, 0 )
                          else//if zt_gl_custom_scene_object.Count <= 0 then
                            for jj := 0 to zt_gl_custom_scene_object.Count - 1 do
                              Wyglad_Elementy.Punkty_¯ycia( TGLCustomSceneObject(zt_gl_custom_scene_object.Children[ jj ]), 0 );

                        end;
                      //---//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'pêtla' then

                    end;
                  //---//for j := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes.Count - 1 do


                  if    (  Wyglad_Elementy.Œwiat³o( zt_gl_custom_scene_object )  )
                    and (  Wyglad_Elementy.Œwiat³o_Dodatkowe( zt_gl_custom_scene_object )  ) then
                    begin

                      Wyglad_Elementy.Œwiat³o( zt_gl_custom_scene_object, false );
                      Log_Wypisz( t³umaczenie_komunikaty_r.komunikat__element__l¹d__nie_mo¿e_jednoczeœnie_byæ__œwiat³em__i__œwiat³em_dodatkowym__zdeaktywowano_cechê__œwiat³o_ );

                    end;
                  //---//if    (  Wyglad_Elementy.Œwiat³o( zt_gl_custom_scene_object )  ) (...)

                  if    (  Wyglad_Elementy.Œwiat³a_Miganie( zt_gl_custom_scene_object )  )
                    and (  not Wyglad_Elementy.Œwiat³o( zt_gl_custom_scene_object )  )
                    and (  not Wyglad_Elementy.Œwiat³o_Dodatkowe( zt_gl_custom_scene_object )  ) then
                    begin

                      Wyglad_Elementy.Œwiat³a_Miganie( zt_gl_custom_scene_object, false );
                      Log_Wypisz( t³umaczenie_komunikaty_r.komunikat__element__l¹d__nie_mo¿e_byæ__œwiat³em_migaj¹cym__nie_bêd¹c_jednoczeœnie_ani__œwiat³em__ani__œwiat³em_dodatkowym__zdeaktywowano_cechê__œwiat³a_miganie_ );

                    end;
                  //---//if    (  Wyglad_Elementy.Œwiat³a_Miganie( zt_gl_custom_scene_object )  ) (...)

                end;
              //---//if zt_gl_custom_scene_object <> nil then

            end
          else//if   ( zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'obiekt' ) (...)
          if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'statki_pozycja_pocz¹tkowa' then
            begin

              for j := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes.Count - 1 do
                begin

                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'grupa_1' then
                    begin

                      for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do
                        begin

                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'korekta_obrót' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 1 ].korekta_obrót := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                          else
                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'korekta_x' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 1 ].korekta_x := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                          else
                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'korekta_z' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 1 ].korekta_z := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                          else
                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'odstêp_x' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 1 ].odstêp_x := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                          else
                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'patrol_promieñ' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 1 ].patrol_promieñ := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                          else
                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'patrol_x' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 1 ].patrol_x := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                          else
                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'patrol_z' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 1 ].patrol_z := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                          else
                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'patrol__tylny_promieñ' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 1 ].patrol__tylny_promieñ := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                          else
                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'patrol__tylny_x' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 1 ].patrol__tylny_x := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                          else
                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'patrol__tylny_z' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 1 ].patrol__tylny_z := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                          else
                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'z' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 1 ].z := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  );

                        end;
                      //---//for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do

                    end
                  else//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'grupa_1' then
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'grupa_2' then
                    begin

                      for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do
                        begin

                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'korekta_obrót' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 2 ].korekta_obrót := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                          else
                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'korekta_x' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 2 ].korekta_x := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                          else
                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'korekta_z' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 2 ].korekta_z := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                          else
                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'odstêp_x' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 2 ].odstêp_x := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                          else
                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'patrol_promieñ' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 2 ].patrol_promieñ := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                          else
                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'patrol_x' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 2 ].patrol_x := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                          else
                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'patrol_z' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 2 ].patrol_z := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                          else
                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'patrol__tylny_promieñ' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 2 ].patrol__tylny_promieñ := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                          else
                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'patrol__tylny_x' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 2 ].patrol__tylny_x := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                          else
                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'patrol__tylny_z' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 2 ].patrol__tylny_z := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  )
                          else
                          if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ].LocalName = 'z' then
                            l¹d_pozycja_pocz¹tkowa_parametry_t[ 2 ].z := Round(  Odczytaj_Liczbê_Z_Napisu_Xml( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes[ jj ], wygl¹d_liczba_definicja, null, not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )  );

                        end;
                      //---//for jj := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].ChildNodes.Count - 1 do

                    end;
                  //---//if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'grupa_2' then

                end;
              //---//for j := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes.Count - 1 do

            end;
          //---//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'statki_pozycja_pocz¹tkowa' then

        end;
      //---//for i := 0 to zt_xml_document.DocumentElement.ChildNodes.Count - 1 do


      FreeAndNil( wygl¹d_kolor_definicja );
      FreeAndNil( wygl¹d_liczba_definicja );

    end;
  //---//if zt_xml_document.Active then
  {$endregion 'Odczyt danych xml.'}


  zt_xml_document.Free();


  if prymityw_indeks_f = -99 then
    begin

      // Tworzy l¹d.

      // Oznacza obiekt, który jest wzorcem dla obiektów powielonych w pêtli do usuniêcia poprzez ustawienie mu punktów ¿ycia na zero.

      for i := l¹d_list.Count - 1 downto 0 do
        if   ( TGLCustomSceneObject(l¹d_list[ i ]).Count > 0 )
          //or (  Pos( obiekt_nazwa_pêtla_sufiks_c, TGLCustomSceneObject(l¹d_list[ i ]).Name ) > 0  )
          or (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(l¹d_list[ i ]) ) = Wyglad_Elementy.or_Wzorzec  ) then
          begin

            if    ( TGLCustomSceneObject(l¹d_list[ i ]).Count <= 0 )
              //and (  Pos( obiekt_nazwa_pêtla_sufiks_c, TGLCustomSceneObject(l¹d_list[ i ]).Name ) > 0  )
              and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(l¹d_list[ i ]) ) = Wyglad_Elementy.or_Wzorzec  ) then
              Wyglad_Elementy.Punkty_¯ycia( TGLCustomSceneObject(l¹d_list[ i ]), 0 )
            else//if TGLCustomSceneObject(l¹d_list[ i ]).Count <= 0 then
              for j := 0 to TGLCustomSceneObject(l¹d_list[ i ]).Count - 1 do
                //if Pos( obiekt_nazwa_pêtla_sufiks_c, TGLCustomSceneObject(l¹d_list[ i ]).Children[ j ].Name ) > 0 then
                if Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(TGLCustomSceneObject(l¹d_list[ i ]).Children[ j ]) ) = Wyglad_Elementy.or_Wzorzec then
                  Wyglad_Elementy.Punkty_¯ycia( TGLCustomSceneObject(TGLCustomSceneObject(l¹d_list[ i ]).Children[ j ]), 0 );

          end;
        //---//if Pos( '', TGLCustomSceneObject(l¹d_list[ i ]).Name ) > 0 then


      // Aby usun¹æ obiekty bêd¹ce wzorcami w pêtlach.
      l¹d_zwolnij_uszkodzenia_przelicz_g := true;

    end;
  //---//if prymityw_indeks_f = -99 then


  if prymityw_rodzic_gl_dummy_cube_f = nil then
    begin

      // Tylko gdy koñczy tworzyæ l¹d, nie wykonuje dla wywo³añ rekurencyjnych.

      L¹d__DŸwiêków_Emitery_Utwórz();


      Radar__L¹d_Rysuj();


      Wygl¹d_Elementy__Noc_Zmieñ();


      L¹d__Elementy_Iloœæ_Wyszukaj();


      dŸwiêki__losowe_uruchomione__wszystkie__l¹d_g := false;

    end;
  //---//if prymityw_rodzic_gl_dummy_cube_f = nil then


  Screen.Cursor := zt_cursor_kopia;


  {$region 'Przyk³ad xml.'}
{
<l¹d>
  <nazwa>L¹d 1</nazwa>
  <opis><![CDATA[Opis l¹d 1.#13#10Nowa linia.]]></opis>


  <statki_pozycja_pocz¹tkowa> <!-- Rozmieszczenie statków mo¿e byæ zdefiniowane w definicji l¹du. -->
    <grupa_1>
      <korekta_obrót>123</korekta_obrót> <!-- Pocz¹tkowy obrót statku (+) lewo (-) prawo. -->
      <korekta_x>123</korekta_x> <!-- Przesuniêcie pozycji wszystkich statków w grupie (-) lewo (+) prawo. -->
      <korekta_z>123</korekta_z> <!-- Przesuniêcie pozycji ka¿dego statku w grupie osobno o wielokrotnoœæ wartoœci (-) przód (+) ty³. -->
      <odstêp_x>123</odstêp_x> <!-- Odstêp miêdzy statkami po bokach. -->
      <patrol_promieñ>123</patrol_promieñ> <!-- Promieñ patrolu. -->
      <patrol_x>123</patrol_x> <!-- Wspó³rzêdna œrodka obszaru patrolu. -->
      <patrol_z>123</patrol_z> <!-- Wspó³rzêdna œrodka obszaru patrolu. -->
      <patrol__tylny_promieñ>123</patrol__tylny_promieñ> <!-- Promieñ patrolu na ty³ach. -->
      <patrol__tylny_x>123</patrol__tylny_x> <!-- Wspó³rzêdna œrodka obszaru patrolu na ty³ach (np. dla lotniskowców). -->
      <patrol__tylny_z>123</patrol__tylny_z> <!-- Wspó³rzêdna œrodka obszaru patrolu na ty³ach (np. dla lotniskowców, l¹dowanie samolotów na 'l¹dzie'). -->
      <z>123</z> <!-- Odstêp od œrodka planszy (-) przód (+) ty³. -->
    </grupa_1>

    <grupa_2>
      <korekta_obrót>123</korekta_obrót>
      <korekta_x>123</korekta_x>
      <korekta_z>-123</korekta_z>
      <odstêp_x>123</odstêp_x>
      <patrol_promieñ>123</patrol_promieñ>
      <patrol_x>123</patrol_x>
      <patrol_z>123</patrol_z>
      <patrol__tylny_promieñ>123</patrol__tylny_promieñ>
      <patrol__tylny_x>123</patrol__tylny_x>
      <patrol__tylny_z>123</patrol__tylny_z>
      <z>-123</z>
    </grupa_2>
  </statki_pozycja_pocz¹tkowa>


  <kolor_definicja nazwa="kolor nazwa abc"><!-- Podkreœlink zamiast spacji - ³atwiej zaznaczaæ 2 x LPM. -->
    <r>0,0</r>
    <g>0,5</g>
    <b>0,0</b>
    <a>0,0</a>
  </kolor_definicja>


  <liczba_definicja nazwa="liczba nazwa abc">123,456</liczba_definicja>
  <!-- <amunicja_iloœæ nazwa="liczba nazwa abc"/> -->


  <obiekt typ="kula">
    <!-- Wymiar wynosi 1 we wszystkich g³ównych kierunkach. -->

    <kolor>
      <r>0,0</r>
      <g>1,0</g>
      <b>0,5</b>
      <a>0,0</a>
    </kolor>
      <!-- Od 0 (czarny) do 1 (bia³y), ujemne dzia³aj¹ jakoœ odwrotnie. -->
      <!-- a - alpha - od 0 (przezroczyste) do 1 (nieprzezroczyste), ujemne zero, ponad jeden jak jeden. -->
      <!-- Wa¿ne aby dla prymitywu linia ustawiæ odpowiednio a (alpha). -->
    <kolor_losowy/>
    <kolor_losowy od="0,1" do="0,8"/>
      <!-- Atrybuty od i do s¹ opcjonalne, mog¹ wystêpowaæ pojedynczo, zawê¿aj¹ zakres losowania wartoœci koloru (domyœlnie od 0 do 1). -->
    <kolor nazwa="kolor nazwa abc"/>
    <kolor_nazwa>clrGreen</kolor_nazwa> <!-- Robi wyciek pamiêci. -->

    <skala>
      <x>123,456</x>
      <y>123,456</y>
      <z>123,456</z>
    </skala>
      <!-- 0 - w danym wymiarze jest jak p³aszczyzna, ujemne dzia³aj¹ jak dodatnie. -->

    <skala_proporcjonalna>2</skala_proporcjonalna>
      <!-- 0, ujemne dzia³aj¹ jak dodatnie. -->

    <wspó³rzêdne>
      <x>123,456</x>
      <y>123,456</y>
      <z>123,456</z>
    </wspó³rzêdne>

    <dŸwiêk losowoœæ="10" zasiêg_minimalny="12,5">D_1.wav</dŸwiêk>
      <!-- Pliki 'wav'. Domyœlnie œcie¿ka w katalogu 'DŸwiêki l¹dów' w folderze z gr¹. -->
      <!-- Dzia³aj¹ te¿ podkatalogi np. 'K1\D_1.wav'. -->
      <!--  losowoœæ - parametr opcjonalny - zakres losowania wartoœci ile cykli uruchomiania dŸwiêków zostanie opóŸnione w³¹czenie tego dŸwiêku. -->
      <!--    dŸwiêki__losowe_uruchomione__przeliczenie_milisekundy_c = 1000 -->
      <!--  zasiêg_minimalny - parametr opcjonalny - TGLBSoundEmitter.Source.MinDistance -->

    <kolizja_wp³yw__amunicja_uzupe³nianie>123.456</kolizja_wp³yw__amunicja_uzupe³nianie>
      <!-- od 0, wyra¿ona w procentach, 0 - neutralna wartoœæ, im wiêksza wartoœæ tym wiêcej amunicji odnawia. -->

    <kolizja_wp³yw__obra¿enia>123.456</kolizja_wp³yw__obra¿enia>
      <!-- od -100 do 100, wyra¿ona w procentach, 0 - neutralna wartoœæ, < 0 - leczy, > 0 zadaje obra¿enia, im wiêksza wartoœæ (bezwzglêdna) tym mocniej. -->

    <kolizja_wp³yw__prêdkoœæ>1</kolizja_wp³yw__prêdkoœæ>
      <!-- 0 - neutralna wartoœæ, > 0 - spowalnia, < 0 odbija (im wiêksza wartoœæ tym mocniej), od -100 do 100 (wielkoœci poza -100 i 100 bêd¹ potem i tak ograniczane w obliczeniach). -->

    <obrót__lewo_prawo>123,456</obrót__lewo_prawo>
    <wychylenie__lewo_prawo>123,456</wychylenie__lewo_prawo>
      <!-- Dodatnie w lewo (lewa burta). -->
    <wychylenie__przód_ty³>123,456</wychylenie__przód_ty³>
      <!-- -(minus) w dó³, +(plus) w górê. -->
      <!-- 0, ujemne dzia³aj¹, wiêksze wartoœci obni¿ane s¹ poprzez wielokrotnoœæ 180. -->
      <!-- Dla prymitywu linia nic nie robi. -->

    <punkty_¿ycia_maksymalne>123,456</punkty_¿ycia_maksymalne>
      <!--  Wartoœæ mniejsza od 0 oznacza niezniszczalny l¹d; mo¿na ustawiaæ obiektom w definicji prymitywu jak i podczas u¿ywania prymitywu (w tym wypadku wszystkim obiektom w kontenerze prymitywu przypisze zadan¹ wartoœæ). -->

    <radar_ignoruje>Tak</radar_ignoruje>
      <!--  Nie - obiekt jest widoczny na radarze; Tak - obiekt nie jest widoczny na radarze. -->
      <!--  Brak (te¿ jakakolwiek inna wartoœæ lub brak wêz³a) - dla prymitywów okreœla, ¿e obiekty w nich zawarte bêd¹ rysowane wed³ug w³asnych definicji. -->
      <!--  Dla prymitywów wartoœci 'Nie', 'Tak' okreœlaj¹ jak ma byæ nadpisana wartoœæ 'radar_ignoruje' obiektów w nich zawartych. -->
      <!--  Wartoœæ kontenera nadrzêdnego nadpisuje wartoœci ustawione w kontenerach podrzêdnych. -->

    <œwiat³a_miganie losowoœæ="10">123, 456, 789</œwiat³a_miganie>
      <!--  Kolejne odstêpy pomiêdzy zgaszeniami i zapaleniami œwiat³a w milisekundach (nieparzyste w kolejnoœci wartoœci oznaczaj¹ ile czasu nie œwieci). -->
      <!--  losowoœæ - parametr opcjonalny - zakres losowania wartoœci ile razy pierwszy krok migniêcia zostanie wyd³u¿ony. -->

    <œwiat³o>Tak</œwiat³o>
    <œwiat³o_dodatkowe>Tak</œwiat³o_dodatkowe>

    <tekstura>K1\P_1.png</tekstura>
      <!-- Pliki 'png'. Domyœlnie œcie¿ka w katalogu 'Tekstury' w folderze z gr¹. -->

    <wartoœæ_dodatkowa_01>123,456 abc</wartoœæ_dodatkowa_01>
      <!-- Dla wybranych prymitywów (bry³) dodatkowe parametry, których wartoœæ i typ wartoœci zale¿y od danego prymitywu. -->
        <!-- Dla prymitywu: linia - Nodes[ 1 ].Z - 123,456. -->
        <!-- Dla prymitywu: ostros³up - Height - 123,456 - w zakresie od 0 do 1 - ( 0, 1 >. -->
        <!-- Dla prymitywu: torus - MajorRadius - 123,456. -->

    <wartoœæ_dodatkowa_02>123,456 abc</wartoœæ_dodatkowa_02>
      <!-- Dla wybranych prymitywów (bry³) dodatkowe parametry, których wartoœæ i typ wartoœci zale¿y od danego prymitywu. -->
        <!-- Dla prymitywu: linia - LineWidth - 123,456. -->
        <!-- Dla prymitywu: torus - MinorRadius - 123,456. -->

    <pêtla_x>
      <pêtla_do>123,456</pêtla_do>
      <pêtla_iloœæ>123</pêtla_iloœæ>
      <pêtla_od>123,456</pêtla_od>
      <pêtla_skok>123,456</pêtla_skok>
    </pêtla_x>
      <!-- Powinien to byæ ostatni wêze³; nazwa wêz³a pêtla_x, pêtla_y, pêtla_z oznacza której osi dotyczy; nale¿y podaæ albo pêtla_iloœæ (iloœæ powieleñ danego obiektu) albo ró¿ne od siebie wartoœci pêtla_do i pêtla_od (zakres wspó³rzêdnych, na których powielaæ dany obiekt; mo¿e byæ malej¹cy). -->

    <pêtla>
      <pêtla_x_iloœæ>123</pêtla_x_iloœæ>
      <pêtla_x_skok>123,456</pêtla_x_skok>

      <pêtla_y_iloœæ>123</pêtla_y_iloœæ>
      <pêtla_y_skok>123,456</pêtla_y_skok>

      <pêtla_z_iloœæ>123</pêtla_z_iloœæ>
      <pêtla_z_skok>123,456</pêtla_z_skok>
    </pêtla>
      <!-- Powinien to byæ ostatni wêze³; iloœæ powinna byæ co najmniej jeden i skok niezerowy. -->
  </obiekt>
</l¹d>
}
  {$endregion 'Przyk³ad xml.'}

end;//---//Funkcja L¹d__Utwórz().

//Funkcja L¹d__Zwolnij().
procedure TStatki_Form.L¹d__Zwolnij( const tylko_dŸwiêk_emiter_f : boolean = false );
var
  i : integer;
  zt_cursor_kopia : TCursor;
begin

  //
  // Funkcja zwalnia elementy l¹dów.
  //
  // Parametry:
  //   tylko_dŸwiêk_emiter_f:
  //     false - zwalnia wszystkie elementy l¹dów.
  //     true - zwalnia tylko emitery dŸwiêków l¹dów.
  //

  zt_cursor_kopia := Screen.Cursor;
  Screen.Cursor := crHourGlass;


  l¹d_zwolnij_uszkodzenia_przelicz_g := false;


  if   ( l¹d_list = nil )
    or (  not Assigned( l¹d_list )  ) then
    Exit;


  for i := l¹d_list.Count - 1 downto 0 do
    if   ( not tylko_dŸwiêk_emiter_f )
      or (
               ( tylko_dŸwiêk_emiter_f )
           and (  Wyglad_Elementy.Obiekt_Rodzaj( l¹d_list[ i ] ) = Wyglad_Elementy.or_DŸwiêk_Emiter  )
         ) then
      begin

        TGLCustomSceneObject(l¹d_list[ i ]).Free();
        l¹d_list.Delete( i );

      end;
    //---//if   ( not tylko_dŸwiêk_emiter_f ) (...)


  if not tylko_dŸwiêk_emiter_f then
    l¹d_nazwa_numer_g := l¹d_list.Count;


  //L¹d_Elementy_Iloœæ_Label.Caption := Trim(  FormatFloat( '### ### ##0', l¹d_list.Count )  );
  L¹d__Elementy_Iloœæ_Wyszukaj();


  DŸwiêki__L¹dów__Zwolnij_Wszystkie( true, false );


  Screen.Cursor := zt_cursor_kopia;

end;//---//Funkcja L¹d__Zwolnij().

//Funkcja L¹d__Zwolnij_Uszkodzenia().
procedure TStatki_Form.L¹d__Zwolnij_Uszkodzenia();
var
  kontener_usuniêto : boolean;
  i : integer;
  zts : string;
  rodzic_gl_base_scene_object : TGLBaseSceneObject;
begin

  // Usuwaæ tylko w jednym miejscu. //!!!
  // Wywo³anie tej funkcji w kliku miejscach mo¿e coœ zepsuæ.

  //
  // Funkcja zwalnia obiekty l¹du, których punkty ¿ycia zosta³y wyzerowane.
  // Kontenerów na prymitywy nie zwalnia.
  //

  if   ( l¹d_list = nil )
    or (  not Assigned( l¹d_list )  ) then
    Exit;


  kontener_usuniêto := false;


  for i := l¹d_list.Count - 1 downto 0 do
    //if    (  Trim( TGLCustomSceneObject(l¹d_list[ i ]).Name ) <> ''  ) // Kontenerów na prymitywy nie sprawdza.
    if    (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(l¹d_list[ i ]) ) <> Wyglad_Elementy.or_Kontener_Prymitywów  ) // Kontenerów na prymitywy nie sprawdza.
      and (  Wyglad_Elementy.Punkty_¯ycia( TGLCustomSceneObject(l¹d_list[ i ]) ) = 0  ) then
      begin

        rodzic_gl_base_scene_object := TGLCustomSceneObject(l¹d_list[ i ]).Parent;

        if czy_serwer_g then
          zts := '0;' + IntToStr(  Wyglad_Elementy.Identyfikator_Elementu( TGLCustomSceneObject(l¹d_list[ i ]) )  ) + wieloosobowe__l¹d__trafienie_usuñ_c;

        TGLCustomSceneObject(l¹d_list[ i ]).Free();
        l¹d_list.Delete( i );


        if    ( rodzic_gl_base_scene_object <> nil )
          and ( rodzic_gl_base_scene_object.Count <= 0 ) then
          begin

            // Gdy kontener na prymitywy jest pusty zwalnia go.

            kontener_usuniêto := true;

            l¹d_list.Remove( rodzic_gl_base_scene_object );
            FreeAndNil( rodzic_gl_base_scene_object );

            Break; // Gdy usuwa kontener na prymitywy to iloœæ obiektów zmienia siê o 2 co zak³óca pêtlê.

          end;
        //---//if    ( rodzic_gl_base_scene_object <> nil ) (...)


        if czy_serwer_g then
          Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__l¹d__trafienie_c, -99, zts );

      end;
    //---//if    (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(l¹d_list[ i ]) ) <> Wyglad_Elementy.or_Kontener_Prymitywów  ) (...)


  if not kontener_usuniêto then
    l¹d_zwolnij_uszkodzenia_przelicz_g := false;


  L¹d__Elementy_Iloœæ_Wyszukaj();

end;//---//Funkcja L¹d__Zwolnij_Uszkodzenia().

//Funkcja Log_Wypisz().
procedure TStatki_Form.Log_Wypisz( const napis_f : string; const prze³¹cz_zak³adkê_f : boolean = true );
begin

  //
  // Funkcja wpisuje napis do pola logu.
  //
  // Parametry:
  //   napis_f
  //   prze³¹cz_zak³adkê_f:
  //     false - nie prze³¹cza zak³adki.
  //     true - prze³¹cza zak³adkê.
  //
  // Gdy wpisuje logi to serwer TCP blokuje siê i Log_Memo staje siê niewidoczne - lepiej u¿ywaæ Wieloosobowe__Log_Wypisz().
  //

  if Trim( napis_f ) = '' then
    Exit;

  Log_Memo.Lines.Add( '___' );
  Log_Memo.Lines.Add( napis_f );
  //Log_Memo.Lines.Add( '---' );

  if prze³¹cz_zak³adkê_f then
    PageControl1.ActivePage := Log_TabSheet;

end;//---//Funkcja Log_Wypisz().

//Funkcja Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero().
procedure TStatki_Form.Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero( const statek_lotniskowiec_f, statek_niszcz¹cy_f : TStatek; const rodzaj_f : smallint = -1 );
var
  i,
  j
    : integer;
begin

  //
  // Funkcja samolotom, które s¹ na lotniskowcu ustawia punkty ¿ycia na zero
  // np. gdy lotniskowiec utraci wszystkie punkty ¿ycia.
  //
  // Samolot nie powinien mieæ potomka samolotu i nie trzeba ustawiaæ potomkom samolotu punktów ¿ycia na zero.
  //
  // Parametry:
  //   statek_lotniskowiec_f - statek, na którym s¹ samoloty
  //   statek_niszcz¹cy_f - statek, który spowodowa³ zniszczenie samolotów na lotniskowcu
  //   rodzaj_f:
  //     -1 - wszystkim samolotom.
  //     0 - samolotom z innej grupy.
  //     1 - samolotom innych graczy.
  //

  if statek_lotniskowiec_f = nil then
    Exit;


  // Odpina samoloty ze statków aby nie zosta³y zwolnione razem z lotniskowcem.
  for i := 0 to Length( statki_t ) - 1 do
    if    ( statki_t[ i ] <> nil )
      and ( statki_t[ i ].czy_samolot )
      and ( statki_t[ i ].punkty_¿ycia_aktualne > 0 )
      and ( statek_lotniskowiec_f.czy_lotniskowiec )
      and ( statki_t[ i ].Samolot_Na_Lotniskowcu() <> nil )
      and ( statki_t[ i ].Samolot_Na_Lotniskowcu().falowanie_gl_dummy_cube = statek_lotniskowiec_f.falowanie_gl_dummy_cube )
      and (
               ( rodzaj_f = -1 )
            or (
                     ( rodzaj_f = 0 )
                 and ( statki_t[ i ].id_grupa <> statek_lotniskowiec_f.id_grupa )
               )
            or (
                     ( rodzaj_f = 1 )
                 and ( statki_t[ i ].id_gracz <> statek_lotniskowiec_f.id_gracz )
               )
          ) then
      begin

        if    ( not czy_klient_g )
          and ( statek_niszcz¹cy_f <> nil ) then
          begin

            j := Gra_Statystyki_R_Identyfikator_ZnajdŸ( statek_niszcz¹cy_f.id_gracz );

            if j >= 0 then
              begin

                gra_statystyki_r_t[ j ].zatopienia__gs := gra_statystyki_r_t[ j ].zatopienia__gs + 1;
                gra_statystyki_r_t[ j ].obra¿enia_zadane__amunicja__gs := gra_statystyki_r_t[ j ].obra¿enia_zadane__amunicja__gs + statki_t[ i ].punkty_¿ycia_aktualne;

                if statek_niszcz¹cy_f.id_grupa = statek_lotniskowiec_f.id_grupa then
                  begin

                    gra_statystyki_r_t[ j ].zatopienia_sojuszników__gs := gra_statystyki_r_t[ j ].zatopienia_sojuszników__gs + 1;
                    gra_statystyki_r_t[ j ].obra¿enia_zadane__amunicja_sojusznikom__gs := gra_statystyki_r_t[ j ].obra¿enia_zadane__amunicja_sojusznikom__gs + statki_t[ i ].punkty_¿ycia_aktualne;

                  end;
                //---//if statek_niszcz¹cy_f.id_grupa = statek_lotniskowiec_f.id_grupa then

              end;
            //---//if j >= 0 then

          end;
        //---//if    ( not czy_klient_g ) (...)


        statki_t[ i ].Punkty_¯ycia__Zmieñ( -statki_t[ i ].punkty_¿ycia_maksymalne );

      end;
    //---//if    ( statki_t[ i ] <> nil ) (...)


  for i := 0 to Length( statki_t ) - 1 do // Dodatkowe sprawdzenie.
    if    ( statki_t[ i ] <> nil )
      and ( statki_t[ i ].punkty_¿ycia_aktualne > 0 )
      and ( statek_lotniskowiec_f.czy_lotniskowiec )
      and ( statki_t[ i ].Parent = statek_lotniskowiec_f.falowanie_gl_dummy_cube )
      and (
               ( rodzaj_f = -1 )
            or (
                     ( rodzaj_f = 0 )
                 and ( statki_t[ i ].id_grupa <> statek_lotniskowiec_f.id_grupa )
               )
            or (
                     ( rodzaj_f = 1 )
                 and ( statki_t[ i ].id_gracz <> statek_lotniskowiec_f.id_gracz )
               )
          ) then
      begin

        statki_t[ i ].Punkty_¯ycia__Zmieñ( -statki_t[ i ].punkty_¿ycia_maksymalne );

      end;
    //---//if    ( statki_t[ i ] <> nil ) (...)

end;//---//Funkcja Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero().

//Funkcja Lufy_Prze³adowanie().
procedure TStatki_Form.Lufy_Prze³adowanie( delta_czasu_f : double );
var
  i,
  j,
  i_s
    : integer;
  zt_statek : TStatek;
begin

  if czy_klient_g then
    Exit;


  for i_s := 0 to Length( statki_t ) - 1 do
    begin

      zt_statek := statki_t[ i_s ];

      if    ( zt_statek <> nil )
        and ( zt_statek.punkty_¿ycia_aktualne > 0 )
        and ( zt_statek.schemat_samolot_zmiana_czas_sekundy_i = 0 ) then
        begin

          for i := 0 to Length( zt_statek.artyleria_t ) - 1 do
            for j := 0 to Length( zt_statek.artyleria_t[ i ].lufy_t ) - 1 do
              if zt_statek.artyleria_t[ i ].lufy_t[ j ] <> nil then
                if zt_statek.artyleria_t[ i ].lufy_t[ j ].Prze³adowanie( delta_czasu_f ) then
                  DŸwiêki__Efekt__Utwórz_Jeden( der_Lufa_Za³adowanie__Du¿e, zt_statek.artyleria_t[ i ].lufy_t[ j ].AbsolutePosition );


          for i := 0 to Length( zt_statek.bomba_g³êbinowa_t ) - 1 do
            for j := 0 to Length( zt_statek.bomba_g³êbinowa_t[ i ].lufy_t ) - 1 do
              if zt_statek.bomba_g³êbinowa_t[ i ].lufy_t[ j ] <> nil then
                if zt_statek.bomba_g³êbinowa_t[ i ].lufy_t[ j ].Prze³adowanie( delta_czasu_f ) then
                  DŸwiêki__Efekt__Utwórz_Jeden( der_Lufa_Za³adowanie__Du¿e, zt_statek.bomba_g³êbinowa_t[ i ].lufy_t[ j ].AbsolutePosition );


          for i := 0 to Length( zt_statek.dzia³a_t ) - 1 do
            for j := 0 to Length( zt_statek.dzia³a_t[ i ].lufy_t ) - 1 do
              if zt_statek.dzia³a_t[ i ].lufy_t[ j ] <> nil then
                if zt_statek.dzia³a_t[ i ].lufy_t[ j ].Prze³adowanie( delta_czasu_f ) then
                  DŸwiêki__Efekt__Utwórz_Jeden( der_Lufa_Za³adowanie, zt_statek.dzia³a_t[ i ].lufy_t[ j ].AbsolutePosition );


          for i := 0 to Length( zt_statek.je¿e_g³êbinowe_t ) - 1 do
            for j := 0 to Length( zt_statek.je¿e_g³êbinowe_t[ i ].lufy_t ) - 1 do
              if zt_statek.je¿e_g³êbinowe_t[ i ].lufy_t[ j ] <> nil then
                if zt_statek.je¿e_g³êbinowe_t[ i ].lufy_t[ j ].Prze³adowanie( delta_czasu_f ) then
                  DŸwiêki__Efekt__Utwórz_Jeden( der_Lufa_Za³adowanie, zt_statek.je¿e_g³êbinowe_t[ i ].lufy_t[ j ].AbsolutePosition );


          for i := 0 to Length( zt_statek.torpedy_wyrzutnie_t ) - 1 do
            for j := 0 to Length( zt_statek.torpedy_wyrzutnie_t[ i ].lufy_t ) - 1 do
              if zt_statek.torpedy_wyrzutnie_t[ i ].lufy_t[ j ] <> nil then
                if zt_statek.torpedy_wyrzutnie_t[ i ].lufy_t[ j ].Prze³adowanie( delta_czasu_f ) then
                  DŸwiêki__Efekt__Utwórz_Jeden( der_Lufa_Za³adowanie__Du¿e, zt_statek.torpedy_wyrzutnie_t[ i ].lufy_t[ j ].AbsolutePosition );

        end;
      //---//if    ( zt_statek <> nil ) (...)

    end;
  //---//for i_s := 0 to Length( statki_t ) - 1 do

end;//---//Funkcja Lufy_Prze³adowanie().

//Funkcja Napis_Odœwie¿().
procedure TStatki_Form.Napis_Odœwie¿( const delta_czasu_f : double; const oczekiwanie_pomiñ_f : boolean = false );
var
  ró¿a_wiatrów_statek : string;

  //Funkcja Gracz_Nazwa_ZnajdŸ() w Napis_Odœwie¿().
  function Gracz_Nazwa_ZnajdŸ( const id_statek_f : integer ) : string;
  var
    i_l : integer;
  begin

    Result := '';

    if id_statek_f = -99 then
      Exit;

    for i_l := 0 to Length( statki_t ) - 1 do
      if    ( statki_t[ i_l ] <> nil )
        and ( statki_t[ i_l ].id_statek = id_statek_f ) then
        begin

          Result := statki_t[ i_l ].gracz__nazwa.Text + ' (' + t³umaczenie_komunikaty_r.ekran_napis__grupa__skrót + ' ' + IntToStr( statki_t[ i_l ].id_grupa ) + ')';
          Exit;

        end;
      //---//if    ( statki_t[ i_l ] <> nil ) (...)

  end;//---//Funkcja Gracz_Nazwa_ZnajdŸ().

  //Funkcja Kotwica_Napisy() w Napis_Odœwie¿().
  function Kotwica_Napisy( const statek_f : TStatek; const odstêp_f : string = ''  ) : string;
  var
    i_l,
    kotwica_indeks_do_pomiaru_odleg³oœci_l
      : integer;
  begin

    // Opis bazuje na pierwszej kotwicy.

    Result := '';

    if   ( statek_f = nil )
      or (  Length( statek_f.kotwica_t ) <= 0  ) then
      Exit;

    Result :=
      #13 + #10 +
      odstêp_f + t³umaczenie_komunikaty_r.ekran_napis__kotwica + ' ';


    kotwica_indeks_do_pomiaru_odleg³oœci_l := -1;

    for i_l := 0 to Length( statek_f.kotwica_t ) - 1 do
      begin

        case statek_f.kotwica_t[ i_l ].kotwica_ruch_etap__ko of
            kre_Dno :
              Result := Result + ' _';

            kre_Statek :
              Result := Result + ' T';

          kre_Stop :
            Result := Result + ' &';

            kre_W_Dó³ :
              Result := Result + ' v';

            kre_W_Górê :
              Result := Result + ' ^';

            else//case statek_f.kotwica_t[ i_l ].kotwica_ruch_etap__ko of
              Result := Result + ' ?';
          end;
        //---//case statek_f.kotwica_t[ i_l ].kotwica_ruch_etap__ko of

        if    ( kotwica_indeks_do_pomiaru_odleg³oœci_l = -1 )
          and ( statek_f.kotwica_t[ i_l ].kotwica_ruch_etap__ko <> kre_Statek ) then
          kotwica_indeks_do_pomiaru_odleg³oœci_l := i_l;

      end;
    //---//for i_l := 0 to Length( statek_f.kotwica_t ) - 1 do

    if kotwica_indeks_do_pomiaru_odleg³oœci_l > -1 then
      Result := Result +
        ' ' + Trim(    FormatFloat(   '### ### ##0.00', statek_f.kotwica_t[ kotwica_indeks_do_pomiaru_odleg³oœci_l ].kotwica_trzon__dó³.DistanceTo(  GLS.VectorGeometry.VectorMake( statek_f.kotwica_t[ 0 ].kotwica_trzon__dó³.AbsolutePosition.X, statek_f.AbsolutePosition.Y, statek_f.kotwica_t[ kotwica_indeks_do_pomiaru_odleg³oœci_l ].kotwica_trzon__dó³.AbsolutePosition.Z )  )   )    );

  end;//---//Funkcja Kotwica_Napisy().

  //Funkcja Ró¿a_Wiatrów() w Napis_Odœwie¿().
  function Ró¿a_Wiatrów( const kierunek_f : GLS.VectorTypes.TVector4f ) : string;
  var
    ztr_l : real;
  begin

    Result := '';

    {$region 'Ró¿a wiatrów.'}
    ztr_l :=
      System.Math.RadToDeg
        (
          GLS.VectorGeometry.AngleBetweenVectors
            (
              GLS.VectorGeometry.VectorMake( kierunek_f.X, 0, kierunek_f.Z ),
              GLS.VectorGeometry.VectorMake( 0, 0, -1 ),
              GLS.VectorGeometry.VectorMake( 0, 0, 0 )
            )
        );

    if kierunek_f.X < 0 then
      ztr_l := 360 - ztr_l;

    Result := Trim(  FormatFloat( '### ### ##0.00', ztr_l )  );

    if Result = '360,00' then
      Result := '0,00';

    Result := Result + '* ';

    // PN W PD Z PNW PDW PDZ PZ

    if    ( ztr_l >= 0 )
      and ( ztr_l < 22.5) then
      Result := Result + t³umaczenie_komunikaty_r.ekran_napis__ró¿a_wiatrów__PN
    else
    if    ( ztr_l >= 22.5 )
      and ( ztr_l < 67.5) then
      Result := Result + t³umaczenie_komunikaty_r.ekran_napis__ró¿a_wiatrów__PNW
    else
    if    ( ztr_l >= 67.5 )
      and ( ztr_l < 112.5) then
      Result := Result + t³umaczenie_komunikaty_r.ekran_napis__ró¿a_wiatrów__W
    else
    if    ( ztr_l >= 112.5 )
      and ( ztr_l < 157.5) then
      Result := Result + t³umaczenie_komunikaty_r.ekran_napis__ró¿a_wiatrów__PDW
    else
    if    ( ztr_l >= 157.5 )
      and ( ztr_l < 202.5) then
      Result := Result + t³umaczenie_komunikaty_r.ekran_napis__ró¿a_wiatrów__PD
    else
    if    ( ztr_l >= 202.5 )
      and ( ztr_l < 247.5) then
      Result := Result + t³umaczenie_komunikaty_r.ekran_napis__ró¿a_wiatrów__PDZ
    else
    if    ( ztr_l >= 247.5 )
      and ( ztr_l < 292.5) then
      Result := Result + t³umaczenie_komunikaty_r.ekran_napis__ró¿a_wiatrów__Z
    else
    if    ( ztr_l >= 292.5 )
      and ( ztr_l < 337.5) then
      Result := Result + t³umaczenie_komunikaty_r.ekran_napis__ró¿a_wiatrów__PNZ
    else
    if ztr_l >= 337.5 then
      Result := Result + t³umaczenie_komunikaty_r.ekran_napis__ró¿a_wiatrów__PN;
    {$endregion 'Ró¿a wiatrów.'}

  end;//---//Funkcja Ró¿a_Wiatrów().

  //Funkcja Radar_Napisy() w Napis_Odœwie¿().
  procedure Radar_Napisy( const statek_f : TStatek; const odstêp_f : string = ''  );
  begin

    if statek_f = nil then
      Exit;


    Radar_GLHUDText.Text :=
      odstêp_f +
      t³umaczenie_komunikaty_r.ekran_napis__radar__statek__jeden_znak +
      ' x: ' + Trim(  FormatFloat( '### ### ##0', statek_f.AbsolutePosition.X )  ) +
      ', z: ' + Trim(  FormatFloat( '### ### ##0', statek_f.AbsolutePosition.Z )  );

    if Radar__Wspó³rzêdna_Y_CheckBox.Checked then
      Radar_GLHUDText.Text := Radar_GLHUDText.Text +
        ', y: ' + Trim(  FormatFloat( '### ### ##0', statek_f.AbsolutePosition.Y )  );

    Radar_GLHUDText.Text := Radar_GLHUDText.Text +
      ', ' + t³umaczenie_komunikaty_r.ekran_napis__radar__busola__jeden_znak + ': ';

    if    ( gracz_tryb_g = gt_Samolot )
      and ( samolot__statek_gracza <> nil ) then
      Radar_GLHUDText.Text := Radar_GLHUDText.Text +
        Ró¿a_Wiatrów( samolot__statek_gracza.AbsoluteDirection )
    else//if    ( gracz_tryb_g = gt_Samolot ) (...)
      Radar_GLHUDText.Text := Radar_GLHUDText.Text +
        ró¿a_wiatrów_statek;

    if Radar__Wspó³rzêdne_Kursora_CheckBox.Checked then
      begin

        Radar_GLHUDText.Text := Radar_GLHUDText.Text +
          #13 + #10 +
          odstêp_f +
          t³umaczenie_komunikaty_r.ekran_napis__radar__wspó³rzêdne_kursora__jeden_znak +
          ' x: ' + Trim(  FormatFloat( '### ### ##0', wspó³rzêdne_œwiata_z_radaru_affine_vector_g.X )  ) +
          ', z: ' + Trim(  FormatFloat( '### ### ##0', wspó³rzêdne_œwiata_z_radaru_affine_vector_g.Z )  );

        if Radar__Wspó³rzêdna_Y_CheckBox.Checked then
          Radar_GLHUDText.Text := Radar_GLHUDText.Text +
            ', y: ' + Trim(  FormatFloat( '### ### ##0', wspó³rzêdne_œwiata_z_radaru_affine_vector_g.Y )  );

      end;
    //---//if Radar_Wspó³rzêdne_Kursora_CheckBox.Checked then


    if Dalmierz_CheckBox.Checked then
      Radar_GLHUDText.Text := Radar_GLHUDText.Text +
        #13 + #10 +
        odstêp_f +
        t³umaczenie_komunikaty_r.ekran_napis__radar__dalmierz__jeden_znak +
        ': ' + Trim(   FormatFloat(  '### ### ##0.000', statek_f.DistanceTo( wspó³rzêdne_œwiata_z_radaru_affine_vector_g )  )   );


    if Noc__Czas_Na__Radarze_Wyœwietlaj_CheckBox.Checked then
      Radar_GLHUDText.Text := Radar_GLHUDText.Text +
        #13 + #10 +
        odstêp_f +
        t³umaczenie_komunikaty_r.s³owo__czas +
        ' ' + Noc_Label.Caption;

  end;//---//Funkcja Radar_Napisy().

  //Funkcja Skrêt_Kierunek_Symbol() w Napis_Odœwie¿().
  procedure Skrêt_Kierunek_Symbol( const statek_f : TStatek; var skrêt_kierunek_f, skrêt_kierunek_zadany_f : string );
  begin

    if statek_f = nil then
      Exit;


    {$region 'Opis skrêtu.'}
    if statek_f.skrêt_aktualny_procent < 0 then
      skrêt_kierunek_f := '<' //'lewo'
    else
    if statek_f.skrêt_aktualny_procent = 0 then
      skrêt_kierunek_f := '|' //''
    else
    if statek_f.skrêt_aktualny_procent > 0 then
      skrêt_kierunek_f := '>'; //'prawo'

    if statek_f.skrêt_zadany_procent < 0 then
      skrêt_kierunek_zadany_f := '<' //'lewo'
    else
    if statek_f.skrêt_zadany_procent = 0 then
      skrêt_kierunek_zadany_f := '|' //''
    else
    if statek_f.skrêt_zadany_procent > 0 then
      skrêt_kierunek_zadany_f := '>'; //'prawo'

    if Abs( statek_f.skrêt_zadany_procent ) > 50 then
      skrêt_kierunek_zadany_f := skrêt_kierunek_zadany_f + skrêt_kierunek_zadany_f;
    {$endregion 'Opis skrêtu.'}

  end;//---//Funkcja Skrêt_Kierunek_Symbol().

  //Funkcja Uzbrojenie_Opis() w Napis_Odœwie¿().
  function Uzbrojenie_Opis( const statek_f : TStatek; var uszkodzenia_opis_f : string; const odstêp_f : string = '' ) : string;
  var
    i_l,
    j_l,
    uszkodzenia_broñ_licznik_l
      : integer;
    prze³adowanie_procent_najwiêksze_nie_100_l
      : real;
    zts_l : string;
  begin

    //
    // Funkcja zwraca opis uzbrojenia.
    //

    Result := '';
    uszkodzenia_opis_f := '';

    if statek_f = nil then
      Exit;


    {$region 'Opis uzbrojenia.'}
    if Length( statek_f.artyleria_t ) > 0 then
      begin

        if Result <> '' then
          Result := Result + #13 + #10;

        Result := Result + odstêp_f;

        //if    ( not ar_Artyleria_CheckBox.Checked )
        //  and ( not ar_Wszystkie_CheckBox.Checked ) then
        if    ( not statek_f.amunicja_rodzaj_wybrana__artyleria )
          and ( not statek_f.amunicja_rodzaj_wybrana__wszystkie ) then
          Result := Result + '--- ';

        Result := Result +
          t³umaczenie_komunikaty_r.ekran_napis__uzbrojenie_opis__artyleria + ':';

        uszkodzenia_broñ_licznik_l := 0;

        for i_l := 0 to Length( statek_f.artyleria_t ) - 1 do
          begin

            if i_l > 0 then
              Result := Result + ', ';

            if statek_f.artyleria_t[ i_l ].uszkodzone_czas_sekundy_i <> 0 then
              begin

                zts_l := Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( statek_f.artyleria_t[ i_l ].uszkodzone_czas_sekundy_i )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s;


                Result := Result +
                  ' <' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__jeden_znak__u + ': ' + zts_l + '>';


                inc( uszkodzenia_broñ_licznik_l );

                if uszkodzenia_broñ_licznik_l = 1 then
                  uszkodzenia_opis_f := uszkodzenia_opis_f +
                  #13 + #10 +
                  odstêp_f + odstêp_f + '<' + t³umaczenie_komunikaty_r.ekran_napis__uzbrojenie_opis__artyleria + ': '
                else//if uszkodzenia_broñ_licznik_l = 1 then
                if uszkodzenia_broñ_licznik_l > 1 then
                  uszkodzenia_opis_f := uszkodzenia_opis_f + ', ';

                uszkodzenia_opis_f := uszkodzenia_opis_f + IntToStr( i_l + 1 ) + ': ' + zts_l;

              end;
            //---//if statek_f.artyleria_t[ i_l ].uszkodzone_czas_sekundy_i <> 0 then

            prze³adowanie_procent_najwiêksze_nie_100_l := 0;

            for j_l := 0 to Length( statek_f.artyleria_t[ i_l ].lufy_t ) - 1 do
              begin

                if statek_f.artyleria_t[ i_l ].lufy_t[ j_l ].strza³_gotowoœæ then
                  Result := Result + ' *'
                else//if statek_f.artyleria_t[ i_l ].lufy_t[ j_l ].strza³_gotowoœæ then
                  Result := Result + ' x';

                //Result := Result + ' ' + Trim(  FormatFloat( '### ### ##0', statek_f.artyleria_t[ i_l ].lufy_t[ j_l ].prze³adowanie_procent )  ) + '%'; //???

                if    ( statek_f.artyleria_t[ i_l ].lufy_t[ j_l ].prze³adowanie_procent <> 100 )
                  and ( prze³adowanie_procent_najwiêksze_nie_100_l < statek_f.artyleria_t[ i_l ].lufy_t[ j_l ].prze³adowanie_procent ) then
                  prze³adowanie_procent_najwiêksze_nie_100_l := statek_f.artyleria_t[ i_l ].lufy_t[ j_l ].prze³adowanie_procent;

              end;
            //---//for j_l := 0 to Length( statek_f.artyleria_t[ i_l ].lufy_t ) - 1 do

            if prze³adowanie_procent_najwiêksze_nie_100_l <> 0 then
              Result := Result +
                ' ' + Trim(  FormatFloat( '### ### ##0', prze³adowanie_procent_najwiêksze_nie_100_l )  ) + '%';

            //Result := Result +
            //  ' ' + Trim(  FormatFloat( '### ### ##0', i_l + 1 )  ) + ' - ' + Trim(  FormatFloat( '### ### ##0', statek_f.artyleria_t[ i_l ].amunicja_iloœæ )  );
            Result := Result +
              ' (' + Trim(  FormatFloat( '### ### ##0', statek_f.artyleria_t[ i_l ].amunicja_iloœæ )  ) + ')';

          end;
        //---//for i_l := 0 to Length( Self.artyleria_t ) - 1 do

        if uszkodzenia_broñ_licznik_l > 0 then
          uszkodzenia_opis_f := uszkodzenia_opis_f + '>';

      end;
    //---//if Length( statek_f.artyleria_t ) > 0 then

    if Length( statek_f.bomba_g³êbinowa_t ) > 0 then
      begin

        if Result <> '' then
          Result := Result + #13 + #10;

        Result := Result + odstêp_f;

        //if    ( not ar_Bomba_G³êbinowa_CheckBox.Checked )
        //  and ( not ar_Wszystkie_CheckBox.Checked ) then
        if    ( not statek_f.amunicja_rodzaj_wybrana__bomba_g³êbinowa )
          and ( not statek_f.amunicja_rodzaj_wybrana__wszystkie ) then
          Result := Result + '--- ';

        Result := Result +
          t³umaczenie_komunikaty_r.ekran_napis__uzbrojenie_opis__bomby_g³êbinowe + ':';

        uszkodzenia_broñ_licznik_l := 0;

        for i_l := 0 to Length( statek_f.bomba_g³êbinowa_t ) - 1 do
          begin

            if i_l > 0 then
              Result := Result + ', ';

            if statek_f.bomba_g³êbinowa_t[ i_l ].uszkodzone_czas_sekundy_i <> 0 then
              begin

                zts_l := Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( statek_f.bomba_g³êbinowa_t[ i_l ].uszkodzone_czas_sekundy_i )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s;


                Result := Result +
                  ' <' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__jeden_znak__u + ': ' + zts_l + '>';


                inc( uszkodzenia_broñ_licznik_l );

                if uszkodzenia_broñ_licznik_l = 1 then
                  uszkodzenia_opis_f := uszkodzenia_opis_f +
                  #13 + #10 +
                  odstêp_f + odstêp_f + '<' + t³umaczenie_komunikaty_r.ekran_napis__uzbrojenie_opis__bomby_g³êbinowe + ': '
                else//if uszkodzenia_broñ_licznik_l = 1 then
                if uszkodzenia_broñ_licznik_l > 1 then
                  uszkodzenia_opis_f := uszkodzenia_opis_f + ', ';

                uszkodzenia_opis_f := uszkodzenia_opis_f + IntToStr( i_l + 1 ) + ': ' + zts_l;

              end;
            //---//if statek_f.bomba_g³êbinowa_t[ i_l ].uszkodzone_czas_sekundy_i <> 0 then

            prze³adowanie_procent_najwiêksze_nie_100_l := 0;

            for j_l := 0 to Length( statek_f.bomba_g³êbinowa_t[ i_l ].lufy_t ) - 1 do
              begin

                if statek_f.bomba_g³êbinowa_t[ i_l ].lufy_t[ j_l ].strza³_gotowoœæ then
                  Result := Result + ' *'
                else//if statek_f.bomba_g³êbinowa_t[ i_l ].lufy_t[ j_l ].strza³_gotowoœæ then
                  Result := Result + ' x';

                //Result := Result + ' ' + Trim(  FormatFloat( '### ### ##0', statek_f.bomba_g³êbinowa_t[ i_l ].lufy_t[ j_l ].prze³adowanie_procent )  ) + '%'; //???

                if    ( statek_f.bomba_g³êbinowa_t[ i_l ].lufy_t[ j_l ].prze³adowanie_procent <> 100 )
                  and ( prze³adowanie_procent_najwiêksze_nie_100_l < statek_f.bomba_g³êbinowa_t[ i_l ].lufy_t[ j_l ].prze³adowanie_procent ) then
                  prze³adowanie_procent_najwiêksze_nie_100_l := statek_f.bomba_g³êbinowa_t[ i_l ].lufy_t[ j_l ].prze³adowanie_procent;

              end;
            //---//for j_l := 0 to Length( statek_f.bomba_g³êbinowa_t[ i_l ].lufy_t ) - 1 do

            if prze³adowanie_procent_najwiêksze_nie_100_l <> 0 then
              Result := Result +
                ' ' + Trim(  FormatFloat( '### ### ##0', prze³adowanie_procent_najwiêksze_nie_100_l )  ) + '%';

            //Result := Result +
            //  ' ' + Trim(  FormatFloat( '### ### ##0', i_l + 1 )  ) + ' - ' + Trim(  FormatFloat( '### ### ##0', statek_f.bomba_g³êbinowa_t[ i_l ].amunicja_iloœæ )  );
            Result := Result +
              ' (' + Trim(  FormatFloat( '### ### ##0', statek_f.bomba_g³êbinowa_t[ i_l ].amunicja_iloœæ )  ) + ')';

          end;
        //---//for i_l := 0 to Length( Self.bomba_g³êbinowa_t ) - 1 do

        if uszkodzenia_broñ_licznik_l > 0 then
          uszkodzenia_opis_f := uszkodzenia_opis_f + '>';

      end;
    //---//if Length( statek_f.bomba_g³êbinowa_t ) > 0 then

    if Length( statek_f.dzia³a_t ) > 0 then
      begin

        if Result <> '' then
          Result := Result + #13 + #10;

        Result := Result + odstêp_f;

        //if    ( not ar_Pocisk_CheckBox.Checked )
        //  and ( not ar_Wszystkie_CheckBox.Checked ) then
        if    ( not statek_f.amunicja_rodzaj_wybrana__pocisk )
          and ( not statek_f.amunicja_rodzaj_wybrana__wszystkie ) then
          Result := Result + '--- ';

        Result := Result +
          t³umaczenie_komunikaty_r.ekran_napis__uzbrojenie_opis__dzia³a + ':';

        uszkodzenia_broñ_licznik_l := 0;

        for i_l := 0 to Length( statek_f.dzia³a_t ) - 1 do
          begin

            if i_l > 0 then
              Result := Result + ', ';

            if statek_f.dzia³a_t[ i_l ].uszkodzone_czas_sekundy_i <> 0 then
              begin

                zts_l := Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( statek_f.dzia³a_t[ i_l ].uszkodzone_czas_sekundy_i )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s;


                Result := Result +
                  ' <' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__jeden_znak__u + ': ' + zts_l + '>';


                inc( uszkodzenia_broñ_licznik_l );

                if uszkodzenia_broñ_licznik_l = 1 then
                  uszkodzenia_opis_f := uszkodzenia_opis_f +
                  #13 + #10 +
                  odstêp_f + odstêp_f + '<' + t³umaczenie_komunikaty_r.ekran_napis__uzbrojenie_opis__dzia³a + ': '
                else//if uszkodzenia_broñ_licznik_l = 1 then
                if uszkodzenia_broñ_licznik_l > 1 then
                  uszkodzenia_opis_f := uszkodzenia_opis_f + ', ';

                uszkodzenia_opis_f := uszkodzenia_opis_f + IntToStr( i_l + 1 ) + ': ' + zts_l;

              end;
            //---//if statek_f.dzia³a_t[ i_l ].uszkodzone_czas_sekundy_i <> 0 then

            prze³adowanie_procent_najwiêksze_nie_100_l := 0;

            for j_l := 0 to Length( statek_f.dzia³a_t[ i_l ].lufy_t ) - 1 do
              begin

                if statek_f.dzia³a_t[ i_l ].lufy_t[ j_l ].strza³_gotowoœæ then
                  Result := Result + ' *'
                else//if statek_f.dzia³a_t[ i_l ].lufy_t[ j_l ].strza³_gotowoœæ then
                  Result := Result + ' x';

                //Result := Result + ' ' + Trim(  FormatFloat( '### ### ##0', statek_f.dzia³a_t[ i_l ].lufy_t[ j_l ].prze³adowanie_procent )  ) + '%'; //???

                if    ( statek_f.dzia³a_t[ i_l ].lufy_t[ j_l ].prze³adowanie_procent <> 100 )
                  and ( prze³adowanie_procent_najwiêksze_nie_100_l < statek_f.dzia³a_t[ i_l ].lufy_t[ j_l ].prze³adowanie_procent ) then
                  prze³adowanie_procent_najwiêksze_nie_100_l := statek_f.dzia³a_t[ i_l ].lufy_t[ j_l ].prze³adowanie_procent;

              end;
            //---//for j_l := 0 to Length( statek_f.dzia³a_t[ i_l ].lufy_t ) - 1 do

            if prze³adowanie_procent_najwiêksze_nie_100_l <> 0 then
              Result := Result +
                ' ' + Trim(  FormatFloat( '### ### ##0', prze³adowanie_procent_najwiêksze_nie_100_l )  ) + '%';

            //Result := Result +
            //  ' ' + Trim(  FormatFloat( '### ### ##0', i_l + 1 )  ) + ' - ' + Trim(  FormatFloat( '### ### ##0', statek_f.dzia³a_t[ i_l ].amunicja_iloœæ )  );
            Result := Result +
              ' (' + Trim(  FormatFloat( '### ### ##0', statek_f.dzia³a_t[ i_l ].amunicja_iloœæ )  ) + ')';

          end;
        //---//for i_l := 0 to Length( Self.dzia³a_t ) - 1 do

        if uszkodzenia_broñ_licznik_l > 0 then
          uszkodzenia_opis_f := uszkodzenia_opis_f + '>';

      end;
    //---//if Length( statek_f.dzia³a_t ) > 0 then

    if Length( statek_f.je¿e_g³êbinowe_t ) > 0 then
      begin

        if Result <> '' then
          Result := Result + #13 + #10;

        Result := Result + odstêp_f;

        //if    ( not ar_Je¿e_G³êbinowe_CheckBox.Checked )
        //  and ( not ar_Wszystkie_CheckBox.Checked ) then
        if    ( not statek_f.amunicja_rodzaj_wybrana__je¿e_g³êbinowe )
          and ( not statek_f.amunicja_rodzaj_wybrana__wszystkie ) then
          Result := Result + '--- ';

        Result := Result +
          t³umaczenie_komunikaty_r.ekran_napis__uzbrojenie_opis__je¿e_g³êbinowe + ':';

        uszkodzenia_broñ_licznik_l := 0;

        for i_l := 0 to Length( statek_f.je¿e_g³êbinowe_t ) - 1 do
          begin

            if i_l > 0 then
              Result := Result + ', ';

            if statek_f.je¿e_g³êbinowe_t[ i_l ].uszkodzone_czas_sekundy_i <> 0 then
              begin

                zts_l := Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( statek_f.je¿e_g³êbinowe_t[ i_l ].uszkodzone_czas_sekundy_i )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s;


                Result := Result +
                  ' <' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__jeden_znak__u + ': ' + zts_l + '>';


                inc( uszkodzenia_broñ_licznik_l );

                if uszkodzenia_broñ_licznik_l = 1 then
                  uszkodzenia_opis_f := uszkodzenia_opis_f +
                  #13 + #10 +
                  odstêp_f + odstêp_f + '<' + t³umaczenie_komunikaty_r.ekran_napis__uzbrojenie_opis__je¿e_g³êbinowe + ': '
                else//if uszkodzenia_broñ_licznik_l = 1 then
                if uszkodzenia_broñ_licznik_l > 1 then
                  uszkodzenia_opis_f := uszkodzenia_opis_f + ', ';

                uszkodzenia_opis_f := uszkodzenia_opis_f + IntToStr( i_l + 1 ) + ': ' + zts_l;

              end;
            //---//if statek_f.je¿e_g³êbinowe_t[ i_l ].uszkodzone_czas_sekundy_i <> 0 then

            prze³adowanie_procent_najwiêksze_nie_100_l := 100; // Tutaj oznacza najmniejszy procent prze³adowania.

            for j_l := 0 to Length( statek_f.je¿e_g³êbinowe_t[ i_l ].lufy_t ) - 1 do
              begin

                //Result := Result + ' ' + Trim(  FormatFloat( '### ### ##0', statek_f.je¿e_g³êbinowe_t[ i_l ].lufy_t[ j_l ].prze³adowanie_procent )  ) + '%'; //???

                if    ( statek_f.je¿e_g³êbinowe_t[ i_l ].lufy_t[ j_l ].prze³adowanie_procent <> 100 )
                  and ( prze³adowanie_procent_najwiêksze_nie_100_l > statek_f.je¿e_g³êbinowe_t[ i_l ].lufy_t[ j_l ].prze³adowanie_procent ) then
                  prze³adowanie_procent_najwiêksze_nie_100_l := statek_f.je¿e_g³êbinowe_t[ i_l ].lufy_t[ j_l ].prze³adowanie_procent;

              end;
            //---//for j_l := 0 to Length( statek_f.je¿e_g³êbinowe_t[ i_l ].lufy_t ) - 1 do

            if prze³adowanie_procent_najwiêksze_nie_100_l = 100 then
              Result := Result + ' *'
            else//if prze³adowanie_procent_najwiêksze_nie_100_l = 100 then
              Result := Result + ' x';

            if prze³adowanie_procent_najwiêksze_nie_100_l <> 100 then
              Result := Result +
                ' ' + Trim(  FormatFloat( '### ### ##0', prze³adowanie_procent_najwiêksze_nie_100_l )  ) + '%';

            //Result := Result +
            //  ' ' + Trim(  FormatFloat( '### ### ##0', i_l + 1 )  ) + ' - ' + Trim(  FormatFloat( '### ### ##0', statek_f.je¿e_g³êbinowe_t[ i_l ].amunicja_iloœæ )  );
            Result := Result +
              ' (' + Trim(  FormatFloat( '### ### ##0', statek_f.je¿e_g³êbinowe_t[ i_l ].amunicja_iloœæ )  ) + ')';

          end;
        //---//for i_l := 0 to Length( Self.je¿e_g³êbinowe_t ) - 1 do

        if uszkodzenia_broñ_licznik_l > 0 then
          uszkodzenia_opis_f := uszkodzenia_opis_f + '>';

      end;
    //---//if Length( statek_f.je¿e_g³êbinowe_t ) > 0 then

    if Length( statek_f.torpedy_wyrzutnie_t ) > 0 then
      begin

        if Result <> '' then
          Result := Result + #13 + #10;

        Result := Result + odstêp_f;

        //if    ( not ar_Torpeda_CheckBox.Checked )
        //  and ( not ar_Wszystkie_CheckBox.Checked ) then
        if    ( not statek_f.amunicja_rodzaj_wybrana__torpeda )
          and ( not statek_f.amunicja_rodzaj_wybrana__wszystkie ) then
          Result := Result + '--- ';

        Result := Result +
          t³umaczenie_komunikaty_r.ekran_napis__uzbrojenie_opis__torpedy + ':';

        uszkodzenia_broñ_licznik_l := 0;

        for i_l := 0 to Length( statek_f.torpedy_wyrzutnie_t ) - 1 do
          begin

            if i_l > 0 then
              Result := Result + ', ';

            if statek_f.torpedy_wyrzutnie_t[ i_l ].uszkodzone_czas_sekundy_i <> 0 then
              begin

                zts_l := Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( statek_f.torpedy_wyrzutnie_t[ i_l ].uszkodzone_czas_sekundy_i )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s;


                Result := Result +
                  ' <' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__jeden_znak__u + ': ' + zts_l + '>';


                inc( uszkodzenia_broñ_licznik_l );

                if uszkodzenia_broñ_licznik_l = 1 then
                  uszkodzenia_opis_f := uszkodzenia_opis_f +
                  #13 + #10 +
                  odstêp_f + odstêp_f + '<' + t³umaczenie_komunikaty_r.ekran_napis__uzbrojenie_opis__torpedy + ': '
                else//if uszkodzenia_broñ_licznik_l = 1 then
                if uszkodzenia_broñ_licznik_l > 1 then
                  uszkodzenia_opis_f := uszkodzenia_opis_f + ', ';

                uszkodzenia_opis_f := uszkodzenia_opis_f + IntToStr( i_l + 1 ) + ': ' + zts_l;

              end;
            //---//if statek_f.torpedy_wyrzutnie_t[ i_l ].uszkodzone_czas_sekundy_i <> 0 then

            prze³adowanie_procent_najwiêksze_nie_100_l := 0;

            for j_l := 0 to Length( statek_f.torpedy_wyrzutnie_t[ i_l ].lufy_t ) - 1 do
              begin

                if statek_f.torpedy_wyrzutnie_t[ i_l ].lufy_t[ j_l ].strza³_gotowoœæ then
                  Result := Result + ' *'
                else//if statek_f.torpedy_wyrzutnie_t[ i_l ].lufy_t[ j_l ].strza³_gotowoœæ then
                  Result := Result + ' x';

                //Result := Result + ' ' + Trim(  FormatFloat( '### ### ##0', statek_f.torpedy_wyrzutnie_t[ i_l ].lufy_t[ j_l ].prze³adowanie_procent )  ) + '%'; //???

                if    ( statek_f.torpedy_wyrzutnie_t[ i_l ].lufy_t[ j_l ].prze³adowanie_procent <> 100 )
                  and ( prze³adowanie_procent_najwiêksze_nie_100_l < statek_f.torpedy_wyrzutnie_t[ i_l ].lufy_t[ j_l ].prze³adowanie_procent ) then
                  prze³adowanie_procent_najwiêksze_nie_100_l := statek_f.torpedy_wyrzutnie_t[ i_l ].lufy_t[ j_l ].prze³adowanie_procent;

              end;
            //---//for j_l := 0 to Length( statek_f.torpedy_wyrzutnie_t[ i_l ].lufy_t ) - 1 do

            if prze³adowanie_procent_najwiêksze_nie_100_l <> 0 then
              Result := Result +
                ' ' + Trim(  FormatFloat( '### ### ##0', prze³adowanie_procent_najwiêksze_nie_100_l )  ) + '%';

            //Result := Result +
            //  ' ' + Trim(  FormatFloat( '### ### ##0', i_l + 1 )  ) + ' - ' + Trim(  FormatFloat( '### ### ##0', statek_f.torpedy_wyrzutnie_t[ i_l ].amunicja_iloœæ )  );
            Result := Result +
              ' (' + Trim(  FormatFloat( '### ### ##0', statek_f.torpedy_wyrzutnie_t[ i_l ].amunicja_iloœæ )  ) + ')';

          end;
        //---//for i_l := 0 to Length( Self.torpedy_wyrzutnie_t ) - 1 do

        if uszkodzenia_broñ_licznik_l > 0 then
          uszkodzenia_opis_f := uszkodzenia_opis_f + '>';

      end;
    //---//if Length( statek_f.torpedy_wyrzutnie_t ) > 0 then
    {$endregion 'Opis uzbrojenia.'}

  end;//---//Funkcja Uzbrojenie_Opis().

const
  samolot_informacje_odstêp_c_l : string = '    ';
  statek_informacje_odstêp_c_l : string = ' ';
var
  zti : integer;
  ztr : real;
  zts,
  skrêt_kierunek,
  skrêt_kierunek_zadany,
  uszkodzenia_opis__samolot,
  uszkodzenia_opis__statek
    : string;
  zt_statek : TStatek;
begin//Funkcja Napis_Odœwie¿().

  // oczekiwanie_pomiñ_f = false - odœwie¿a napis je¿eli up³yn¹³ odpowiedni czas.
  // oczekiwanie_pomiñ_f = true - odœwie¿a napis niezale¿nie od up³ywu czasu.

  if    ( not oczekiwanie_pomiñ_f )
    and (  MilliSecondsBetween( Now(), napis_odœwie¿_zegar_pozorny_r.ostatnie_wywo³anie ) < napis_odœwie¿_zegar_pozorny_r.oczekiwanie_milisekundy  ) then
    Exit;


  Informacje_G³ówne_GLHUDText.Text := '';


  if not Fotograficzny_Tryb_CheckBox.Checked then
    begin

      zt_statek := statek_gracza;


      if Delta_Czasu_Wyœwietlaj_CheckBox.Checked then
        Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
          t³umaczenie_komunikaty_r.ekran_napis__delta_czasu + ': ' + Trim(  FormatFloat( '### ### ##0.### ### ###', delta_czasu_f )  ) + #13 + #10;

      if Klatek_Na_Sekundê_Wyœwietlaj_CheckBox.Checked then
        Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
          Format( t³umaczenie_komunikaty_r.ekran_napis__gra + ' %.1f ' + t³umaczenie_komunikaty_r.ekran_napis__klatek_na_sekundê__skrót, [ Gra_GLSceneViewer.FramesPerSecond ] ) + #13 + #10 +
          Format( t³umaczenie_komunikaty_r.ekran_napis__radar + ' %.1f ' + t³umaczenie_komunikaty_r.ekran_napis__klatek_na_sekundê__skrót, [ Radar_GLSceneViewer.FramesPerSecond ] ) + #13 + #10;

      if czy_pauza_g then
        Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
          '          ' + t³umaczenie_komunikaty_r.ekran_napis__pauza + #13 + #10 + #13 + #10;
      //else//if czy_pauza_g then
      //  Informacje_G³ówne_GLHUDText.Text := '';


      if zt_statek <> nil then
        begin

          ró¿a_wiatrów_statek := Ró¿a_Wiatrów( zt_statek.AbsoluteDirection );


          if zt_statek.si__statek_gracza__p³ywa then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              statek_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__si + ' ~~ ' +
              zt_statek.Si_Aktywnoœæ_Aktualna_Nazwa( t³umaczenie_komunikaty_r ) +
              ' / ' + zt_statek.Si_Strzelanie_Tryb_Aktualny_Nazwa( t³umaczenie_komunikaty_r ) +
              #13 + #10;

          if    ( samolot__statek_gracza <> nil )
            and ( samolot__statek_gracza.si__statek_gracza__p³ywa ) then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              statek_informacje_odstêp_c_l + '^ ' + t³umaczenie_komunikaty_r.ekran_napis__si + ' ~~ ' +
              samolot__statek_gracza.Si_Aktywnoœæ_Aktualna_Nazwa( t³umaczenie_komunikaty_r ) +
              ' / ' + samolot__statek_gracza.Si_Strzelanie_Tryb_Aktualny_Nazwa( t³umaczenie_komunikaty_r ) +
              #13 + #10;

          if zt_statek.si__statek_gracza__strzela <> sisgs_Nie then
            begin

              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                statek_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__si_strzela;

              if SI__Strzela__Statek_Gracza_RadioGroup.ItemIndex > 1 then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  ' ' + SI__Strzela__Statek_Gracza_RadioGroup.Items[ SI__Strzela__Statek_Gracza_RadioGroup.ItemIndex ];

              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                #13 + #10;

            end;
          //---//if zt_statek.si__statek_gracza__strzela <> sisgs_Nie then


          Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
            statek_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__¿ycie + ': ' + Trim(  FormatFloat( '### ### ##0', zt_statek.punkty_¿ycia_aktualne )  ) + ' / ' + Trim(  FormatFloat( '### ### ##0', zt_statek.punkty_¿ycia_maksymalne )  ) + ' (' + Trim(  FormatFloat( '### ### ##0', zt_statek.punkty_¿ycia_procent_zosta³o )  ) + '%)';

          if   (
                     ( zt_statek.czy_lotniskowiec )
                 and ( zt_statek.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 )
                 and ( zt_statek.id_statek__lotniskowiec__ma_samolot_na_pok³adzie = -99 )
               )
            or (
                     ( zt_statek.czy_samolot )
                 and ( zt_statek.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 )
               ) then
            begin

              if zt_statek.czy_samolot then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  ' ' + t³umaczenie_komunikaty_r.ekran_napis__l¹duj_na
              else//if zt_statek.czy_samolot then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  ' ' + t³umaczenie_komunikaty_r.ekran_napis__l¹duje;

              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                ' ' + Gracz_Nazwa_ZnajdŸ( zt_statek.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie ) + ', ' + t³umaczenie_komunikaty_r.ekran_napis__id_st + ': ' + Trim(  FormatFloat( '### ### ##0', zt_statek.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie )  );

            end;
          //---//if   ( (...)

          if    (
                     ( zt_statek.czy_samolot )
                  or ( zt_statek.czy_lotniskowiec )
                )
            and ( zt_statek.czy_samolot__na_lotniskowcu ) then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              ' -v-';

          if    (
                     ( zt_statek.czy_samolot )
                  or ( zt_statek.czy_lotniskowiec )
                )
            and ( L¹dowanie_U³atwione_CheckBox.Checked ) then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              ' [' + t³umaczenie_komunikaty_r.ekran_napis__l¹dowanie_u³atwione + ']';

          if gracz_tryb_g = gt_Samolot then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              ' --^--';

          if samolot__statek_gracza <> nil then
            begin

              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                #13 + #10 +
                statek_informacje_odstêp_c_l + '^ ' + t³umaczenie_komunikaty_r.ekran_napis__¿ycie + ': ' + Trim(  FormatFloat( '### ### ##0', samolot__statek_gracza.punkty_¿ycia_aktualne )  ) + ' / ' + Trim(  FormatFloat( '### ### ##0', samolot__statek_gracza.punkty_¿ycia_maksymalne )  ) + ' (' + Trim(  FormatFloat( '### ### ##0', samolot__statek_gracza.punkty_¿ycia_procent_zosta³o )  ) + '%)';

              if samolot__statek_gracza.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  ' ' + t³umaczenie_komunikaty_r.ekran_napis__l¹duj_na + ' ' + Gracz_Nazwa_ZnajdŸ( samolot__statek_gracza.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie ) + ', ' + t³umaczenie_komunikaty_r.ekran_napis__id_st + ': ' + Trim(  FormatFloat( '### ### ##0', samolot__statek_gracza.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie )  );

            end;
          //---//if samolot__statek_gracza <> nil then

          Skrêt_Kierunek_Symbol( zt_statek, skrêt_kierunek, skrêt_kierunek_zadany );

          Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
            #13 + #10 +
            statek_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__prêdkoœæ + ' %: ' + Trim(  FormatFloat( '### ### ##0', zt_statek.prêdkoœæ_zadana_procent )  ) + ' (' + Trim(  FormatFloat( '### ### ##0', zt_statek.prêdkoœæ_aktualna_procent__wzglêdny )  ) + ') ' + Trim(  FormatFloat( '### ### ##0.00', zt_statek.prêdkoœæ_aktualna )  );

          //if zt_statek.uszkodzone_czas_sekundy_i__œruba <> 0 then
          //  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
          //    ' <' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__jeden_znak__u + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( zt_statek.uszkodzone_czas_sekundy_i__œruba )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';

          Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
            #13 + #10 +
            statek_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__ster + ' %: ' + skrêt_kierunek_zadany + ' ' + Trim(   FormatFloat(  '### ### ##0', Abs( zt_statek.skrêt_zadany_procent )  )   ) + ' (' +  skrêt_kierunek + ' ' + Trim(   FormatFloat(  '### ### ##0', Abs( zt_statek.skrêt_aktualny_procent )  )   ) + ')' +
            ', ' + t³umaczenie_komunikaty_r.ekran_napis__busola + ': ' + ró¿a_wiatrów_statek;

          //if zt_statek.uszkodzone_czas_sekundy_i__ster <> 0 then
          //  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
          //    ' <' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__ster + ' ' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__jeden_znak__u + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( zt_statek.uszkodzone_czas_sekundy_i__ster )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';
          //
          //if zt_statek.uszkodzone_czas_sekundy_i__radar <> 0 then
          //  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
          //    ' <' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__radar + ' ' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__jeden_znak__u + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( zt_statek.uszkodzone_czas_sekundy_i__radar )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';
          //
          //if zt_statek.uszkodzone_czas_sekundy_i__radio <> 0 then
          //  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
          //    ' <' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__radio + ' ' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__jeden_znak__u + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( zt_statek.uszkodzone_czas_sekundy_i__radio )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';
          //
          //if zt_statek.uszkodzone_czas_sekundy_i__sonar <> 0 then
          //  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
          //    ' <' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__sonar + ' ' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__jeden_znak__u + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( zt_statek.uszkodzone_czas_sekundy_i__sonar )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';
          //
          //if zt_statek.uszkodzone_czas_sekundy_i__kotwica <> 0 then
          //  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
          //    ' <' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__kotwica + ' ' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__jeden_znak__u + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( zt_statek.uszkodzone_czas_sekundy_i__kotwica )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';

          Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
             #13 + #10;

          if zt_statek.czy_zanurzanie then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              statek_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__zanurzenie
          else//if zt_statek.czy_zanurzanie then
          if zt_statek.czy_samolot then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              statek_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__pu³ap;

          if   ( zt_statek.czy_samolot )
            or ( zt_statek.czy_zanurzanie ) then
            begin

              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                ' %';

              if    ( zt_statek.czy_zanurzanie )
                and ( zt_statek.zanurzenie_zadane_przekraczaj_100_procent ) then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  '+';

              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                ': ';

            end;
          //---//if   ( zt_statek.czy_samolot ) (...)


          if zt_statek.czy_samolot then
            begin

              if zt_statek.zanurzenie_pu³ap__zadane_procent < 0 then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  'v '
              else//if zt_statek.zanurzenie_pu³ap__zadane_procent < 0 then
              if zt_statek.zanurzenie_pu³ap__zadane_procent > 0 then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  '^ ';
            end;
          //---//if zt_statek.czy_samolot then

          if   ( zt_statek.czy_samolot )
            or ( zt_statek.czy_zanurzanie ) then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              Trim(  FormatFloat( '### ### ##0', zt_statek.zanurzenie_pu³ap__zadane_procent )  );

          //if zt_statek.czy_zanurzanie then
          if   ( zt_statek.czy_samolot )
            or ( zt_statek.czy_zanurzanie ) then
            begin

              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                ' (' + Trim(  FormatFloat( '### ### ##0', zt_statek.zanurzenie_pu³ap__aktualne_procent )  );

              if   ( zt_statek.czy_zanurzanie )
                and ( zt_statek.zanurzenie_pu³ap__aktualne_procent >= 125 ) then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  '!';

              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                ')';

            end;
          //---//if   ( zt_statek.czy_samolot ) (...)

          if zt_statek.czy_samolot then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              '  ';

          if   ( zt_statek.czy_samolot )
            or ( zt_statek.czy_zanurzanie ) then
            begin

              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                ' ' + Trim(  FormatFloat( '### ### ##0.000', zt_statek.zanurzenie_pu³ap__aktualne )  );

              if    ( not zt_statek.czy_samolot )
                and ( zt_statek.Zanurzenie_Peryskopowe__Utrzymywane() ) then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  ' [-' + t³umaczenie_komunikaty_r.ekran_napis__zanurzenie__peryskopowe__utrzymywane__jeden_znak + '-]';

              //if    ( not zt_statek.czy_samolot )
              //  and ( zt_statek.Zanurzenie_Peryskopowe__Przekroczone() ) then
              //  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              //    ' [-x-]';

              //if zt_statek.uszkodzone_czas_sekundy_i__ster_g³êbokoœci <> 0 then
              //  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              //    ' <' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__jeden_znak__u + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( zt_statek.uszkodzone_czas_sekundy_i__ster_g³êbokoœci )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';

              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                #13 + #10;

            end;
          //---//if   ( zt_statek.czy_samolot ) (...)


          if    ( zt_statek.czy_samolot )
            and ( zt_statek.czy_samolot__na_lotniskowcu ) then
            begin

              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                statek_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__katapulta + ': ';

              if zt_statek.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent = -100 then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  t³umaczenie_komunikaty_r.ekran_napis__katapulta__uruchomiona
              else//if zt_statek.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent = -100 then
              if zt_statek.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent = -1 then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  t³umaczenie_komunikaty_r.ekran_napis__katapulta__oczekiwanie
              else//if zt_statek.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent = -1 then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  Trim(  FormatFloat( '### ### ##0', zt_statek.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent )  ) + ' % ' + t³umaczenie_komunikaty_r.ekran_napis__postêp__z + ' ' + Trim(  FormatFloat( '### ### ##0.00', zt_statek.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie_czas_milisekundy * 0.001 )  ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s;


              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                ' ' + t³umaczenie_komunikaty_r.ekran_napis__k¹t + ' ' + Trim(  FormatFloat( '### ### ##0', zt_statek.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__k¹t )  );

              if zt_statek.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__k¹t > samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  ' x';

              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                #13 + #10;


              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                statek_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__odnawiania_zasobów + ': ';

              if zt_statek.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent = -2 then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  t³umaczenie_komunikaty_r.ekran_napis__odnawiania_zasobów__oczekiwanie
              else//if zt_statek.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent = -2 then
              if zt_statek.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent = -1 then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  t³umaczenie_komunikaty_r.ekran_napis__odnawiania_zasobów__wznawianie
              else//if zt_statek.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent = -1 then
              if zt_statek.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent = lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__nie_znaleziono_zasobów_do_odnowienia_c then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  t³umaczenie_komunikaty_r.ekran_napis__odnawiania_zasobów__zakoñczono
              else//if zt_statek.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent = lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__nie_znaleziono_zasobów_do_odnowienia_c then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  Trim(  FormatFloat( '### ### ##0', zt_statek.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent )  ) + ' % ' + t³umaczenie_komunikaty_r.ekran_napis__postêp__z + ' ' + Trim(  FormatFloat( '### ### ##0.00', zt_statek.lotniskowiec__zasoby_odnawianie__prze³adowanie_czas_milisekundy * 0.001 )  ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s;

              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                #13 + #10;


              if not czy_klient_g then
                begin

                  if    ( zt_statek.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent = lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__nie_znaleziono_zasobów_do_odnowienia_c )
                    and ( zt_statek.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__dŸwiêki__kopia <> zt_statek.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent ) then
                    begin

                      zt_statek.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__dŸwiêki__kopia := zt_statek.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent;

                      DŸwiêki__Komunikat__Utwórz_Jeden( dkr_Odnawianie_Zasobów_Zakoñczone, 0 );

                    end;
                  //---//if    ( zt_statek.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent = lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__nie_znaleziono_zasobów_do_odnowienia_c ) (...)

                  if    ( zt_statek.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent = prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__katapult_jest_gotowa_do_uruchomienia_c )
                    and ( zt_statek.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__dŸwiêki__kopia <> zt_statek.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent ) then
                    begin

                      zt_statek.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__dŸwiêki__kopia := zt_statek.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent;

                      DŸwiêki__Komunikat__Utwórz_Jeden( dkr_Lotniskowiec_Katapulta_Gotowa, 0 );

                    end;
                  //---//if    ( zt_statek.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent = prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__katapult_jest_gotowa_do_uruchomienia_c ) (...)

                end;
              //---//if not czy_klient_g then

            end;
          //---//if    ( zt_statek.czy_samolot ) (...)


          Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
            statek_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__lufy_podnoœ__skrót + ' ';

          if zt_statek.podnoœ_lufy then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              'v'
          else//if zt_statek.podnoœ_lufy then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              'x';

          if zt_statek.podnoœ_lufy__na_k¹t_wyznaczony then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              '|';


          Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
            ' ' + t³umaczenie_komunikaty_r.ekran_napis__dzia³a_obracaj__skrót + ' ' ;

          if zt_statek.obracaj_dzia³a then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              'v'
          else//if zt_statek.obracaj_dzia³a then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              'x';

          if zt_statek.obracaj_dzia³a__na_k¹t_wyznaczony then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              '|';


          Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
            ' ' + t³umaczenie_komunikaty_r.ekran_napis__broñ_indeks_zmieniaj__skrót + ' ' ;

          if zt_statek.broñ_indeks_zmieniaj then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              'v'
          else//if zt_statek.broñ_indeks_zmieniaj then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              'x';


          zts := Uzbrojenie_Opis( zt_statek, uszkodzenia_opis__statek, statek_informacje_odstêp_c_l );

          if zts <> '' then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              #13 + #10 +
              zts;


          Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
            Kotwica_Napisy( zt_statek, statek_informacje_odstêp_c_l );


          if    ( Lotniskowiec_Samolot_L¹dowanie_Informacje_CheckBox.Checked )
            and ( zt_statek.czy_lotniskowiec ) then
            begin

              zts := Gracz_Nazwa_ZnajdŸ( zt_statek.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie );

              if zts <> '' then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  #13 + #10 +
                  statek_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__samolot__l¹dowanie + ': ' +
                  zts;

              zts := Gracz_Nazwa_ZnajdŸ( zt_statek.id_statek__lotniskowiec__ma_samolot_na_pok³adzie );

              if zts <> '' then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  #13 + #10 +
                  statek_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__samolot__na_pok³adzie + ': ' +
                  zts;

            end;
          //---//if    ( Lotniskowiec_Samolot_L¹dowanie_Informacje_CheckBox.Checked ) ()


          if Dalmierz_CheckBox.Checked then
            begin

              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                #13 + #10 +
                statek_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__dalmierz + ' ';

              if Dalmierz_Tryb_RadioGroup.ItemIndex = 0 then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  t³umaczenie_komunikaty_r.ekran_napis__dalmierz__kamera + ': ' + Trim(   FormatFloat(  '### ### ##0.000', Gra_GLCamera.DistanceTo( Celowniczy_GLDummyCube.AbsolutePosition )  )   ) + '.'
              else//if Dalmierz_Tryb_RadioGroup.ItemIndex = 0 then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  t³umaczenie_komunikaty_r.ekran_napis__dalmierz__statek + ': ' + Trim(   FormatFloat(  '### ### ##0.000', zt_statek.DistanceTo( Celowniczy_GLDummyCube.AbsolutePosition )  )   ) + '.';

            end;
          //---//if Dalmierz_CheckBox.Checked then


          if Punkt_Naprowadzaj__Odleg³oœæ_Do_Punktu_Prezentuj_CheckBox.Checked then
            begin

              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                #13 + #10 +
                statek_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__naprowadzanie + ': ';

              //if Statek_Gracza__Gracz_Tryb_Zwróæ() <> nil then
              //  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              //    Trim(   FormatFloat(  '### ### ##0.000', Statek_Gracza__Gracz_Tryb_Zwróæ().DistanceTo( Punkt_Naprowadzaj_GLDummyCube.AbsolutePosition )  )   ) + '.'
              //else//if Statek_Gracza__Gracz_Tryb_Zwróæ() <> nil then
              //  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              //    '<brak danych>.';

              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                Trim(   FormatFloat(  '### ### ##0.000', zt_statek.DistanceTo( Punkt_Naprowadzaj_GLDummyCube.AbsolutePosition )  )   ) + '.';

            end;
          //---//if Punkt_Naprowadzaj__Odleg³oœæ_Do_Punktu_Prezentuj_CheckBox.Checked then


          if zt_statek.punkty_¿ycia_aktualne <= 0 then
            begin

              if Statki_Przywracaj_Do_Gry_CheckBox.Checked then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  #13 + #10 +
                  statek_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__odnowienie + ' ' +
                  Trim(   FormatFloat(  '### ### ##0.00', Czas_Miêdzy_W_Sekundach( zt_statek.toniêcie__czas_sekundy_i )  )   ) +
                  ' ' + t³umaczenie_komunikaty_r.ekran_napis__postêp__z + ' ' +
                  Trim(  FormatFloat( '### ### ##0.00', oczekiwanie_na__odnowienie_statku__czas_sekundy_g )  ) +
                  ' [' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + ']';

              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                #13 + #10 +
                statek_informacje_odstêp_c_l + statek_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__czas_gry + ' ' + zt_statek.statek__czas_do_zatoniêcia_s + ' [' + t³umaczenie_komunikaty_r.ekran_napis__czas_gry__jednostka + ']';

            end
          else//if zt_statek.punkty_¿ycia_aktualne <= 0 then
            if zt_statek.schemat_samolot_zmiana_czas_sekundy_i <> 0 then
              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text + // Taka sytuacja nie powinna mieæ miejsca.
                #13 + #10 +
                statek_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__zmiana_samolotu + ' ' +
                Trim(   FormatFloat(  '### ### ##0.00', Czas_Miêdzy_W_Sekundach( zt_statek.schemat_samolot_zmiana_czas_sekundy_i )  )   ) +
                ' ' + t³umaczenie_komunikaty_r.ekran_napis__postêp__z + ' ' +
                Trim(  FormatFloat( '### ### ##0.00', oczekiwanie_na__odnowienie_statku__czas_sekundy_g )  ) +
                ' [' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + ']';


          if samolot__statek_gracza <> nil then
            begin

              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                #13 + #10 +
                statek_informacje_odstêp_c_l + '^ ' + t³umaczenie_komunikaty_r.ekran_napis__prêdkoœæ + ' %: ' + Trim(  FormatFloat( '### ### ##0', samolot__statek_gracza.prêdkoœæ_zadana_procent )  ) + ' (' + Trim(  FormatFloat( '### ### ##0', samolot__statek_gracza.prêdkoœæ_aktualna_procent__wzglêdny )  ) + ') ' + Trim(  FormatFloat( '### ### ##0.00', samolot__statek_gracza.prêdkoœæ_aktualna )  );


              if samolot__statek_gracza.czy_samolot__na_lotniskowcu then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  ' -v-';

              //if samolot__statek_gracza.uszkodzone_czas_sekundy_i__œruba <> 0 then
              //  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              //    ' <' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__jeden_znak__u + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( samolot__statek_gracza.uszkodzone_czas_sekundy_i__œruba )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';

              Skrêt_Kierunek_Symbol( samolot__statek_gracza, skrêt_kierunek, skrêt_kierunek_zadany );

              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                #13 + #10 +
                samolot_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__ster + ' %: ' + skrêt_kierunek_zadany + ' ' + Trim(   FormatFloat(  '### ### ##0', Abs( samolot__statek_gracza.skrêt_zadany_procent )  )   ) + ' (' +  skrêt_kierunek + ' ' + Trim(   FormatFloat(  '### ### ##0', Abs( samolot__statek_gracza.skrêt_aktualny_procent )  )   ) + ') ' +
                ', ' + t³umaczenie_komunikaty_r.ekran_napis__busola + ': ' + Ró¿a_Wiatrów( samolot__statek_gracza.AbsoluteDirection );

              //if samolot__statek_gracza.uszkodzone_czas_sekundy_i__ster <> 0 then
              //  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              //    ' <' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__ster + ' ' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__jeden_znak__u + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( samolot__statek_gracza.uszkodzone_czas_sekundy_i__ster )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';
              //
              //if samolot__statek_gracza.uszkodzone_czas_sekundy_i__radar <> 0 then
              //  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              //    ' <' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__radar + ' ' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__jeden_znak__u + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( samolot__statek_gracza.uszkodzone_czas_sekundy_i__radar )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';
              //
              //if samolot__statek_gracza.uszkodzone_czas_sekundy_i__radio <> 0 then
              //  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              //    ' <' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__radio + ' ' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__jeden_znak__u + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( samolot__statek_gracza.uszkodzone_czas_sekundy_i__radio )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';
              //
              //if samolot__statek_gracza.uszkodzone_czas_sekundy_i__sonar <> 0 then
              //  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              //    ' <' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__sonar + ' ' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__jeden_znak__u + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( samolot__statek_gracza.uszkodzone_czas_sekundy_i__sonar )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';
              //
              //if samolot__statek_gracza.uszkodzone_czas_sekundy_i__kotwica <> 0 then
              //  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              //    ' <' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__kotwica + ' ' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__jeden_znak__u + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( samolot__statek_gracza.uszkodzone_czas_sekundy_i__kotwica )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';

              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                #13 + #10 +
                samolot_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__pu³ap + ' %: ';

              if samolot__statek_gracza.zanurzenie_pu³ap__zadane_procent < 0 then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  'v '
              else//if samolot__statek_gracza.zanurzenie_pu³ap__zadane_procent < 0 then
              if samolot__statek_gracza.zanurzenie_pu³ap__zadane_procent > 0 then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  '^ ';

              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                Trim(  FormatFloat( '### ### ##0', samolot__statek_gracza.zanurzenie_pu³ap__zadane_procent )  ) + ' (' + Trim(  FormatFloat( '### ### ##0', samolot__statek_gracza.zanurzenie_pu³ap__aktualne_procent )  ) + ') ' + Trim(  FormatFloat( '### ### ##0.000', samolot__statek_gracza.zanurzenie_pu³ap__aktualne )  );

              //if samolot__statek_gracza.uszkodzone_czas_sekundy_i__ster_g³êbokoœci <> 0 then
              //  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              //    ' <' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__jeden_znak__u + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( samolot__statek_gracza.uszkodzone_czas_sekundy_i__ster_g³êbokoœci )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';


              if Punkt_Naprowadzaj__Odleg³oœæ_Do_Punktu_Prezentuj_CheckBox.Checked then
                begin

                  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                    #13 + #10 +
                    samolot_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__naprowadzanie + ': ';

                  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                    Trim(   FormatFloat(  '### ### ##0.000', samolot__statek_gracza.DistanceTo( Punkt_Naprowadzaj_GLDummyCube.AbsolutePosition )  )   ) + '.';

                end;
              //---//if Punkt_Naprowadzaj__Odleg³oœæ_Do_Punktu_Prezentuj_CheckBox.Checked then


              if samolot__statek_gracza.czy_samolot__na_lotniskowcu then
                begin

                  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                    #13 + #10 +
                    samolot_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__katapulta + ': ';

                  if samolot__statek_gracza.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent = -100 then
                    Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                      t³umaczenie_komunikaty_r.ekran_napis__katapulta__uruchomiona
                  else//if samolot__statek_gracza.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent = -100 then
                  if samolot__statek_gracza.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent = -1 then
                    Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                      t³umaczenie_komunikaty_r.ekran_napis__katapulta__oczekiwanie
                  else//if samolot__statek_gracza.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent = -1 then
                    Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                      Trim(  FormatFloat( '### ### ##0', samolot__statek_gracza.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent )  ) + ' % ' + t³umaczenie_komunikaty_r.ekran_napis__postêp__z + ' ' + Trim(  FormatFloat( '### ### ##0.00', samolot__statek_gracza.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie_czas_milisekundy * 0.001 )  ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s;


                  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                    ' ' + t³umaczenie_komunikaty_r.ekran_napis__k¹t + ' ' + Trim(  FormatFloat( '### ### ##0', samolot__statek_gracza.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__k¹t )  );

                  if samolot__statek_gracza.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__k¹t > samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c then
                    Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                      ' x';

                  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                    #13 + #10 +
                    samolot_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__odnawiania_zasobów + ': ';

                  if samolot__statek_gracza.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent = -2 then
                    Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                      t³umaczenie_komunikaty_r.ekran_napis__odnawiania_zasobów__oczekiwanie
                  else//if samolot__statek_gracza.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent = -2 then
                  if samolot__statek_gracza.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent = -1 then
                    Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                      t³umaczenie_komunikaty_r.ekran_napis__odnawiania_zasobów__wznawianie
                  else//if samolot__statek_gracza.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent = -1 then
                  if samolot__statek_gracza.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent = lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__nie_znaleziono_zasobów_do_odnowienia_c then
                    Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                      t³umaczenie_komunikaty_r.ekran_napis__odnawiania_zasobów__zakoñczono
                  else//if samolot__statek_gracza.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent = lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__nie_znaleziono_zasobów_do_odnowienia_c then
                    Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                      Trim(  FormatFloat( '### ### ##0', samolot__statek_gracza.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent )  ) + ' % ' + t³umaczenie_komunikaty_r.ekran_napis__postêp__z + ' ' + Trim(  FormatFloat( '### ### ##0.00', samolot__statek_gracza.lotniskowiec__zasoby_odnawianie__prze³adowanie_czas_milisekundy * 0.001 )  ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s;


                  if not czy_klient_g then
                    begin

                      if    ( samolot__statek_gracza.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent = lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__nie_znaleziono_zasobów_do_odnowienia_c )
                        and ( samolot__statek_gracza.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__dŸwiêki__kopia <> samolot__statek_gracza.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent ) then
                        begin

                          samolot__statek_gracza.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__dŸwiêki__kopia := samolot__statek_gracza.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent;

                          DŸwiêki__Komunikat__Utwórz_Jeden( dkr_Odnawianie_Zasobów_Zakoñczone, 0 );

                        end;
                      //---//if    ( samolot__statek_gracza.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent = lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__nie_znaleziono_zasobów_do_odnowienia_c ) (...)

                      if    ( samolot__statek_gracza.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent = prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__katapult_jest_gotowa_do_uruchomienia_c )
                        and ( samolot__statek_gracza.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__dŸwiêki__kopia <> samolot__statek_gracza.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent ) then
                        begin

                          samolot__statek_gracza.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__dŸwiêki__kopia := samolot__statek_gracza.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent;

                          DŸwiêki__Komunikat__Utwórz_Jeden( dkr_Lotniskowiec_Katapulta_Gotowa, 0 );

                        end;
                      //---//if    ( samolot__statek_gracza.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent = prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__katapult_jest_gotowa_do_uruchomienia_c ) (...)

                    end;
                  //---//if not czy_klient_g then

                end;
              //---//if samolot__statek_gracza.czy_samolot__na_lotniskowcu then


              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                #13 + #10 +
                samolot_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__lufy_podnoœ__skrót + ' ';

              if samolot__statek_gracza.podnoœ_lufy then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  'v'
              else//if samolot__statek_gracza.podnoœ_lufy then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  'x';

              if samolot__statek_gracza.podnoœ_lufy__na_k¹t_wyznaczony then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  '|';


              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                ' ' + t³umaczenie_komunikaty_r.ekran_napis__dzia³a_obracaj__skrót + ' ' ;

              if samolot__statek_gracza.obracaj_dzia³a then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  'v'
              else//if samolot__statek_gracza.obracaj_dzia³a then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  'x';

              if samolot__statek_gracza.obracaj_dzia³a__na_k¹t_wyznaczony then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  '|';


              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                ' ' + t³umaczenie_komunikaty_r.ekran_napis__broñ_indeks_zmieniaj__skrót + ' ' ;

              if samolot__statek_gracza.broñ_indeks_zmieniaj then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  'v'
              else//if samolot__statek_gracza.broñ_indeks_zmieniaj then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  'x';


              zts := Uzbrojenie_Opis( samolot__statek_gracza, uszkodzenia_opis__samolot, samolot_informacje_odstêp_c_l );

              if zts <> '' then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  #13 + #10 +
                  zts;


              Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                Kotwica_Napisy( samolot__statek_gracza, samolot_informacje_odstêp_c_l );


              if samolot__statek_gracza.punkty_¿ycia_aktualne <= 0 then
                begin

                  if Statki_Przywracaj_Do_Gry_CheckBox.Checked then
                    Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                      #13 + #10 +
                      samolot_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__odnowienie + ' ' +
                      Trim(   FormatFloat(  '### ### ##0.00', Czas_Miêdzy_W_Sekundach( samolot__statek_gracza.toniêcie__czas_sekundy_i )  )   ) +
                      ' ' + t³umaczenie_komunikaty_r.ekran_napis__postêp__z + ' ' +
                      Trim(  FormatFloat( '### ### ##0.00', oczekiwanie_na__odnowienie_statku__czas_sekundy_g )  ) +
                      ' [' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + ']';

                  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                    #13 + #10 +
                    samolot_informacje_odstêp_c_l + samolot_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__czas_gry + ' ' + samolot__statek_gracza.statek__czas_do_zatoniêcia_s + ' [' + t³umaczenie_komunikaty_r.ekran_napis__czas_gry__jednostka + ']';

                end
              else//if samolot__statek_gracza.punkty_¿ycia_aktualne <= 0 then
                if samolot__statek_gracza.schemat_samolot_zmiana_czas_sekundy_i <> 0 then
                  Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                    #13 + #10 +
                    samolot_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__zmiana_samolotu + ' ' +
                    Trim(   FormatFloat(  '### ### ##0.00', Czas_Miêdzy_W_Sekundach( samolot__statek_gracza.schemat_samolot_zmiana_czas_sekundy_i )  )   ) +
                    ' ' + t³umaczenie_komunikaty_r.ekran_napis__postêp__z + ' ' +
                    Trim(  FormatFloat( '### ### ##0.00', oczekiwanie_na__odnowienie_statku__czas_sekundy_g )  ) +
                    ' [' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + ']';

            end;
          //---//if samolot__statek_gracza <> nil then


          if   ( zt_statek.uszkodzone_czas_sekundy_i__kotwica <> 0 )
            or ( zt_statek.uszkodzone_czas_sekundy_i__radar <> 0 )
            or ( zt_statek.uszkodzone_czas_sekundy_i__radio <> 0 )
            or ( zt_statek.uszkodzone_czas_sekundy_i__sonar <> 0 )
            or ( zt_statek.uszkodzone_czas_sekundy_i__ster <> 0 )
            or ( zt_statek.uszkodzone_czas_sekundy_i__œruba <> 0 )
            or (
                     (
                          ( zt_statek.czy_samolot )
                       or ( zt_statek.czy_zanurzanie )
                     )
                 and ( zt_statek.uszkodzone_czas_sekundy_i__ster_g³êbokoœci <> 0 )
               )
            or ( uszkodzenia_opis__statek <> '') then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              #13 + #10 +
              statek_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia;


          if zt_statek.uszkodzone_czas_sekundy_i__œruba <> 0 then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              #13 + #10 +
              statek_informacje_odstêp_c_l + statek_informacje_odstêp_c_l + '<' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__œruba + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( zt_statek.uszkodzone_czas_sekundy_i__œruba )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';

          if zt_statek.uszkodzone_czas_sekundy_i__ster <> 0 then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              #13 + #10 +
              statek_informacje_odstêp_c_l + statek_informacje_odstêp_c_l + '<' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__ster + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( zt_statek.uszkodzone_czas_sekundy_i__ster )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';

          if zt_statek.uszkodzone_czas_sekundy_i__radar <> 0 then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              #13 + #10 +
              statek_informacje_odstêp_c_l + statek_informacje_odstêp_c_l + '<' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__radar + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( zt_statek.uszkodzone_czas_sekundy_i__radar )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';

          if zt_statek.uszkodzone_czas_sekundy_i__radio <> 0 then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              #13 + #10 +
              statek_informacje_odstêp_c_l + statek_informacje_odstêp_c_l + '<' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__radio + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( zt_statek.uszkodzone_czas_sekundy_i__radio )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';

          if zt_statek.uszkodzone_czas_sekundy_i__sonar <> 0 then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              #13 + #10 +
              statek_informacje_odstêp_c_l + statek_informacje_odstêp_c_l + '<' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__sonar + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( zt_statek.uszkodzone_czas_sekundy_i__sonar )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';

          if zt_statek.uszkodzone_czas_sekundy_i__kotwica <> 0 then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              #13 + #10 +
              statek_informacje_odstêp_c_l + statek_informacje_odstêp_c_l + '<' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__kotwica + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( zt_statek.uszkodzone_czas_sekundy_i__kotwica )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';

          if   ( zt_statek.czy_samolot )
            or ( zt_statek.czy_zanurzanie ) then
            begin

              if zt_statek.uszkodzone_czas_sekundy_i__ster_g³êbokoœci <> 0 then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  #13 + #10 +
                  statek_informacje_odstêp_c_l + statek_informacje_odstêp_c_l + '<' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__ster_g³êbokoœci + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( zt_statek.uszkodzone_czas_sekundy_i__ster_g³êbokoœci )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';

            end;
          //---//if   ( zt_statek.czy_samolot ) (...)

          if uszkodzenia_opis__statek <> '' then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              uszkodzenia_opis__statek;


          if samolot__statek_gracza <> nil then
            begin

              if   ( samolot__statek_gracza.uszkodzone_czas_sekundy_i__kotwica <> 0 )
                or ( samolot__statek_gracza.uszkodzone_czas_sekundy_i__radar <> 0 )
                or ( samolot__statek_gracza.uszkodzone_czas_sekundy_i__radio <> 0 )
                or ( samolot__statek_gracza.uszkodzone_czas_sekundy_i__sonar <> 0 )
                or ( samolot__statek_gracza.uszkodzone_czas_sekundy_i__ster <> 0 )
                or ( samolot__statek_gracza.uszkodzone_czas_sekundy_i__œruba <> 0 )
                or (
                         (
                              ( samolot__statek_gracza.czy_samolot )
                           or ( samolot__statek_gracza.czy_zanurzanie )
                         )
                     and ( samolot__statek_gracza.uszkodzone_czas_sekundy_i__ster_g³êbokoœci <> 0 )
                   )
                or ( uszkodzenia_opis__samolot <> '' ) then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  #13 + #10 +
                  samolot_informacje_odstêp_c_l + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia_samolot;

              if samolot__statek_gracza.uszkodzone_czas_sekundy_i__œruba <> 0 then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  #13 + #10 +
                  samolot_informacje_odstêp_c_l + samolot_informacje_odstêp_c_l + '<' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__œruba + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( samolot__statek_gracza.uszkodzone_czas_sekundy_i__œruba )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';

              if samolot__statek_gracza.uszkodzone_czas_sekundy_i__ster <> 0 then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  #13 + #10 +
                  samolot_informacje_odstêp_c_l + samolot_informacje_odstêp_c_l + '<' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__ster + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( samolot__statek_gracza.uszkodzone_czas_sekundy_i__ster )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';

              if samolot__statek_gracza.uszkodzone_czas_sekundy_i__radar <> 0 then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  #13 + #10 +
                  samolot_informacje_odstêp_c_l + samolot_informacje_odstêp_c_l + '<' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__radar + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( samolot__statek_gracza.uszkodzone_czas_sekundy_i__radar )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';

              if samolot__statek_gracza.uszkodzone_czas_sekundy_i__radio <> 0 then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  #13 + #10 +
                  samolot_informacje_odstêp_c_l + samolot_informacje_odstêp_c_l + '<' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__radio + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( samolot__statek_gracza.uszkodzone_czas_sekundy_i__radio )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';

              if samolot__statek_gracza.uszkodzone_czas_sekundy_i__sonar <> 0 then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  #13 + #10 +
                  samolot_informacje_odstêp_c_l + samolot_informacje_odstêp_c_l + '<' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__sonar + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( samolot__statek_gracza.uszkodzone_czas_sekundy_i__sonar )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';

              if samolot__statek_gracza.uszkodzone_czas_sekundy_i__kotwica <> 0 then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  #13 + #10 +
                  samolot_informacje_odstêp_c_l + samolot_informacje_odstêp_c_l + '<' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__kotwica + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( samolot__statek_gracza.uszkodzone_czas_sekundy_i__kotwica )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';

              if   ( samolot__statek_gracza.czy_samolot )
                or ( samolot__statek_gracza.czy_zanurzanie ) then
                begin

                  if samolot__statek_gracza.uszkodzone_czas_sekundy_i__ster_g³êbokoœci <> 0 then
                    Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                      #13 + #10 +
                      samolot_informacje_odstêp_c_l + samolot_informacje_odstêp_c_l + '<' + t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__ster_g³êbokoœci + ': ' + Trim(   FormatFloat(  '### ### ##0', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g - Czas_Miêdzy_W_Sekundach( samolot__statek_gracza.uszkodzone_czas_sekundy_i__ster_g³êbokoœci )  )   ) + ' ' + t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s + '>';

                end;
              //---//if   ( samolot__statek_gracza.czy_samolot ) (...)

              if uszkodzenia_opis__samolot <> '' then
                Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
                  uszkodzenia_opis__samolot;

            end;
          //---//if samolot__statek_gracza <> nil then

          if    ( gracz_tryb_g = gt_Samolot )
            and ( samolot__statek_gracza <> nil ) then
            Radar_Napisy( samolot__statek_gracza, statek_informacje_odstêp_c_l )
          else//if    ( gracz_tryb_g = gt_Samolot ) (...)
            Radar_Napisy( zt_statek, statek_informacje_odstêp_c_l );


    //?????
//          Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
//            #13 + #10 +
//              'si__samolot_zanurzenie_pu³ap__zadane ' + Trim(  FormatFloat( '### ### ##0.000000', zt_statek.si__samolot_zanurzenie_pu³ap__zadane )  ) + #13 + #10 +
//              'Fale_GLTerrainRenderer.Visible ' + BoolToStr( Fale_GLTerrainRenderer.Visible ) + #13 + #10 +
//              '';

        end;
      //---//if zt_statek <> nil then


      if Wiatr__Kierunek_Wyœwietlaj_Na__Ekranie_CheckBox.Checked then
        begin

          Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
            #13 + #10 +
            statek_informacje_odstêp_c_l +
            t³umaczenie_komunikaty_r.s³owo__wiatr + ' ';

          if   ( wiatr_vector_g.X <> 0 )
            or ( wiatr_vector_g.Z <> 0 ) then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              Ró¿a_Wiatrów( wiatr_vector_g )
          else//if   ( wiatr_vector_g.X <> 0 ) (...)
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              '<' + t³umaczenie_komunikaty_r.s³owo__brak__ma³¹_liter¹ + '>';

          Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
            ' (' + t³umaczenie_komunikaty_r.s³owo__si³a + ': ' + Trim(  FormatFloat( '### ### ##0', wiatr_vector_g.W )  ) +
            ' | ' + Trim(   FormatFloat(  '### ### ##0', Abs( wiatr_vector_g.Y * 10 )  )   ) + ' ';

          if wiatr_vector_g.Y > 0 then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              '^'
          else//if wiatr_vector_g.Y > 0 then
          if wiatr_vector_g.Y < 0 then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              'v'
          else//if wiatr_vector_g.Y < 0 then
            Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
              '-';

          Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
            ')';

        end;
      //---//if Wiatr__Kierunek_Wyœwietlaj_Na__Ekranie_CheckBox.Checked then


      if Noc__Czas_Na__Ekranie_Wyœwietlaj_CheckBox.Checked then
        Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
          #13 + #10 +
          statek_informacje_odstêp_c_l +
          t³umaczenie_komunikaty_r.s³owo__czas +
          ' ' + Noc_Label.Caption;


      if Projektowy_Tryb__Wspó³rzêdne_Sceny_Wyœwietlaj_CheckBox.Checked then
        begin

          Informacje_G³ówne_GLHUDText.Text := Informacje_G³ówne_GLHUDText.Text +
            #13 + #10 +
            statek_informacje_odstêp_c_l +
            'x y z: ' + Trim(  FormatFloat( '### ### ##0.0000', Celowniczy_GLDummyCube.AbsolutePosition.X )  ) +
            ' | ' + Trim(  FormatFloat( '### ### ##0.0000', Celowniczy_GLDummyCube.AbsolutePosition.Y )  ) +
            ' | ' + Trim(  FormatFloat( '### ### ##0.0000', Celowniczy_GLDummyCube.AbsolutePosition.Z )  ) + '.';

        end;
      //---//if Projektowy_Tryb__Wspó³rzêdne_Sceny_Wyœwietlaj_CheckBox.Checked then


      // Oznacza kiedy nie ma skupienia na 'ekranie' gry.
      //if Gra_GLSceneViewer.Focused then
      if Gra_GLSceneViewer.skupienie_ustawione then
        Informacje_G³ówne_GLHUDText.ModulateColor.Color :=  GLS.Color.clrWhite
      else//if Gra_GLSceneViewer.skupienie_ustawione then
        Informacje_G³ówne_GLHUDText.ModulateColor.Color := GLS.Color.clrGray85;

    end;
  //---//if not Fotograficzny_Tryb_CheckBox.Checked then

  Informacje_Dodatkowe_GLHUDText.Position.X := Gra_GLSceneViewer.Width - 8; // Prawy dó³.
  Informacje_Dodatkowe_GLHUDText.Position.Y := Gra_GLSceneViewer.Height - 8; // Odstêp od krawêdzi ekranu.


  Gra_GLWindowsBitmapFont.EnsureString( Informacje_G³ówne_GLHUDText.Text );
  Gra_GLWindowsBitmapFont.EnsureString( Informacje_Dodatkowe_GLHUDText.Text );


  {$region 'Okreœla wielkoœci i pozycje te³ napisów na ekranie.'}
  // Okreœla wielkoœæ t³a wyœwietlanego tekstu.
  zts := ''; // Tutaj tymczasowo jako kopia najd³u¿szej linijki wyœwietlanego tekstu
  skrêt_kierunek_zadany := Informacje_G³ówne_GLHUDText.Text + #13 + #10; // Tutaj tymczasowo jako kopia wyœwietlanego tekstu.
  zti := 1;

  while zti > 0 do
    begin

      zti := Pos( #13 + #10, skrêt_kierunek_zadany );

      if Length( zts ) < zti then
        zts := Copy( skrêt_kierunek_zadany, 1, zti - 1 );

      Delete( skrêt_kierunek_zadany, 1, zti + 1 );

    end;
  //---//while zti > 0 do

  zti := Informacje_G³ówne_GLHUDText.Text.CountChar( #13 ) + 1; // 1 - ostatnia linijka nie ma na koñcu znaku nowej linii.

  //Informacje_G³ówne_GLHUDSprite.Height := 27 * zti;
  Informacje_G³ówne_GLHUDSprite.Height := (  Abs( Gra_GLWindowsBitmapFont.Font.Height ) + 6  ) * zti;


  if Fotograficzny_Tryb_CheckBox.Checked then
    Informacje_G³ówne_GLHUDSprite.Width := 0
  else//if Fotograficzny_Tryb_CheckBox.Checked then
    try
      Informacje_G³ówne_GLHUDSprite.Width := Gra_GLWindowsBitmapFont.TextWidth( zts ) + 5; // W IDE 10.2 czasami zg³asza b³¹d 'Range check error'.
    except
      Informacje_G³ówne_GLHUDSprite.Width := Length( zts ) + 5;
    end;
    //---//try

  Informacje_G³ówne_GLHUDSprite.Position.X := Informacje_G³ówne_GLHUDSprite.Width * 0.5;
  Informacje_G³ówne_GLHUDSprite.Position.Y := Informacje_G³ówne_GLHUDSprite.Height * 0.5;
  //---// Okreœla wielkoœæ t³a wyœwietlanego tekstu.


  // Okreœla wielkoœæ t³a wyœwietlanego tekstu dodatkowego.
  zts := ''; // Tutaj tymczasowo jako kopia najd³u¿szej linijki wyœwietlanego tekstu
  skrêt_kierunek_zadany := Informacje_Dodatkowe_GLHUDText.Text + #13 + #10; // Tutaj tymczasowo jako kopia wyœwietlanego tekstu dodatkowego.
  zti := 1;

  while zti > 0 do
    begin

      zti := Pos( #13 + #10, skrêt_kierunek_zadany );

      if Length( zts ) < zti then
        zts := Copy( skrêt_kierunek_zadany, 1, zti - 1 );

      Delete( skrêt_kierunek_zadany, 1, zti + 1 );

    end;
  //---//while zti > 0 do

  zti := Informacje_Dodatkowe_GLHUDText.Text.CountChar( #10 );

  //Informacje_Dodatkowe_GLHUDSprite.Height := 27 * zti;
  Informacje_Dodatkowe_GLHUDSprite.Height := (  Abs( Gra_GLWindowsBitmapFont.Font.Height ) + 6  ) * zti;

  try
    Informacje_Dodatkowe_GLHUDSprite.Width := Gra_GLWindowsBitmapFont.TextWidth( zts ) + 15; // W IDE 10.2 czasami zg³asza b³¹d 'Range check error'.
  except
    Informacje_Dodatkowe_GLHUDSprite.Width := Length( zts ) + 15;
  end;
  //---//try

  Informacje_Dodatkowe_GLHUDSprite.Position.X := Informacje_Dodatkowe_GLHUDText.Position.X - Informacje_Dodatkowe_GLHUDSprite.Width * 0.5 + 4; // Prawy dó³.
  Informacje_Dodatkowe_GLHUDSprite.Position.Y := Informacje_Dodatkowe_GLHUDText.Position.Y - Informacje_Dodatkowe_GLHUDSprite.Height * 0.5 + 4 - 2; // Po³owa odstêpu od krawêdzi ekranu, dodatkowa korekta.
  //---// Okreœla wielkoœæ t³a wyœwietlanego tekstu dodatkowego dodatkowego.
  {$endregion 'Okreœla wielkoœci i pozycje te³ napisów na ekranie.'}


  Radar_GLWindowsBitmapFont.EnsureString( Radar_GLHUDText.Text );


  napis_odœwie¿_zegar_pozorny_r.ostatnie_wywo³anie := Now();

end;//---//Funkcja Napis_Odœwie¿().

//Funkcja Odczytaj_Liczbê_Z_Napisu().
function TStatki_Form.Odczytaj_Liczbê_Z_Napisu( napis_f : string; const wartoœæ_minimalna_f : variant; const prze³¹cz_zak³adkê_f : boolean = true ) : real;
begin

  //
  // Funkcja odczytuje liczbê z napisu.
  //
  // Zwraca odczytan¹ liczbê.
  //
  // Parametry:
  //   napis_f
  //   wartoœæ_minimalna_f - je¿eli jest ró¿na od null i wynik jest mniejszy od niej to zwraca t¹ wartoœæ.
  //   prze³¹cz_zak³adkê_f:
  //     false - nie prze³¹cza zak³adki.
  //     true - prze³¹cza zak³adkê.
  //

  try
    Result := String_To__Float( napis_f );
  except
    on E : Exception do
      begin

        Result := 1;
        Log_Wypisz( t³umaczenie_komunikaty_r.komunikat__b³¹d_odczytania_liczby_z_napisu + ': ' + napis_f + ' ' + E.Message + ' ' + IntToStr( E.HelpContext ) + '.', prze³¹cz_zak³adkê_f );

      end;
    //---//on E : Exception do
  end;
  //---//try

  if    ( wartoœæ_minimalna_f <> null )
    and ( Result < wartoœæ_minimalna_f ) then
    Result := wartoœæ_minimalna_f;

end;//---//Funkcja Odczytaj_Liczbê_Z_Napisu().

//Funkcja Odczytaj_Liczbê_Z_Napisu_Xml().
function TStatki_Form.Odczytaj_Liczbê_Z_Napisu_Xml( const i_xml_node_f : Xml.XMLIntf.IXMLNode; const wygl¹d_liczba_definicja_f : TWygl¹d_Liczba_Definicja; const wartoœæ_minimalna_f : variant; const prze³¹cz_zak³adkê_f : boolean = true ) : real;
begin

  //
  // Funkcja odczytuje liczbê z wêz³a xml i sprawdza czy wartoœæ jest zdefiniowana jako definicja liczby czy jako liczba.
  //
  // Zwraca odczytan¹ liczbê.
  //
  // Parametry:
  //   i_xml_node_f
  //   wygl¹d_liczba_definicja_f
  //   wartoœæ_minimalna_f - je¿eli jest ró¿na od null i wynik jest mniejszy od niej to zwraca t¹ wartoœæ.
  //   prze³¹cz_zak³adkê_f:
  //     false - nie prze³¹cza zak³adki.
  //     true - prze³¹cza zak³adkê.
  //

  if    ( wygl¹d_liczba_definicja_f <> nil )
    and (   Trim(  VarToStr( i_xml_node_f.Attributes[ 'nazwa' ] )  ) <> ''   )
    and (   wygl¹d_liczba_definicja_f.Definicja_Istnieje(  VarToStr( i_xml_node_f.Attributes[ 'nazwa' ] )  )   ) then
    begin

      Result := wygl¹d_liczba_definicja_f.Odczytaj_Definicjê(  VarToStr( i_xml_node_f.Attributes[ 'nazwa' ] )  );

      if    ( wartoœæ_minimalna_f <> null )
        and ( Result < wartoœæ_minimalna_f ) then
        Result := wartoœæ_minimalna_f;

    end
  else//if wygl¹d_liczba_definicja_f = nil then
    begin

      Result := Odczytaj_Liczbê_Z_Napisu( i_xml_node_f.Text, wartoœæ_minimalna_f, prze³¹cz_zak³adkê_f );

    end;
  //---//if wygl¹d_liczba_definicja_f = nil then

end;//---//Funkcja Odczytaj_Liczbê_Z_Napisu_Xml().

//Funkcja Pauza().
procedure TStatki_Form.Pauza( const czy_pauza_f : boolean );
var
  zti : Int64;
begin

  //
  // Funkcja ustawia pauzê.
  //
  // Parametry:
  //   czy_pauza_f:
  //     false - wy³¹cza pauzê.
  //     true - w³¹cza pauzê.
  //

  czy_pauza_g := czy_pauza_f;


  Gra_GLCadencer.Enabled := not czy_pauza_g;
  radar_zegar_pozorny_r.w³¹czony := not czy_pauza_g;

  Informacje_Dodatkowe_GLAsyncTimer.Enabled := czy_pauza_g; // Gdy nie ma pauzy funkcjê obs³uguje Gra_GLCadencer.


  if czy_pauza_g then
    begin

      //mouse_look_active_przed_pauz¹ := Gra_GLUserInterface.MouseLookActive;
      //Gra_GLUserInterface.MouseLookActive := false;

      pauza__rozpoczêcie_data_czas_g := Now();


      Zmieniaj_Automatycznie__Mg³a_GLAsyncTimer.Enabled := false;
      Zmieniaj_Automatycznie__Morze_Wzburzenie_GLAsyncTimer.Enabled := false;
      Zmieniaj_Automatycznie__Noc_GLAsyncTimer.Enabled := false;


      Napis_Odœwie¿( -1, true );

      Gra_Pauza_Button.Font.Style := [ fsBold ];

    end
  else//if czy_pauza_g then
    begin

      //Gra_GLUserInterface.MouseLookActive := mouse_look_active_przed_pauz¹;
      Zmieniaj_Automatycznie__Mg³a_GLAsyncTimer.Enabled := Zmieniaj_Automatycznie__Mg³a_CheckBox.Checked;
      Zmieniaj_Automatycznie__Morze_Wzburzenie_GLAsyncTimer.Enabled := Zmieniaj_Automatycznie__Morze_Wzburzenie_CheckBox.Checked;
      Zmieniaj_Automatycznie__Noc_GLAsyncTimer.Enabled := Zmieniaj_Automatycznie__Noc_CheckBox.Checked;

      Gra_Wspó³czynnik_Prêdkoœci_SpinEditChange( nil ); // Je¿eli zmienia siê Gra_GLCadencer.TimeMultiplier podczas pauzy to po wy³¹czeniu pauzy nastêpuje skok w przeliczaniu.

      Gra_Pauza_Button.Font.Style := [];


      zti := MilliSecondsBetween( Now(), pauza__rozpoczêcie_data_czas_g );

      if dŸwiêki__komunikat__wyg³aszany__czas_trwania_milisekundy_g > 0 then
        dŸwiêki__komunikat__wyg³aszany__pauza__czas_trwania_milisekundy_g := dŸwiêki__komunikat__wyg³aszany__pauza__czas_trwania_milisekundy_g + zti;

      pauza__rozpoczêcie_data_czas_g := 0;

    end;
  //---//if czy_pauza_g then


  GLSMOpenAL1.pauza := czy_pauza_g;
  GLSMOpenAL1.Pauza_Ustaw();


  if czy_serwer_g then
    if czy_pauza_g then
      Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__pauza_c, -99, 'Tak' )
    else//if czy_pauza_g then
      Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__pauza_c, -99, 'Nie' );

end;//---//Funkcja Pauza().

//Funkcja Pauza_Podczas_Funkcje().
procedure TStatki_Form.Pauza_Podczas_Funkcje();
begin

  //
  // Funkcja w trakcie pauzy gdy Gra_GLCadencer jest wy³¹czony wywo³uje funkcje, które Gra_GLCadencer obs³uguje.
  //

  if not czy_pauza_g then
    Exit;

  Kamera_Odleg³oœæ_Kontroluj_Ustaw( 0.05 );
  Kamera_Woda_Pod_Nad_Widok_Ustaw();

end;//---//Funkcja Pauza_Podczas_Funkcje().

//Funkcja Pe³ny_Ekran__Znikaj¹ce_Elementy_Widocznoœæ_Ustaw().
procedure TStatki_Form.Pe³ny_Ekran__Znikaj¹ce_Elementy_Widocznoœæ_Ustaw();
begin

  //
  // Funkcja na pe³nym ekranie na niektórych komputerach nie widaæ Radar_Panel
  // gdy nie jest widoczny jakiœ element wyrównany do krawêdzi
  // wiêc po to jest Pe³ny_Ekran__Znikaj¹ce_Elementy_CheckBox.
  //

  if    ( Pe³ny_Ekran_CheckBox.Checked )
    and ( Radar__Widocznoœæ_CheckBox.Checked )
    and ( Pe³ny_Ekran__Znikaj¹ce_Elementy_CheckBox.Checked ) then
    Pe³ny_Ekran__Widocznoœæ_Splitter.Visible := true
  else//if    ( Pe³ny_Ekran_CheckBox.Checked ) (...)
    Pe³ny_Ekran__Widocznoœæ_Splitter.Visible := false;

end;//---//Funkcja Pe³ny_Ekran__Znikaj¹ce_Elementy_Widocznoœæ_Ustaw().

//Funkcja Pêtla_Wzorzec_Oznacz().
procedure TStatki_Form.Pêtla_Wzorzec_Oznacz( gl_custom_scene_object_f : TGLCustomSceneObject );
var
  i : integer;
begin

  //
  // Funkcja oznacza obiekt, który jest wzorcem dla obiektów powielonych w pêtli do usuniêcia.
  //

  if   ( gl_custom_scene_object_f = nil )
    or (  not Assigned( gl_custom_scene_object_f )  ) then
    Exit;


  //if    (  Trim( gl_custom_scene_object_f.Name ) <> ''  ) // Nie jest to kontener na prymitywy.
  //  and (  Pos( obiekt_nazwa_pêtla_sufiks_c, gl_custom_scene_object_f.Name ) <= 0  ) then
  //  gl_custom_scene_object_f.Name := gl_custom_scene_object_f.Name + obiekt_nazwa_pêtla_sufiks_c
  //else// if    (  Trim( gl_custom_scene_object_f.Name ) <> ''  ) (...)
  //  if    (  Trim( gl_custom_scene_object_f.Name ) = ''  ) // Jest to kontener na prymitywy.
  //    and ( gl_custom_scene_object_f.Count > 0 ) then
  //    for i := 0 to gl_custom_scene_object_f.Count - 1 do
  //      if    (  Trim( gl_custom_scene_object_f.Children[ i ].Name ) <> ''  )
  //        and (  Pos( obiekt_nazwa_pêtla_sufiks_c, gl_custom_scene_object_f.Children[ i ].Name ) <= 0  ) then
  //        gl_custom_scene_object_f.Children[ i ].Name := gl_custom_scene_object_f.Children[ i ].Name + obiekt_nazwa_pêtla_sufiks_c;


  if    (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(gl_custom_scene_object_f) ) <> Wyglad_Elementy.or_Kontener_Prymitywów  ) // Nie jest to kontener na prymitywy.
    and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(gl_custom_scene_object_f) ) <> Wyglad_Elementy.or_Wzorzec  ) then
    Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(gl_custom_scene_object_f), Wyglad_Elementy.or_Wzorzec )
  else// if    (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(gl_custom_scene_object_f) ) <> Wyglad_Elementy.or_Kontener_Prymitywów  ) (...)
    if    (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(gl_custom_scene_object_f) ) = Wyglad_Elementy.or_Kontener_Prymitywów  ) // Jest to kontener na prymitywy.
      and ( gl_custom_scene_object_f.Count > 0 ) then
      for i := 0 to gl_custom_scene_object_f.Count - 1 do
        if    (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(gl_custom_scene_object_f.Children[ i ]) ) <> Wyglad_Elementy.or_Kontener_Prymitywów  )
          and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(gl_custom_scene_object_f.Children[ i ]) ) <> Wyglad_Elementy.or_Wzorzec  ) then
          Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(gl_custom_scene_object_f.Children[ i ]), Wyglad_Elementy.or_Wzorzec );

end;//---//Funkcja Pêtla_Wzorzec_Oznacz().

//Funkcja Pokój_Rozmów__Wyœlij_Wiadomoœæ().
procedure TStatki_Form.Pokój_Rozmów__Wyœlij_Wiadomoœæ( const pokój_rozmów_r_f : TPokój_Rozmów_r; const dopuszczaj_wys³anie_wiadomoœci_do_siebie_f : boolean = false );
var
  i : integer;
begin

  if not czy_serwer_g then
    Exit;

  if pokój_rozmów_r_f.odbiorca_rodzaj = pror_Wszyscy then
    Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__rekord_pokój_rozmów_r_c, -99, pokój_rozmów_r_f )
  else//if pokój_rozmów_r_f.odbiorca_rodzaj = pror_Wszyscy then
    begin

      for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
        if    (
                   ( dopuszczaj_wys³anie_wiadomoœci_do_siebie_f )
                or ( pokój_rozmów_r_f.id_nadawca <> TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd ) // Nie wysy³a wiadomoœci do siebie.
              )
          and (
                   (
                         ( pokój_rozmów_r_f.odbiorca_rodzaj = pror_Gracz_Jeden )
                     and ( pokój_rozmów_r_f.id_odbiorca = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd )
                   )
                or (
                         ( pokój_rozmów_r_f.odbiorca_rodzaj = pror_Grupa_Jedna )
                     and ( pokój_rozmów_r_f.id_odbiorca = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_grupa__kd )
                   )
              ) then
            begin

              Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__rekord_pokój_rozmów_r_c, TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).peer_port_tcp__kd, pokój_rozmów_r_f );

              if pokój_rozmów_r_f.odbiorca_rodzaj = pror_Gracz_Jeden then
                Break;

            end;
          //---//if    ( (...)

    end;
  //---//if pokój_rozmów_r_f.odbiorca_rodzaj = pror_Wszyscy then

end;//---//Funkcja Pokój_Rozmów__Wyœlij_Wiadomoœæ().

//Funkcja Pokój_Rozmów__Wyœwietl_Wiadomoœæ().
procedure TStatki_Form.Pokój_Rozmów__Wyœwietl_Wiadomoœæ( const pokój_rozmów_r_f : TPokój_Rozmów_r );
var
  i,
  id_grupa__nadawca_l
    : integer;
  zts : string;
  pokój_rozmów_powiadomienie_l : TPokój_Rozmów_Powiadomienie;
begin

  if   (
             ( Pokój_Rozmów__Ignoruj__Si_Zagaduje_CheckBox.Checked )
         and (  Pos( si_pokój_rozmów__znacznik_symbol__si_zagaduje_c, pokój_rozmów_r_f.wiadomoœæ ) > 0  )
       )
    or (
             ( Pokój_Rozmów__Ignoruj__Si_Zak³óca_CheckBox.Checked )
         and (  Pos( si_pokój_rozmów__znacznik_symbol__si_zak³óca_c, pokój_rozmów_r_f.wiadomoœæ ) > 0  )
       )
    or (
             ( Pokój_Rozmów__Ignoruj__Trafienie_Informacja_CheckBox.Checked )
         and ( not Trafienia_W_Logu_Wpisuj_CheckBox.Checked )
         and (  Pos( si_pokój_rozmów__znacznik_symbol__trafienie_informacja_c, pokój_rozmów_r_f.wiadomoœæ ) > 0  )
       )
    or (
             ( Pokój_Rozmów__Ignoruj__Wys³a³_Polecenie_CheckBox.Checked )
         and (  Pos( si_pokój_rozmów__znacznik_symbol__wys³a³_polecenie_c, pokój_rozmów_r_f.wiadomoœæ ) > 0  )
       ) then
    Exit;


  id_grupa__nadawca_l := 0;

  //for i := 0 to Length( statki_t ) - 1 do
  //  if    ( statki_t[ i ] <> nil )
  //    and ( statki_t[ i ].id_gracz = pokój_rozmów_r_f.id_nadawca ) then
  //    begin
  //
  //      id_grupa__nadawca_l := statki_t[ i ].id_grupa;
  //      Break;
  //
  //    end;
  //  //---//if    ( statki_t[ i ] <> nil ) (...)

  // Je¿eli nie ma jeszcze utworzonej gry (nie ma statków).
  //if id_grupa__nadawca_l = -99 then
    for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
      if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd = pokój_rozmów_r_f.id_nadawca then
        begin

          id_grupa__nadawca_l := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_grupa__kd;
          Break;

        end;
      //---//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd = pokój_rozmów_r_f.id_nadawca then


  for i := 0 to Pokój_Rozmów__Ignoruj_CheckListBox.Items.Count - 1 do
    if    ( Pokój_Rozmów__Ignoruj_CheckListBox.Checked[ i ] )
      and ( pokój_rozmów_r_f.id_nadawca <> Gracz_Identyfikator() ) then // Swoje wiadomoœci wyœwietla.
      if   ( TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj(Pokój_Rozmów__Ignoruj_CheckListBox.Items.Objects[ i ]).odbiorca_rodzaj = pror_Wszyscy )
        or (
                 ( TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj(Pokój_Rozmów__Ignoruj_CheckListBox.Items.Objects[ i ]).odbiorca_rodzaj = pror_Gracz_Jeden )
             and ( pokój_rozmów_r_f.id_nadawca = TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj(Pokój_Rozmów__Ignoruj_CheckListBox.Items.Objects[ i ]).id_odbiorca )
           )
        or (
                 ( TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj(Pokój_Rozmów__Ignoruj_CheckListBox.Items.Objects[ i ]).odbiorca_rodzaj = pror_Grupa_Jedna )
             and ( TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj(Pokój_Rozmów__Ignoruj_CheckListBox.Items.Objects[ i ]).id_odbiorca = id_grupa__nadawca_l )
           )
        or ( // SI.
                 ( TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj(Pokój_Rozmów__Ignoruj_CheckListBox.Items.Objects[ i ]).odbiorca_rodzaj = pror_Grupa_Jedna )
             and ( TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj(Pokój_Rozmów__Ignoruj_CheckListBox.Items.Objects[ i ]).id_odbiorca = si_peer_port_c )
             and ( pokój_rozmów_r_f.id_nadawca <= si_peer_port_c )
           ) then
        Exit;


  pokój_rozmów_powiadomienie_l := TPokój_Rozmów_Powiadomienie.Create();
  pokój_rozmów_powiadomienie_l.data_czas_wyœwietlaj := Pokój_Rozmów__Data_Czas_Wyœwietlaj_CheckBox.Checked;
  pokój_rozmów_powiadomienie_l.informacja_dodatkowa := Pokój_Rozmów__Informacja_Dodatkowa_CheckBox.Checked;
  pokój_rozmów_powiadomienie_l.pokój_rozmów_r := pokój_rozmów_r_f;
  pokój_rozmów_powiadomienie_l.zt_strings := Pokój_Rozmów_Memo.Lines;
  pokój_rozmów_powiadomienie_l.informacja_dodatkowa_dodaj := Informacja_Dodatkowa_Dodaj;

  pokój_rozmów_powiadomienie_l.nadawca_opis := Trim(  FormatFloat( '00', pokój_rozmów_powiadomienie_l.pokój_rozmów_r.id_nadawca )  );

  for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
    if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd = pokój_rozmów_powiadomienie_l.pokój_rozmów_r.id_nadawca then
      begin

        pokój_rozmów_powiadomienie_l.nadawca_opis :=
          TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).nazwa__kd + ' (' + t³umaczenie_komunikaty_r.ekran_napis__grupa__skrót + ' ' + IntToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_grupa__kd ) +
          ', ' + t³umaczenie_komunikaty_r.ekran_napis__id__skrót + ' ' +
          pokój_rozmów_powiadomienie_l.nadawca_opis + '):';

        Break;

      end;
    //---//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd = pokój_rozmów_powiadomienie_l.pokój_rozmów_r.id_nadawca then


  if    ( Trafienia_W_Logu_Wpisuj_CheckBox.Checked )
    and (  Pos( si_pokój_rozmów__znacznik_symbol__trafienie_informacja_c, pokój_rozmów_r_f.wiadomoœæ ) > 0  ) then
    begin

      zts := '';

      if Pokój_Rozmów__Data_Czas_Wyœwietlaj_CheckBox.Checked then
        DateTimeToString( zts, 'yyyy-mm-dd hh:mm:ss', pokój_rozmów_powiadomienie_l.pokój_rozmów_r.data_czas_wys³ania );

      zts := pokój_rozmów_powiadomienie_l.nadawca_opis +
        ' ' + zts;
      zts := zts + '   ' + StringReplace( pokój_rozmów_r_f.wiadomoœæ, si_pokój_rozmów__znacznik_symbol__trafienie_informacja_c, '', [ rfReplaceAll ] );

      Log_Wypisz( zts, false );

    end;
  //---//if    ( Trafienia_W_Logu_Wpisuj_CheckBox.Checked ) (...)


  if    ( Pokój_Rozmów__Ignoruj__Trafienie_Informacja_CheckBox.Checked )
    and (  Pos( si_pokój_rozmów__znacznik_symbol__trafienie_informacja_c, pokój_rozmów_r_f.wiadomoœæ ) > 0  ) then
    Exit;


  if Pos( si_pokój_rozmów__znacznik_symbol__si_zagaduje_c, pokój_rozmów_powiadomienie_l.pokój_rozmów_r.wiadomoœæ ) > 0 then
    pokój_rozmów_powiadomienie_l.pokój_rozmów_r.wiadomoœæ := StringReplace( pokój_rozmów_powiadomienie_l.pokój_rozmów_r.wiadomoœæ, si_pokój_rozmów__znacznik_symbol__si_zagaduje_c, '', [ rfReplaceAll ] );

  if Pos( si_pokój_rozmów__znacznik_symbol__si_zak³óca_c, pokój_rozmów_powiadomienie_l.pokój_rozmów_r.wiadomoœæ ) > 0 then
    pokój_rozmów_powiadomienie_l.pokój_rozmów_r.wiadomoœæ := StringReplace( pokój_rozmów_powiadomienie_l.pokój_rozmów_r.wiadomoœæ, si_pokój_rozmów__znacznik_symbol__si_zak³óca_c, '', [ rfReplaceAll ] );

  if Pos( si_pokój_rozmów__znacznik_symbol__trafienie_informacja_c, pokój_rozmów_powiadomienie_l.pokój_rozmów_r.wiadomoœæ ) > 0 then
    pokój_rozmów_powiadomienie_l.pokój_rozmów_r.wiadomoœæ := StringReplace( pokój_rozmów_powiadomienie_l.pokój_rozmów_r.wiadomoœæ, si_pokój_rozmów__znacznik_symbol__trafienie_informacja_c, '', [ rfReplaceAll ] );

  if Pos( si_pokój_rozmów__znacznik_symbol__wys³a³_polecenie_c, pokój_rozmów_powiadomienie_l.pokój_rozmów_r.wiadomoœæ ) > 0 then
    pokój_rozmów_powiadomienie_l.pokój_rozmów_r.wiadomoœæ := StringReplace( pokój_rozmów_powiadomienie_l.pokój_rozmów_r.wiadomoœæ, si_pokój_rozmów__znacznik_symbol__wys³a³_polecenie_c, '', [ rfReplaceAll ] );


  pokój_rozmów_powiadomienie_l.Notify();


  // Bez Free().

end;//---//Funkcja Pokój_Rozmów__Wyœwietl_Wiadomoœæ().

//Funkcja Pozycja_Pocz¹tkowa_Parametry_Domyœlne_Ustaw().
procedure TStatki_Form.Pozycja_Pocz¹tkowa_Parametry_Domyœlne_Ustaw( var pozycja_pocz¹tkowa_parametry_r_f : TPozycja_Pocz¹tkowa_Parametry_r; const czy_minus : boolean );
begin

  pozycja_pocz¹tkowa_parametry_r_f.korekta_obrót := 0;
  pozycja_pocz¹tkowa_parametry_r_f.korekta_x := 0;
  pozycja_pocz¹tkowa_parametry_r_f.korekta_z := 0;
  pozycja_pocz¹tkowa_parametry_r_f.odstêp_x := 150;
  pozycja_pocz¹tkowa_parametry_r_f.patrol_promieñ := 300;
  pozycja_pocz¹tkowa_parametry_r_f.patrol_x := 0;
  pozycja_pocz¹tkowa_parametry_r_f.patrol_z := 350;
  pozycja_pocz¹tkowa_parametry_r_f.patrol__tylny_promieñ := 400;
  pozycja_pocz¹tkowa_parametry_r_f.patrol__tylny_x := 0;
  pozycja_pocz¹tkowa_parametry_r_f.patrol__tylny_z := 650;
  pozycja_pocz¹tkowa_parametry_r_f.z := 750;

  if czy_minus then
    begin

      pozycja_pocz¹tkowa_parametry_r_f.korekta_obrót := 180;
      pozycja_pocz¹tkowa_parametry_r_f.patrol_z := -pozycja_pocz¹tkowa_parametry_r_f.patrol_z;
      pozycja_pocz¹tkowa_parametry_r_f.patrol__tylny_z := -pozycja_pocz¹tkowa_parametry_r_f.patrol__tylny_z;
      pozycja_pocz¹tkowa_parametry_r_f.z := -pozycja_pocz¹tkowa_parametry_r_f.z;

    end;
  //---//if czy_minus then

end;//---//Funkcja Pozycja_Pocz¹tkowa_Parametry_Domyœlne_Ustaw().

//Funkcja Punkt_Naprowadzaj().
procedure TStatki_Form.Punkt_Naprowadzaj();
var
  zt_affine_vektor : GLS.VectorGeometry.TAffineVector;
begin

  if   ( not Punkt_Naprowadzaj_CheckBox.Checked )
    or ( not Punkt_Naprowadzaj__Strza³ka_CheckBox.Checked ) then
    Exit;


  zt_affine_vektor := GLS.VectorGeometry.AffineVectorMake( Punkt_Naprowadzaj__X_SpinEdit.Value, Punkt_Naprowadzaj__Y_SpinEdit.Value, Punkt_Naprowadzaj__Z_SpinEdit.Value );

  zt_affine_vektor := Gra_GLCamera.AbsoluteToLocal( zt_affine_vektor );

  Punkt_Naprowadzaj_GLArrowLine.Direction.SetVector
    (   // Cel               Obiekt celuj¹cy
        zt_affine_vektor.X - Punkt_Naprowadzaj_GLArrowLine.Position.X
      , zt_affine_vektor.Y - Punkt_Naprowadzaj_GLArrowLine.Position.Y
      , zt_affine_vektor.Z - Punkt_Naprowadzaj_GLArrowLine.Position.Z
    );

end;//---//Funkcja Punkt_Naprowadzaj().

//Funkcja Punkt_Naprowadzaj__Kolor_Zmieñ().
procedure TStatki_Form.Punkt_Naprowadzaj__Kolor_Zmieñ();
begin

  //
  // Funkcja przyciemnia kolor elementu naprowadzaj¹cego wraz z œciemnianiem siê dnia.
  // Zmienia kolor elementu naprowadzaj¹cego wraz z narastaniem mg³y.
  //

  Punkt_Naprowadzaj_GLArrowLine.Material.FrontProperties.Ambient.Red := ( GLS.Color.clrWhite.X * 0.5 + GLS.Color.clrWhite.X * dzieñ_jasnoœæ_g ) * ( 100 - mg³a_intensywnoœæ_g ) / 100;
  Punkt_Naprowadzaj_GLArrowLine.Material.FrontProperties.Ambient.Green := GLS.Color.clrWhite.Y * 0.5 + GLS.Color.clrWhite.Y * dzieñ_jasnoœæ_g;
  Punkt_Naprowadzaj_GLArrowLine.Material.FrontProperties.Ambient.Blue := GLS.Color.clrWhite.Z * 0.5 + GLS.Color.clrWhite.Z * dzieñ_jasnoœæ_g;

  Punkt_Naprowadzaj_GLArrowLine.Material.FrontProperties.Diffuse.Color := Punkt_Naprowadzaj_GLArrowLine.Material.FrontProperties.Ambient.Color;

end;//---//Funkcja Punkt_Naprowadzaj__Kolor_Zmieñ().

//Funkcja Punkt_Naprowadzaj__Na_Lotniskowiec().
procedure TStatki_Form.Punkt_Naprowadzaj__Na_Lotniskowiec();
var
  i,
  id_statek__lotniskowiec_l
    : integer;
begin

  if Czas_Miêdzy_W_Sekundach( punkt_naprowadzaj__na_lotniskowiec__okreœlenie_ostatnie_sekundy_i_g ) < punkt_naprowadzaj__na_lotniskowiec__okreœlenie_sekundy_c then
    Exit;

  //if   ( not Punkt_Naprowadzaj__Na_Lotniskowiec_CheckBox.Checked )
  //  or (  Czas_Miêdzy_W_Sekundach( punkt_naprowadzaj__na_lotniskowiec__okreœlenie_ostatnie_sekundy_i_g ) < punkt_naprowadzaj__na_lotniskowiec__okreœlenie_sekundy_c  ) then
  //  Exit;


  if    ( samolot__statek_gracza <> nil )
    and ( samolot__statek_gracza.czy_samolot )
    and ( samolot__statek_gracza.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie >= 0 ) then
    id_statek__lotniskowiec_l := samolot__statek_gracza.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie
  else//if samolot__statek_gracza <> nil then
  if    ( statek_gracza <> nil )
    and ( statek_gracza.czy_samolot )
    and ( statek_gracza.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie >= 0 ) then
    id_statek__lotniskowiec_l := statek_gracza.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie
  else//if    ( statek_gracza <> nil ) (...)
    if    ( statek_gracza <> nil )
      and ( samolot__statek_gracza <> nil )
      and ( not statek_gracza.czy_samolot )
      and ( samolot__statek_gracza.czy_samolot ) then
      id_statek__lotniskowiec_l := statek_gracza.id_statek // Naprowadza samolot gracza na jego lotniskowiec.
    else//if    ( statek_gracza <> nil ) (...)
      id_statek__lotniskowiec_l := -99;


  if   (
             ( not Punkt_Naprowadzaj__Na_Lotniskowiec_CheckBox.Checked )
          or ( id_statek__lotniskowiec_l < 0 )
        )
    and (
            ( Punkt_Naprowadzaj_GLDummyCube.Direction.X <> 0 )
         or ( Punkt_Naprowadzaj_GLDummyCube.Direction.Y <> 0 )
         or ( Punkt_Naprowadzaj_GLDummyCube.Direction.Z <> 1 )
       ) then
    begin

      // Resetuje obrót punktu naprowadzania.

      // Lepiej resetowaæ tutaj ni¿ Punkt_Naprowadzaj_SpinEditChange() gdy¿ wartoœæ id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie mo¿e siê zmieniæ bez interakcji z interfejsem (np. poprzez polecenia dla SI).

      Punkt_Naprowadzaj_GLDummyCube.ResetRotations();

      Radar_Punkt_Naprowadzaj_GLDummyCube.AbsoluteDirection := Punkt_Naprowadzaj_GLDummyCube.AbsoluteDirection;

      Exit;

    end;
  //---//if   ( (...)


  if   ( not Punkt_Naprowadzaj_CheckBox.Checked )
    or ( not Punkt_Naprowadzaj__Na_Lotniskowiec_CheckBox.Checked )
    or ( id_statek__lotniskowiec_l < 0 ) then
    Exit;


  for i := 0 to Length( statki_t ) - 1 do
    if    ( statki_t[ i ] <> nil )
      and ( statki_t[ i ].id_statek = id_statek__lotniskowiec_l ) then
      begin

        Punkt_Naprowadzaj__X_SpinEdit.Value := Round( statki_t[ i ].AbsolutePosition.X );
        Punkt_Naprowadzaj__Y_SpinEdit.Value := Round( statki_t[ i ].AbsolutePosition.Y + statki_t[ i ].y_prymityw_najwiêksze );
        Punkt_Naprowadzaj__Z_SpinEdit.Value := Round( statki_t[ i ].AbsolutePosition.Z );

        // Obraca punkt naprowadzania zgodnie z kierunkiem lotniskowca.
        Punkt_Naprowadzaj_GLDummyCube.Direction.X := -statki_t[ i ].AbsoluteDirection.X;
        Punkt_Naprowadzaj_GLDummyCube.Direction.Z := -statki_t[ i ].AbsoluteDirection.Z;

        Radar_Punkt_Naprowadzaj_GLDummyCube.AbsoluteDirection := Punkt_Naprowadzaj_GLDummyCube.AbsoluteDirection;

        Break;

      end;
    //---//if    ( statki_t[ i ] <> nil ) (...)


  punkt_naprowadzaj__na_lotniskowiec__okreœlenie_ostatnie_sekundy_i_g := Czas_Teraz_W_Sekundach();

end;//---//Funkcja Punkt_Naprowadzaj__Na_Lotniskowiec().

//Funkcja Punkty_¯ycia_WskaŸnik__Material_Options_Ustal().
function TStatki_Form.Punkty_¯ycia_WskaŸnik__Material_Options_Ustal() : GLS.Material.TGLMaterialOptions;
begin

  Result := [ GLS.Material.TGLMaterialOption.moNoLighting ]; // Po obróceniu wskaŸnika punktów ¿ycia bokiem do œwiat³a wskaŸnik robi siê ciemny.

  case Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBox.ItemIndex of
      // nie podlega efektom sceny
      // nie podlega efektom sceny tylko ponad powierzchni¹ wody
      0, 1 : Result := Result + [ GLS.Material.TGLMaterialOption.moIgnoreFog ];
      // podlega efektom sceny
    end;
  //---//case Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBox.ItemIndex of

end;//---//Funkcja Punkty_¯ycia_WskaŸnik__Material_Options_Ustal().

//Funkcja Radar__Koryguj_Wielkoœæ_Obiektów().
function TStatki_Form.Radar__Koryguj_Wielkoœæ_Obiektów() : real;
begin

  //
  // Funkcja ustala wartoœæ wspó³czynnika wielkoœci obiektów na radarze zale¿nie od ustawionej czu³oœci radaru.
  //
  // Zwraca wartoœæ wspó³czynnika wielkoœci obiektów na radarze.
  //

  Result := Radar__Czu³oœæ_SpinEdit.Value;

  if Result < Radar__Czu³oœæ_SpinEdit.MinValue then
    Result := Radar__Czu³oœæ_SpinEdit.MinValue;

  Result := Result * 0.01;

end;//---//Funkcja Radar__Koryguj_Wielkoœæ_Obiektów().

//Funkcja Radar__L¹d_Rysuj().
procedure TStatki_Form.Radar__L¹d_Rysuj();
var
  i : integer;
  ztr : real;
  skala__x,
  skala__y,
  skala__z
    : single;
  ztdt_1,
  ztdt_2
    : TDateTime;
  zt_gl_base_scene_object : TGLBaseSceneObject;
  zt_radar_obiekt : Klasy_Dodatkowe.TRadar_Obiekt;
  zt_statek : TStatek;
begin

  ztr := Radar__L¹d_Rysowanie_Zasiêg_SpinEdit.Value;

  if ztr > Radar__L¹d_Rysowanie_Zasiêg_SpinEdit.MaxValue then
    ztr := Radar__L¹d_Rysowanie_Zasiêg_SpinEdit.MaxValue
  else
  if ztr < Radar__L¹d_Rysowanie_Zasiêg_SpinEdit.MinValue then
    ztr := Radar__L¹d_Rysowanie_Zasiêg_SpinEdit.MinValue;


  if   ( l¹d_list = nil )
    or (  not Assigned( l¹d_list )  )
    or ( ztr <= 0 ) then
    Exit;


  zt_statek := Statek_Gracza__Gracz_Tryb_Zwróæ();

  ztdt_1 := Now();

  for i := 0 to l¹d_list.Count - 1 do
    begin

      if   ( zt_statek = nil )
        or (
                 ( zt_statek <> nil )
             and (
                      ( // L¹d widoczny na radarze.
                            (  not Wyglad_Elementy.Radar_Ignoruje( TGLCustomSceneObject(l¹d_list[ i ]) )  )
                        and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(l¹d_list[ i ]) ) <> Wyglad_Elementy.or_DŸwiêk_Emiter  )
                        and (  not ( TGLCustomSceneObject(l¹d_list[ i ]) is TSt_GLDummyCube )  ) // Kontenerów na obiekty nie rysuje na radarze.
                        and ( not zt_statek.Zanurzenie_Peryskopowe__Przekroczone() ) // W zanurzeniu radar nie dzia³a.
                        and ( zt_statek.radar_zasiêg > 0)
                        and ( zt_statek.uszkodzone_czas_sekundy_i__radar = 0 )
                        //and (  zt_statek.DistanceTo( TGLCustomSceneObject(l¹d_list[ i ]) ) <= zt_statek.radar_zasiêg * ztr * 0.01  )
                        and (  zt_statek.DistanceTo( TGLCustomSceneObject(l¹d_list[ i ]) ) <= zt_statek.radar_zasiêg * ztr * 0.01 + ( TGLCustomSceneObject(l¹d_list[ i ]).Scale.X + TGLCustomSceneObject(l¹d_list[ i ]).Scale.Z ) * 0.5  )
                      )
                   or ( // L¹d widoczny na sonarze.
                            (  not Wyglad_Elementy.Radar_Ignoruje( TGLCustomSceneObject(l¹d_list[ i ]) )  )
                        and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(l¹d_list[ i ]) ) <> Wyglad_Elementy.or_DŸwiêk_Emiter  )
                        and (  not ( TGLCustomSceneObject(l¹d_list[ i ]) is TSt_GLDummyCube )  ) // Kontenerów na obiekty nie rysuje na radarze.
                        and ( zt_statek.sonar_zasiêg > 0)
                        and ( zt_statek.uszkodzone_czas_sekundy_i__sonar = 0 )
                        and ( Radar__Dane_Z_Sonaru_CheckBox.Enabled )
                        and ( Radar__Dane_Z_Sonaru_CheckBox.Checked )
                        //and (  zt_statek.DistanceTo( TGLCustomSceneObject(l¹d_list[ i ]) ) <= zt_statek.radar_zasiêg * ztr * 0.01  )
                        and (  zt_statek.DistanceTo( TGLCustomSceneObject(l¹d_list[ i ]) ) <= zt_statek.sonar_zasiêg * ztr * 0.01 + ( TGLCustomSceneObject(l¹d_list[ i ]).Scale.X + TGLCustomSceneObject(l¹d_list[ i ]).Scale.Z ) * 0.5  )
                      )
                   or ( // Dane o l¹dzie z radia.
                            ( Radar__Dane_Z_Radia_CheckBox.Checked )
                        and ( Radar__Dane_Z_Radia__L¹dy_CheckBox.Checked )
                        and (    Pos(   ', ' + IntToStr(  Wyglad_Elementy.Identyfikator_Elementu( TGLCustomSceneObject(l¹d_list[ i ]) )  ) + ',', zt_statek.radio_id_l¹dy_w_zasiêgu   ) > 0    ) // Statek ma w zasiêgu radia sprawdzany l¹d.
                      )
                 )
           ) then
        begin

          zt_radar_obiekt := Klasy_Dodatkowe.TRadar_Obiekt.Create( Self, Radar_Obiekty_GLDummyCube, TGLCustomSceneObject(l¹d_list[ i ]) );
          zt_radar_obiekt.AbsolutePosition := VectorMake( TGLCustomSceneObject(l¹d_list[ i ]).AbsolutePosition.X, TGLCustomSceneObject(l¹d_list[ i ]).AbsolutePosition.Y, TGLCustomSceneObject(l¹d_list[ i ]).AbsolutePosition.Z );
          zt_radar_obiekt.AbsoluteUp := VectorMake( TGLCustomSceneObject(l¹d_list[ i ]).AbsoluteUp.X, TGLCustomSceneObject(l¹d_list[ i ]).AbsoluteUp.Y, TGLCustomSceneObject(l¹d_list[ i ]).AbsoluteUp.Z );
          zt_radar_obiekt.AbsoluteDirection := VectorMake( TGLCustomSceneObject(l¹d_list[ i ]).AbsoluteDirection.X, TGLCustomSceneObject(l¹d_list[ i ]).AbsoluteDirection.Y, TGLCustomSceneObject(l¹d_list[ i ]).AbsoluteDirection.Z );


          skala__x := TGLCustomSceneObject(l¹d_list[ i ]).Scale.X;
          skala__y := TGLCustomSceneObject(l¹d_list[ i ]).Scale.Y;
          skala__z := TGLCustomSceneObject(l¹d_list[ i ]).Scale.Z;

          // Uwzglêdnia skalowanie kontenerów zawieraj¹cych obiekt.
          zt_gl_base_scene_object := TGLCustomSceneObject(l¹d_list[ i ]);

          while ( zt_gl_base_scene_object.Parent <> nil )
            and ( zt_gl_base_scene_object.Parent.Name <> Gra_Obiekty_GLDummyCube.Name )
            and ( zt_gl_base_scene_object.Parent.Name <> Gra_GLScene.Objects.Name ) do // 'ObjectRoot'
            begin

              skala__x := skala__x * zt_gl_base_scene_object.Parent.Scale.X;
              skala__y := skala__y * zt_gl_base_scene_object.Parent.Scale.Y;
              skala__z := skala__z * zt_gl_base_scene_object.Parent.Scale.Z;

              zt_gl_base_scene_object := zt_gl_base_scene_object.Parent;

            end;
          //---//while ( zt_gl_base_scene_object.Parent <> nil ) (...)
          //---// Uwzglêdnia skalowanie kontenerów zawieraj¹cych obiekt.

          zt_radar_obiekt.Scale.X := skala__x * Radar__Koryguj_Wielkoœæ_Obiektów();

          if Radar__Skala_Y_Uwzglêdniaj_L¹d_CheckBox.Checked then
            zt_radar_obiekt.Scale.Y := skala__y * Radar__Koryguj_Wielkoœæ_Obiektów();

          zt_radar_obiekt.Scale.Z := skala__z * Radar__Koryguj_Wielkoœæ_Obiektów();

        end;
      //---//if   ( zt_statek = nil ) (...)

    end;
  //---//for i := 0 to l¹d_list.Count - 1 do

  ztdt_2 := Now();


  radar__rysowanie__l¹d_czas_milisekundy_g := MilliSecondsBetween( ztdt_2, ztdt_1 );

end;//---//Funkcja Radar__L¹d_Rysuj().

//Radar__Odœwie¿().
procedure TStatki_Form.Radar__Odœwie¿();
var
  ztr : real;
  zt_statek : TStatek;
begin

  if not radar_zegar_pozorny_r.w³¹czony then
    Exit;

  zt_statek := Statek_Gracza__Gracz_Tryb_Zwróæ();

  if zt_statek = nil then
    begin

      Radar__Wyczyœæ();

      Radar_Statek_GLFrustrum.Scale.X := Radar__Koryguj_Wielkoœæ_Obiektów();
      Radar_Statek_GLFrustrum.Scale.Y := Radar__Koryguj_Wielkoœæ_Obiektów();
      Radar_Statek_GLFrustrum.Scale.Z := Radar__Koryguj_Wielkoœæ_Obiektów();

      Exit;

    end;
  //---//if zt_statek = nil then


  if zt_statek <> nil then
    begin

      Radar_Statek_GLFrustrum.Scale.X := zt_statek.y_prymityw_najwiêksze * Radar__Koryguj_Wielkoœæ_Obiektów();
      Radar_Statek_GLFrustrum.Scale.Y := zt_statek.z_prymityw_odleg³oœæ * Radar__Koryguj_Wielkoœæ_Obiektów();
      Radar_Statek_GLFrustrum.Scale.Z := zt_statek.x_prymityw_odleg³oœæ * Radar__Koryguj_Wielkoœæ_Obiektów();


      Radar_Statek_GLDummyCube.ResetRotations();

      //Radar_T³o_GLPlane.Position.Y := zt_statek.AbsolutePosition.Y; // 0 aby czêœciowo zanurzone statki i samoloty w powietrzu nie znika³y pod t³em radaru.

      Radar_GLCamera.Position.Y := kamera_radar__y_domyœlne_g * Radar__Skala_SpinEdit.Value * 0.01;


      Radio_Zasiêg_GLDisk.Visible := Radar__Dane_Z_Radia_CheckBox.Checked;
      Sonar_Zasiêg_GLDisk.Visible := Radar__Dane_Z_Sonaru_CheckBox.Checked;

      Radar_Statek_GLDummyCube.AbsoluteDirection := zt_statek.AbsoluteDirection;
      Radar_Statek_GLDummyCube.Direction.Y := 0; // Aby okrêgi radaru nie znika³y pod t³em radaru gdy statek siê przechyla.
      //Radar_Statek_GLDummyCube.AbsolutePosition := zt_statek.AbsolutePosition;
      Radar_Statek_GLDummyCube.AbsolutePosition := GLS.VectorGeometry.VectorMake( zt_statek.AbsolutePosition.X, 0, zt_statek.AbsolutePosition.Z ); // 0 aby czêœciowo zanurzone statki i samoloty w powietrzu nie znika³y pod t³em radaru.

      Radar_PN_Linia_GLLines.AbsolutePosition := Radar_Statek_GLDummyCube.AbsolutePosition;
      Radar_Wiatr_Kierunek_Linia_GLLines.AbsolutePosition := Radar_PN_Linia_GLLines.AbsolutePosition;


      Radar_Kamera_Kierunek_GLDisk.Visible := Radar__Kamera_Kierunek_Wyœwietlaj_CheckBox.Checked;

      Radar_Kamera_Kierunek_GLDummyCube.AbsoluteDirection := Gra_GLCamera.AbsoluteDirection;
      Radar_Kamera_Kierunek_GLDummyCube.Direction.Y := 0;
      Radar_Kamera_Kierunek_GLDummyCube.AbsoluteUp := VectorMake( 0, 1, 0 );

      Radar_Kamera_Kierunek_GLDisk.OuterRadius := 2.0 * Radar__Skala_SpinEdit.Value;
      Radar_PN_Linia_GLLines.Scale.X := 40.0 * Radar__Koryguj_Wielkoœæ_Obiektów();
      Radar_Wiatr_Kierunek_Linia_GLLines.Scale.X := Radar_PN_Linia_GLLines.Scale.X;


      if not zt_statek.Zanurzenie_Peryskopowe__Przekroczone() then
        begin

          Radar_T³o_GLPlane.Material.FrontProperties.Diffuse.SetColor( 0.07843138, 0.3529412, 0.2039216 );

          Radar_Zasiêg_GLDisk.Material.PolygonMode := pmFill;
          //Radio_Zasiêg_GLDisk.Material.PolygonMode := pmLines; // S³abo widaæ kilka kropek na rogach.
          Radio_Zasiêg_GLDisk.Material.FrontProperties.Emission.SetColor( 0.4235294, 0.4235294, 0.1098039 );

        end
      else//if not zt_statek.Zanurzenie_Peryskopowe__Przekroczone() then
        begin

          Radar_T³o_GLPlane.Material.FrontProperties.Diffuse.SetColor( 0.07843138, 0.3529412, 0.4039216 );

          Radar_Zasiêg_GLDisk.Material.PolygonMode := pmLines;
          //Radio_Zasiêg_GLDisk.Material.PolygonMode := pmPoints; // S³abo widaæ kilka kropek na rogach.
          Radio_Zasiêg_GLDisk.Material.FrontProperties.Emission.Color := GLS.Color.clrGray50;

        end;
      //---//if not zt_statek.Zanurzenie_Peryskopowe__Przekroczone() then

      if Radar_GLSkyDome.Bands.Count > 1 then
        begin

          Radar_GLSkyDome.Bands.Items[ 0 ].StartColor.Color := Radar_T³o_GLPlane.Material.FrontProperties.Diffuse.Color;
          Radar_GLSkyDome.Bands.Items[ 0 ].StopColor.Color := Radar_GLSkyDome.Bands.Items[ 0 ].StartColor.Color;

          Radar_GLSkyDome.Bands.Items[ 1 ].StartColor.Color := Radar_GLSkyDome.Bands.Items[ 0 ].StartColor.Color;
          Radar_GLSkyDome.Bands.Items[ 1 ].StopColor.Color := Radar_GLSkyDome.Bands.Items[ 0 ].StartColor.Color;

        end;
      //---//if Radar_GLSkyDome.Bands.Count > 1 then

    end;
  //---//if zt_statek <> nil then


  // Komponent dok³adnie nie pilnuje zakresów.
  if Radar__Skala_SpinEdit.Value < Radar__Skala_SpinEdit.MinValue then
    Radar__Skala_SpinEdit.Value := Radar__Skala_SpinEdit.MinValue;


  // Dostosowuje wielkoœæ statku gracza na radarze.
  //Radar_Statek_GLFrustrum.Scale.X := 3.0 * Radar__Koryguj_Wielkoœæ_Obiektów();
  //Radar_Statek_GLFrustrum.Scale.Y := 6.0 * Radar__Koryguj_Wielkoœæ_Obiektów();


  // Dane powy¿ej odœwie¿a p³ynnie (dotycz¹ tylko wygl¹du radaru a nie prezentowanych na radarze (aktualnych) pozycji).
  if MilliSecondsBetween( Now(), radar_zegar_pozorny_r.ostatnie_wywo³anie ) < radar_zegar_pozorny_r.oczekiwanie_milisekundy then
    Exit;


  //xNx__Radio_Statki_W_Zasiêgu();
  Radar__Statki__L¹dy_Znane();


  Radar__Wyczyœæ();


  if   ( radar__rysowanie__l¹d_czas_milisekundy_g <= 10 )
    or (  MilliSecondsBetween( Now(), radar__rysowanie__l¹d__ostatnie_wywo³anie_data_czas_g ) > radar__rysowanie__l¹d_czas_milisekundy_g * 100  ) then
    begin

      Radar__Wyczyœæ( rcz_L¹dy );
      Radar__L¹d_Rysuj();
      radar__rysowanie__l¹d__ostatnie_wywo³anie_data_czas_g := Now();

    end;
  //---//if   ( radar__rysowanie__l¹d_czas_milisekundy_g <= 10 ) (...)


  Radar__Statki_Rysuj();


  if zt_statek <> nil then
    begin

      //Radar_Statek_GLDummyCube.ResetRotations();
      //
      //Radar_GLCamera.Position.Y := kamera_radar__y_domyœlne_g * Radar_Skala_SpinEdit.Value * 0.01;
      //
      //
      //Radio_Zasiêg_GLDisk.Visible := Radar_Dane_Z_Radia_CheckBox.Checked;
      //Sonar_Zasiêg_GLDisk.Visible := Radar_Dane_Z_Sonaru_CheckBox.Checked;
      //
      //Radar_Statek_GLDummyCube.AbsoluteDirection := zt_statek.AbsoluteDirection;
      //Radar_Statek_GLDummyCube.AbsolutePosition := zt_statek.AbsolutePosition;
      //
      //Radar_PN_Linia_GLLines.AbsolutePosition := Radar_Statek_GLDummyCube.AbsolutePosition;
      //Radar_Wiatr_Kierunek_Linia_GLLines.AbsolutePosition := Radar_PN_Linia_GLLines.AbsolutePosition;
      //
      //
      //Radar_Kamera_Kierunek_GLDisk.Visible := Radar_Kamera_Kierunek_Wyœwietlaj_CheckBox.Checked;
      //
      //Radar_Kamera_Kierunek_GLDummyCube.AbsoluteDirection := Gra_GLCamera.AbsoluteDirection;
      //Radar_Kamera_Kierunek_GLDummyCube.Direction.Y := 0;
      //Radar_Kamera_Kierunek_GLDummyCube.AbsoluteUp := VectorMake( 0, 1, 0 );
      //
      //Radar_Kamera_Kierunek_GLDisk.OuterRadius := 20.0 * Radar__Koryguj_Wielkoœæ_Obiektów();
      //Radar_PN_Linia_GLLines.Scale.X := 40.0 * Radar__Koryguj_Wielkoœæ_Obiektów();
      //Radar_Wiatr_Kierunek_Linia_GLLines.Scale.X := Radar_PN_Linia_GLLines.Scale.X;


      // Rysuje na radarze zasiêg broni.
      ztr := 0;

      if Radar__Broñ_Zasiêg_Wyœwietlaj_CheckBox.Checked then
        begin

          // Wybierze najwiêkszy dostêpny zasiêg.

          if    ( ar_Artyleria_CheckBox.Enabled )
            and (
                     ( zt_statek.amunicja_rodzaj_wybrana__artyleria )
                  or ( zt_statek.amunicja_rodzaj_wybrana__wszystkie )
                )
            and (  Length( zt_statek.artyleria_t ) > 0 )
            and ( ztr < zt_statek.artyleria_t[ 0 ].zasiêg__broñ ) then
            ztr := zt_statek.artyleria_t[ 0 ].zasiêg__broñ;

          if    ( ar_Bomba_G³êbinowa_CheckBox.Enabled )
            and (
                     ( zt_statek.amunicja_rodzaj_wybrana__bomba_g³êbinowa )
                  or ( zt_statek.amunicja_rodzaj_wybrana__wszystkie )
                )
            and (  Length( zt_statek.bomba_g³êbinowa_t ) > 0 )
            and ( ztr < zt_statek.bomba_g³êbinowa_t[ 0 ].zasiêg__broñ ) then
            ztr := zt_statek.bomba_g³êbinowa_t[ 0 ].zasiêg__broñ;

          if    ( ar_Pocisk_CheckBox.Enabled )
            and (
                     ( zt_statek.amunicja_rodzaj_wybrana__pocisk )
                  or ( zt_statek.amunicja_rodzaj_wybrana__wszystkie )
                )
            and (  Length( zt_statek.dzia³a_t ) > 0 )
            and ( ztr < zt_statek.dzia³a_t[ 0 ].zasiêg__broñ ) then
            ztr := zt_statek.dzia³a_t[ 0 ].zasiêg__broñ;

          if    ( ar_Je¿e_G³êbinowe_CheckBox.Enabled )
            and (
                     ( zt_statek.amunicja_rodzaj_wybrana__je¿e_g³êbinowe )
                  or ( zt_statek.amunicja_rodzaj_wybrana__wszystkie )
                )
            and (  Length( zt_statek.je¿e_g³êbinowe_t ) > 0 )
            and ( ztr < zt_statek.je¿e_g³êbinowe_t[ 0 ].zasiêg__broñ ) then
            ztr := zt_statek.je¿e_g³êbinowe_t[ 0 ].zasiêg__broñ;

          if    ( ar_Torpeda_CheckBox.Enabled )
            and (
                     ( zt_statek.amunicja_rodzaj_wybrana__torpeda )
                  or ( zt_statek.amunicja_rodzaj_wybrana__wszystkie )
                )
            and ( ztr < zt_statek.torpedy_wyrzutnie_t[ 0 ].zasiêg__broñ ) then
            ztr := zt_statek.torpedy_wyrzutnie_t[ 0 ].zasiêg__broñ;

        end;
      //---//if Radar__Broñ_Zasiêg_Wyœwietlaj_CheckBox.Checked then

      Broñ_Zasiêg_GLDisk.OuterRadius := ztr;
      //---// Rysuje na radarze zasiêg broni.

    end;
  //---//if zt_statek <> nil then


  radar_zegar_pozorny_r.ostatnie_wywo³anie := Now();

end;//---//Radar__Odœwie¿().

//Funkcja Radar_Panel_Ukrywanie().
procedure TStatki_Form.Radar_Panel_Ukrywanie();
var
  mysz_pozycja_point : TPoint;
begin

  if not Radar__Przyciski_Panel__Ukrywaj_CheckBox.Checked then
    begin

      if not Radar__Przyciski_Panel.Visible then
        Radar__Przyciski_Panel.Visible := true;

      if radar__przyciski_panel__ukrywanie__odliczanie_pocz¹tek_czas_sekundy_i_g > 0 then
        radar__przyciski_panel__ukrywanie__odliczanie_pocz¹tek_czas_sekundy_i_g := -1;

      Exit;

    end;
  //---//if not Radar__Przyciski_Panel__Ukrywaj_CheckBox.Checked then


  mysz_pozycja_point := Mouse.CursorPos;
  mysz_pozycja_point := ScreenToClient( mysz_pozycja_point );

  if    ( mysz_pozycja_point.X >= Radar_Panel.Left )
    and ( mysz_pozycja_point.X <= Radar_Panel.Left + Radar_Panel.Width )
    and ( mysz_pozycja_point.Y >= Radar_Panel.Top )
    //and ( mysz_pozycja_point.Y <= Radar_Panel.Top + Radar_Panel.Height ) then
    and ( mysz_pozycja_point.Y <= Radar_Panel.Top + Radar__Przyciski_Panel.Height ) // Kursor myszy na obszarze panelu przycisków radaru.
    or ( Radar__Powiêksz_Button.Focused() )
    or ( Radar__Pomniejsz_Button.Focused() )
    or ( Radar__Skala_SpinEdit.Focused() )
    or ( Radar__Czu³oœæ_SpinEdit.Focused() )
    or ( Radar__Dane_Z_Radia_CheckBox.Focused() )
    or ( Radar__Dane_Z_Sonaru_CheckBox.Focused() )
    or ( Radar__Zmieniaj_Czu³oœæ_Wraz_Ze_Skal¹_CheckBox.Focused() ) then
    begin

      if not Radar__Przyciski_Panel.Visible then
        begin

          Radar__Przyciski_Panel.Visible := true;

          if radar__przyciski_panel__ukrywanie__odliczanie_pocz¹tek_czas_sekundy_i_g > 0 then
            radar__przyciski_panel__ukrywanie__odliczanie_pocz¹tek_czas_sekundy_i_g := -1;

        end;
      //---//if not Radar__Przyciski_Panel.Visible then

    end
  else//if    ( mysz_pozycja_point.X >= Radar_Panel.Left ) (...)
    begin

      if radar__przyciski_panel__ukrywanie__odliczanie_pocz¹tek_czas_sekundy_i_g <= -1 then
        radar__przyciski_panel__ukrywanie__odliczanie_pocz¹tek_czas_sekundy_i_g := Czas_Teraz_W_Sekundach()
      else//if radar__przyciski_panel__ukrywanie__odliczanie_pocz¹tek_czas_sekundy_i_g <= -1 then
        if    ( Radar__Przyciski_Panel.Visible )
          and (  Czas_Miêdzy_W_Sekundach( radar__przyciski_panel__ukrywanie__odliczanie_pocz¹tek_czas_sekundy_i_g ) > radar__przyciski_panel__ukrywanie__oczekiwanie_sekundy_c  ) then
          begin

            Radar__Przyciski_Panel.Visible := false;
            radar__przyciski_panel__ukrywanie__odliczanie_pocz¹tek_czas_sekundy_i_g := -1;

          end;
        //---//if    ( Radar__Przyciski_Panel.Visible ) (...)

    end;
  //---//if    ( mysz_pozycja_point.X >= Radar_Panel.Left ) (...)

  //Label1.Caption := 'X = ' + IntToStr( mysz_pozycja_point.X ) + ', Y = ' + IntToStr( mysz_pozycja_point.Y ); // Wspó³rzêdne wed³ug okna.

end;//---//Funkcja Radar_Panel_Ukrywanie().

//Funkcja Radar__Statki__L¹dy_Znane().
procedure TStatki_Form.Radar__Statki__L¹dy_Znane();

  //Funkcja Radio_Dane_Wymieñ() w Radar__Statki__L¹dy_Znane().
  procedure Radio_Dane_Wymieñ( zt_statek__1_f, zt_statek__2_f : TStatek );

    //Funkcja Wartoœci_Nowe_Dodaj() w Radio_Dane_Wymieñ() w Radar__Statki__L¹dy_Znane().
    procedure Wartoœci_Nowe_Dodaj( var wartoœæ_znane_f : TWieloosobowe_String; wartoœæ_do_dodania_f : TWieloosobowe_String );
    var
      zti_l : integer;
      zts_l : string;
    begin

      //
      // Funkcja do wartoœci znanych dopisuje nowe, niewystêpuj¹ce wartoœci.
      //
      // Parametry:
      //   wartoœæ_znane_f - w postaci '-99, 1, 2, 3, -99'.
      //   wartoœæ_do_dodania_f - w postaci '-99, 1, 2, 3, -99'.
      //

      zti_l := Pos( ',', wartoœæ_do_dodania_f );

      while zti_l > 0 do
        begin

          zts_l := Trim(  Copy( wartoœæ_do_dodania_f, 1, zti_l - 1 )  );
          Delete( wartoœæ_do_dodania_f, 1, zti_l );


          if    (  Trim( zts_l ) <> ''  )
            and ( zts_l <> '-99' )
            and (  Pos( ', ' + zts_l + ',', wartoœæ_znane_f ) <= 0  ) then
            //wartoœæ_znane_f := StringReplace( wartoœæ_znane_f, ', -99', ', ' + zts_l + ', -99', [ rfReplaceAll ] );
            begin

              zts_l := ', ' + zts_l;

              if Length( wartoœæ_znane_f + zts_l ) <= High( TWieloosobowe_String ) then
                wartoœæ_znane_f := StringReplace( wartoœæ_znane_f, ', -99', zts_l + ', -99', [ rfReplaceAll ] );

            end;
          //---//if    (  Trim( zts_l ) <> ''  ) (...)


          zti_l := Pos( ',', wartoœæ_do_dodania_f );

        end;
      //---//while zti_l > 0 do

    end;//---//Funkcja Wartoœci_Nowe_Dodaj() w Radio_Dane_Wymieñ() w Radar__Statki__L¹dy_Znane().

  begin//Funkcja Radio_Dane_Wymieñ() w Radar__Statki__L¹dy_Znane().

    //
    // Funkcja sprawdza czy informacje miêdzy dwoma statkami mog¹ byæ wymienione przez radio.
    //
    // Zwraca prawdê gdy informacje miêdzy dwoma statkami mog¹ byæ wymienione przez radio.
    //
    // Parametry:
    //   zt_statek__1_f
    //   zt_statek__2_f
    //

    if    ( zt_statek__1_f <> nil )
      and ( zt_statek__2_f <> nil )
      and ( zt_statek__1_f.id_grupa = zt_statek__2_f.id_grupa ) // Informacje wymieniaj¹ tylko statki z tej samej grupy.
      and ( zt_statek__1_f.uszkodzone_czas_sekundy_i__radio = 0 ) // Informacje wymieniaj¹ tylko statki ze sprawnym radiem.
      and ( zt_statek__2_f.uszkodzone_czas_sekundy_i__radio = 0 ) // Informacje wymieniaj¹ tylko statki ze sprawnym radiem.
      and (   Pos(  ', ' + IntToStr( zt_statek__2_f.id_statek ) + ',', zt_statek__1_f.radio_³¹cznoœæ_id_statki_w_zasiêgu  ) > 0   ) // Statki s¹ w zasiêgu radiowym.
      and (   Pos(  ', ' + IntToStr( zt_statek__1_f.id_statek ) + ',', zt_statek__2_f.radio_³¹cznoœæ_id_statki_w_zasiêgu  ) > 0   ) then // Statki s¹ w zasiêgu radiowym. Powinno wystarczyæ tylko sprawdzenie dla jednego statku.
      begin

        Wartoœci_Nowe_Dodaj( zt_statek__1_f.radio_id_l¹dy_w_zasiêgu, zt_statek__2_f.radar_id_l¹dy_w_zasiêgu );
        Wartoœci_Nowe_Dodaj(  zt_statek__1_f.radio_id_statki_w_zasiêgu, zt_statek__2_f.radar_id_statki_w_zasiêgu + ', ' + IntToStr( zt_statek__2_f.id_statek ) + ','  ); // zt_statek__2_f.id_statek - pytany statek przekazuje w³asn¹ pozycjê.
        Wartoœci_Nowe_Dodaj( zt_statek__1_f.radio_id_statki_w_zasiêgu, zt_statek__2_f.sonar_id_statki_w_zasiêgu );

      end;
    //---//if    ( zt_statek__1_f <> nil ) (...)

  end;//---//Funkcja Radio_Dane_Wymieñ() w Radar__Statki__L¹dy_Znane().

  //Funkcja Czy_Statek_Widoczny__Skanowanie() w Radar__Statki__L¹dy_Znane().
  function Czy_Statek_Widoczny__Skanowanie( statek_skanuj¹cy_f, statek_skanowany_f : TStatek; const dane_z_radaru_f, dane_z_sonaru_f : boolean ) : boolean;
  begin

    //
    // Funkcja sprawdza czy statek skanuj¹cy widzi (radarem itp.) statek skanowany.
    //
    // Zwraca prawdê gdy statek skanuj¹cy widzi statek skanowany.
    //
    // Parametry:
    //   statek_skanuj¹cy_f - statek, który skanuje radarem itp. obszar i zbiera dane
    //   statek_skanowany_f - statek sprawdzany czy jest widoczny dla statku skanuj¹cego
    //   dane_z_radaru_f - czy uwzglêdniaæ dane z radaru
    //   dane_z_sonaru_f - czy uwzglêdniaæ dane z sonaru
    //

    Result := false;

    if   ( statek_skanuj¹cy_f = nil )
      or ( statek_skanowany_f = nil )
      or (  not Assigned( statek_skanuj¹cy_f )  )
      or (  not Assigned( statek_skanowany_f )  ) then
      Exit;


    if   ( // Dane z radaru.
               ( dane_z_radaru_f )
           and ( statek_skanuj¹cy_f.radar_zasiêg > 0 )
           and ( not statek_skanuj¹cy_f.Zanurzenie_Peryskopowe__Przekroczone() ) // W zanurzeniu radar nie dzia³a.
           and ( not statek_skanowany_f.Zanurzenie_Peryskopowe__Utrzymywane() ) // Statków w zanurzeniu peryskopowym nie widaæ na radarze.
           and ( not statek_skanowany_f.Zanurzenie_Peryskopowe__Przekroczone() ) // Zanurzonych statków nie widaæ na radarze.
           and ( statek_skanuj¹cy_f.uszkodzone_czas_sekundy_i__radar = 0 )
           and ( statek_skanuj¹cy_f.DistanceTo( statek_skanowany_f ) <= statek_skanuj¹cy_f.radar_zasiêg ) // Statek w zasiêgu radaru.
           // Statki, które siê nie zanurzaj¹ a znajd¹ siê pod wod¹ s¹ widoczne.
         ) //---// Dane z radaru.
      or ( // Dane z sonaru.
               ( dane_z_sonaru_f )
           and ( statek_skanuj¹cy_f.sonar_zasiêg > 0 )
           //and ( statek_skanowany_f.Zanurzenie_Peryskopowe__Przekroczone() ) // Sonar wykrywa równie¿ statki na wodzie.
           and ( statek_skanuj¹cy_f.uszkodzone_czas_sekundy_i__sonar = 0 )
           and ( statek_skanuj¹cy_f.DistanceTo( statek_skanowany_f ) <= statek_skanuj¹cy_f.sonar_zasiêg ) // Statek w zasiêgu sonaru.
         ) //---// Dane z sonaru.
      then
      Result := true;

  end;//---//Funkcja Czy_Statek_Widoczny__Skanowanie() w Radar__Statki__L¹dy_Znane().

  //Funkcja Czy_Statek_Widoczny__Optycznie() w Radar__Statki__L¹dy_Znane().
  function Czy_Statek_Widoczny__Optycznie( statek_skanuj¹cy_f, statek_skanowany_f : TStatek ) : boolean;
  var
    ztr_1,
    ztr_2,
    optyka_zasiêg_l
      : real;
  begin

    //
    // Funkcja sprawdza czy statek skanuj¹cy widzi (optycznie) statek skanowany.
    //
    // Zwraca prawdê gdy statek skanuj¹cy widzi statek skanowany.
    //
    // Parametry:
    //   statek_skanuj¹cy_f - statek, który skanuje optycznie obszar i zbiera dane
    //   statek_skanowany_f - statek sprawdzany czy jest widoczny dla statku skanuj¹cego
    //

    Result := false;

    if   ( statek_skanuj¹cy_f = nil )
      or ( statek_skanowany_f = nil )
      or (  not Assigned( statek_skanuj¹cy_f )  )
      or (  not Assigned( statek_skanowany_f )  ) then
      Exit;

    //if statek_skanuj¹cy_f.radar_zasiêg < samolot_w_powietrzu_wysokoœæ_od_c * 200 then
    //  optyka_zasiêg_l := samolot_w_powietrzu_wysokoœæ_od_c * 100 // 200 * 0.5 = 100
    //else//if statek_skanuj¹cy_f.radar_zasiêg < samolot_w_powietrzu_wysokoœæ_od_c * 200 then
    //  optyka_zasiêg_l := statek_skanuj¹cy_f.radar_zasiêg * 0.5;

    if statek_skanuj¹cy_f.luneta_zasiêg <= 0 then
      optyka_zasiêg_l := samolot_w_powietrzu_wysokoœæ_od_c * 100
    else//if statek_skanuj¹cy_f.luneta_zasiêg <= 0 then
      optyka_zasiêg_l := statek_skanuj¹cy_f.luneta_zasiêg;


    // Z wysokoœci widaæ wiêcej.
    if    ( statek_skanuj¹cy_f.AbsolutePosition.Y > samolot_w_powietrzu_wysokoœæ_od_c )
      and ( not statek_skanowany_f.Zanurzenie_Peryskopowe__Utrzymywane() ) then // Statki w zanurzeniu peryskopowym s³abo widaæ.
      if statek_skanuj¹cy_f.AbsolutePosition.Y < samolot_w_powietrzu_wysokoœæ_od_c * 200 then
        optyka_zasiêg_l := optyka_zasiêg_l + statek_skanuj¹cy_f.AbsolutePosition.Y * 0.5 //???
      else//if statek_skanuj¹cy_f.AbsolutePosition.Y <= samolot_w_powietrzu_wysokoœæ_od_c * 200 then
        optyka_zasiêg_l := optyka_zasiêg_l + samolot_w_powietrzu_wysokoœæ_od_c * 100; // 200 * 0.5 = 100


    // Im wy¿szy statek tym dalej widzi.
    optyka_zasiêg_l := optyka_zasiêg_l + 10 * statek_skanuj¹cy_f.y_prymityw_najwiêksze;

    // Im wy¿szy statek tym lepiej go widaæ.
    if not statek_skanowany_f.Zanurzenie_Peryskopowe__Utrzymywane() then // Statki w zanurzeniu peryskopowym s³abo widaæ.
      optyka_zasiêg_l := optyka_zasiêg_l + 50 * statek_skanowany_f.y_prymityw_najwiêksze;


    // Statki w zanurzeniu peryskopowym s³abo widaæ.
    if statek_skanowany_f.Zanurzenie_Peryskopowe__Utrzymywane() then
      optyka_zasiêg_l := optyka_zasiêg_l * zanurzenie_peryskopowe__utrzymywane_modyfikator_c;


    // Je¿eli jeden statek jest nad chmurami, a drugi pod chmurami lub oba statki s¹ w chmurach to zasiêg widzenia jest ograniczony.
    if    ( Chmury_CheckBox.Checked )
      and (
               (
                     ( statek_skanuj¹cy_f.AbsolutePosition.Y >= chmury__wysokoœæ_g )
                 and ( statek_skanowany_f.AbsolutePosition.Y <= chmury__wysokoœæ_g )
               )
            or (
                     ( statek_skanuj¹cy_f.AbsolutePosition.Y <= chmury__wysokoœæ_g )
                 and ( statek_skanowany_f.AbsolutePosition.Y >= chmury__wysokoœæ_g )
               )
          ) then
      optyka_zasiêg_l := optyka_zasiêg_l * 0.5;


    // Mg³a ogranicza widocznoœæ.
    //ztr_1 := optyka_zasiêg_l * Ln( Mg³a_SpinEdit.Value + 1 ) * (  100 / Ln( 1001 )  ) * 0.01; // Logarytm nie jest od 0 wiêc dodanie do zakresu 1 (1 - 1001).
    ztr_1 := optyka_zasiêg_l * mg³a_intensywnoœæ_g * 0.01;

      // W³¹czone œwiat³a zwiêkszaj¹ widocznoœæ.
    ztr_2 := 1;

    if statek_skanowany_f.œwiat³a_w³¹czone then
      ztr_2 := ztr_2 - 0.25;

    if statek_skanowany_f.œwiat³a_dodatkowe_w³¹czone then
      ztr_2 := ztr_2 - 0.125;

    if ztr_2 < 1 then
      ztr_1 := ztr_1 * ztr_2;
      //---// W³¹czone œwiat³a zwiêkszaj¹ widocznoœæ

    ztr_1 := ztr_1 - samolot_w_powietrzu_wysokoœæ_od_c; // Podczas pe³nej mg³y z bliska siebie widz¹.

    if ztr_1 > 0 then
      optyka_zasiêg_l := optyka_zasiêg_l - ztr_1;
    //---// Mg³a ogranicza widocznoœæ.


    // Noc ogranicza widocznoœæ.
    ztr_1 := optyka_zasiêg_l * ( 1 - dzieñ_jasnoœæ_g );

      // W³¹czone œwiat³a zwiêkszaj¹ widocznoœæ.
    ztr_2 := 1;

    if statek_skanowany_f.œwiat³a_w³¹czone then
      ztr_2 := ztr_2 - 0.5;

    if statek_skanowany_f.œwiat³a_dodatkowe_w³¹czone then
      ztr_2 := ztr_2 - 0.25;

    if ztr_2 < 1 then
      ztr_1 := ztr_1 * ztr_2;
      //---// W³¹czone œwiat³a zwiêkszaj¹ widocznoœæ

    ztr_1 := ztr_1 - samolot_w_powietrzu_wysokoœæ_od_c * 3; // Podczas pe³nej nocy z bliska siebie widz¹.

    if ztr_1 > 0 then
      optyka_zasiêg_l := optyka_zasiêg_l - ztr_1;
    //---// Noc ogranicza widocznoœæ.


    // Z bardzo bliska widz¹ siebie.
    ztr_1 := 0;

    // Im wiêkszy statek tym lepiej go widaæ.
    ztr_1 := ztr_1 + statek_skanowany_f.x_prymityw_odleg³oœæ;
    ztr_1 := ztr_1 + statek_skanowany_f.z_prymityw_odleg³oœæ;
    //---// Z bardzo bliska widz¹ siebie.


    if     (  statek_skanuj¹cy_f.DistanceTo( statek_skanowany_f ) < ztr_1  ) // Z bardzo bliska widz¹ siebie.
        or (
                 ( not statek_skanuj¹cy_f.Zanurzenie_Peryskopowe__Przekroczone() )
             and ( not statek_skanowany_f.Zanurzenie_Peryskopowe__Przekroczone() )
             and ( statek_skanuj¹cy_f.DistanceTo( statek_skanowany_f ) < optyka_zasiêg_l )
           ) then
      Result := true;

  end;//---//Funkcja Czy_Statek_Widoczny__Optycznie() w Radar__Statki__L¹dy_Znane().

var
  i,
  j,
  zti
    : integer;
begin//Funkcja Radar__Statki__L¹dy_Znane().

  //
  // Funkcja ustawia statkom jakie id statki, id l¹dy maj¹ w zasiêgu radaru, sonaru i radia.
  //

  if czy_klient_g then
    Exit;


  // Jakie statki s¹ widoczne na radarze, sonarze, jakie statki z w³asnej grupy ma w zasiêgu radia statek.
  // Jakie l¹dy s¹ widoczne na radarze.
  for i := 0 to Length( statki_t ) - 1 do
    begin

      if statki_t[ i ] <> nil then
        begin

          statki_t[ i ].radar_id_statki_w_zasiêgu := '-99';
          statki_t[ i ].radio_³¹cznoœæ_id_statki_w_zasiêgu := '-99';
          statki_t[ i ].sonar_id_statki_w_zasiêgu := '-99';


          for j := 0 to Length( statki_t ) - 1 do
            begin

              if    ( statki_t[ j ] <> nil )
                and ( statki_t[ i ] <> statki_t[ j ] ) then
                begin

                  if Czy_Statek_Widoczny__Skanowanie( statki_t[ i ], statki_t[ j ], true, false ) then
                    statki_t[ i ].radar_id_statki_w_zasiêgu := statki_t[ i ].radar_id_statki_w_zasiêgu +
                      ', ' + IntToStr( statki_t[ j ].id_statek );

                  if    ( statki_t[ i ].id_statek <> statki_t[ j ].id_statek )
                    and ( statki_t[ i ].id_grupa = statki_t[ j ].id_grupa )
                    and ( statki_t[ i ].uszkodzone_czas_sekundy_i__radio = 0 )
                    and ( statki_t[ j ].uszkodzone_czas_sekundy_i__radio = 0 )
                    and ( not statki_t[ i ].Zanurzenie_Peryskopowe__Przekroczone() )
                    and ( not statki_t[ j ].Zanurzenie_Peryskopowe__Przekroczone() )
                    and ( statki_t[ i ].DistanceTo( statki_t[ j ] ) <= statki_t[ i ].radio_zasiêg )
                    and ( statki_t[ j ].DistanceTo( statki_t[ i ] ) <= statki_t[ j ].radio_zasiêg ) then // Oba statki musz¹ byæ w zasiêgu swoich radiów. Mog³o by byæ, ¿e ten statek, który odbiera dane jest w zasiêgu radia statku, który nadaje ale za³ó¿my, ¿e komunikacja musi byæ obustronna.
                    statki_t[ i ].radio_³¹cznoœæ_id_statki_w_zasiêgu := statki_t[ i ].radio_³¹cznoœæ_id_statki_w_zasiêgu +
                      ', ' + IntToStr( statki_t[ j ].id_statek );

                  if Czy_Statek_Widoczny__Skanowanie( statki_t[ i ], statki_t[ j ], false, true ) then
                    statki_t[ i ].sonar_id_statki_w_zasiêgu := statki_t[ i ].sonar_id_statki_w_zasiêgu +
                      ', ' + IntToStr( statki_t[ j ].id_statek );

                end;
              //---//if    ( statki_t[ j ] <> nil ) (...)

            end;
          //---//for j := 0 to Length( statki_t ) - 1 do


          statki_t[ i ].radar_id_statki_w_zasiêgu := statki_t[ i ].radar_id_statki_w_zasiêgu +
            ', -99';

          statki_t[ i ].radio_³¹cznoœæ_id_statki_w_zasiêgu := statki_t[ i ].radio_³¹cznoœæ_id_statki_w_zasiêgu +
            ', -99';

          statki_t[ i ].sonar_id_statki_w_zasiêgu := statki_t[ i ].sonar_id_statki_w_zasiêgu +
            ', -99';



          statki_t[ i ].radar_id_l¹dy_w_zasiêgu := '-99';

          for j := 0 to l¹d_list.Count - 1 do
            begin

              if    (  not Wyglad_Elementy.Radar_Ignoruje( TGLCustomSceneObject(l¹d_list[ j ]) )  )
                and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(l¹d_list[ j ]) ) <> Wyglad_Elementy.or_DŸwiêk_Emiter  )
                and (  not ( TGLCustomSceneObject(l¹d_list[ j ]) is TSt_GLDummyCube )  ) // Kontenerów na obiekty nie rysuje na radarze.
                and ( not statki_t[ i ].Zanurzenie_Peryskopowe__Przekroczone() ) // W zanurzeniu radar nie dzia³a.
                and ( statki_t[ i ].uszkodzone_czas_sekundy_i__radar = 0 )
                //and (  statki_t[ i ].DistanceTo( TGLCustomSceneObject(l¹d_list[ j ]) ) <= statki_t[ i ].radar_zasiêg  )
                and (  statki_t[ i ].DistanceTo( TGLCustomSceneObject(l¹d_list[ j ]) ) <= statki_t[ i ].radar_zasiêg + ( TGLCustomSceneObject(l¹d_list[ j ]).Scale.X + TGLCustomSceneObject(l¹d_list[ j ]).Scale.Z ) * 0.5  ) then
                begin

                  statki_t[ i ].radar_id_l¹dy_w_zasiêgu := statki_t[ i ].radar_id_l¹dy_w_zasiêgu +
                    ', ' + IntToStr(  Wyglad_Elementy.Identyfikator_Elementu( TGLCustomSceneObject(l¹d_list[ j ]) )  );

                end;
              //---//if    ( not Wyglad_Elementy.Radar_Ignoruje( TGLCustomSceneObject(l¹d_list[ j ]) ) ) (...)

            end;
          //---//for j := 0 to l¹d_list.Count - 1 do

          statki_t[ i ].radar_id_l¹dy_w_zasiêgu := statki_t[ i ].radar_id_l¹dy_w_zasiêgu +
            ', -99';

        end;
      //---//if statki_t[ i ] <> nil then

    end;
  //---//for i := 0 to Length( statki_t ) - 1 do
  //---// Jakie statki s¹ widoczne na radarze, sonarze, jakie statki z w³asnej grupy ma w zasiêgu radia statek.


  // Dane z radia.
  for i := 0 to Length( statki_t ) - 1 do
    begin

      if statki_t[ i ] <> nil then
        begin

          statki_t[ i ].radio_id_l¹dy_w_zasiêgu := '-99, -99';
          statki_t[ i ].radio_id_statki_w_zasiêgu := '-99, -99';


          for j := 0 to Length( statki_t ) - 1 do
            if    ( statki_t[ j ] <> nil )
              and ( statki_t[ i ] <> statki_t[ j ] ) then
              Radio_Dane_Wymieñ( statki_t[ i ], statki_t[ j ] );

        end;
      //---//if statki_t[ i ] <> nil then

    end;
  //---//for i := 0 to Length( statki_t ) - 1 do
  //---// Dane z radia.


  // Zbiera dane dla SI.
  for i := 0 to Length( statki_t ) - 1 do
    begin

      if statki_t[ i ] <> nil then
        begin

          SetLength( statki_t[ i ].si__statki_znane_r_t, 0 );


          for j := 0 to Length( statki_t ) - 1 do
            begin

              if    ( statki_t[ j ] <> nil )
                and ( statki_t[ i ] <> statki_t[ j ] ) then
                begin

                  if   (
                             ( statki_t[ i ].uszkodzone_czas_sekundy_i__radio = 0 )
                         and (   Pos(  ', ' + IntToStr( statki_t[ j ].id_statek ) + ',', statki_t[ i ].radio_id_statki_w_zasiêgu  ) > 0   ) // Statek ma w zasiêgu radia sprawdzany statek.
                       )
                    or (  Czy_Statek_Widoczny__Skanowanie( statki_t[ i ], statki_t[ j ], true, true )  )
                    or (  Czy_Statek_Widoczny__Optycznie( statki_t[ i ], statki_t[ j ] )  ) then
                    begin

                      zti := Length( statki_t[ i ].si__statki_znane_r_t );
                      SetLength( statki_t[ i ].si__statki_znane_r_t, zti + 1 );
                      statki_t[ i ].si__statki_znane_r_t[ zti ].id_grupa__sisz := statki_t[ j ].id_grupa;
                      statki_t[ i ].si__statki_znane_r_t[ zti ].id_statek__sisz := statki_t[ j ].id_statek;

                    end;
                  //---//if   ( (...)

                end;
              //---//if    ( statki_t[ j ] <> nil ) (...)

            end;
          //---//for j := 0 to Length( statki_t ) - 1 do

        end;
      //---//if statki_t[ i ] <> nil then

    end;
  //---//for i := 0 to Length( statki_t ) - 1 do
  //---// Zbiera dane dla SI.

end;//---//Funkcja Radar__Statki__L¹dy_Znane().

//Funkcja Radar__Statki_Rysuj().
procedure TStatki_Form.Radar__Statki_Rysuj();
var
  œlad_rysuj : boolean;
  i : integer;
  ztsi : single;
  zt_gl_capsule : TGLCapsule;
  zt_gl_dummy_cube : TGLDummyCube;
  zt_gl_frustrum : TGLFrustrum;
  zt_gl_sphere : TGLSphere;
  zt_radar_obiekt : Klasy_Dodatkowe.TRadar_Obiekt;
  zt_amunicja_wystrzelona_list : TList;
  zt_statek : TStatek;
begin

  zt_statek := Statek_Gracza__Gracz_Tryb_Zwróæ();

  radar__rysowanie__opóŸnienie_cykli__œlad_g := radar__rysowanie__opóŸnienie_cykli__œlad_g + 1;

  if radar__rysowanie__opóŸnienie_cykli__œlad_g >= 5 then
    begin

      radar__rysowanie__opóŸnienie_cykli__œlad_g := 0;
      œlad_rysuj := true;

    end
  else//if radar__rysowanie__opóŸnienie_cykli__œlad_g >= 5 then
    œlad_rysuj := false;


  // Rysuje statki.
  for i := 0 to Length( statki_t ) - 1 do
    begin

      if statki_t[ i ] <> nil then
        begin

          if   ( zt_statek = nil )
            or (
                     ( zt_statek <> nil )
                 and (
                          ( zt_statek.id_statek = statki_t[ i ].id_statek )
                       or (   Pos(  ', ' + IntToStr( statki_t[ i ].id_statek ) + ',', zt_statek.radar_id_statki_w_zasiêgu  ) > 0   ) // Statek ma w zasiêgu radaru sprawdzany statek.
                       or (
                                ( Radar__Dane_Z_Radia_CheckBox.Checked )
                            and (   Pos(  ', ' + IntToStr( statki_t[ i ].id_statek ) + ',', zt_statek.radio_id_statki_w_zasiêgu  ) > 0   ) // Statek ma w zasiêgu radia sprawdzany statek.
                          )
                       or (
                                ( Radar__Dane_Z_Sonaru_CheckBox.Enabled )
                            and ( Radar__Dane_Z_Sonaru_CheckBox.Checked )
                            and (   Pos(  ', ' + IntToStr( statki_t[ i ].id_statek ) + ',', zt_statek.sonar_id_statki_w_zasiêgu  ) > 0   ) // Statek ma w zasiêgu sonaru sprawdzany statek.
                          )
                     )
               ) then
            begin

              if zt_statek <> statki_t[ i ] then
                begin

                  zt_gl_dummy_cube := TGLDummyCube.Create( Self );
                  zt_gl_dummy_cube.Parent := Radar_Obiekty_GLDummyCube;
                  zt_gl_dummy_cube.Pickable := false;

                  //ztsi := statki_t[ i ].AbsolutePosition.Y;
                  //
                  //if ztsi < 0 then
                  //  ztsi := 0; // Aby czêœciowo zanurzone statki nie znika³y pod t³em radaru.
                  ztsi := 0; // Aby czêœciowo zanurzone statki i samoloty w powietrzu nie znika³y pod t³em radaru.

                  zt_gl_dummy_cube.AbsolutePosition := VectorMake( statki_t[ i ].AbsolutePosition.X, ztsi, statki_t[ i ].AbsolutePosition.Z );

                  zt_gl_dummy_cube.AbsoluteDirection := statki_t[ i ].AbsoluteDirection;


                  zt_gl_frustrum := TGLFrustrum.Create( Self );
                  zt_gl_frustrum.Parent := zt_gl_dummy_cube;
                  zt_gl_frustrum.Pickable := false;
                  zt_gl_frustrum.PitchAngle := Radar_Statek_GLFrustrum.PitchAngle;
                  zt_gl_frustrum.RollAngle := Radar_Statek_GLFrustrum.RollAngle;
                  zt_gl_frustrum.Height := Radar_Statek_GLFrustrum.Height;
                  zt_gl_frustrum.Scale.X := statki_t[ i ].y_prymityw_najwiêksze * Radar__Koryguj_Wielkoœæ_Obiektów();
                  zt_gl_frustrum.Scale.Y := statki_t[ i ].z_prymityw_odleg³oœæ * Radar__Koryguj_Wielkoœæ_Obiektów();
                  zt_gl_frustrum.Scale.Z := statki_t[ i ].x_prymityw_odleg³oœæ * Radar__Koryguj_Wielkoœæ_Obiektów();


                  if zt_statek <> nil then
                    if zt_statek.id_grupa = statki_t[ i ].id_grupa then
                      zt_gl_frustrum.Material.FrontProperties.Diffuse.Color := GLS.Color.clrSpringGreen
                    else//if zt_statek.id_grupa = statki_t[ i ].id_grupa then
                      zt_gl_frustrum.Material.FrontProperties.Diffuse.Color := GLS.Color.clrOrangeRed;


                  // Dane z sonaru.
                  if statki_t[ i ].Zanurzenie_Peryskopowe__Przekroczone() then
                    zt_gl_frustrum.Material.FrontProperties.Emission.Color := GLS.Color.clrGray50
                  else//if statki_t[ i ].Zanurzenie_Peryskopowe__Przekroczone() then
                    if statki_t[ i ].AbsolutePosition.Y > 5 then
                      begin

                        // W powietrzu.

                        zt_gl_frustrum.Material.FrontProperties.Diffuse.Alpha := 0.5;
                        zt_gl_frustrum.Material.BlendingMode := bmCustom;

                      end;
                    //---//if statki_t[ i ].AbsolutePosition.Y > 5 then


                  // Zatopione.
                  if statki_t[ i ].punkty_¿ycia_aktualne <= 0 then
                    zt_gl_frustrum.Material.FrontProperties.Diffuse.Color := GLS.VectorGeometry.VectorScale( zt_gl_frustrum.Material.FrontProperties.Diffuse.Color, 0.2 );



                  if    ( Sonarowe_U³atwienie_CheckBox.Checked )
                    and (  Pos(  ', ' + IntToStr( statki_t[ i ].id_statek ) + ',', zt_statek.sonar_id_statki_w_zasiêgu  ) > 0  )
                    and (
                             (     // Statek skanuj¹cy jest zanurzony.
                                   ( zt_statek.czy_zanurzanie )
                               and ( Pod_Wod¹_GLHUDSprite.Visible )
                               and (
                                        ( zt_statek.Zanurzenie_Peryskopowe__Utrzymywane() )
                                     or ( zt_statek.Zanurzenie_Peryskopowe__Przekroczone() )
                                   )
                             )
                          or ( // Statek skanowany jest zanurzony.
                               ( statki_t[ i ].Zanurzenie_Peryskopowe__Przekroczone() )
                             )
                        ) then
                    begin

                      // Statek ma w zasiêgu sonaru sprawdzany statek.
                      // Statek jest '³odzi¹ podwodn¹' i zanurzy³ siê co najmniej na g³êbokoœæ peryskopow¹ (kamera jest pod wod¹).
                      // Statek nie zanurzy³ siê co najmniej na g³êbokoœæ peryskopow¹ (albo w ogóle siê nie zanurza)
                      // i sprawdzany statek jest zanurzony poni¿ej g³êbokoœci peryskopowej.


                      // Nie widaæ w nocy.
                      //zt_gl_dummy_cube := TGLDummyCube.Create( Self );
                      //zt_gl_dummy_cube.Parent := Sonarowe_U³atwienie_GLDummyCube;
                      //zt_gl_dummy_cube.Pickable := false;
                      //zt_gl_dummy_cube.VisibleAtRunTime := true;
                      //zt_gl_dummy_cube.AbsoluteUp := statki_t[ i ].falowanie_gl_dummy_cube.AbsoluteUp;
                      //zt_gl_dummy_cube.AbsoluteDirection := statki_t[ i ].falowanie_gl_dummy_cube.AbsoluteDirection;
                      //
                      //zt_gl_dummy_cube.EdgeColor := Sonar_Zasiêg_GLDisk.Material.FrontProperties.Diffuse;
                      //zt_gl_dummy_cube.EdgeColor.Alpha := 1;
                      //
                      //zt_gl_dummy_cube.Material.MaterialOptions := [ GLS.Material.TGLMaterialOption.moIgnoreFog ]; // GLS.Material.TGLMaterialOption.moNoLighting //???
                      //
                      //zt_gl_dummy_cube.Scale.X := statki_t[ i ].x_prymityw_odleg³oœæ;
                      //zt_gl_dummy_cube.Scale.Y := statki_t[ i ].y_prymityw_najwiêksze;
                      //zt_gl_dummy_cube.Scale.Z := statki_t[ i ].z_prymityw_odleg³oœæ;
                      //
                      //zt_gl_dummy_cube.AbsolutePosition := statki_t[ i ].AbsolutePosition;
                      //
                      //if zt_gl_dummy_cube.Position.Y > -zt_gl_dummy_cube.Scale.Y * 0.5 then
                      //  zt_gl_dummy_cube.Position.Y := -zt_gl_dummy_cube.Scale.Y * 0.5;
                      //
                      //if Efekty__Sonarowe_U³atwienie_CheckBox.Checked then // Trochê to bez sensu.
                      //  TGLBFireFX(zt_gl_dummy_cube.AddNewEffect( TGLBFireFX )).Manager := Efekt__Sonarowe_U³atwienie_GLFireFXManager;


                      zt_gl_sphere := TGLSphere.Create( Self );
                      zt_gl_sphere.Parent := Sonarowe_U³atwienie_GLDummyCube;
                      zt_gl_sphere.Pickable := false;
                      zt_gl_sphere.AbsoluteUp := statki_t[ i ].falowanie_gl_dummy_cube.AbsoluteUp;
                      zt_gl_sphere.AbsoluteDirection := statki_t[ i ].falowanie_gl_dummy_cube.AbsoluteDirection;

                      //zt_gl_sphere.Material.BlendingMode := bmModulate;
                      zt_gl_sphere.Material.FrontProperties.Ambient.Color := GLS.Color.clrTransparent;
                      zt_gl_sphere.Material.FrontProperties.Diffuse := Sonar_Zasiêg_GLDisk.Material.FrontProperties.Diffuse;

                      zt_gl_sphere.Material.FrontProperties.Diffuse.Alpha := 0.1;
                      zt_gl_sphere.Material.FrontProperties.Emission.Color := GLS.Color.clrTransparent;
                      zt_gl_sphere.Material.MaterialOptions := [ GLS.Material.TGLMaterialOption.moIgnoreFog ]; // GLS.Material.TGLMaterialOption.moNoLighting //???

                      //zt_gl_sphere.Material.FrontProperties.Ambient := zt_gl_sphere.Material.FrontProperties.Diffuse;
                      //zt_gl_sphere.Material.FrontProperties.Emission := zt_gl_sphere.Material.FrontProperties.Diffuse;

                      zt_gl_sphere.Scale.X := statki_t[ i ].x_prymityw_odleg³oœæ;
                      zt_gl_sphere.Scale.Y := statki_t[ i ].y_prymityw_najwiêksze * 0.5;
                      zt_gl_sphere.Scale.Z := statki_t[ i ].z_prymityw_odleg³oœæ * 0.5;

                      zt_gl_sphere.AbsolutePosition := statki_t[ i ].AbsolutePosition;


                      if Efekty__Sonarowe_U³atwienie_CheckBox.Checked then
                        begin

                          //zt_gl_sphere.Material.PolygonMode := pmPoints;
                          zt_gl_sphere.Slices := 1; // Aby kula nie by³a widoczna a tylko efekt.
                          zt_gl_sphere.Stacks := 1; // Aby kula nie by³a widoczna a tylko efekt.

                        end
                      else//if Efekty__Sonarowe_U³atwienie_CheckBox.Checked then
                        begin

                          zt_gl_sphere.Material.PolygonMode := pmPoints;

                          zt_gl_sphere.Scale.Scale( 2 );

                          if Random( 2 ) = 1 then
                            zt_gl_sphere.Material.FrontProperties.Emission.Color := GLS.Color.clrSummerSky
                          else
                            zt_gl_sphere.Material.FrontProperties.Emission.Color := GLS.Color.clrQuartz;


                          zt_gl_sphere.Slices := 8 + Random( 9 );
                          zt_gl_sphere.Stacks := 8 + Random( 9 );

                        end;
                      //---//if Efekty__Sonarowe_U³atwienie_CheckBox.Checked then


                      if   ( zt_gl_sphere.Position.Y > -zt_gl_sphere.Scale.Y * 0.5 )
                        or ( not zt_statek.Zanurzenie_Peryskopowe__Przekroczone() ) then
                        begin

                          zt_gl_sphere.Position.Y := -zt_gl_sphere.Scale.Y * 0.5;

                          if Fale_CheckBox.Checked then
                            zt_gl_sphere.Position.Y := zt_gl_sphere.Position.Y + Fala__Wysokoœæ_Na_Zboczu( zt_gl_sphere.AbsolutePosition );

                        end;
                      //---//if   ( zt_gl_sphere.Position.Y > -zt_gl_sphere.Scale.Y * 0.5 ) (...)


                      if Efekty__Sonarowe_U³atwienie_CheckBox.Checked then
                        TGLBFireFX(zt_gl_sphere.AddNewEffect( TGLBFireFX )).Manager := Efekt__Sonarowe_U³atwienie_GLFireFXManager;

                    end;
                  //---//if    ( Sonarowe_U³atwienie_CheckBox.Checked ) (...)

                end;
              //---//if zt_statek <> statki_t[ i ] then


              if œlad_rysuj then
                begin

                  zt_radar_obiekt := Klasy_Dodatkowe.TRadar_Obiekt.Create( Self, Radar_Œlady_GLDummyCube, nil, Radar__Koryguj_Wielkoœæ_Obiektów() );
                  zt_radar_obiekt.Material.FrontProperties.Diffuse.Color := GLS.Color.clrSilver;
                  zt_radar_obiekt.AbsolutePosition := VectorMake( statki_t[ i ].AbsolutePosition.X, 0, statki_t[ i ].AbsolutePosition.Z );
                  zt_radar_obiekt.utworzenie_czas__ro := Czas_Teraz_W_Sekundach();
                  zt_radar_obiekt.MoveLast();

                end;
              //---//if œlad_rysuj then

            end;
          //---//if   ( zt_statek = nil ) (...)

        end;
      //---//if statki_t[ i ] <> nil then

    end;
  //---//for i := 0 to Length( statki_t ) - 1 do
  //---// Rysuje statki


  // Rysuje celownik gracza.
  if    ( zt_statek <> nil )
    and ( zt_statek.DistanceTo( Celowniczy_GLDummyCube ) <= zt_statek.radar_zasiêg ) then
    begin

      zt_gl_sphere := TGLSphere.Create( Self );
      zt_gl_sphere.Parent := Radar_Obiekty_GLDummyCube;
      zt_gl_sphere.Pickable := false;
      zt_gl_sphere.AbsolutePosition := VectorMake( Celowniczy_GLDummyCube.AbsolutePosition.X, Celowniczy_GLDummyCube.AbsolutePosition.Y, Celowniczy_GLDummyCube.AbsolutePosition.Z );
      //zt_gl_sphere.Radius := 5 * Radar__Koryguj_Wielkoœæ_Obiektów();
      zt_gl_sphere.Radius := Radar__Skala_SpinEdit.Value * 0.25;
      zt_gl_sphere.Material.FrontProperties.Ambient.Color := GLS.Color.clrYellowGreen;
      zt_gl_sphere.Material.FrontProperties.Diffuse.Color := GLS.Color.clrYellow;
      zt_gl_sphere.Material.FrontProperties.Emission.Color := GLS.Color.clrTransparent;

    end;
  //---//if   ( zt_statek = nil ) (...)


  // Rysuje amunicjê.
  if    ( Radar__Dane_Z_Sonaru_CheckBox.Enabled )
    and ( Radar__Dane_Z_Sonaru_CheckBox.Checked ) then
    begin

      if czy_klient_g then
        zt_amunicja_wystrzelona_list := wieloosobowe_amunicja_wystrzelona_list
      else//if czy_klient_g then
        zt_amunicja_wystrzelona_list := amunicja_wystrzelona_list;


      for i := 0 to zt_amunicja_wystrzelona_list.Count - 1 do
        begin

          if    ( zt_amunicja_wystrzelona_list[ i ] <> nil )
            and ( TAmunicja(zt_amunicja_wystrzelona_list[ i ]).amunicja_rodzaj = Typy_Wspolne.ar_Torpeda ) then
            begin

              if   ( zt_statek = nil )
                or (
                         ( zt_statek <> nil )
                     and (
                              (
                                    ( czy_klient_g )
                                and (  ( zt_statek.DistanceTo( TAmunicja(zt_amunicja_wystrzelona_list[ i ]).korpus_ustawienie_pocz¹tkowe_gl_dummy_cube ) <= zt_statek.sonar_zasiêg )  )
                              )
                           or (
                                    ( not czy_klient_g )
                                and (  ( zt_statek.DistanceTo( TAmunicja(zt_amunicja_wystrzelona_list[ i ]) ) <= zt_statek.sonar_zasiêg )  )
                              )
                           //or (  Radio_Dane_Wymieñ( zt_statek, TAmunicja(zt_amunicja_wystrzelona_list[ i ]).id_statek )  ) // Obecnie nie wysy³a radiem informacji o wystrzelonej amunicji. //???
                         )
                   ) then
                begin

                  zt_gl_dummy_cube := TGLDummyCube.Create( Self );
                  zt_gl_dummy_cube.Parent := Radar_Obiekty_GLDummyCube;
                  zt_gl_dummy_cube.Pickable := false;

                  if czy_klient_g then
                    begin

                      //zt_gl_dummy_cube.AbsolutePosition := VectorMake( TAmunicja(zt_amunicja_wystrzelona_list[ i ]).korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsolutePosition.X, TAmunicja(zt_amunicja_wystrzelona_list[ i ]).korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsolutePosition.Y, TAmunicja(zt_amunicja_wystrzelona_list[ i ]).korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsolutePosition.Z );
                      zt_gl_dummy_cube.AbsolutePosition := VectorMake( TAmunicja(zt_amunicja_wystrzelona_list[ i ]).korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsolutePosition.X, 0, TAmunicja(zt_amunicja_wystrzelona_list[ i ]).korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsolutePosition.Z );
                      zt_gl_dummy_cube.AbsoluteDirection := TAmunicja(zt_amunicja_wystrzelona_list[ i ]).korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsoluteDirection;

                    end
                  else//if czy_klient_g then
                    begin

                      //zt_gl_dummy_cube.AbsolutePosition := VectorMake( TAmunicja(zt_amunicja_wystrzelona_list[ i ]).AbsolutePosition.X, TAmunicja(zt_amunicja_wystrzelona_list[ i ]).AbsolutePosition.Y, TAmunicja(zt_amunicja_wystrzelona_list[ i ]).AbsolutePosition.Z );
                      zt_gl_dummy_cube.AbsolutePosition := VectorMake( TAmunicja(zt_amunicja_wystrzelona_list[ i ]).AbsolutePosition.X, 0, TAmunicja(zt_amunicja_wystrzelona_list[ i ]).AbsolutePosition.Z );
                      zt_gl_dummy_cube.AbsoluteDirection := TAmunicja(zt_amunicja_wystrzelona_list[ i ]).AbsoluteDirection;

                    end;
                  //---//if czy_klient_g then


                  zt_gl_capsule := TGLCapsule.Create( Self );
                  zt_gl_capsule.Parent := zt_gl_dummy_cube;
                  zt_gl_capsule.Pickable := false;
                  zt_gl_capsule.PitchAngle := Radar_Statek_GLFrustrum.PitchAngle;
                  zt_gl_capsule.RollAngle := Radar_Statek_GLFrustrum.RollAngle;
                  zt_gl_capsule.Radius := 5 * Radar__Koryguj_Wielkoœæ_Obiektów();
                  zt_gl_capsule.Material.FrontProperties.Diffuse.Color := GLS.Color.clrPlum;


                  if œlad_rysuj then
                    begin

                      zt_radar_obiekt := Klasy_Dodatkowe.TRadar_Obiekt.Create( Self, Radar_Œlady_GLDummyCube, nil, Radar__Koryguj_Wielkoœæ_Obiektów() );
                      zt_radar_obiekt.Material.FrontProperties.Diffuse.Color := GLS.Color.clrWhite;
                      zt_radar_obiekt.utworzenie_czas__ro := Czas_Teraz_W_Sekundach();
                      zt_radar_obiekt.amunicja_rodzaj__ro := Typy_Wspolne.ar_Torpeda;
                      zt_radar_obiekt.MoveLast();

                      if czy_klient_g then
                        begin

                          zt_radar_obiekt.AbsolutePosition := VectorMake( TAmunicja(zt_amunicja_wystrzelona_list[ i ]).korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsolutePosition.X, 0, TAmunicja(zt_amunicja_wystrzelona_list[ i ]).korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsolutePosition.Z );

                        end
                      else//if czy_klient_g then
                        begin

                          zt_radar_obiekt.AbsolutePosition := VectorMake( TAmunicja(zt_amunicja_wystrzelona_list[ i ]).AbsolutePosition.X, 0, TAmunicja(zt_amunicja_wystrzelona_list[ i ]).AbsolutePosition.Z );

                        end;
                      //---//if czy_klient_g then

                    end;
                  //---//if œlad_rysuj then

                end;
              //---//if   ( zt_statek = nil ) (...)

            end;
          //---//if    ( zt_amunicja_wystrzelona_list[ i ] <> nil ) (...)

        end;
      //---//for i := 0 to zt_amunicja_wystrzelona_list.Count - 1 do

    end;
  //---//if    ( Radar__Dane_Z_Sonaru_CheckBox.Enabled ) (...)
  //---// Rysuje amunicjê.

end;//---//Funkcja Radar__Statki_Rysuj().

//Funkcja Radar__Wyczyœæ().
procedure TStatki_Form.Radar__Wyczyœæ( const radar_czyszczenie_zakres_f : TRadar_Czyszczenie_Zakres = rcz_Statki );
var
  i : integer;
begin

  //
  // Funkcja czyœci wykres radaru.
  //
  // Parametry:
  //   radar_czyszczenie_zakres_f
  //

  for i := Radar_Œlady_GLDummyCube.Count - 1 downto 0 do
    if   ( radar_czyszczenie_zakres_f = rcz_Wszystko )
      or (
               ( Radar_Œlady_GLDummyCube.Children[ i ] is Klasy_Dodatkowe.TRadar_Obiekt )
           and ( Klasy_Dodatkowe.TRadar_Obiekt(Radar_Œlady_GLDummyCube.Children[ i ]).amunicja_rodzaj__ro <> Typy_Wspolne.ar_Torpeda ) // Œlady statków.
           and (  Czas_Miêdzy_W_Sekundach( Klasy_Dodatkowe.TRadar_Obiekt(Radar_Œlady_GLDummyCube.Children[ i ]).utworzenie_czas__ro ) > Radar__Rysowanie_Œladów__Statków_Sekundy_SpinEdit.Value  )
         )
      or (
               ( Radar_Œlady_GLDummyCube.Children[ i ] is Klasy_Dodatkowe.TRadar_Obiekt )
           and ( Klasy_Dodatkowe.TRadar_Obiekt(Radar_Œlady_GLDummyCube.Children[ i ]).amunicja_rodzaj__ro = Typy_Wspolne.ar_Torpeda ) // Œlady torped.
           and (  Czas_Miêdzy_W_Sekundach( Klasy_Dodatkowe.TRadar_Obiekt(Radar_Œlady_GLDummyCube.Children[ i ]).utworzenie_czas__ro ) > Radar__Rysowanie_Œladów__Amunicji_Sekundy_SpinEdit.Value  )
         ) then
      Radar_Œlady_GLDummyCube.Children[ i ].Free()
    else//if   ( czyœæ_wszystko_f ) (...)
      //TGLSphere(Radar_Œlady_GLDummyCube.Children[ i ]).Radius := 5 * Radar__Koryguj_Wielkoœæ_Obiektów(); // Aktualizuje rozmiar gdy zmieni siê skalê radaru.
      if Radar_Œlady_GLDummyCube.Children[ i ] is Klasy_Dodatkowe.TRadar_Obiekt then
        Klasy_Dodatkowe.TRadar_Obiekt(Radar_Œlady_GLDummyCube.Children[ i ]).Œlad_Wielkoœæ_Zmieñ( Radar__Koryguj_Wielkoœæ_Obiektów() ); // Aktualizuje rozmiar gdy zmieni siê skalê radaru.


  for i := Radar_Obiekty_GLDummyCube.Count - 1 downto 0 do
    begin

      if   ( radar_czyszczenie_zakres_f = rcz_Wszystko )
        or ( not ( Radar_Obiekty_GLDummyCube.Children[ i ] is Klasy_Dodatkowe.TRadar_Obiekt )  )
        or (
                 ( radar_czyszczenie_zakres_f = rcz_L¹dy )
             and ( Radar_Obiekty_GLDummyCube.Children[ i ] is Klasy_Dodatkowe.TRadar_Obiekt )
             and ( Klasy_Dodatkowe.TRadar_Obiekt(Radar_Obiekty_GLDummyCube.Children[ i ]).l¹d__ro )
           ) then
        Radar_Obiekty_GLDummyCube.Children[ i ].Free();

    end;
  //---//for i := Radar_Obiekty_GLDummyCube.Count - 1 downto 0 do


  for i := Sonarowe_U³atwienie_GLDummyCube.Count - 1 downto 0 do
    begin

      Sonarowe_U³atwienie_GLDummyCube.Children[ i ].Free();

    end;
  //---//for i := Sonarowe_U³atwienie_GLDummyCube.Count - 1 downto 0 do

end;//---//Funkcja Radar__Wyczyœæ().

//Funkcja xNx__Radio_Statki_W_Zasiêgu().
procedure TStatki_Form.xNx__Radio_Statki_W_Zasiêgu();
var
  i,
  j
    : integer;
  zt_statek : TStatek;
begin

  //
  // Funkcja ustawia statkom jakie id statki maj¹ w zasiêgu radaru i radia.
  //

  if czy_klient_g then
    Exit;

  zt_statek := Statek_Gracza__Gracz_Tryb_Zwróæ();

  //if    ( czy_gra_lokalna_g )
  //  and ( not Radar__Dane_Z_Radia_CheckBox.Checked ) then
  if not Radar__Dane_Z_Radia_CheckBox.Checked then // Gdy radio wy³¹czone to nie wysy³a danych do innych statków.
    begin

      if zt_statek <> nil then
        begin

          zt_statek.radar_id_l¹dy_w_zasiêgu := '-99, -99';
          zt_statek.radar_id_statki_w_zasiêgu := '-99, -99';
          zt_statek.radio_id_l¹dy_w_zasiêgu := '-99, -99';
          zt_statek.radio_id_statki_w_zasiêgu := '-99, -99';
          zt_statek.sonar_id_statki_w_zasiêgu := '-99, -99';

        end;
      //---//if zt_statek <> nil then


      Exit;

    end;
  //---//if not Radar__Dane_Z_Radia_CheckBox.Checked then



  if    ( zt_statek <> nil )
    and ( zt_statek.Zanurzenie_Peryskopowe__Przekroczone() ) then
    begin

      // W zanurzeniu radio nie dzia³a.

      zt_statek.radar_id_l¹dy_w_zasiêgu := '-99, -99';
      zt_statek.radar_id_statki_w_zasiêgu := '-99, -99';
      zt_statek.radio_id_l¹dy_w_zasiêgu := '-99, -99';
      zt_statek.radio_id_statki_w_zasiêgu := '-99, -99';
      zt_statek.sonar_id_statki_w_zasiêgu := '-99, -99';

      Exit; //???

    end;
  //---//if    ( zt_statek <> nil ) (...)



  for i := 0 to Length( statki_t ) - 1 do
    begin

      if statki_t[ i ] <> nil then
        begin

          statki_t[ i ].radar_id_l¹dy_w_zasiêgu := '-99';
          statki_t[ i ].radar_id_statki_w_zasiêgu := '-99';
          statki_t[ i ].radio_id_l¹dy_w_zasiêgu := '-99';
          statki_t[ i ].sonar_id_statki_w_zasiêgu := '-99';


          if    ( statki_t[ i ].uszkodzone_czas_sekundy_i__radio = 0 )
            and ( not statki_t[ i ].Zanurzenie_Peryskopowe__Przekroczone() ) then // W zanurzeniu radio nie dzia³a.
            for j := 0 to Length( statki_t ) - 1 do
              begin

                if statki_t[ j ] <> nil then
                  begin

                    // Jakie statki ma w zasiêgu radaru statek.
                    //if    ( statki_t[ i ].id_statek <> statki_t[ j ].id_statek ) // Siebie te¿ ma na liœcie aby potem ³atwiej by³o wyœwietlaæ.
                    if    ( not statki_t[ j ].Zanurzenie_Peryskopowe__Przekroczone() )
                      and (
                               ( statki_t[ i ].uszkodzone_czas_sekundy_i__radar = 0 )
                            or ( statki_t[ i ] = statki_t[ j ] ) // Swoj¹ pozycjê zna.
                          )
                      and ( statki_t[ i ].DistanceTo( statki_t[ j ] ) <= statki_t[ i ].radar_zasiêg ) then
                      // Statki, które siê nie zanurzaj¹ a znajd¹ siê pod wod¹ s¹ widoczne.
                      begin

                        statki_t[ i ].radar_id_statki_w_zasiêgu := statki_t[ i ].radar_id_statki_w_zasiêgu +
                          ', ' + IntToStr( statki_t[ j ].id_statek );

                      end;
                    //---//if    ( not statki_t[ i ].Zanurzenie_Peryskopowe__Przekroczone() ) (...)


                    // Jakie statki z w³asnej grupy ma w zasiêgu radia statek.
                    //if    ( statki_t[ i ].id_statek <> statki_t[ j ].id_statek ) // Siebie te¿ ma na liœcie aby potem ³atwiej by³o wyœwietlaæ.
                    if    ( statki_t[ i ].id_grupa = statki_t[ j ].id_grupa )
                      and ( statki_t[ i ].uszkodzone_czas_sekundy_i__radio = 0 )
                      and ( not statki_t[ j ].Zanurzenie_Peryskopowe__Przekroczone() )
                      and ( statki_t[ i ].DistanceTo( statki_t[ j ] ) <= statki_t[ i ].radio_zasiêg ) then
                      begin

                        statki_t[ i ].radio_id_statki_w_zasiêgu := statki_t[ i ].radio_id_statki_w_zasiêgu +
                          ', ' + IntToStr( statki_t[ j ].id_statek );

                      end;
                    //---//if    ( statki_t[ i ].id_statek <> statki_t[ j ].id_statek ) (...)


                    // Jakie statki ma w zasiêgu sonaru statek.
                    //if    ( statki_t[ i ].id_statek <> statki_t[ j ].id_statek ) // Siebie te¿ ma na liœcie aby potem ³atwiej by³o wyœwietlaæ.
                    if    ( statki_t[ i ].sonar_zasiêg > 0 )
                      and (
                               ( statki_t[ i ].uszkodzone_czas_sekundy_i__sonar = 0 )
                            or ( statki_t[ i ] = statki_t[ j ] ) // Swoj¹ pozycjê zna.
                          )
                      //and ( statki_t[ j ].Zanurzenie_Peryskopowe__Przekroczone() ) // Sonar wykrywa równie¿ statki na wodzie.
                      and ( statki_t[ i ].DistanceTo( statki_t[ j ] ) <= statki_t[ i ].sonar_zasiêg ) then
                      begin

                        statki_t[ i ].sonar_id_statki_w_zasiêgu := statki_t[ i ].sonar_id_statki_w_zasiêgu +
                          ', ' + IntToStr( statki_t[ j ].id_statek );

                      end;
                    //---//if    ( statki_t[ i ].sonar_zasiêg > 0 ) (...)

                  end;
                //---//if statki_t[ j ] <> nil then

              end;
            //---//for j := 0 to Length( statki_t ) - 1 do


          statki_t[ i ].radar_id_l¹dy_w_zasiêgu := statki_t[ i ].radar_id_l¹dy_w_zasiêgu +
            ', -99';

          statki_t[ i ].radar_id_statki_w_zasiêgu := statki_t[ i ].radar_id_statki_w_zasiêgu +
            ', -99';

          statki_t[ i ].radio_id_l¹dy_w_zasiêgu := statki_t[ i ].radio_id_l¹dy_w_zasiêgu +
            ', -99';

          statki_t[ i ].sonar_id_statki_w_zasiêgu := statki_t[ i ].sonar_id_statki_w_zasiêgu +
            ', -99';

        end;
      //---//if statki_t[ i ] <> nil then

    end;
  //---//for i := 0 to Length( statki_t ) - 1 do

end;//---//Funkcja xNx__Radio_Statki_W_Zasiêgu().

//Funkcja Sekundy_W__Minuty_Sekundy().
function TStatki_Form.Sekundy_W__Minuty_Sekundy( sekundy_f : integer ) : string;
var
  minuty_l : integer;
begin

  //
  // Funkcja zamienia wartoœæ sekund do postaci minuty sekundy 00:00.
  //
  // Zwraca iloœæ minut i sekund w postaci napisu mm:ss.
  //

  if sekundy_f < 0 then
    begin

      Result := '<n/d>';
      Exit;

    end;
  //---//if sekundy_f < 0 then


  minuty_l := Trunc( sekundy_f / 60 );
  sekundy_f := sekundy_f - minuty_l * 60;

  Result := Trim(  FormatFloat( '### ### #00', minuty_l )  ) + ':' + Trim(  FormatFloat( '00', sekundy_f )  );

end;//---//Funkcja Sekundy_W__Minuty_Sekundy().

//Funkcja SI_Decyduj().
procedure TStatki_Form.SI_Decyduj();

  //Funkcja xNx__Broñ__Cel_Wyznacz() w SI_Decyduj().
  procedure xNx__Broñ__Cel_Wyznacz( torpedy_wyrzutnia_f : TTorpedy_Wyrzutnia );
  var
    losowy_wybór_celu_dokonany : boolean;
    i_l,
    j_l,
    decyzja_wspó³czynnik__id_statek
      : integer;
    ztr,
    decyzja_wspó³czynnik,
    decyzja_wspó³czynnik__najwiêkszy,
    odleg³oœæ_do_celu,
    odleg³oœæ_do_celu_najwiêksza,
    punkty_¿ycia_najwiêksze
      : real;
  begin

    if   ( not SI__Strzela_CheckBox.Checked )
      or ( torpedy_wyrzutnia_f = nil )
      or ( torpedy_wyrzutnia_f.statek__tw = nil  )
      or (  not Assigned( torpedy_wyrzutnia_f )  )
      or (  not Assigned( torpedy_wyrzutnia_f.statek__tw )  )
      //or (  Czas_Miêdzy_W_Sekundach( torpedy_wyrzutnia_f.si__cel__wyszukanie_ostatnie_sekundy_i ) < si__cel__wyszukanie_sekundy_c  )
      or (
               ( torpedy_wyrzutnia_f.si__cel__wyznaczony )
           and (  Czas_Miêdzy_W_Sekundach( torpedy_wyrzutnia_f.si__cel__wyszukanie_ostatnie_sekundy_i ) < si__cel__wyszukanie_sekundy_c  )
         )
      or ( // Gdy straci cel to czêœciej szuka nowego celu.
               ( not torpedy_wyrzutnia_f.si__cel__wyznaczony )
           and (  Czas_Miêdzy_W_Sekundach( torpedy_wyrzutnia_f.si__cel__wyszukanie_ostatnie_sekundy_i ) < si__cel__wyszukanie_sekundy_c * 0.1  )
         ) then
      Exit;


    torpedy_wyrzutnia_f.si__cel__wyznaczony := false;
    torpedy_wyrzutnia_f.si__cel__id_statek := -99;

    decyzja_wspó³czynnik__id_statek := -99;
    decyzja_wspó³czynnik__najwiêkszy := -99;
    losowy_wybór_celu_dokonany := false;
    odleg³oœæ_do_celu_najwiêksza := 0.001;
    punkty_¿ycia_najwiêksze := 0.001;


    for i_l := 0 to Length( torpedy_wyrzutnia_f.statek__tw.si__statki_znane_r_t ) - 1 do
      for j_l := 0 to Length( statki_t ) - 1 do
        if    ( statki_t[ j_l ] <> nil )
          and ( torpedy_wyrzutnia_f.statek__tw.si__statki_znane_r_t[ i_l ].id_statek__sisz = statki_t[ j_l ].id_statek )
          and ( torpedy_wyrzutnia_f.statek__tw.id_grupa <> statki_t[ j_l ].id_grupa ) then
          begin

            ztr := torpedy_wyrzutnia_f.statek__tw.DistanceTo( statki_t[ j_l ].AbsolutePosition );

            if odleg³oœæ_do_celu_najwiêksza < ztr then
              odleg³oœæ_do_celu_najwiêksza := ztr;

            if punkty_¿ycia_najwiêksze < statki_t[ j_l ].punkty_¿ycia_aktualne then
              punkty_¿ycia_najwiêksze := statki_t[ j_l ].punkty_¿ycia_aktualne;

            Break;

          end;
        //---//if    ( statki_t[ j_l ] <> nil ) (...)


    for i_l := 0 to Length( torpedy_wyrzutnia_f.statek__tw.si__statki_znane_r_t ) - 1 do
      begin

        for j_l := 0 to Length( statki_t ) - 1 do
          if    ( statki_t[ j_l ] <> nil )
            and ( torpedy_wyrzutnia_f.statek__tw.si__statki_znane_r_t[ i_l ].id_statek__sisz = statki_t[ j_l ].id_statek )
            and ( torpedy_wyrzutnia_f.statek__tw.id_grupa <> statki_t[ j_l ].id_grupa ) then
            begin

              if statki_t[ j_l ].punkty_¿ycia_aktualne > 0 then
                begin

                  decyzja_wspó³czynnik := 0;


                  if Random( 10 ) = 0 then
                    losowy_wybór_celu_dokonany := true
                  else//if Random( 10 ) = 0 then
                    begin

                      // Preferuje bli¿sze cele.
                      odleg³oœæ_do_celu := torpedy_wyrzutnia_f.statek__tw.DistanceTo( statki_t[ j_l ].AbsolutePosition );

                      decyzja_wspó³czynnik := decyzja_wspó³czynnik +
                          100
                        - 100 * odleg³oœæ_do_celu / odleg³oœæ_do_celu_najwiêksza;


                      // Preferuje cele z mniejsz¹ iloœci¹ punktów ¿ycia.
                      if odleg³oœæ_do_celu <= torpedy_wyrzutnia_f.zasiêg__broñ then
                        begin

                          ztr :=
                              100
                            - 100 * statki_t[ j_l ].punkty_¿ycia_aktualne /  punkty_¿ycia_najwiêksze;

                          if odleg³oœæ_do_celu > torpedy_wyrzutnia_f.zasiêg__broñ * 0.75 then
                            ztr := ztr * 0.25
                          else
                          if odleg³oœæ_do_celu > torpedy_wyrzutnia_f.zasiêg__broñ * 0.5 then
                            ztr := ztr * 0.5;

                          decyzja_wspó³czynnik := decyzja_wspó³czynnik
                            + ztr;

                        end;
                      //---//if odleg³oœæ_do_celu <= torpedy_wyrzutnia_f.zasiêg__broñ then


                      if    ( torpedy_wyrzutnia_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe, Typy_Wspolne.ar_Torpeda ] )
                        and ( statki_t[ j_l ].AbsolutePosition.Y > samolot_w_powietrzu_wysokoœæ_od_c ) then
                        decyzja_wspó³czynnik := decyzja_wspó³czynnik - 100;

                    end;
                  //---//if Random( 10 ) = 0 then


                  if   ( decyzja_wspó³czynnik__najwiêkszy < decyzja_wspó³czynnik )
                    or ( losowy_wybór_celu_dokonany ) then
                    begin

                      decyzja_wspó³czynnik__najwiêkszy := decyzja_wspó³czynnik;
                      decyzja_wspó³czynnik__id_statek := torpedy_wyrzutnia_f.statek__tw.si__statki_znane_r_t[ i_l ].id_statek__sisz;

                    end;
                  //---//if   ( decyzja_wspó³czynnik__najwiêkszy < decyzja_wspó³czynnik ) (...)

                end;
              //---//if statki_t[ j_l ].punkty_¿ycia_aktualne > 0 then

              Break;

            end;
          //---//if    ( statki_t[ j_l ] <> nil ) (...)


        if losowy_wybór_celu_dokonany then
          Break;

      end;
    //---//for i_l := 0 to Length( torpedy_wyrzutnia_f.statek.si__statki_znane_r_t ) - 1 do

    if decyzja_wspó³czynnik__najwiêkszy >= 0 then
      begin

        torpedy_wyrzutnia_f.si__cel__wyznaczony := true;
        torpedy_wyrzutnia_f.si__cel__id_statek := decyzja_wspó³czynnik__id_statek;

        // Je¿eli broñ nie mog³a strzeliæ przy aktualnej losowej korekcie np. ze wzglêdu na zablokowany k¹t strza³u.
        //torpedy_wyrzutnia_f.Si__Cel__Korekta_Losowa_Namiaru_Procent_Ustaw( odleg³oœæ_do_celu );
        torpedy_wyrzutnia_f.Si__Cel__Korekta_Losowa_Namiaru_Procent_Ustaw( gra_wspó³czynnik_trudnoœci_g );

      end;
    //---//if decyzja_wspó³czynnik__najwiêkszy >= 0 then


    torpedy_wyrzutnia_f.si__cel__wyszukanie_ostatnie_sekundy_i := Czas_Teraz_W_Sekundach();

  end;//---//Funkcja xNx__Broñ__Cel_Wyznacz() w SI_Decyduj().

  //Funkcja Broñ__Amunicja_Uzupe³niona() w SI_Decyduj().
  function Broñ__Amunicja_Uzupe³niona( broñ_f : array of TTorpedy_Wyrzutnia ) : boolean;
  var
    i_l : integer;
  begin

    //
    // Funkcja zwraca prawdê gdy wszystkie egzemplarze danej broni s¹ w pe³ni na³adowane
    // albo statek nie posiada danego rodzaju broni.
    //

    Result := true;


    if Length( broñ_f ) <= 0 then
      Exit;


    for i_l := 0 to Length( broñ_f ) - 1 do
      begin

        if broñ_f[ i_l ].amunicja_iloœæ < broñ_f[ i_l ].amunicja_iloœæ_pocz¹tkowa - Length( broñ_f[ i_l ].lufy_t ) then
          begin

            Result := false;
            Exit;

          end;
        //---//if broñ_f[ i_l ].amunicja_iloœæ < broñ_f[ i_l ].amunicja_iloœæ_pocz¹tkowa - Length( broñ_f[ i_l ].lufy_t ) then

      end;
    //---//for i_l := 0 to Length( broñ_f ) - 1 do

  end;//---//Funkcja Broñ__Amunicja_Uzupe³niona() w SI_Decyduj().

  //Funkcja Broñ__Namiar_Wyznacz() w SI_Decyduj().
  procedure Broñ__Namiar_Wyznacz( torpedy_wyrzutnia_f : TTorpedy_Wyrzutnia );
  var
    czy_by³a_zmiana_wspó³rzêdnych_celu_l : boolean; // Je¿eli nie ma celu to nie aktualizuje ci¹gle wspó³rzêdnych (nie zmienia wspó³rzêdnych bezwzglêdnych na lokalne aby bronie nie celowa³y w dany punkt mapy tylko pozostawa³y w kierunku pocz¹tkowym).
    i_l : integer;
    ztsi_1,
    ztsi_2
      : single;
    zt_affine_vektor : GLS.VectorGeometry.TAffineVector;
  begin

    if   ( not SI__Strzela_CheckBox.Checked )
      or ( torpedy_wyrzutnia_f = nil )
      or (  not Assigned( torpedy_wyrzutnia_f )  )
      or ( torpedy_wyrzutnia_f.statek__tw = nil )
      or (  not Assigned( torpedy_wyrzutnia_f.statek__tw )  )
      {or (  not ( torpedy_wyrzutnia_f.statek__tw.si_strzelanie_tryb in [ sist_Celuj_Tylko, sist_Odpowiedz_Ogniem, sist_Strzelaj_Jak_Chcesz ] )  )} then
      Exit;


    czy_by³a_zmiana_wspó³rzêdnych_celu_l := false;


    // Je¿eli cel przestanie byæ widoczny na radarze itp. to namiar jest tracony.
    if torpedy_wyrzutnia_f.si__cel__wyznaczony then
      begin

        ztsi_1 := 0; // Tutaj tymczasowo jako sprawdzenie czy cel jest w zasiêgu radaru itp.

        for i_l := 0 to Length( torpedy_wyrzutnia_f.statek__tw.si__statki_znane_r_t ) - 1 do
          if torpedy_wyrzutnia_f.statek__tw.si__statki_znane_r_t[ i_l ].id_statek__sisz = torpedy_wyrzutnia_f.si__cel__id_statek then
            begin

              ztsi_1 := 1;
              Break;

            end;
          //---//if torpedy_wyrzutnia_f.statek__tw.si__statki_znane_r_t[ i_l ].id_statek__sisz = torpedy_wyrzutnia_f.si__cel__id_statek then

        if ztsi_1 = 0 then
          begin

            torpedy_wyrzutnia_f.Si__Cel__Brak_Ustaw();

          end;
        //---//if ztsi_1 = 0 then

      end;
    //---//if torpedy_wyrzutnia_f.si__cel__wyznaczony then
    //---// Je¿eli cel przestanie byæ widoczny na radarze itp. to namiar jest tracony.


    if not torpedy_wyrzutnia_f.si__cel__wyznaczony then
      begin

        // Ustawia pocz¹tkowy obrót broniom.

        if    ( torpedy_wyrzutnia_f.si__cel__namiar_wyznaczenie_ostatnie_sekundy_i <> 0 )
          and (  Czas_Miêdzy_W_Sekundach( torpedy_wyrzutnia_f.si__cel__namiar_wyznaczenie_ostatnie_sekundy_i ) > si__cel__namiar_wyznaczenie_sekundy_c  ) then
          begin

            ztsi_1 := -torpedy_wyrzutnia_f.si__namiar_pocz¹tkowy__obrót_k¹t_zadany; // -1 gdy¿ wspó³rzêdna Z statku i mapy maj¹ odwrotnie ustawione znaki.

            if torpedy_wyrzutnia_f.statek__tw <> nil then
              ztsi_1 := ztsi_1 - torpedy_wyrzutnia_f.statek__tw.TurnAngle;

            torpedy_wyrzutnia_f.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor.Z :=
              torpedy_wyrzutnia_f.AbsolutePosition.Z + ( torpedy_wyrzutnia_f.zasiêg__broñ * 0.5 ) * Cos(  DegToRad( ztsi_1 )  ) * ( -1 ); // -1 gdy¿ wspó³rzêdna Z statku i mapy maj¹ odwrotnie ustawione znaki.

            torpedy_wyrzutnia_f.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor.X :=
              torpedy_wyrzutnia_f.AbsolutePosition.X + ( torpedy_wyrzutnia_f.zasiêg__broñ * 0.5 ) * Sin(  DegToRad( ztsi_1 )  );


            torpedy_wyrzutnia_f.si__cel__namiar_wyznaczenie_ostatnie_sekundy_i := 0;


            czy_by³a_zmiana_wspó³rzêdnych_celu_l := true;

          end;
        //---//if    ( torpedy_wyrzutnia_f.si__cel__namiar_wyznaczenie_ostatnie_sekundy_i <> 0 ) (...)

      end
    else//if not torpedy_wyrzutnia_f.si__cel__wyznaczony then
      begin

        GLS.VectorGeometry.MakeVector( torpedy_wyrzutnia_f.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor, 0, 0, 0 );


        for i_l := 0 to Length( statki_t ) - 1 do
          if    ( statki_t[ i_l ] <> nil )
            and ( statki_t[ i_l ].id_statek = torpedy_wyrzutnia_f.si__cel__id_statek ) then
            begin

              if   ( statki_t[ i_l ].punkty_¿ycia_procent_zosta³o <= 0 )
                or (     // Dla tych broni je¿eli cel jest zbyt wysoko to nie strzela (np. do samolotów).
                         ( torpedy_wyrzutnia_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe, Typy_Wspolne.ar_Torpeda ] )
                     //and ( torpedy_wyrzutnia_f.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor.Y > 5 )
                     and ( statki_t[ i_l ].AbsolutePosition.Y > samolot_w_powietrzu_wysokoœæ_od_c )
                   ) then
                begin

                  torpedy_wyrzutnia_f.Si__Cel__Brak_Ustaw();


                  czy_by³a_zmiana_wspó³rzêdnych_celu_l := true;

                end
              else//if   ( statki_t[ i_l ].punkty_¿ycia_procent_zosta³o <= 0 ) (...)
                begin

                  GLS.VectorGeometry.MakeVector( torpedy_wyrzutnia_f.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor, statki_t[ i_l ].AbsolutePosition.X, statki_t[ i_l ].AbsolutePosition.Y, statki_t[ i_l ].AbsolutePosition.Z );

                  case torpedy_wyrzutnia_f.amunicja_rodzaj of
                      Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Pocisk :
                        begin

                          ztsi_1 := torpedy_wyrzutnia_f.cel_linia.DistanceTo( torpedy_wyrzutnia_f.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor ); // Odleg³oœæ do celu.
                          ztsi_1 := ztsi_1 / amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ__apz; // Czas dotarcia amunicji do celu.
                          ztsi_1 := ztsi_1 * statki_t[ i_l ].prêdkoœæ_aktualna; // Korekta o prêdkoœæ celu.

                        end;
                      //---//Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Pocisk :

                      Typy_Wspolne.ar_Bomba_G³êbinowa :
                        begin

                          ztsi_1 := 0;

                          if statki_t[ i_l ].prêdkoœæ_aktualna <> 0 then
                            begin

                              ztsi_1 := statki_t[ i_l ].prêdkoœæ_aktualna;

                              ztsi_2 := (  Abs( torpedy_wyrzutnia_f.statek__tw.AbsolutePosition.Y ) + Abs( statki_t[ i_l ].AbsolutePosition.Y )  ); // Korekta o ró¿nicê wysokoœci.

                              // Je¿eli samolot jest zbyt wysoko to zwiêksza przesuniêcie punktu celowania.
                              if Abs( torpedy_wyrzutnia_f.statek__tw.AbsolutePosition.Y ) > samolot_prêdkoœæ_lotu_procent_minimalny_c then
                                ztsi_2 := ztsi_2 + (  Abs( torpedy_wyrzutnia_f.statek__tw.AbsolutePosition.Y ) - samolot_prêdkoœæ_lotu_procent_minimalny_c  ) * amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ_opadania_wspó³czynnik;

                              if ztsi_2 <> 0 then
                                begin

                                  if statki_t[ i_l ].prêdkoœæ_aktualna < 0 then
                                    ztsi_2 := -ztsi_2;

                                  ztsi_1 := ztsi_1 + ztsi_2;

                                end;
                              //---//if ztsi_2 <> 0 then

                            end;
                          //---//if statki_t[ i_l ].prêdkoœæ_aktualna <> 0 then

                        end;
                      //---//Typy_Wspolne.ar_Bomba_G³êbinowa :

                      Typy_Wspolne.ar_Je¿e_G³êbinowe :
                        begin

                          ztsi_1 := 0;

                          if statki_t[ i_l ].prêdkoœæ_aktualna <> 0 then
                            begin

                              // Korekta o prêdkoœæ celu.
                              if not torpedy_wyrzutnia_f.statek__tw.czy_samolot then
                                ztsi_1 := Abs( statki_t[ i_l ].prêdkoœæ_aktualna ) * 9
                              else//if not torpedy_wyrzutnia_f.statek__tw.czy_samolot then
                                ztsi_1 := Abs( statki_t[ i_l ].prêdkoœæ_aktualna ) * 5; // Gdy samolot i cel poruszaj¹ siê w kierunku do siebie to samolot za wczeœnie strzela. //???

                              if not torpedy_wyrzutnia_f.statek__tw.czy_samolot then
                                //ztsi_1 := ztsi_1 + (  Abs( torpedy_wyrzutnia_f.statek__tw.AbsolutePosition.Y ) + Abs( statki_t[ i_l ].AbsolutePosition.Y )  ) // Korekta o ró¿nicê wysokoœci.
                                ztsi_1 := ztsi_1 + Abs( torpedy_wyrzutnia_f.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor.Y )
                              else//if not torpedy_wyrzutnia_f.statek__tw.czy_samolot then
                                // Je¿eli samolot jest zbyt wysoko to zwiêksza przesuniêcie punktu celowania.
                                if Abs( torpedy_wyrzutnia_f.statek__tw.AbsolutePosition.Y ) > samolot_prêdkoœæ_lotu_procent_minimalny_c then
                                  ztsi_1 := ztsi_1 + Abs( torpedy_wyrzutnia_f.statek__tw.AbsolutePosition.Y ) - samolot_prêdkoœæ_lotu_procent_minimalny_c;


                              if statki_t[ i_l ].prêdkoœæ_aktualna < 0 then
                                ztsi_1 := -ztsi_1;

                            end;
                          //---//if statki_t[ i_l ].prêdkoœæ_aktualna <> 0 then

                        end;
                      //---//Typy_Wspolne.ar_Je¿e_G³êbinowe :

                      Typy_Wspolne.ar_Torpeda :
                        begin

                          //// Korekta namiaru o odleg³oœæ przebyt¹ przez cel.
                          // Zbyt daleko celuje, lepiej bez tego.
                          //ztsi_1 := torpedy_wyrzutnia_f.cel_linia.DistanceTo( torpedy_wyrzutnia_f.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor ); // Odleg³oœæ do celu.
                          //ztsi_2 := ztsi_1 / amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ_torpeda; // Czas dotarcia amunicji do celu.
                          //
                          //ztsi_2 := ztsi_2 * statki_t[ i_l ].prêdkoœæ_aktualna * 0.5; // Odleg³oœæ jak¹ przep³ynie cel w wyliczonym czasie.
                          //GLS.VectorGeometry.CombineVector( torpedy_wyrzutnia_f.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor, statki_t[ i_l ].Direction.AsAffineVector, ztsi_2 ); // Korekta o kierunek (ruchu) celu.


                          ztsi_1 := torpedy_wyrzutnia_f.cel_linia.DistanceTo( torpedy_wyrzutnia_f.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor ); // Odleg³oœæ do celu.
                          ztsi_1 := ztsi_1 / amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ_torpeda; // Czas dotarcia amunicji do celu.
                          ztsi_1 := ztsi_1 * statki_t[ i_l ].prêdkoœæ_aktualna; // Korekta o prêdkoœæ celu.
                          //ztsi_1 := ztsi_1 * ( statki_t[ i_l ].prêdkoœæ_aktualna - statki_t[ i_l ].prêdkoœæ_aktualna * 0.11 ); // Korekta o prêdkoœæ celu.


                          //// Losowa zmiana wartoœci namiaru.
                          // Trzêsie obrotem.
                          //ztsi_2 := ztsi_1 * Random( 11 ) * 0.01;
                          //
                          //if Random( 2 ) = 1 then
                          //  ztsi_2 := -ztsi_2;
                          //
                          //
                          //ztsi_1 := ztsi_1 + ztsi_2;

                        end
                      //---//Typy_Wspolne.ar_Torpeda :
                      else//case torpedy_wyrzutnia_f.amunicja_rodzaj of
                        ztsi_1 := 0;
                    end;
                  //---//case torpedy_wyrzutnia_f.amunicja_rodzaj of


                  // Korekta losowa.
                  ztsi_2 := statki_t[ i_l ].z_prymityw_odleg³oœæ * 0.5;

                  ztsi_1 := ztsi_1 + torpedy_wyrzutnia_f.si__cel__korekta_losowa_namiaru_procent * ztsi_2;
                  //---// Korekta losowa.


                  GLS.VectorGeometry.CombineVector( torpedy_wyrzutnia_f.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor, statki_t[ i_l ].Direction.AsAffineVector, ztsi_1 ); // Korekta o kierunek (ruchu) celu.


                  czy_by³a_zmiana_wspó³rzêdnych_celu_l := true;

                end;
              //---//if   ( statki_t[ i_l ].punkty_¿ycia_procent_zosta³o <= 0 ) (...)


              Break;

            end;
          //---//if    ( statki_t[ i_l ] <> nil ) (...)


        torpedy_wyrzutnia_f.si__cel__namiar_wyznaczenie_ostatnie_sekundy_i := Czas_Teraz_W_Sekundach();

      end;
    //---//if not torpedy_wyrzutnia_f.si__cel__wyznaczony then



    if not czy_by³a_zmiana_wspó³rzêdnych_celu_l then
      Exit;



    // Ustawia wspó³rzêdne dla linii celowniczej.
    zt_affine_vektor := torpedy_wyrzutnia_f.cel_linia.AbsoluteToLocal( torpedy_wyrzutnia_f.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor );

    torpedy_wyrzutnia_f.cel_linia.Nodes[ 1 ].X := zt_affine_vektor.X;
    torpedy_wyrzutnia_f.cel_linia.Nodes[ 1 ].Z := zt_affine_vektor.Z;
    torpedy_wyrzutnia_f.cel_linia.Nodes[ 1 ].Y := zt_affine_vektor.Y;

    if torpedy_wyrzutnia_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe, Typy_Wspolne.ar_Torpeda ] then
      torpedy_wyrzutnia_f.cel_linia.Nodes[ 1 ].Y := torpedy_wyrzutnia_f.cel_linia.Nodes[ 0 ].Y; // Ta broñ nie unosi luf.
    //---// Ustawia wspó³rzêdne dla linii celowniczej.

  end;//---//Funkcja Broñ__Namiar_Wyznacz() w SI_Decyduj().

  //Funkcja Broñ__Strza³() w SI_Decyduj().
  procedure Broñ__Strza³( torpedy_wyrzutnia_f : TTorpedy_Wyrzutnia );
  var
    ztb : boolean; // Tylko aby wywo³aæ funkcjê.

    //cel_k¹t,
    cel_odleg³oœæ,
    tolerancja_margines__k¹t,
    tolerancja_margines__odleg³oœæ_do,
    tolerancja_margines__odleg³oœæ_od
      : single;

    zt_affine_vektor : GLS.VectorGeometry.TAffineVector;
  begin

    if   ( not SI__Strzela_CheckBox.Checked )
      or ( torpedy_wyrzutnia_f = nil )
      or (  not Assigned( torpedy_wyrzutnia_f )  )
      or ( torpedy_wyrzutnia_f.statek__tw = nil )
      or (  not Assigned( torpedy_wyrzutnia_f.statek__tw )  )
      or ( torpedy_wyrzutnia_f.statek__tw.punkty_¿ycia_aktualne <= 0 )
      or ( torpedy_wyrzutnia_f.statek__tw.schemat_samolot_zmiana_czas_sekundy_i <> 0 )
      or (  not ( torpedy_wyrzutnia_f.statek__tw.si_strzelanie_tryb in [ sist_Strzelaj_Jak_Chcesz ] )  )
      or ( not torpedy_wyrzutnia_f.si__cel__wyznaczony )
      or ( not torpedy_wyrzutnia_f.si__cel__przeliczone_namiary ) then
      Exit;


    if    ( torpedy_wyrzutnia_f.si__strza³_lufa_opóŸnienie_czas_milisekundy > 0 )
      and (  Czas_Miêdzy_W_Milisekundach( torpedy_wyrzutnia_f.strza³_czas__broñ_sekundy_i ) < torpedy_wyrzutnia_f.si__strza³_lufa_opóŸnienie_czas_milisekundy  ) then
      Exit;


    // Dla tych broni je¿eli cel jest zbyt wysoko to nie strzela (np. do samolotów).
    if    ( torpedy_wyrzutnia_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe, Typy_Wspolne.ar_Torpeda ] )
      and ( torpedy_wyrzutnia_f.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor.Y > samolot_w_powietrzu_wysokoœæ_od_c ) then
      begin

        torpedy_wyrzutnia_f.Si__Cel__Brak_Ustaw();
        Exit;

      end;
    //---//if    ( torpedy_wyrzutnia_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe, Typy_Wspolne.ar_Torpeda ] ) (...)


    if    ( torpedy_wyrzutnia_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Pocisk, Typy_Wspolne.ar_Je¿e_G³êbinowe ] )
      and ( torpedy_wyrzutnia_f.statek__tw.Zanurzenie_Strza³_Przekroczone() ) then
      begin

        torpedy_wyrzutnia_f.Si__Cel__Brak_Ustaw();
        Exit;

      end;
    //---//if    ( torpedy_wyrzutnia_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe, Typy_Wspolne.ar_Torpeda ] ) (...)


    zt_affine_vektor := torpedy_wyrzutnia_f.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor;

    if torpedy_wyrzutnia_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe ] then
      begin

        // Sprawdza odleg³oœæ tylko w p³aszczyŸnie poziomej (wody).

        zt_affine_vektor.Y := 0;
        cel_odleg³oœæ := GLS.VectorGeometry.VectorDistance(  GLS.VectorGeometry.AffineVectorMake( torpedy_wyrzutnia_f.cel_linia.AbsolutePosition.X, 0, torpedy_wyrzutnia_f.cel_linia.AbsolutePosition.Z ), zt_affine_vektor  );

      end
    else//if torpedy_wyrzutnia_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe ] then
      cel_odleg³oœæ := torpedy_wyrzutnia_f.cel_linia.DistanceTo( zt_affine_vektor );


    if torpedy_wyrzutnia_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Pocisk, Typy_Wspolne.ar_Torpeda ] then
      if cel_odleg³oœæ > torpedy_wyrzutnia_f.zasiêg__broñ * 0.6 then
        begin

          // Je¿eli cel jest daleko to tylko czasami strzela.

          // Tutaj tymczasowo jako jakim procentem zasiêgu jest odleg³oœæ do celu.
          if torpedy_wyrzutnia_f.zasiêg__broñ <> 0 then
            tolerancja_margines__k¹t := 100 * cel_odleg³oœæ / torpedy_wyrzutnia_f.zasiêg__broñ
          else//if torpedy_wyrzutnia_f.zasiêg__broñ <> 0 then
            tolerancja_margines__k¹t := 90;

          // Tutaj tymczasowo jako wartoœæ losowa.
          tolerancja_margines__odleg³oœæ_od := Random( 100 ) + 1; // Od 1 do 100.

          // Je¿eli statek ma mniej punktów ¿ycia to czêœciej strzela.
          // Tutaj tymczasowo jako mno¿nik.
          if torpedy_wyrzutnia_f.statek__tw.punkty_¿ycia_procent_zosta³o <= 50 then
            tolerancja_margines__odleg³oœæ_do := 2
          else//if torpedy_wyrzutnia_f.statek__tw.punkty_¿ycia_procent_zosta³o <= 50 then
            tolerancja_margines__odleg³oœæ_do := 1;

          if   (
                     ( cel_odleg³oœæ > torpedy_wyrzutnia_f.zasiêg__broñ )
                 and ( tolerancja_margines__odleg³oœæ_od >= 10 )
               )
            or (
                     ( cel_odleg³oœæ <= torpedy_wyrzutnia_f.zasiêg__broñ )
                 and (  tolerancja_margines__odleg³oœæ_od > ( 100 - tolerancja_margines__k¹t ) * tolerancja_margines__odleg³oœæ_do  )
               ) then
            begin

              torpedy_wyrzutnia_f.strza³_czas__broñ_sekundy_i := Czas_Teraz_W_Sekundach();

              Exit;

            end;
          //---//if   ( (...)

        end;
      //---//if cel_odleg³oœæ > torpedy_wyrzutnia_f.zasiêg__broñ * 0.6 then


    //tolerancja_margines__k¹t := 0;
    tolerancja_margines__odleg³oœæ_do := 0;
    tolerancja_margines__odleg³oœæ_od := 0;


    zt_affine_vektor := GLS.VectorGeometry.AffineVectorMake( torpedy_wyrzutnia_f.AbsolutePosition );
    GLS.VectorGeometry.AddVector(  zt_affine_vektor, GLS.VectorGeometry.VectorNegate( torpedy_wyrzutnia_f.AbsoluteDirection )  );

    if torpedy_wyrzutnia_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe ] then
      zt_affine_vektor.Y := 0; // Y = 0 aby nie uwzglêdniaæ k¹ta w pionie.

    //if torpedy_wyrzutnia_f.czy_broñ_obracana then
    //  cel_k¹t :=
    //    System.Math.RadToDeg
    //      (
    //        GLS.VectorGeometry.AngleBetweenVectors
    //          (
    //            zt_affine_vektor, // Kierunek broni.
    //            //torpedy_wyrzutnia_f.cel_linia.LocalToAbsolute( torpedy_wyrzutnia_f.cel_linia.Nodes[ 1 ].AsAffineVector ), // Pozycja celu.
    //            //torpedy_wyrzutnia_f.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor, // Pozycja celu.
    //            GLS.VectorGeometry.AffineVectorMake( torpedy_wyrzutnia_f.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor.X, 0, torpedy_wyrzutnia_f.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor.Z ), // Pozycja celu. Y = 0 aby nie uwzglêdniaæ k¹ta w pionie.
    //            //GLS.VectorGeometry.AffineVectorMake( torpedy_wyrzutnia_f.cel_linia.AbsolutePosition ) // Pozycja broni.
    //            GLS.VectorGeometry.AffineVectorMake( torpedy_wyrzutnia_f.cel_linia.AbsolutePosition.X, 0, torpedy_wyrzutnia_f.cel_linia.AbsolutePosition.Z ) // Pozycja broni. Y = 0 aby nie uwzglêdniaæ k¹ta w pionie.
    //          )
    //      )
    //else//torpedy_wyrzutnia_f.czy_broñ_obracana
    //  cel_k¹t := broñ_nie_obracana_c;

    case torpedy_wyrzutnia_f.amunicja_rodzaj of
        Typy_Wspolne.ar_Bomba_G³êbinowa :
          begin

            if not torpedy_wyrzutnia_f.statek__tw.czy_samolot then
              tolerancja_margines__odleg³oœæ_do := Abs( torpedy_wyrzutnia_f.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor.Y ); // Zwiêkszona tolerancja odleg³oœci dla zanurzonych celów.

          end;
        //---//Typy_Wspolne.ar_Bomba_G³êbinowa :

        Typy_Wspolne.ar_Je¿e_G³êbinowe :
          begin

            if    ( torpedy_wyrzutnia_f.statek__tw.czy_samolot )
              and ( not torpedy_wyrzutnia_f.czy_broñ_obracana ) then
              begin

                tolerancja_margines__odleg³oœæ_do := -torpedy_wyrzutnia_f.zasiêg__broñ + torpedy_wyrzutnia_f.statek__tw.z_prymityw_odleg³oœæ;
                tolerancja_margines__odleg³oœæ_od := -torpedy_wyrzutnia_f.amunicja_uzbrajanie_odleg³oœæ;

              end;
            //---//if torpedy_wyrzutnia_f.statek.czy_samolot then

          end;
        //---//Typy_Wspolne.ar_Je¿e_G³êbinowe :

        Typy_Wspolne.ar_Pocisk :
          begin

            tolerancja_margines__odleg³oœæ_do := torpedy_wyrzutnia_f.zasiêg__broñ * 0.5;

          end;
        //---//Typy_Wspolne.ar_Pocisk :

        Typy_Wspolne.ar_Torpeda :
          begin

            tolerancja_margines__odleg³oœæ_do := 10;
            tolerancja_margines__odleg³oœæ_od := Abs( torpedy_wyrzutnia_f.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor.Y ) * 4; // Aby torpeda zd¹¿y³a osi¹gn¹æ zadan¹ g³êbokoœæ.

          end
        //---//Typy_Wspolne.ar_Torpeda :
      end;
    //---//case torpedy_wyrzutnia_f.amunicja_rodzaj of


    if    ( cel_odleg³oœæ >= torpedy_wyrzutnia_f.amunicja_uzbrajanie_odleg³oœæ + tolerancja_margines__odleg³oœæ_od )
      and ( cel_odleg³oœæ <= torpedy_wyrzutnia_f.zasiêg__broñ + tolerancja_margines__odleg³oœæ_do ) then
      //and (
      //         //( cel_k¹t = broñ_nie_obracana_c )
      //         ( not torpedy_wyrzutnia_f.czy_broñ_obracana )
      //      or ( cel_k¹t <= 10 + tolerancja_margines__k¹t )
      //    ) then
      begin

        if torpedy_wyrzutnia_f.statek__tw <> nil then
          torpedy_wyrzutnia_f.statek__tw.amunicja_zanurzenie_g³êbokoœæ_zadana := torpedy_wyrzutnia_f.si__cel__wspó³rzêdne_bezwzglêdne_affine_vektor.Y + (  Random( 20 ) - 10  ) * 0.1;

        if    ( torpedy_wyrzutnia_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] )
          and ( torpedy_wyrzutnia_f.statek__tw.amunicja_zanurzenie_g³êbokoœæ_zadana > 0 ) then // Aby torpeda nie podskakiwa³a na wodzie je¿eli bêdzie mia³a zbyt wysokie zadane zanurzenie.
          if Random( 2 ) = 0 then
            torpedy_wyrzutnia_f.statek__tw.amunicja_zanurzenie_g³êbokoœæ_zadana := 0
          else//if Random( 2 ) = 0 then
            torpedy_wyrzutnia_f.statek__tw.amunicja_zanurzenie_g³êbokoœæ_zadana := -torpedy_wyrzutnia_f.statek__tw.amunicja_zanurzenie_g³êbokoœæ_zadana;

        if torpedy_wyrzutnia_f.Strza³( false, torpedy_wyrzutnia_f.statek__tw.obracaj_dzia³a, torpedy_wyrzutnia_f.statek__tw.podnoœ_lufy, ztb, torpedy_wyrzutnia_f.cel_linia.Nodes[ 1 ].AsAffineVector ) then
          begin

            torpedy_wyrzutnia_f.Si__Cel__Korekta_Losowa_Namiaru_Procent_Ustaw( gra_wspó³czynnik_trudnoœci_g );


            if    ( torpedy_wyrzutnia_f.statek__tw.si_aktywnoœæ = sia_Walka__P³ywanie_Do_Punktu )
              and ( torpedy_wyrzutnia_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe, Typy_Wspolne.ar_Torpeda ] ) then // Sprawdzaæ odleg³oœæ do zadanego celu. //???
              begin

                // Po oddaniu strza³u samolot zmienia tryb walki.

                torpedy_wyrzutnia_f.statek__tw.Si__Walka__P³ywanie_Do_Punktu__Wartoœci_Pocz¹tkowe_Ustaw( si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_g );

              end;
            //---//if    ( torpedy_wyrzutnia_f.statek__tw.si_aktywnoœæ = sia_Walka__P³ywanie_Do_Punktu ) (...)

          end;
        //---//if torpedy_wyrzutnia_f.Strza³( false, torpedy_wyrzutnia_f.statek.obracaj_dzia³a, torpedy_wyrzutnia_f.statek.podnoœ_lufy, ztb, torpedy_wyrzutnia_f.cel_linia.Nodes[ 1 ].AsAffineVector ) then

      end;
    //---//if    ( cel_odleg³oœæ >= torpedy_wyrzutnia_f.amunicja_uzbrajanie_odleg³oœæ - tolerancja_margines ) (...)

  end;//---//Funkcja Broñ__Strza³() w SI_Decyduj().

  //Funkcja Cel_Wyznacz() w SI_Decyduj().
  procedure Cel_Wyznacz( torpedy_wyrzutnia_f : TTorpedy_Wyrzutnia; statek_f : TStatek = nil; const wyznaczanie_dla_statku_f : boolean = false );
  var
    losowy_wybór_celu_dokonany : boolean;
    i_l,
    j_l,
    decyzja_wspó³czynnik__id_statek
      : integer;
    ztr,
    decyzja_wspó³czynnik,
    decyzja_wspó³czynnik__najwiêkszy,
    odleg³oœæ_do_celu,
    odleg³oœæ_do_celu_najwiêksza,
    //prêdkoœæ_maksymalna_najwiêksza,
    punkty_¿ycia_najwiêksze,
    zasiêg__broñ_l,
    z_prymityw_odleg³oœæ_najwiêksze
      : real;
    zt_statek_l : TStatek;
  begin

    //
    // Parametry:
    //   wyznaczanie_dla_statku_f:
    //     false - wyznacza cel dla broni.
    //     true - wyznacza cel dla statku.
    //

    if not wyznaczanie_dla_statku_f then
      begin

        // Dla broni.

        if   ( not SI__Strzela_CheckBox.Checked )
          or ( torpedy_wyrzutnia_f = nil )
          or ( torpedy_wyrzutnia_f.statek__tw = nil  )
          or (  not Assigned( torpedy_wyrzutnia_f )  )
          or (  not Assigned( torpedy_wyrzutnia_f.statek__tw )  )
          //or (  Czas_Miêdzy_W_Sekundach( torpedy_wyrzutnia_f.si__cel__wyszukanie_ostatnie_sekundy_i ) < si__cel__wyszukanie_sekundy_c  )
          or (
                   ( torpedy_wyrzutnia_f.si__cel__wyznaczony )
               and (  Czas_Miêdzy_W_Sekundach( torpedy_wyrzutnia_f.si__cel__wyszukanie_ostatnie_sekundy_i ) < si__cel__wyszukanie_sekundy_c  )
             )
          or ( // Gdy straci cel to czêœciej szuka nowego celu.
                   ( not torpedy_wyrzutnia_f.si__cel__wyznaczony )
               and (  Czas_Miêdzy_W_Sekundach( torpedy_wyrzutnia_f.si__cel__wyszukanie_ostatnie_sekundy_i ) < si__cel__wyszukanie_sekundy_c * 0.1  )
             ) then
          Exit;


        if not ( torpedy_wyrzutnia_f.statek__tw.si_strzelanie_tryb in [ sist_Celuj_Tylko, sist_Odpowiedz_Ogniem, sist_Strzelaj_Jak_Chcesz ] ) then
          begin

            if torpedy_wyrzutnia_f.si__cel__wyznaczony then
              torpedy_wyrzutnia_f.Si__Cel__Brak_Ustaw();

            Exit;

          end;
        //---//if not ( torpedy_wyrzutnia_f.statek__tw.si_strzelanie_tryb in [ sist_Celuj_Tylko, sist_Odpowiedz_Ogniem, sist_Strzelaj_Jak_Chcesz ] ) then


        zt_statek_l := torpedy_wyrzutnia_f.statek__tw;

        torpedy_wyrzutnia_f.si__cel__wyznaczony := false;
        torpedy_wyrzutnia_f.si__cel__id_statek := -99;
        zasiêg__broñ_l := torpedy_wyrzutnia_f.zasiêg__broñ;

      end
    else//if not wyznaczanie_dla_statku_f then
      begin

        // Dla statku.

        if   ( statek_f = nil )
          or (  not Assigned( statek_f )  ) then
          Exit;


        zt_statek_l := statek_f;
        zasiêg__broñ_l := 0;

        for i_l := 0 to Length( zt_statek_l.artyleria_t ) - 1 do
          if zasiêg__broñ_l < zt_statek_l.artyleria_t[ i_l ].zasiêg__broñ then
            zasiêg__broñ_l := zt_statek_l.artyleria_t[ i_l ].zasiêg__broñ;

        for i_l := 0 to Length( zt_statek_l.bomba_g³êbinowa_t ) - 1 do
          if zasiêg__broñ_l < zt_statek_l.bomba_g³êbinowa_t[ i_l ].zasiêg__broñ then
            zasiêg__broñ_l := zt_statek_l.bomba_g³êbinowa_t[ i_l ].zasiêg__broñ;

        for i_l := 0 to Length( zt_statek_l.dzia³a_t ) - 1 do
          if zasiêg__broñ_l < zt_statek_l.dzia³a_t[ i_l ].zasiêg__broñ then
            zasiêg__broñ_l := zt_statek_l.dzia³a_t[ i_l ].zasiêg__broñ;

        for i_l := 0 to Length( zt_statek_l.je¿e_g³êbinowe_t ) - 1 do
          if zasiêg__broñ_l < zt_statek_l.je¿e_g³êbinowe_t[ i_l ].zasiêg__broñ then
            zasiêg__broñ_l := zt_statek_l.je¿e_g³êbinowe_t[ i_l ].zasiêg__broñ;

        for i_l := 0 to Length( zt_statek_l.torpedy_wyrzutnie_t ) - 1 do
          if zasiêg__broñ_l < zt_statek_l.torpedy_wyrzutnie_t[ i_l ].zasiêg__broñ then
            zasiêg__broñ_l := zt_statek_l.torpedy_wyrzutnie_t[ i_l ].zasiêg__broñ;

      end;
    //---//if not wyznaczanie_dla_statku_f then


    decyzja_wspó³czynnik__id_statek := -99;
    decyzja_wspó³czynnik__najwiêkszy := -99;
    losowy_wybór_celu_dokonany := false;
    odleg³oœæ_do_celu_najwiêksza := 0.001;
    //prêdkoœæ_maksymalna_najwiêksza := 0.001;
    punkty_¿ycia_najwiêksze := 0.001;
    z_prymityw_odleg³oœæ_najwiêksze := 0.001;


    for i_l := 0 to Length( zt_statek_l.si__statki_znane_r_t ) - 1 do
      for j_l := 0 to Length( statki_t ) - 1 do
        if    ( statki_t[ j_l ] <> nil )
          and ( zt_statek_l.si__statki_znane_r_t[ i_l ].id_statek__sisz = statki_t[ j_l ].id_statek )
          and ( zt_statek_l.id_grupa <> statki_t[ j_l ].id_grupa ) then
          begin

            ztr := zt_statek_l.DistanceTo( statki_t[ j_l ].AbsolutePosition );

            if odleg³oœæ_do_celu_najwiêksza < ztr then
              odleg³oœæ_do_celu_najwiêksza := ztr;

            if punkty_¿ycia_najwiêksze < statki_t[ j_l ].punkty_¿ycia_aktualne then
              punkty_¿ycia_najwiêksze := statki_t[ j_l ].punkty_¿ycia_aktualne;

            //if prêdkoœæ_maksymalna_najwiêksza < statki_t[ j_l ].prêdkoœæ_maksymalna then
            //  prêdkoœæ_maksymalna_najwiêksza := statki_t[ j_l ].prêdkoœæ_maksymalna;

            if z_prymityw_odleg³oœæ_najwiêksze < statki_t[ j_l ].z_prymityw_odleg³oœæ then
              z_prymityw_odleg³oœæ_najwiêksze := statki_t[ j_l ].z_prymityw_odleg³oœæ;

            Break;

          end;
        //---//if    ( statki_t[ j_l ] <> nil ) (...)


    for i_l := 0 to Length( zt_statek_l.si__statki_znane_r_t ) - 1 do
      begin

        for j_l := 0 to Length( statki_t ) - 1 do
          if    ( statki_t[ j_l ] <> nil )
            and ( zt_statek_l.si__statki_znane_r_t[ i_l ].id_statek__sisz = statki_t[ j_l ].id_statek )
            and ( zt_statek_l.id_grupa <> statki_t[ j_l ].id_grupa ) then
            begin

              if statki_t[ j_l ].punkty_¿ycia_aktualne > 0 then
                begin

                  decyzja_wspó³czynnik := 0;


                  if Random( 10 ) = 0 then
                    losowy_wybór_celu_dokonany := true
                  else//if Random( 10 ) = 0 then
                    begin

                      // Preferuje bli¿sze cele.
                      odleg³oœæ_do_celu := zt_statek_l.DistanceTo( statki_t[ j_l ].AbsolutePosition );

                      decyzja_wspó³czynnik := decyzja_wspó³czynnik +
                          100
                        - 100 * odleg³oœæ_do_celu / odleg³oœæ_do_celu_najwiêksza;


                      if odleg³oœæ_do_celu <= zasiêg__broñ_l then
                        begin

                          // Preferuje cele z mniejsz¹ iloœci¹ punktów ¿ycia.
                          ztr :=
                              100
                            - 100 * statki_t[ j_l ].punkty_¿ycia_aktualne /  punkty_¿ycia_najwiêksze;

                          if odleg³oœæ_do_celu > zasiêg__broñ_l * 0.75 then
                            ztr := ztr * 0.25
                          else
                          if odleg³oœæ_do_celu > zasiêg__broñ_l * 0.5 then
                            ztr := ztr * 0.5;

                          decyzja_wspó³czynnik := decyzja_wspó³czynnik
                            + ztr;
                          //---// Preferuje cele z mniejsz¹ iloœci¹ punktów ¿ycia.


                          //// Preferuje cele wolniejsze.
                          //if not wyznaczanie_dla_statku_f then
                          //  begin
                          //
                          //    // Dla broni.
                          //
                          //    ztr :=
                          //        100
                          //      - 100 * statki_t[ j_l ].prêdkoœæ_maksymalna /  prêdkoœæ_maksymalna_najwiêksza;
                          //
                          //    //if torpedy_wyrzutnia_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe, Typy_Wspolne.ar_Torpeda ] then
                          //    //  ztr := ztr * 2;
                          //
                          //    decyzja_wspó³czynnik := decyzja_wspó³czynnik
                          //      + ztr;
                          //
                          //  end;
                          ////---//if not wyznaczanie_dla_statku_f then
                          ////---// Preferuje cele wolniejsze.


                          // Preferuje cele podobnej wielkoœci.
                          if    ( not wyznaczanie_dla_statku_f )
                            and ( torpedy_wyrzutnia_f.amunicja_rodzaj = Typy_Wspolne.ar_Artyleria ) then
                            begin

                              // Dla broni.

                              if not wyznaczanie_dla_statku_f then
                                ztr := torpedy_wyrzutnia_f.statek__tw.z_prymityw_odleg³oœæ // Dla broni.
                              else//if not wyznaczanie_dla_statku_f then
                                ztr := statek_f.z_prymityw_odleg³oœæ; // Dla statku.

                              ztr := // Ró¿nica procentowych wielkoœci wœród wszystkich statków statku sprawdzanego i tego, który wyznacza cel.
                                  100
                                - Abs
                                    (
                                        ( 100 * statki_t[ j_l ].z_prymityw_odleg³oœæ / z_prymityw_odleg³oœæ_najwiêksze ) // Procentowa wielkoœæ wœród wszystkich statków sprawdzanego statku.
                                      - ( 100 * ztr / z_prymityw_odleg³oœæ_najwiêksze ) // Procentowa wielkoœæ wœród wszystkich statków statku, który wyznacza cel.
                                    );

                              //if    ( not wyznaczanie_dla_statku_f ) // Dla broni.
                              //  and ( torpedy_wyrzutnia_f.amunicja_rodzaj = Typy_Wspolne.ar_Artyleria ) then
                                ztr := ztr * 1.5;

                              decyzja_wspó³czynnik := decyzja_wspó³czynnik
                                + ztr;

                            end;
                          //---//if    ( not wyznaczanie_dla_statku_f ) (...)
                          //---// Preferuje cele podobnej wielkoœci.

                        end;
                      //---//if odleg³oœæ_do_celu <= zasiêg__broñ_l then


                      if not wyznaczanie_dla_statku_f then
                        begin

                          // Dla broni.

                          if    ( torpedy_wyrzutnia_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe, Typy_Wspolne.ar_Torpeda ] )
                            and ( statki_t[ j_l ].AbsolutePosition.Y > samolot_w_powietrzu_wysokoœæ_od_c ) then
                            decyzja_wspó³czynnik := decyzja_wspó³czynnik - 100;

                        end
                      else//if not wyznaczanie_dla_statku_f then
                        begin

                          // Dla statku.

                        end;
                      //---//if not wyznaczanie_dla_statku_f then

                    end;
                  //---//if Random( 10 ) = 0 then


                  if   ( decyzja_wspó³czynnik__najwiêkszy < decyzja_wspó³czynnik )
                    or ( losowy_wybór_celu_dokonany ) then
                    begin

                      decyzja_wspó³czynnik__najwiêkszy := decyzja_wspó³czynnik;
                      decyzja_wspó³czynnik__id_statek := zt_statek_l.si__statki_znane_r_t[ i_l ].id_statek__sisz;

                    end;
                  //---//if   ( decyzja_wspó³czynnik__najwiêkszy < decyzja_wspó³czynnik ) (...)

                end;
              //---//if statki_t[ j_l ].punkty_¿ycia_aktualne > 0 then

              Break;

            end;
          //---//if    ( statki_t[ j_l ] <> nil ) (...)


        if losowy_wybór_celu_dokonany then
          Break;

      end;
    //---//for i_l := 0 to Length( zt_statek_l.si__statki_znane_r_t ) - 1 do

    if decyzja_wspó³czynnik__najwiêkszy >= 0 then
      begin

        if not wyznaczanie_dla_statku_f then
          begin

            // Dla broni.

            torpedy_wyrzutnia_f.si__cel__wyznaczony := true;
            torpedy_wyrzutnia_f.si__cel__id_statek := decyzja_wspó³czynnik__id_statek;
            torpedy_wyrzutnia_f.si__cel__przeliczone_namiary := false;

            // Je¿eli broñ nie mog³a strzeliæ przy aktualnej losowej korekcie np. ze wzglêdu na zablokowany k¹t strza³u.
            torpedy_wyrzutnia_f.Si__Cel__Korekta_Losowa_Namiaru_Procent_Ustaw( gra_wspó³czynnik_trudnoœci_g );

          end
        else//if not wyznaczanie_dla_statku_f then
          begin

            // Dla statku.

            zt_statek_l.si__walka__p³ywanie_do_punktu__cel__id_statek := decyzja_wspó³czynnik__id_statek;

          end;
        //---//if not wyznaczanie_dla_statku_f then

      end;
    //---//if decyzja_wspó³czynnik__najwiêkszy >= 0 then


    if not wyznaczanie_dla_statku_f then
      torpedy_wyrzutnia_f.si__cel__wyszukanie_ostatnie_sekundy_i := Czas_Teraz_W_Sekundach();

  end;//---//Funkcja Cel_Wyznacz() w SI_Decyduj().

  //Funkcja Lotniskowiec__L¹dowanie__Podchodzenie__Wspó³rzêdne() w SI_Decyduj().
  procedure Lotniskowiec__L¹dowanie__Podchodzenie__Wspó³rzêdne( statek_f : TStatek; const punk_l¹dowania_korekta_wyznacz_f : boolean = false );
  var
    ztb_l : boolean;
    i_l,
    id_grupa_l,
    id_statek__lotniskowiec_najbli¿szy_l
      : integer;
    ztsi_l : single;
  begin

    //
    // Funkcja wyznacza wspó³rzêdne naprowadzaj¹c samolot do l¹dowania na lotniskowcu albo na l¹dzie.
    // W pierwszej kolejnoœci wyszukuje lotniskowiec, je¿eli nie ma, wybiera punkt na l¹dzie.
    //
    // Parametry:
    //   punk_l¹dowania_korekta_wyznacz_f:
    //     false - nie modyfikuje punktu l¹dowania.
    //     true - aby wszystkie samoloty nie l¹dowa³y w tym samym punkcie przesuwa punkt l¹dowania.
    //

    if statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -1 then
      begin

        if statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 then // Je¿eli zamierza l¹dowaæ na lotniskowcu.
          for i_l := 0 to Length( statki_t ) - 1 do
            if    ( statki_t[ i_l ] <> nil )
              and ( statki_t[ i_l ].czy_lotniskowiec )
              and ( statki_t[ i_l ].id_statek = statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie )
              and (
                       ( statki_t[ i_l ].czy_usun¹æ_statek )
                    or ( statki_t[ i_l ].punkty_¿ycia_aktualne <= 0 )
                  ) then
              begin

                // Je¿eli wybrany do l¹dowania lotniskowiec straci punkty ¿ycia.

                statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := -99;
                statek_f.samolot__l¹dowanie__podchodzenie_krok := l¹dowanie__podchodzenie_kroki_iloœæ_c;

                if statek_f.si_aktywnoœæ = sia_Samolot__L¹dowanie then
                  begin

                    statek_f.si_aktywnoœæ := sia_Samolot__L¹dowanie__Podchodzenie;

                  end;
                //---//if statek_f.si_aktywnoœæ = sia_Samolot__L¹dowanie then

                Break;

              end;
            //---//if    ( statki_t[ i_l ] <> nil ) (...)


        ztb_l := false; // Oznacza czy s¹ dostêpne dla l¹dowania lotniskowce.

        for i_l := 0 to Length( statki_t ) - 1 do
          if    ( statki_t[ i_l ] <> nil )
            and ( not statki_t[ i_l ].czy_usun¹æ_statek )
            and ( statki_t[ i_l ].czy_lotniskowiec )
            and ( statki_t[ i_l ].punkty_¿ycia_aktualne > 0 )
            and ( statki_t[ i_l ].id_grupa = statek_f.id_grupa ) then
            begin

              ztb_l := true;
              Break;

            end;
          //---//if    ( statki_t[ i_l ] <> nil ) (...)

      end
    else//if statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -1 then
      ztb_l := false; // Oznacza, ¿e samolot l¹duje nie na lotniskowcu.


    if ztb_l then
      begin

        // S¹ dostêpne dla l¹dowania lotniskowce.

        id_statek__lotniskowiec_najbli¿szy_l := -99;

        if statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = -99 then
          begin

            // Je¿eli samolot nie wybra³ lotniskowca to wyszukuje najbli¿szy lotniskowiec.

            ztsi_l := -99;

            for i_l := 0 to Length( statki_t ) - 1 do
              if    ( statki_t[ i_l ] <> nil )
                and ( not statki_t[ i_l ].czy_usun¹æ_statek )
                and ( statki_t[ i_l ].czy_lotniskowiec )
                and ( statki_t[ i_l ].punkty_¿ycia_aktualne > 0 )
                and ( statki_t[ i_l ].id_statek__lotniskowiec__ma_samolot_na_pok³adzie = -99 )
                and ( statki_t[ i_l ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = -99 )
                and ( statki_t[ i_l ].id_grupa = statek_f.id_grupa ) then
                if   ( ztsi_l = -99 )
                  or (  ztsi_l > statek_f.DistanceTo( statki_t[ i_l ] )  ) then
                  begin

                    id_statek__lotniskowiec_najbli¿szy_l := statki_t[ i_l ].id_statek;
                    ztsi_l := statek_f.DistanceTo( statki_t[ i_l ] );

                  end;
                //---//if   ( ztsi_l = -99 ) (...)

          end;
        //---//if statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = -99 then


        ztb_l := false; // Oznacza czy lotniskowiec jest gotowy do przyjêcia samolotu.

        for i_l := 0 to Length( statki_t ) - 1 do
          if    ( statki_t[ i_l ] <> nil )
            and ( not statki_t[ i_l ].czy_usun¹æ_statek )
            and ( statki_t[ i_l ].czy_lotniskowiec )
            and ( statki_t[ i_l ].punkty_¿ycia_aktualne > 0 )
            and (
                     ( id_statek__lotniskowiec_najbli¿szy_l = -99 )
                  or ( statki_t[ i_l ].id_statek = id_statek__lotniskowiec_najbli¿szy_l )
                )
            and (
                     ( statki_t[ i_l ].id_statek__lotniskowiec__ma_samolot_na_pok³adzie = -99 )
                  or ( statki_t[ i_l ].id_statek__lotniskowiec__ma_samolot_na_pok³adzie = statek_f.id_statek )
                )
            and (
                     ( statki_t[ i_l ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = -99 )
                  or ( statki_t[ i_l ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = statek_f.id_statek )
                )
            and ( statki_t[ i_l ].id_grupa = statek_f.id_grupa ) then
            begin

              if statki_t[ i_l ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = -99 then
                begin

                  statki_t[ i_l ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := statek_f.id_statek;

                  if statki_t[ i_l ].si__lotniskowiec__l¹dowanie__kurs_aktualny then
                    statki_t[ i_l ].si__lotniskowiec__l¹dowanie__kurs_aktualny := false; // Dodatkowe zabezpieczenie (nie powinno byæ potrzebne). //???

                  if    ( not czy_klient_g )
                    and ( statek_gracza <> nil )
                    //and ( statek_gracza.czy_lotniskowiec )
                    and ( statek_gracza.id_statek = statki_t[ i_l ].id_statek ) then
                    Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__samolot_zg³asza_l¹dowanie );

                end;
              //---//if statki_t[ i_l ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = -99 then


              if statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = -99 then
                statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := statki_t[ i_l ].id_statek;


              ztb_l := statki_t[ i_l ].lotniskowiec__gotowy_na_przyjêcie_samolotu;


              if statek_f.samolot__l¹dowanie__podchodzenie_krok > 0 then
                begin

                  // Ustawianie siê na œcie¿kê l¹dowania.

                  statek_f.si__punkt_zadany__wspó³rzêdne := statki_t[ i_l ].AbsolutePosition;
                  statek_f.si__punkt_zadany__wspó³rzêdne.Y := statek_f.si__punkt_zadany__wspó³rzêdne.Y + ( samolot_w_powietrzu_wysokoœæ_od_c + statek_f.y_prymityw_najwiêksze ) * 3 * statek_f.samolot__l¹dowanie__podchodzenie_krok;

                  GLS.VectorGeometry.AddVector
                    (
                      statek_f.si__punkt_zadany__wspó³rzêdne,
                      GLS.VectorGeometry.VectorScale
                        (
                          GLS.VectorGeometry.VectorMake( statki_t[ i_l ].AbsoluteDirection.X, 0, statki_t[ i_l ].AbsoluteDirection.Z ),
                          -( statek_f.prêdkoœæ_maksymalna + statki_t[ i_l ].z_prymityw_odleg³oœæ ) * statek_f.samolot__l¹dowanie__podchodzenie_krok * 2 // Ta sama odleg³oœæ l¹dowania.
                        )
                    );

                end
              else//if statek_f.samolot__l¹dowanie__podchodzenie_krok > 0 then
                begin

                  // Podchodzenie do l¹dowania (do pasa startowego).

                  statek_f.si__punkt_zadany__wspó³rzêdne := statki_t[ i_l ].lotniskowiec__³apacz_samolotów_dummy.AbsolutePosition;
                  statek_f.si__punkt_zadany__wspó³rzêdne.Y := statki_t[ i_l ].lotniskowiec__³apacz_samolotów_dummy.AbsolutePosition.Y - statki_t[ i_l ].lotniskowiec__³apacz_samolotów_dummy.Scale.Y * 0.5 + statek_f.y_prymityw_najwiêksze * 0.5;

                  // Aby przed przyziemieniem obni¿y³ wysokoœæ celu.
                  //cel_odleg³oœæ__w_poziomie_l,  Y = 0 aby nie uwzglêdniaæ odleg³oœci w pionie.
                  // Musi byæ pozycja absolutna, gdy¿ samolot mo¿e byæ 'potomkiem' lotniskowca a nie sceny.
                  //if GLS.VectorGeometry.VectorDistance(  GLS.VectorGeometry.VectorMake( statek_f.AbsolutePosition.X, 0, statek_f.AbsolutePosition.Z ), GLS.VectorGeometry.VectorMake( statek_f.si__punkt_zadany__wspó³rzêdne.X, 0, statek_f.si__punkt_zadany__wspó³rzêdne.Z )  ) < statek_f.z_prymityw_odleg³oœæ * statek_f.prêdkoœæ_maksymalna * 0.2 then
                  if   (
                             ( Gra_GLCadencer.TimeMultiplier <= samolot_w_powietrzu_wysokoœæ_od_c )
                         and (   GLS.VectorGeometry.VectorDistance(  GLS.VectorGeometry.VectorMake( statek_f.AbsolutePosition.X, 0, statek_f.AbsolutePosition.Z ), GLS.VectorGeometry.VectorMake( statek_f.si__punkt_zadany__wspó³rzêdne.X, 0, statek_f.si__punkt_zadany__wspó³rzêdne.Z )  ) < statek_f.z_prymityw_odleg³oœæ * statek_f.prêdkoœæ_maksymalna * 0.2   )
                       )
                    or ( // Musi wczeœniej zacz¹æ siê zni¿aæ, gdy¿ nie zd¹¿y obni¿y wysokoœci na czas.
                             ( Gra_GLCadencer.TimeMultiplier > samolot_w_powietrzu_wysokoœæ_od_c ) // Przy wiêkszej prêdkoœci gry zwiêksza tolerancjê porównañ wartoœci.
                         and (   GLS.VectorGeometry.VectorDistance(  GLS.VectorGeometry.VectorMake( statek_f.AbsolutePosition.X, 0, statek_f.AbsolutePosition.Z ), GLS.VectorGeometry.VectorMake( statek_f.si__punkt_zadany__wspó³rzêdne.X, 0, statek_f.si__punkt_zadany__wspó³rzêdne.Z )  ) < statek_f.z_prymityw_odleg³oœæ * statek_f.prêdkoœæ_maksymalna * 0.2 * Gra_GLCadencer.TimeMultiplier   )
                       ) then
                    statek_f.si__punkt_zadany__wspó³rzêdne.Y := statki_t[ i_l ].lotniskowiec__³apacz_samolotów_dummy.AbsolutePosition.Y - statki_t[ i_l ].lotniskowiec__³apacz_samolotów_dummy.Scale.Y * 0.5;

                end;
              //---//if statek_f.samolot__l¹dowanie__podchodzenie_krok > 0 then


              statek_f.si__samolot_zanurzenie_pu³ap__zadane := statek_f.si__punkt_zadany__wspó³rzêdne.Y;


              Break;

            end;
          //---//if    ( statki_t[ i_l ] <> nil ) (...)



          if not ztb_l then
            begin

              // Je¿eli lotniskowce s¹ zajête odnawia okres oczekiwania.

              for i_l := 0 to Length( statki_t ) - 1 do
                if    ( statki_t[ i_l ] <> nil )
                  and ( not statki_t[ i_l ].czy_usun¹æ_statek )
                  and ( statki_t[ i_l ].czy_lotniskowiec )
                  and ( statki_t[ i_l ].punkty_¿ycia_aktualne > 0 )
                  and ( statki_t[ i_l ].id_grupa = statek_f.id_grupa ) then
                  begin

                    // Wskazuje punkt w pobli¿u podejœcia do lotniskowca.

                    // Odleg³oœæ za lotniskowcem.
                    statek_f.si__punkt_zadany__wspó³rzêdne := statki_t[ i_l ].AbsolutePosition;
                    statek_f.si__punkt_zadany__wspó³rzêdne.Y := ( samolot_w_powietrzu_wysokoœæ_od_c + statek_f.y_prymityw_najwiêksze ) * ( Random( 10 ) + 5 );

                    GLS.VectorGeometry.AddVector
                      (
                        statek_f.si__punkt_zadany__wspó³rzêdne,
                        GLS.VectorGeometry.VectorScale
                          (
                            GLS.VectorGeometry.VectorMake( statki_t[ i_l ].AbsoluteDirection.X, 0, statki_t[ i_l ].AbsoluteDirection.Z ),
                            -( statek_f.prêdkoœæ_maksymalna + statki_t[ i_l ].z_prymityw_odleg³oœæ ) * (  statek_f.samolot__l¹dowanie__podchodzenie_krok + 1 + Random( 3 )  ) * 2 // Ta sama odleg³oœæ l¹dowania.
                          )
                      );


                    // Przesuwa punkt za lotniskowcem na boki.
                    statek_f.si__punkt_zadany__wspó³rzêdne :=
                      GLS.VectorGeometry.MoveObjectAround
                        (
                          statek_f.si__punkt_zadany__wspó³rzêdne,
                          GLS.VectorGeometry.VectorMake( 0, 1, 0 ),
                          GLS.VectorGeometry.VectorMake( statki_t[ i_l ].AbsolutePosition.X, 0, statki_t[ i_l ].AbsolutePosition.Z ),
                          //statki_t[ i_l ].AbsolutePosition,
                          0,
                          -30 + Random( 61 )
                        );


                    statek_f.si__samolot_zanurzenie_pu³ap__zadane := statek_f.si__punkt_zadany__wspó³rzêdne.Y;

                    Break;

                  end;
                //---//if    ( statki_t[ i_l ] <> nil ) (...)


              if statek_f.samolot__l¹dowanie__podchodzenie_krok <> l¹dowanie__podchodzenie_kroki_iloœæ_c then // Kr¹¿y oczekuj¹c na gotowoœæ lotniskowca.
               statek_f.samolot__l¹dowanie__podchodzenie_krok := l¹dowanie__podchodzenie_kroki_iloœæ_c;

            end;
          //---//if not ztb_l then

      end
    else//if ztb_l then
      begin

        // Nie ma dostêpnych dla l¹dowania lotniskowców.

        if statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = -99 then
          statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := -1; // -1 oznacza, ¿e samolot l¹duje nie na lotniskowcu.


        //if statek_f.samolot__l¹dowanie__podchodzenie_krok > 0 then //???
        //  statek_f.samolot__l¹dowanie__podchodzenie_krok := 1;


        // Punkt l¹dowania wyznaczany wzglêdem kierunku samolotu (w poziomie).
        //statek_f.si__punkt_zadany__wspó³rzêdne := statek_f.AbsolutePosition;
        //statek_f.si__punkt_zadany__wspó³rzêdne.Y := samolot_w_powietrzu_wysokoœæ_od_c + samolot_w_powietrzu_wysokoœæ_od_c * statek_f.zanurzenie_pu³ap__szybkoœæ;
        //
        //if Gra_GLCadencer.TimeMultiplier > 1 then
        //  i_l := System.Math.Ceil( Gra_GLCadencer.TimeMultiplier )
        //else//if Gra_GLCadencer.TimeMultiplier > 1 then
        //  i_l := 1;
        //
        //GLS.VectorGeometry.AddVector
        //  (
        //    statek_f.si__punkt_zadany__wspó³rzêdne,
        //    GLS.VectorGeometry.VectorScale
        //      (
        //        GLS.VectorGeometry.VectorMake( statek_f.AbsoluteDirection.X, 0, statek_f.AbsoluteDirection.Z ),
        //        ( statek_f.prêdkoœæ_maksymalna + statek_f.z_prymityw_odleg³oœæ ) * ( 2 * statek_f.samolot__l¹dowanie__podchodzenie_krok + i_l )
        //      )
        //  );
        //---// Punkt l¹dowania wyznaczany wzglêdem kierunku samolotu (w poziomie).


        // Punkt l¹dowania wyznaczany wzglêdem bazy grupy.
        id_grupa_l := statek_f.id_grupa;

        // Gdy gracz nie jest gotowy to ma id_grupa = 0 i przy rozstawianiu statków indeks jest poza zakresem tabeli gra_pozycja_pocz¹tkowa_parametry_t.
        if    ( id_grupa_l <> 1 )
          and ( id_grupa_l <> 2 ) then
          id_grupa_l := 1;


        if punk_l¹dowania_korekta_wyznacz_f then
          begin

            if Length( statki_t ) > 0 then
              i_l := Length( statki_t )
            else//if Length( statki_t ) > 0 then
              i_l := 1;

            if i_l > 1 then
              i_l := Random( i_l + 1 ) - Zaokr¹glij__W_Górê( i_l * 0.5 );

            statek_f.si__l¹dowanie_punkt_korekta_x := i_l * gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].odstêp_x;

          end;
        //---//if punk_l¹dowania_korekta_wyznacz_f then


        statek_f.si__punkt_zadany__wspó³rzêdne.X := gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].patrol__tylny_x + statek_f.si__l¹dowanie_punkt_korekta_x;
        statek_f.si__punkt_zadany__wspó³rzêdne.Z := gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].patrol__tylny_z;

        if gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].z < 0 then
          statek_f.si__punkt_zadany__wspó³rzêdne.Z := statek_f.si__punkt_zadany__wspó³rzêdne.Z - statek_f.z_prymityw_odleg³oœæ * statek_f.prêdkoœæ_maksymalna * ( 1 + l¹dowanie__podchodzenie_kroki_iloœæ_c - statek_f.samolot__l¹dowanie__podchodzenie_krok )
        else//if gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].z < 0 then
          statek_f.si__punkt_zadany__wspó³rzêdne.Z := statek_f.si__punkt_zadany__wspó³rzêdne.Z + statek_f.z_prymityw_odleg³oœæ * statek_f.prêdkoœæ_maksymalna * ( 1 + l¹dowanie__podchodzenie_kroki_iloœæ_c - statek_f.samolot__l¹dowanie__podchodzenie_krok );
        //---// Punkt l¹dowania wyznaczany wzglêdem bazy grupy.


        if statek_f.samolot__l¹dowanie__podchodzenie_krok > 0 then
          statek_f.si__punkt_zadany__wspó³rzêdne.Y := samolot_w_powietrzu_wysokoœæ_od_c + statek_f.zanurzenie_pu³ap__szybkoœæ * statek_f.samolot__l¹dowanie__podchodzenie_krok
        else//if statek_f.samolot__l¹dowanie__podchodzenie_krok > 0 then
          statek_f.si__punkt_zadany__wspó³rzêdne.Y := samolot_w_powietrzu_wysokoœæ_od_c;


        statek_f.si__samolot_zanurzenie_pu³ap__zadane := statek_f.si__punkt_zadany__wspó³rzêdne.Y;

      end;
    //---//if ztb_l then

  end;//---//Funkcja Lotniskowiec__L¹dowanie__Podchodzenie__Wspó³rzêdne() w SI_Decyduj().

  //Funkcja Patrol_Punkt_Wyznacz() w SI_Decyduj().
  procedure Patrol_Punkt_Wyznacz( statek_f : TStatek );
  const
    patrol_po_okrêgu__k¹t_skok_c_l : integer = 30;

  var
    id_grupa_l,
    promieñ_l
      : integer;
    zt_vector : GLS.VectorTypes.TVector4f;
  begin

    //
    // Funkcja wyznacza punkt, do którego bêdzie pod¹¿a³ statek.
    //

    if   ( not SI__P³ywa_CheckBox.Checked )
      or ( statek_f = nil )
      or (  not Assigned( statek_f )  ) then
      Exit;

    // Gdy na lotniskowcu ma wyl¹dowaæ samolot wyznacza punkt (kierunek), do którego p³ynie lotniskowiec.
    id_grupa_l := statek_f.id_grupa;

    // Gdy gracz nie jest gotowy to ma id_grupa = 0 i przy rozstawianiu statków indeks jest poza zakresem tabeli gra_pozycja_pocz¹tkowa_parametry_t.
    if    ( id_grupa_l <> 1 )
      and ( id_grupa_l <> 2 ) then
      id_grupa_l := 1;


    if    ( statek_f.czy_lotniskowiec )
      and ( statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 )
      and ( statek_f.id_statek__lotniskowiec__ma_samolot_na_pok³adzie = -99 ) then
      begin

        zt_vector := statek_f.AbsolutePosition;

        if statek_f.si__lotniskowiec__l¹dowanie__kurs_aktualny then
          GLS.VectorGeometry.AddVector
            (
              zt_vector,
              GLS.VectorGeometry.VectorScale
                (
                  GLS.VectorGeometry.VectorMake( statek_f.AbsoluteDirection.X, 0, statek_f.AbsoluteDirection.Z ),
                  10 * statek_f.z_prymityw_odleg³oœæ * statek_f.prêdkoœæ_maksymalna
                )
            )
        else//if statek_f.si__lotniskowiec__l¹dowanie__kurs_aktualny then
          if gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].z < 0 then
            zt_vector.Z := zt_vector.Z - 10 * statek_f.z_prymityw_odleg³oœæ * statek_f.prêdkoœæ_maksymalna
          else//if gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].z < 0 then
            zt_vector.Z := zt_vector.Z + 10 * statek_f.z_prymityw_odleg³oœæ * statek_f.prêdkoœæ_maksymalna;

        statek_f.si__punkt_zadany__wspó³rzêdne := zt_vector;

        Exit;

      end;
    //---//if    ( statek_f.czy_lotniskowiec ) (...)
    //---// Gdy na lotniskowcu ma wyl¹dowaæ samolot wyznacza punkt (kierunek), do którego p³ynie lotniskowiec.



    // Punkt œrodka obszaru patrolu.
    if statek_f.czy_lotniskowiec then
      begin

        // Lotniskowce patroluj¹ bardziej z ty³u.

        promieñ_l := gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].patrol__tylny_promieñ;

        zt_vector :=
          GLS.VectorGeometry.VectorMake
            (
              gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].patrol__tylny_x,
              0,
              gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].patrol__tylny_z
            );

      end
    else//if statek_f.czy_lotniskowiec then
      begin

        promieñ_l := gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].patrol_promieñ;

        zt_vector :=
          GLS.VectorGeometry.VectorMake
            (
              gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].patrol_x,
              0,
              gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].patrol_z
            );

      end;
    //---//if statek_f.czy_lotniskowiec then

    //promieñ_l :=
    //    Abs( gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].korekta_x )
    //  + Abs( gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].z )
    //  + System.Math.Ceil( statek_f.prêdkoœæ_maksymalna * statek_f.z_prymityw_odleg³oœæ );


    // Je¿eli statek ma du¿¹ prêdkoœæ maksymaln¹ (np. samolot) to sprawdzanie dotarcia do punktu patrolu bez przerwy stwierdza, ¿e statek dotar³ i co chwila wyznacza nowy punkt patrolu.
    if promieñ_l < statek_f.z_prymityw_odleg³oœæ * statek_f.prêdkoœæ_maksymalna then
      promieñ_l := promieñ_l + Round( statek_f.z_prymityw_odleg³oœæ * statek_f.prêdkoœæ_maksymalna );


    if statek_f.patrol_losowy__licznik > 0 then
      begin

        // Patrol losowy.
        statek_f.si__punkt_zadany__wspó³rzêdne :=
          GLS.VectorGeometry.VectorMake
            (
              -promieñ_l + Random( 2 * promieñ_l + 1 ),
              0,
              -promieñ_l + Random( 2 * promieñ_l + 1 )
            );

        GLS.VectorGeometry.AddVector( statek_f.si__punkt_zadany__wspó³rzêdne, zt_vector );
        //---// Patrol losowy.


        inc( statek_f.patrol_losowy__licznik );

        if statek_f.patrol_losowy__licznik > 180 / patrol_po_okrêgu__k¹t_skok_c_l then // Porównywalny czas dla obu rodzajów patroli.
          begin

            statek_f.patrol_losowy__licznik := 0;
            statek_f.patrol_po_okrêgu__k¹t_aktualny := broñ_nie_obracana_c; // Oznacza, ¿e wartoœæ nie zosta³a jeszcze wyznaczona.

          end;
        //---//if statek_f.patrol_losowy__licznik > 180 / patrol_po_okrêgu__k¹t_skok_c_l then

      end
    else//if statek_f.patrol_losowy__licznik > 0 then
      begin

        // Patrol po okrêgu.
        statek_f.si__punkt_zadany__wspó³rzêdne := zt_vector;
        statek_f.si__punkt_zadany__wspó³rzêdne.X := statek_f.si__punkt_zadany__wspó³rzêdne.X + promieñ_l;


        if statek_f.patrol_po_okrêgu__k¹t_aktualny = broñ_nie_obracana_c then // Oznacza, ¿e wartoœæ nie zosta³a jeszcze wyznaczona.
          statek_f.patrol_po_okrêgu__k¹t_aktualny := -360 + Random( 721 );


        if statek_f.patrol_po_okrêgu__k¹t_aktualny >= 0 then
          begin

            statek_f.patrol_po_okrêgu__k¹t_aktualny := statek_f.patrol_po_okrêgu__k¹t_aktualny + patrol_po_okrêgu__k¹t_skok_c_l;

            if statek_f.patrol_po_okrêgu__k¹t_aktualny > 360 then
              statek_f.patrol_po_okrêgu__k¹t_aktualny := statek_f.patrol_po_okrêgu__k¹t_aktualny - 360;

          end
        else//if statek_f.patrol_po_okrêgu__k¹t_aktualny >= 0 then
          begin

            statek_f.patrol_po_okrêgu__k¹t_aktualny := statek_f.patrol_po_okrêgu__k¹t_aktualny - patrol_po_okrêgu__k¹t_skok_c_l;

            if statek_f.patrol_po_okrêgu__k¹t_aktualny < -360 then
              statek_f.patrol_po_okrêgu__k¹t_aktualny := statek_f.patrol_po_okrêgu__k¹t_aktualny + 360;

          end;
        //---//if statek_f.patrol_po_okrêgu__k¹t_aktualny >= 0 then


        statek_f.si__punkt_zadany__wspó³rzêdne :=
          GLS.VectorGeometry.MoveObjectAround
            (
              statek_f.si__punkt_zadany__wspó³rzêdne,
              GLS.VectorGeometry.VectorMake( 0, 1, 0 ),
              GLS.VectorGeometry.VectorMake( zt_vector.X, 0, zt_vector.Z ),
              0,
              statek_f.patrol_po_okrêgu__k¹t_aktualny
            );


        statek_f.patrol_losowy__licznik := statek_f.patrol_losowy__licznik - patrol_po_okrêgu__k¹t_skok_c_l;

        if statek_f.patrol_losowy__licznik < -360 then
          statek_f.patrol_losowy__licznik := 1;
        //---// Patrol po okrêgu.

      end;
    //---//if statek_f.patrol_losowy__licznik > 0 then

  end;//---//Funkcja Patrol_Punkt_Wyznacz() w SI_Decyduj().

  //Funkcja Odnawianie_Zasobów__Punkt_Wyznacz() w SI_Decyduj().
  function Odnawianie_Zasobów__Punkt_Wyznacz( statek_f : TStatek ) : boolean;

    //Funkcja Punkt_ZnajdŸ() w Odnawianie_Zasobów__Punkt_Wyznacz() w SI_Decyduj().
    function Punkt_ZnajdŸ( statek_f_f : TStatek; const punkt_dowolny_f : boolean ) : boolean;
    var
      ztb_l : boolean;
      i_l : integer;
    begin

      //
      // Funkcja próbuje znaleŸæ dobry punkt do odnawiania zasobów.
      //
      // Zwraca prawdê gdy uda³o siê znaleŸæ dobry punkt do odnawiania zasobów.
      //
      // Parametry:
      //   punkt_dowolny_f:
      //     false - spróbuje wyszukaæ punkt ³atwy w dostêpie dla statku.
      //     true - wyszuka najbli¿szy punkt.
      //

      Result := false;


      ztb_l := false;

      for i_l := 0 to l¹d_list.Count - 1 do
        begin

          if    (
                     (  Wyglad_Elementy.Kolizja_Wp³yw__Amunicja_Uzupe³nianie( l¹d_list[ i_l ] ) > 0  )
                  or (  Wyglad_Elementy.Kolizja_Wp³yw__Obra¿enia( l¹d_list[ i_l ] ) < 0  )
                )
            and (  not Wyglad_Elementy.Radar_Ignoruje( l¹d_list[ i_l ] )  ) // Aby przeliczanych by³o mniej elementów.
            and (  Wyglad_Elementy.Obiekt_Rodzaj( l¹d_list[ i_l ] ) <> Wyglad_Elementy.or_DŸwiêk_Emiter  )
            and (  not ( TGLCustomSceneObject(l¹d_list[ i_l ]) is TSt_GLDummyCube )  ) // Kontenerów na obiekty nie rysuje na radarze.
            and (
                     ( statek_f_f = nil )
                  or ( punkt_dowolny_f )
                  or (
                            ( statek_f_f <> nil )
                        and (
                                 (
                                       ( not statek_f_f.czy_samolot )
                                   and ( TGLCustomSceneObject(l¹d_list[ i_l ]).AbsolutePosition.Y <= statek_f_f.y_prymityw_najwiêksze )
                                   //and ( TGLCustomSceneObject(l¹d_list[ i_l ]).AbsolutePosition.Y - TGLCustomSceneObject(l¹d_list[ i_l ]).Scale.Y <= statek_f_f.y_prymityw_najwiêksze ) // Nie uwzglêdnia skali zagnie¿d¿onych obiektów.
                                 )
                              or (
                                       ( not statek_f_f.czy_zanurzanie )
                                   and ( TGLCustomSceneObject(l¹d_list[ i_l ]).AbsolutePosition.Y >= 0 )
                                   and ( TGLCustomSceneObject(l¹d_list[ i_l ]).AbsolutePosition.Y <= statek_f_f.y_prymityw_najwiêksze )
                                 )
                            )
                     )
                ) then
            begin

              if not Result then
                Result := true;


              if statek_f_f = nil then
                Exit;


              if not ztb_l then
                begin

                  // Pierwsze podstawienie.

                  ztb_l := true;

                  statek_f_f.si__punkt_zadany__wspó³rzêdne := TGLCustomSceneObject(l¹d_list[ i_l ]).AbsolutePosition;

                end
              else//if not ztb_l then
                begin

                  if statek_f_f.DistanceTo( TGLCustomSceneObject(l¹d_list[ i_l ]).AbsolutePosition ) < statek_f_f.DistanceTo( statek_f_f.si__punkt_zadany__wspó³rzêdne ) then
                    statek_f_f.si__punkt_zadany__wspó³rzêdne := TGLCustomSceneObject(l¹d_list[ i_l ]).AbsolutePosition;

                end;
              //---//if not ztb_l then

            end;
          //---//if    ( (...)

        end;
      //---//for i_l := 0 to l¹d_list.Count - 1 do

    end;//---//Funkcja Punkt_ZnajdŸ() w Odnawianie_Zasobów__Punkt_Wyznacz() w SI_Decyduj().

  begin

    //
    // Funkcja ustawia aktywnoœæ si,
    // wyznacza punkt, do którego bêdzie pod¹¿a³ statek aby odnowiæ zasoby.
    //
    // Zwraca prawdê gdy istniej¹ obiekty l¹dowe odnawiaj¹ce zasoby.
    //

    Result := Punkt_ZnajdŸ( nil, true );


    if   ( statek_f = nil )
      or (  not Assigned( statek_f )  ) then
      Exit;


    if not Punkt_ZnajdŸ( statek_f, false ) then
      Punkt_ZnajdŸ( statek_f, true );


    if   (
               ( statek_f.czy_samolot )
           and ( statek_f.si__punkt_zadany__wspó³rzêdne.Y < 0 )
         )
      or (
               ( statek_f.czy_zanurzanie )
           and ( statek_f.si__punkt_zadany__wspó³rzêdne.Y > 0 ) // Zostanie zinterpretowane jako g³êbokoœæ do zanurzenia.
         ) then
      statek_f.si__punkt_zadany__wspó³rzêdne.Y := 0;


    statek_f.si_aktywnoœæ := sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów;
    statek_f.si__p³ywanie_do_punktu__odnawianie_zasobów__rozpoczêcie_czas_sekundy_i := Czas_Teraz_W_Sekundach();
    statek_f.si__p³ywanie_do_punktu__odnawianie_zasobów__trwanie_modyfikator_losowy__czas_sekundy_i := Random( si__p³ywanie_do_punktu__odnawianie_zasobów__trwanie__czas_sekundy_g ) - Round( si__p³ywanie_do_punktu__odnawianie_zasobów__trwanie__czas_sekundy_g * 0.5 );

    if statek_f.si__kolizja__samolot__p³ywanie_do_punktu__odnawianie_zasobów then
      statek_f.si__kolizja__samolot__p³ywanie_do_punktu__odnawianie_zasobów := false;

    if statek_f.si__punkt_zadany__wspó³rzêdne.Y > statek_f.zanurzenie_pu³ap__maksymalne then
      statek_f.si__punkt_zadany__wspó³rzêdne.Y := statek_f.zanurzenie_pu³ap__maksymalne;

    if    ( statek_f.czy_samolot )
      and ( statek_f.si__punkt_zadany__wspó³rzêdne.Y < samolot_w_powietrzu_wysokoœæ_od_c ) then
      statek_f.si__punkt_zadany__wspó³rzêdne.Y := samolot_w_powietrzu_wysokoœæ_od_c;

  end;//---//Funkcja Odnawianie_Zasobów__Punkt_Wyznacz() w SI_Decyduj().

  //Funkcja Odnawianie_Zasobów__Zakoñczyæ_SprawdŸ() w SI_Decyduj().
  function Odnawianie_Zasobów__Zakoñczyæ_SprawdŸ( statek_f : TStatek ) : boolean;
  begin

    //
    // Funkcja okreœla czy zakoñczyæ tryb odnawiania zasobów.
    //
    // Zwraca prawdê gdy nale¿y zakoñczyæ tryb odnawiania zasobów.
    //

    Result := false;

    if   ( statek_f = nil )
      or (  not Assigned( statek_f )  )
      or (  not ( statek_f.si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów ] )  ) then
      Exit;


    if    ( statek_f.punkty_¿ycia_aktualne >= statek_f.punkty_¿ycia_maksymalne )
      and ( Broñ__Amunicja_Uzupe³niona( TTorpedy_Wyrzutnia_t(statek_f.artyleria_t) )  )
      and ( Broñ__Amunicja_Uzupe³niona( TTorpedy_Wyrzutnia_t(statek_f.bomba_g³êbinowa_t) )  )
      and ( Broñ__Amunicja_Uzupe³niona( TTorpedy_Wyrzutnia_t(statek_f.dzia³a_t) )  )
      and ( Broñ__Amunicja_Uzupe³niona( TTorpedy_Wyrzutnia_t(statek_f.je¿e_g³êbinowe_t) )  )
      and ( Broñ__Amunicja_Uzupe³niona( TTorpedy_Wyrzutnia_t(statek_f.torpedy_wyrzutnie_t) )  )
      or ( statek_f.si__kolizja__samolot__p³ywanie_do_punktu__odnawianie_zasobów )
      or (  Czas_Miêdzy_W_Sekundach( statek_f.si__p³ywanie_do_punktu__odnawianie_zasobów__rozpoczêcie_czas_sekundy_i ) > si__p³ywanie_do_punktu__odnawianie_zasobów__trwanie__czas_sekundy_g + statek_f.si__p³ywanie_do_punktu__odnawianie_zasobów__trwanie_modyfikator_losowy__czas_sekundy_i  ) then
      Result := true;

  end;//---//Funkcja Odnawianie_Zasobów__Zakoñczyæ_SprawdŸ() w SI_Decyduj().

  //Funkcja Walka__P³ywanie_Do_Punktu__Punkt_Wyznacz() w SI_Decyduj().
  function Walka__P³ywanie_Do_Punktu__Punkt_Wyznacz( statek_f : TStatek; const wspó³rzêdne_celu_wyznacz_f : boolean = true ) : TStatek;
  var
    ztb_l : boolean;
    i_l : integer;
    ztsi,
    cel_k¹t_l,
    cel_odleg³oœæ__w_poziomie_l,
    cel_przesuniêcie__w_poziomie_l
      : single;
  begin

    //
    // Funkcja sprawdza poprawnoœæ i aktualizuje wspó³rzêdne celu dla statku.
    //
    // Zwraca statek cel.
    //

    Result := nil;


    if   ( statek_f = nil )
      or (  not Assigned( statek_f )  ) then
      Exit;


    if statek_f.si__walka__p³ywanie_do_punktu__cel__id_statek = -99 then
      Exit;


    ztb_l := false; // Okreœla czy dane o statku celu s¹ znane.

    for i_l := 0 to Length( statek_f.si__statki_znane_r_t ) - 1 do
      if statek_f.si__statki_znane_r_t[ i_l ].id_statek__sisz = statek_f.si__walka__p³ywanie_do_punktu__cel__id_statek then
        begin

          ztb_l := true;
          Break

        end;
      //---//if statek_f.si__statki_znane_r_t[ i_l ].id_statek__sisz = statek_f.si__walka__p³ywanie_do_punktu__cel__id_statek then

    if not ztb_l then
      Exit;


    for i_l := 0 to Length( statki_t ) - 1 do
      if    ( statki_t[ i_l ] <> nil )
        and ( statki_t[ i_l ].id_statek = statek_f.si__walka__p³ywanie_do_punktu__cel__id_statek ) then
        begin

          Result := statki_t[ i_l ];
          Break;

        end;
      //---//if    ( statki_t[ i_l ] <> nil )

    if Result = nil then
      Exit;


    if not wspó³rzêdne_celu_wyznacz_f then
      Exit;


    //statek_f.si__punkt_zadany__wspó³rzêdne := Result.AbsolutePosition;
    statek_f.si__punkt_zadany__wspó³rzêdne :=
      GLS.VectorGeometry.VectorMake
        (
          Result.AbsolutePosition.X,
          0,
          Result.AbsolutePosition.Z
        );


    cel_odleg³oœæ__w_poziomie_l := statek_f.DistanceTo( Result );


    if Result.prêdkoœæ_aktualna <> 0 then
      begin

        cel_k¹t_l :=
          System.Math.RadToDeg
            (
              GLS.VectorGeometry.AngleBetweenVectors
                (
                  GLS.VectorGeometry.VectorMake( Result.AbsoluteDirection.X, 0, Result.AbsoluteDirection.Z ),
                  GLS.VectorGeometry.VectorMake( statek_f.AbsoluteDirection.X, 0, statek_f.AbsoluteDirection.Z ),
                  GLS.VectorGeometry.VectorMake( 0, 0, 0 )
                )
            );

        cel_przesuniêcie__w_poziomie_l := 0;


        if statek_f.czy_samolot then
          begin

            if cel_odleg³oœæ__w_poziomie_l <= statek_f.prêdkoœæ_maksymalna + Result.z_prymityw_odleg³oœæ * 2 + statek_f.z_prymityw_odleg³oœæ * 2 then
              cel_przesuniêcie__w_poziomie_l := cel_przesuniêcie__w_poziomie_l + Result.z_prymityw_odleg³oœæ * 2 + statek_f.z_prymityw_odleg³oœæ * 2;

          end
        else//if statek_f.czy_samolot then
          begin

            // Je¿eli podp³ywa od boku to celuje w statek cel, je¿eli podp³ywa z ty³u lub przodu to celuje przed kierunek ruchu.
            if   ( cel_k¹t_l <= 45 )
              or ( cel_k¹t_l >= 135) then
              begin

                // Statek i cel s¹ bardziej równolegle.

                // Je¿eli statek bêdzie p³yn¹³ ty³em i mia³ wyrzutnie bomb g³êbinowych z ty³u to przy takim przesuniêciu broñ mo¿e byæ za daleko od celu aby trafiæ ale p³yn¹c do ty³u mo¿e zostaæ uszkodzony w³asnymi bombami g³êbinowymi.

                if statek_f.si__walka__p³ywanie_do_punktu__zbli¿anie then
                  //ztsi := 0
                  cel_przesuniêcie__w_poziomie_l := statek_f.z_prymityw_odleg³oœæ * 2 + Abs( Result.AbsolutePosition.Y ) * 0.5
                else//if statek_f.si__walka__p³ywanie_do_punktu__zbli¿anie then
                  begin

                    if statek_f.prêdkoœæ_maksymalna <> 0 then
                      cel_przesuniêcie__w_poziomie_l := 100 * Abs( Result.prêdkoœæ_aktualna ) / statek_f.prêdkoœæ_maksymalna // Jakim procentem prêdkoœci maksymalnej statku jest aktualna prêdkoœæ celu. Tutaj tymczasowo jako procent prêdkoœci.
                    else//if statek_f.prêdkoœæ_maksymalna <> 0 then
                      cel_przesuniêcie__w_poziomie_l := 100; // Tutaj tymczasowo jako procent prêdkoœci.


                    if cel_odleg³oœæ__w_poziomie_l > statek_f.z_prymityw_odleg³oœæ then
                      begin

                        // Odleg³oœæ podzielona na d³ugoœæ statku (ka¿da wielokrotnoœæ zwiêksza prêdkoœæ o jeden procent).

                        ztsi := cel_odleg³oœæ__w_poziomie_l / statek_f.z_prymityw_odleg³oœæ;
                        ztsi := cel_przesuniêcie__w_poziomie_l + ztsi;

                      end
                    else//if cel_odleg³oœæ__w_poziomie_l > statek_f.z_prymityw_odleg³oœæ then
                      ztsi := cel_przesuniêcie__w_poziomie_l;


                    if ztsi > 100 then
                      ztsi := 100;

                    // Wyliczenie odleg³oœci tak aby w funkcji Statek__P³ywanie_Do_Punktu() prêdkoœæ procent by³a odpowiednio wyznaczona.

                    ztsi := ztsi * ( statek_f.z_prymityw_odleg³oœæ * statek_f.prêdkoœæ_maksymalna ) / 75; // To samo cel_odleg³oœæ__w_poziomie_l * 75. Tutaj jest odwrotnoœæ tego równania.


                    cel_przesuniêcie__w_poziomie_l := ztsi + statek_f.z_prymityw_odleg³oœæ + Abs( Result.AbsolutePosition.Y ) * 0.5;

                  end;
                //---//if statek_f.si__walka__p³ywanie_do_punktu__zbli¿anie then


                //cel_przesuniêcie__w_poziomie_l := ztsi + statek_f.z_prymityw_odleg³oœæ * 2 + Abs( Result.AbsolutePosition.Y ) * 0.5;

              end
            else// if   ( cel_k¹t_l <= 45 ) (...)
              cel_przesuniêcie__w_poziomie_l := Abs( Result.prêdkoœæ_aktualna ) + Result.z_prymityw_odleg³oœæ + Abs( statek_f.prêdkoœæ_aktualna ); // Statek i cel s¹ bardziej prostopadle.

          end;
        //---//if statek_f.czy_samolot then

        //// Je¿eli samolot jest zbyt wysoko to zwiêksza przesuniêcie punktu celowania.
        //if    ( statek_f.czy_samolot ) //???
        //  and (  Abs( statek_f.AbsolutePosition.Y ) > samolot_prêdkoœæ_lotu_procent_minimalny_c + statek_f.y_prymityw_najwiêksze * 4  ) then // To samo .y_prymityw_najwiêksze.
        //  cel_przesuniêcie__w_poziomie_l := cel_przesuniêcie__w_poziomie_l
        //     //+ Abs( Result.prêdkoœæ_aktualna )
        //     + Abs( statek_f.AbsolutePosition.Y ) - ( samolot_prêdkoœæ_lotu_procent_minimalny_c + statek_f.y_prymityw_najwiêksze * 4 ); // To samo .y_prymityw_najwiêksze.


        if cel_przesuniêcie__w_poziomie_l <> 0 then
          begin

            //if Result.prêdkoœæ_aktualna < 0 then
            if   (
                       ( not statek_f.czy_samolot )
                   and ( Result.prêdkoœæ_aktualna < 0 )
                 )
              or (
                       ( statek_f.czy_samolot )
                   and (
                            ( cel_k¹t_l > 135 ) // Samolot podlatuje od przodu.
                         or ( // Cel p³ynie do ty³u, samolot podlatuje od boku.
                                  ( cel_k¹t_l >= 45 )
                              and ( cel_k¹t_l <= 135 )
                              and ( Result.prêdkoœæ_aktualna_procent__bezwzglêdny <= -samolot_prêdkoœæ_lotu_procent_minimalny_c )
                            )
                       )
                 ) then
              cel_przesuniêcie__w_poziomie_l := -cel_przesuniêcie__w_poziomie_l;


            GLS.VectorGeometry.AddVector
              (
                statek_f.si__punkt_zadany__wspó³rzêdne,
                GLS.VectorGeometry.VectorScale
                  (
                    GLS.VectorGeometry.VectorMake( Result.AbsoluteDirection.X, 0, Result.AbsoluteDirection.Z ),
                    cel_przesuniêcie__w_poziomie_l
                  )
              );

          end;
        //---//if cel_przesuniêcie__w_poziomie_l <> 0 then

      end;
    //---//if Result.prêdkoœæ_aktualna <> 0 then


    if   ( not statek_f.si__walka__p³ywanie_do_punktu__zbli¿anie )
      or ( statek_f.czy_samolot ) then
      begin

        if cel_odleg³oœæ__w_poziomie_l > statek_f.prêdkoœæ_maksymalna * 100 then // To samo .si__walka__p³ywanie_do_punktu__prêdkoœæ_zadana_procent_korekta.
          statek_f.si__walka__p³ywanie_do_punktu__prêdkoœæ_zadana_procent_korekta := samolot_prêdkoœæ_lotu_procent_minimalny_c
        else//if cel_odleg³oœæ__w_poziomie_l > Result.prêdkoœæ_maksymalna * 100 then
          statek_f.si__walka__p³ywanie_do_punktu__prêdkoœæ_zadana_procent_korekta := Random(  Round( samolot_prêdkoœæ_lotu_procent_minimalny_c ) + 1  );

      end
    else//if   ( not statek_f.si__walka__p³ywanie_do_punktu__zbli¿anie ) (...)
      begin

        if    ( Result.prêdkoœæ_aktualna <> 0 )
          and ( statek_f.prêdkoœæ_maksymalna <> 0 ) then
          statek_f.si__walka__p³ywanie_do_punktu__prêdkoœæ_zadana_procent_korekta := 100 * Abs( Result.prêdkoœæ_aktualna ) / statek_f.prêdkoœæ_maksymalna // Jakim procentem prêdkoœci maksymalnej statku jest aktualna prêdkoœæ celu.
        else//if    ( Result.prêdkoœæ_aktualna <> 0 ) (...)
          statek_f.si__walka__p³ywanie_do_punktu__prêdkoœæ_zadana_procent_korekta := samolot_prêdkoœæ_lotu_procent_minimalny_c;


        if statek_f.si__walka__p³ywanie_do_punktu__prêdkoœæ_zadana_procent_korekta >= 100 then
          statek_f.si__walka__p³ywanie_do_punktu__zbli¿anie := false; // Cel jest zbyt szybki.


        if    ( statek_f.si__walka__p³ywanie_do_punktu__zbli¿anie )
          and ( cel_odleg³oœæ__w_poziomie_l > statek_f.z_prymityw_odleg³oœæ + statek_f.prêdkoœæ_maksymalna )
          and (  Abs( statek_f.skrêt_zadany_procent ) <= 50  ) then
          statek_f.si__walka__p³ywanie_do_punktu__prêdkoœæ_zadana_procent_korekta := 100 - samolot_prêdkoœæ_lotu_procent_minimalny_c;

      end;
    //---//if   ( not statek_f.si__walka__p³ywanie_do_punktu__zbli¿anie ) (...)

  end;//---//Funkcja Walka__P³ywanie_Do_Punktu__Punkt_Wyznacz() w SI_Decyduj().

  //Funkcja SI_Aktywnoœæ_Okreœl() w SI_Decyduj().
  procedure SI_Aktywnoœæ_Okreœl( statek_f : TStatek );

    //Funkcja Kotwice_Opuszczone() w SI_Aktywnoœæ_Okreœl() w SI_Decyduj().
    function Kotwice_Opuszczone( statek_f_f : TStatek ) : boolean;
    var
      i_l_l : integer;
    begin

      //
      // Funkcja zwraca prawdê gdy któraœ kotwica jest opuszczona.
      //

      Result := false;


      if Length( statek_f_f.kotwica_t ) <= 0 then
        Exit;


      for i_l_l := 0 to Length( statek_f_f.kotwica_t ) - 1 do
        if statek_f_f.kotwica_t[ i_l_l ].kotwica_ruch_etap__ko <> kre_Statek then
          begin

            Result := true;
            Break;

          end;
        //---//if statek_f_f.kotwica_t[ i_l_l ].kotwica_ruch_etap__ko <> kre_Statek then

    end;//---//Funkcja Kotwice_Opuszczone() w SI_Aktywnoœæ_Okreœl() w SI_Decyduj().

    //Funkcja L¹dowanie__Odnawianie_Zasobów_Decyzja() w SI_Aktywnoœæ_Okreœl() w SI_Decyduj().
    function L¹dowanie__Odnawianie_Zasobów_Decyzja( statek_f_f : TStatek; const odnawianie_zasobów_f : boolean = false ) : boolean;

      //Funkcja Broñ_Amunicja_Zosta³o_Procent() w Funkcja L¹dowanie__Odnawianie_Zasobów_Decyzja() w SI_Aktywnoœæ_Okreœl() w SI_Decyduj().
      function Broñ_Amunicja_Zosta³o_Procent( var amunicja_procent_pozosta³o_najmniejszy_f : real; broñ_f : array of TTorpedy_Wyrzutnia ) : real;
      var
        i_l_l_l : integer;
        ztr_l_l,
        amunicja_procent_pozosta³o_l_l
          : real;
      begin

        //
        // Funkcja zwraca najmniejszy procent za³adowania egzemplarza danego rodzaju broni
        // lub -1 gdy brak danego rodzaju broni.
        //

        Result := -1;


        if Length( broñ_f ) <= 0 then
          Exit;


        for i_l_l_l := 0 to Length( broñ_f ) - 1 do
          begin

            if broñ_f[ i_l_l_l ].amunicja_iloœæ_pocz¹tkowa <= Length( broñ_f[ i_l_l_l ].lufy_t ) then
              amunicja_procent_pozosta³o_l_l := 25 // Po jednej amunicji na lufê.
            else//if broñ_f[ i_l_l_l ].amunicja_iloœæ_pocz¹tkowa = Length( broñ_f[ i_l_l_l ].lufy_t ) then
              begin

                ztr_l_l := broñ_f[ i_l_l_l ].amunicja_iloœæ_pocz¹tkowa - Length( broñ_f[ i_l_l_l ].lufy_t ); // 100% iloœci amunicji (w uproszczeniu bez sprawdzania czy lufy s¹ za³adowane).

                if ztr_l_l <> 0 then
                  amunicja_procent_pozosta³o_l_l := 100 * broñ_f[ i_l_l_l ].amunicja_iloœæ / ztr_l_l // Aktualny procent iloœci amunicji.
                else//if ztr_l_l <> 0 then
                  amunicja_procent_pozosta³o_l_l := 25;

              end;
            //---//if broñ_f[ i_l_l_l ].amunicja_iloœæ_pocz¹tkowa = Length( broñ_f[ i_l_l_l ].lufy_t ) then


            if Result = -1 then
              Result := amunicja_procent_pozosta³o_l_l // Pierwsze podstawienie.
            else//if Result = -1 then
              if Result > amunicja_procent_pozosta³o_l_l then
                Result := amunicja_procent_pozosta³o_l_l;

          end;
        //---//for i_l_l_l := 0 to Length( broñ_f ) - 1 do


        if   ( amunicja_procent_pozosta³o_najmniejszy_f = -1 )
          or ( amunicja_procent_pozosta³o_najmniejszy_f > Result ) then
          amunicja_procent_pozosta³o_najmniejszy_f := Result;

      end;//---//Funkcja Broñ_Amunicja_Zosta³o_Procent() w Funkcja L¹dowanie__Odnawianie_Zasobów_Decyzja() w SI_Aktywnoœæ_Okreœl() w SI_Decyduj().

    var
      i_l_l : integer;
      l¹dowanie_prawdopodobieñstwo_l : real;
    begin//Funkcja L¹dowanie__Odnawianie_Zasobów_Decyzja() w SI_Aktywnoœæ_Okreœl() w SI_Decyduj().

      //
      // Funkcja zwraca prawdê gdy si zdecyduje, ¿e samolot bêdzie l¹dowa³
      //  albo (samolot/statek) bêdzie odnawia³ zasoby.
      //
      // Parametry:
      //   statek_f - statek, dla którego podejmowana jest decyzja
      //   odnawianie_zasobów_f:
      //     false - decyzja dotyczy l¹dowania.
      //     true - decyzja dotyczy odnawianie zasobów.
      //

      Result := false;


      if    ( not Result )
        and ( statek_f.si_aktywnoœæ__polecenie = sia_Samolot__L¹dowanie ) then
        begin

          Result := true;
          Exit;

        end;
      //---//if    ( not Result ) (...)


      if    ( not Result )
        and ( not odnawianie_zasobów_f ) then
        begin

          // Im d³u¿ej lata tym wiêksza szansa na l¹dowanie.

          if    ( statek_f_f.si__wystartowanie__czas_sekundy_i <> 0 )
            and (  Czas_Miêdzy_W_Sekundach( statek_f_f.si__wystartowanie__czas_sekundy_i ) > si__lot_trwanie_do_l¹dowania__czas_sekundy_g  )
            and (  Random( 101 ) < 25  ) then
            begin

              Result := true;
              Exit;

            end;
          //---//if    ( statek_f_f.si__wystartowanie__czas_sekundy_i <> 0 ) (...)

        end;
      //---//if    ( not Result ) (...)


      if not Result then
        begin

          l¹dowanie_prawdopodobieñstwo_l := 0;

          if not odnawianie_zasobów_f then
            begin

              // Decyzja dotyczy l¹dowania.
              //
              // Sprawdza czy w grupie jest lotniskowiec.
              // Je¿eli w grupie nie ma lotniskowca to nie ma sensu l¹dowaæ po odnowienie zasobów.

              for i_l_l := 0 to Length( statki_t ) - 1 do
                if    ( statki_t[ i_l_l ] <> nil )
                  and ( not statki_t[ i_l_l ].czy_usun¹æ_statek )
                  and ( statki_t[ i_l_l ].czy_lotniskowiec )
                  and ( statki_t[ i_l_l ].punkty_¿ycia_aktualne > 0 )
                  and ( statki_t[ i_l_l ].id_grupa = statek_f_f.id_grupa ) then
                  begin

                    l¹dowanie_prawdopodobieñstwo_l := 1;
                    Break;

                  end;
                //---//if    ( statki_t[ i_l_l ] <> nil ) (...)

            end
          else//if not odnawianie_zasobów_f then
            begin

              // Decyzja dotyczy odnawiania zasobów.
              //
              // Sprawdza czy jest l¹d, który odnawia punkty ¿ycia lub amunicjê.

              if    (  Czas_Miêdzy_W_Sekundach( statek_f.si__p³ywanie_do_punktu__odnawianie_zasobów__rozpoczêcie_czas_sekundy_i ) > ( si__p³ywanie_do_punktu__odnawianie_zasobów__trwanie__czas_sekundy_g + statek_f.si__p³ywanie_do_punktu__odnawianie_zasobów__trwanie_modyfikator_losowy__czas_sekundy_i ) * 0.25  ) // Aby zbyt szybko nie wraca³ w tryb odnawiana zasobów ale aby móg³ siê zbli¿aæ do punktu odnawiania zasobów.
                and (  Odnawianie_Zasobów__Punkt_Wyznacz( nil )  ) then
                l¹dowanie_prawdopodobieñstwo_l := 1;

            end;
          //---//if not odnawianie_zasobów_f then


          if l¹dowanie_prawdopodobieñstwo_l = 0 then
            Exit;

        end;
      //---//if not Result then


      if not Result then
        begin

          // Im mniej ¿ycia tym wiêksza szansa na l¹dowanie.

          l¹dowanie_prawdopodobieñstwo_l := 100 - statek_f_f.punkty_¿ycia_procent_zosta³o;

          if    (
                     ( // Decyzja dotyczy l¹dowania.
                           ( not odnawianie_zasobów_f )
                       and ( l¹dowanie_prawdopodobieñstwo_l > 10 ) // < 90 %.
                     )
                  or ( // Decyzja dotyczy odnawiania zasobów.
                           ( odnawianie_zasobów_f )
                       and ( l¹dowanie_prawdopodobieñstwo_l > 20 ) // < 80 %.
                     )
                )
            and (  Random( 101 ) < l¹dowanie_prawdopodobieñstwo_l  ) then
            begin

              Result := true;
              Exit;

            end;
          //---//if    ( (...)

        end;
      //---//if not Result then



      if not Result then
        begin

          // Im mniej amunicji tym wiêksza szansa na l¹dowanie.

          l¹dowanie_prawdopodobieñstwo_l := -1; // Ustali najmniejszy procent zapasu amunicji jaki pozosta³ wœród wszystkich egzemplarzy broni.
          Broñ_Amunicja_Zosta³o_Procent( l¹dowanie_prawdopodobieñstwo_l, TTorpedy_Wyrzutnia_t(statek_f_f.artyleria_t) );
          Broñ_Amunicja_Zosta³o_Procent( l¹dowanie_prawdopodobieñstwo_l, TTorpedy_Wyrzutnia_t(statek_f_f.bomba_g³êbinowa_t) );
          Broñ_Amunicja_Zosta³o_Procent( l¹dowanie_prawdopodobieñstwo_l, TTorpedy_Wyrzutnia_t(statek_f_f.dzia³a_t) );
          Broñ_Amunicja_Zosta³o_Procent( l¹dowanie_prawdopodobieñstwo_l, TTorpedy_Wyrzutnia_t(statek_f_f.je¿e_g³êbinowe_t) );
          Broñ_Amunicja_Zosta³o_Procent( l¹dowanie_prawdopodobieñstwo_l, TTorpedy_Wyrzutnia_t(statek_f_f.torpedy_wyrzutnie_t) );

          if l¹dowanie_prawdopodobieñstwo_l = -1 then
            l¹dowanie_prawdopodobieñstwo_l := 0 // Np. gdy nie ma broni.
          else//if l¹dowanie_prawdopodobieñstwo_l = -1 then
            l¹dowanie_prawdopodobieñstwo_l := 100 - l¹dowanie_prawdopodobieñstwo_l;

          if    (
                     ( // Decyzja dotyczy l¹dowania.
                           ( not odnawianie_zasobów_f )
                       and ( l¹dowanie_prawdopodobieñstwo_l > 50 ) // < 50 %.
                     )
                  or ( // Decyzja dotyczy odnawiania zasobów.
                           ( odnawianie_zasobów_f )
                       and ( l¹dowanie_prawdopodobieñstwo_l > 70 ) // < 30 %.
                     )
                )
            and (  Random( 101 ) < l¹dowanie_prawdopodobieñstwo_l  ) then
            begin

              Result := true;
              Exit;

            end;
          //---//if    ( l¹dowanie_prawdopodobieñstwo_l > 50 ) (...)

        end;
      //---//if not Result then

    end;//---//Funkcja L¹dowanie__Odnawianie_Zasobów_Decyzja() w SI_Aktywnoœæ_Okreœl() w SI_Decyduj().

    //Funkcja Torpedy_Alarm_SprawdŸ() w SI_Aktywnoœæ_Okreœl() w SI_Decyduj().
    function Torpedy_Alarm_SprawdŸ( statek_f_f : TStatek ) : boolean;
    var
      i_l_l : integer;
      id_amunicja_najbli¿sza_l : Int64; // Najbli¿sza wykryta torpeda.
      ztsi_1,
      ztsi_2,
      odleg³oœæ_l
        : single;
    begin

      //
      // Zwraca prawdê gdy ma zostaæ skrócony czas miedzy kolejnymi przeliczeniami (aby nie nadpisywaæ czasu ostatniego przeliczenia).
      //

      Result := false;

      id_amunicja_najbli¿sza_l := -99;


      if   ( not statek_f_f.czy_samolot )
        or (
                 ( statek_f_f.czy_samolot )
             and ( statek_f_f.AbsolutePosition.Y < samolot_w_powietrzu_wysokoœæ_od_c ) // Je¿eli samolot jest w powietrzu to nie unika torped.
           ) then
        for i_l_l := 0 to amunicja_wystrzelona_list.Count - 1 do
          if    ( amunicja_wystrzelona_list[ i_l_l ] <> nil )
            and ( TAmunicja(amunicja_wystrzelona_list[ i_l_l ]).amunicja_rodzaj = Typy_Wspolne.ar_Torpeda ) then
            begin

              ztsi_1 := statek_f_f.DistanceTo( TAmunicja(amunicja_wystrzelona_list[ i_l_l ]) );

              ztsi_2 := Torpeda_Wykrycie_Zasiêg( statek_f_f );

              if ztsi_1 < ztsi_2 then
                begin

                  if   ( id_amunicja_najbli¿sza_l = -99 ) // Pierwsza wykryta torpeda.
                    or ( ztsi_1 < odleg³oœæ_l ) then
                    begin

                      // Najbli¿sza wykryta torpeda.

                      id_amunicja_najbli¿sza_l := TAmunicja(amunicja_wystrzelona_list[ i_l_l ]).id_amunicja;
                      odleg³oœæ_l := ztsi_1;

                    end;
                  //---//if   ( id_amunicja_najbli¿sza_l = -99 ) (...)

                end;
              //---//if ztsi_1 < ztsi_2 then

            end;
          //---//if    ( amunicja_wystrzelona_list[ i_l_l ] <> nil ) (...)


      if id_amunicja_najbli¿sza_l <> -99 then
        begin

          if    ( statek_f_f.si__torpedy_alarm__id_amunicja__obserwowana <> id_amunicja_najbli¿sza_l )
            and ( statek_f_f.si__torpedy_alarm__id_amunicja__unikana <> id_amunicja_najbli¿sza_l ) then
            begin

              // Wykryto now¹ torpedê.

              Result := true;

              statek_f_f.si__torpedy_alarm__id_amunicja__obserwowana := id_amunicja_najbli¿sza_l;
              statek_f_f.si__torpedy_alarm__id_amunicja__unikana := -99;
              statek_f_f.si__torpedy_alarm__odleg³oœæ := odleg³oœæ_l;

              statek_f_f.si__aktywnoœæ__okreœlenie_ostatnie_sekundy_i := 0;

            end
          else//if    ( statek_f_f.si__torpedy_alarm__id_amunicja__obserwowana <> id_amunicja_najbli¿sza_l ) (...)
            if    ( statek_f_f.si__torpedy_alarm__id_amunicja__obserwowana = id_amunicja_najbli¿sza_l )
              and ( statek_f_f.si__torpedy_alarm__id_amunicja__unikana <> id_amunicja_najbli¿sza_l )
              and ( odleg³oœæ_l < statek_f_f.si__torpedy_alarm__odleg³oœæ ) then
              begin

                // Torpeda siê zbli¿a.

                statek_f_f.si__torpedy_alarm__odleg³oœæ := odleg³oœæ_l;
                statek_f_f.si__torpedy_alarm__id_amunicja__unikana := id_amunicja_najbli¿sza_l;

                if statek_f_f.si_aktywnoœæ <> sia_Walka__Torpedy_Ucieczka then
                  begin

                    Result := true;

                    statek_f_f.si_aktywnoœæ := sia_Walka__Torpedy_Ucieczka;
                    statek_f_f.si__aktywnoœæ__okreœlenie_ostatnie_sekundy_i := 0;

                  end;
                //---//if statek_f_f.si_aktywnoœæ <> sia_Walka__Torpedy_Ucieczka then


                for i_l_l := 0 to amunicja_wystrzelona_list.Count - 1 do
                  if    ( amunicja_wystrzelona_list[ i_l_l ] <> nil )
                    and ( TAmunicja(amunicja_wystrzelona_list[ i_l_l ]).amunicja_rodzaj = Typy_Wspolne.ar_Torpeda )
                    and ( TAmunicja(amunicja_wystrzelona_list[ i_l_l ]).id_amunicja = id_amunicja_najbli¿sza_l ) then
                    begin

                      // Przesuwa punkt, w którym jest torpeda o kierunek jej ruchu w poziomie.

                      statek_f_f.si__punkt_zadany__wspó³rzêdne :=
                        GLS.VectorGeometry.VectorMake
                          (
                            TAmunicja(amunicja_wystrzelona_list[ i_l_l ]).AbsolutePosition.X,
                            0,
                            TAmunicja(amunicja_wystrzelona_list[ i_l_l ]).AbsolutePosition.Z
                          );


                      ztsi_1 := 10;

                      if statek_f_f.prêdkoœæ_maksymalna > 1 then
                        ztsi_1 := ztsi_1 * statek_f_f.prêdkoœæ_maksymalna;

                      if statek_f_f.z_prymityw_odleg³oœæ > 1 then
                        ztsi_1 := ztsi_1 * statek_f_f.z_prymityw_odleg³oœæ;


                      ztsi_2 := // K¹t miêdzy statkiem i torped¹. Wartoœæ jest zawsze dodatnia, bez znaczenia, jak i nie okreœla, w któr¹ stronê s¹ obrócone obiekty.
                        System.Math.RadToDeg
                          (
                            GLS.VectorGeometry.AngleBetweenVectors
                              (
                                GLS.VectorGeometry.VectorMake( TAmunicja(amunicja_wystrzelona_list[ i_l_l ]).AbsoluteDirection.X, 0, TAmunicja(amunicja_wystrzelona_list[ i_l_l ]).AbsoluteDirection.Z ),
                                GLS.VectorGeometry.VectorMake( statek_f_f.AbsoluteDirection.X, 0, statek_f_f.AbsoluteDirection.Z ),
                                GLS.VectorGeometry.VectorMake( 0, 0, 0 )
                              )
                          );

                      // Gdy torpeda nadp³ywa z to k¹t wynosi
                      // ty³u 0
                      // boku 90
                      // przodu 180


                      if System.Math.IsNan( ztsi_2 ) then
                        begin

                          ztsi_2 :=
                            GLS.VectorGeometry.VectorDotProduct
                              (
                                GLS.VectorGeometry.VectorMake( TAmunicja(amunicja_wystrzelona_list[ i_l_l ]).AbsoluteDirection.X, 0, TAmunicja(amunicja_wystrzelona_list[ i_l_l ]).AbsoluteDirection.Z ),
                                GLS.VectorGeometry.VectorMake( statek_f_f.AbsoluteDirection.X, 0, statek_f_f.AbsoluteDirection.Z )
                              );

                          if ztsi_2 < 0 then
                            ztsi_2 := 180
                          else//if ztsi_2 < 0 then
                            ztsi_2 := 0;

                        end;
                      //---//if System.Math.IsNan( ztsi_2 ) then


                      if ztsi_2 > 90 then
                        ztsi_1 := -ztsi_1; // Skrêca w kierunku nadp³ywaj¹cej torpedy.


                      GLS.VectorGeometry.AddVector
                        (
                          statek_f_f.si__punkt_zadany__wspó³rzêdne,
                          GLS.VectorGeometry.VectorScale
                          (
                            GLS.VectorGeometry.VectorMake
                              (
                                TAmunicja(amunicja_wystrzelona_list[ i_l_l ]).AbsoluteDirection.X,
                                0,
                                TAmunicja(amunicja_wystrzelona_list[ i_l_l ]).AbsoluteDirection.Z
                              ),
                            amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ_torpeda * ztsi_1
                          )
                        );

                      Break;

                    end;
                  //---//if    ( amunicja_wystrzelona_list[ i_l_l ] <> nil ) (...)

              end
            else//if    ( statek_f_f.si__torpedy_alarm__id_amunicja__obserwowana = id_amunicja_najbli¿sza_l ) (...)
              if    ( statek_f_f.si__torpedy_alarm__id_amunicja__obserwowana = id_amunicja_najbli¿sza_l )
                and ( statek_f_f.si__torpedy_alarm__id_amunicja__unikana = id_amunicja_najbli¿sza_l )
                and ( odleg³oœæ_l > statek_f_f.si__torpedy_alarm__odleg³oœæ ) then
                begin

                  // Torpeda siê oddala.

                  if statek_f_f.si__torpedy_alarm__id_amunicja__obserwowana <> -99 then
                    statek_f_f.si__torpedy_alarm__id_amunicja__obserwowana := -99;

                  if statek_f_f.si_aktywnoœæ = sia_Walka__Torpedy_Ucieczka then
                    begin

                      Result := true;

                      statek_f_f.si_aktywnoœæ := sia_Walka;
                      statek_f_f.si__aktywnoœæ__okreœlenie_ostatnie_sekundy_i := 0;

                    end;
                  //---//if statek_f_f.si_aktywnoœæ <> sia_Walka__Torpedy_Ucieczka then

                end;
              //---//if    ( id_amunicja_najbli¿sza_l <> -99 ) (...)
              //else//if    ( id_amunicja_najbli¿sza_l <> -99 ) (...)
              // Torpeda jest w trakcie unikania.

        end
      else//if id_amunicja_najbli¿sza_l <> -99 then
        begin

          // Nie wykryto torped.

          if statek_f_f.si__torpedy_alarm__id_amunicja__obserwowana <> id_amunicja_najbli¿sza_l then
            statek_f_f.si__torpedy_alarm__id_amunicja__obserwowana := id_amunicja_najbli¿sza_l;

          if statek_f_f.si__torpedy_alarm__id_amunicja__unikana <> id_amunicja_najbli¿sza_l then
            statek_f_f.si__torpedy_alarm__id_amunicja__unikana := id_amunicja_najbli¿sza_l;

          if statek_f_f.si_aktywnoœæ = sia_Walka__Torpedy_Ucieczka then
            begin

              Result := true;

              statek_f_f.si_aktywnoœæ := sia_Walka;
              statek_f_f.si__aktywnoœæ__okreœlenie_ostatnie_sekundy_i := 0;

            end;
          //---//if statek_f_f.si_aktywnoœæ <> sia_Walka__Torpedy_Ucieczka then

        end;
      //---//if id_amunicja_najbli¿sza_l <> -99 then

    end;//---//Funkcja Torpedy_Alarm_SprawdŸ() w SI_Aktywnoœæ_Okreœl() w SI_Decyduj().

    //Funkcja Walka__P³ywanie_Do_Punktu_SprawdŸ() w SI_Aktywnoœæ_Okreœl() w SI_Decyduj().
    procedure Walka__P³ywanie_Do_Punktu_SprawdŸ( statek_f_f : TStatek );
    var
      ztb_l : boolean;
      i_l_l : integer;
      zasiêg__broñ_najwiêkszy_l : real;
      odleg³oœæ_do_celu_l,
      odleg³oœæ_do_drugiego_wrogiego_najbli¿szego_statku_l
        : single;
      zts_l : string;
      zt_statek_cel_l : TStatek;
    begin

      // Je¿eli ³ódŸ podwodna siê zanurzy i straci z radaru cel (statek) to przechodzi w tryb patrolu.

      if    ( statek_f_f.si_aktywnoœæ = sia_Walka__P³ywanie_Do_Punktu )
        and ( not statek_f_f.si__walka__p³ywanie_do_punktu__zbli¿anie )
        and (  Czas_Miêdzy_W_Sekundach( statek_f_f.si__walka__p³ywanie_do_punktu__rozpoczêcie_czas_sekundy_i ) > si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_g + statek_f_f.si__walka__p³ywanie_do_punktu__trwanie_modyfikator_losowy__czas_sekundy_i  ) then
        begin

          statek_f_f.Si__Walka__P³ywanie_Do_Punktu__Wartoœci_Pocz¹tkowe_Ustaw( si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_g );
          Exit;

        end;
      //---//if    ( statek_f_f.si_aktywnoœæ = sia_Walka__P³ywanie_Do_Punktu ) (...)

      if    ( statek_f_f.czy_lotniskowiec )
        and ( statek_f_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 ) then // Lotniskowiec w pierwszej kolejnoœci przyjmuje samoloty.
        begin

          if statek_f_f.si_aktywnoœæ = sia_Walka__P³ywanie_Do_Punktu then
            statek_f_f.Si__Walka__P³ywanie_Do_Punktu__Wartoœci_Pocz¹tkowe_Ustaw( si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_g );

          Exit;

        end;
      //---//if    ( statek_f_f.czy_lotniskowiec ) (...)

      if statek_f_f.si__walka__p³ywanie_do_punktu__cel__id_statek = -99 then
        Cel_Wyznacz( nil, statek_f_f, true );

      if statek_f_f.si__walka__p³ywanie_do_punktu__cel__id_statek = -99 then
        begin

          // Nie uda³o siê wyznaczyæ celu.

          if statek_f_f.si_aktywnoœæ = sia_Walka__P³ywanie_Do_Punktu then
            statek_f_f.Si__Walka__P³ywanie_Do_Punktu__Wartoœci_Pocz¹tkowe_Ustaw( si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_g );

          Exit;

        end;
      //---//if statek_f_f.si__walka__p³ywanie_do_punktu__cel__id_statek = -99 then


      zt_statek_cel_l := Walka__P³ywanie_Do_Punktu__Punkt_Wyznacz( statek_f_f, false );


      if zt_statek_cel_l = nil then
        begin

          // Nie uda³o siê odnaleŸæ statku celu.

          if statek_f_f.si_aktywnoœæ = sia_Walka__P³ywanie_Do_Punktu then
            statek_f_f.Si__Walka__P³ywanie_Do_Punktu__Wartoœci_Pocz¹tkowe_Ustaw( si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_g );

          Exit;

        end;
      //---//if zt_statek_cel_l = nil then


      odleg³oœæ_do_celu_l := statek_f_f.DistanceTo( zt_statek_cel_l );


      // Najwiêkszy zasiêg dostêpnej broni z zapasem amunicji.
      zasiêg__broñ_najwiêkszy_l := 0;

      for i_l_l := 0 to Length( statek_f_f.artyleria_t ) - 1 do
        if    ( statek_f_f.artyleria_t[ i_l_l ].amunicja_iloœæ >= statek_f_f.artyleria_t[ i_l_l ].amunicja_iloœæ_pocz¹tkowa * 0.25 )
          and ( zasiêg__broñ_najwiêkszy_l < statek_f_f.artyleria_t[ i_l_l ].zasiêg__broñ ) then
          zasiêg__broñ_najwiêkszy_l := statek_f_f.artyleria_t[ i_l_l ].zasiêg__broñ;

      for i_l_l := 0 to Length( statek_f_f.bomba_g³êbinowa_t ) - 1 do
        if    ( statek_f_f.bomba_g³êbinowa_t[ i_l_l ].amunicja_iloœæ >= statek_f_f.bomba_g³êbinowa_t[ i_l_l ].amunicja_iloœæ_pocz¹tkowa * 0.25 )
          and (  zasiêg__broñ_najwiêkszy_l < statek_f_f.bomba_g³êbinowa_t[ i_l_l ].zasiêg__broñ ) then
          zasiêg__broñ_najwiêkszy_l := statek_f_f.bomba_g³êbinowa_t[ i_l_l ].zasiêg__broñ;

      for i_l_l := 0 to Length( statek_f_f.dzia³a_t ) - 1 do
        if    ( statek_f_f.dzia³a_t[ i_l_l ].amunicja_iloœæ >= statek_f_f.dzia³a_t[ i_l_l ].amunicja_iloœæ_pocz¹tkowa * 0.25 )
          and (  zasiêg__broñ_najwiêkszy_l < statek_f_f.dzia³a_t[ i_l_l ].zasiêg__broñ ) then
          zasiêg__broñ_najwiêkszy_l := statek_f_f.dzia³a_t[ i_l_l ].zasiêg__broñ;

      for i_l_l := 0 to Length( statek_f_f.je¿e_g³êbinowe_t ) - 1 do
        if    ( statek_f_f.je¿e_g³êbinowe_t[ i_l_l ].amunicja_iloœæ >= statek_f_f.je¿e_g³êbinowe_t[ i_l_l ].amunicja_iloœæ_pocz¹tkowa * 0.25 )
          and (  zasiêg__broñ_najwiêkszy_l < statek_f_f.je¿e_g³êbinowe_t[ i_l_l ].zasiêg__broñ ) then
          zasiêg__broñ_najwiêkszy_l := statek_f_f.je¿e_g³êbinowe_t[ i_l_l ].zasiêg__broñ;

      for i_l_l := 0 to Length( statek_f_f.torpedy_wyrzutnie_t ) - 1 do
        if    ( statek_f_f.torpedy_wyrzutnie_t[ i_l_l ].amunicja_iloœæ >= statek_f_f.torpedy_wyrzutnie_t[ i_l_l ].amunicja_iloœæ_pocz¹tkowa * 0.25 )
          and (  zasiêg__broñ_najwiêkszy_l < statek_f_f.torpedy_wyrzutnie_t[ i_l_l ].zasiêg__broñ ) then
          zasiêg__broñ_najwiêkszy_l := statek_f_f.torpedy_wyrzutnie_t[ i_l_l ].zasiêg__broñ;
      //---// Najwiêkszy zasiêg dostêpnej broni z zapasem amunicji.


      ztb_l := false; // Oznacza czy przejœæ w tryb sia_Walka__P³ywanie_Do_Punktu.

      if    ( not ztb_l )
        and ( zasiêg__broñ_najwiêkszy_l > 0 )
        and ( odleg³oœæ_do_celu_l > zasiêg__broñ_najwiêkszy_l * 0.5 ) then
        ztb_l := true;

      //if    ( not ztb_l )
      //  and ( zasiêg__broñ_najwiêkszy_l > 0 )
      //  and (
      //           (
      //                 ( statek_f_f.radar_zasiêg > 0 )
      //             and ( odleg³oœæ_do_celu_l > statek_f_f.radar_zasiêg * 0.5 )
      //           )
      //        or ( odleg³oœæ_do_celu_l > zasiêg__broñ_najwiêkszy_l * 0.5 )
      //     ) then
      //  ztb_l := true;

      if    ( not ztb_l )
        and (
                 ( statek_f_f.czy_samolot ) // Aby samolot nadlatywa³ do bombardowania.
              or ( // Aby nap³ywa³ na zanurzone statki.
                       ( zt_statek_cel_l.czy_zanurzanie )
                   and ( zt_statek_cel_l.Zanurzenie_Peryskopowe__Przekroczone() )
                   and (
                            (  Length( statek_f_f.bomba_g³êbinowa_t ) > 0  )
                         or (  Length( statek_f_f.je¿e_g³êbinowe_t ) > 0  )
                       )
                 )
            )
        and ( zasiêg__broñ_najwiêkszy_l > 0 )
        and (
                 (  Length( statek_f_f.bomba_g³êbinowa_t ) > 0  )
              or (  Length( statek_f_f.je¿e_g³êbinowe_t ) > 0  )
              or (  Length( statek_f_f.torpedy_wyrzutnie_t ) > 0  )
            ) then
        ztb_l := true;


      if ztb_l then
        begin

          if    ( statek_f_f.si__walka__p³ywanie_do_punktu__rozpoczêcie_czas_sekundy_i <> 0 )
            and (  Czas_Miêdzy_W_Sekundach( statek_f_f.si__walka__p³ywanie_do_punktu__rozpoczêcie_czas_sekundy_i ) <= si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_g + statek_f_f.si__walka__p³ywanie_do_punktu__trwanie_modyfikator_losowy__czas_sekundy_i  ) then
            Exit;


          if statek_f_f.si_aktywnoœæ <> sia_Walka__P³ywanie_Do_Punktu then
            begin

              statek_f_f.si_aktywnoœæ := sia_Walka__P³ywanie_Do_Punktu;
              statek_f_f.si__walka__p³ywanie_do_punktu__trwanie_modyfikator_losowy__czas_sekundy_i := Random( si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_g ) - Round( si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_g * 0.5 );
              statek_f_f.si__walka__p³ywanie_do_punktu__rozpoczêcie_czas_sekundy_i := Czas_Teraz_W_Sekundach();
              statek_f_f.si__cel_odleg³oœæ := -1;

              if    ( zasiêg__broñ_najwiêkszy_l > 0 )
                and ( statek_f_f.prêdkoœæ_maksymalna > zt_statek_cel_l.prêdkoœæ_maksymalna )
                and (
                         ( // Aby samolot nadlatywa³ do bombardowania.
                               ( statek_f_f.czy_samolot )
                           and (
                                    (  Length( statek_f_f.bomba_g³êbinowa_t ) > 0  )
                                 or (  Length( statek_f_f.je¿e_g³êbinowe_t ) > 0  )
                                 or (  Length( statek_f_f.torpedy_wyrzutnie_t ) > 0  )
                               )
                         )
                      or ( // Aby statek nap³ywa³ na zanurzone statki.
                               ( statek_f_f.sonar_zasiêg > 0 )
                           and ( odleg³oœæ_do_celu_l <= statek_f_f.sonar_zasiêg )
                           and ( zt_statek_cel_l.czy_zanurzanie )
                           //and ( zt_statek_cel_l.Zanurzenie_Peryskopowe__Przekroczone() )
                           and (
                                    (  Length( statek_f_f.bomba_g³êbinowa_t ) > 0  )
                                 or (  Length( statek_f_f.je¿e_g³êbinowe_t ) > 0  )
                               )
                         )
                    ) then
                statek_f_f.si__walka__p³ywanie_do_punktu__zbli¿anie := true;


              if    ( not statek_f_f.czy_samolot )
                and ( statek_f_f.si__walka__p³ywanie_do_punktu__zbli¿anie ) then
                begin

                  // Sprawdza czy w pobli¿u statku celu znajduje siê jakiœ inny wrogi statek.


                  // O jakich statkach posiadane s¹ informacje.
                  zts_l := '-99';

                  for i_l_l := 0 to Length( statek_f.si__statki_znane_r_t ) - 1 do
                    zts_l := zts_l + ', ' + IntToStr( statek_f.si__statki_znane_r_t[ i_l_l ].id_statek__sisz );

                  zts_l := zts_l + ', -99';
                  //---// O jakich statkach posiadane s¹ informacje.


                  // Odleg³oœæ najbli¿szego wrogiego statku do statku celu.
                  odleg³oœæ_do_drugiego_wrogiego_najbli¿szego_statku_l := odleg³oœæ_do_celu_l * 2;

                  for i_l_l := 0 to Length( statki_t ) - 1 do
                    if    ( statki_t[ i_l_l ] <> nil )
                      and ( statki_t[ i_l_l ].id_statek <> zt_statek_cel_l.id_statek )
                      and ( statki_t[ i_l_l ].id_grupa = zt_statek_cel_l.id_grupa )
                      and (   Pos(  ', ' + IntToStr( statki_t[ i_l_l ].id_statek ) + ',', zts_l  ) > 0   )
                      and (  odleg³oœæ_do_drugiego_wrogiego_najbli¿szego_statku_l > statek_f_f.DistanceTo( statki_t[ i_l_l ] )  ) then
                      odleg³oœæ_do_drugiego_wrogiego_najbli¿szego_statku_l := zt_statek_cel_l.DistanceTo( statki_t[ i_l_l ] );
                   //---// Odleg³oœæ najbli¿szego wrogiego statku do statku celu.


                   if odleg³oœæ_do_drugiego_wrogiego_najbli¿szego_statku_l <= odleg³oœæ_do_celu_l then
                     statek_f_f.si__walka__p³ywanie_do_punktu__zbli¿anie := false;

                end;
              //---//if    ( not statek_f_f.czy_samolot ) (...)

            end;
          //---//if statek_f_f.si_aktywnoœæ <> sia_Walka__P³ywanie_Do_Punktu then


          //if   (
          //           ( zasiêg__broñ_najwiêkszy_l > 0 )
          //       and ( odleg³oœæ_do_celu_l > zasiêg__broñ_najwiêkszy_l * 0.5 )
          //     )
          //  or (
          //           ( statek_f_f.radar_zasiêg > 0 )
          //       and ( odleg³oœæ_do_celu_l > statek_f_f.radar_zasiêg * 0.5 )
          //     ) then
          if odleg³oœæ_do_celu_l > statek_f_f.prêdkoœæ_maksymalna * 100 then // To samo .si__walka__p³ywanie_do_punktu__prêdkoœæ_zadana_procent_korekta.
            statek_f_f.si__walka__p³ywanie_do_punktu__prêdkoœæ_zadana_procent_korekta := samolot_prêdkoœæ_lotu_procent_minimalny_c
          else//if odleg³oœæ_do_celu_l > statek_f_f.prêdkoœæ_maksymalna * 100 then
            statek_f_f.si__walka__p³ywanie_do_punktu__prêdkoœæ_zadana_procent_korekta := Random(  Round( samolot_prêdkoœæ_lotu_procent_minimalny_c ) + 1  );


          Walka__P³ywanie_Do_Punktu__Punkt_Wyznacz( statek_f_f );

        end
      else//if ztb_l then
        if    ( not statek_f_f.czy_samolot ) // Samolot dolatuje do celu (np. aby zrzuciæ bomby).
          and ( not zt_statek_cel_l.czy_zanurzanie ) then // Aby nap³ywa³ na zanurzone statki.
          begin

            if statek_f_f.si_aktywnoœæ <> sia_Walka then
              statek_f_f.si_aktywnoœæ := sia_Walka;

            if statek_f_f.si__walka__p³ywanie_do_punktu__prêdkoœæ_zadana_procent_korekta <> 0 then
              statek_f_f.si__walka__p³ywanie_do_punktu__prêdkoœæ_zadana_procent_korekta := 0;

          end;
        //---//if    ( not statek_f_f.czy_samolot ) (...)

    end;//---//Funkcja Walka__P³ywanie_Do_Punktu_SprawdŸ() w SI_Aktywnoœæ_Okreœl() w SI_Decyduj().

  label
    warunki_wspólne_label_goto;

  var
    czas_przeliczenia_aktualizuj_l,
    wrogi_statek_pozycja_znana_l // Okreœla czy statek zna lokalizacjê jakiegoœ statku z innej grupy.
      : boolean;
    i_l,
    zti_l
      : integer;
    si_aktywnoœæ__polecenie__odpowiedŸ_l : string;
    pokój_rozmów_r_l : TPokój_Rozmów_r;
  begin//Funkcja SI_Aktywnoœæ_Okreœl() w SI_Decyduj().

    if   ( statek_f = nil )
      or (  not Assigned( statek_f )  )
      or (  Czas_Miêdzy_W_Sekundach( statek_f.si__aktywnoœæ__okreœlenie_ostatnie_sekundy_i ) < si__aktywnoœæ__okreœlenie_sekundy_c  ) then
      Exit;


    if    ( statek_f.si_strzelanie_tryb in [ sist_Odpowiedz_Ogniem ] )
      and ( statek_f.si__uszkodzenia_wykryto__czas_sekundy_i <> 0 ) then
      statek_f.si_strzelanie_tryb := sist_Strzelaj_Jak_Chcesz;


    if statek_f.si_aktywnoœæ in [ sia_Brak, sia_Patrol, sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów, sia_P³ywanie_Do_Punktu__Patrol, sia_P³ywanie_Do_Punktu__Postój, sia_Postój, sia_Walka, sia_Walka__P³ywanie_Do_Punktu, sia_Walka__Torpedy_Ucieczka ] then
      czas_przeliczenia_aktualizuj_l := Torpedy_Alarm_SprawdŸ( statek_f )
    else//if statek_f.si_aktywnoœæ in [ sia_Brak, sia_Patrol, sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów, sia_P³ywanie_Do_Punktu__Patrol, sia_P³ywanie_Do_Punktu__Postój, sia_Postój, sia_Walka, sia_Walka__P³ywanie_Do_Punktu, sia_Walka__Torpedy_Ucieczka ] then
      czas_przeliczenia_aktualizuj_l := false;


    wrogi_statek_pozycja_znana_l := false;

    for i_l := 0 to Length( statek_f.si__statki_znane_r_t ) - 1 do
      if statek_f.si__statki_znane_r_t[ i_l ].id_grupa__sisz <> statek_f.id_grupa then
        begin

          wrogi_statek_pozycja_znana_l := true;
          Break;

        end;
      //---//if statek_f.si__statki_znane_r_t[ i_l ].id_grupa__sisz <> statek_f.id_grupa then


    if statek_f.si_aktywnoœæ <> sia_Walka__Torpedy_Ucieczka then
      if statek_f.czy_samolot then
        begin

          if    ( statek_f.si_aktywnoœæ = sia_Samolot__Startowanie )
            and ( statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny >= samolot_prêdkoœæ_lotu_procent_minimalny_c )
            and ( statek_f.AbsolutePosition.Y > samolot_w_powietrzu_wysokoœæ_od_c * 3 ) then
            begin

              statek_f.si_aktywnoœæ := sia_Patrol;
              Patrol_Punkt_Wyznacz( statek_f );
              statek_f.si__wystartowanie__czas_sekundy_i := Czas_Teraz_W_Sekundach();

            end
          else//if    ( statek_f.si_aktywnoœæ = sia_Samolot__Startowanie ) (...)
          if   (
                     ( statek_f.si_aktywnoœæ = sia_Postój )
                 and ( statek_f.si_aktywnoœæ__polecenie <> sia_Postój )
               )
            or (
                     ( statek_f.si_aktywnoœæ__polecenie = sia_Samolot__Startowanie )
                 and ( statek_f.si_aktywnoœæ in [ sia_Brak, sia_Postój, sia_Odnawianie_Zasobów__Lotniskowiec ] )
               )
            or (
                     ( statek_f.si_aktywnoœæ = sia_Kotwice_Oczekiwanie_Na_Wci¹gniêcie )
                 and (  not ( statek_f.si_aktywnoœæ__polecenie in [ sia_Postój, sia_Walka ] )  )
                 //and ( statek_f.si_aktywnoœæ__polecenie = sia_Brak )
               ) then
            begin

              // Startowanie.

              if SI__P³ywa_CheckBox.Checked then
                begin

                  if statek_f.czy_samolot__na_lotniskowcu then
                    begin

                      if statek_f.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent >= prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__katapult_jest_gotowa_do_uruchomienia_c then
                        begin

                          statek_f.Skrêt_Zadany_Procent_Ustaw( 0 );

                          statek_f.si_aktywnoœæ := sia_Samolot__Startowanie;

                          statek_f.Samolot_Katapult¹_Startuj();

                          statek_f.si__samolot_zanurzenie_pu³ap__zadane := samolot_prêdkoœæ_lotu_procent_minimalny_c;
                          statek_f.Zanurzenie_Zadane_Procent_Ustaw(  System.Math.Ceil( statek_f.si__samolot_zanurzenie_pu³ap__zadane )  );

                          statek_f.Prêdkoœæ_Zadana_Procent_Ustaw(  System.Math.Ceil( statek_f.si__samolot_zanurzenie_pu³ap__zadane )  );


                          DŸwiêki__Efekt__Utwórz_Jeden( der_Syrena_Okrêtowa, statek_f.AbsolutePosition );

                        end;
                      //---//if statek_f.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent >= prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__katapult_jest_gotowa_do_uruchomienia_c then

                    end
                  else//if statek_f.czy_samolot__na_lotniskowcu then
                    begin

                      if Kotwice_Opuszczone( statek_f ) then
                        statek_f.si_aktywnoœæ := sia_Kotwice_Oczekiwanie_Na_Wci¹gniêcie
                      else//if Kotwice_Opuszczone( statek_f ) then
                        begin

                          statek_f.Skrêt_Zadany_Procent_Ustaw( 0 );

                          statek_f.si__samolot_zanurzenie_pu³ap__zadane := samolot_prêdkoœæ_lotu_procent_minimalny_c;
                          statek_f.Zanurzenie_Zadane_Procent_Ustaw(  System.Math.Ceil( statek_f.si__samolot_zanurzenie_pu³ap__zadane )  );

                          statek_f.Prêdkoœæ_Zadana_Procent_Ustaw(  System.Math.Ceil( statek_f.si__samolot_zanurzenie_pu³ap__zadane )  );


                          statek_f.si_aktywnoœæ := sia_Samolot__Startowanie;


                          DŸwiêki__Efekt__Utwórz_Jeden( der_Syrena_Okrêtowa, statek_f.AbsolutePosition );

                        end;
                      //---//if Kotwice_Opuszczone( statek_f ) then

                    end;
                  //---//if statek_f.czy_samolot__na_lotniskowcu then

                end;
              //---//if SI__P³ywa_CheckBox.Checked then

            end
          else//if   ( (...)
          if ( statek_f.si_aktywnoœæ = sia_Odnawianie_Zasobów__Lotniskowiec ) then
            begin

              if    ( statek_f.punkty_¿ycia_aktualne >= statek_f.punkty_¿ycia_maksymalne )
                and ( Broñ__Amunicja_Uzupe³niona( TTorpedy_Wyrzutnia_t(statek_f.artyleria_t) )  )
                and ( Broñ__Amunicja_Uzupe³niona( TTorpedy_Wyrzutnia_t(statek_f.bomba_g³êbinowa_t) )  )
                and ( Broñ__Amunicja_Uzupe³niona( TTorpedy_Wyrzutnia_t(statek_f.dzia³a_t) )  )
                and ( Broñ__Amunicja_Uzupe³niona( TTorpedy_Wyrzutnia_t(statek_f.je¿e_g³êbinowe_t) )  )
                and ( Broñ__Amunicja_Uzupe³niona( TTorpedy_Wyrzutnia_t(statek_f.torpedy_wyrzutnie_t) )  ) then
                statek_f.si_aktywnoœæ := sia_Postój;

            end
          else//if ( statek_f.si_aktywnoœæ = sia_Odnawianie_Zasobów__Lotniskowiec ) then
          if    (
                     ( statek_f.si_aktywnoœæ = sia_Samolot__L¹dowanie__Hamowanie )
                  or ( statek_f.si_aktywnoœæ = sia_Brak )
                )
            and ( statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny = 0 )
            //and (  Abs( statek_f.zanurzenie_pu³ap__aktualne - statek_f.si__samolot_zanurzenie_pu³ap__zadane ) < 0.1  ) //???
                then
            begin

              if    ( statek_f.czy_samolot__na_lotniskowcu )
                and (
                         ( statek_f.punkty_¿ycia_aktualne < statek_f.punkty_¿ycia_maksymalne )
                      or ( not Broñ__Amunicja_Uzupe³niona( TTorpedy_Wyrzutnia_t(statek_f.artyleria_t) )  )
                      or ( not Broñ__Amunicja_Uzupe³niona( TTorpedy_Wyrzutnia_t(statek_f.bomba_g³êbinowa_t) )  )
                      or ( not Broñ__Amunicja_Uzupe³niona( TTorpedy_Wyrzutnia_t(statek_f.dzia³a_t) )  )
                      or ( not Broñ__Amunicja_Uzupe³niona( TTorpedy_Wyrzutnia_t(statek_f.je¿e_g³êbinowe_t) )  )
                      or ( not Broñ__Amunicja_Uzupe³niona( TTorpedy_Wyrzutnia_t(statek_f.torpedy_wyrzutnie_t) )  )
                    ) then
                statek_f.si_aktywnoœæ := sia_Odnawianie_Zasobów__Lotniskowiec
              else//if statek_f.czy_samolot__na_lotniskowcu then
                statek_f.si_aktywnoœæ := sia_Postój;

            end
          else//if    ( statek_f.czy_samolot ) (...)
          if    (  not ( statek_f.si_aktywnoœæ in [ sia_Postój, sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Hamowanie, sia_Odnawianie_Zasobów__Lotniskowiec, sia_Samolot__L¹dowanie__Podchodzenie, sia_Samolot__Startowanie ] )  )
            and ( not statek_f.czy_samolot__na_lotniskowcu )
            and ( statek_f.AbsolutePosition.Y > samolot_w_powietrzu_wysokoœæ_od_c )
            and (  L¹dowanie__Odnawianie_Zasobów_Decyzja( statek_f )  ) then
            begin

              // Musi mieæ odpowiedni dystans na wytracenie prêdkoœci.

              statek_f.si_aktywnoœæ := sia_Samolot__L¹dowanie__Podchodzenie;
              statek_f.samolot__l¹dowanie__podchodzenie_krok := l¹dowanie__podchodzenie_kroki_iloœæ_c;
              statek_f.si__cel_odleg³oœæ := -1;

              Lotniskowiec__L¹dowanie__Podchodzenie__Wspó³rzêdne( statek_f, true );

            end
          else//if    (  not ( statek_f.si_aktywnoœæ in [ sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Hamowanie, sia_Odnawianie_Zasobów__Lotniskowiec, sia_Samolot__L¹dowanie__Podchodzenie, sia_Samolot__Startowanie ] )  ) (...)
            goto warunki_wspólne_label_goto;

        end
      else//if statek_f.czy_samolot then
        if   ( statek_f.si_aktywnoœæ = sia_Brak )
          or (
                   ( statek_f.si_aktywnoœæ = sia_Postój )
               and ( statek_f.si_aktywnoœæ__polecenie <> sia_Postój )
             ) then
          begin

            statek_f.si_aktywnoœæ := sia_Patrol;
            Patrol_Punkt_Wyznacz( statek_f );


            DŸwiêki__Efekt__Utwórz_Jeden( der_Syrena_Okrêtowa, statek_f.AbsolutePosition );

          end
        else//if   ( statek_f.si_aktywnoœæ = sia_Brak ) (...)
          begin

            warunki_wspólne_label_goto:
            if    (  not ( statek_f.si_aktywnoœæ in [ sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Hamowanie, sia_Odnawianie_Zasobów__Lotniskowiec, sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów, sia_Samolot__L¹dowanie__Podchodzenie, sia_Samolot__Startowanie ] )  )
              and ( not statek_f.czy_samolot__na_lotniskowcu )
              and (  L¹dowanie__Odnawianie_Zasobów_Decyzja( statek_f, true )  ) then
              begin

                // Okreœla czy udaæ siê na odnawianie zasobów.

                //statek_f.si_aktywnoœæ := sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów; // Jest ustawiane w Odnawianie_Zasobów__Punkt_Wyznacz().
                Odnawianie_Zasobów__Punkt_Wyznacz( statek_f );

              end
            else//if    (  not ( statek_f.si_aktywnoœæ in [ sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Hamowanie, sia_Odnawianie_Zasobów__Lotniskowiec, sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów, sia_Samolot__L¹dowanie__Podchodzenie, sia_Samolot__Startowanie ] )  ) (...)
            if    (
                       (  not ( statek_f.si_aktywnoœæ in [ sia_Odnawianie_Zasobów__Lotniskowiec, sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów, sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Hamowanie, sia_Samolot__L¹dowanie__Podchodzenie, sia_Samolot__Startowanie, sia_Walka ] )  )
                    or ( // Im wiêcej punktów ¿ycia tym wiêksza szansa na wejœcie w tryb walki.
                             ( statek_f.si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów ] )
                         and (  Random( 101 ) <= statek_f.punkty_¿ycia_procent_zosta³o  )
                       )
                  )
              and ( statek_f.si__uszkodzenia_wykryto__czas_sekundy_i <> 0 ) then
              begin

                // Aktywuje tryb walki na podstawie otrzymanych obra¿eñ.

                if    ( statek_f.czy_samolot )
                  and ( statek_f.si_aktywnoœæ in [ sia_Postój ] )then
                  begin

                    if SI__P³ywa_CheckBox.Checked then
                      begin

                        statek_f.si_aktywnoœæ := sia_Samolot__Startowanie;

                        //// Uproszczenie aby nie próbowa³ startowaæ gdy kotwice nie s¹ schowane i aby nie dodawaæ oczekiwania na wci¹gniêcie kotwic. //???
                        //for i_l := 0 to Length( statek_f.kotwica_t ) - 1 do
                        //  statek_f.kotwica_t[ i_l ].Kotwica_Przesuwaj( 0, 1, kotwica_zakresy_r_g, true );

                      end;
                    //---//if SI__P³ywa_CheckBox.Checked then

                  end
                else//if    ( statek_f.czy_samolot ) (...)
                  begin

                    if statek_f.si_aktywnoœæ in [ sia_Walka__P³ywanie_Do_Punktu ] then
                      statek_f.Si__Walka__P³ywanie_Do_Punktu__Wartoœci_Pocz¹tkowe_Ustaw( si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_g );

                    statek_f.si_aktywnoœæ := sia_Walka;

                  end;
                //---//if    ( statek_f.czy_samolot ) (...)

              end
            else//if    ( (...)
            if Odnawianie_Zasobów__Zakoñczyæ_SprawdŸ( statek_f ) then
              begin

                // Okreœla czy zakoñczyæ tryb odnawiania zasobów.

                statek_f.si__p³ywanie_do_punktu__odnawianie_zasobów__rozpoczêcie_czas_sekundy_i := Czas_Teraz_W_Sekundach(); // Aby zbyt szybko nie wraca³ w tryb odnawiana zasobów.
                statek_f.si__p³ywanie_do_punktu__odnawianie_zasobów__trwanie_modyfikator_losowy__czas_sekundy_i := Random( si__p³ywanie_do_punktu__odnawianie_zasobów__trwanie__czas_sekundy_g ) - Round( si__p³ywanie_do_punktu__odnawianie_zasobów__trwanie__czas_sekundy_g * 0.5 );

                if statek_f.si__kolizja__samolot__p³ywanie_do_punktu__odnawianie_zasobów then
                  statek_f.si__kolizja__samolot__p³ywanie_do_punktu__odnawianie_zasobów := false;

                statek_f.si_aktywnoœæ := sia_Patrol;
                Patrol_Punkt_Wyznacz( statek_f );

              end
            else//if Odnawianie_Zasobów__Zakoñczyæ_SprawdŸ( statek_f ) then
            if statek_f.si_aktywnoœæ in [ sia_Patrol, sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów, sia_Walka, sia_Walka__P³ywanie_Do_Punktu ] then
              begin

                // Aktywuje i dezaktywuje tryb walki na podstawie pozycji statków.

                if    (
                           ( statek_f.si_aktywnoœæ = sia_Patrol )
                        or ( // Im wiêcej punktów ¿ycia tym wiêksza szansa n wejœcie w tryb walki.
                                 ( statek_f.si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów ] )
                             and (  Random( 101 ) <= statek_f.punkty_¿ycia_procent_zosta³o  )
                           )
                      )
                  and ( wrogi_statek_pozycja_znana_l ) then
                  statek_f.si_aktywnoœæ := sia_Walka
                else//if    ( (...)
                if    ( statek_f.si_aktywnoœæ in [ sia_Walka, sia_Walka__P³ywanie_Do_Punktu ] )
                  and ( not wrogi_statek_pozycja_znana_l ) then
                  begin

                    if statek_f.si_aktywnoœæ in [ sia_Walka__P³ywanie_Do_Punktu ] then
                      statek_f.Si__Walka__P³ywanie_Do_Punktu__Wartoœci_Pocz¹tkowe_Ustaw( si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_g );

                    statek_f.si_aktywnoœæ := sia_Patrol;
                    Patrol_Punkt_Wyznacz( statek_f );

                  end;
                //---//if    ( statek_f.si_aktywnoœæ in [ sia_Walka, sia_Walka__P³ywanie_Do_Punktu ] ) (...)


                if    ( SI__Patrol_Blisko_Zostaje_CheckBox.Checked )
                  and ( statek_f.si_aktywnoœæ in [ sia_Walka, sia_Walka__P³ywanie_Do_Punktu ] ) then
                  begin

                    // Gdy odp³ynie zbyt daleko od bazy grupy to zawraca.

                    i_l := statek_f.id_grupa; // Tutaj tymczasowo jako id_grupa.

                    // Gdy gracz nie jest gotowy to ma id_grupa = 0 i przy rozstawianiu statków indeks jest poza zakresem tabeli gra_pozycja_pocz¹tkowa_parametry_t.
                    if    ( i_l <> 1 )
                      and ( i_l <> 2 ) then
                      i_l := 1;


                    if statek_f.czy_lotniskowiec then
                      i_l :=  // Lotniskowce patroluj¹ bardziej z ty³u. // Tutaj tymczasowo jako odleg³oœæ od œrodka obszaru patrolu grupy.
                        Round
                          (
                            statek_f.DistanceTo
                              (
                                GLS.VectorGeometry.VectorMake
                                  (
                                    gra_pozycja_pocz¹tkowa_parametry_t[ i_l ].patrol__tylny_x,
                                    0,
                                    gra_pozycja_pocz¹tkowa_parametry_t[ i_l ].patrol__tylny_z
                                  )
                              )
                          )
                    else//if statek_f.czy_lotniskowiec then
                      i_l := // Tutaj tymczasowo jako odleg³oœæ od œrodka obszaru patrolu grupy.
                        Round
                          (
                            statek_f.DistanceTo
                              (
                                GLS.VectorGeometry.VectorMake
                                  (
                                    gra_pozycja_pocz¹tkowa_parametry_t[ i_l ].patrol_x,
                                    0,
                                    gra_pozycja_pocz¹tkowa_parametry_t[ i_l ].patrol_z
                                  )
                              )
                          );


                    zti_l := 0;

                    if    ( statek_f.radio_zasiêg > 0 )
                      and ( statek_f.radio_zasiêg > zti_l ) then
                      zti_l := statek_f.radio_zasiêg;

                    if    ( statek_f.radar_zasiêg > 0 )
                      and ( statek_f.radar_zasiêg > zti_l ) then
                      zti_l := statek_f.radar_zasiêg;

                    if zti_l = 0 then
                      zti_l := Zaokr¹glij__W_Górê( statek_f.prêdkoœæ_maksymalna ) * 100;


                    if i_l > zti_l then
                      begin

                        if statek_f.si_aktywnoœæ in [ sia_Walka__P³ywanie_Do_Punktu ] then
                          statek_f.Si__Walka__P³ywanie_Do_Punktu__Wartoœci_Pocz¹tkowe_Ustaw( si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_g );

                        statek_f.si_aktywnoœæ := sia_Patrol;
                        Patrol_Punkt_Wyznacz( statek_f );

                      end;
                    //---//if i_l > zti_l then

                  end;
                //---//if    ( SI__Patrol_Blisko_Zostaje_CheckBox.Checked ) (...)


                if statek_f.si_aktywnoœæ in [ sia_Walka, sia_Walka__P³ywanie_Do_Punktu ] then
                  Walka__P³ywanie_Do_Punktu_SprawdŸ( statek_f );


                if statek_f.si_aktywnoœæ in [ sia_Walka__P³ywanie_Do_Punktu ] then
                  Walka__P³ywanie_Do_Punktu__Punkt_Wyznacz( statek_f );

              end;
            //---//if statek_f.si_aktywnoœæ in [ sia_Patrol, sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów, sia_Walka, sia_Walka__P³ywanie_Do_Punktu ] then


            if    ( statek_f.si__uszkodzenia_wykryto__czas_sekundy_i <> 0 )
              and (  Czas_Miêdzy_W_Sekundach( statek_f.si__uszkodzenia_wykryto__czas_sekundy_i ) > si__uszkodzenia_wykryto__trwanie__czas_sekundy_g  ) then
              statek_f.si__uszkodzenia_wykryto__czas_sekundy_i := 0;

          end;
        //---//if   ( statek_f.si_aktywnoœæ = sia_Brak ) (...)


    {$region 'Polecenia gracza dla SI.'}
    if statek_f.si_aktywnoœæ__polecenie <> sia_Brak then
      begin

        si_aktywnoœæ__polecenie__odpowiedŸ_l := '';


        if statek_f.si_aktywnoœæ__polecenie in [ sia_Patrol, sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów, sia_P³ywanie_Do_Punktu__Patrol, sia_P³ywanie_Do_Punktu__Postój, sia_Postój, sia_Walka ] then
          begin

            if   ( statek_f.si_aktywnoœæ in [ sia_Samolot__L¹dowanie__Hamowanie, sia_Samolot__Startowanie ] )
              or (
                       ( statek_f.si_aktywnoœæ__polecenie = sia_Postój )
                   and ( statek_f.si_aktywnoœæ in [ sia_Walka ] )
                 )
              or (
                       ( statek_f.czy_samolot )
                   and ( statek_f.si_aktywnoœæ__polecenie = sia_Postój )
                   and (
                            ( statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny >= samolot_prêdkoœæ_lotu_procent_minimalny_c )
                         //or ( statek_f.AbsolutePosition.Y > samolot_w_powietrzu_wysokoœæ_od_c * 3 ) //???
                       )
                 )
              or (
                       ( statek_f.si_aktywnoœæ__polecenie in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów, sia_P³ywanie_Do_Punktu__Patrol, sia_P³ywanie_Do_Punktu__Postój ] )
                   and (
                            ( statek_f.si_aktywnoœæ in [ sia_Odnawianie_Zasobów__Lotniskowiec, sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Hamowanie, sia_Samolot__Startowanie ] )
                         or (
                                  ( statek_f.czy_samolot )
                              and ( statek_f.si_aktywnoœæ__polecenie in [ sia_Brak, sia_Postój ] ) //???
                            )
                       )
                 ) then
              begin

                // Je¿eli w wyniku wydanego polecenia zacznie wci¹gaæ kotwicê i potem startowaæ to zg³osi, ¿e nie mo¿e wykonaæ zadanego polecenia.
                // Polecenia trzeba wydawaæ w odpowiedniej kolejnoœci np. wystartuj, zrób coœ.

                si_aktywnoœæ__polecenie__odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__niestety__w_tej_chwili_nie_mogê_wykonaæ_polecenia + ': ' + statek_f.Si_Aktywnoœæ_Aktualna_Nazwa( t³umaczenie_komunikaty_r, true ) + '.';

                if statek_f.si_aktywnoœæ__polecenie = sia_Postój then
                 statek_f.si_aktywnoœæ__polecenie := sia_Brak;

              end
            else//if   ( statek_f.si_aktywnoœæ in [ sia_Samolot__L¹dowanie__Hamowanie, sia_Samolot__Startowanie ] ) (...)
            if    ( statek_f.czy_samolot )
              and ( statek_f.si_aktywnoœæ in [ sia_Odnawianie_Zasobów__Lotniskowiec ] ) then
              si_aktywnoœæ__polecenie__odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__niestety__w_tej_chwili_mam_inne_zadanie + ': (' + statek_f.Si_Aktywnoœæ_Aktualna_Nazwa( t³umaczenie_komunikaty_r ) + ').'
            else//if    ( statek_f.czy_samolot ) (...)
              begin

                if statek_f.si_aktywnoœæ in [ sia_Walka__P³ywanie_Do_Punktu ] then
                  statek_f.Si__Walka__P³ywanie_Do_Punktu__Wartoœci_Pocz¹tkowe_Ustaw( si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_g );

                if   ( statek_f.si_aktywnoœæ <> statek_f.si_aktywnoœæ__polecenie )
                  or ( statek_f.si_aktywnoœæ__polecenie in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów, sia_P³ywanie_Do_Punktu__Patrol, sia_P³ywanie_Do_Punktu__Postój ] ) then // Aby zaktualizowaæ wspó³rzêdne.
                  begin

                    if statek_f.si_aktywnoœæ__polecenie in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów ] then
                      begin

                        if Odnawianie_Zasobów__Punkt_Wyznacz( statek_f ) then
                          begin

                            //statek_f.si_aktywnoœæ := statek_f.si_aktywnoœæ__polecenie; // Jest ustawiane w Odnawianie_Zasobów__Punkt_Wyznacz().

                            si_aktywnoœæ__polecenie__odpowiedŸ_l :=
                              t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__potwierdzam_przyjêcie_zadania + ': ' + statek_f.Si_Aktywnoœæ_Aktualna_Nazwa( t³umaczenie_komunikaty_r, true ) + '.' +
                              #13 + #10 +
                              t³umaczenie_komunikaty_r.s³owo__wspó³rzêdne + ' x = ' + Trim(  FormatFloat( '### ### ##0.00', statek_f.si__punkt_zadany__wspó³rzêdne.X )  ) +
                              ', z = ' + Trim(  FormatFloat( '### ### ##0.00', statek_f.si__punkt_zadany__wspó³rzêdne.Z )  ) +
                              ', y = ' + Trim(  FormatFloat( '### ### ##0.00', statek_f.si__punkt_zadany__wspó³rzêdne.Y )  ) +
                              '.';

                          end
                        else//if Odnawianie_Zasobów__Punkt_Wyznacz( statek_f ) then
                          begin

                            si_aktywnoœæ__polecenie__odpowiedŸ_l :=
                              t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__niestety__lokalizacje_miejsc_odnawiania_zasobów_s¹_mi_nieznane___nie_mogê_wykonaæ_tego_zadania;

                          end;
                        //---//if Odnawianie_Zasobów__Punkt_Wyznacz( statek_f ) then

                      end
                    else//if statek_f.si_aktywnoœæ__polecenie in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów ] then
                      begin

                        //statek_f.si_aktywnoœæ := statek_f.si_aktywnoœæ__polecenie;
                        //si_aktywnoœæ__polecenie__odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__potwierdzam_przyjêcie_zadania + ': ' + statek_f.Si_Aktywnoœæ_Aktualna_Nazwa( t³umaczenie_komunikaty_r, true ) + '.';

                        zti_l := 0; // Tutaj tymczasowo jako sprawdzenie czy kotwice s¹ wci¹gniête.

                        if    (  not ( statek_f.si_aktywnoœæ__polecenie in [ sia_Postój, sia_Walka ] )  )
                          and (  Kotwice_Opuszczone( statek_f )  ) then
                          zti_l := 1;


                        if zti_l = 1 then
                          begin

                            statek_f.si_aktywnoœæ := sia_Kotwice_Oczekiwanie_Na_Wci¹gniêcie;
                            si_aktywnoœæ__polecenie__odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__potwierdzam_przyjêcie_zadania + ': ' + statek_f.Si_Aktywnoœæ_Aktualna_Nazwa( t³umaczenie_komunikaty_r, false ) + '.';

                          end
                        else//if zti_l = 1 then
                          begin

                            statek_f.si_aktywnoœæ := statek_f.si_aktywnoœæ__polecenie;
                            si_aktywnoœæ__polecenie__odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__potwierdzam_przyjêcie_zadania + ': ' + statek_f.Si_Aktywnoœæ_Aktualna_Nazwa( t³umaczenie_komunikaty_r, true ) + '.';

                          end;
                        //---//if zti_l = 1 then

                      end;
                    //---//if statek_f.si_aktywnoœæ__polecenie in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów ] then


                    if statek_f.si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Patrol, sia_P³ywanie_Do_Punktu__Postój ] then
                      begin

                        statek_f.si__punkt_zadany__wspó³rzêdne := statek_f.si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne;

                        if statek_f.si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne.W = 1 then
                          begin

                            if statek_f.si__punkt_zadany__wspó³rzêdne.Y > statek_f.zanurzenie_pu³ap__maksymalne then
                              begin

                                statek_f.si__punkt_zadany__wspó³rzêdne.Y := statek_f.zanurzenie_pu³ap__maksymalne;

                                si_aktywnoœæ__polecenie__odpowiedŸ_l := si_aktywnoœæ__polecenie__odpowiedŸ_l +
                                  #13 + #10 +
                                  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__wspó³rzêdna_y_jest_poza_dostêpnym_zasiêgiem__zosta³a_zmieniona_na + ' ' + Trim(  FormatFloat( '### ### ##0.00', statek_f.si__punkt_zadany__wspó³rzêdne.Y )  ) + '.';

                              end;
                            //---//if statek_f.si__punkt_zadany__wspó³rzêdne.Y > statek_f.zanurzenie_pu³ap__maksymalne then


                            statek_f.si__samolot_zanurzenie_pu³ap__zadane := statek_f.si__punkt_zadany__wspó³rzêdne.Y;

                          end;
                        //---//if statek_f.si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne.W = 1 then


                        si_aktywnoœæ__polecenie__odpowiedŸ_l := si_aktywnoœæ__polecenie__odpowiedŸ_l +
                          #13 + #10 +
                          t³umaczenie_komunikaty_r.s³owo__wspó³rzêdne + ' x = ' + Trim(  FormatFloat( '### ### ##0.00', statek_f.si__punkt_zadany__wspó³rzêdne.X )  ) +
                          ', z = ' + Trim(  FormatFloat( '### ### ##0.00', statek_f.si__punkt_zadany__wspó³rzêdne.Z )  );

                        if statek_f.si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne.W = 1 then
                          si_aktywnoœæ__polecenie__odpowiedŸ_l := si_aktywnoœæ__polecenie__odpowiedŸ_l +
                            ', y = ' + Trim(  FormatFloat( '### ### ##0.00', statek_f.si__punkt_zadany__wspó³rzêdne.Y )  );

                        si_aktywnoœæ__polecenie__odpowiedŸ_l := si_aktywnoœæ__polecenie__odpowiedŸ_l + '.';

                      end;
                    //---//if statek_f.si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Patrol, sia_P³ywanie_Do_Punktu__Postój ] then

                  end;
                //---//if   ( statek_f.si_aktywnoœæ <> statek_f.si_aktywnoœæ__polecenie ) (...)


                if statek_f.si_aktywnoœæ in [ sia_Patrol ] then
                  Patrol_Punkt_Wyznacz( statek_f );

              end;
            //---//if    ( statek_f.czy_samolot ) (...)

          end
        else//if statek_f.si_aktywnoœæ__polecenie in [ sia_Patrol, sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów, sia_P³ywanie_Do_Punktu__Patrol, sia_P³ywanie_Do_Punktu__Postój, sia_Postój, sia_Walka ] then
        if statek_f.si_aktywnoœæ__polecenie in [ sia_Samolot__L¹dowanie, sia_Samolot__Startowanie ] then
          begin

            if not statek_f.czy_samolot then
              begin

                // Statek.

                if statek_f.si_aktywnoœæ__polecenie = sia_Samolot__L¹dowanie then
                  si_aktywnoœæ__polecenie__odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__ej__nie_jestem_samolotem__nie_mogê_wyl¹dowaæ
                else//if statek_f.si_aktywnoœæ__polecenie = sia_Samolot__L¹dowanie then
                  si_aktywnoœæ__polecenie__odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__nie_jestem_samolotem_ale_spróbujê_siê_wzbiæ_na_falach__hop__hop__hop;

              end
            else//if not statek_f.czy_samolot then
              begin

                // Samolot.

                if statek_f.si_aktywnoœæ__polecenie = sia_Samolot__Startowanie then
                  begin

                    if statek_f.si_aktywnoœæ__polecenie in [ sia_Samolot__Startowanie ] then
                      si_aktywnoœæ__polecenie__odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__rozpoczynam_startowanie // Zmienne ustawiane wy¿ej.
                    else//if statek_f.si_aktywnoœæ__polecenie in [ sia_Samolot__Startowanie ] then
                      si_aktywnoœæ__polecenie__odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__niestety__w_tej_chwili_nie_jestem_w_stanie_wystartowaæ;

                  end
                else//if statek_f.si_aktywnoœæ__polecenie = sia_Samolot__Startowanie then
                  begin

                    if statek_f.si_aktywnoœæ in [ sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Podchodzenie ] then
                      si_aktywnoœæ__polecenie__odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__podchodzê_do_l¹dowania // Zmienne ustawiane w L¹dowanie__Odnawianie_Zasobów_Decyzja().
                    else//if statek_f.si_aktywnoœæ in [ sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Podchodzenie ] then
                      si_aktywnoœæ__polecenie__odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__niestety__w_tej_chwili_nie_jestem_w_stanie_podj¹æ_próby_wyl¹dowania;

                  end;
                //---//if statek_f.si_aktywnoœæ__polecenie = sia_Samolot__Startowanie then

              end;
            //---//if not statek_f.czy_samolot then

          end;
        //---//if statek_f.si_aktywnoœæ__polecenie in [ sia_Samolot__L¹dowanie, sia_Samolot__Startowanie ] then


        if Trim( si_aktywnoœæ__polecenie__odpowiedŸ_l ) <> '' then
          begin

            for i_l := 0 to Length( statki_t ) - 1 do
              if    ( statki_t[ i_l ] <> nil )
                and ( statki_t[ i_l ].id_gracz = statek_f.id_gracz )
                and ( statki_t[ i_l ].id_statek <> statek_f.id_statek )
                and ( statek_f.czy_samolot ) then
                begin

                  // Je¿eli gracz ma statek i samolot to dodaje dopisek informuj¹cy, ¿e wiadomoœæ wys³a³ samolot.

                  si_aktywnoœæ__polecenie__odpowiedŸ_l :=
                    si_pokój_rozmów__polecenie_symbol__samolot_c + ' ' +
                    si_aktywnoœæ__polecenie__odpowiedŸ_l;

                  Break;

                end;
              //---//if    ( statki_t[ i_l ] <> nil ) (...)

            pokój_rozmów_r_l.id_nadawca := statek_f.id_gracz;
            pokój_rozmów_r_l.id_odbiorca := statek_f.id_grupa;
            pokój_rozmów_r_l.data_czas_wys³ania := Now();
            pokój_rozmów_r_l.odbiorca_rodzaj := pror_Grupa_Jedna;
            pokój_rozmów_r_l.wiadomoœæ := si_aktywnoœæ__polecenie__odpowiedŸ_l;

            if czy_gra_lokalna_g then
              Pokój_Rozmów__Wyœwietl_Wiadomoœæ( pokój_rozmów_r_l )
            else//if czy_gra_lokalna_g then
              begin

                Pokój_Rozmów__Wyœlij_Wiadomoœæ( pokój_rozmów_r_l );

                if czy_serwer_g then
                  for i_l := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
                    if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).identyfikator__kd = serwer_peer_port_c then
                      begin

                        if   ( pokój_rozmów_r_l.id_nadawca = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).identyfikator__kd )
                          or (
                                   ( pokój_rozmów_r_l.odbiorca_rodzaj = pror_Gracz_Jeden )
                               and ( pokój_rozmów_r_l.id_odbiorca = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).identyfikator__kd )
                             )
                          or (
                                   ( pokój_rozmów_r_l.odbiorca_rodzaj = pror_Grupa_Jedna )
                               and ( pokój_rozmów_r_l.id_odbiorca = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).id_grupa__kd )
                             ) then
                          Pokój_Rozmów__Wyœwietl_Wiadomoœæ( pokój_rozmów_r_l );

                        Break;

                      end;
                    //---//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).identyfikator__kd = serwer_peer_port_c then

              end;
            //---//if czy_gra_lokalna_g then

          end;
        //---//if Trim( si_aktywnoœæ__polecenie__odpowiedŸ_l ) <> '' then


        if    (  not ( statek_f.si_aktywnoœæ__polecenie in [ sia_Postój ] )  ) // Aby SI samo nie wychodzi³o z trybu postoju.
          and (  not ( statek_f.si_aktywnoœæ in [ sia_Kotwice_Oczekiwanie_Na_Wci¹gniêcie ] )  ) then
          statek_f.si_aktywnoœæ__polecenie := sia_Brak;

      end;
    //---//if statek_f.si_aktywnoœæ__polecenie <> sia_Brak then
    {$endregion 'Polecenia gracza dla SI.'}


    {$region 'Œwiat³a.'}
    if    (
               ( dzieñ_jasnoœæ_g < œwiat³o__w³¹czanie_próg__dzieñ_jasnoœæ_c )
            or ( mg³a_intensywnoœæ_g > œwiat³o__w³¹czanie_próg__mg³a_intensywnoœæ_c )
          )
      and ( not wrogi_statek_pozycja_znana_l )
      and (  not ( statek_f.si_aktywnoœæ in [ sia_Walka, sia_Walka__P³ywanie_Do_Punktu, sia_Walka__Torpedy_Ucieczka ] )  )
      and ( not statek_f.œwiat³a_w³¹czone ) then
      begin

        if statek_f = Statek_Gracza__Gracz_Tryb_Zwróæ() then
          Œwiat³a_CheckBox.Checked := true
        else//if statek_f = Statek_Gracza__Gracz_Tryb_Zwróæ() then
          begin

            statek_f.œwiat³a_w³¹czone := true;

            Wygl¹d_Elementy__Noc_Zmieñ();

          end;
        //---//if statek_f = Statek_Gracza__Gracz_Tryb_Zwróæ() then

      end
    else//if    ( (...)
    if    (
               (
                     ( dzieñ_jasnoœæ_g >= œwiat³o__w³¹czanie_próg__dzieñ_jasnoœæ_c )
                 and ( mg³a_intensywnoœæ_g <= œwiat³o__w³¹czanie_próg__mg³a_intensywnoœæ_c )
               )
            or ( statek_f.si_aktywnoœæ in [ sia_Walka, sia_Walka__P³ywanie_Do_Punktu, sia_Walka__Torpedy_Ucieczka ] )
          )
      and ( statek_f.œwiat³a_w³¹czone ) then
      begin

        if statek_f = Statek_Gracza__Gracz_Tryb_Zwróæ() then
          Œwiat³a_CheckBox.Checked := false
        else//if statek_f = Statek_Gracza__Gracz_Tryb_Zwróæ() then
          begin

            statek_f.œwiat³a_w³¹czone := false;
            statek_f.Œwiat³a_Miganie__OpóŸnienia_Losowe_Resetuj__Statek( false );

            Wygl¹d_Elementy__Noc_Zmieñ();

          end;
        //---//if statek_f = Statek_Gracza__Gracz_Tryb_Zwróæ() then

      end;
    //---//if    ( (...)


    if    ( dzieñ_jasnoœæ_g < œwiat³o_dodatkowe__w³¹czanie_próg__dzieñ_jasnoœæ_c )
      and ( not wrogi_statek_pozycja_znana_l )
      and (  not ( statek_f.si_aktywnoœæ in [ sia_Walka, sia_Walka__P³ywanie_Do_Punktu, sia_Walka__Torpedy_Ucieczka ] )  )
      and ( not statek_f.œwiat³a_dodatkowe_w³¹czone ) then
      begin

        if statek_f = Statek_Gracza__Gracz_Tryb_Zwróæ() then
          Œwiat³a_Dodatkowe_CheckBox.Checked := true
        else//if statek_f = Statek_Gracza__Gracz_Tryb_Zwróæ() then
          begin

            statek_f.œwiat³a_dodatkowe_w³¹czone := true;

            Wygl¹d_Elementy__Noc_Zmieñ();

          end;
        //---//if statek_f = Statek_Gracza__Gracz_Tryb_Zwróæ() then

      end
    else//if    ( dzieñ_jasnoœæ_g < œwiat³o_dodatkowe__w³¹czanie_próg__dzieñ_jasnoœæ_c ) (...)
    if    (
               ( dzieñ_jasnoœæ_g >= œwiat³o_dodatkowe__w³¹czanie_próg__dzieñ_jasnoœæ_c )
            or ( statek_f.si_aktywnoœæ in [ sia_Walka, sia_Walka__P³ywanie_Do_Punktu, sia_Walka__Torpedy_Ucieczka ] )
          )
      and ( statek_f.œwiat³a_dodatkowe_w³¹czone ) then
      begin

        if statek_f = Statek_Gracza__Gracz_Tryb_Zwróæ() then
          Œwiat³a_Dodatkowe_CheckBox.Checked := false
        else//if statek_f = Statek_Gracza__Gracz_Tryb_Zwróæ() then
          begin

            statek_f.œwiat³a_dodatkowe_w³¹czone := false;
            statek_f.Œwiat³a_Miganie__OpóŸnienia_Losowe_Resetuj__Statek( true );

            Wygl¹d_Elementy__Noc_Zmieñ();

          end;
        //---//if statek_f = Statek_Gracza__Gracz_Tryb_Zwróæ() then

      end;
    //---//if    ( (...)
    {$endregion 'Œwiat³a.'}


    // SOS.
    if    ( statek_f.si_decyduje )
      and ( statek_f.punkty_¿ycia_procent_zosta³o < 15 )
      and ( statek_f.punkty_¿ycia_procent_zosta³o > 0 )
      and ( statek_f.si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów, sia_Walka, sia_Walka__P³ywanie_Do_Punktu, sia_Walka__Torpedy_Ucieczka ] )
      and (  Czas_Miêdzy_W_Sekundach( statek_f.sos__czas_utworzenia_ostatniego_sekundy_i ) > sos__czas_do_ponownego_nadania_sekundy_i_c * 5  ) then
      SOS__Inicjuj( statek_f );
    //---// SOS.


    // Kotwica.
    if    ( statek_f.si_aktywnoœæ in [ sia_Postój ] )
      and ( statek_f.kotwica_ruch_etap__st <> kre_W_Dó³ )
      and (
               ( not statek_f.czy_samolot )
            or (
                     ( statek_f.czy_samolot )
                 and ( not statek_f.czy_samolot__na_lotniskowcu )
               )
          ) then
      statek_f.Kotwica_Ruch_Ustaw( kre_W_Dó³ )
    else//if    ( statek_f.si_aktywnoœæ in [ sia_Postój ] ) (...)
      if    (  not ( statek_f.si_aktywnoœæ in [ sia_Postój ] )  )
        and ( statek_f.kotwica_ruch_etap__st <> kre_W_Górê ) then
        statek_f.Kotwica_Ruch_Ustaw( kre_W_Górê );
    //---// Kotwica.


    if    (  not ( statek_f.si_aktywnoœæ in [ sia_Walka__P³ywanie_Do_Punktu ] )  )
      and ( statek_f.si__walka__p³ywanie_do_punktu__zbli¿anie ) then
      statek_f.si__walka__p³ywanie_do_punktu__zbli¿anie := false; // Nie powinno byæ potrzebne. //???


    {$region 'SI zagaduje.'}
    if Czas_Miêdzy_W_Sekundach( statek_f.si__zagaduje__ostatnie_sekundy_i ) > si__zagaduje_sekundy_c + statek_f.si__zagaduje_sekundy__modyfikator_losowy_i then
      begin

        if Random( 10 ) >= 7 then
          begin

            pokój_rozmów_r_l.id_nadawca := statek_f.id_gracz;
            pokój_rozmów_r_l.id_odbiorca := statek_f.id_grupa;
            pokój_rozmów_r_l.data_czas_wys³ania := Now();
            pokój_rozmów_r_l.odbiorca_rodzaj := pror_Grupa_Jedna;

            if statek_f.si_aktywnoœæ in [ sia_Brak, sia_Postój ] then
              begin

                case Random( 3 ) of
                    0 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__postój__1;
                    1 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__postój__2;
                    2 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__postój__3;
                  end;
                //---//case Random( 3 ) of

              end
            else//if statek_f.si_aktywnoœæ in [ sia_Brak, sia_Postój ] then
            if statek_f.si_aktywnoœæ in [ sia_Odnawianie_Zasobów__Lotniskowiec ] then
              begin

                case Random( 3 ) of
                    0 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__odnawianie_zasobów__lotniskowiec__1;
                    1 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__odnawianie_zasobów__lotniskowiec__2;
                    2 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__odnawianie_zasobów__lotniskowiec__3;
                  end;
                //---//case Random( 3 ) of

              end
            else//if statek_f.si_aktywnoœæ in [ sia_Odnawianie_Zasobów__Lotniskowiec ] then
            if statek_f.si_aktywnoœæ in [ sia_Patrol, sia_P³ywanie_Do_Punktu__Patrol, sia_P³ywanie_Do_Punktu__Postój ] then
              begin

                case Random( 3 ) of
                    0 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__patrol__1;
                    1 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__patrol__2;
                    2 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__patrol__3;
                  end;
                //---//case Random( 3 ) of

              end
            else//if statek_f.si_aktywnoœæ in [ sia_Patrol, sia_P³ywanie_Do_Punktu__Patrol, sia_P³ywanie_Do_Punktu__Postój ] then
            if statek_f.si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów ] then
              begin

                case Random( 4 ) of
                    0 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__p³ywanie_do_punktu__odnawianie_zasobów__1;
                    1 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__p³ywanie_do_punktu__odnawianie_zasobów__2;
                    2 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__p³ywanie_do_punktu__odnawianie_zasobów__3;
                    3 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__p³ywanie_do_punktu__odnawianie_zasobów__4;
                  end;
                //---//case Random( 3 ) of

              end
            else//if statek_f.si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów ] then
            if statek_f.si_aktywnoœæ in [ sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Hamowanie, sia_Samolot__L¹dowanie__Podchodzenie ] then
              begin

                case Random( 3 ) of
                    0 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__samolot__l¹dowanie__1;
                    1 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__samolot__l¹dowanie__2;
                    2 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__samolot__l¹dowanie__3;
                  end;
                //---//case Random( 3 ) of

              end
            else//if statek_f.si_aktywnoœæ in [ sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Hamowanie, sia_Samolot__L¹dowanie__Podchodzenie ] then
            if statek_f.si_aktywnoœæ in [ sia_Samolot__Startowanie ] then
              begin

                case Random( 3 ) of
                    0 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__samolot__startowanie__1;
                    1 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__samolot__startowanie__2;
                    2 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__samolot__startowanie__3;
                  end;
                //---//case Random( 3 ) of

              end
            else//if statek_f.si_aktywnoœæ in [ sia_Samolot__Startowanie ] then
            if statek_f.si_aktywnoœæ in [ sia_Walka, sia_Walka__P³ywanie_Do_Punktu, sia_Walka__Torpedy_Ucieczka ] then
              begin

                case Random( 5 ) of
                    0 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__walka__1;
                    1 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__walka__2;
                    2 : pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__walka__3;

                    3 :
                        begin

                          pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__walka__4;
                          pokój_rozmów_r_l.odbiorca_rodzaj := pror_Wszyscy;

                        end;
                      //---//3 :

                    4 :
                        begin

                          pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__walka__5;
                          pokój_rozmów_r_l.odbiorca_rodzaj := pror_Wszyscy;

                        end;
                      //---//4 :
                  end;
                //---//case Random( 5 ) of

              end
            else//if statek_f.si_aktywnoœæ in [ sia_Walka, sia_Walka__P³ywanie_Do_Punktu, sia_Walka__Torpedy_Ucieczka ] then
              pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__nieokreœlone;


            pokój_rozmów_r_l.wiadomoœæ := pokój_rozmów_r_l.wiadomoœæ + si_pokój_rozmów__znacznik_symbol__si_zagaduje_c;


            if czy_gra_lokalna_g then
              Pokój_Rozmów__Wyœwietl_Wiadomoœæ( pokój_rozmów_r_l )
            else//if czy_gra_lokalna_g then
              begin

                Pokój_Rozmów__Wyœlij_Wiadomoœæ( pokój_rozmów_r_l );

                if czy_serwer_g then
                  if pokój_rozmów_r_l.odbiorca_rodzaj = pror_Wszyscy then
                    Pokój_Rozmów__Wyœwietl_Wiadomoœæ( pokój_rozmów_r_l )
                  else//if pokój_rozmów_r_l.odbiorca_rodzaj = pror_Wszyscy then
                    for i_l := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
                      if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).identyfikator__kd = serwer_peer_port_c then
                        begin

                          if   ( pokój_rozmów_r_l.id_nadawca = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).identyfikator__kd )
                            or (
                                     ( pokój_rozmów_r_l.odbiorca_rodzaj = pror_Gracz_Jeden )
                                 and ( pokój_rozmów_r_l.id_odbiorca = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).identyfikator__kd )
                               )
                            or (
                                     ( pokój_rozmów_r_l.odbiorca_rodzaj = pror_Grupa_Jedna )
                                 and ( pokój_rozmów_r_l.id_odbiorca = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).id_grupa__kd )
                               ) then
                            Pokój_Rozmów__Wyœwietl_Wiadomoœæ( pokój_rozmów_r_l );

                          Break;

                        end;
                      //---//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i_l ]).identyfikator__kd = serwer_peer_port_c then

              end;
            //---//if czy_gra_lokalna_g then


            if    (
                       ( mg³a_intensywnoœæ_g > 0 )
                    or (  Random( 12 ) > 7  )
                  )
              and ( statek_f.si_aktywnoœæ in [ sia_Kotwice_Oczekiwanie_Na_Wci¹gniêcie, sia_Patrol, sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów, sia_P³ywanie_Do_Punktu__Patrol, sia_P³ywanie_Do_Punktu__Postój, sia_Samolot__Startowanie ] ) then
              DŸwiêki__Efekt__Utwórz_Jeden( der_Syrena_Okrêtowa, statek_f.AbsolutePosition );

           end
         else//if Random( 10 ) >= 7 then
           if    ( mg³a_intensywnoœæ_g > 0 )
             and ( statek_f.si_aktywnoœæ in [ sia_Kotwice_Oczekiwanie_Na_Wci¹gniêcie, sia_Patrol, sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów, sia_P³ywanie_Do_Punktu__Patrol, sia_P³ywanie_Do_Punktu__Postój, sia_Samolot__Startowanie ] ) then
             DŸwiêki__Efekt__Utwórz_Jeden( der_Syrena_Okrêtowa, statek_f.AbsolutePosition );


        statek_f.si__zagaduje__ostatnie_sekundy_i := Czas_Teraz_W_Sekundach();
        statek_f.si__zagaduje_sekundy__modyfikator_losowy_i := Random( si__zagaduje_sekundy_c );

      end;
    //---//if Czas_Miêdzy_W_Sekundach( statek_f.si__zagaduje__ostatnie_sekundy_i ) > si__zagaduje_sekundy_c + statek_f.si__zagaduje_sekundy__modyfikator_losowy_i then
    {$endregion 'SI zagaduje.'}


    {$region 'SI zak³óca.'}
    if    ( Zak³ócanie__Dozwolone_CheckBox.Checked )
      and (  Czas_Miêdzy_W_Sekundach( statek_f.si__zak³óca__ostatnie_sekundy_i ) > si__zak³óca_sekundy_g + statek_f.si__zak³óca_sekundy__modyfikator_losowy_i  ) then
      begin

        if Random( 101 ) <= zak³ócenie__prawdopodobieñstwo_sukcesu_procent_g then
          begin

            pokój_rozmów_r_l.id_nadawca := statek_f.id_gracz;
            pokój_rozmów_r_l.odbiorca_rodzaj := pror_Gracz_Jeden;


            for i_l := 0 to Length( statki_t ) - 1 do
              if    ( statki_t[ i_l ] <> nil )
                and ( statki_t[ i_l ].id_grupa <> statek_f.id_grupa )
                and ( statki_t[ i_l ].punkty_¿ycia_aktualne > 0 )
                and (  Random( 101 ) <= zak³ócenie__prawdopodobieñstwo_sukcesu_procent_g  ) then
                begin

                  pokój_rozmów_r_l.id_odbiorca := statki_t[ i_l ].id_gracz;
                  pokój_rozmów_r_l.data_czas_wys³ania := Now();
                  pokój_rozmów_r_l.wiadomoœæ := si_pokój_rozmów__polecenie_symbol_c;

                  case Random( 3 ) of
                      0 : pokój_rozmów_r_l.wiadomoœæ := pokój_rozmów_r_l.wiadomoœæ + t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³óca__1;
                      1 : pokój_rozmów_r_l.wiadomoœæ := pokój_rozmów_r_l.wiadomoœæ + t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³óca__2;
                      2 : pokój_rozmów_r_l.wiadomoœæ := pokój_rozmów_r_l.wiadomoœæ + t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³óca__3;
                    end;
                  //---//case Random( 3 ) of


                 if statki_t[ i_l ].czy_samolot then
                   pokój_rozmów_r_l.wiadomoœæ := pokój_rozmów_r_l.wiadomoœæ + si_pokój_rozmów__polecenie_symbol__samolot_c
                 else//if statki_t[ i_l ].czy_samolot then
                   if statki_t[ i_l ].czy_samolot then
                     pokój_rozmów_r_l.wiadomoœæ := pokój_rozmów_r_l.wiadomoœæ + si_pokój_rozmów__polecenie_symbol__statek_c;


                 pokój_rozmów_r_l.wiadomoœæ := pokój_rozmów_r_l.wiadomoœæ + si_pokój_rozmów__znacznik_symbol__si_zak³óca_c; //???


                  if czy_gra_lokalna_g then
                    Pokój_Rozmów__Wyœwietl_Wiadomoœæ( pokój_rozmów_r_l )
                  else//if czy_gra_lokalna_g then
                    begin

                      Pokój_Rozmów__Wyœlij_Wiadomoœæ( pokój_rozmów_r_l );

                      if czy_serwer_g then
                        if pokój_rozmów_r_l.odbiorca_rodzaj = pror_Wszyscy then
                          Pokój_Rozmów__Wyœwietl_Wiadomoœæ( pokój_rozmów_r_l )
                        else//if pokój_rozmów_r_l.odbiorca_rodzaj = pror_Wszyscy then
                          for zti_l := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
                            if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ zti_l ]).identyfikator__kd = serwer_peer_port_c then
                              begin

                                if   ( pokój_rozmów_r_l.id_nadawca = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ zti_l ]).identyfikator__kd )
                                  or (
                                           ( pokój_rozmów_r_l.odbiorca_rodzaj = pror_Gracz_Jeden )
                                       and ( pokój_rozmów_r_l.id_odbiorca = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ zti_l ]).identyfikator__kd )
                                     )
                                  or (
                                           ( pokój_rozmów_r_l.odbiorca_rodzaj = pror_Grupa_Jedna )
                                       and ( pokój_rozmów_r_l.id_odbiorca = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ zti_l ]).id_grupa__kd )
                                     ) then
                                  Pokój_Rozmów__Wyœwietl_Wiadomoœæ( pokój_rozmów_r_l );

                                Break;

                              end;
                            //---//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ zti_l ]).identyfikator__kd = serwer_peer_port_c then

                    end;
                  //---//if czy_gra_lokalna_g then


                  SI__Polecenie__Zak³ócenia_Interpretuj( pokój_rozmów_r_l );

                end;
              //---//if    ( statki_t[ i_l ] <> nil ) (...)

          end;
        //---//if Random( 101 ) <= zak³ócenie__prawdopodobieñstwo_sukcesu_procent_g then


        statek_f.si__zak³óca__ostatnie_sekundy_i := Czas_Teraz_W_Sekundach();
        statek_f.si__zak³óca_sekundy__modyfikator_losowy_i := Random( si__zak³óca_sekundy_g );

      end;
    //---//if    ( Zak³ócanie__Dozwolone_CheckBox.Checked ) (...)
    {$endregion 'SI zak³óca.'}


    if not czas_przeliczenia_aktualizuj_l then
      statek_f.si__aktywnoœæ__okreœlenie_ostatnie_sekundy_i := Czas_Teraz_W_Sekundach();

  end;//---//Funkcja SI_Aktywnoœæ_Okreœl() w SI_Decyduj().

  //Funkcja Statek__P³ywanie_Losowe() w SI_Decyduj().
  procedure Statek__P³ywanie_Losowe( statek_f : TStatek );
  var
    zti,
    prawdopodobieñstwo
      : integer;
    ztsi_l : single;
  begin

    //
    // Funkcja losowo zmienia prêdkoœæ statku (z prób¹ ominiêcia kolizji).
    //

    if   ( not SI__P³ywa_CheckBox.Checked )
      or ( statek_f = nil )
      or (  not Assigned( statek_f )  )
      or (
               ( not statek_f.si__kolizja )
           and (
                    (  Abs( statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny - statek_f.prêdkoœæ_zadana_procent ) > samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c  )
                 or (  Czas_Miêdzy_W_Sekundach( statek_f.si__p³ywanie_losowe__zmiana_ostatnia_sekundy_i ) < statek_f.si__p³ywanie_losowe__zmiana_sekundy  )
               )
         ) then
      Exit;


    if statek_f.si__kolizja then
      begin

        ztsi_l := -25;

        if statek_f.si__kolizja__prêdkoœæ_ujemna then
          ztsi_l := -ztsi_l;

        if statek_f.prêdkoœæ_zadana_procent <> ztsi_l then
          statek_f.Prêdkoœæ_Zadana_Procent_Ustaw(  Round( ztsi_l )  );


        ztsi_l := statek_f.DistanceTo( statek_f.si__kolizja__wspó³rzêdne );

        if    ( ztsi_l > 1 )
          and ( ztsi_l > statek_f.z_prymityw_odleg³oœæ ) then
          begin

            //statek_f.si__p³ywanie_losowe__zmiana_sekundy := 1; // Lepiej aby po kolizji siê oddali³ i nie zmienia³ od razu prêdkoœci.

            // Aby po ustaniu kolizji wyliczy³ nowy skrêt.
            statek_f.si__p³ywanie_losowe__skrêt__k¹t_pocz¹tkowy := 0;
            statek_f.si__p³ywanie_losowe__skrêt__k¹t_zakres := 0;
            statek_f.si__p³ywanie_losowe__skrêt__zmiana_ostatnia_sekundy_i := 0;
            statek_f.si__p³ywanie_losowe__skrêt__zmiana_sekundy := 0;

            statek_f.si__kolizja := false;

          end;
        //---//if    ( ztsi_l > 1 ) (...)


        Exit;

      end;
    //---//if statek_f.si__kolizja then


    if statek_f.si__p³ywanie_losowe__zmiana_sekundy = 0 then
      begin

        statek_f.si__p³ywanie_losowe__zmiana_sekundy := 3 + Random( 11 );
        statek_f.si__p³ywanie_losowe__zmiana_ostatnia_sekundy_i := Czas_Teraz_W_Sekundach();

      end
    else//if statek_f.si__p³ywanie_losowe__zmiana_sekundy = 0 then
      begin

        prawdopodobieñstwo := Random( 100 ) + 1; // 1 - 100.


        // Pierwotny kierunek ruchu.
        if statek_f.prêdkoœæ_zadana_procent < 0 then
          zti := -1
        else//if statek_f.prêdkoœæ_zadana_procent < 0 then
          zti := 1;


        if not statek_f.czy_samolot then
          begin

            {$region 'Wyznaczanie prêdkoœci statku (nie samolotu).'}
            if    ( prawdopodobieñstwo >= 1 )
              and ( prawdopodobieñstwo <= 10 ) then
              begin

                // Zmienia kierunek.

                statek_f.Prêdkoœæ_Zadana_Procent_Ustaw(  -Round( statek_f.prêdkoœæ_zadana_procent )  );

              end
            else//
            if    ( prawdopodobieñstwo >= 11 )
              and ( prawdopodobieñstwo <= 14 ) then
              begin

                // Zatrzymuje siê (prêdkoœæ 0%).

                statek_f.Prêdkoœæ_Zadana_Procent_Ustaw( 0 );

              end
            else//
            if    ( prawdopodobieñstwo >= 15 )
              and ( prawdopodobieñstwo <= 16 ) then
              begin

                // Prêdkoœæ od 1% do 25%.

                statek_f.Prêdkoœæ_Zadana_Procent_Ustaw(   zti * (  Random( 25 ) + 1  )   );

              end
            else//
            if    ( prawdopodobieñstwo >= 17 )
              and ( prawdopodobieñstwo <= 20 ) then
              begin

                // Prêdkoœæ od 26% do 50%.

                statek_f.Prêdkoœæ_Zadana_Procent_Ustaw(   zti * (  25 + Random( 25 ) + 1  )   );

              end
            else//
            if    ( prawdopodobieñstwo >= 21 )
              and ( prawdopodobieñstwo <= 30 ) then
              begin

                // Prêdkoœæ od 51% do 74%.

                statek_f.Prêdkoœæ_Zadana_Procent_Ustaw(   zti * (  50 + Random( 25 ) + 1  )   );

              end
            else//if    ( prawdopodobieñstwo (...)
              begin

                // Prêdkoœæ od 76% do 100%.

                statek_f.Prêdkoœæ_Zadana_Procent_Ustaw(   zti * (  75 + Random( 25 ) + 1  )   );

              end;
            //---//if    ( prawdopodobieñstwo (...)
            {$endregion 'Wyznaczanie prêdkoœci statku (nie samolotu).'}

          end
        else//if not statek_f.czy_samolot then
          begin

            {$region 'Wyznaczanie prêdkoœci samolotu.'}
            if   ( statek_f.czy_samolot__na_lotniskowcu )
              or ( statek_f.AbsolutePosition.Y < samolot_w_powietrzu_wysokoœæ_od_c ) then
              begin

                if    ( prawdopodobieñstwo >= 1 )
                  and ( prawdopodobieñstwo <= 2 ) then
                  begin

                    // Prêdkoœæ od -10% do -1%.

                    statek_f.Prêdkoœæ_Zadana_Procent_Ustaw(   -(  Round( 10 ) + 1  )   );

                  end
                else//
                if    ( prawdopodobieñstwo >= 3 )
                  and ( prawdopodobieñstwo <= 4 ) then
                  begin

                    // Zatrzymuje siê (prêdkoœæ 0%).

                    statek_f.Prêdkoœæ_Zadana_Procent_Ustaw( 0 );

                  end
                else//
                if    ( prawdopodobieñstwo >= 5 )
                  and ( prawdopodobieñstwo <= 6 ) then
                  begin

                    // Prêdkoœæ od 1% do 10%.

                    statek_f.Prêdkoœæ_Zadana_Procent_Ustaw(  Random( 10 ) + 1  );

                  end
                else//if    ( prawdopodobieñstwo (...)
                  begin

                    // Prêdkoœæ 25%.

                    statek_f.Prêdkoœæ_Zadana_Procent_Ustaw( 25 );

                  end;
                //---//if    ( prawdopodobieñstwo (...)


                // Je¿eli samolot 'wyl¹dowa³' ogranicza mu prêdkoœæ aby nie otrzymywa³ obra¿eñ.
                if statek_f.prêdkoœæ_zadana_procent > samolot_prêdkoœæ_lotu_procent_minimalny_c then
                  statek_f.Prêdkoœæ_Zadana_Procent_Ustaw(  Round( samolot_prêdkoœæ_lotu_procent_minimalny_c )  );

              end
            else//if   ( statek_f.czy_samolot__na_lotniskowcu ) (...)
              begin

                if    ( prawdopodobieñstwo >= 1 )
                  and ( prawdopodobieñstwo <= 10 ) then
                  begin

                    // Prêdkoœæ od 25% do 50%.

                    statek_f.Prêdkoœæ_Zadana_Procent_Ustaw(  25 + Random( 25 ) + 1  );

                  end
                else//
                if    ( prawdopodobieñstwo >= 11 )
                  and ( prawdopodobieñstwo <= 30 ) then
                  begin

                    // Prêdkoœæ od 51% do 75%.

                    statek_f.Prêdkoœæ_Zadana_Procent_Ustaw(  50 + Random( 25 ) + 1  );

                  end
                else//if    ( prawdopodobieñstwo (...)
                  begin

                    // Prêdkoœæ od 76% do 100%.

                    statek_f.Prêdkoœæ_Zadana_Procent_Ustaw(  75 + Random( 25 ) + 1  );

                  end;
                //---//if    ( prawdopodobieñstwo (...)

              end;
            //---//if   ( statek_f.czy_samolot__na_lotniskowcu ) (...)
            {$endregion 'Wyznaczanie prêdkoœci samolotu.'}

          end;
        //---//if not statek_f.czy_samolot then


        statek_f.si__p³ywanie_losowe__zmiana_sekundy := 0;

      end;
    //---//if statek_f.si__p³ywanie_losowe__zmiana_sekundy = 0 then

  end;//---//Funkcja Statek__P³ywanie_Losowe() w SI_Decyduj().

  //Funkcja Statek__P³ywanie_Losowe__Skrêt() w SI_Decyduj().
  procedure Statek__P³ywanie_Losowe__Skrêt( statek_f : TStatek );
  var
    zti,
    prawdopodobieñstwo
      : integer;
  begin

    //
    // Funkcja losowo zmienia skrêt statku.
    //

    if   ( not SI__P³ywa_CheckBox.Checked )
      or ( statek_f = nil )
      or (  not Assigned( statek_f )  )
      or (
              (
                    ( statek_f.si__p³ywanie_losowe__skrêt__k¹t_zakres = 0 )
                and (  Czas_Miêdzy_W_Sekundach( statek_f.si__p³ywanie_losowe__skrêt__zmiana_ostatnia_sekundy_i ) < statek_f.si__p³ywanie_losowe__skrêt__zmiana_sekundy  )
              )
           or (
                    ( statek_f.si__p³ywanie_losowe__skrêt__k¹t_zakres <> 0 )
                and (  Abs( statek_f.si__p³ywanie_losowe__skrêt__k¹t_pocz¹tkowy - statek_f.TurnAngle ) < statek_f.si__p³ywanie_losowe__skrêt__k¹t_zakres  )
              )
         ) then
      Exit;


    if statek_f.si__p³ywanie_losowe__skrêt__k¹t_zakres <> 0 then
      begin

        statek_f.si__p³ywanie_losowe__skrêt__k¹t_pocz¹tkowy := 0;
        statek_f.si__p³ywanie_losowe__skrêt__k¹t_zakres := 0;

        statek_f.Skrêt_Zadany_Procent_Ustaw( 0 );

      end
    else//if statek_f.si__p³ywanie_losowe__skrêt__k¹t_zakres <> 0 then
      begin

        prawdopodobieñstwo := Random( 100 ) + 1; // 1 - 100.


        {$region 'Wyznaczanie skrêtu statku.'}
        // Kierunek skrêtu.
        if Random( 2 ) = 1 then
          zti := -1
        else//if Random( 2 ) = 1 then
          zti := 1;


        if    ( prawdopodobieñstwo >= 1 )
          and ( prawdopodobieñstwo <= 5 ) then
          begin

            // Prosto (skrêt 0%).

            statek_f.Skrêt_Zadany_Procent_Ustaw( 0 );

          end
        else//
        if    ( prawdopodobieñstwo >= 6 )
          and ( prawdopodobieñstwo <= 15 ) then
          begin

            // Skrêt od 1% do 25%.

            statek_f.Skrêt_Zadany_Procent_Ustaw(   zti * (  Random( 25 ) + 1  )   );

          end
        else//
        if    ( prawdopodobieñstwo >= 16 )
          and ( prawdopodobieñstwo <= 30 ) then
          begin

            // Skrêt od 26% do 50%.

            statek_f.Skrêt_Zadany_Procent_Ustaw(   zti * (  25 + Random( 25 ) + 1  )   );

          end
        else//
        if    ( prawdopodobieñstwo >= 31 )
          and ( prawdopodobieñstwo <= 50 ) then
          begin

            // Skrêt od 51% do 75%.

            statek_f.Skrêt_Zadany_Procent_Ustaw(   zti * (  50 + Random( 25 ) + 1  )   );

          end
        else//if    ( prawdopodobieñstwo (...)
          begin

            // Skrêt od 76% do 100%.

            statek_f.Skrêt_Zadany_Procent_Ustaw(   zti * (  75 + Random( 25 ) + 1  )   );

          end;
        //---//if    ( prawdopodobieñstwo (...)
        {$endregion 'Wyznaczanie skrêtu statku.'}

      end;
    //---//if statek_f.si__p³ywanie_losowe__skrêt__k¹t_zakres <> 0 then


    if statek_f.skrêt_zadany_procent <> 0 then
      begin

        // Nie zero - losuje o jaki k¹t skrêci statek.

        statek_f.si__p³ywanie_losowe__skrêt__k¹t_pocz¹tkowy := Round( statek_f.TurnAngle );
        statek_f.si__p³ywanie_losowe__skrêt__k¹t_zakres := Random( 180 ) + 1;

      end
    else//if statek_f.skrêt_zadany_procent <> 0 then
      begin

        // Zero - losuje po jakim czasie ponowi wyznaczanie skrêtu.

        statek_f.si__p³ywanie_losowe__skrêt__zmiana_sekundy := 3 + Random( 5 );
        statek_f.si__p³ywanie_losowe__skrêt__zmiana_ostatnia_sekundy_i := Czas_Teraz_W_Sekundach();

      end;
    //---//if statek_f.skrêt_zadany_procent <> 0 then

  end;//---//Funkcja Statek__P³ywanie_Losowe__Skrêt() w SI_Decyduj().

  //Funkcja Statek__P³ywanie_Losowe__Zanurzenie_Pu³ap() w SI_Decyduj().
  procedure Statek__P³ywanie_Losowe__Zanurzenie_Pu³ap( statek_f : TStatek );
  var
    prawdopodobieñstwo : integer;
    ztsi_l,
    cel_odleg³oœæ__w_pionie_l
      : single;
  begin

    //
    // Funkcja losowo zmienia zanurzenie pu³ap statku.
    //

    if   ( not SI__P³ywa_CheckBox.Checked )
      or ( statek_f = nil )
      or (  not Assigned( statek_f )  )
      or (
               ( not statek_f.czy_samolot )
           and ( not statek_f.czy_zanurzanie )
         ) then
      Exit;


    if    ( not statek_f.czy_samolot )
      and (
                ( not statek_f.si__kolizja )
            and (
                     (  Abs( statek_f.zanurzenie_pu³ap__aktualne_procent - statek_f.zanurzenie_pu³ap__zadane_procent ) > samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c  )
                  or (  Czas_Miêdzy_W_Sekundach( statek_f.si__p³ywanie_losowe__zanurzenie_pu³ap__zmiana_ostatnia_sekundy_i ) < statek_f.si__p³ywanie_losowe__zanurzenie_pu³ap__zmiana_sekundy  )
                )
          ) then
      Exit;


    if statek_f.czy_samolot then
      begin

        cel_odleg³oœæ__w_pionie_l := Abs( statek_f.zanurzenie_pu³ap__aktualne - statek_f.si__samolot_zanurzenie_pu³ap__zadane ); // Pu³ap do zmiany.


        if    ( cel_odleg³oœæ__w_pionie_l > 0.01 )
          and ( statek_f.zanurzenie_pu³ap__szybkoœæ <> 0 ) then
          begin

            // Im bli¿ej zadanego pu³apu tym wolniej zmienia aktualny pu³ap.

            ztsi_l := 100 * cel_odleg³oœæ__w_pionie_l * 2 / statek_f.zanurzenie_pu³ap__szybkoœæ; // Jaki procent szybkoœci zmiany pu³apu stanowi pu³ap do zmiany razy 2.

            // Przy wiêkszej prêdkoœci gry za bardzo zarzuca w pionie samolotami (rozbijaj¹ siê o 'l¹d').
            if Gra_GLCadencer.TimeMultiplier > samolot_w_powietrzu_wysokoœæ_od_c then
              ztsi_l := ztsi_l / ( Gra_GLCadencer.TimeMultiplier * 0.75 );

          end
        else//if    ( cel_odleg³oœæ__w_pionie_l > 0.1 ) (...)
          ztsi_l := 0;


        if statek_f.zanurzenie_pu³ap__aktualne > statek_f.si__samolot_zanurzenie_pu³ap__zadane then
          ztsi_l := -ztsi_l;

        statek_f.Zanurzenie_Zadane_Procent_Ustaw(  Zaokr¹glij__W_Górê( ztsi_l )  );



        if    ( not statek_f.si__kolizja )
          and (
                   ( statek_f.si_aktywnoœæ in [ sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Hamowanie, sia_Samolot__L¹dowanie__Podchodzenie ] )
                or (
                         ( statek_f.AbsolutePosition.Y > samolot_w_powietrzu_wysokoœæ_od_c )
                     and (  Abs( statek_f.zanurzenie_pu³ap__aktualne - statek_f.si__samolot_zanurzenie_pu³ap__zadane ) > samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c  )
                   )
                or (  Czas_Miêdzy_W_Sekundach( statek_f.si__p³ywanie_losowe__zanurzenie_pu³ap__zmiana_ostatnia_sekundy_i ) < statek_f.si__p³ywanie_losowe__zanurzenie_pu³ap__zmiana_sekundy  )
              ) then
          Exit;

      end;
    //---//if statek_f.czy_samolot then


    if statek_f.si__p³ywanie_losowe__zanurzenie_pu³ap__zmiana_sekundy = 0 then
      begin

        statek_f.si__p³ywanie_losowe__zanurzenie_pu³ap__zmiana_sekundy := 3 + Random( 5 );
        statek_f.si__p³ywanie_losowe__zanurzenie_pu³ap__zmiana_ostatnia_sekundy_i := Czas_Teraz_W_Sekundach();

      end
    else//if statek_f.si__p³ywanie_losowe__zmiana_sekundy = 0 then
      begin

        prawdopodobieñstwo := Random( 100 ) + 1; // 1 - 100.


        if not statek_f.czy_samolot then
          begin

            // Nie samolot.

            {$region 'Wyznaczanie zanurzenia pu³apu statku (nie samolotu).'}
            if    ( prawdopodobieñstwo >= 1 )
              and ( prawdopodobieñstwo <= 2 ) then
              begin

                // Wynurzenie (zanurzenie pu³ap 0%).

                statek_f.Zanurzenie_Zadane_Procent_Ustaw( 0 );

              end
            else//
            if    ( prawdopodobieñstwo >= 3 )
              and ( prawdopodobieñstwo <= 5 ) then
              begin

                // Peryskopowe.

                statek_f.Zanurzenie_Zadane_Procent_Zmieñ( 0, true );

              end
            else//
            if    ( prawdopodobieñstwo >= 6 )
              and ( prawdopodobieñstwo <= 10 ) then
              begin

                // Zanurzenie pu³ap od 1% do 25%.

                statek_f.Zanurzenie_Zadane_Procent_Ustaw(  Random( 25 ) + 1  );

              end
            else//
            if    ( prawdopodobieñstwo >= 11 )
              and ( prawdopodobieñstwo <= 30 ) then
              begin

                // Zanurzenie pu³ap od 26% do 50%.

                statek_f.Zanurzenie_Zadane_Procent_Ustaw(  25 + Random( 25 ) + 1  );

              end
            else//
            if    ( prawdopodobieñstwo >= 31 )
              and ( prawdopodobieñstwo <= 90 ) then
              begin

                // Zanurzenie pu³ap od 51% do 75%.

                statek_f.Zanurzenie_Zadane_Procent_Ustaw(  50 + Random( 25 ) + 1  );

              end
            else//if    ( prawdopodobieñstwo (...)
              begin

                // Zanurzenie pu³ap od 76% do 100%.

                statek_f.Zanurzenie_Zadane_Procent_Ustaw(  75 + Random( 25 ) + 1  );

              end;
            //---//if    ( prawdopodobieñstwo (...)
            {$endregion 'Wyznaczanie zanurzenia pu³apu statku (nie samolotu).'}

          end
        else//if not statek_f.czy_samolot then
          begin

            // Samolot.

            {$region 'Wyznaczanie zanurzenia pu³apu samolotu.'}
            if not ( statek_f.si_aktywnoœæ in [ sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Hamowanie, sia_Samolot__L¹dowanie__Podchodzenie ] ) then
              if   ( statek_f.czy_samolot__na_lotniskowcu )
                or ( statek_f.AbsolutePosition.Y < samolot_w_powietrzu_wysokoœæ_od_c ) then
                begin

                  statek_f.si__samolot_zanurzenie_pu³ap__zadane := samolot_w_powietrzu_wysokoœæ_od_c * statek_f.prêdkoœæ_maksymalna;
                  statek_f.Zanurzenie_Zadane_Procent_Ustaw( 100 );

                end
              else//if   ( statek_f.czy_samolot__na_lotniskowcu ) (...)
                begin

                  if    ( prawdopodobieñstwo >= 1 )
                    and ( prawdopodobieñstwo <= 10 ) then
                    begin

                      // Zanurzenie pu³ap od 10 do 500.

                      statek_f.si__samolot_zanurzenie_pu³ap__zadane := 10 + Random( 40 ) + 1;

                    end
                  else//
                  if    ( prawdopodobieñstwo >= 11 )
                    and ( prawdopodobieñstwo <= 20 ) then
                    begin

                      // Zanurzenie pu³ap od 51 do 150.

                      statek_f.si__samolot_zanurzenie_pu³ap__zadane := 50 + Random( 100 ) + 1;

                    end
                  else//
                  if    ( prawdopodobieñstwo >= 21 )
                    and ( prawdopodobieñstwo <= 60 ) then
                    begin

                      // Zanurzenie pu³ap od 151 do 250.

                      statek_f.si__samolot_zanurzenie_pu³ap__zadane := 150 + Random( 100 ) + 1;

                    end
                  else//
                  if    ( prawdopodobieñstwo >= 61 )
                    and ( prawdopodobieñstwo <= 80 ) then
                    begin

                      // Zanurzenie pu³ap od 251 do 400.

                      statek_f.si__samolot_zanurzenie_pu³ap__zadane := 250 + Random( 150 ) + 1;

                    end
                  else//
                  if    ( prawdopodobieñstwo >= 81 )
                    and ( prawdopodobieñstwo <= 90 ) then
                    begin

                      // Zanurzenie pu³ap od 401 do 500.

                      statek_f.si__samolot_zanurzenie_pu³ap__zadane := 400 + Random( 100 ) + 1;

                    end
                  else//if    ( prawdopodobieñstwo (...)
                    begin

                      // Zanurzenie pu³ap od 500 do 1000.

                      statek_f.si__samolot_zanurzenie_pu³ap__zadane := 500 + Random( 500 ) + 1;

                    end;
                  //---//if    ( prawdopodobieñstwo (...)

                end;
              //---//if   ( statek_f.czy_samolot__na_lotniskowcu ) (...)
            {$endregion 'Wyznaczanie zanurzenia pu³apu samolotu.'}


            if statek_f.zanurzenie_pu³ap__maksymalne > 0 then
              while ( statek_f.si__samolot_zanurzenie_pu³ap__zadane > 1 )
                and ( statek_f.si__samolot_zanurzenie_pu³ap__zadane > statek_f.zanurzenie_pu³ap__maksymalne ) do
                statek_f.si__samolot_zanurzenie_pu³ap__zadane := statek_f.si__samolot_zanurzenie_pu³ap__zadane * 0.5;

            if statek_f.si__samolot_zanurzenie_pu³ap__zadane < samolot_w_powietrzu_wysokoœæ_od_c then
              statek_f.si__samolot_zanurzenie_pu³ap__zadane := samolot_w_powietrzu_wysokoœæ_od_c;

          end;
        //---//if not statek_f.czy_samolot then


        statek_f.si__p³ywanie_losowe__zanurzenie_pu³ap__zmiana_sekundy := 0;

      end;
    //---//if statek_f.si__p³ywanie_losowe__skrêt__k¹t_zakres <> 0 then

  end;//---//Funkcja Statek__P³ywanie_Losowe__Zanurzenie_Pu³ap() w SI_Decyduj().

  //Funkcja Statek__P³ywanie_Do_Punktu() w SI_Decyduj().
  procedure Statek__P³ywanie_Do_Punktu( statek_f : TStatek; const losowe_zanurzanie_f : boolean = false );
  var
    czy_p³yniêcie_w_ty³_l : boolean;
    i_l : integer;
    si__samolot_zanurzenie_pu³ap__zadane_l : real;
    ztsi_l,
    cel_k¹t_l,
    cel_odleg³oœæ__w_poziomie_l,
    cel_odleg³oœæ__w_pionie_l,
    prêdkoœæ_zadana_procent_l,
    skrêt_zadany_procent_l
      : single;
  begin

    //
    // Funkcja próbuje doprowadziæ statek do wskazanego punktu.
    //
    // Parametry:
    //   losowe_zanurzanie_f:
    //     false - zanurzanie jest ustalane wed³ug zadanego punktu.
    //     true - zanurzanie jest ustalane losowo.
    //

    if   ( not SI__P³ywa_CheckBox.Checked )
      or ( statek_f = nil )
      or (  not Assigned( statek_f )  ) then
      Exit;


    if Czas_Miêdzy_W_Sekundach( statek_f.si__p³ywanie_losowe__zmiana_ostatnia_sekundy_i ) < 1 then
      Exit;


    //cel_odleg³oœæ__w_poziomie_l := statek_f.DistanceTo( statek_f.si__punkt_zadany__wspó³rzêdne );
    // Musi byæ pozycja absolutna, gdy¿ samolot mo¿e byæ 'potomkiem' lotniskowca a nie sceny.
    cel_odleg³oœæ__w_poziomie_l := GLS.VectorGeometry.VectorDistance(  GLS.VectorGeometry.VectorMake( statek_f.AbsolutePosition.X, 0, statek_f.AbsolutePosition.Z ), GLS.VectorGeometry.VectorMake( statek_f.si__punkt_zadany__wspó³rzêdne.X, 0, statek_f.si__punkt_zadany__wspó³rzêdne.Z )  ); // Y = 0 aby nie uwzglêdniaæ odleg³oœci w pionie.


    if    ( statek_f.si_aktywnoœæ in [ sia_Patrol, sia_P³ywanie_Do_Punktu__Patrol, sia_Walka__P³ywanie_Do_Punktu ] )
      and (
               ( cel_odleg³oœæ__w_poziomie_l < statek_f.z_prymityw_odleg³oœæ * statek_f.prêdkoœæ_maksymalna )
            or (
                     ( statek_f.czy_lotniskowiec )
                 and ( statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 )
                 and ( statek_f.id_statek__lotniskowiec__ma_samolot_na_pok³adzie = -99 )
                 and ( not statek_f.lotniskowiec__gotowy_na_przyjêcie_samolotu )
               )
          ) then
      begin

        if statek_f.si_aktywnoœæ in [ sia_Walka__P³ywanie_Do_Punktu ] then
          Walka__P³ywanie_Do_Punktu__Punkt_Wyznacz( statek_f )
        else//if statek_f.si_aktywnoœæ in [ sia_Walka__P³ywanie_Do_Punktu ] then
          begin

            if statek_f.si_aktywnoœæ = sia_P³ywanie_Do_Punktu__Patrol then
              statek_f.si_aktywnoœæ := sia_Patrol;

            Patrol_Punkt_Wyznacz( statek_f );

          end;
        //---//if statek_f.si_aktywnoœæ in [ sia_Walka__P³ywanie_Do_Punktu ] then


        // Musi byæ pozycja absolutna, gdy¿ samolot mo¿e byæ 'potomkiem' lotniskowca a nie sceny.
        cel_odleg³oœæ__w_poziomie_l := GLS.VectorGeometry.VectorDistance(  GLS.VectorGeometry.VectorMake( statek_f.AbsolutePosition.X, 0, statek_f.AbsolutePosition.Z ), GLS.VectorGeometry.VectorMake( statek_f.si__punkt_zadany__wspó³rzêdne.X, 0, statek_f.si__punkt_zadany__wspó³rzêdne.Z )  ); // Y = 0 aby nie uwzglêdniaæ odleg³oœci w pionie.

      end;
    //---//if    ( statek_f.si_aktywnoœæ in [ sia_Patrol, sia_P³ywanie_Do_Punktu__Patrol, sia_Walka__P³ywanie_Do_Punktu ] ) (...)


    {$region 'Zanurzenie.'}
    if Gra_GLCadencer.TimeMultiplier > 1 then // Przy wiêkszej prêdkoœci gry zwiêksza tolerancjê porównañ wartoœci.
      ztsi_l := Gra_GLCadencer.TimeMultiplier
    else//if Gra_GLCadencer.TimeMultiplier > 1 then
      ztsi_l := 1;


    if    ( statek_f.czy_samolot )
      and ( statek_f.si_aktywnoœæ in [ sia_Walka__P³ywanie_Do_Punktu ] )
      and ( statek_f.si__walka__p³ywanie_do_punktu__zbli¿anie )
      and ( statek_f.si__samolot_zanurzenie_pu³ap__zadane <> samolot_prêdkoœæ_lotu_procent_minimalny_c + statek_f.y_prymityw_najwiêksze * 4 ) then // To samo .y_prymityw_najwiêksze.
      begin

        statek_f.si__samolot_zanurzenie_pu³ap__zadane := samolot_prêdkoœæ_lotu_procent_minimalny_c + statek_f.y_prymityw_najwiêksze * 4;
        Walka__P³ywanie_Do_Punktu__Punkt_Wyznacz( statek_f );

      end
    else//if    ( statek_f.czy_samolot ) (...)
    if    ( not losowe_zanurzanie_f )
      and (
               ( statek_f.czy_samolot )
            or ( statek_f.czy_zanurzanie )
          )
      and ( statek_f.si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów ] )
      and ( statek_f.si__samolot_zanurzenie_pu³ap__zadane <> statek_f.si__punkt_zadany__wspó³rzêdne.Y ) then
      statek_f.si__samolot_zanurzenie_pu³ap__zadane := statek_f.si__punkt_zadany__wspó³rzêdne.Y;


    if    ( statek_f.czy_samolot )
      and ( not statek_f.czy_samolot__na_lotniskowcu )
      //and (
      //         (
      //               ( statek_f.AbsolutePosition.Y > samolot_w_powietrzu_wysokoœæ_od_c )
      //           and (  Abs( statek_f.zanurzenie_pu³ap__aktualne - statek_f.si__samolot_zanurzenie_pu³ap__zadane ) > 0.1 * ztsi_l  )
      //         )
      //      or ( statek_f.si_aktywnoœæ in [ sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Hamowanie, sia_Samolot__L¹dowanie__Podchodzenie ] )
      //    ) then
      //and (  Abs( statek_f.zanurzenie_pu³ap__aktualne - statek_f.si__samolot_zanurzenie_pu³ap__zadane ) > 0.01 * ztsi_l  ) then
      and (
               ( statek_f.si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów, sia_Samolot__L¹dowanie ] ) // Aby podczas l¹dowania móg³ prze³¹czyæ na sia_Samolot__L¹dowanie__Hamowanie.
            or (  Abs( statek_f.zanurzenie_pu³ap__aktualne - statek_f.si__samolot_zanurzenie_pu³ap__zadane ) > 0.1 * ztsi_l  )
            or (
                     ( statek_f.si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Patrol, sia_P³ywanie_Do_Punktu__Postój ] )
                 and ( statek_f.si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne.W = 1 )
               )
          ) then
      begin

        // Ustawia procent wznoszenia – opadania dla samolotów.

        // Je¿eli samolot porusza siê za szybko ogranicza mu obni¿enie pu³apu aby nie otrzymywa³ obra¿eñ.
        if    ( statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny > samolot_prêdkoœæ_lotu_procent_minimalny_c )
          and (
                   ( statek_f.si__samolot_zanurzenie_pu³ap__zadane < samolot_w_powietrzu_wysokoœæ_od_c )
                or ( statek_f.AbsolutePosition.Y < samolot_w_powietrzu_wysokoœæ_od_c )
              ) then
          begin

            si__samolot_zanurzenie_pu³ap__zadane_l := samolot_w_powietrzu_wysokoœæ_od_c; // Przy wiêkszej prêdkoœci gry to zabezpieczenie nie dzia³a.

          end
        else//if    ( statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny > samolot_prêdkoœæ_lotu_procent_minimalny_c ) (...)
          begin

            si__samolot_zanurzenie_pu³ap__zadane_l := statek_f.si__samolot_zanurzenie_pu³ap__zadane;

            if statek_f.si_aktywnoœæ = sia_Samolot__L¹dowanie then
              begin

                // Podczas l¹dowania dopóki nie zbli¿y siê do celu utrzymuje wysokoœæ wiêksz¹ ni¿ zadana.

                //if cel_odleg³oœæ__w_poziomie_l > statek_f.z_prymityw_odleg³oœæ then
                if   (
                           ( Gra_GLCadencer.TimeMultiplier <= samolot_w_powietrzu_wysokoœæ_od_c )
                       and ( cel_odleg³oœæ__w_poziomie_l > statek_f.z_prymityw_odleg³oœæ )
                     )
                  or (
                           ( Gra_GLCadencer.TimeMultiplier > samolot_w_powietrzu_wysokoœæ_od_c ) // Przy wiêkszej prêdkoœci gry zwiêksza tolerancjê porównañ wartoœci.
                       and ( cel_odleg³oœæ__w_poziomie_l > statek_f.z_prymityw_odleg³oœæ + statek_f.prêdkoœæ_maksymalna * 0.2 )
                     ) then
                  si__samolot_zanurzenie_pu³ap__zadane_l := si__samolot_zanurzenie_pu³ap__zadane_l + statek_f.y_prymityw_najwiêksze // Czeka na zbli¿enie siê do celu.
                else//if   ( (...)
                  if    ( statek_f.si_aktywnoœæ <> sia_Samolot__L¹dowanie__Hamowanie )
                    //and (  Abs( statek_f.Position.Y - statek_f.si__punkt_zadany__wspó³rzêdne.Y ) < statek_f.y_prymityw_najwiêksze  ) then
                    and (  Abs( statek_f.Position.Y - si__samolot_zanurzenie_pu³ap__zadane_l ) < statek_f.y_prymityw_najwiêksze * ztsi_l  ) then
                    begin

                      if statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = -1 then
                        statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := -99;

                      statek_f.si_aktywnoœæ := sia_Samolot__L¹dowanie__Hamowanie;

                    end;
                  //---//if    ( statek_f.si_aktywnoœæ <> sia_Samolot__L¹dowanie__Hamowanie ) (...)

              end;
            //---//if statek_f.si_aktywnoœæ = sia_Samolot__L¹dowanie then

          end;
        //---//if    ( statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny > samolot_prêdkoœæ_lotu_procent_minimalny_c ) (...)


        cel_odleg³oœæ__w_pionie_l := Abs( statek_f.zanurzenie_pu³ap__aktualne - si__samolot_zanurzenie_pu³ap__zadane_l ); // Pu³ap do zmiany.


        if    ( cel_odleg³oœæ__w_pionie_l > 0.01 )
          and ( statek_f.zanurzenie_pu³ap__szybkoœæ <> 0 ) then
          begin

            // Im bli¿ej zadanego pu³apu tym wolniej zmienia aktualny pu³ap.

            ztsi_l := 100 * cel_odleg³oœæ__w_pionie_l * 2 / statek_f.zanurzenie_pu³ap__szybkoœæ; // Jaki procent szybkoœci zmiany pu³apu stanowi pu³ap do zmiany razy 2.

            // Przy wiêkszej prêdkoœci gry za bardzo zarzuca w pionie samolotami (rozbijaj¹ siê o 'l¹d').
            if Gra_GLCadencer.TimeMultiplier > samolot_w_powietrzu_wysokoœæ_od_c then
              ztsi_l := ztsi_l / ( Gra_GLCadencer.TimeMultiplier * 0.75 );

          end
        else//if    ( cel_odleg³oœæ__w_pionie_l > 0.1 ) (...)
          ztsi_l := 0;


        // Podczas przyziemienia zwiêksza szybkoœæ zni¿ania.
        if    ( statek_f.si_aktywnoœæ = sia_Samolot__L¹dowanie )
          and ( statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie >= 0 ) // -1 oznacza, ¿e samolot l¹duje nie na lotniskowcu.
          and ( statek_f.zanurzenie_pu³ap__aktualne > statek_f.si__samolot_zanurzenie_pu³ap__zadane )
          and ( ztsi_l > 0 )
          and ( ztsi_l < samolot_prêdkoœæ_lotu_procent_minimalny_c * 2 )
          and ( cel_odleg³oœæ__w_pionie_l > statek_f.y_prymityw_najwiêksze )
          and ( statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny <= samolot_prêdkoœæ_lotu_procent_minimalny_c + samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c ) then
          ztsi_l := samolot_prêdkoœæ_lotu_procent_minimalny_c * 2;



        //ztsi_l := System.Math.Ceil( ztsi_l ); // Bo System.Math.Ceil( -2.1 ) = -2.

        if statek_f.zanurzenie_pu³ap__aktualne > statek_f.si__samolot_zanurzenie_pu³ap__zadane then
          ztsi_l := -ztsi_l;

        statek_f.Zanurzenie_Zadane_Procent_Ustaw(  Zaokr¹glij__W_Górê( ztsi_l )  );

      end
    else//if    ( statek_f.czy_samolot ) (...)
    if    ( statek_f.czy_samolot )
      and ( statek_f.czy_samolot__na_lotniskowcu )
      and ( statek_f.si_aktywnoœæ in [ sia_Samolot__L¹dowanie ] )
      and ( statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny <= samolot_prêdkoœæ_lotu_procent_minimalny_c + samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c ) then
      begin

        statek_f.si_aktywnoœæ := sia_Samolot__L¹dowanie__Hamowanie;

      end
    else//if    ( statek_f.czy_samolot ) (...)
    if    ( losowe_zanurzanie_f )
      and (
               (
                     ( statek_f.czy_samolot )
                 and ( not statek_f.czy_samolot__na_lotniskowcu )
                 and (  not ( statek_f.si_aktywnoœæ in [ sia_Postój, sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Hamowanie, sia_Samolot__L¹dowanie__Podchodzenie ] )  )
               )
            or ( statek_f.czy_zanurzanie )
          ) then
      Statek__P³ywanie_Losowe__Zanurzenie_Pu³ap( statek_f )
    else//if    ( losowe_zanurzanie_f ) (...)
    if    ( not statek_f.czy_samolot )
      and (
              (
                    ( statek_f.si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Patrol, sia_P³ywanie_Do_Punktu__Postój ] )
                and ( statek_f.si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne.W = 1 )
              )
           or ( statek_f.si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów ] )
         ) then
      begin

        if statek_f.zanurzenie_pu³ap__maksymalne <> 0 then
          ztsi_l := 100 * statek_f.si__samolot_zanurzenie_pu³ap__zadane / statek_f.zanurzenie_pu³ap__maksymalne
        else//if statek_f.zanurzenie_pu³ap__maksymalne <> 0 then
          ztsi_l := 0;

        statek_f.Zanurzenie_Zadane_Procent_Ustaw(  Zaokr¹glij__W_Górê( ztsi_l )  );

      end
    else//if    ( not statek_f.czy_samolot ) (...)
      statek_f.Zanurzenie_Zadane_Procent_Ustaw( 0 );
    {$endregion 'Zanurzenie.'}


    if   ( not statek_f.czy_samolot )
      or (
               ( statek_f.czy_samolot )
           and ( statek_f.si_aktywnoœæ <> sia_Samolot__L¹dowanie__Hamowanie )
         ) then
      cel_k¹t_l :=
        System.Math.RadToDeg
          (
            GLS.VectorGeometry.AngleBetweenVectors
              (
                GLS.VectorGeometry.AffineVectorMake( statek_f.AbsoluteDirection.X + statek_f.AbsolutePosition.X, 0, statek_f.AbsoluteDirection.Z + statek_f.AbsolutePosition.Z ), // Kierunek statku.
                GLS.VectorGeometry.AffineVectorMake( statek_f.si__punkt_zadany__wspó³rzêdne.X, 0, statek_f.si__punkt_zadany__wspó³rzêdne.Z ), // Pozycja celu. Y = 0 aby nie uwzglêdniaæ k¹ta w pionie.
                GLS.VectorGeometry.AffineVectorMake( statek_f.AbsolutePosition.X, 0, statek_f.AbsolutePosition.Z ) // Pozycja statku. Y = 0 aby nie uwzglêdniaæ k¹ta w pionie.
              )
          )
    else//if   ( not statek_f.czy_samolot ) (...)
      cel_k¹t_l := 0;

    // Je¿eli wspó³rzêdne celu i pozycji statku s¹ równe (i w kilku innych przypadkach) to k¹t wynosi NAN.
    if System.Math.IsNan( cel_k¹t_l ) then
      begin

        if cel_k¹t_l = -NAN then
          cel_k¹t_l := 180
        else//if cel_k¹t_l = -NAN then
          cel_k¹t_l := 0;

      end;
    //---//if System.Math.IsNan( cel_k¹t_l ) then


    if    ( statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny <= 10 )
      and ( cel_odleg³oœæ__w_poziomie_l <= statek_f.z_prymityw_odleg³oœæ * 10 )
      and ( cel_k¹t_l > 90 )
      and (
               ( not statek_f.czy_samolot )
            or (
                     ( statek_f.czy_samolot )
                 and ( statek_f.si_aktywnoœæ <> sia_Samolot__L¹dowanie__Hamowanie )
               )
          )
      //and (  not ( statek_f.si_aktywnoœæ in [ sia_Walka__P³ywanie_Do_Punktu ] )  ) //???
      and ( not statek_f.si__walka__p³ywanie_do_punktu__zbli¿anie ) // P³yn¹c do ty³u mo¿e zostaæ uszkodzony w³asnymi bombami g³êbinowymi. //???
      and ( // Je¿eli jakiœ samolot zamierza wyl¹dowaæ na lotniskowcu to lotniskowiec nie cofa.
               ( not statek_f.czy_lotniskowiec )
            or (
                     ( statek_f.czy_lotniskowiec )
                 and ( statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = -99 )
               )
          ) then
      begin

        // P³yniêcie w ty³.

        czy_p³yniêcie_w_ty³_l := true;
        cel_k¹t_l := 180 - cel_k¹t_l;

      end
    else//if    ( statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny <= 10 ) (...)
      czy_p³yniêcie_w_ty³_l := false;



    {$region 'Skrêt.'}
    if Abs( cel_k¹t_l ) > 90 then
      skrêt_zadany_procent_l := 100
    else//if Abs( cel_k¹t_l ) > 90 then
    if cel_k¹t_l > 0.1 then
      begin

         // Im k¹t miêdzy celem a statkiem jest mniejszy tym statek wolniej skrêca.
         // Je¿eli k¹t jest wiêkszy od 90 stopni to szybkoœæ skrêtu wynosi 100%.
         // Je¿eli k¹t jest mniejszy od 90 stopni to szybkoœæ skrêtu wynosi tyle
         // procent jakim procentem 90 stopni jest k¹t miêdzy statkiem a celem.

         //skrêt_zadany_procent_l := System.Math.Floor( cel_k¹t_l * 90 * 0.01 );
         skrêt_zadany_procent_l := System.Math.Floor( cel_k¹t_l * 0.9 ); // Uproszczenie obliczeñ.

        if cel_odleg³oœæ__w_poziomie_l <= statek_f.z_prymityw_odleg³oœæ * 3 then
          skrêt_zadany_procent_l := skrêt_zadany_procent_l * 3;

      end
    else//if cel_k¹t_l > 0.1 then
      skrêt_zadany_procent_l := 0;

    // W uk³adzie wspó³rzêdnych statku X dodatnie po lewej, X ujemne po prawej.
    // Skrêt w lewo k¹t ujemny, skrêt w prawo k¹t dodatni.
    if    ( skrêt_zadany_procent_l <> 0 )
      and (   statek_f.AbsoluteToLocal(  GLS.VectorGeometry.AffineVectorMake( statek_f.si__punkt_zadany__wspó³rzêdne )  ).X >= 0   ) then
      skrêt_zadany_procent_l := -skrêt_zadany_procent_l;
    {$endregion 'Skrêt.'}



    {$region 'Prêdkoœæ.'}
    i_l := System.Math.Ceil( l¹dowanie__podchodzenie_kroki_iloœæ_c * 0.5 ); // Je¿eli kroków do podejœcia do l¹dowania zosta³o wiêcej ni¿ po³owa to samolot nie zwalnia.

    if i_l <= 0 then
      i_l := 1;


    if    (
                ( cel_odleg³oœæ__w_poziomie_l > statek_f.z_prymityw_odleg³oœæ * statek_f.prêdkoœæ_maksymalna )
            and (
                     ( not statek_f.czy_samolot )
                  or (
                           ( statek_f.czy_samolot )
                       and ( not statek_f.si__walka__p³ywanie_do_punktu__zbli¿anie )
                       and ( statek_f.si_aktywnoœæ <> sia_Samolot__L¹dowanie__Hamowanie )
                     )
               )
         )
      or ( // Samolot gdy leci nie zwalnia przy osi¹ganiu celu chyba, ¿e l¹duje.
               ( statek_f.czy_samolot )
           and (  not ( statek_f.si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów ] )  )
           and ( not statek_f.si__walka__p³ywanie_do_punktu__zbli¿anie )
           and (
                    (  not ( statek_f.si_aktywnoœæ in [ sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Podchodzenie, sia_Samolot__L¹dowanie__Hamowanie ] )  )
                 or (
                          ( statek_f.si_aktywnoœæ = sia_Samolot__L¹dowanie__Podchodzenie )
                      and ( statek_f.samolot__l¹dowanie__podchodzenie_krok > i_l ) // Je¿eli kroków do podejœcia do l¹dowania zosta³o wiêcej ni¿ po³owa to samolot nie zwalnia.
                    )
               )
           and ( statek_f.AbsolutePosition.Y >= samolot_w_powietrzu_wysokoœæ_od_c )
           and ( statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny >= samolot_prêdkoœæ_lotu_procent_minimalny_c )
         ) then
      begin

        // P³ynie do punktu.

        //if statek_f.si_aktywnoœæ in [ sia_Walka__Torpedy_Ucieczka ] then
        if statek_f.si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów, sia_Walka__Torpedy_Ucieczka ] then
          prêdkoœæ_zadana_procent_l := 100
        else//if statek_f.si_aktywnoœæ in [ sia_Walka__Torpedy_Ucieczka ] then
          prêdkoœæ_zadana_procent_l := 75;

        if statek_f.si_aktywnoœæ in [ sia_Walka__P³ywanie_Do_Punktu ] then
          //if    ( statek_f.czy_samolot )
          //  and ( statek_f.si__walka__p³ywanie_do_punktu__zbli¿anie )
          //  and ( cel_odleg³oœæ__w_poziomie_l < statek_f.prêdkoœæ_maksymalna * statek_f.prêdkoœæ_przyspieszanie * 10 ) then
          //  prêdkoœæ_zadana_procent_l := samolot_prêdkoœæ_lotu_procent_minimalny_c
          //else//if    ( statek_f.czy_samolot ) (...)
            prêdkoœæ_zadana_procent_l := prêdkoœæ_zadana_procent_l + statek_f.si__walka__p³ywanie_do_punktu__prêdkoœæ_zadana_procent_korekta;


        if    ( statek_f.czy_lotniskowiec )
          and ( statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 )
          and ( statek_f.lotniskowiec__gotowy_na_przyjêcie_samolotu )
          and ( statek_f.prêdkoœæ_maksymalna > 0 ) then
          for i_l := 0 to Length( statki_t ) - 1 do
            if    ( statki_t[ i_l ] <> nil )
              and ( statki_t[ i_l ].czy_samolot )
              and ( statki_t[ i_l ].id_statek = statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie ) then
              begin

                // Dostosowoje prêdkoœæ lotniskowca do l¹duj¹cego samolotu.

                if statki_t[ i_l ].si_aktywnoœæ = sia_Samolot__L¹dowanie then
                  begin

                    // Po³owa prêdkoœci 'l¹dowania' samolotu.
                    ztsi_l :=
                        statki_t[ i_l ].prêdkoœæ_maksymalna
                      * ( samolot_prêdkoœæ_lotu_procent_minimalny_c - samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c )
                      //* 0.01
                      //* 0.05
                      * 0.005; // Uproszczenie obliczeñ.


                    // Ustala prêdkoœæ lotniskowca na po³owê prêdkoœci 'l¹dowania' samolotu.
                    prêdkoœæ_zadana_procent_l :=
                        100
                      * ztsi_l
                      / statek_f.prêdkoœæ_maksymalna;


                    if prêdkoœæ_zadana_procent_l < 0 then
                      prêdkoœæ_zadana_procent_l := 0
                    else//if prêdkoœæ_zadana_procent_l < 0 then
                    if prêdkoœæ_zadana_procent_l > 100 then
                      prêdkoœæ_zadana_procent_l := 100;

                  end;
                //---//if statki_t[ i_l ].si_aktywnoœæ = sia_Samolot__L¹dowanie then


                Break;

              end;
            //---//if    ( statki_t[ i_l ] <> nil ) (...)

      end
    else//if    ( (...)
    if    ( cel_odleg³oœæ__w_poziomie_l > 0.1 )
      and (
               ( not statek_f.czy_samolot )
           or (
                    ( statek_f.czy_samolot )
                and ( statek_f.si_aktywnoœæ <> sia_Samolot__L¹dowanie__Hamowanie )
              )
         ) then
    // Czêœæ statków nie jest w stanie odpowiednio wykrêciæ aby trafiæ w cel i p³ywa raz w ty³ raz w przód. //????
    //if cel_odleg³oœæ__w_poziomie_l > statek_f.z_prymityw_odleg³oœæ then
      begin

         // Im statek jest bli¿ej celu tym wolniej p³ynie.
         // Je¿eli odleg³oœæ jest wiêksza od d³ugoœci statku pomno¿onej przez jego prêdkoœæ maksymaln¹ to prêdkoœæ wynosi 75%.
         // Je¿eli odleg³oœæ jest mniejsza od d³ugoœci statku pomno¿onej przez jego prêdkoœæ maksymaln¹ to prêdkoœæ wynosi 75%
         // razy taki procent jakim procentem d³ugoœci statku pomno¿onej przez jego prêdkoœæ maksymaln¹ jest aktualna odleg³oœæ do celu.

        //prêdkoœæ_zadana_procent_l := System.Math.Floor(   (  cel_odleg³oœæ__w_poziomie_l * 100 / ( statek_f.z_prymityw_odleg³oœæ * statek_f.prêdkoœæ_maksymalna )  ) * 75 * 0.01   );
        //prêdkoœæ_zadana_procent_l := System.Math.Floor(   (  cel_odleg³oœæ__w_poziomie_l / ( statek_f.z_prymityw_odleg³oœæ * statek_f.prêdkoœæ_maksymalna )  ) * 75   ); // Uproszczenie obliczeñ 1.
        //prêdkoœæ_zadana_procent_l := System.Math.Floor(   (  cel_odleg³oœæ__w_poziomie_l * 75 / ( statek_f.z_prymityw_odleg³oœæ * statek_f.prêdkoœæ_maksymalna )  )   ); // Uproszczenie obliczeñ 2.


        if statek_f.si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów ] then
          ztsi_l := 100
        else//if statek_f.si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów ] then
          ztsi_l := 75;

        if    ( statek_f.czy_samolot )
          and ( statek_f.si_aktywnoœæ = sia_Samolot__L¹dowanie ) then
          prêdkoœæ_zadana_procent_l := samolot_prêdkoœæ_lotu_procent_minimalny_c
        else//if    ( statek_f.czy_samolot ) (...)
          //prêdkoœæ_zadana_procent_l := System.Math.Floor(   (  cel_odleg³oœæ__w_poziomie_l * 75 / ( statek_f.z_prymityw_odleg³oœæ * statek_f.prêdkoœæ_maksymalna )  )   ); // To samo cel_odleg³oœæ__w_poziomie_l * 75.
          prêdkoœæ_zadana_procent_l := System.Math.Floor(   (  cel_odleg³oœæ__w_poziomie_l * ztsi_l / ( statek_f.z_prymityw_odleg³oœæ * statek_f.prêdkoœæ_maksymalna )  )   ); // To samo cel_odleg³oœæ__w_poziomie_l * 75.


        // Aby podczas walki, gdy zbli¿a siê do celu, za bardzo nie zwalnia³.
        if statek_f.si_aktywnoœæ in [ sia_Walka__P³ywanie_Do_Punktu ] then
          begin

            if statek_f.si__walka__p³ywanie_do_punktu__zbli¿anie then
              begin

                if not statek_f.czy_samolot then
                  prêdkoœæ_zadana_procent_l := prêdkoœæ_zadana_procent_l + statek_f.si__walka__p³ywanie_do_punktu__prêdkoœæ_zadana_procent_korekta;

              end
            else//if statek_f.si__walka__p³ywanie_do_punktu__zbli¿anie then
              if    ( not statek_f.si__walka__p³ywanie_do_punktu__zbli¿anie )
                and (  prêdkoœæ_zadana_procent_l < samolot_prêdkoœæ_lotu_procent_minimalny_c + Abs( statek_f.si__walka__p³ywanie_do_punktu__prêdkoœæ_zadana_procent_korekta )  ) then
                prêdkoœæ_zadana_procent_l := samolot_prêdkoœæ_lotu_procent_minimalny_c + Abs( statek_f.si__walka__p³ywanie_do_punktu__prêdkoœæ_zadana_procent_korekta );

          end
        else//if statek_f.si_aktywnoœæ in [ sia_Walka__P³ywanie_Do_Punktu ] then
          if    ( statek_f.si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów ] )
            and ( prêdkoœæ_zadana_procent_l < kolizja_oznaczanie_prêdkoœæ_procent_c + kolizja_oznaczanie_prêdkoœæ_procent_c * 0.1 ) then
            prêdkoœæ_zadana_procent_l := kolizja_oznaczanie_prêdkoœæ_procent_c + kolizja_oznaczanie_prêdkoœæ_procent_c * 0.1;


        if    ( statek_f.czy_samolot )
          and ( prêdkoœæ_zadana_procent_l < samolot_prêdkoœæ_lotu_procent_minimalny_c ) then
          prêdkoœæ_zadana_procent_l := samolot_prêdkoœæ_lotu_procent_minimalny_c;


        // Motorówka za wolno zwalnia i zatrzymuje siê za daleko.
        if    ( statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny > 10 )
          and ( statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny > prêdkoœæ_zadana_procent_l * 1.5 ) then
          prêdkoœæ_zadana_procent_l := -prêdkoœæ_zadana_procent_l;


        if    ( statek_f.si_aktywnoœæ = sia_P³ywanie_Do_Punktu__Postój )
          and ( prêdkoœæ_zadana_procent_l = 0 ) then
          begin

            statek_f.si_aktywnoœæ := sia_Postój;
            statek_f.si_aktywnoœæ__polecenie := sia_Postój

          end;
        //---//if    ( statek_f.si_aktywnoœæ = sia_P³ywanie_Do_Punktu__Postój ) (...)

      end
    else//if    ( cel_odleg³oœæ__w_poziomie_l > 0.1 ) (...)
      prêdkoœæ_zadana_procent_l := 0;



    if statek_f.czy_samolot then
      begin

        if statek_f.si_aktywnoœæ = sia_Samolot__L¹dowanie__Hamowanie then
          begin

            // Podczas l¹dowanie nie musi dojechaæ do wskazanego punktu.

            if statek_f.zanurzenie_pu³ap__aktualne > statek_f.si__samolot_zanurzenie_pu³ap__zadane then
              statek_f.Zanurzenie_Zadane_Procent_Ustaw(  -System.Math.Ceil( samolot_prêdkoœæ_lotu_procent_minimalny_c )  )
            else//if statek_f.zanurzenie_pu³ap__aktualne > statek_f.si__samolot_zanurzenie_pu³ap__zadane then
              statek_f.Zanurzenie_Zadane_Procent_Ustaw( 0 );


            if   ( statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie >= 0 ) // -1 oznacza, ¿e samolot l¹duje nie na lotniskowcu. // Gdy l¹duje na lotniskowcu przyziemia gwa³townie aby nie zalecieæ za daleko.
              or (
                       ( statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie < 0 ) // -1 oznacza, ¿e samolot l¹duje nie na lotniskowcu.
                   and ( statek_f.zanurzenie_pu³ap__aktualne < samolot_w_powietrzu_wysokoœæ_od_c * 0.5 ) // Gdy nie l¹duje na lotniskowcu ³agodnie przyziemia.
                 ) then
              if statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny > 0 then
                prêdkoœæ_zadana_procent_l := -statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny // Wyhamowuje.
              else//if statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny > 0 then
                prêdkoœæ_zadana_procent_l := 0;

          end;
        //---//if statek_f.si_aktywnoœæ = sia_Samolot__L¹dowanie__Hamowanie then

      end;
    //---//if statek_f.czy_samolot then
    //else//if statek_f.czy_samolot then
    //if    ( statek_f.czy_lotniskowiec )
    //  and ( statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 )
    //  and ( prêdkoœæ_zadana_procent_l > 0 )
    //  and ( statek_f.lotniskowiec__gotowy_na_przyjêcie_samolotu )
    //  and ( statek_f.prêdkoœæ_maksymalna > 0 ) then
    //  for i_l := 0 to Length( statki_t ) - 1 do
    //    if    ( statki_t[ i_l ] <> nil )
    //      and ( statki_t[ i_l ].czy_samolot )
    //      and ( statki_t[ i_l ].id_statek = statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie ) then
    //      begin
    //
    //        // Zmniejsza prêdkoœæ lotniskowca tak aby wolno lataj¹ce samoloty mog³y wyl¹dowaæ.
    //
    //        if    ( statki_t[ i_l ].si_aktywnoœæ = sia_Samolot__L¹dowanie )
    //          and (  statek_f.prêdkoœæ_maksymalna * prêdkoœæ_zadana_procent_l > statki_t[ i_l ].prêdkoœæ_maksymalna * ( samolot_prêdkoœæ_lotu_procent_minimalny_c - samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c )  ) then
    //          prêdkoœæ_zadana_procent_l :=
    //              100
    //            * statki_t[ i_l ].prêdkoœæ_maksymalna * ( samolot_prêdkoœæ_lotu_procent_minimalny_c - samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c * 2 ) * 0.01 // Prêdkoœæ l¹dowania samolotu.
    //            / statek_f.prêdkoœæ_maksymalna;
    //
    //        Break;
    //
    //      end;
    //    //---//if    ( statki_t[ i_l ] <> nil ) (...)
    {$endregion 'Prêdkoœæ.'}


    // Aby samolot nie rozbija³ siê podczas obni¿ania lotu.
    if    ( statek_f.czy_samolot )
      and ( statek_f.zanurzenie_pu³ap__zadane_procent <= -samolot_prêdkoœæ_lotu_procent_minimalny_c )
      and ( statek_f.AbsolutePosition.Y < statek_f.y_prymityw_najwiêksze * statek_f.prêdkoœæ_maksymalna )
      and ( prêdkoœæ_zadana_procent_l > samolot_prêdkoœæ_lotu_procent_minimalny_c ) then
      prêdkoœæ_zadana_procent_l := samolot_prêdkoœæ_lotu_procent_minimalny_c;


    if    ( prêdkoœæ_zadana_procent_l <> 0 )
      and ( czy_p³yniêcie_w_ty³_l ) then
      prêdkoœæ_zadana_procent_l := -prêdkoœæ_zadana_procent_l;

    if    ( prêdkoœæ_zadana_procent_l = 0 )
      and ( skrêt_zadany_procent_l <> 0 ) then
      skrêt_zadany_procent_l := 0;


    statek_f.Skrêt_Zadany_Procent_Ustaw(  System.Math.Floor( skrêt_zadany_procent_l )  );
    statek_f.Prêdkoœæ_Zadana_Procent_Ustaw(  System.Math.Floor( prêdkoœæ_zadana_procent_l )  );


    if statek_f.czy_lotniskowiec then
      if    (  Abs( statek_f.skrêt_zadany_procent ) <= samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c  )
        and (  Abs( statek_f.skrêt_aktualny_procent ) <= samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c  )
        and ( statek_f.prêdkoœæ_zadana_procent >= 0 )
        and ( statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny >= 0 ) then
        statek_f.lotniskowiec__gotowy_na_przyjêcie_samolotu := true
      else//if    ( statek_f.skrêt_zadany_procent = 0 ) (...)
        statek_f.lotniskowiec__gotowy_na_przyjêcie_samolotu := false;



    if    ( statek_f.czy_samolot )
      and ( statek_f.si_aktywnoœæ in [ sia_Samolot__L¹dowanie__Podchodzenie ] )
      and (
               ( Gra_GLCadencer.TimeMultiplier > samolot_w_powietrzu_wysokoœæ_od_c ) // Przy wiêkszej prêdkoœci gry zwiêksza tolerancjê porównañ wartoœci. Samolot przelatuje wskazany punkt, skrêca i schodzi ze œcie¿ki podejœcia do l¹dowania, potem krzywo przyziemia.
            or ( statek_f.samolot__l¹dowanie__podchodzenie_krok > 1 )
            or ( statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = -1 ) // -1 oznacza, ¿e samolot l¹duje nie na lotniskowcu.
          )
      and ( cel_odleg³oœæ__w_poziomie_l < statek_f.z_prymityw_odleg³oœæ + statek_f.prêdkoœæ_maksymalna ) then
      i_l := 1 // Oznacza, ¿e jest zwiêkszona tolerancja dotarcia do punktu docelowego (nie trzeba dolecieæ bardzo blisko tego punktu).
    else//if    ( statek_f.czy_samolot ) (...)
      i_l := 0; // Trzeba dolecieæ bardzo blisko tego punktu.


    if    ( statek_f.si_aktywnoœæ in [ sia_Walka__P³ywanie_Do_Punktu ] )
      and ( statek_f.si__walka__p³ywanie_do_punktu__zbli¿anie ) then
      begin

        if   ( statek_f.si__cel_odleg³oœæ = -1 )
          or ( statek_f.si__cel_odleg³oœæ > cel_odleg³oœæ__w_poziomie_l ) then
          begin

            // Zbli¿a siê do zadanego punktu (walka).

            if    ( statek_f.si__cel_odleg³oœæ <> -1 )
              and (
                       ( cel_odleg³oœæ__w_poziomie_l < statek_f.z_prymityw_odleg³oœæ )
                    or (  Czas_Miêdzy_W_Sekundach( statek_f.si__walka__p³ywanie_do_punktu__rozpoczêcie_czas_sekundy_i ) > si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_g * 10  )
                  ) then
              begin

                statek_f.si__walka__p³ywanie_do_punktu__zbli¿anie := false;
                statek_f.si__walka__p³ywanie_do_punktu__rozpoczêcie_czas_sekundy_i := Czas_Teraz_W_Sekundach(); // Je¿eli doleci do celu i nie wystrzeli to po pewnym czasie zmieni tryb walki.

              end;
            //---//if statek_f.si__cel_odleg³oœæ <> -1 then

          end
        else//if   ( statek_f.si__cel_odleg³oœæ = -1 ) (...)
          if statek_f.si__cel_odleg³oœæ < cel_odleg³oœæ__w_poziomie_l then
            begin

              // Oddala siê do zadanego punktu (walka).

              if Czas_Miêdzy_W_Sekundach( statek_f.si__walka__p³ywanie_do_punktu__rozpoczêcie_czas_sekundy_i ) > si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_g * 3 then
                begin

                  statek_f.si__walka__p³ywanie_do_punktu__zbli¿anie := false;
                  statek_f.si__walka__p³ywanie_do_punktu__rozpoczêcie_czas_sekundy_i := Czas_Teraz_W_Sekundach(); // Je¿eli doleci do celu i nie wystrzeli to po pewnym czasie zmieni tryb walki.

                end;
              //---//if Czas_Miêdzy_W_Sekundach( statek_f.si__walka__p³ywanie_do_punktu__rozpoczêcie_czas_sekundy_i ) > si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_g * 3 then

            end;
          //---//if statek_f.si__cel_odleg³oœæ < cel_odleg³oœæ__w_poziomie_l then


        statek_f.si__cel_odleg³oœæ := cel_odleg³oœæ__w_poziomie_l;

      end
    else//if    ( statek_f.si_aktywnoœæ in [ sia_Walka__P³ywanie_Do_Punktu ] ) (...)
    //if    ( statek_f.si_aktywnoœæ in [ sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Podchodzenie ] )
    //  and ( cel_odleg³oœæ__w_poziomie_l < statek_f.z_prymityw_odleg³oœæ * statek_f.prêdkoœæ_maksymalna * 0.1 ) then // Aby by³ w stanie zawróciæ w punkcie przygotowania do podejœcia.
    if    ( statek_f.si_aktywnoœæ in [ sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Podchodzenie ] )
      and (
               ( i_l = 1 )
            or ( cel_odleg³oœæ__w_poziomie_l < statek_f.z_prymityw_odleg³oœæ * statek_f.prêdkoœæ_maksymalna * 0.1 ) // Aby by³ w stanie zawróciæ w punkcie przygotowania do podejœcia.
          ) then
      begin

        //if   ( statek_f.si__cel_odleg³oœæ = -1 )
        //  or ( statek_f.si__cel_odleg³oœæ > cel_odleg³oœæ__w_poziomie_l ) then
        if    ( i_l = 0 )
          and (
                   ( statek_f.si__cel_odleg³oœæ = -1 )
                or ( statek_f.si__cel_odleg³oœæ > cel_odleg³oœæ__w_poziomie_l )
              ) then
          begin

            // Zbli¿a siê do zadanego punktu (l¹dowanie).

            statek_f.si__cel_odleg³oœæ := cel_odleg³oœæ__w_poziomie_l;

            if    ( statek_f.si_aktywnoœæ = sia_Samolot__L¹dowanie )
              and ( statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie >= 0 ) then // -1 oznacza, ¿e samolot l¹duje nie na lotniskowcu.
              Lotniskowiec__L¹dowanie__Podchodzenie__Wspó³rzêdne( statek_f ); // Aby przed przyziemieniem na lotniskowcu obni¿y³ wysokoœæ celu.

          end
        else//if    ( i_l = 0 ) (...)
          if    ( statek_f.si_aktywnoœæ = sia_Samolot__L¹dowanie )
            and ( statek_f.si__cel_odleg³oœæ < cel_odleg³oœæ__w_poziomie_l ) then
            begin

              // Je¿eli nie uda siê wyl¹dowaæ to podchodzi do l¹dowania ponownie.

              statek_f.samolot__l¹dowanie__podchodzenie_krok := l¹dowanie__podchodzenie_kroki_iloœæ_c;

              Lotniskowiec__L¹dowanie__Podchodzenie__Wspó³rzêdne( statek_f );

              statek_f.si_aktywnoœæ := sia_Samolot__L¹dowanie__Podchodzenie;
              statek_f.si__cel_odleg³oœæ := -1;

            end
          else//if    ( statek_f.si_aktywnoœæ = sia_Samolot__L¹dowanie ) (...)
            if statek_f.si_aktywnoœæ = sia_Samolot__L¹dowanie__Podchodzenie then
              begin

                // Kolejny punkt podchodzenia do l¹dowania zosta³ osi¹gniêty.

                dec( statek_f.samolot__l¹dowanie__podchodzenie_krok );

                Lotniskowiec__L¹dowanie__Podchodzenie__Wspó³rzêdne( statek_f );

                if statek_f.samolot__l¹dowanie__podchodzenie_krok <= 0 then
                  statek_f.si_aktywnoœæ := sia_Samolot__L¹dowanie;

                statek_f.si__cel_odleg³oœæ := -1;

              end;
            //---//if statek_f.si_aktywnoœæ = sia_Samolot__L¹dowanie__Podchodzenie then

      end
    else//if    ( statek_f.si_aktywnoœæ in [ sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Podchodzenie ] ) (...)
      if    ( statek_f.si_aktywnoœæ = sia_Samolot__L¹dowanie )
        and ( statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie >= 0 ) then
        begin

          // Je¿eli lotniskowiec p³ynie to aktualizuje pozycjê pasa startowego.

          Lotniskowiec__L¹dowanie__Podchodzenie__Wspó³rzêdne( statek_f );

        end;
      //---//if    ( statek_f.si_aktywnoœæ = sia_Samolot__L¹dowanie ) (...)


    if    ( statek_f.czy_samolot )
      and (
               (
                     ( statek_f.si_aktywnoœæ = sia_Samolot__L¹dowanie )
                 and ( cel_odleg³oœæ__w_poziomie_l < statek_f.z_prymityw_odleg³oœæ * statek_f.prêdkoœæ_maksymalna * 0.1 )
               )
            or ( cel_odleg³oœæ__w_pionie_l < statek_f.y_prymityw_najwiêksze * statek_f.prêdkoœæ_maksymalna )
            or ( statek_f.AbsolutePosition.Y < samolot_w_powietrzu_wysokoœæ_od_c )
          ) then
      statek_f.si__p³ywanie_losowe__zmiana_ostatnia_sekundy_i := 0 // Gdy samolot leci szybko aby odpowiednio wczeœnie zacz¹æ hamowanie aby nie zderzyæ siê z 'l¹dem'.
    else//if   ( statek_f.czy_samolot ) (...)
      statek_f.si__p³ywanie_losowe__zmiana_ostatnia_sekundy_i := Czas_Teraz_W_Sekundach();

  end;//---//Funkcja Statek__P³ywanie_Do_Punktu() w SI_Decyduj().

var
  i,
  i_s
    : integer;
  zt_statek : TStatek;
begin//Funkcja SI_Decyduj().

  //
  // Najpierw próbuje unikn¹æ torped.
  // Potem:
  //   je¿eli jest lotniskowcem - przyjmuje samoloty;
  //   je¿eli jest samolotem - próbuje wyl¹dowaæ.
  // Potem pozosta³e decyzje SI.
  //

  for i_s := 0 to Length( statki_t ) - 1 do
    begin

      zt_statek := statki_t[ i_s ];


      if    ( zt_statek <> nil )
        and ( not zt_statek.czy_usun¹æ_statek )
        and ( zt_statek.punkty_¿ycia_aktualne > 0 )
        and (
                 ( zt_statek.si_decyduje )
              or ( zt_statek.si__statek_gracza__p³ywa )
              or ( zt_statek.si__statek_gracza__strzela <> sisgs_Nie )
            ) then
        begin

          if   ( zt_statek.si_decyduje )
            or ( zt_statek.si__statek_gracza__p³ywa ) then
            SI_Aktywnoœæ_Okreœl( zt_statek );



          {$region 'Broñ.'}
          if   ( zt_statek.si_decyduje )
            or ( zt_statek.si__statek_gracza__strzela <> sisgs_Nie ) then
            begin

              if   ( zt_statek.si_decyduje )
                or ( zt_statek.si__statek_gracza__strzela = sisgs_Wszystkim )
                or (
                         ( zt_statek.si__statek_gracza__strzela = sisgs_Tak )
                     and (  not ( Typy_Wspolne.ar_Wszystkie in zt_statek.amunicja_rodzaj_zbiór )  )
                     and (  not ( Typy_Wspolne.ar_Artyleria in zt_statek.amunicja_rodzaj_zbiór )  )
                   ) then
                for i := 0 to Length( zt_statek.artyleria_t ) - 1 do
                  begin

                    //xNx__Broñ__Cel_Wyznacz( zt_statek.artyleria_t[ i ] );
                    Cel_Wyznacz( zt_statek.artyleria_t[ i ] );
                    Broñ__Namiar_Wyznacz( zt_statek.artyleria_t[ i ] );
                    Broñ__Strza³( zt_statek.artyleria_t[ i ] );

                  end;
                //---//for i := 0 to Length( zt_statek.artyleria_t ) - 1 do


              if   ( zt_statek.si_decyduje )
                or ( zt_statek.si__statek_gracza__strzela = sisgs_Wszystkim )
                or (
                         ( zt_statek.si__statek_gracza__strzela = sisgs_Tak )
                     and (  not ( Typy_Wspolne.ar_Wszystkie in zt_statek.amunicja_rodzaj_zbiór )  )
                     and (  not ( Typy_Wspolne.ar_Bomba_G³êbinowa in zt_statek.amunicja_rodzaj_zbiór )  )
                   ) then
                for i := 0 to Length( zt_statek.bomba_g³êbinowa_t ) - 1 do
                  begin

                    //xNx__Broñ__Cel_Wyznacz( zt_statek.bomba_g³êbinowa_t[ i ] );
                    Cel_Wyznacz( zt_statek.bomba_g³êbinowa_t[ i ] );
                    Broñ__Namiar_Wyznacz( zt_statek.bomba_g³êbinowa_t[ i ] );
                    Broñ__Strza³( zt_statek.bomba_g³êbinowa_t[ i ] );

                  end;
                //---//for i := 0 to Length( zt_statek.bomba_g³êbinowa_t ) - 1 do


              if   ( zt_statek.si_decyduje )
                or ( zt_statek.si__statek_gracza__strzela = sisgs_Wszystkim )
                or (
                         ( zt_statek.si__statek_gracza__strzela = sisgs_Tak )
                     and (  not ( Typy_Wspolne.ar_Wszystkie in zt_statek.amunicja_rodzaj_zbiór )  )
                     and (  not ( Typy_Wspolne.ar_Pocisk in zt_statek.amunicja_rodzaj_zbiór )  )
                   ) then
                for i := 0 to Length( zt_statek.dzia³a_t ) - 1 do
                  begin

                    //xNx__Broñ__Cel_Wyznacz( zt_statek.dzia³a_t[ i ] );
                    Cel_Wyznacz( zt_statek.dzia³a_t[ i ] );
                    Broñ__Namiar_Wyznacz( zt_statek.dzia³a_t[ i ] );
                    Broñ__Strza³( zt_statek.dzia³a_t[ i ] );

                  end;
                //---//for i := 0 to Length( zt_statek.dzia³a_t ) - 1 do


              if   ( zt_statek.si_decyduje )
                or ( zt_statek.si__statek_gracza__strzela = sisgs_Wszystkim )
                or (
                         ( zt_statek.si__statek_gracza__strzela = sisgs_Tak )
                     and (  not ( Typy_Wspolne.ar_Wszystkie in zt_statek.amunicja_rodzaj_zbiór )  )
                     and (  not ( Typy_Wspolne.ar_Je¿e_G³êbinowe in zt_statek.amunicja_rodzaj_zbiór )  )
                   ) then
                for i := 0 to Length( zt_statek.je¿e_g³êbinowe_t ) - 1 do
                  begin

                    //xNx__Broñ__Cel_Wyznacz( zt_statek.je¿e_g³êbinowe_t[ i ] );
                    Cel_Wyznacz( zt_statek.je¿e_g³êbinowe_t[ i ] );
                    Broñ__Namiar_Wyznacz( zt_statek.je¿e_g³êbinowe_t[ i ] );
                    Broñ__Strza³( zt_statek.je¿e_g³êbinowe_t[ i ] );

                  end;
                //---//for i := 0 to Length( zt_statek.je¿e_g³êbinowe_t ) - 1 do


              if   ( zt_statek.si_decyduje )
                or ( zt_statek.si__statek_gracza__strzela = sisgs_Wszystkim )
                or (
                         ( zt_statek.si__statek_gracza__strzela = sisgs_Tak )
                     and (  not ( Typy_Wspolne.ar_Wszystkie in zt_statek.amunicja_rodzaj_zbiór )  )
                     and (  not ( Typy_Wspolne.ar_Torpeda in zt_statek.amunicja_rodzaj_zbiór )  )
                   ) then
                for i := 0 to Length( zt_statek.torpedy_wyrzutnie_t ) - 1 do
                  begin

                    //xNx__Broñ__Cel_Wyznacz( zt_statek.torpedy_wyrzutnie_t[ i ] );
                    Cel_Wyznacz( zt_statek.torpedy_wyrzutnie_t[ i ] );
                    Broñ__Namiar_Wyznacz( zt_statek.torpedy_wyrzutnie_t[ i ] );
                    Broñ__Strza³( zt_statek.torpedy_wyrzutnie_t[ i ] );

                  end;
                //---//for i := 0 to Length( zt_statek.torpedy_wyrzutnie_t ) - 1 do

            end;
          //---//if   ( zt_statek.si_decyduje ) (...)
          {$endregion 'Broñ.'}


          if   ( zt_statek.si_decyduje )
            or ( zt_statek.si__statek_gracza__p³ywa ) then
            begin

              if    ( zt_statek.si_aktywnoœæ = sia_Postój )
                and ( zt_statek.prêdkoœæ_aktualna <> 0 ) then
                zt_statek.Prêdkoœæ_Zadana_Procent_Ustaw( 0 )
              else//if    ( zt_statek.si_aktywnoœæ = sia_Postój ) (...)
              if    (  not ( zt_statek.si_aktywnoœæ in [ sia_Brak, sia_Odnawianie_Zasobów__Lotniskowiec, sia_Postój, sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Hamowanie, sia_Samolot__L¹dowanie__Podchodzenie, sia_Samolot__Startowanie ] )  )
                and (
                         (
                               ( zt_statek.si_aktywnoœæ in [ sia_Patrol ] )
                           and ( zt_statek.si__kolizja )
                         )
                      or (  not ( zt_statek.si_aktywnoœæ in [ sia_Patrol ] )  )
                    )
                and ( zt_statek.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = -99 ) // Lotniskowiec w pierwszej kolejnoœci przyjmuje samoloty.
                and (
                         (
                               ( zt_statek.si__kolizja )
                           and (
                                    ( not zt_statek.czy_samolot )
                                 or (
                                          ( zt_statek.czy_samolot )
                                      and ( not zt_statek.czy_samolot__na_lotniskowcu )
                                      and (  not ( zt_statek.si_aktywnoœæ in [ sia_Samolot__Startowanie ] )  )
                                    )
                               )
                         )
                      or ( zt_statek.si_aktywnoœæ in [ sia_Walka ] )
                    ) then
                begin

                  Statek__P³ywanie_Losowe__Zanurzenie_Pu³ap( zt_statek );
                  Statek__P³ywanie_Losowe( zt_statek );
                  Statek__P³ywanie_Losowe__Skrêt( zt_statek );

                end
              else//if    (  not ( zt_statek.si_aktywnoœæ in [ sia_Brak, sia_Odnawianie_Zasobów__Lotniskowiec, sia_Postój, sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Hamowanie, sia_Samolot__L¹dowanie__Podchodzenie, sia_Samolot__Startowanie ] )  ) (...)
              if   ( zt_statek.si_aktywnoœæ in [ sia_Patrol, sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów, sia_P³ywanie_Do_Punktu__Patrol, sia_P³ywanie_Do_Punktu__Postój, sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Hamowanie, sia_Samolot__L¹dowanie__Podchodzenie, sia_Walka__P³ywanie_Do_Punktu, sia_Walka__Torpedy_Ucieczka ] )
                or (
                         ( zt_statek.czy_lotniskowiec )
                     and ( zt_statek.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 ) // Lotniskowiec w pierwszej kolejnoœci przyjmuje samoloty.
                   ) then
                begin

                  if   ( zt_statek.si_aktywnoœæ in [ sia_Walka__P³ywanie_Do_Punktu, sia_Walka__Torpedy_Ucieczka ] )
                    or (
                             ( zt_statek.czy_samolot )
                         and (  not ( zt_statek.si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów ] )  )
                       )
                    or (
                             ( zt_statek.si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Patrol, sia_P³ywanie_Do_Punktu__Postój ] )
                         and ( zt_statek.si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne.W = 0 ) // Wspó³rzêdna Y nie jest okreœlona lub jest dowolna.
                       )
                    or (
                             ( zt_statek.si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów ] )
                         // Musi byæ pozycja absolutna, gdy¿ samolot mo¿e byæ 'potomkiem' lotniskowca a nie sceny.
                         and (   GLS.VectorGeometry.VectorDistance(  GLS.VectorGeometry.VectorMake( zt_statek.AbsolutePosition.X, 0, zt_statek.AbsolutePosition.Z ), GLS.VectorGeometry.VectorMake( zt_statek.si__punkt_zadany__wspó³rzêdne.X, 0, zt_statek.si__punkt_zadany__wspó³rzêdne.Z )  ) > zt_statek.z_prymityw_odleg³oœæ * zt_statek.prêdkoœæ_maksymalna   ) // Y = 0 aby nie uwzglêdniaæ odleg³oœci w pionie.
                       ) then
                    Statek__P³ywanie_Do_Punktu( zt_statek, true )
                  else//if zt_statek.si_aktywnoœæ in [ sia_Walka__Torpedy_Ucieczka ] then
                    Statek__P³ywanie_Do_Punktu( zt_statek );

                end;
              //---//if   ( zt_statek.si_aktywnoœæ in [ sia_Patrol, sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów, sia_P³ywanie_Do_Punktu__Patrol, sia_P³ywanie_Do_Punktu__Postój, sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Hamowanie, sia_Samolot__L¹dowanie__Podchodzenie, sia_Walka__P³ywanie_Do_Punktu, sia_Walka__Torpedy_Ucieczka ] ) (...)

            end;
          //---//if   ( zt_statek.si_decyduje ) (...)

          zt_statek.celownicza_linia.Nodes[ 1 ].AsAffineVector := zt_statek.celownicza_linia.AbsoluteToLocal(  GLS.VectorGeometry.AffineVectorMake( zt_statek.si__punkt_zadany__wspó³rzêdne )  );

        end;
      //---//if    ( zt_statek <> nil ) (...)

    end;
  //---//for i_s := 0 to Length( statki_t ) - 1 do

end;//---//Funkcja SI_Decyduj().

//Funkcja SI__Polecenie__Zak³ócenia_Interpretuj().
function TStatki_Form.SI__Polecenie__Zak³ócenia_Interpretuj( const pokój_rozmów_r_f : TPokój_Rozmów_r ) : boolean;

  //Funkcja Liczba_Odczytaj() w SI__Polecenie__Zak³ócenia_Interpretuj().
  function Liczba_Odczytaj( var napis_f : string; var liczba_f : single ) : boolean;
  var
    i_l : integer;
    zts_l,
    liczba_s,
    separator_dziesiêtny_l
      : string;
  begin

    // P³yñ do punktu( x = 1 234.567; z = 1234,567; y =  ).

    liczba_s := '';
    zts_l := napis_f;

    separator_dziesiêtny_l := Separator_Dziesiêtny__Ustal();

    for i_l := 1 to Length( zts_l ) do
      begin

        Delete( napis_f, 1, 1 );

        if zts_l[ i_l ] = ';' then
          Break
        else//if zts_l[ i_l ] = ';' then
          if   ( zts_l[ i_l ] = separator_dziesiêtny_l )
            or ( zts_l[ i_l ] = ',' )
            or ( zts_l[ i_l ] = '.' )
            or ( zts_l[ i_l ] = '-' ) then
            liczba_s := liczba_s + zts_l[ i_l ]
          else//if   ( zts_l[ i_l ] = ',' ) (...)
            try
              StrToInt( zts_l[ i_l ] );
              liczba_s := liczba_s + zts_l[ i_l ];
            except
            end;
            //---//try

      end;
    //---//for i_l := 1 to Length( zts_l ) do

    try
      liczba_f := String_To__Float( liczba_s );
      Result := true;
    except
      Result := false;
    end;
    //---//try

  end;//---//Funkcja Liczba_Odczytaj() w SI__Polecenie__Zak³ócenia_Interpretuj().

  //Funkcja Czy_Gracz_Posiada_Samolot() w SI__Polecenie__Zak³ócenia_Interpretuj().
  function Czy_Gracz_Posiada_Samolot( const id_gracz_f : integer; var indeks_statku_pytaj¹cego_f : integer ) : boolean;
  var
    i_l : integer;
  begin

    //
    // Funkcja sprawdza czy nadawca posiada samolot.
    //
    // Zwraca prawdê gdy nadawca posiada samolot.
    //
    // Parametry:
    //   id_gracz_f - id_gracz, który wys³a³ polecenie
    //   indeks_statku_pytaj¹cego_f -  indeks dla tabeli statki_t odnosz¹cy siê do statku, z którego zosta³o wys³ane polecenie
    //

    Result := false;

    for i_l := 0 to Length( statki_t ) - 1 do
      if    ( statki_t[ i_l ] <> nil )
        and ( statki_t[ i_l ].id_gracz = id_gracz_f )
        and ( statki_t[ i_l ].czy_samolot ) then
        begin

          indeks_statku_pytaj¹cego_f := i_l; // Indeks statku pytaj¹cego.
          Result := true;
          Break;

        end;
      //---//if    ( statki_t[ i_l ] <> nil ) (...)

  end;//---//Funkcja Czy_Gracz_Posiada_Samolot() w SI__Polecenie__Zak³ócenia_Interpretuj().

  //Funkcja Wyœwietl__Wyœlij_Wiadomoœæ() w SI__Polecenie__Zak³ócenia_Interpretuj().
  procedure Wyœwietl__Wyœlij_Wiadomoœæ( const tcp_klienci_lista__serwer_indeks_f : integer; const pokój_rozmów_r_f_f : TPokój_Rozmów_r; const dopuszczaj_wys³anie_wiadomoœci_do_siebie_f : boolean = false );
  begin

    if czy_gra_lokalna_g then
      Pokój_Rozmów__Wyœwietl_Wiadomoœæ( pokój_rozmów_r_f_f )
    else//if czy_gra_lokalna_g then
      begin

        if   ( pokój_rozmów_r_f_f.odbiorca_rodzaj = pror_Wszyscy )
          or (
                   ( tcp_klienci_lista__serwer_indeks_f <> -99 )
               and (
                        ( pokój_rozmów_r_f_f.id_nadawca = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ tcp_klienci_lista__serwer_indeks_f ]).identyfikator__kd )
                     or (
                              ( pokój_rozmów_r_f_f.odbiorca_rodzaj = pror_Gracz_Jeden )
                          and ( pokój_rozmów_r_f_f.id_odbiorca = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ tcp_klienci_lista__serwer_indeks_f ]).identyfikator__kd )
                        )
                     or (
                              ( pokój_rozmów_r_f_f.odbiorca_rodzaj = pror_Grupa_Jedna )
                          and ( pokój_rozmów_r_f_f.id_odbiorca = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ tcp_klienci_lista__serwer_indeks_f ]).id_grupa__kd )
                        )
                   )

             ) then
          Pokój_Rozmów__Wyœwietl_Wiadomoœæ( pokój_rozmów_r_f_f );

        Pokój_Rozmów__Wyœlij_Wiadomoœæ( pokój_rozmów_r_f_f );

      end;
    //---//if czy_gra_lokalna_g then

  end;//---//Funkcja Wyœwietl__Wyœlij_Wiadomoœæ() w SI__Polecenie__Zak³ócenia_Interpretuj().

  //Funkcja Zak³ócenie_Punkty_¯ycia_Odejmij() w SI__Polecenie__Zak³ócenia_Interpretuj().
  procedure Zak³ócenie_Punkty_¯ycia_Odejmij( const statek_f : TStatek );
  var
    zti_l : integer;
    ztr_l : real;
  begin

    // Obni¿a punkty ¿ycia o procent aktualnych punktów ¿ycia.

    if   ( statek_f = nil )
      or (  not Assigned( statek_f )  )
      or (  Random( 101 ) > 10  ) then
      Exit;

    //ztr_l := statek_f.punkty_¿ycia_aktualne * 10 * 0.01;
    ztr_l := statek_f.punkty_¿ycia_aktualne * 0.1; // Uproszczone obliczenia.

    statek_f.Punkty_¯ycia__Zmieñ( -ztr_l );


    zti_l := Gra_Statystyki_R_Identyfikator_ZnajdŸ( statek_f.id_gracz );

    if zti_l >= 0 then
    begin

      gra_statystyki_r_t[ zti_l ].obra¿enia_otrzymane__z_zak³óceñ__gs := gra_statystyki_r_t[ zti_l ].obra¿enia_otrzymane__z_zak³óceñ__gs + ztr_l;

    end;
    //---//if zti_l >= 0 then

  end;//---//Funkcja Zak³ócenie_Punkty_¯ycia_Odejmij() w SI__Polecenie__Zak³ócenia_Interpretuj().

label
  zak³ócanie_próba_nieudana_label_goto;

var
  ztb,
  polecenia_dla__samolotu_l,
  polecenia_dla__statku_l,
  polecenia_od__samolotu_l,
  polecenia_od__statku_l,
  sprawdzany_gracz_posiada__samolot_l,
  sprawdzany_gracz_posiada__statek_l
    : boolean;
  i,
  j,
  zti,
  id_grupa__nadawca_l,
  tcp_klienci_lista__serwer_indeks_l
    : integer;
  id_gracz_statku_pytanego_l : variant; // Do kogo jest wysy³ane polecenie.
  zts,
  odpowiedŸ_l,
  si_polecenie_l,
  si_polecenie_kopia_dla_potwierdzenia_l // SI zg³asza jakie polecenie otrzyma³a.
    : string;
  pokój_rozmów_odpowiedŸ_r_l : TPokój_Rozmów_r;
  si_strzelanie_tryb_kopia_l : TSi_Strzelanie_Tryb;
begin//Funkcja SI__Polecenie__Zak³ócenia_Interpretuj().

  //
  // Funkcja sprawdza czy w napisie znajduje siê polecenie dla SI i je interpretuje,
  // obs³uguje próby zak³ócania statków.
  //
  // Zwraca prawdê gdy w napisie znajduje siê polecenie dla SI.
  //
  // Parametry:
  //   pokój_rozmów_r_f
  //

  Result := Pos( si_pokój_rozmów__polecenie_symbol_c, pokój_rozmów_r_f.wiadomoœæ ) = 1;

  if not Result then // Nie jest to polecenie dla SI.
    Exit;

  if czy_klient_g then // Klient nie interpretuje poleceñ dla SI.
    Exit;


  id_grupa__nadawca_l := -99;

  for i := 0 to Length( statki_t ) - 1 do
    if    ( statki_t[ i ] <> nil )
      and ( statki_t[ i ].id_gracz = pokój_rozmów_r_f.id_nadawca ) then
      begin

        id_grupa__nadawca_l := statki_t[ i ].id_grupa;
        Break;

      end;
    //---//if    ( statki_t[ i ] <> nil ) (...)

  if id_grupa__nadawca_l = -99 then // Nie uda³o siê okreœliæ id_grupa nadawcy. Mo¿e byæ to klient, który nie uczestniczy w grze.
    Exit;


  for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
    if    ( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd = pokój_rozmów_r_f.id_nadawca )
      and ( not TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).w_grze__kd ) then
      Exit; // Klient, który nie uczestniczy w grze nie mo¿e rozmawiaæ z SI.


  id_gracz_statku_pytanego_l := Unassigned();
  polecenia_dla__samolotu_l := false;
  polecenia_dla__statku_l := false;
  polecenia_od__samolotu_l := false;
  polecenia_od__statku_l := false;


  tcp_klienci_lista__serwer_indeks_l := -99;

  for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
    if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd = serwer_peer_port_c then
      begin

        tcp_klienci_lista__serwer_indeks_l := i;
        Break;

      end;
    //---//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd = serwer_peer_port_c then


  si_polecenie_l := pokój_rozmów_r_f.wiadomoœæ;
  Delete(  si_polecenie_l, 1, Length( si_pokój_rozmów__polecenie_symbol_c )  );
  si_polecenie_kopia_dla_potwierdzenia_l := si_polecenie_l;

  if Pos( si_pokój_rozmów__polecenie_symbol__samolot_c, si_polecenie_l ) > 0 then
    begin

      polecenia_dla__samolotu_l := true;
      si_polecenie_l := StringReplace( si_polecenie_l, si_pokój_rozmów__polecenie_symbol__samolot_c, '', [ rfReplaceAll ] );

    end;
  //---//if Pos( si_pokój_rozmów__polecenie_symbol__samolot_c, si_polecenie_l ) > 0 then

  if Pos( si_pokój_rozmów__polecenie_symbol__statek_c, si_polecenie_l ) > 0 then
    begin

      polecenia_dla__statku_l := true;
      si_polecenie_l := StringReplace( si_polecenie_l, si_pokój_rozmów__polecenie_symbol__statek_c, '', [ rfReplaceAll ] );

    end;
  //---//if Pos( si_pokój_rozmów__polecenie_symbol__statek_c, si_polecenie_l ) > 0 then


  if Pos( si_pokój_rozmów__polecenie_symbol__samolot_nadawca_c, si_polecenie_l ) > 0 then
    begin

      polecenia_od__samolotu_l := true;
      si_polecenie_l := StringReplace( si_polecenie_l, si_pokój_rozmów__polecenie_symbol__samolot_nadawca_c, '', [ rfReplaceAll ] );

    end;
  //---//if Pos( si_pokój_rozmów__polecenie_symbol__samolot_nadawca_c, si_polecenie_l ) > 0 then

  if Pos( si_pokój_rozmów__polecenie_symbol__statek_nadawca_c, si_polecenie_l ) > 0 then
    begin

      polecenia_od__statku_l := true;
      si_polecenie_l := StringReplace( si_polecenie_l, si_pokój_rozmów__polecenie_symbol__statek_nadawca_c, '', [ rfReplaceAll ] );

    end;
  //---//if Pos( si_pokój_rozmów__polecenie_symbol__statek_nadawca_c, si_polecenie_l ) > 0 then


  {$region 'Wyszukuje identyfikator adresata polecenia.'}
  if pokój_rozmów_r_f.odbiorca_rodzaj = pror_Gracz_Jeden then
    begin

      id_gracz_statku_pytanego_l := pokój_rozmów_r_f.id_odbiorca;


      j := Pos( si_pokój_rozmów__polecenie_symbol__separator_identyfikatora_c, si_polecenie_l );

      if j > 0 then
        Delete( si_polecenie_l, j, Length( si_polecenie_l )  ); // Usuwa czêœæ polecenia dotycz¹c¹ adresata.

    end
  else//if pokój_rozmów_r_f.odbiorca_rodzaj = pror_Gracz_Jeden then
    begin

      j := Pos( si_pokój_rozmów__polecenie_symbol__separator_identyfikatora_c, si_polecenie_l );

      if j > 0 then
        begin

          zts := si_polecenie_l;
          Delete( zts, 1, j );
          zts := Trim( zts );
          zts := StringReplace( zts, ' ', '', [ rfReplaceAll ] );
          zts := StringReplace( zts, '.', '', [ rfReplaceAll ] ); // Kropka na koñcu wiadomoœci.

          try
            zti := StrToInt( zts );
            ztb := true;
          except
            ztb := false;
          end;
          //---//try


          if ztb then
            begin

              ztb := false;

              for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
                if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd = zti then
                  begin

                    // Adresat wskazany poprzez id.

                    id_gracz_statku_pytanego_l := zti;
                    Break;

                  end;
                //---//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd = zti then

            end
          else//if ztb then
            begin

              zts := si_polecenie_l;
              Delete( zts, 1, j );

              ztb := false;

              if Trim( zts ) <> '' then
                for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
                  if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).nazwa__kd = zts then
                    begin

                      // Adresat wskazany poprzez nazwê.

                      id_gracz_statku_pytanego_l := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd;
                      ztb := true;
                      Break;

                    end;
                  //---//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).nazwa__kd = zts then


              if    ( not ztb )
                and (  Length( zts ) > 1  )
                and ( zts[ 1 ] = ' ' ) then
                begin

                  // Je¿eli miêdzy dwukropkiem a sprawdzanym napisem jest spacja.

                  Delete( zts, 1, 1 );

                  if Trim( zts ) <> '' then
                    for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
                      if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).nazwa__kd = zts then
                        begin

                          // Adresat wskazany poprzez nazwê.

                          id_gracz_statku_pytanego_l := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd;
                          ztb := true;
                          Break;

                        end;
                      //---//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).nazwa__kd = zts then

                end;
              //---//if    ( not ztb ) (...)


              if not ztb then
                begin

                  zts := si_polecenie_l;
                  Delete( zts, 1, j );

                  if    (  Length( zts ) > 0  )
                    and (  zts[ Length( zts ) ] = '.'  ) then
                    begin

                      // Je¿eli na koñcu jest kropka.

                      Delete(  zts, Length( zts ), 1  );

                      if Trim( zts ) <> '' then
                        for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
                          if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).nazwa__kd = zts then
                            begin

                              // Adresat wskazany poprzez nazwê.

                              id_gracz_statku_pytanego_l := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd;
                              ztb := true;
                              Break;

                            end;
                          //---//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).nazwa__kd = zts then


                      if    ( not ztb )
                        and (  Length( zts ) > 1  )
                        and ( zts[ 1 ] = ' ' ) then
                        begin

                          // Je¿eli miêdzy dwukropkiem a sprawdzanym napisem jest spacja.

                          Delete( zts, 1, 1 );

                          if Trim( zts ) <> '' then
                            for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
                              if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).nazwa__kd = zts then
                                begin

                                  // Adresat wskazany poprzez nazwê.

                                  id_gracz_statku_pytanego_l := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd;
                                  ztb := true;
                                  Break;

                                end;
                              //---//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).nazwa__kd = zts then

                        end;
                      //---//if    ( not ztb ) (...)

                    end;
                  //---//if    (  Length( zts ) > 0  ) (...)

                end;
              //---//if ztb then

            end;
          //---//if ztb then


          if id_gracz_statku_pytanego_l <> Unassigned() then
            Delete( si_polecenie_l, j, Length( si_polecenie_l )  ); // Usuwa czêœæ polecenia dotycz¹c¹ adresata.

        end;
      //---//if j > 0 then

    end;
  //---//if pokój_rozmów_r_f.odbiorca_rodzaj = pror_Gracz_Jeden then


  if    ( id_gracz_statku_pytanego_l = Unassigned() )
    and (
             (  Pos( pokój_rozmów__si_polecenie__l¹dowanie__zezwolenie_proœba__kurs_aktualny_c, si_polecenie_l ) = 1  )
          or (  Pos( pokój_rozmów__si_polecenie__l¹dowanie__zezwolenie_proœba__kurs_standardowy_c, si_polecenie_l ) = 1  )
        )
    and (  Czy_Gracz_Posiada_Samolot( pokój_rozmów_r_f.id_nadawca, zti )  )
    and ( zti >= 0 )
    and (  zti <= Length( statki_t ) - 1  )
    and ( statki_t[ zti ] <> nil ) then
    begin

      // Je¿eli nie sprecyzowano, na którym lotniskowcu chce siê wyl¹dowaæ spróbuje wybraæ jeden z dostêpnych (najbli¿szy).

      // zti - tutaj jako indeks statku pytaj¹cego.

      if statki_t[ zti ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 then
        begin

          // Aby przypomnia³ aktualn¹ pozycjê wczeœniej przydzielonego lotniskowca.

          for i := 0 to Length( statki_t ) - 1 do
            if    ( statki_t[ i ] <> nil )
              and ( statki_t[ i ].id_statek = statki_t[ zti ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie ) then
              begin

                id_gracz_statku_pytanego_l := statki_t[ i ].id_gracz;
                Break;

              end;
            //---//if    ( statki_t[ i ] <> nil ) (...)

        end
      else//if statki_t[ zti ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 then (...)
        begin

          // Wyszukuje najbli¿szy lotniskowiec.

          j := -99;

          for i := 0 to Length( statki_t ) - 1 do
            if    ( statki_t[ i ] <> nil )
              and ( // Tylko statki aktualnie kierowane przez SI.
                       ( statki_t[ i ].si_decyduje )
                    or ( statki_t[ i ].si__statek_gracza__p³ywa )
                  )
              and ( statki_t[ i ].czy_lotniskowiec )
              and ( statki_t[ i ].id_statek__lotniskowiec__ma_samolot_na_pok³adzie = -99 )
              and (
                       ( statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = -99 )
                    or ( statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = statki_t[ zti ].id_statek )
                  ) then
              if   ( j = -99 )
                or (  j > statki_t[ i ].DistanceTo( statki_t[ zti ] )  ) then
                begin

                  id_gracz_statku_pytanego_l := statki_t[ i ].id_gracz;
                  j := Round( statki_t[ i ].DistanceTo( statki_t[ zti ] )  );

                end;
              //---//if   ( j = -99 ) (...)

        end;
      //---//if statki_t[ zti ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 then (...)

    end;
  //---//if    ( id_gracz_statku_pytanego_l = Unassigned() ) (...)
  {$endregion 'Wyszukuje identyfikator adresata polecenia.'}


  for i := 0 to Length( statki_t ) - 1 do
    if    ( statki_t[ i ] <> nil )
      and (    ( Zak³ócanie__Graczy_Nie_SI_Dozwolone_CheckBox.Checked )
               // Tylko statki aktualnie kierowane przez SI.
            or ( statki_t[ i ].si_decyduje )
            or ( statki_t[ i ].si__statek_gracza__p³ywa )
            or (  Pos( pokój_rozmów__si_polecenie__l¹dowanie__przerwij_c, si_polecenie_l ) = 1  ) // To polecenie dotyczy wszystkich statków aby wyzerowaæ wartoœci zmiennych.
          ) then
      begin

        // Je¿eli odbiorc¹ wiadomoœci jest statek kierowany przez SI.
        // Mo¿na zak³ócaæ graczy.
        // Zerowanie wartoœci zmiennych.

        if   (
                   ( id_gracz_statku_pytanego_l = Unassigned() )
               and (
                        ( pokój_rozmów_r_f.odbiorca_rodzaj = pror_Wszyscy )
                     or (
                              ( pokój_rozmów_r_f.odbiorca_rodzaj = pror_Gracz_Jeden )
                          and ( statki_t[ i ].id_gracz = pokój_rozmów_r_f.id_odbiorca )
                        )
                     or (
                              ( pokój_rozmów_r_f.odbiorca_rodzaj = pror_Grupa_Jedna )
                          and ( statki_t[ i ].id_grupa = pokój_rozmów_r_f.id_odbiorca )
                        )
                   )
             )
          or (
                   ( id_gracz_statku_pytanego_l <> Unassigned() )
               and ( statki_t[ i ].id_gracz = id_gracz_statku_pytanego_l )
             ) then
          begin

            // Ustala czy sprawdzany gracz posiada statek i samolot.
            sprawdzany_gracz_posiada__samolot_l := false;
            sprawdzany_gracz_posiada__statek_l := false;


            for j := 0 to Length( statki_t ) - 1 do
              if    ( statki_t[ j ] <> nil )
                and ( statki_t[ j ].id_gracz = statki_t[ i ].id_gracz ) then
                begin

                  if    ( not sprawdzany_gracz_posiada__samolot_l )
                    and ( statki_t[ j ].czy_samolot ) then
                    sprawdzany_gracz_posiada__samolot_l := true;

                  if    ( not sprawdzany_gracz_posiada__statek_l )
                    and ( not statki_t[ j ].czy_samolot ) then
                    sprawdzany_gracz_posiada__statek_l := true;


                  if    ( sprawdzany_gracz_posiada__samolot_l )
                    and ( sprawdzany_gracz_posiada__statek_l ) then
                    Break;

                end;
              //---//if    ( statki_t[ j ] <> nil ) (...)
            //---// Ustala czy sprawdzany gracz posiada statek i samolot.

            if   ( // Polecenie nie precyzuje czy jest skierowane do statku czy do samolotu albo gracz posiada tylko statek albo tylko samolot.
                       ( not polecenia_dla__samolotu_l )
                   and ( not polecenia_dla__statku_l )
                 )
              or (
                       ( polecenia_dla__samolotu_l )
                   and ( statki_t[ i ].czy_samolot )
                 )
              or (
                       ( polecenia_dla__statku_l )
                   and ( not statki_t[ i ].czy_samolot )
                 )
              or (
                       ( // Je¿eli polecenie wys³ano do jednego gracza z b³êdnym sprecyzowaniem czy dotyczy statku czy samolotu.
                            (
                                  ( id_gracz_statku_pytanego_l = Unassigned() )
                              and ( pokój_rozmów_r_f.odbiorca_rodzaj = pror_Gracz_Jeden )
                            )
                         or (
                                  ( id_gracz_statku_pytanego_l <> Unassigned() )
                              and ( statki_t[ i ].id_gracz = id_gracz_statku_pytanego_l )
                            )
                       )
                   and (
                            ( // Polecenie dotyczy samolotu ale gracz nie posiada samolotu.
                                  ( polecenia_dla__samolotu_l )
                              and ( not sprawdzany_gracz_posiada__samolot_l )
                            )
                         or ( // Polecenie dotyczy statku ale gracz nie posiada statku.
                                  ( polecenia_dla__statku_l )
                              and ( not sprawdzany_gracz_posiada__statek_l )
                            )
                       )
                 ) then
              begin

                pokój_rozmów_odpowiedŸ_r_l.id_nadawca := statki_t[ i ].id_gracz;

                odpowiedŸ_l := '<' + t³umaczenie_komunikaty_r.s³owo__ktoœ + ' [' + t³umaczenie_komunikaty_r.ekran_napis__id__skrót + ' ' + IntToStr( pokój_rozmów_r_f.id_nadawca ) + ']> ';

                for j := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
                  if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ j ]).identyfikator__kd = pokój_rozmów_r_f.id_nadawca then
                    begin

                      odpowiedŸ_l :=
                        TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ j ]).nazwa__kd + ' [' + t³umaczenie_komunikaty_r.ekran_napis__id__skrót + ' ' + IntToStr( pokój_rozmów_r_f.id_nadawca ) +
                        ' ' + t³umaczenie_komunikaty_r.ekran_napis__grupa__skrót + ' ' +
                        IntToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ j ]).id_grupa__kd ) + '] ';

                      Break;

                    end;
                  //---//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ j ]).identyfikator__kd = pokój_rozmów_r_f.id_nadawca then


                if statki_t[ i ].id_grupa <> id_grupa__nadawca_l then
                  begin

                    {$region 'Próba zak³ócania statku.'}
                    // Polecenie wys³ane tylko do jednego gracza (je¿eli ma lotniskowiec i samolot to tylko do wskazanego statku).
                    if    ( id_gracz_statku_pytanego_l = statki_t[ i ].id_gracz )
                      and ( pokój_rozmów_r_f.odbiorca_rodzaj = pror_Gracz_Jeden )
                      and (
                               // Polecenie nie dotyczy samolotu ani statku i gracz posiada tylko samolot albo tylko statek.
                               (
                                     ( not polecenia_dla__samolotu_l )
                                 and ( not polecenia_dla__statku_l )
                                 and ( not sprawdzany_gracz_posiada__samolot_l )
                                 and ( sprawdzany_gracz_posiada__statek_l )
                               )
                            or (
                                     ( not polecenia_dla__samolotu_l )
                                 and ( not polecenia_dla__statku_l )
                                 and ( sprawdzany_gracz_posiada__samolot_l )
                                 and ( not sprawdzany_gracz_posiada__statek_l )
                               )

                               // Polecenie dotyczy tylko samolotu albo tylko statku i gracz posiada samolot i statek.
                            or (
                                     ( polecenia_dla__samolotu_l )
                                 and ( not polecenia_dla__statku_l )
                                 and ( sprawdzany_gracz_posiada__samolot_l )
                               )
                            or (
                                     ( not polecenia_dla__samolotu_l )
                                 and ( polecenia_dla__statku_l )
                                 and ( sprawdzany_gracz_posiada__statek_l )
                               )
                          ) then
                      begin

                        if Czas_Miêdzy_W_Sekundach( statki_t[ i ].zak³ócanie__czas_próba_ostatnia_sekundy_i ) >= zak³ócanie__czas_do_ponownej_próby_sekundy_g then
                          begin

                            statki_t[ i ].zak³ócanie__czas_próba_ostatnia_sekundy_i := Czas_Teraz_W_Sekundach();


                            // Je¿eli gracz ma statek i samolot to dodaje dopisek informuj¹cy, ¿e wiadomoœæ wys³a³ samolot.
                            if statki_t[ i ].czy_samolot then
                              odpowiedŸ_l := odpowiedŸ_l +
                                Trim( si_pokój_rozmów__polecenie_symbol__samolot_c ) + ' ';


                            pokój_rozmów_odpowiedŸ_r_l.id_odbiorca := statki_t[ i ].id_grupa;
                            pokój_rozmów_odpowiedŸ_r_l.data_czas_wys³ania := Now();
                            pokój_rozmów_odpowiedŸ_r_l.odbiorca_rodzaj := pror_Grupa_Jedna;
                            pokój_rozmów_odpowiedŸ_r_l.wiadomoœæ := odpowiedŸ_l +
                              //t³umaczenie_komunikaty_r.si__odpowiedŸ__próbuje_mnie_zak³ócaæ + ' (' + si_polecenie_l + ').';
                              t³umaczenie_komunikaty_r.si__odpowiedŸ__próbuje_mnie_zak³ócaæ + ' (' + StringReplace( si_polecenie_l, si_pokój_rozmów__znacznik_symbol__si_zak³óca_c, '', [ rfReplaceAll ] ) + ').';

                            if pokój_rozmów_odpowiedŸ_r_l.id_nadawca <= si_peer_port_c then
                              pokój_rozmów_odpowiedŸ_r_l.wiadomoœæ := pokój_rozmów_odpowiedŸ_r_l.wiadomoœæ + si_pokój_rozmów__znacznik_symbol__si_zak³óca_c;

                            Wyœwietl__Wyœlij_Wiadomoœæ( tcp_klienci_lista__serwer_indeks_l, pokój_rozmów_odpowiedŸ_r_l );


                            if Random( 101 ) <= zak³ócenie__prawdopodobieñstwo_sukcesu_procent_g then
                              begin

                                // Zak³ócanie udane.

                                statki_t[ i ].Uszkodzenia_Dodaj();
                                Zak³ócenie_Punkty_¯ycia_Odejmij( statki_t[ i ] );


                                pokój_rozmów_odpowiedŸ_r_l.data_czas_wys³ania := Now();
                                pokój_rozmów_odpowiedŸ_r_l.odbiorca_rodzaj := pror_Wszyscy;

                                case Random( 3 ) of
                                    0 : pokój_rozmów_odpowiedŸ_r_l.wiadomoœæ := odpowiedŸ_l +
                                        t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³ócanie__udane__1;

                                    1 : pokój_rozmów_odpowiedŸ_r_l.wiadomoœæ := odpowiedŸ_l +
                                        t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³ócanie__udane__2;

                                    2 : pokój_rozmów_odpowiedŸ_r_l.wiadomoœæ := odpowiedŸ_l +
                                        t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³ócanie__udane__3;
                                  end;
                                //---//case Random( 3 ) of

                                //if pokój_rozmów_odpowiedŸ_r_l.id_nadawca <= si_peer_port_c then
                                //  pokój_rozmów_odpowiedŸ_r_l.wiadomoœæ := pokój_rozmów_odpowiedŸ_r_l.wiadomoœæ + si_pokój_rozmów__znacznik_symbol__si_zak³óca_c; //???

                                Wyœwietl__Wyœlij_Wiadomoœæ( tcp_klienci_lista__serwer_indeks_l, pokój_rozmów_odpowiedŸ_r_l );


                                zti := Gra_Statystyki_R_Identyfikator_ZnajdŸ( pokój_rozmów_r_f.id_nadawca );

                                if zti >= 0 then
                                  begin

                                    gra_statystyki_r_t[ zti ].zak³ócenia__udane__gs := gra_statystyki_r_t[ zti ].zak³ócenia__udane__gs + 1;

                                  end;
                                //---//if zti >= 0 then

                              end
                            else//if Random( 101 ) <= zak³ócenie__prawdopodobieñstwo_sukcesu_procent_g then
                              begin

                                // Zak³ócanie nieudane.

                                pokój_rozmów_odpowiedŸ_r_l.id_odbiorca := pokój_rozmów_r_f.id_nadawca;
                                pokój_rozmów_odpowiedŸ_r_l.data_czas_wys³ania := Now();
                                pokój_rozmów_odpowiedŸ_r_l.odbiorca_rodzaj := pror_Gracz_Jeden;

                                case Random( 3 ) of
                                    0 : pokój_rozmów_odpowiedŸ_r_l.wiadomoœæ := odpowiedŸ_l +
                                        t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³ócanie__nie_udane__1;

                                    1 : pokój_rozmów_odpowiedŸ_r_l.wiadomoœæ := odpowiedŸ_l +
                                        t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³ócanie__nie_udane__2;

                                    2 : pokój_rozmów_odpowiedŸ_r_l.wiadomoœæ := odpowiedŸ_l +
                                        t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³ócanie__nie_udane__3;
                                  end;
                                //---//case Random( 3 ) of

                                if pokój_rozmów_odpowiedŸ_r_l.id_nadawca <= si_peer_port_c then
                                  pokój_rozmów_odpowiedŸ_r_l.wiadomoœæ := pokój_rozmów_odpowiedŸ_r_l.wiadomoœæ + si_pokój_rozmów__znacznik_symbol__si_zak³óca_c;

                                Wyœwietl__Wyœlij_Wiadomoœæ( tcp_klienci_lista__serwer_indeks_l, pokój_rozmów_odpowiedŸ_r_l, true );


                                goto zak³ócanie_próba_nieudana_label_goto;

                              end;
                            //---//if Random( 101 ) <= zak³ócenie__prawdopodobieñstwo_sukcesu_procent_g then

                          end
                        else//if Czas_Miêdzy_W_Sekundach( statki_t[ i ].zak³ócanie__czas_próba_ostatnia_sekundy_i ) >= zak³ócanie__czas_do_ponownej_próby_sekundy_g then
                          begin

                            // Zak³ócanie nieudane.

                            // Wylicza uszkodzenia dla gracza, który próbowa³ zak³ócaæ.

                            zak³ócanie_próba_nieudana_label_goto:
                            if Random( 101 ) <= zak³ócenie__prawdopodobieñstwo_sukcesu_procent_g then
                              begin

                                // Sprawdza ile statków ma gracz.
                                zti := 0;

                                for j := 0 to Length( statki_t ) - 1 do
                                  if    ( statki_t[ j ] <> nil )
                                    and ( statki_t[ j ].id_gracz = pokój_rozmów_r_f.id_nadawca )
                                    and ( statki_t[ j ].punkty_¿ycia_aktualne > 0 ) then
                                    inc( zti );
                                //---// Sprawdza ile statków ma gracz.

                                // Je¿eli gracz ma kilka statków to losuje statek.
                                zti := Random( zti ) + 1;

                                for j := 0 to Length( statki_t ) - 1 do
                                  if    ( statki_t[ j ] <> nil )
                                    and ( statki_t[ j ].id_gracz = pokój_rozmów_r_f.id_nadawca )
                                    and ( statki_t[ j ].punkty_¿ycia_aktualne > 0 ) then
                                    begin

                                      dec( zti );

                                      if zti <= 0 then
                                        begin

                                          statki_t[ j ].Uszkodzenia_Dodaj();
                                          Zak³ócenie_Punkty_¯ycia_Odejmij( statki_t[ j ] );


                                          zti := Gra_Statystyki_R_Identyfikator_ZnajdŸ( statki_t[ j ].id_gracz );

                                          if zti >= 0 then
                                            begin

                                              gra_statystyki_r_t[ zti ].zak³ócenia__odbite__w³asne__gs := gra_statystyki_r_t[ zti ].zak³ócenia__odbite__w³asne__gs + 1;

                                            end;
                                          //---//if zti >= 0 then

                                          Break;

                                        end;
                                      //---//if zti <= 0 then

                                    end;
                                  //---//if    ( statki_t[ j ] <> nil ) (...)
                                //---// Je¿eli gracz ma kilka statków to losuje statek.


                                pokój_rozmów_odpowiedŸ_r_l.id_nadawca := statki_t[ i ].id_gracz;
                                pokój_rozmów_odpowiedŸ_r_l.id_odbiorca := pokój_rozmów_r_f.id_nadawca;
                                pokój_rozmów_odpowiedŸ_r_l.data_czas_wys³ania := Now();
                                pokój_rozmów_odpowiedŸ_r_l.odbiorca_rodzaj := pror_Wszyscy;

                                case Random( 3 ) of
                                    0 : pokój_rozmów_odpowiedŸ_r_l.wiadomoœæ := odpowiedŸ_l +
                                        t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³ócanie__odbite__1;

                                    1 : pokój_rozmów_odpowiedŸ_r_l.wiadomoœæ := odpowiedŸ_l +
                                        t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³ócanie__odbite__2;

                                    2 : pokój_rozmów_odpowiedŸ_r_l.wiadomoœæ := odpowiedŸ_l +
                                        t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³ócanie__odbite__3;
                                  end;
                                //---//case Random( 3 ) of

                                if pokój_rozmów_odpowiedŸ_r_l.id_nadawca <= si_peer_port_c then
                                  pokój_rozmów_odpowiedŸ_r_l.wiadomoœæ := pokój_rozmów_odpowiedŸ_r_l.wiadomoœæ + si_pokój_rozmów__znacznik_symbol__si_zak³óca_c;

                                Wyœwietl__Wyœlij_Wiadomoœæ( tcp_klienci_lista__serwer_indeks_l, pokój_rozmów_odpowiedŸ_r_l, true );


                                zti := Gra_Statystyki_R_Identyfikator_ZnajdŸ( statki_t[ i ].id_gracz );

                                if zti >= 0 then
                                  begin

                                    gra_statystyki_r_t[ zti ].zak³ócenia__odbite__cudze__gs := gra_statystyki_r_t[ zti ].zak³ócenia__odbite__cudze__gs + 1;

                                  end;
                                //---//if zti >= 0 then

                              end;
                            //---//if Random( 101 ) <= zak³ócenie__prawdopodobieñstwo_sukcesu_procent_g then


                            zti := Gra_Statystyki_R_Identyfikator_ZnajdŸ( pokój_rozmów_r_f.id_nadawca );

                            if zti >= 0 then
                              begin

                                gra_statystyki_r_t[ zti ].zak³ócenia__nieudane__gs := gra_statystyki_r_t[ zti ].zak³ócenia__nieudane__gs + 1;

                              end;
                            //---//if zti >= 0 then

                          end;
                        //---//if Czas_Miêdzy_W_Sekundach( statki_t[ i ].zak³ócanie__czas_próba_ostatnia_sekundy_i ) >= zak³ócanie__czas_do_ponownej_próby_sekundy_g then

                      end;
                    //---//if    ( id_gracz_statku_pytanego_l = statki_t[ i ].id_gracz ) (...)
                    {$endregion 'Próba zak³ócania statku.'}

                  end
                else//if statki_t[ i ].id_grupa <> id_grupa__nadawca_l then
                  if   ( statki_t[ i ].si_decyduje ) // Tylko statki aktualnie kierowane przez SI.
                    or ( statki_t[ i ].si__statek_gracza__p³ywa )
                    or (  Pos( pokój_rozmów__si_polecenie__l¹dowanie__przerwij_c, si_polecenie_l ) = 1  ) then // To polecenie dotyczy wszystkich statków aby wyzerowaæ wartoœci zmiennych.
                    begin

                      pokój_rozmów_odpowiedŸ_r_l.id_odbiorca := statki_t[ i ].id_grupa;
                      pokój_rozmów_odpowiedŸ_r_l.data_czas_wys³ania := Now();
                      pokój_rozmów_odpowiedŸ_r_l.odbiorca_rodzaj := pror_Grupa_Jedna;
                      pokój_rozmów_odpowiedŸ_r_l.wiadomoœæ := odpowiedŸ_l +
                        t³umaczenie_komunikaty_r.si__odpowiedŸ__wys³a³_polecenie + ': ' + si_polecenie_kopia_dla_potwierdzenia_l + '.' + si_pokój_rozmów__znacznik_symbol__wys³a³_polecenie_c;

                      Wyœwietl__Wyœlij_Wiadomoœæ( tcp_klienci_lista__serwer_indeks_l, pokój_rozmów_odpowiedŸ_r_l );


                      odpowiedŸ_l := '';

                      {$region 'si_aktywnoœæ.'}
                      if si_polecenie_l = pokój_rozmów__si_polecenie__jak_tam_c then
                        begin

                          if statki_t[ i ].si_aktywnoœæ in [ sia_Patrol, sia_P³ywanie_Do_Punktu__Patrol, sia_P³ywanie_Do_Punktu__Postój, sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Hamowanie, sia_Samolot__L¹dowanie__Podchodzenie, sia_Samolot__Startowanie ] then
                            begin

                              case Random( 4 ) of
                                  0 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__patrol__1;
                                  1 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__patrol__2;
                                  2 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__patrol__3;
                                  3 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__patrol__4;
                                end;
                              //---//case Random( 3 ) of

                            end
                          else//if statki_t[ i ].si_aktywnoœæ in [ sia_Patrol, sia_P³ywanie_Do_Punktu__Patrol, sia_P³ywanie_Do_Punktu__Postój, sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Hamowanie, sia_Samolot__L¹dowanie__Podchodzenie, sia_Samolot__Startowanie ] then
                          if statki_t[ i ].si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów ] then
                            begin

                              case Random( 4 ) of
                                  0 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__p³ywanie_do_punktu__odnawianie_zasobów__1;
                                  1 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__p³ywanie_do_punktu__odnawianie_zasobów__2;
                                  2 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__p³ywanie_do_punktu__odnawianie_zasobów__3;
                                  3 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__p³ywanie_do_punktu__odnawianie_zasobów__4;
                                end;
                              //---//case Random( 3 ) of

                            end
                          else//if statki_t[ i ].si_aktywnoœæ in [ sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów ] then
                          if statki_t[ i ].si_aktywnoœæ in [ sia_Walka, sia_Walka__P³ywanie_Do_Punktu, sia_Walka__Torpedy_Ucieczka ] then
                            begin

                              case Random( 3 ) of
                                  0 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__walka__1;
                                  1 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__walka__2;
                                  2 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__walka__3;
                                end;
                              //---//case Random( 3 ) of

                            end
                          else//if statki_t[ i ].si_aktywnoœæ in [ sia_Walka, sia_Walka__P³ywanie_Do_Punktu, sia_Walka__Torpedy_Ucieczka ] then
                            //sia_Brak, sia_Odnawianie_Zasobów__Lotniskowiec, sia_Postój,
                            case Random( 3 ) of
                                0 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__pozosta³e__1;
                                1 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__pozosta³e__2;
                                2 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__pozosta³e__3;
                              end;
                            //---//case Random( 3 ) of

                        end
                      else//if si_polecenie_l = pokój_rozmów__si_polecenie__jak_tam_c then
                      if Pos( pokój_rozmów__si_polecenie__l¹dowanie__przerwij_c, si_polecenie_l ) = 1 then
                        begin

                          if not statki_t[ i ].czy_samolot then
                            begin

                              case Random( 3 ) of
                                  0 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__przerwij__nie_samolot__1;
                                  1 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__przerwij__nie_samolot__2;
                                  2 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__przerwij__nie_samolot__3;
                                end;
                              //---//case Random( 3 ) of

                            end
                          else//if not statki_t[ i ].czy_samolot then
                            if statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = -99 then
                              begin

                                case Random( 3 ) of
                                    0 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__przerwij__nie_l¹duje__1;
                                    1 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__przerwij__nie_l¹duje__2;
                                    2 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__przerwij__nie_l¹duje__3;
                                  end;
                                //---//case Random( 3 ) of

                              end
                            else//if statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = -99 then
                              if    ( statki_t[ i ].czy_samolot )
                                and ( statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 )
                                and (  not ( statki_t[ i ].si_aktywnoœæ in [ sia_Samolot__L¹dowanie__Hamowanie ] )  ) then
                                begin

                                  ztb := false;
                                  zti := statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie;

                                  for j := 0 to Length( statki_t ) - 1 do
                                    if    ( statki_t[ j ] <> nil )
                                      and ( statki_t[ j ].id_gracz = pokój_rozmów_r_f.id_nadawca )
                                      and ( statki_t[ j ].czy_lotniskowiec )
                                      and ( statki_t[ j ].id_statek = zti ) then
                                      begin

                                        ztb := true; // Znalaz³ lotniskowiec, na którym l¹dowaæ mia³ dany samolot.

                                        statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := -99;
                                        // Aby samolot wybra³ nowy punkt patrolu.
                                        statki_t[ i ].si_aktywnoœæ := sia_Brak;
                                        statki_t[ i ].si__aktywnoœæ__okreœlenie_ostatnie_sekundy_i := 0;


                                        statki_t[ j ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := -99;
                                        statki_t[ j ].si__lotniskowiec__l¹dowanie__kurs_aktualny := false;
                                        // Aby lotniskowiec wybra³ nowy punkt patrolu.
                                        statki_t[ j ].si_aktywnoœæ := sia_Brak;
                                        statki_t[ j ].si__aktywnoœæ__okreœlenie_ostatnie_sekundy_i := 0;


                                        odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__przyj¹³em___przerywam_l¹dowanie;

                                        Break;

                                      end;
                                    //---//if    ( statki_t[ i_l ] <> nil ) (...)


                                  // Gdyby kilka samolotów l¹dowa³o na tym samym lotniskowcu.
                                  if ztb then
                                    for j := 0 to Length( statki_t ) - 1 do
                                      if    ( statki_t[ j ] <> nil )
                                        and ( statki_t[ j ].czy_samolot )
                                        and ( statki_t[ j ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = zti ) then
                                        begin

                                          statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := -99;
                                          // Aby samolot wybra³ nowy punkt patrolu.
                                          statki_t[ i ].si_aktywnoœæ := sia_Brak;
                                          statki_t[ i ].si__aktywnoœæ__okreœlenie_ostatnie_sekundy_i := 0;

                                        end;
                                      //---//if    ( statki_t[ i_l ] <> nil ) (...)

                                end;
                              //---//if not statki_t[ i ].czy_lotniskowiec then

                        end
                      else//if Pos( pokój_rozmów__si_polecenie__l¹dowanie__przerwij_c, si_polecenie_l ) = 1 then
                      if Pos( pokój_rozmów__si_polecenie__l¹dowanie__rezygnacja_c, si_polecenie_l ) = 1 then
                        begin

                          if not statki_t[ i ].czy_lotniskowiec then
                            begin

                              case Random( 3 ) of
                                  0 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nie_lotniskowiec__1;
                                  1 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nie_lotniskowiec__2;
                                  2 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nie_lotniskowiec__3;
                                end;
                              //---//case Random( 3 ) of

                            end
                          else//if not statki_t[ i ].czy_lotniskowiec then
                            begin

                              if Czy_Gracz_Posiada_Samolot( pokój_rozmów_r_f.id_nadawca, zti ) then
                                begin

                                  // zti - tutaj jako indeks statku pytaj¹cego.

                                  if statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> zti then
                                    begin

                                      case Random( 3 ) of
                                          0 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nikt_nie_l¹duje__1;
                                          1 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nikt_nie_l¹duje__2;
                                          2 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nikt_nie_l¹duje__3;
                                        end;
                                      //---//case Random( 3 ) of

                                    end
                                  else//if statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> zti then
                                    begin

                                      statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := -99;
                                      statki_t[ i ].si__lotniskowiec__l¹dowanie__kurs_aktualny := false;
                                      // Aby lotniskowiec wybra³ nowy punkt patrolu.
                                      statki_t[ i ].si_aktywnoœæ := sia_Brak;
                                      statki_t[ i ].si__aktywnoœæ__okreœlenie_ostatnie_sekundy_i := 0;

                                      if    ( zti >= 0 )
                                        and (  zti <= Length( statki_t ) - 1  )
                                        and ( statki_t[ zti ] <> nil ) then
                                        begin

                                          statki_t[ zti ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := -99;

                                          if    ( statki_t[ zti ].si__statek_gracza__p³ywa )
                                            and ( statki_t[ zti ].si_aktywnoœæ in [ sia_Samolot__L¹dowanie__Podchodzenie, sia_Samolot__L¹dowanie ] ) then
                                            begin

                                              // Aby samolot wybra³ nowy punkt patrolu.
                                              statki_t[ zti ].si_aktywnoœæ := sia_Brak;
                                              statki_t[ zti ].si__aktywnoœæ__okreœlenie_ostatnie_sekundy_i := 0;

                                            end;
                                          //---//if    ( statki_t[ zti ].si__statek_gracza__p³ywa ) (...)

                                        end;
                                      //---//if    ( zti >= 0 ) (...)

                                      odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__przyj¹³em___rezygnacja_z_l¹dowania;

                                    end;
                                  //---//if statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> zti then

                                end
                              else//if Czy_Gracz_Posiada_Samolot( pokój_rozmów_r_f.id_nadawca, zti ) then
                                begin

                                  case Random( 3 ) of
                                      0 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nie_samolot__1;
                                      1 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nie_samolot__2;
                                      2 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nie_samolot__3;
                                    end;
                                  //---//case Random( 3 ) of

                                end;
                              //---//if Czy_Gracz_Posiada_Samolot( pokój_rozmów_r_f.id_nadawca, zti ) then

                            end;
                          //---//if not statki_t[ i ].czy_lotniskowiec then

                        end
                      else//if Pos( pokój_rozmów__si_polecenie__l¹dowanie__rezygnacja_c, si_polecenie_l ) = 1 then
                      if   (  Pos( pokój_rozmów__si_polecenie__l¹dowanie__zezwolenie_proœba__kurs_aktualny_c, si_polecenie_l ) = 1  )
                        or (  Pos( pokój_rozmów__si_polecenie__l¹dowanie__zezwolenie_proœba__kurs_standardowy_c, si_polecenie_l ) = 1  ) then
                        begin

                          if id_gracz_statku_pytanego_l <> Unassigned() then
                            begin

                              if statki_t[ i ].id_gracz = id_gracz_statku_pytanego_l then
                                begin

                                  // Sprawdza czy adresat posiada lotniskowiec.
                                  ztb := false;

                                  if not statki_t[ i ].czy_lotniskowiec then
                                    begin

                                      for j := 0 to Length( statki_t ) - 1 do
                                        if    ( statki_t[ j ] <> nil )
                                          and ( statki_t[ j ].id_gracz = id_gracz_statku_pytanego_l )
                                          and ( statki_t[ j ].czy_samolot ) then
                                          begin

                                            ztb := true;
                                            Break;

                                          end;
                                        //---//if    ( statki_t[ j ] <> nil ) (...)

                                    end;
                                  //---//if not statki_t[ i ].czy_lotniskowiec then
                                  //---// Sprawdza czy adresat posiada lotniskowiec.


                                  if    ( not statki_t[ i ].czy_lotniskowiec )
                                    and ( not ztb ) then
                                    begin

                                      // Adresat nie posiada lotniskowca.

                                      case Random( 6 ) of
                                          0 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_lotniskowiec__1;
                                          1 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_lotniskowiec__2;
                                          2 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_lotniskowiec__3;
                                          3 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_lotniskowiec__4;
                                          4 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_lotniskowiec__5;
                                          5 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_lotniskowiec__6;
                                        end;
                                      //---//case Random( 6 ) of

                                    end
                                  else//if    ( not statki_t[ i ].czy_lotniskowiec ) (...)
                                    if statki_t[ i ].czy_lotniskowiec then
                                      begin

                                        if Czy_Gracz_Posiada_Samolot( pokój_rozmów_r_f.id_nadawca, zti ) then
                                          begin

                                            // zti - tutaj jako indeks statku pytaj¹cego.

                                            if    ( zti >= 0 )
                                              and (  zti <= Length( statki_t ) - 1  )
                                              and ( statki_t[ zti ] <> nil )
                                              and ( not statki_t[ zti ].czy_usun¹æ_statek )
                                              and ( statki_t[ zti ].punkty_¿ycia_aktualne > 0 )
                                              and ( not statki_t[ i ].czy_usun¹æ_statek )
                                              and ( statki_t[ i ].punkty_¿ycia_aktualne > 0 ) then
                                              begin

                                                if    ( statki_t[ i ].id_statek__lotniskowiec__ma_samolot_na_pok³adzie <> -99 )
                                                  and ( statki_t[ i ].id_statek__lotniskowiec__ma_samolot_na_pok³adzie <> statki_t[ zti ].id_statek ) then
                                                  begin

                                                    odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__odmowa__odmawiam__mam_zajêty_pok³ad;

                                                  end
                                                else//if    ( statki_t[ i ].id_statek__lotniskowiec__ma_samolot_na_pok³adzie <> -99 ) (...)
                                                if    ( statki_t[ i ].id_statek__lotniskowiec__ma_samolot_na_pok³adzie <> -99 )
                                                  and ( statki_t[ i ].id_statek__lotniskowiec__ma_samolot_na_pok³adzie = statki_t[ zti ].id_statek ) then
                                                  begin

                                                    odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__odmowa__wskazania_mówi¹__¿e_ju¿_wyl¹dowa³eœ_u_mnie;

                                                  end
                                                else//if    ( statki_t[ i ].id_statek__lotniskowiec__ma_samolot_na_pok³adzie <> -99 ) (...)
                                                if    ( statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 )
                                                  and ( statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> statki_t[ zti ].id_statek ) then
                                                  begin

                                                    odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__odmowa__odmawiam__musisz_poczekaæ_na_swoj¹_kolej;

                                                  end
                                                else//if    ( statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 ) (...)
                                                if    ( statki_t[ zti ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 )
                                                  and ( statki_t[ zti ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> statki_t[ i ].id_statek ) then
                                                  begin

                                                    odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__odmowa__oczekuj¹_ciebie_na_innym_lotniskowcu;

                                                  end
                                                else//if    ( statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 ) (...)
                                                if   (
                                                           ( statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 )
                                                       and ( statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = statki_t[ zti ].id_statek )
                                                     )
                                                  or ( statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = -99 ) then
                                                  begin

                                                    if statki_t[ zti ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> statki_t[ i ].id_statek then
                                                      statki_t[ zti ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := statki_t[ i ].id_statek;

                                                    if Pos( pokój_rozmów__si_polecenie__l¹dowanie__zezwolenie_proœba__kurs_aktualny_c, si_polecenie_l ) = 1 then
                                                      statki_t[ i ].si__lotniskowiec__l¹dowanie__kurs_aktualny := true
                                                    else//if Pos( pokój_rozmów__si_polecenie__l¹dowanie__zezwolenie_proœba__kurs_aktualny_c, si_polecenie_l ) = 1 then
                                                      statki_t[ i ].si__lotniskowiec__l¹dowanie__kurs_aktualny := false;


                                                    if statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = statki_t[ zti ].id_statek then
                                                      odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__potwierdzam_zgodê
                                                    else//if statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = statki_t[ zti ].id_statek then
                                                      begin

                                                        statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := statki_t[ zti ].id_statek;

                                                        odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__zgoda;

                                                      end;
                                                    //---//if statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = statki_t[ zti ].id_statek then


                                                    if    ( statki_t[ zti ].si__statek_gracza__p³ywa )
                                                      and ( statki_t[ zti ].si_aktywnoœæ <> sia_Samolot__L¹dowanie__Podchodzenie ) then
                                                      begin

                                                        statki_t[ zti ].si_aktywnoœæ := sia_Samolot__L¹dowanie__Podchodzenie;
                                                        statki_t[ zti ].samolot__l¹dowanie__podchodzenie_krok := l¹dowanie__podchodzenie_kroki_iloœæ_c;
                                                        statki_t[ zti ].si__cel_odleg³oœæ := -1;

                                                      end;
                                                    //---//if    ( statki_t[ zti ].si__statek_gracza__p³ywa ) (...)


                                                    odpowiedŸ_l := odpowiedŸ_l +
                                                      ' ' + t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__zgoda__cd_1 + ' x = ' +
                                                      Trim(  FormatFloat( '### ### ##0.00', statki_t[ i ].AbsolutePosition.X )  ) +
                                                      ', z = ' + Trim(  FormatFloat( '### ### ##0.00', statki_t[ i ].AbsolutePosition.Z )  ) +
                                                      ',' +
                                                      #13 + #10 +
                                                      t³umaczenie_komunikaty_r.s³owo__odleg³oœæ + ' = ' + Trim(   FormatFloat(  '### ### ##0.00', statki_t[ i ].DistanceTo( statki_t[ zti ] )  )   ) + '.';

                                                  end;
                                                //---//if   ( (...)

                                              end
                                            else//if    ( j >= 0 ) (...)
                                              odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__jakieœ_zak³ócenia;

                                          end
                                        else//if Czy_Gracz_Posiada_Samolot( pokój_rozmów_r_f.id_nadawca, zti ) then
                                          begin

                                            case Random( 3 ) of
                                                0 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_samolot__1;
                                                1 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_samolot__2;
                                                2 : odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_samolot__3;
                                              end;
                                            //---//case Random( 3 ) of

                                          end;
                                        //---//if Czy_Gracz_Posiada_Samolot( pokój_rozmów_r_f.id_nadawca, zti ) then

                                      end;
                                    //---//if statki_t[ i ].czy_lotniskowiec then

                                end;
                              //---//if statki_t[ i ].id_gracz = id_gracz_statku_pytanego_l then
                              //else
                              // W pêtli powinien trafiæ na statek, którego dotyczy pytanie.

                            end
                          else//if id_gracz_statku_pytanego_l <> Unassigned() then
                            odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__nie_uda³o_siê_zidentyfikowaæ_do_kogo_zosta³o_wys³ane_polecenie;

                        end
                      else//if   (  Pos( pokój_rozmów__si_polecenie__l¹dowanie__zezwolenie_proœba__kurs_aktualny_c, si_polecenie_l ) = 1  ) (...)
                      if si_polecenie_l = pokój_rozmów__si_polecenie__si_aktywnoœæ_podaj_c then
                        begin

                          odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__aktywnoœæ_podaj__¿ycie + ': ' + Trim(  FormatFloat( '### ### ##0', statki_t[ i ].punkty_¿ycia_aktualne )  ) + ' / ' + Trim(  FormatFloat( '### ### ##0', statki_t[ i ].punkty_¿ycia_maksymalne )  ) + ' (' + Trim(  FormatFloat( '### ### ##0', statki_t[ i ].punkty_¿ycia_procent_zosta³o )  ) + '%)';

                          odpowiedŸ_l := odpowiedŸ_l +
                            #13 + #10 + t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__aktywnoœæ_podaj__aktualna_aktywnoœæ + ': ' + statki_t[ i ].Si_Aktywnoœæ_Aktualna_Nazwa( t³umaczenie_komunikaty_r ) + '.';

                          //if statki_t[ i ].si_aktywnoœæ__polecenie <> sia_Brak then
                            odpowiedŸ_l := odpowiedŸ_l +
                              #13 + #10 + t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__aktywnoœæ_podaj__aktywnoœæ_analizowana + ': ' + statki_t[ i ].Si_Aktywnoœæ_Aktualna_Nazwa( t³umaczenie_komunikaty_r, true ) + '.';

                          odpowiedŸ_l := odpowiedŸ_l +
                            #13 + #10 + t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__aktywnoœæ_podaj__tryb_strzelania + ': ' + statki_t[ i ].Si_Strzelanie_Tryb_Aktualny_Nazwa( t³umaczenie_komunikaty_r ) + '.';

                          odpowiedŸ_l := odpowiedŸ_l +
                            #13 + #10 +
                            t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__aktywnoœæ_podaj__pozycja + ' x = ' +
                            Trim(  FormatFloat( '### ### ##0.00', statki_t[ i ].AbsolutePosition.X )  ) +
                            ', z = ' + Trim(  FormatFloat( '### ### ##0.00', statki_t[ i ].AbsolutePosition.Z )  );

                          if   ( statki_t[ i ].czy_samolot )
                            or ( statki_t[ i ].czy_zanurzanie ) then
                            odpowiedŸ_l := odpowiedŸ_l +
                              ', y = ' + Trim(  FormatFloat( '### ### ##0.00', statki_t[ i ].AbsolutePosition.Y )  );


                          //odpowiedŸ_l := odpowiedŸ_l +
                          //  #13 + #10 +
                          //  t³umaczenie_komunikaty_r.ekran_napis__prêdkoœæ + ' %: ' + Trim(  FormatFloat( '### ### ##0', statki_t[ i ].prêdkoœæ_zadana_procent )  ) + ' (' + Trim(  FormatFloat( '### ### ##0', statki_t[ i ].prêdkoœæ_aktualna_procent__wzglêdny )  ) + ') ' + Trim(  FormatFloat( '### ### ##0.00', statki_t[ i ].prêdkoœæ_aktualna )  ) + ',' +
                          //  #13 + #10 +
                          //  //t³umaczenie_komunikaty_r.ekran_napis__ster + ' %: ' + skrêt_kierunek_zadany + ' ' + Trim(   FormatFloat(  '### ### ##0', Abs( statki_t[ i ].skrêt_zadany_procent )  )   ) + ' (' +  skrêt_kierunek + ' ' + Trim(   FormatFloat(  '### ### ##0', Abs( statki_t[ i ].skrêt_aktualny_procent )  )   ) + '),' +
                          //  t³umaczenie_komunikaty_r.ekran_napis__ster + ' %: ' + Trim(   FormatFloat(  '### ### ##0', Abs( statki_t[ i ].skrêt_zadany_procent )  )   ) + ' (' + Trim(   FormatFloat(  '### ### ##0', Abs( statki_t[ i ].skrêt_aktualny_procent )  )   ) + '),';
                          //
                          //if statki_t[ i ].czy_zanurzanie then
                          //  odpowiedŸ_l := odpowiedŸ_l +
                          //    #13 + #10 +
                          //    t³umaczenie_komunikaty_r.ekran_napis__zanurzenie
                          //else//if statki_t[ i ].czy_zanurzanie then
                          //if statki_t[ i ].czy_samolot then
                          //  odpowiedŸ_l := odpowiedŸ_l +
                          //    #13 + #10 +
                          //    t³umaczenie_komunikaty_r.ekran_napis__pu³ap;
                          //
                          //if   ( statki_t[ i ].czy_samolot )
                          //  or ( statki_t[ i ].czy_zanurzanie ) then
                          //  odpowiedŸ_l := odpowiedŸ_l +
                          //    ' ' + Trim(  FormatFloat( '### ### ##0', statki_t[ i ].zanurzenie_pu³ap__zadane_procent )  ) + ' (' + Trim(  FormatFloat( '### ### ##0', statki_t[ i ].zanurzenie_pu³ap__aktualne_procent )  ) + ')' + ' ' + Trim(  FormatFloat( '### ### ##0.000', statki_t[ i ].zanurzenie_pu³ap__aktualne )  ) + ',';


                          for j := 0 to Length( statki_t ) - 1 do
                            if    ( statki_t[ j ] <> nil )
                              and ( statki_t[ j ].id_gracz = pokój_rozmów_r_f.id_nadawca ) then
                              begin

                                odpowiedŸ_l := odpowiedŸ_l +
                                  ',' +
                                  #13 + #10 +
                                  t³umaczenie_komunikaty_r.s³owo__odleg³oœæ + ' = ' + Trim(   FormatFloat(  '### ### ##0.00', statki_t[ i ].DistanceTo( statki_t[ j ] )  )   );

                                // Je¿eli gracz ma statek i samolot to dodaje dopisek informuj¹cy, ¿e wiadomoœæ wys³a³ samolot.
                                if statki_t[ j ].czy_samolot then
                                  odpowiedŸ_l := odpowiedŸ_l +
                                    si_pokój_rozmów__polecenie_symbol__samolot_c;

                              end;
                            //---//if    ( statki_t[ j ] <> nil ) (...)

                          odpowiedŸ_l := odpowiedŸ_l + '.';

                        end
                      else//if si_polecenie_l = pokój_rozmów__si_polecenie__si_aktywnoœæ_podaj_c then
                      if si_polecenie_l = pokój_rozmów__si_polecenie__sia_Brak_c then
                        begin

                          statki_t[ i ].si_aktywnoœæ__polecenie := sia_Brak;

                        end
                      else//if si_polecenie_l = pokój_rozmów__si_polecenie__sia_Brak_c then
                      if si_polecenie_l = pokój_rozmów__si_polecenie__sia_Patrol_c then
                        begin

                          statki_t[ i ].si_aktywnoœæ__polecenie := sia_Patrol;

                        end
                      else//if si_polecenie_l = pokój_rozmów__si_polecenie__sia_Patrol_c then
                      if Pos( pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Mnie_c, si_polecenie_l ) = 1 then
                        begin

                          ztb := false;

                          // Wyszukuje statek, który jest nadawc¹ polecenia.
                          for j := 0 to Length( statki_t ) - 1 do
                            if    ( statki_t[ j ] <> nil )
                              and ( statki_t[ j ].id_gracz = pokój_rozmów_r_f.id_nadawca )
                              and ( // Je¿eli gracz pytaj¹cy ma statek i samolot to rozró¿nia czy polecenie dotyczy statku czy samolotu.
                                       (
                                             ( polecenia_od__samolotu_l )
                                         and ( statki_t[ j ].czy_samolot )
                                       )
                                    or (
                                             ( polecenia_od__statku_l )
                                         and ( not statki_t[ j ].czy_samolot )
                                       )
                                    or (
                                             ( not polecenia_od__samolotu_l )
                                         and ( not polecenia_od__statku_l  )
                                       )
                                  ) then
                              begin

                                zti := j; // Indeks statku pytaj¹cego.
                                ztb := true;
                                Break;

                              end;
                            //---//if    ( statki_t[ j ] <> nil ) (...)
                          //---// Wyszukuje statek, który jest nadawc¹ polecenia.

                          if not ztb then
                            begin

                              // Je¿eli nie uda³o siê precyzyjnie ustaliæ czy statek czy samolot to wyszukuje bez rozró¿niania.

                              for j := 0 to Length( statki_t ) - 1 do
                                if    ( statki_t[ j ] <> nil )
                                  and ( statki_t[ j ].id_gracz = pokój_rozmów_r_f.id_nadawca ) then
                                  begin

                                    zti := j; // Indeks statku pytaj¹cego.
                                    ztb := true;
                                    Break;

                                  end;
                                //---//if    ( statki_t[ j ] <> nil ) (...)

                            end;
                          //---//if not ztb then


                          if    ( ztb )
                            and ( zti >= 0 )
                            and (  zti <= Length( statki_t ) - 1  )
                            and ( statki_t[ zti ] <> nil )
                            and (
                                     ( // Polecenie skierowane do samolotów.
                                           ( polecenia_dla__samolotu_l )
                                       and ( statki_t[ i ].czy_samolot )
                                     )
                                  or ( // Polecenie skierowane do statków.
                                           ( polecenia_dla__statku_l )
                                       and ( not statki_t[ i ].czy_samolot )
                                     )
                                  or ( // Polecenie nie precyzuje do kogo jest skierowane (do wszystkiego).
                                           ( not polecenia_dla__samolotu_l )
                                       and ( not polecenia_dla__statku_l )
                                     )
                                ) then
                            begin

                              statki_t[ i ].si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne := statki_t[ zti ].AbsolutePosition;

                              if statki_t[ zti ].prêdkoœæ_zadana_procent >= 0 then
                                j := -1 // Za statkiem.
                              else//if statki_t[ zti ].prêdkoœæ_zadana_procent >= 0 then
                                j := 1; // Przed statkiem.

                              GLS.VectorGeometry.AddVector
                                (
                                  statki_t[ i ].si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne,
                                  GLS.VectorGeometry.VectorScale
                                    (
                                      GLS.VectorGeometry.VectorMake( statki_t[ zti ].AbsoluteDirection.X, 0, statki_t[ zti ].AbsoluteDirection.Z ),
                                      j * 3 * ( statki_t[ i ].z_prymityw_odleg³oœæ + statki_t[ zti ].z_prymityw_odleg³oœæ )
                                    )
                                );


                              if   (
                                         ( statki_t[ zti ].czy_samolot )
                                     and ( statki_t[ i ].czy_samolot )
                                   )
                                or (
                                          ( statki_t[ zti ].czy_zanurzanie )
                                      and ( statki_t[ i ].czy_zanurzanie )
                                    ) then
                                begin

                                  statki_t[ i ].si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne.W := 1;

                                  if statki_t[ i ].si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne.Y < 0 then
                                    statki_t[ i ].si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne.Y := -statki_t[ i ].si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne.Y;

                                end
                              else//if   ( (...)
                                statki_t[ i ].si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne.W := 0; // Wspó³rzêdna Y nie jest okreœlona lub jest dowolna.


                              if Pos( pokój_rozmów__si_polecenie__sia_Postój_c, si_polecenie_l ) > 1 then
                                statki_t[ i ].si_aktywnoœæ__polecenie := sia_P³ywanie_Do_Punktu__Postój
                              else//if Pos( pokój_rozmów__si_polecenie__sia_Postój_c, si_polecenie_l ) > 1 then
                                statki_t[ i ].si_aktywnoœæ__polecenie := sia_P³ywanie_Do_Punktu__Patrol;

                            end
                          else//if    ( ztb ) (...)
                            odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__nie_uda³o_siê_odnaleŸæ_statku_nadawcy_polecenia;

                        end
                      else//if Pos( pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Mnie_c, si_polecenie_l ) = 1 then
                      if Pos( pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Punktu_c, si_polecenie_l ) = 1 then
                        begin

                          zts := si_polecenie_l;
                          zts := StringReplace( zts, ' ', '', [ rfReplaceAll ] );

                          if Liczba_Odczytaj( zts, statki_t[ i ].si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne.X ) then
                            begin

                              if Liczba_Odczytaj( zts, statki_t[ i ].si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne.Z ) then
                                begin

                                  if Liczba_Odczytaj( zts, statki_t[ i ].si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne.Y ) then
                                    begin

                                      statki_t[ i ].si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne.W := 1;

                                      if statki_t[ i ].si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne.Y < 0 then
                                        odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__wspó³rzêdna_y_jako_wartoœæ_zanurzenia__pu³apu_powinna_byæ_nieujemna;

                                    end
                                  else//if Liczba_Odczytaj( zts, statki_t[ i ].si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne.Y ) then
                                    statki_t[ i ].si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne.W := 0; // Wspó³rzêdna Y nie jest okreœlona lub jest dowolna.


                                  if Pos( pokój_rozmów__si_polecenie__sia_Postój_c, si_polecenie_l ) > 1 then
                                    statki_t[ i ].si_aktywnoœæ__polecenie := sia_P³ywanie_Do_Punktu__Postój
                                  else//if Pos( pokój_rozmów__si_polecenie__sia_Postój_c, si_polecenie_l ) > 1 then
                                    statki_t[ i ].si_aktywnoœæ__polecenie := sia_P³ywanie_Do_Punktu__Patrol;

                                end
                              else//if Liczba_Odczytaj( zts, statki_t[ i ].si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne.Z ) then
                                odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__nie_uda³o_siê_odczytaæ_sk³adowej_wspó³rzêdnych_z;

                            end
                          else//if Liczba_Odczytaj( zts, statki_t[ i ].si_aktywnoœæ__polecenie__punkt_zadany__wspó³rzêdne.X ) then
                            odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__nie_uda³o_siê_odczytaæ_sk³adowej_wspó³rzêdnych_x;

                        end
                      else//if Pos( pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Punktu_c, si_polecenie_l ) = 1 then
                      if si_polecenie_l = pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów_c then
                        begin

                          statki_t[ i ].si_aktywnoœæ__polecenie := sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów;

                        end
                      else//if si_polecenie_l = pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów_c then
                      if si_polecenie_l = pokój_rozmów__si_polecenie__sia_Postój_c then
                        begin

                          statki_t[ i ].si_aktywnoœæ__polecenie := sia_Postój;

                        end
                      else//if si_polecenie_l = pokój_rozmów__si_polecenie__sia_Postój_c then
                      if si_polecenie_l = pokój_rozmów__si_polecenie__sia_Samolot__L¹dowanie_c then
                        begin

                          statki_t[ i ].si_aktywnoœæ__polecenie := sia_Samolot__L¹dowanie;

                        end
                      else//if si_polecenie_l = pokój_rozmów__si_polecenie__sia_Samolot__L¹dowanie_c then
                      if si_polecenie_l = pokój_rozmów__si_polecenie__sia_Samolot__Startowanie_c then
                        begin

                          statki_t[ i ].si_aktywnoœæ__polecenie := sia_Samolot__Startowanie;

                        end
                      else//if si_polecenie_l = pokój_rozmów__si_polecenie__sia_Samolot__Startowanie_c then
                      if si_polecenie_l = pokój_rozmów__si_polecenie__sia_Walka_c then
                        begin

                          statki_t[ i ].si_aktywnoœæ__polecenie := sia_Walka;

                        end
                      {$endregion 'si_aktywnoœæ.'}
                      else//if si_polecenie_l = pokój_rozmów__si_polecenie__sia_Walka_c then
                        begin

                          {$region 'si_strzelanie_tryb.'}
                          si_strzelanie_tryb_kopia_l := statki_t[ i ].si_strzelanie_tryb;

                          if Pos( pokój_rozmów__si_polecenie__sist_Brak_c, si_polecenie_l ) = 1 then
                            begin

                              statki_t[ i ].si_strzelanie_tryb := sist_Brak;
                              statki_t[ i ].Si_Wartoœci_Pocz¹tkowe_Ustaw( false, true );

                            end
                          else//if Pos( pokój_rozmów__si_polecenie__sist_Brak_c, si_polecenie_l ) = 1 then
                          if Pos( pokój_rozmów__si_polecenie__sist_Celuj_Tylko_c, si_polecenie_l ) = 1 then
                            begin

                              statki_t[ i ].si_strzelanie_tryb := sist_Celuj_Tylko;
                              statki_t[ i ].Si_Wartoœci_Pocz¹tkowe_Ustaw( false, true );

                            end
                          else//if Pos( pokój_rozmów__si_polecenie__sist_Celuj_Tylko_c, si_polecenie_l ) = 1 then
                          if Pos( pokój_rozmów__si_polecenie__sist_Nie_Celuj_Nie_Strzelaj_c, si_polecenie_l ) = 1 then
                            begin

                              statki_t[ i ].si_strzelanie_tryb := sist_Nie_Celuj_Nie_Strzelaj;
                              statki_t[ i ].Si_Wartoœci_Pocz¹tkowe_Ustaw( false, true );

                            end
                          else//if Pos( pokój_rozmów__si_polecenie__sist_Nie_Celuj_Nie_Strzelaj_c, si_polecenie_l ) = 1 then
                          if Pos( pokój_rozmów__si_polecenie__sist_Odpowiedz_Ogniem_c, si_polecenie_l ) = 1 then
                            begin

                              statki_t[ i ].si_strzelanie_tryb := sist_Odpowiedz_Ogniem;
                              statki_t[ i ].Si_Wartoœci_Pocz¹tkowe_Ustaw( false, true );

                            end
                          else//if Pos( pokój_rozmów__si_polecenie__sist_Odpowiedz_Ogniem_c, si_polecenie_l ) = 1 then
                          if Pos( pokój_rozmów__si_polecenie__sist_Strzelaj_Jak_Chcesz_c, si_polecenie_l ) = 1 then
                            begin

                              statki_t[ i ].si_strzelanie_tryb := sist_Strzelaj_Jak_Chcesz;
                              statki_t[ i ].Si_Wartoœci_Pocz¹tkowe_Ustaw( false, true );

                            end;
                          //---//if Pos( pokój_rozmów__si_polecenie__sist_Strzelaj_Jak_Chcesz_c, si_polecenie_l ) = 1 then


                          if si_strzelanie_tryb_kopia_l <> statki_t[ i ].si_strzelanie_tryb then
                            odpowiedŸ_l := t³umaczenie_komunikaty_r.si__odpowiedŸ__potwierdzam_tryb_strzelania + ': ' + statki_t[ i ].Si_Strzelanie_Tryb_Aktualny_Nazwa( t³umaczenie_komunikaty_r ) + '.';
                          {$endregion 'si_strzelanie_tryb.'}

                        end;
                      //---//if si_polecenie_l = pokój_rozmów__si_polecenie__sia_Walka_c then


                      if Trim( odpowiedŸ_l ) <> '' then
                        begin

                          for j := 0 to Length( statki_t ) - 1 do
                            if    ( statki_t[ j ] <> nil )
                              and ( statki_t[ j ].id_gracz = statki_t[ i ].id_gracz )
                              and ( statki_t[ j ].id_statek <> statki_t[ i ].id_statek )
                              and ( statki_t[ i ].czy_samolot ) then
                              begin

                                // Je¿eli gracz ma statek i samolot to dodaje dopisek informuj¹cy, ¿e wiadomoœæ wys³a³ samolot.

                                odpowiedŸ_l :=
                                  si_pokój_rozmów__polecenie_symbol__samolot_c + ' ' +
                                  odpowiedŸ_l;

                                Break;

                              end;
                            //---//if    ( statki_t[ j ] <> nil ) (...)

                          pokój_rozmów_odpowiedŸ_r_l.id_odbiorca := pokój_rozmów_r_f.id_nadawca;
                          pokój_rozmów_odpowiedŸ_r_l.data_czas_wys³ania := Now();
                          pokój_rozmów_odpowiedŸ_r_l.odbiorca_rodzaj := pror_Gracz_Jeden;
                          pokój_rozmów_odpowiedŸ_r_l.wiadomoœæ := odpowiedŸ_l;
                          Wyœwietl__Wyœlij_Wiadomoœæ( tcp_klienci_lista__serwer_indeks_l, pokój_rozmów_odpowiedŸ_r_l );

                        end;
                      //---//if Trim( odpowiedŸ_l ) <> '' then

                    end;
                  //---//if   ( statki_t[ i ].si_decyduje ) (...)

              end;
            //---//if   ( (...)

          end;
        //---//if   ( (...)

      end;
    //---//if    ( statki_t[ i ] <> nil ) (...)

end;//---//Funkcja SI__Polecenie__Zak³ócenia_Interpretuj().

//Funkcja SI__Samolot_Gracza__L¹duj_Na_Lotniskowcu_Gracza().
procedure TStatki_Form.SI__Samolot_Gracza__L¹duj_Na_Lotniskowcu_Gracza( const id_gracz_f : integer; const peer_port__nadawca_f : integer = -1 );
var
  i : integer;
  zt_samolot__statek_gracza,
  zt_statek_gracza
    : TStatek;
begin

  //
  // Parametry:
  //   peer_port__nadawca_f:
  //     -1 - obs³uguje zg³oszenie od serwera. serwer_peer_port_c
  //     <> -1 - obs³uguje zg³oszenie od klienta.
  //

  zt_samolot__statek_gracza := nil;
  zt_statek_gracza := nil;

  for i := 0 to Length( statki_t ) - 1 do
    if    ( statki_t[ i ] <> nil )
      and ( statki_t[ i ].id_gracz = id_gracz_f ) then
      begin

        if    ( zt_samolot__statek_gracza = nil )
          and ( statki_t[ i ].czy_samolot ) then
          zt_samolot__statek_gracza := statki_t[ i ];

        if    ( zt_statek_gracza = nil )
          and ( statki_t[ i ].czy_lotniskowiec ) then
          zt_statek_gracza := statki_t[ i ];

      end;
    //---//if    ( statki_t[ i ] <> nil ) (...)


  if   ( zt_samolot__statek_gracza = nil )
    or ( zt_statek_gracza = nil ) then
    Exit;


  if    ( zt_statek_gracza.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 )
    and ( zt_statek_gracza.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> zt_samolot__statek_gracza.id_statek ) then
    begin

      if peer_port__nadawca_f = -1 then // serwer_peer_port_c
        Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__lotniskowiec_aktualnie_obs³uguje_inny_samolot )
      else//if peer_port__nadawca_f = -1 then
        Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__informacja_dodatkowa_dodaj_c, peer_port__nadawca_f, t³umaczenie_komunikaty_r.komunikat__lotniskowiec_aktualnie_obs³uguje_inny_samolot );

      Exit;

    end;
  //---//if    ( zt_statek_gracza.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 ) (...)


  zt_samolot__statek_gracza.si_aktywnoœæ := sia_Samolot__L¹dowanie__Podchodzenie;
  zt_samolot__statek_gracza.samolot__l¹dowanie__podchodzenie_krok := l¹dowanie__podchodzenie_kroki_iloœæ_c;
  zt_samolot__statek_gracza.si__cel_odleg³oœæ := -1;

  if zt_statek_gracza.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = -99 then
   zt_statek_gracza.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := zt_samolot__statek_gracza.id_statek;

  zt_samolot__statek_gracza.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := zt_statek_gracza.id_statek;


  if peer_port__nadawca_f = -1 then // serwer_peer_port_c
    Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__samolot_zg³asza_l¹dowanie )
  else//if peer_port__nadawca_f = -1 then
    Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__informacja_dodatkowa_dodaj_c, peer_port__nadawca_f, t³umaczenie_komunikaty_r.komunikat__samolot_zg³asza_l¹dowanie );

end;//---//Funkcja SI__Samolot_Gracza__L¹duj_Na_Lotniskowcu_Gracza().

//Funkcja SI__Statek_Gracza__Sterowanie_Ustaw().
procedure TStatki_Form.SI__Statek_Gracza__Sterowanie_Ustaw( const statek_f : TStatek; const si__statek_gracza__p³ywa_poprzednia_wartoœæ_f : boolean; const si__statek_gracza__strzela_poprzednia_wartoœæ_f : TSi__Statek_Gracza__Strzela );
var
  i : integer;
  si__statek_gracza__strzela_kopia : TSi__Statek_Gracza__Strzela;
begin

  if   ( statek_f = nil )
    or (  not Assigned( statek_f )  ) then
    Exit;


  if statek_f.si__statek_gracza__p³ywa <> si__statek_gracza__p³ywa_poprzednia_wartoœæ_f then
    begin

      si__statek_gracza__strzela_kopia := statek_f.si__statek_gracza__strzela; // Dodatkowa kopia, gdy¿ wartoœæ si__statek_gracza__strzela jest nadpisywana w Si_Wartoœci_Pocz¹tkowe_Ustaw() i potem zamiast wybran¹ wartoœæ ustawia domyœln¹.

      statek_f.Si_Wartoœci_Pocz¹tkowe_Ustaw( true, false );

      statek_f.si__statek_gracza__p³ywa := not si__statek_gracza__p³ywa_poprzednia_wartoœæ_f;


      if statek_f.czy_samolot then
        begin

          if statek_f.si__statek_gracza__p³ywa then
            begin

              if statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny = 0 then
                statek_f.si_aktywnoœæ := sia_Samolot__L¹dowanie__Hamowanie
              else//if statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny = 0 then
              if statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny > 0 then
                begin

                  if statek_f.AbsolutePosition.Y > samolot_w_powietrzu_wysokoœæ_od_c then
                    begin

                      if statek_f.zanurzenie_pu³ap__zadane_procent < 0 then
                        statek_f.Zanurzenie_Zadane_Procent_Ustaw( 0 );

                      if statek_f.prêdkoœæ_zadana_procent < samolot_prêdkoœæ_lotu_procent_minimalny_c then
                        statek_f.Prêdkoœæ_Zadana_Procent_Ustaw(  System.Math.Ceil( samolot_prêdkoœæ_lotu_procent_minimalny_c )  );

                      statek_f.si__samolot_zanurzenie_pu³ap__zadane := statek_f.zanurzenie_pu³ap__aktualne;

                      if statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 then
                        begin

                          statek_f.si_aktywnoœæ := sia_Samolot__L¹dowanie__Podchodzenie;
                          statek_f.samolot__l¹dowanie__podchodzenie_krok := l¹dowanie__podchodzenie_kroki_iloœæ_c;
                          statek_f.si__cel_odleg³oœæ := -1;

                        end
                      else//if statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 then
                        statek_f.si_aktywnoœæ := sia_Patrol;

                    end
                  else//if statek_f.AbsolutePosition.Y > samolot_w_powietrzu_wysokoœæ_od_c then
                    statek_f.si_aktywnoœæ := sia_Samolot__L¹dowanie__Hamowanie;

                end;
              //---//if statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny > 0 then

            end
          else//if statek_f.si__statek_gracza__p³ywa then
            begin

              if statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 then
                begin

                  for i := 0 to Length( statki_t ) - 1 do
                    if    ( statki_t[ i ] <> nil )
                      and ( statki_t[ i ].czy_lotniskowiec )
                      and ( statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = statek_f.id_statek ) then
                      begin

                        // Lotniskowcom, na których mia³ wyl¹dowaæ samolot gracza, odwo³uje proœbê o l¹dowanie.

                        statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := -99;
                        statki_t[ i ].si__lotniskowiec__l¹dowanie__kurs_aktualny := false;

                        // Aby lotniskowiec wybra³ nowy punkt patrolu.
                        statki_t[ i ].si_aktywnoœæ := sia_Brak;
                        statki_t[ i ].si__aktywnoœæ__okreœlenie_ostatnie_sekundy_i := 0;

                      end;
                    //---//if    ( statki_t[ i ] <> nil ) (...)


                  statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := -99;

                end;
              //---//if statek_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> -99 then


              if statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny > 0 then
                begin

                  if statek_f.zanurzenie_pu³ap__zadane_procent <> 0 then
                    statek_f.Zanurzenie_Zadane_Procent_Ustaw( 0 );

                  if statek_f.AbsolutePosition.Y > samolot_w_powietrzu_wysokoœæ_od_c then
                    begin

                      if statek_f.prêdkoœæ_zadana_procent < samolot_prêdkoœæ_lotu_procent_minimalny_c then
                        statek_f.Prêdkoœæ_Zadana_Procent_Ustaw(  System.Math.Ceil( samolot_prêdkoœæ_lotu_procent_minimalny_c )  );

                    end
                  else//if statek_f.AbsolutePosition.Y > samolot_w_powietrzu_wysokoœæ_od_c then
                    statek_f.Prêdkoœæ_Zadana_Procent_Ustaw( 0 );

                end
              else//if statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny > 0 then
                statek_f.Prêdkoœæ_Zadana_Procent_Ustaw( 0 );

            end;
          //---//if statek_f.si__statek_gracza__p³ywa then

        end
      else//if statek_f.czy_samolot then
      if    ( statek_f.czy_zanurzanie )
        and ( not statek_f.si__statek_gracza__p³ywa )
        and ( statek_f.zanurzenie_pu³ap__zadane_procent > 100 ) then
        statek_f.Zanurzenie_Zadane_Procent_Ustaw( 100 );


      if    ( statek_f.czy_lotniskowiec )
        and ( not statek_f.si__statek_gracza__p³ywa ) then
        statek_f.lotniskowiec__gotowy_na_przyjêcie_samolotu := true;

    end
  else//if statek_f.si__statek_gracza__p³ywa <> si__statek_gracza__p³ywa_poprzednia_wartoœæ_f then
    si__statek_gracza__strzela_kopia := sisgs_Brak;


  if statek_f.si__statek_gracza__strzela <> si__statek_gracza__strzela_poprzednia_wartoœæ_f then
    begin

      if si__statek_gracza__strzela_kopia = sisgs_Brak then
        si__statek_gracza__strzela_kopia := statek_f.si__statek_gracza__strzela;

      statek_f.Si_Wartoœci_Pocz¹tkowe_Ustaw( false, true );

      statek_f.si__statek_gracza__strzela := si__statek_gracza__strzela_kopia;

    end;
  //---//if statek_f.si__statek_gracza__strzela <> si__statek_gracza__strzela_poprzednia_wartoœæ_f then

end;//---//Funkcja SI__Statek_Gracza__Sterowanie_Ustaw().

//Funkcja SI__Syrena_Okrêtowa__Uruchom().
procedure TStatki_Form.SI__Syrena_Okrêtowa__Uruchom( const statek_f : TStatek );
begin

  if   ( statek_f = nil )
    or (  not Assigned( statek_f )  )
    or ( not statek_f.si_decyduje )
    or (  Random( 2 ) = 0  ) then
    Exit;


  DŸwiêki__Efekt__Utwórz_Jeden( der_Syrena_Okrêtowa, statek_f.AbsolutePosition );

end;//---//SI__Syrena_Okrêtowa__Uruchom().

//Funkcja SOS__Inicjuj().
procedure TStatki_Form.SOS__Inicjuj( const statek_f : TStatek );
begin

  if   ( statek_f = nil )
    or (  not Assigned( statek_f )  ) then
    Exit;


  statek_f.sos__czas_utworzenia_ostatniego_sekundy_i := Czas_Teraz_W_Sekundach();

  Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__statek__sos_nadaje_c, -99, IntToStr( statek_f.id_statek )  );

  if not czy_klient_g then
    SOS__Przygotuj( statek_f.id_statek );

end;//---//Funkcja SOS__Inicjuj().

//Funkcja SOS__Przygotuj().
procedure TStatki_Form.SOS__Przygotuj( const id_statek_f : integer );
var
  i : integer;
  zts : string;
begin

  for i := 0 to Length( statki_t ) - 1 do
    if    ( statki_t[ i ] <> nil )
      and ( statki_t[ i ].id_statek = id_statek_f ) then
      begin

        zts :=
          'SOS, ' +
          statki_t[ i ].gracz__nazwa.Text +
          //Trim(  FormatFloat( '### ### ##0', statki_t[ i ].id_statek )  ) +
          ' (' + t³umaczenie_komunikaty_r.ekran_napis__grupa__skrót + ' ' + Trim(  FormatFloat( '### ### ##0', statki_t[ i ].id_grupa )  ) + ')' +
          ', x ' + Trim(  FormatFloat( '### ### ##0', statki_t[ i ].AbsolutePosition.X )  ) +
          ', y ' + Trim(  FormatFloat( '### ### ##0', statki_t[ i ].AbsolutePosition.Y )  ) +
          ', z ' + Trim(  FormatFloat( '### ### ##0', statki_t[ i ].AbsolutePosition.Z )  ) +
          '.';

        Pokój_Rozmów_Memo.Lines.Add( zts );

        Informacja_Dodatkowa_Dodaj( '. . . - - - . . . ' );
        Informacja_Dodatkowa_Dodaj( zts );
        Informacja_Dodatkowa_Dodaj( '. . . - - - . . . ' );

        Trafienia_Efekt__Utwórz_Jeden( Gra_Obiekty_GLDummyCube, er_SOS, statki_t[ i ].AbsolutePosition.X, statki_t[ i ].AbsolutePosition.Y + 10, statki_t[ i ].AbsolutePosition.Z, nil, -1, -1 );

        Break;

      end;
    //---//if    ( statki_t[ i ] <> nil ) (...)

end;//---//Funkcja SOS__Przygotuj().

//Funkcja Statek_Gracza__Gracz_Tryb_Zwróæ().
function TStatki_Form.Statek_Gracza__Gracz_Tryb_Zwróæ() : TStatek;
begin

  //
  // Funkcja zale¿nie od ustawionego trybu próbuje zwróciæ wskaŸnik na odpowiedni statek gracza.
  //
  // Zwraca wskaŸnik na statek gracza.
  //

  if    ( gracz_tryb_g = gt_Samolot )
    and ( samolot__statek_gracza <> nil ) then
    Result := samolot__statek_gracza
  else//if    ( gracz_tryb_g = gt_Samolot ) (...)
  if    ( gracz_tryb_g = gt_Statek )
    and ( statek_gracza <> nil ) then
    Result := statek_gracza
  else//if    ( gracz_tryb_g = gt_Statek ) (...)
    Result := nil;

end;//---//Funkcja Statek_Gracza__Gracz_Tryb_Zwróæ().

//Funkcja Statek_Klient_Cel_Ustaw().
procedure TStatki_Form.Statek_Klient_Cel_Ustaw( const id_statek_f : integer; const cel_wspó³rzêdne_f : GLS.VectorGeometry.TAffineVector );
var
  i : integer;
  zt_statek : TStatek;
begin

  //
  // Funkcja ustawia parametry celu statku zgodnie z poleceniami gracza.
  //
  // Parametry:
  //   id_statek_f - identyfikator statku, którego dotycz¹ wytyczne.
  //   cel_wspó³rzêdne_f - bezwzglêdne wspó³rzêdne celu.
  //


  zt_statek := nil;


  for i := 0 to Length( statki_t ) - 1 do
    if    ( statki_t[ i ] <> nil )
      and ( statki_t[ i ].id_statek = id_statek_f ) then
      begin

        zt_statek := statki_t[ i ];
        Break;

      end;
    //---//if    ( statki_t[ i ] <> nil ) (...)


  if   ( zt_statek = nil )
    or (  not Assigned( zt_statek )  ) then
    Exit;


  zt_statek.Cel_Wspó³rzêdne_Ustaw( cel_wspó³rzêdne_f );

end;//---//Funkcja Statek_Klient_Cel_Ustaw().

//Funkcja Statek_Przywróæ_Do_Gry().
procedure TStatki_Form.Statek_Przywróæ_Do_Gry( const id_statek_f : integer );
var
  i : integer;
begin

  //
  // Funkcja wyszukuje po id statek, który nale¿y przywróciæ do gry i wywo³uje funkcjê przywracania statku do gry.
  //

  for i := 0 to Length( statki_t ) - 1 do
    if statki_t[ i ].id_statek = id_statek_f then
      begin

        Statek_Przywróæ_Do_Gry( statki_t[ i ] );

        Break;

      end;
    //---//if statek_f = statki_t[ i ] then

end;//---//Funkcja Statek_Przywróæ_Do_Gry().

//Funkcja Statek_Przywróæ_Do_Gry().
procedure TStatki_Form.Statek_Przywróæ_Do_Gry( const statek_f : TStatek );
var
  czy_id_statek_schemat_zmiana_l,
  czy_projektowy_tryb__statek_l,
  //czy_samolot_l,
  czy_samolot__statek_gracza_l,
  czy_statek_gracza_l,
  si_decyduje_l,
  si__statek_gracza__p³ywa_l
    : boolean;
  i,
  j,
  id_gracz_l,
  id_grupa_l,
  id_statek_l,
  id_statek__lotniskowiec_dla_samolotu_l, // Je¿eli gracz ma samolot i lotniskowiec to samolot zostanie odnowiony na lotniskowcu.
  id_statek_schemat_l
    : integer;
  gracz__nazwa_l : string;
  gracz_tryb_l : TGracz_Tryb;
  kamera_tryb_l,
  kamera_tryb_kopia_l
    : TKamera_Tryb;
  si__statek_gracza__strzela_l : TSi__Statek_Gracza__Strzela;
begin

  //
  // Funkcja zwalnia i tworzy na nowo statek.
  //

  id_statek_l := -99;
  id_statek__lotniskowiec_dla_samolotu_l := -99;
  czy_id_statek_schemat_zmiana_l := false;


  for i := 0 to Length( statki_t ) - 1 do
    if statek_f = statki_t[ i ] then
      begin

        if statki_t[ i ].czy_samolot then
          begin

            if    ( statki_t[ i ].id_statek_schemat__samolot_zmieñ_na <> -1 )
              and ( statki_t[ i ].id_statek__lotniskowiec_dla_samolotu__samolot_zmieñ_na <> -99 ) then
              id_statek__lotniskowiec_dla_samolotu_l := statki_t[ i ].id_statek__lotniskowiec_dla_samolotu__samolot_zmieñ_na
            else//if    ( statki_t[ i ].id_statek_schemat__samolot_zmieñ_na <> -1 ) (...)
              for j := 0 to Length( statki_t ) - 1 do
                if    ( statki_t[ i ].id_gracz = statki_t[ j ].id_gracz )
                  and ( statki_t[ j ].czy_lotniskowiec ) then
                  begin

                    if   ( statki_t[ j ].punkty_¿ycia_aktualne <= 0 )
                      or ( statki_t[ j ].czy_usun¹æ_statek ) then
                      Exit // Je¿eli gracz ma samolot oraz lotniskowiec i lotniskowiec tonie to samolot nie jest odnawiany.
                    else//if   ( statki_t[ j ].punkty_¿ycia_aktualne <= 0 ) (...)
                      begin

                        id_statek__lotniskowiec_dla_samolotu_l := j;
                        Break;

                      end;
                    //---//if   ( statki_t[ j ].punkty_¿ycia_aktualne <= 0 ) (...)

                  end;
                //---//if    ( statki_t[ i ].id_gracz = statki_t[ j ].id_gracz ) (...)

          end;
        //---//if statki_t[ i ].czy_samolot then


        id_gracz_l := statki_t[ i ].id_gracz;
        id_grupa_l := statki_t[ i ].id_grupa;
        id_statek_l := statki_t[ i ].id_statek;

        if    ( statki_t[ i ].id_statek_schemat__samolot_zmieñ_na <> -1 )
          and ( statki_t[ i ].czy_samolot ) then
          begin

            id_statek_schemat_l := statki_t[ i ].id_statek_schemat__samolot_zmieñ_na;
            czy_id_statek_schemat_zmiana_l := true;

          end
        else//if statki_t[ i ].id_statek_schemat__samolot_zmieñ_na <> -1 then
          begin

            id_statek_schemat_l := statki_t[ i ].id_statek_schemat;
            //czy_id_statek_schemat_zmiana_l := false;

          end;
        //---//if statki_t[ i ].id_statek_schemat__samolot_zmieñ_na <> -1 then

        //czy_samolot_l := statki_t[ i ].czy_samolot;
        si_decyduje_l := statki_t[ i ].si_decyduje;
        si__statek_gracza__p³ywa_l := statki_t[ i ].si__statek_gracza__p³ywa;
        si__statek_gracza__strzela_l := statki_t[ i ].si__statek_gracza__strzela;
        gracz__nazwa_l := statki_t[ i ].gracz__nazwa.Text;
        gracz_tryb_l := gracz_tryb_g;

        if statek_gracza = statki_t[ i ] then
          begin

            czy_statek_gracza_l := true;
            czy_samolot__statek_gracza_l := false;

          end
        else//if statek_gracza = statki_t[ i ] then
          begin

            czy_statek_gracza_l := false;

            if samolot__statek_gracza = statki_t[ i ] then
              begin

                czy_samolot__statek_gracza_l := true;

              end
            else//if samolot__statek_gracza = statki_t[ i ] then
              czy_samolot__statek_gracza_l := false;

          end;
        //---//if samolot__statek_gracza = statki_t[ i ] then


        if projektowy_tryb__statek = statki_t[ i ] then
          czy_projektowy_tryb__statek_l := true
        else//if projektowy_tryb__statek = statki_t[ i ] then
          czy_projektowy_tryb__statek_l := false;


        if kamera_tryb_g = kt_Statek__Projektowy_Tryb then
          kamera_tryb_l := kt_Statek__Projektowy_Tryb
        else//if kamera_tryb_g = kt_Statek__Projektowy_Tryb then
          kamera_tryb_l := kt_Brak;

        kamera_tryb_kopia_l := kamera_dla_prze³¹czania_statku_kopia__kamera_tryb_g;


        Statek_Zwolnij( i, false );


        gracz_tryb_g := gracz_tryb_l;
        kamera_dla_prze³¹czania_statku_kopia__kamera_tryb_g := kamera_tryb_kopia_l;

        statki_t[ i ] := TStatek.Create(  Gra_Obiekty_GLDummyCube, Gra_GLCollisionManager, Efekt__Element_Uszkodzenie_Menad¿er__Zwróæ(), id_gracz_l, id_statek_l, Statek_Odczytaj_Schemat( id_statek_schemat_l ), prymitywy_lista_t, Punkty_¯ycia_WskaŸnik__Material_Options_Ustal(), statek_create_funkcje_g, t³umaczenie_komunikaty_r  );
        statki_t[ i ].id_grupa := id_grupa_l;
        statki_t[ i ].id_statek_schemat := id_statek_schemat_l;
        statki_t[ i ].gracz__nazwa.Text := gracz__nazwa_l;
        statki_t[ i ].Wygl¹d_Elementy__Noc_Zmieñ( dzieñ_jasnoœæ_g, Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBox.Checked, Wygl¹d_Elementy__Kolor_Noc_Zmieñ );


        if   ( czy_samolot__statek_gracza_l )
          or ( czy_statek_gracza_l ) then
          begin

            if czy_samolot__statek_gracza_l then
              samolot__statek_gracza := statki_t[ i ]
            else//if czy_samolot__statek_gracza_l then
              statek_gracza := statki_t[ i ];

            Celowanie_ParametryClick( nil );

            statki_t[ i ].Elementy_Gracza_Dostosuj( -99, Celownik_Bombowiec_Widocznoœæ_CheckBox.Checked, Gra_GLCamera.AbsolutePosition.Y < 0, L¹dowanie_U³atwione_CheckBox.Checked, Punkty_¯ycia_WskaŸnik__Gracz_CheckBox.Checked, false, false, Obrót_K¹t_Zablokowany_WskaŸnik_CheckBox.Checked, Obrót_K¹t_Zablokowany_Strza³_WskaŸnik_CheckBox.Checked, Prze³adowanie_WskaŸnik_CheckBox.Checked );

            Interfejs_Parametry_Wed³ug_Statku_Ustaw(); // Je¿eli zmieniono samolot i s¹ inne rodzaje broni to pojawia siê b³¹d dostêpu.

            Statek_Parametry_Ustaw( nil ); //???

            if kamera_tryb_l <> kt_Statek__Projektowy_Tryb then
              if   (
                         ( gracz_tryb_g = gt_Statek )
                     and ( czy_statek_gracza_l )
                   )
                or (
                         ( gracz_tryb_g = gt_Samolot )
                     and ( czy_samolot__statek_gracza_l )
                   ) then
                Kamera_Na_Statek_Gracza_Ustaw();

          end
        else//if   ( czy_samolot__statek_gracza_l ) (...)
          begin

            statki_t[ i ].Elementy_Gracza_Widocznoœæ( Gracz_Grupa_SpinEdit.Value, false );
            statki_t[ i ].Elementy_Gracza_Dostosuj( Gracz_Grupa_SpinEdit.Value, Celownik_Bombowiec_Widocznoœæ_CheckBox.Checked, Gra_GLCamera.AbsolutePosition.Y < 0, L¹dowanie_U³atwione_CheckBox.Checked, false, Punkty_¯ycia_WskaŸnik__Przeciwnik_CheckBox.Checked, Punkty_¯ycia_WskaŸnik__Sojusznik_CheckBox.Checked, false, false, false );

          end;
        //---//if   ( czy_samolot__statek_gracza_l ) (...)


        if czy_projektowy_tryb__statek_l then
          projektowy_tryb__statek := statki_t[ i ];


        if czy_klient_g then
          statki_t[ i ].Visible := false; // Po przywróceniu statku do gry klient umieszcza go na wyliczonej samodzielnie pozycji i dopiero po odebraniu danych o pozycji z serwera zaktualizuje pozycjê statku i ustawi na widoczny.


        statki_t[ i ].si_decyduje := si_decyduje_l;
        statki_t[ i ].si__statek_gracza__p³ywa := si__statek_gracza__p³ywa_l;
        statki_t[ i ].si__statek_gracza__strzela := si__statek_gracza__strzela_l;

        if statki_t[ i ].czy_lotniskowiec then
          statki_t[ i ].lotniskowiec__gotowy_na_przyjêcie_samolotu := not statki_t[ i ].si_decyduje;


        if    ( czy_projektowy_tryb__statek_l )
          and ( kamera_tryb_l = kt_Statek__Projektowy_Tryb ) then
          Kamera_Prze³¹cz( kt_Statek__Projektowy_Tryb );


        Break;

      end;
    //---//if statek_f = statki_t[ i ] then


  dŸwiêki__losowe_uruchomione__wszystkie__statki_g := false;


  if id_statek_l = -99 then
    begin

      Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_zlokalizowaæ_statku_do_przywrócenia, t³umaczenie_komunikaty_r.komunikat__informacja, MB_ICONEXCLAMATION );
      Exit;

    end;
  //---//if id_statek_l = -99 then


  if    ( statki_t[ i ].czy_samolot )
    and ( id_statek__lotniskowiec_dla_samolotu_l <> -99 )then
    begin

      statki_t[ id_statek__lotniskowiec_dla_samolotu_l ].Samolot_Przyjmij( statki_t[ i ], true );

    end
  else//if    ( statki_t[ i ].czy_samolot ) (...)
    if    ( i >= 0 )
      and (  i <= Length( statki_t ) - 1  ) then
      Statki__Rozstaw( statki_t[ i ] );


  if    ( czy_serwer_g )
    //and ( id_statek_l <> -99 ) // Jest sprawdzenie wy¿ej.
    and ( not czy_id_statek_schemat_zmiana_l )then // Je¿eli nast¹pi zmiana schematu statku to klient uwzglêdnia to w Wieloosobowe_Statki__Parametry_Ustaw().
    Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__statek__przywróæ_do_gry_c, -99, IntToStr( id_statek_l )  );

end;//---//Funkcja Statek_Przywróæ_Do_Gry().

//Funkcja Statek_Odczytaj_Schemat().
function TStatki_Form.Statek_Odczytaj_Schemat( const lista_indeks_f : integer ) : string;
begin

  if   ( lista_indeks_f < 0 )
    or (  lista_indeks_f > Length( statki_lista_t ) - 1  ) then
    begin

      Result := '';

      Log_Wypisz( t³umaczenie_komunikaty_r.komunikat__brak_definicji_statku );
      Exit;

    end;
  //---//if   ( lista_indeks_f < 0 ) (...)

  Result := statki_lista_t[ lista_indeks_f ].treœæ__sl;

end;//---//Funkcja Statek_Odczytaj_Schemat().

//Funkcja Statek__Samolot_Odczytaj_Schemat_Indeks().
function TStatki_Form.Statek__Samolot_Odczytaj_Schemat_Indeks( const samolot_nazwa_wyœwietlana_f : string ) : integer;
var
  i : integer;
begin

  //
  // Funkcja na podstawie podanej nazwy samolotu próbuje wyszukaæ w polu wyboru statków indeks nazwy samolotu.
  //
  // Zwraca indeks nazwy samolotu lub -1 gdy nie znajdzie zgodnej nazwy.
  //
  // Parametry:
  //   samolot_nazwa_wyœwietlana_f
  //

  Result := -1;

  for i := 0 to Statek_ComboBox.Items.Count - 1 do
    if Statek_ComboBox.Items[ i ] = samolot_nazwa_wyœwietlana_f then
      begin

        Result := i;
        Exit;

      end;
    //---//if Statek_ComboBox.Items[ i ] = samolot_nazwa_wyœwietlana_f then

end;//---//Funkcja Statek__Samolot_Odczytaj_Schemat_Indeks().

//Funkcja Statek__Samolot_Odczytaj_Schemat().
function TStatki_Form.Statek__Samolot_Odczytaj_Schemat( const samolot_nazwa_wyœwietlana_f : string ) : string;
var
  //i
  zti
    : integer;
begin

  //zti := -99;
  //
  //for i := 0 to Statek_ComboBox.Items.Count - 1 do
  //  if Statek_ComboBox.Items[ i ] = samolot_nazwa_wyœwietlana_f then
  //    begin
  //
  //      zti := i;
  //      Break;
  //
  //    end;
  //  //---//if Statek_ComboBox.Items[ i ] = samolot_nazwa_wyœwietlana_f then

  zti := Statek__Samolot_Odczytaj_Schemat_Indeks( samolot_nazwa_wyœwietlana_f );

  if   ( zti < 0 )
    or (  zti > Length( statki_lista_t ) - 1  ) then
    begin

      Result := '';

      Log_Wypisz( t³umaczenie_komunikaty_r.komunikat__brak_definicji_samolotu );
      Exit;

    end;
  //---//if   ( zti < 0 ) (...)

  Result := Statek_Odczytaj_Schemat( zti );

end;//---//Funkcja Statek__Samolot_Odczytaj_Schemat().

//Funkcja Statek_ZnajdŸ().
function TStatki_Form.Statek_ZnajdŸ( pointer_f : Pointer ) : Pointer;
begin

  //
  // Funkcja próbuje znaleŸæ statek, w który trafiono.
  //
  // Zwraca wskaŸnik na statek, w który trafiono.
  //
  // Parametry:
  //   pointer_f
  //

  Result := nil;

  if pointer_f = nil then
    Exit
  else//if pointer_f = nil then
    if TComponent(pointer_f) is TStatek then
      begin

        Result := pointer_f;
        Exit;

      end
    else//if TComponent(pointer_f) is TStatek then
      if TComponent(pointer_f).Owner <> nil then
        Result := Statek_ZnajdŸ( TComponent(pointer_f).Owner );

end;//---//Funkcja Statek_ZnajdŸ().

//Funkcja Statek_Zwolnij().
procedure TStatki_Form.Statek_Zwolnij( const indeks_statku_f : integer; const zwalniaj_samoloty_na_lotniskowcach_f : boolean = true );
var
  i,
  zti
    : integer;
  indeksy_statków_samolotów_do_zwolnienia_t_l : array of integer;
begin

  //
  // Funkcja zwalnia zwalnia jeden statek o wskazanym indeksie tabeli.
  //

  if   ( indeks_statku_f < 0 )
    or (  indeks_statku_f > Length( statki_t ) - 1 ) then
    Exit;


  // Aby nie zwolni³o kamery wraz ze statkiem.
  //while Gra_GLCamera.Parent = statki_t[ indeks_statku_f ] do
  while ( Gra_GLCamera.Parent = statki_t[ indeks_statku_f ] )
     or ( Gra_GLCamera.Parent = statki_t[ indeks_statku_f ].falowanie_gl_dummy_cube ) do
    Kamera_Prze³¹cz( kt_Swobodna );


  // Odpina samoloty ze statków aby zosta³y zwolnione osobno.
  SetLength( indeksy_statków_samolotów_do_zwolnienia_t_l, 0 );

  for i := 0 to Length( statki_t ) - 1 do
    if    ( statki_t[ i ] <> nil )
      and ( statki_t[ i ].czy_samolot )
      and ( statki_t[ i ].Samolot_Na_Lotniskowcu() <> nil )
      and ( statki_t[ i ].Samolot_Na_Lotniskowcu().falowanie_gl_dummy_cube = statki_t[ indeks_statku_f ].falowanie_gl_dummy_cube ) then
      begin

        statki_t[ i ].Samolot_Lotniskowiec_Od³¹cz();

        if zwalniaj_samoloty_na_lotniskowcach_f then
          begin

            zti := Length( indeksy_statków_samolotów_do_zwolnienia_t_l );
            SetLength( indeksy_statków_samolotów_do_zwolnienia_t_l, zti + 1 );
            indeksy_statków_samolotów_do_zwolnienia_t_l[ zti ] := i;

          end;
        //---//if zwalniaj_samoloty_na_lotniskowcach_f then

      end;
    //---//if    ( statki_t[ i ] <> nil ) (...)

  for i := 0 to Length( statki_t ) - 1 do // Dodatkowe sprawdzenie.
    if    ( statki_t[ i ] <> nil )
      and ( statki_t[ i ].Parent = statki_t[ indeks_statku_f ].falowanie_gl_dummy_cube ) then
      begin

        statki_t[ i ].Parent := Gra_Obiekty_GLDummyCube;

        if zwalniaj_samoloty_na_lotniskowcach_f then
          begin

            zti := Length( indeksy_statków_samolotów_do_zwolnienia_t_l );
            SetLength( indeksy_statków_samolotów_do_zwolnienia_t_l, zti + 1 );
            indeksy_statków_samolotów_do_zwolnienia_t_l[ zti ] := i;

          end;
        //---//if zwalniaj_samoloty_na_lotniskowcach_f then

      end;
    //---//if    ( statki_t[ i ] <> nil ) (...)


  // Je¿eli zwalnia siê lotniskowiec to samolotom, które na nim 'l¹duj¹' resetuje ustawienia 'l¹dowania'.
  for i := 0 to Length( statki_t ) - 1 do
    if    ( statki_t[ i ] <> nil )
      and ( statki_t[ i ].czy_samolot )
      and ( statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = statki_t[ indeks_statku_f ].id_statek ) then
      begin

        statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := -99;

        if    (
                   ( statki_t[ i ].si_decyduje )
                or ( statki_t[ i ].si__statek_gracza__p³ywa )
              )
          and ( statki_t[ i ].si_aktywnoœæ in [ sia_Samolot__L¹dowanie, sia_Samolot__L¹dowanie__Podchodzenie ] ) then
          begin

            statki_t[ i ].si_aktywnoœæ := sia_Patrol;
            statki_t[ i ].samolot__l¹dowanie__podchodzenie_krok := 0;
            statki_t[ i ].si__cel_odleg³oœæ := -1;

            if statki_t[ i ].si__samolot_zanurzenie_pu³ap__zadane < samolot_prêdkoœæ_lotu_procent_minimalny_c then
              begin

                statki_t[ i ].si__samolot_zanurzenie_pu³ap__zadane := samolot_prêdkoœæ_lotu_procent_minimalny_c;
                statki_t[ i ].Zanurzenie_Zadane_Procent_Ustaw(  Zaokr¹glij__W_Górê( statki_t[ i ].si__samolot_zanurzenie_pu³ap__zadane )  );

              end;
            //---//if statki_t[ i ].si__samolot_zanurzenie_pu³ap__zadane < samolot_prêdkoœæ_lotu_procent_minimalny_c then

            if statki_t[ i ].prêdkoœæ_zadana_procent < samolot_prêdkoœæ_lotu_procent_minimalny_c then
              statki_t[ i ].Prêdkoœæ_Zadana_Procent_Ustaw(  System.Math.Ceil( samolot_prêdkoœæ_lotu_procent_minimalny_c )  );

          end;
        //---//if    ( (...)

      end;
    //---//if    ( statki_t[ i ] <> nil ) (...)


  // Je¿eli zwalnia siê samolot to lotniskowcom, na których mia³ 'l¹dowaæ' resetuje ustawienia samolotów zamierzaj¹cych na nich 'l¹dowaæ'.
  for i := 0 to Length( statki_t ) - 1 do
    if    ( statki_t[ i ] <> nil )
      and ( not statki_t[ i ].czy_samolot )
      and (
               ( statki_t[ i ].id_statek__lotniskowiec__ma_samolot_na_pok³adzie = statki_t[ indeks_statku_f ].id_statek )
            or ( statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie = statki_t[ indeks_statku_f ].id_statek )
          ) then
      begin

        statki_t[ i ].id_statek__lotniskowiec__ma_samolot_na_pok³adzie := -99;
        statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := -99;
        statki_t[ i ].si__lotniskowiec__l¹dowanie__kurs_aktualny := false;

        if statki_t[ i ].si_aktywnoœæ in [ sia_Patrol ] then
          begin

            // Aby po zwolnieniu samolotu lotniskowiec wybra³ nowy punkt patrolu.

            statki_t[ i ].si_aktywnoœæ := sia_Brak;
            statki_t[ i ].si__aktywnoœæ__okreœlenie_ostatnie_sekundy_i := 0;

          end;
        //---//if statki_t[ i ].si_aktywnoœæ in [ sia_Patrol ] then

      end;
    //---//if    ( statki_t[ i ] <> nil ) (...)


  for i := trafienia_efekt_list.Count - 1 downto 0 do
    begin

      // Zwalnia efekty umieszczone na statku.
      // Je¿eli efekty umieszczone na statku nadal s¹ na scenie pojawiaj¹ siê b³êdy dostêpu.

      if   ( TTrafienia_Efekt(trafienia_efekt_list[ i ]).Owner = statki_t[ indeks_statku_f ] )
        or ( TTrafienia_Efekt(trafienia_efekt_list[ i ]).Parent = statki_t[ indeks_statku_f ] ) then
        Trafienia_Efekt__Zwolnij_Jeden( TTrafienia_Efekt(trafienia_efekt_list[ i ]) );

    end;
  //---//for i := trafienia_efekt_list.Count - 1 downto 0 do


  if projektowy_tryb__statek = statki_t[ indeks_statku_f ] then
    projektowy_tryb__statek := nil;

  if samolot__statek_gracza = statki_t[ indeks_statku_f ] then
    begin

      gracz_tryb_g := gt_Statek;
      samolot__statek_gracza := nil;

    end;
  //---//if samolot__statek_gracza = statki_t[ indeks_statku_f ] then


  if statek_gracza = statki_t[ indeks_statku_f ] then
    statek_gracza := nil; // Nie zmienia statki_t[ 0 ].


  FreeAndNil( statki_t[ indeks_statku_f ] );


  for i := 0 to Length( indeksy_statków_samolotów_do_zwolnienia_t_l ) - 1 do
    Statek_Zwolnij( indeksy_statków_samolotów_do_zwolnienia_t_l[ i ] );


  SetLength( indeksy_statków_samolotów_do_zwolnienia_t_l, 0 );

end;//---//Funkcja Statek_Zwolnij().

//Funkcja Statki_Kolizja_Oznaczenie_SprawdŸ().
function TStatki_Form.Statki_Kolizja_Oznaczenie_SprawdŸ( string_list_f : TStringList; const identyfikator_elementu_f : Int64; const identyfikator_elementu__dodatkowy_f : integer = -1 ) : boolean;
var
  i : integer;
  zti64 : Int64;
  zts : string;
begin

  //
  // Funkcja sprawdza czy jest oznaczona nieprzeterminowana kolizja z podanym obiektem.
  //
  // Zwraca prawdê gdy jest oznaczona nieprzeterminowana kolizja z podanym obiektem.
  //
  // Parametry:
  //   string_list_f - lista kolizji;
  //   identyfikator_elementu_f.
  //   identyfikator_elementu__dodatkowy_f
  //

  Result := false;


  if   ( string_list_f = nil )
    or (  not Assigned( string_list_f )  ) then
    Exit;


  for i := string_list_f.Count - 1 downto 0 do
    begin

      zts := Copy(  string_list_f[ i ], Pos( '|', string_list_f[ i ] ) + 1, Length( string_list_f[ i ] )  );

      try
        zti64 := StrToInt64( zts );
      except
        zti64 := statek_kolizja_oznaczenie_ponowne_czas_sekundy_c;
      end;
      //---//try

      if Czas_Miêdzy_W_Sekundach( zti64 ) >= statek_kolizja_oznaczenie_ponowne_czas_sekundy_c then
        begin

          string_list_f.Delete( i ); // Czyœci przeterminowane oznaczenia kolizji.

        end
      else//if Czas_Miêdzy_W_Sekundach( zti64 ) >= statek_kolizja_oznaczenie_ponowne_czas_sekundy_c then
        begin

          zts := IntToStr( identyfikator_elementu_f );

          if identyfikator_elementu__dodatkowy_f >= 0 then
            zts := zts + statki_kolizja_oznaczenie_sprawdŸ__identyfikator_elementu__dodatkowy__separator_c + IntToStr( identyfikator_elementu__dodatkowy_f );

          //if Pos(  IntToStr( identyfikator_elementu_f ) + '|', string_list_f[ i ] ) = 1 then
          if Pos(  zts + '|', string_list_f[ i ] ) = 1 then
            begin

              // Kolizja z podanym obiektem jest ju¿ oznaczona i jest nieprzeterminowana.

              Result := true;
              Exit;

            end;
          //---//if Pos(  zts + '|', string_list_f[ i ] ) = 1 then

        end;
      //---//if Czas_Miêdzy_W_Sekundach( zti64 ) >= statek_kolizja_oznaczenie_ponowne_czas_sekundy_c then

    end;
  //---//for i := string_list_f.Count - 1 downto 0 do

end;//---//Funkcja Statki_Kolizja_Oznaczenie_SprawdŸ().

//Statki__Punkty_¯ycia_WskaŸnik__Efekty_Tryb_Ustaw().
procedure TStatki_Form.Statki__Punkty_¯ycia_WskaŸnik__Efekty_Tryb_Ustaw();
var
  i : integer;
begin

  for i := 0 to Length( statki_t ) - 1 do
    if statki_t[ i ] <> nil then
      begin

        statki_t[ i ].punkty_¿ycia_wskaŸnik__efekty_tryb := TPunkty_¯ycia_WskaŸnik__Efekty_Tryb(Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBox.ItemIndex + 1);
        statki_t[ i ].Punkty_¯ycia__WskaŸnik__Efekty_Tryb_Ustaw( Punkty_¯ycia_WskaŸnik__Material_Options_Ustal() );
        statki_t[ i ].Punkty_¯ycia__WskaŸnik__Noc_Zmieñ( dzieñ_jasnoœæ_g );

      end;
    //---//if statki_t[ i ] <> nil then

end;//---//Statki__Punkty_¯ycia_WskaŸnik__Efekty_Tryb_Ustaw().

//Funkcja Statki__Rozstaw().
procedure TStatki_Form.Statki__Rozstaw( const statek_f : TStatek );
var
  czy_kolizja_wykryta_l,
  koniec_grup_l
    : boolean;
  i,
  j,
  zti_1,
  zti_2,
  id_grupa_l,
  pozycja_ustawienie_iloœæ_prób
  //statki_kolejnoœæ_w_grupie_l
  //statki_iloœæ_w_grupie_l
    : integer;
  statek__zasiêg_broni_najwiêkszy : real;
  statki_wielkoœæ__x_minus_suma_l,
  statki_wielkoœæ__x_plus_suma_l,
  statki_wielkoœæ_w_grupie_suma_l
    : single;
  id_statki_w_grupie_t : array of integer;
  zt_cursor_kopia : TCursor;
begin

  //
  // Funkcja ustawia pocz¹tkow¹ pozycjê statków (tworzy formacjê).
  //
  // Parametry:
  //   statek_f:
  //     nil - rozstawia wszystkie statki.
  //     nie nil - rozstawia wskazany statek.
  //


  zt_cursor_kopia := Screen.Cursor;
  Screen.Cursor := crHourGlass;

  koniec_grup_l := false; // Aby uruchomiæ pierwszy przebieg pêtli.
  id_grupa_l := -1;


  if statek_f = nil then
    begin

      if Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex >= 0 then
        begin

          gra_pozycja_pocz¹tkowa_parametry_t[ 1 ] := statki_pozycja_pocz¹tkowa_parametry_t[ 1 ];
          gra_pozycja_pocz¹tkowa_parametry_t[ 2 ] := statki_pozycja_pocz¹tkowa_parametry_t[ 2 ];

        end
      else//if Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex >= 0 then
        begin

          gra_pozycja_pocz¹tkowa_parametry_t[ 1 ] := l¹d_pozycja_pocz¹tkowa_parametry_t[ 1 ];
          gra_pozycja_pocz¹tkowa_parametry_t[ 2 ] := l¹d_pozycja_pocz¹tkowa_parametry_t[ 2 ];

        end;
      //---//if Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex >= 0 then

    end;
  //---//if statek_f = nil then


  while not koniec_grup_l do
    begin

      // Pêtla dla wszystkich grup.


      koniec_grup_l := true;


      if statek_f = nil then
        begin

          if id_grupa_l <= -1 then
            begin

              // Wyszuka najmniejsze id_grupa.

              for i := 0 to Length( statki_t ) - 1 do
                if   ( id_grupa_l <= -1 )
                  or ( statki_t[ i ].id_grupa < id_grupa_l ) then
                  begin

                    id_grupa_l := statki_t[ i ].id_grupa;

                    if koniec_grup_l then
                      koniec_grup_l := false;

                  end;
                //---//if statki_t[ i ].id_grupa > id_grupa_l then

            end
          else//if id_grupa_l <= -1 then
            begin

              // Wyszuka kolejne id_grupa.

              for i := 0 to Length( statki_t ) - 1 do
                if statki_t[ i ].id_grupa > id_grupa_l then
                  begin

                    koniec_grup_l := false;
                    id_grupa_l := statki_t[ i ].id_grupa;
                    Break;

                  end;
                //---//if statki_t[ i ].id_grupa > id_grupa_l then

            end;
          //---//if id_grupa_l <= -1 then


          if   ( id_grupa_l <= -1 )
            or ( koniec_grup_l ) then
            begin

              Screen.Cursor := zt_cursor_kopia;
              Exit; // Nie ma wiêcej grup.

            end;
          //---//if   ( id_grupa_l <= -1 ) (...)

        end
      else//if statek_f = nil then
        begin

          id_grupa_l := statek_f.id_grupa;

        end;
      //---//if statek_f = nil then


      //statki_iloœæ_w_grupie_l := 0;
      statki_wielkoœæ_w_grupie_suma_l := 0;
      SetLength( id_statki_w_grupie_t, 0 );

      for i := 0 to Length( statki_t ) - 1 do
        if    ( statki_t[ i ].id_grupa = id_grupa_l )
          and (
                   ( not statki_t[ i ].czy_samolot )
                or (
                         ( statki_t[ i ].czy_samolot )
                     and ( statki_t[ i ].Samolot_Na_Lotniskowcu() = nil ) // Samolotów na lotniskowcach nie rozstawia.
                   )
              ) then
          begin

            //inc( statki_iloœæ_w_grupie_l );
            statki_wielkoœæ_w_grupie_suma_l := statki_wielkoœæ_w_grupie_suma_l + statki_t[ i ].x_prymityw_odleg³oœæ + statki_t[ i ].z_prymityw_odleg³oœæ;


            if   ( statek_f = nil )
              or (
                       ( statek_f <> nil )
                   and ( statki_t[ i ].id_statek = statek_f.id_statek )
                 ) then
              begin

                zti_1 := Length( id_statki_w_grupie_t );
                SetLength( id_statki_w_grupie_t, zti_1 + 1 );
                id_statki_w_grupie_t[ zti_1 ] := statki_t[ i ].id_statek;

              end;
            //---//if   ( statek_f = nil ) (...)

          end;
        //---//if    ( statki_t[ i ].id_grupa = id_grupa_l ) (...)


      // Ustawia losow¹ kolejnoœæ statków.
      for i := 0 to Length( id_statki_w_grupie_t ) - 1 do
        begin

          zti_2 := System.Math.RandomRange(  0, Length( id_statki_w_grupie_t )  );
          zti_1 := id_statki_w_grupie_t[ zti_2 ];
          id_statki_w_grupie_t[ zti_2 ] := id_statki_w_grupie_t[ i ];
          id_statki_w_grupie_t[ i ] := zti_1;

        end;
      //---//for i := 0 to Length( id_statki_w_grupie_t ) - 1 do
      //---// Ustawia losow¹ kolejnoœæ statków.


      // Gdy gracz nie jest gotowy to ma id_grupa = 0 i przy rozstawianiu statków indeks jest poza zakresem tabeli gra_pozycja_pocz¹tkowa_parametry_t.
      if    ( id_grupa_l <> 1 )
        and ( id_grupa_l <> 2 ) then
        id_grupa_l := 1;


      // Obs³uguje tylko 2 grupy.
      //statki_kolejnoœæ_w_grupie_l := 0;
      statki_wielkoœæ__x_minus_suma_l := 0;
      statki_wielkoœæ__x_plus_suma_l := 0;

      if statek_f = nil then
        zti_1 := 0
      else//if statek_f = nil then
        zti_1 := -1;

      while Length( id_statki_w_grupie_t ) > 0 do
        begin

          for i := 0 to Length( statki_t ) - 1 do
            if statki_t[ i ].id_statek = id_statki_w_grupie_t[ Length( id_statki_w_grupie_t ) - 1 ] then
              begin

                if zti_1 = -1 then
                  begin

                    //Random( statki_iloœæ_w_grupie_l + 1 )

                    statki_t[ i ].Position.X := Random(  Zaokr¹glij__W_Górê( statki_wielkoœæ_w_grupie_suma_l * 2 ) + 1  );

                    if Random( 2 ) = 1 then
                      statki_t[ i ].Position.X := -statki_t[ i ].Position.X;

                  end
                else//if zti_1 = -1 then
                if zti_1 = 0 then
                  begin

                    statki_t[ i ].Position.X := gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].korekta_x;

                    // Odstêp po bokach pierwszego ustawionego statku (na œrodku) po obu stronach.
                    statki_wielkoœæ__x_minus_suma_l := statki_wielkoœæ__x_minus_suma_l + ( statki_t[ i ].x_prymityw_odleg³oœæ + statki_t[ i ].z_prymityw_odleg³oœæ ) * 2;
                    statki_wielkoœæ__x_plus_suma_l := statki_wielkoœæ__x_plus_suma_l + ( statki_t[ i ].x_prymityw_odleg³oœæ + statki_t[ i ].z_prymityw_odleg³oœæ ) * 2;

                  end
                else//if zti_1 = 0 then
                if not Odd( zti_1 ) then
                  begin

                    // Parzyste (prawo +).

                    // Kolejny ustawiany statek dodaje swój odstêp przed ustawieniem.
                    statki_wielkoœæ__x_plus_suma_l :=
                        statki_wielkoœæ__x_plus_suma_l
                      + ( statki_t[ i ].x_prymityw_odleg³oœæ + statki_t[ i ].z_prymityw_odleg³oœæ ) * 2
                      + gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].odstêp_x;


                    statki_t[ i ].Position.X :=
                        gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].korekta_x
                      + statki_wielkoœæ__x_plus_suma_l;


                    // Dodaje odstêp po ustawieniu.
                    statki_wielkoœæ__x_plus_suma_l := statki_wielkoœæ__x_plus_suma_l + ( statki_t[ i ].x_prymityw_odleg³oœæ + statki_t[ i ].z_prymityw_odleg³oœæ ) * 2;

                  end
                else//if not Odd( zti_1 ) then
                  begin

                    // Nierzyste (lewo -).

                    // Kolejny ustawiany statek dodaje swój odstêp przed ustawieniem.
                    statki_wielkoœæ__x_minus_suma_l :=
                        statki_wielkoœæ__x_minus_suma_l
                      + ( statki_t[ i ].x_prymityw_odleg³oœæ + statki_t[ i ].z_prymityw_odleg³oœæ ) * 2
                      + gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].odstêp_x;


                    statki_t[ i ].Position.X :=
                        gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].korekta_x
                      - statki_wielkoœæ__x_minus_suma_l;


                    // Dodaje odstêp po ustawieniu.
                    statki_wielkoœæ__x_minus_suma_l := statki_wielkoœæ__x_minus_suma_l + ( statki_t[ i ].x_prymityw_odleg³oœæ + statki_t[ i ].z_prymityw_odleg³oœæ ) * 2;

                  end;
                //---//if not Odd( zti_1 ) then


                statki_t[ i ].Position.Z :=
                    gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].korekta_z * zti_1
                  + gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].z;

                {$region 'Przesuwa statki w ty³ o ich najwiêkszy zasiêg broni.'}
                statek__zasiêg_broni_najwiêkszy := 0;

                for j := 0 to Length( statki_t[ i ].artyleria_t ) - 1 do
                  if statek__zasiêg_broni_najwiêkszy < statki_t[ i ].artyleria_t[ j ].zasiêg__broñ then
                    statek__zasiêg_broni_najwiêkszy := statki_t[ i ].artyleria_t[ j ].zasiêg__broñ;

                for j := 0 to Length( statki_t[ i ].bomba_g³êbinowa_t ) - 1 do
                  if statek__zasiêg_broni_najwiêkszy < statki_t[ i ].bomba_g³êbinowa_t[ j ].zasiêg__broñ then
                    statek__zasiêg_broni_najwiêkszy := statki_t[ i ].bomba_g³êbinowa_t[ j ].zasiêg__broñ;

                for j := 0 to Length( statki_t[ i ].dzia³a_t ) - 1 do
                  if statek__zasiêg_broni_najwiêkszy < statki_t[ i ].dzia³a_t[ j ].zasiêg__broñ then
                    statek__zasiêg_broni_najwiêkszy := statki_t[ i ].dzia³a_t[ j ].zasiêg__broñ;

                for j := 0 to Length( statki_t[ i ].je¿e_g³êbinowe_t ) - 1 do
                  if statek__zasiêg_broni_najwiêkszy < statki_t[ i ].je¿e_g³êbinowe_t[ j ].zasiêg__broñ then
                    statek__zasiêg_broni_najwiêkszy := statki_t[ i ].je¿e_g³êbinowe_t[ j ].zasiêg__broñ;

                for j := 0 to Length( statki_t[ i ].torpedy_wyrzutnie_t ) - 1 do
                  if statek__zasiêg_broni_najwiêkszy < statki_t[ i ].torpedy_wyrzutnie_t[ j ].zasiêg__broñ then
                    statek__zasiêg_broni_najwiêkszy := statki_t[ i ].torpedy_wyrzutnie_t[ j ].zasiêg__broñ;

                if statki_t[ i ].Position.Z >= 0 then
                  statki_t[ i ].Position.Z := statki_t[ i ].Position.Z + statek__zasiêg_broni_najwiêkszy
                else//if statki_t[ i ].Position.Z >= 0 then
                  statki_t[ i ].Position.Z := statki_t[ i ].Position.Z - statek__zasiêg_broni_najwiêkszy;
                {$endregion 'Przesuwa statki w ty³ o ich najwiêkszy zasiêg broni.'}

                statki_t[ i ].TurnAngle := gra_pozycja_pocz¹tkowa_parametry_t[ id_grupa_l ].korekta_obrót;


                inc( zti_1 );


                {$region 'Sprawdza odleg³oœæ do najbli¿szego statku i l¹du.'}
                czy_kolizja_wykryta_l := true;
                pozycja_ustawienie_iloœæ_prób := 0;

                while ( czy_kolizja_wykryta_l )
                  and ( pozycja_ustawienie_iloœæ_prób < 100 ) do
                  begin

                    inc( pozycja_ustawienie_iloœæ_prób );


                    statki_t[ i ].statki_rozstawianie_status := srs_Rozstawianie_Kolizja_SprawdŸ;

                    Gra_GLCollisionManager.CheckCollisions(); // Uwzglêdnia wielkoœæ obiektów l¹du i statków.

                    if statki_t[ i ].statki_rozstawianie_status = srs_Rozstawianie_Kolizja_Wykryta then
                      begin

                        if statki_t[ i ].Position.X >= 0 then
                          statki_t[ i ].Position.X := statki_t[ i ].Position.X + statki_t[ i ].x_prymityw_odleg³oœæ
                        else//if statki_t[ i ].Position.X >= 0 then
                          statki_t[ i ].Position.X := statki_t[ i ].Position.X - statki_t[ i ].x_prymityw_odleg³oœæ;

                        if statki_t[ i ].Position.Z >= 0 then
                          statki_t[ i ].Position.Z := statki_t[ i ].Position.Z + statki_t[ i ].z_prymityw_odleg³oœæ
                        else//if statki_t[ i ].Position.Z >= 0 then
                          statki_t[ i ].Position.Z := statki_t[ i ].Position.Z - statki_t[ i ].z_prymityw_odleg³oœæ;

                      end
                    else//if statki_t[ i ].statki_rozstawianie_status = srs_Rozstawianie_Kolizja_Wykryta then
                      czy_kolizja_wykryta_l := false;

                  end;
                //---//while ( czy_kolizja_wykryta_l ) (...)


                if statki_t[ i ].statki_rozstawianie_status <> srs_Brak then
                  statki_t[ i ].statki_rozstawianie_status := srs_Brak;
                {$endregion 'Sprawdza odleg³oœæ do najbli¿szego statku i l¹du.'}

                Break;

              end;
            //---//if statki_t[ i ].id_statek = id_statki_w_grupie_t[ Length( id_statki_w_grupie_t ) - 1 ] then

          SetLength(  id_statki_w_grupie_t, Length( id_statki_w_grupie_t ) - 1  );

        end;
      //---//while Length( id_statki_w_grupie_t ) > 0 do


      if statek_f <> nil then
        begin

          Screen.Cursor := zt_cursor_kopia;
          Exit;

        end;
      //---//if statek_f <> nil then

    end;
  //---//while not koniec_grup_l do


  Screen.Cursor := zt_cursor_kopia;

end;//---//Funkcja Statki__Rozstaw().

//Funkcja Statki_Ruch().
procedure TStatki_Form.Statki_Ruch( delta_czasu_f : double );
var
  czy_samolot__kolizja_kopia,
  kotwica_na_dnie_l // Czy jakaœ kotwica 'zahaczy³a siê' o 'dno'.
    : boolean;
  i,
  i_s,
  zti,
  morze_wzburzenie_l
    : integer;
  ztr,
  prêdkoœæ__kolizja_zwalnianie_kopia
    : real;
  dŸwiêk_efekt_rodzaj_l : TDŸwiêk_Efekt_Rodzaj;
  zt_statek : TStatek;
begin

  for i_s := 0 to Length( statki_t ) - 1 do
    begin

      zt_statek := statki_t[ i_s ];

      if zt_statek <> nil then
        begin

          if not zt_statek.czy_usun¹æ_statek then
            begin

              // czy_usun¹æ_statek - nie.

              czy_samolot__kolizja_kopia := zt_statek.czy_samolot__kolizja;

              //if zt_statek = statek_gracza then
              if not czy_klient_g then
                begin

                  //czy_samolot__kolizja_kopia := zt_statek.czy_samolot__kolizja;
                  prêdkoœæ__kolizja_zwalnianie_kopia := zt_statek.prêdkoœæ__kolizja_zwalnianie;


                  {$region 'Wyszukuje uszkodzenia statku.'}
                  for i := 0 to Length( zt_statek.kotwica_t ) - 1 do
                    if i = 0 then
                      zt_statek.uszkodzone_czas_sekundy_i__kotwica := zt_statek.kotwica_t[ i ].uszkodzone_czas_sekundy_i
                    else//if i = 0 then
                      if zt_statek.uszkodzone_czas_sekundy_i__kotwica < zt_statek.kotwica_t[ i ].uszkodzone_czas_sekundy_i then
                        zt_statek.uszkodzone_czas_sekundy_i__kotwica := zt_statek.kotwica_t[ i ].uszkodzone_czas_sekundy_i;


                  if    ( zt_statek.uszkodzone_czas_sekundy_i__radar <> 0 )
                    and ( Czas_Miêdzy_W_Sekundach( zt_statek.uszkodzone_czas_sekundy_i__radar ) > oczekiwanie_na__naprawienie_elementu__czas_sekundy_g ) then
                    begin

                      zt_statek.uszkodzone_czas_sekundy_i__radar := 0;

                    end;
                  //---//if    ( Self.uszkodzone_czas_sekundy_i__radar <> 0 ) (...)

                  if    ( zt_statek.uszkodzone_czas_sekundy_i__radio <> 0 )
                    and ( Czas_Miêdzy_W_Sekundach( zt_statek.uszkodzone_czas_sekundy_i__radio ) > oczekiwanie_na__naprawienie_elementu__czas_sekundy_g ) then
                    begin

                      zt_statek.uszkodzone_czas_sekundy_i__radio := 0;

                    end;
                  //---//if    ( Self.uszkodzone_czas_sekundy_i__radio <> 0 ) (...)

                  if    ( zt_statek.uszkodzone_czas_sekundy_i__sonar <> 0 )
                    and ( Czas_Miêdzy_W_Sekundach( zt_statek.uszkodzone_czas_sekundy_i__sonar ) > oczekiwanie_na__naprawienie_elementu__czas_sekundy_g ) then
                    begin

                      zt_statek.uszkodzone_czas_sekundy_i__sonar := 0;

                    end;
                  //---//if    ( Self.uszkodzone_czas_sekundy_i__sonar <> 0 ) (...)


                  for i := 0 to Length( zt_statek.ster_t ) - 1 do
                    if i = 0 then
                      zt_statek.uszkodzone_czas_sekundy_i__ster := zt_statek.ster_t[ i ].uszkodzone_czas_sekundy_i
                    else//if i = 0 then
                      if zt_statek.uszkodzone_czas_sekundy_i__ster < zt_statek.ster_t[ i ].uszkodzone_czas_sekundy_i then
                        zt_statek.uszkodzone_czas_sekundy_i__ster := zt_statek.ster_t[ i ].uszkodzone_czas_sekundy_i;

                  for i := 0 to Length( zt_statek.ster_g³êbokoœci_t ) - 1 do
                    if i = 0 then
                      zt_statek.uszkodzone_czas_sekundy_i__ster_g³êbokoœci := zt_statek.ster_g³êbokoœci_t[ i ].uszkodzone_czas_sekundy_i
                    else//if i = 0 then
                      if zt_statek.uszkodzone_czas_sekundy_i__ster_g³êbokoœci < zt_statek.ster_g³êbokoœci_t[ i ].uszkodzone_czas_sekundy_i then
                        zt_statek.uszkodzone_czas_sekundy_i__ster_g³êbokoœci := zt_statek.ster_g³êbokoœci_t[ i ].uszkodzone_czas_sekundy_i;


                  for i := 0 to Length( zt_statek.œruby_t ) - 1 do
                    if i = 0 then
                      zt_statek.uszkodzone_czas_sekundy_i__œruba := zt_statek.œruby_t[ i ].uszkodzone_czas_sekundy_i
                    else//if i = 0 then
                      if zt_statek.uszkodzone_czas_sekundy_i__œruba < zt_statek.œruby_t[ i ].uszkodzone_czas_sekundy_i then
                        zt_statek.uszkodzone_czas_sekundy_i__œruba := zt_statek.œruby_t[ i ].uszkodzone_czas_sekundy_i;


                  zt_statek.efekt__element_uszkodzenie_gl_dummy_cube_st.Visible :=
                       ( zt_statek.uszkodzone_czas_sekundy_i__radar <> 0 )
                    or ( zt_statek.uszkodzone_czas_sekundy_i__radio <> 0 )
                    or ( zt_statek.uszkodzone_czas_sekundy_i__sonar <> 0 );
                  {$endregion 'Wyszukuje uszkodzenia statku.'}


                  zt_statek.Punkty_¯ycia__W_Zanurzeniu_Przeliczaj();


                  {$region 'Ruch statku.'}
                  zt_statek.Prêdkoœæ_Procent_Zmieñ( delta_czasu_f );


                  zt_statek.prêdkoœæ_aktualna := zt_statek.prêdkoœæ_maksymalna * zt_statek.prêdkoœæ_aktualna_procent__bezwzglêdny * 0.01;

                  zt_statek.Prêdkoœæ_Aktualna_O_Zanurzenie_Koryguj();

                  if zt_statek.prêdkoœæ_maksymalna <> 0 then
                    zt_statek.prêdkoœæ_aktualna_procent__wzglêdny := zt_statek.prêdkoœæ_aktualna * 100 / zt_statek.prêdkoœæ_maksymalna
                  else//if zt_statek.prêdkoœæ_maksymalna <> 0 then
                    zt_statek.prêdkoœæ_aktualna_procent__wzglêdny := 0;


                  if    ( zt_statek.schemat_samolot_zmiana_czas_sekundy_i <> 0 )
                    and (  Abs( zt_statek.prêdkoœæ_aktualna ) <> 0  ) then
                    zt_statek.schemat_samolot_zmiana_czas_sekundy_i := 0; // Ruch przerywa proces zmiany samolotu.


                  ztr := zt_statek.Grawitacja_Opadanie_Zmieñ( delta_czasu_f, Projektowy_Tryb__Grawitacja_Wy³¹cz_CheckBox.Checked );
                  zt_statek.Skrêt_Procent_Zmieñ( delta_czasu_f );
                  zt_statek.Zanurzenie_Procent_Zmieñ( Dno_GLPlane.Position.Y );


                  if ztr > 0 then // ztr jest ujemne gdy l¹d leczy.
                    begin

                      i := Gra_Statystyki_R_Identyfikator_ZnajdŸ( zt_statek.id_gracz );

                      if i >= 0 then
                        begin

                          gra_statystyki_r_t[ i ].obra¿enia_otrzymane__gs := gra_statystyki_r_t[ i ].obra¿enia_otrzymane__gs + ztr;
                          gra_statystyki_r_t[ i ].obra¿enia_otrzymane__z_kolizji__gs := gra_statystyki_r_t[ i ].obra¿enia_otrzymane__z_kolizji__gs + ztr;

                        end;
                      //---//if i >= 0 then

                    end;
                  //---//if ztr > 0 then


                  if zt_statek.czy_samolot__kolizja then
                    //zt_statek.czy_samolot__kolizja := false;
                    zt_statek.Samolot__Kolizja_Bufor_Zliczaj( false );


                  zt_statek.Move( zt_statek.prêdkoœæ_aktualna * delta_czasu_f );


                  if    ( zt_statek.czy_samolot )
                    and ( not czy_samolot__kolizja_kopia )
                    and ( zt_statek.Samolot_Na_Lotniskowcu() <> nil ) then
                    zt_statek.Samolot_Lotniskowiec_Od³¹cz();


                  zt_statek.Prêdkoœæ_Przyspieszanie__Start_Z_Lotniskowca__Prze³adowanie();
                  zt_statek.Lotniskowiec__Zasoby_Odnawianie__Prze³adowanie();


                  if zt_statek.prêdkoœæ_aktualna_procent__wzglêdny <> 0 then
                    begin

                      //statek_obrót_l := zt_statek.skrêt_prêdkoœæ * zt_statek.skrêt_aktualny_procent * ( zt_statek.prêdkoœæ_aktualna_procent__wzglêdny / 100 ) * delta_czasu_f;
                      zt_statek.prêdkoœæ_obrotu_aktualna := zt_statek.skrêt_prêdkoœæ * zt_statek.skrêt_aktualny_procent * 0.01;

                      if    ( zt_statek.skrêt_wspó³czynnik_do_prêdkoœci <> 0 )
                        and (  Abs( zt_statek.prêdkoœæ_aktualna_procent__wzglêdny ) < zt_statek.skrêt_wspó³czynnik_do_prêdkoœci  ) then
                        //statek_obrót_l := statek_obrót_l * ( 100 * Abs( zt_statek.prêdkoœæ_aktualna_procent__wzglêdny ) / zt_statek.skrêt_wspó³czynnik_do_prêdkoœci ) / 100;
                        zt_statek.prêdkoœæ_obrotu_aktualna := zt_statek.prêdkoœæ_obrotu_aktualna * Abs( zt_statek.prêdkoœæ_aktualna_procent__wzglêdny ) / zt_statek.skrêt_wspó³czynnik_do_prêdkoœci;


                      if zt_statek.prêdkoœæ_aktualna_procent__wzglêdny < 0 then
                        zt_statek.prêdkoœæ_obrotu_aktualna := -zt_statek.prêdkoœæ_obrotu_aktualna;

                      //zt_statek.Turn( zt_statek.prêdkoœæ_obrotu_aktualna );
                      zt_statek.TurnAngle := zt_statek.TurnAngle - zt_statek.prêdkoœæ_obrotu_aktualna * delta_czasu_f;


                      zt_statek.falowanie_bok_skrêt := -zt_statek.falowanie_bok_skrêt_zakres * (  zt_statek.skrêt_aktualny_procent * Abs( zt_statek.prêdkoœæ_aktualna_procent__wzglêdny ) * 0.01  ) * 0.01;

                      if not zt_statek.czy_samolot then
                        zt_statek.falowanie_przód_ruch := 1 * zt_statek.prêdkoœæ_aktualna_procent__wzglêdny * 0.01
                      else//if not zt_statek.czy_samolot then
                        zt_statek.falowanie_bok_skrêt := -zt_statek.falowanie_bok_skrêt;


                      if zt_statek.falowanie_przód_ruch > 25 then
                        zt_statek.falowanie_przód_ruch := 25
                      else//if zt_statek.falowanie_przód_ruch > 25 then
                      if zt_statek.falowanie_przód_ruch < -25 then
                        zt_statek.falowanie_przód_ruch := -25;


                      if    ( zt_statek.czy_samolot )
                        and ( zt_statek.uszkodzone_czas_sekundy_i__ster_g³êbokoœci = 0 )
                        and (  Abs( zt_statek.prêdkoœæ_aktualna_procent__wzglêdny ) >= samolot_prêdkoœæ_lotu_procent_minimalny_c  ) then
                        begin

                          ztr :=
                              60 // Iloœæ stopni wychylenia.
                            * ( zt_statek.zanurzenie_pu³ap__zadane_procent ) * 0.01 // Ustawiony procent szybkoœci wznoszenia i opadania.
                            * (  Abs( zt_statek.prêdkoœæ_aktualna_procent__wzglêdny ) - samolot_prêdkoœæ_lotu_procent_minimalny_c  ) * 0.01; // Do prêdkoœci 25% wychylenie jest zerowe a potem wzrasta do 100% przy prêdkoœci 100%.

                          if zt_statek.prêdkoœæ_aktualna_procent__wzglêdny < 0 then
                            ztr := -ztr;

                          if ztr > 60 then
                            ztr := 60
                          else//if ztr > 60 then
                          if ztr < -60 then
                            ztr := -60;

                        end
                      else//if    ( zt_statek.czy_samolot ) (...)
                        ztr := 0;

                      if Abs( zt_statek.falowanie_przód_pu³ap - ztr ) > zt_statek.zanurzenie_pu³ap__szybkoœæ * 0.1 then
                        begin

                          if zt_statek.falowanie_przód_pu³ap > ztr then
                            zt_statek.falowanie_przód_pu³ap := zt_statek.falowanie_przód_pu³ap - zt_statek.zanurzenie_pu³ap__szybkoœæ * 0.1
                          else//if zt_statek.falowanie_przód_pu³ap > ztr then
                          if zt_statek.falowanie_przód_pu³ap < ztr then
                            zt_statek.falowanie_przód_pu³ap := zt_statek.falowanie_przód_pu³ap + zt_statek.zanurzenie_pu³ap__szybkoœæ * 0.1;

                        end
                      else//if Abs( zt_statek.falowanie_przód_pu³ap - ztr ) > zt_statek.zanurzenie_pu³ap__szybkoœæ * 0.1 then
                        zt_statek.falowanie_przód_pu³ap := ztr;

                    end
                  else//if zt_statek.prêdkoœæ_aktualna_procent__wzglêdny <> 0 then
                    begin

                      zt_statek.falowanie_bok_skrêt := 0;
                      zt_statek.falowanie_przód_pu³ap := 0;
                      zt_statek.falowanie_przód_ruch := 0;


                      // Wyrównuje samolot dla SI aby móg³ wystartowaæ z katapulty.
                      if    ( zt_statek.czy_samolot )
                        and (
                                 ( zt_statek.si_decyduje )
                              or ( zt_statek.si__statek_gracza__p³ywa )
                            )
                        and ( zt_statek.si_aktywnoœæ in [ sia_Odnawianie_Zasobów__Lotniskowiec, sia_Postój ] )
                        and ( zt_statek.Samolot_Na_Lotniskowcu() <> nil ) then
                        begin

                          zt_statek.Prêdkoœæ_Przyspieszanie__Start_Z_Lotniskowca__K¹t_Wylicz();
                          ztr := zt_statek.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__k¹t;

                          if ztr >= samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c then
                            ztr := samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c * 2
                          else//if ztr >= samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c then
                          if ztr >= 0.1 then
                            ztr := ztr
                          else//if ztr >= 0.1 then
                            ztr := 0;

                          if ztr > 0 then
                            begin

                              if delta_czasu_f < 1 then
                                ztr := ztr * delta_czasu_f;

                              if zt_statek.Direction.X < 0 then
                                ztr := -ztr;

                              zt_statek.TurnAngle := zt_statek.TurnAngle - ztr;

                            end;
                          //---//if ztr > 0 then


                          // Przesuwa samolot na œrodek (do osi wzd³u¿nej) pok³adu.
                          if Abs( zt_statek.Position.X ) > 0.1 then
                            begin

                              ztr := zt_statek.Samolot_Na_Lotniskowcu().x_prymityw_odleg³oœæ * 0.05;

                              if zt_statek.Position.X < 0 then
                                ztr := -ztr;

                              if delta_czasu_f < 1 then
                                ztr := ztr * delta_czasu_f;

                              zt_statek.Position.X := zt_statek.Position.X - ztr;

                            end;
                          //---//if Abs( zt_statek.Position.X ) > 0.1 then
                          //---// Przesuwa samolot na œrodek (do osi wzd³u¿nej) pok³adu.

                        end;
                      //---//if    ( zt_statek.czy_samolot ) (...)
                      //---// Wyrównuje samolot dla SI aby móg³ wystartowaæ z katapulty.

                    end;
                  //---//if zt_statek.prêdkoœæ_aktualna_procent__wzglêdny <> 0 then

                  zt_statek.Lift( -zt_statek.grawitacja_opadanie_szybkoœæ_aktualna * delta_czasu_f );

                  //zt_statek.Position.Y := -zt_statek.zanurzenie_pu³ap__maksymalne * zt_statek.zanurzenie_pu³ap__aktualne_procent * 0.01; // Je¿eli wspó³rzêdna statków Y nie jest modyfikowana. // Wariant 1.
                  zt_statek.Lift( -zt_statek.zanurzenie_pu³ap__szybkoœæ_aktualna * delta_czasu_f );

                  if zt_statek.czy_samolot then
                    zt_statek.zanurzenie_pu³ap__aktualne := zt_statek.Position.Y
                  else//if zt_statek.czy_samolot then
                    zt_statek.zanurzenie_pu³ap__aktualne := -zt_statek.Position.Y;


                  if zt_statek.punkty_¿ycia_wskaŸnik__zanurzenie_peryskopowe__przekroczone__przeliczenie_poprzednie <> zt_statek.Zanurzenie_Peryskopowe__Przekroczone() then
                    begin

                      zt_statek.punkty_¿ycia_wskaŸnik__zanurzenie_peryskopowe__przekroczone__przeliczenie_poprzednie := zt_statek.Zanurzenie_Peryskopowe__Przekroczone();

                      zt_statek.Punkty_¯ycia__WskaŸnik__Noc_Zmieñ( dzieñ_jasnoœæ_g );

                    end;
                  //---//if zt_statek.punkty_¿ycia_wskaŸnik__zanurzenie_peryskopowe__przekroczone__przeliczenie_poprzednie <> zt_statek.Zanurzenie_Peryskopowe__Przekroczone() then
                  {$endregion 'Ruch statku.'}


                  {$region '//Ruch dzia³.'}
                  //if zt_statek.obracaj_dzia³a then
                  //  begin
                  //
                  //    for i := 0 to Length( zt_statek.artyleria_t ) - 1 do
                  //      begin
                  //
                  //        zt_statek.artyleria_t[ i ].Obrót_Zadany_Zmieñ();
                  //        zt_statek.artyleria_t[ i ].Obrót_Kierunek_Zmieñ();
                  //
                  //        zt_statek.artyleria_t[ i ].Podniesienie_Zadane_Zmieñ();
                  //        zt_statek.artyleria_t[ i ].Podniesienie_Kierunek_Zmieñ( Celowanie_Precyzja_Podniesienie_SpinEdit.Value );
                  //
                  //      end;
                  //    //---//for i := 0 to Length( zt_statek.artyleria_t ) - 1 do
                  //
                  //    for i := 0 to Length( zt_statek.dzia³a_t ) - 1 do
                  //      begin
                  //
                  //        zt_statek.dzia³a_t[ i ].Obrót_Zadany_Zmieñ();
                  //        zt_statek.dzia³a_t[ i ].Obrót_Kierunek_Zmieñ();
                  //
                  //        zt_statek.dzia³a_t[ i ].Podniesienie_Zadane_Zmieñ();
                  //        zt_statek.dzia³a_t[ i ].Podniesienie_Kierunek_Zmieñ( Celowanie_Precyzja_Podniesienie_SpinEdit.Value );
                  //
                  //      end;
                  //    //---//for i := 0 to Length( zt_statek.dzia³a_t ) - 1 do
                  //
                  //
                  //    for i := 0 to Length( zt_statek.torpedy_wyrzutnie_t ) - 1 do
                  //      begin
                  //
                  //        zt_statek.torpedy_wyrzutnie_t[ i ].Obrót_Zadany_Zmieñ();
                  //        zt_statek.torpedy_wyrzutnie_t[ i ].Obrót_Kierunek_Zmieñ( true );
                  //
                  //      end;
                  //    //---//for i := 0 to Length( zt_statek.torpedy_wyrzutnie_t ) - 1 do
                  //
                  //  end
                  //else//if zt_statek.obracaj_dzia³a then
                  //  begin
                  //
                  //    for i := 0 to Length( zt_statek.artyleria_t ) - 1 do
                  //      zt_statek.artyleria_t[ i ].celownik_linia.LineColor.Color := GLS.Color.clrYellow;
                  //
                  //
                  //    for i := 0 to Length( zt_statek.dzia³a_t ) - 1 do
                  //      zt_statek.dzia³a_t[ i ].celownik_linia.LineColor.Color := GLS.Color.clrYellow;
                  //
                  //
                  //    for i := 0 to Length( zt_statek.torpedy_wyrzutnie_t ) - 1 do
                  //      zt_statek.torpedy_wyrzutnie_t[ i ].celownik_linia.LineColor.Color := GLS.Color.clrYellow;
                  //
                  //  end;
                  ////---//if zt_statek.obracaj_dzia³a then
                  {$endregion '//Ruch dzia³.'}


                  {$region 'Obrót dzia³, podniesienie dzia³.'}
                  for i := 0 to Length( zt_statek.artyleria_t ) - 1 do
                    begin

                      if zt_statek.obracaj_dzia³a then
                        begin

                          zt_statek.artyleria_t[ i ].Obrót_Zadany_Zmieñ( zt_statek.amunicja_rodzaj_wybrana__artyleria or zt_statek.amunicja_rodzaj_wybrana__wszystkie );
                          zt_statek.artyleria_t[ i ].Obrót_Kierunek_Zmieñ( delta_czasu_f, gra_wspó³czynnik_trudnoœci_g );

                        end;
                      //---//if zt_statek.obracaj_dzia³a then

                      if zt_statek.podnoœ_lufy then
                        begin

                          zt_statek.artyleria_t[ i ].Podniesienie_Zadane_Zmieñ( zt_statek.amunicja_rodzaj_wybrana__artyleria or zt_statek.amunicja_rodzaj_wybrana__wszystkie );
                          zt_statek.artyleria_t[ i ].Podniesienie_Kierunek_Zmieñ( delta_czasu_f );

                        end;
                      //---//if zt_statek.podnoœ_lufy then

                      zt_statek.artyleria_t[ i ].Celownik_Linia_Wygl¹d_Ustaw();

                      zt_statek.artyleria_t[ i ].Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj( zt_statek.amunicja_rodzaj_wybrana__artyleria or zt_statek.amunicja_rodzaj_wybrana__wszystkie );

                      zt_statek.artyleria_t[ i ].Element_Uszkodzenie_Przeliczaj( oczekiwanie_na__naprawienie_elementu__czas_sekundy_g );


                      if not zt_statek.artyleria_t[ i ].si__cel__przeliczone_namiary then
                        zt_statek.artyleria_t[ i ].si__cel__przeliczone_namiary := true;

                    end;
                  //---//for i := 0 to Length( zt_statek.artyleria_t ) - 1 do


                  for i := 0 to Length( zt_statek.bomba_g³êbinowa_t ) - 1 do
                    begin

                      zt_statek.bomba_g³êbinowa_t[ i ].Celownik_Linia_Wygl¹d_Ustaw();

                      zt_statek.bomba_g³êbinowa_t[ i ].Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj( zt_statek.amunicja_rodzaj_wybrana__bomba_g³êbinowa or zt_statek.amunicja_rodzaj_wybrana__wszystkie );

                      zt_statek.bomba_g³êbinowa_t[ i ].Element_Uszkodzenie_Przeliczaj( oczekiwanie_na__naprawienie_elementu__czas_sekundy_g );


                      if not zt_statek.bomba_g³êbinowa_t[ i ].si__cel__przeliczone_namiary then
                        zt_statek.bomba_g³êbinowa_t[ i ].si__cel__przeliczone_namiary := true;

                    end;
                  //---//for i := 0 to Length( zt_statek.bomba_g³êbinowa_t ) - 1 do


                  for i := 0 to Length( zt_statek.dzia³a_t ) - 1 do
                    begin

                      if zt_statek.obracaj_dzia³a then
                        begin

                          zt_statek.dzia³a_t[ i ].Obrót_Zadany_Zmieñ( zt_statek.amunicja_rodzaj_wybrana__pocisk or zt_statek.amunicja_rodzaj_wybrana__wszystkie );
                          zt_statek.dzia³a_t[ i ].Obrót_Kierunek_Zmieñ( delta_czasu_f, gra_wspó³czynnik_trudnoœci_g );

                        end;
                      //---//if zt_statek.obracaj_dzia³a then

                      if zt_statek.podnoœ_lufy then
                        begin

                          zt_statek.dzia³a_t[ i ].Podniesienie_Zadane_Zmieñ( zt_statek.amunicja_rodzaj_wybrana__pocisk or zt_statek.amunicja_rodzaj_wybrana__wszystkie );
                          zt_statek.dzia³a_t[ i ].Podniesienie_Kierunek_Zmieñ( delta_czasu_f );

                        end;
                      //---//if zt_statek.podnoœ_lufy then

                      zt_statek.dzia³a_t[ i ].Celownik_Linia_Wygl¹d_Ustaw();

                      zt_statek.dzia³a_t[ i ].Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj( zt_statek.amunicja_rodzaj_wybrana__pocisk or zt_statek.amunicja_rodzaj_wybrana__wszystkie );

                      zt_statek.dzia³a_t[ i ].Element_Uszkodzenie_Przeliczaj( oczekiwanie_na__naprawienie_elementu__czas_sekundy_g );


                      if not zt_statek.dzia³a_t[ i ].si__cel__przeliczone_namiary then
                        zt_statek.dzia³a_t[ i ].si__cel__przeliczone_namiary := true;

                    end;
                  //---//for i := 0 to Length( zt_statek.dzia³a_t ) - 1 do


                  for i := 0 to Length( zt_statek.je¿e_g³êbinowe_t ) - 1 do
                    begin

                      if zt_statek.obracaj_dzia³a then
                        begin

                          zt_statek.je¿e_g³êbinowe_t[ i ].Obrót_Zadany_Zmieñ( zt_statek.amunicja_rodzaj_wybrana__je¿e_g³êbinowe or zt_statek.amunicja_rodzaj_wybrana__wszystkie );
                          zt_statek.je¿e_g³êbinowe_t[ i ].Obrót_Kierunek_Zmieñ( delta_czasu_f, gra_wspó³czynnik_trudnoœci_g, true );

                        end;
                      //---//if zt_statek.obracaj_dzia³a then

                      zt_statek.je¿e_g³êbinowe_t[ i ].Celownik_Linia_Wygl¹d_Ustaw();

                      zt_statek.je¿e_g³êbinowe_t[ i ].Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj( zt_statek.amunicja_rodzaj_wybrana__je¿e_g³êbinowe or zt_statek.amunicja_rodzaj_wybrana__wszystkie );

                      zt_statek.je¿e_g³êbinowe_t[ i ].Element_Uszkodzenie_Przeliczaj( oczekiwanie_na__naprawienie_elementu__czas_sekundy_g );


                      if not zt_statek.je¿e_g³êbinowe_t[ i ].si__cel__przeliczone_namiary then
                        zt_statek.je¿e_g³êbinowe_t[ i ].si__cel__przeliczone_namiary := true;

                    end;
                  //---//for i := 0 to Length( zt_statek.je¿e_g³êbinowe_t ) - 1 do


                  for i := 0 to Length( zt_statek.torpedy_wyrzutnie_t ) - 1 do
                    begin

                      if zt_statek.obracaj_dzia³a then
                        begin

                          zt_statek.torpedy_wyrzutnie_t[ i ].Obrót_Zadany_Zmieñ( zt_statek.amunicja_rodzaj_wybrana__torpeda or zt_statek.amunicja_rodzaj_wybrana__wszystkie );
                          zt_statek.torpedy_wyrzutnie_t[ i ].Obrót_Kierunek_Zmieñ( delta_czasu_f, gra_wspó³czynnik_trudnoœci_g, true );

                        end;
                      //---//if zt_statek.obracaj_dzia³a then

                      zt_statek.torpedy_wyrzutnie_t[ i ].Celownik_Linia_Wygl¹d_Ustaw();

                      zt_statek.torpedy_wyrzutnie_t[ i ].Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj( zt_statek.amunicja_rodzaj_wybrana__torpeda or zt_statek.amunicja_rodzaj_wybrana__wszystkie );

                      zt_statek.torpedy_wyrzutnie_t[ i ].Element_Uszkodzenie_Przeliczaj( oczekiwanie_na__naprawienie_elementu__czas_sekundy_g );


                      if not zt_statek.torpedy_wyrzutnie_t[ i ].si__cel__przeliczone_namiary then
                        zt_statek.torpedy_wyrzutnie_t[ i ].si__cel__przeliczone_namiary := true;

                    end;
                  //---//for i := 0 to Length( zt_statek.torpedy_wyrzutnie_t ) - 1 do
                  {$endregion 'Obrót dzia³, podniesienie dzia³.'}


                  kotwica_na_dnie_l := false;

                  for i := 0 to Length( zt_statek.kotwica_t ) - 1 do
                    begin

                      zti := integer(zt_statek.kotwica_t[ i ].kotwica_ruch_etap__ko);

                      zt_statek.kotwica_t[ i ].Kotwica_Przesuwaj( Dno_GLPlane.Position.Y, delta_czasu_f, kotwica_zakresy_r_g );

                      if zti <> integer(zt_statek.kotwica_t[ i ].kotwica_ruch_etap__ko) then
                        begin

                          case zt_statek.kotwica_t[ i ].kotwica_ruch_etap__ko of
                              kre_Statek : dŸwiêk_efekt_rodzaj_l := der_Kotwica__Statek;
                              kre_Stop : dŸwiêk_efekt_rodzaj_l := der_Kotwica__Stop;
                              kre_W_Dó³ : dŸwiêk_efekt_rodzaj_l := der_Kotwica__W_Dó³;
                              kre_W_Górê : dŸwiêk_efekt_rodzaj_l := der_Kotwica__W_Górê;
                              else//case zt_statek.kotwica_t[ i ].kotwica_ruch_etap__ko of
                                dŸwiêk_efekt_rodzaj_l := der_Kotwica__Brak;
                            end;
                          //---//case zt_statek.kotwica_t[ i ].kotwica_ruch_etap__ko of

                          //DŸwiêki__Efekt__Utwórz_Jeden(  der_Kotwica, zt_statek.kotwica_t[ i ].LocalToAbsolute( zt_statek.kotwica_t[ i ].kotwica_lina.Nodes[ 1 ].AsAffineVector )  );
                          DŸwiêki__Efekt__Utwórz_Jeden( zt_statek.kotwica_t[ i ].efekt__dŸwiêk_kontener_gl_dummy_cube, dŸwiêk_efekt_rodzaj_l, 0, 0, 0 );

                        end
                      else//if zti <> integer(zt_statek.kotwica_t[ i ].kotwica_ruch_etap__ko) then
                        if    ( zt_statek.kotwica_t[ i ].kotwica_ruch_etap__ko = kre_Dno )
                          and (  zt_statek.kotwica_t[ i ].efekt__dŸwiêk_kontener_gl_dummy_cube.Behaviours.IndexOfClass( TGLBSoundEmitter ) > - 1  ) then // -1 - brak, >= 0 zachowania.
                          DŸwiêki__Efekt__Utwórz_Jeden( zt_statek.kotwica_t[ i ].efekt__dŸwiêk_kontener_gl_dummy_cube, der_Kotwica__Brak, 0, 0, 0 );


                      zt_statek.kotwica_t[ i ].Element_Uszkodzenie_Przeliczaj( oczekiwanie_na__naprawienie_elementu__czas_sekundy_g );

                      if    ( zt_statek.kotwica_t[ i ].uszkodzone_czas_sekundy_i = 0 )
                        and ( zt_statek.kotwica_t[ i ].kotwica_ruch_etap__ko = kre_Dno ) then
                        kotwica_na_dnie_l := true;

                    end;
                  //---//for i := 0 to Length( zt_statek.kotwica_t ) - 1 do

                  for i := 0 to Length( zt_statek.ster_t ) - 1 do
                    zt_statek.ster_t[ i ].Element_Uszkodzenie_Przeliczaj( oczekiwanie_na__naprawienie_elementu__czas_sekundy_g );

                  for i := 0 to Length( zt_statek.ster_g³êbokoœci_t ) - 1 do
                    zt_statek.ster_g³êbokoœci_t[ i ].Element_Uszkodzenie_Przeliczaj( oczekiwanie_na__naprawienie_elementu__czas_sekundy_g );

                  for i := 0 to Length( zt_statek.œruby_t ) - 1 do
                    begin

                      zt_statek.œruby_t[ i ].Œruba_Obracaj( delta_czasu_f );

                      zt_statek.œruby_t[ i ].Element_Uszkodzenie_Przeliczaj( oczekiwanie_na__naprawienie_elementu__czas_sekundy_g );

                    end;
                  //---//for i := 0 to Length( zt_statek.œruby_t ) - 1 do


                  {$region 'Wp³yw wiatru na statek.'}
                  if    ( Wiatr__Wp³yw_Na_Rozgrywkê_CheckBox.Checked )
                    and ( not zt_statek.wiatr__kolizja )
                    and ( wiatr_vector_g.W > 0 )
                    and ( zt_statek.Samolot_Na_Lotniskowcu() = nil ) then // Je¿eli samolot jest na lotniskowcu to jest chroniony przed wiatrem.
                    begin

                      ztr :=
                        System.Math.RadToDeg
                          (
                            GLS.VectorGeometry.AngleBetweenVectors
                              (
                                GLS.VectorGeometry.VectorMake( zt_statek.AbsoluteDirection.X, 0, zt_statek.AbsoluteDirection.Z ),
                                GLS.VectorGeometry.VectorMake( -wiatr_vector_g.X, 0, -wiatr_vector_g.Z ),
                                GLS.VectorGeometry.VectorMake( 0, 0, 0 )
                              )
                          );


                      // Obrót.
                      if   ( kotwica_na_dnie_l )
                        or (  Abs( zt_statek.prêdkoœæ_aktualna ) = 0  ) then
                        begin

                          // Je¿eli statek stoi na kotwicy albo nie p³ynie to siê obraca.
                          // Pod wod¹ wiatr obraca (jako wp³yw ruchów wody).

                          if not System.Math.IsNan( ztr ) then
                            begin

                              // Obrót - dziób wskazuje kierunek, w którym wieje wiatr.
                              //if
                              //  GLS.VectorGeometry.VectorCrossProduct
                              //    (
                              //      GLS.VectorGeometry.VectorMake( zt_statek.AbsoluteDirection.X, 0, zt_statek.AbsoluteDirection.Z ),
                              //      GLS.VectorGeometry.VectorMake( wiatr_vector_g.X, 0, wiatr_vector_g.Z )
                              //    ).Y < 0 then // < 0 gdy dziób jest po prawej stronie wektora wiatru.
                              //  ztr := -ztr;
                              //---// Obrót - dziób wskazuje kierunek, w którym wieje wiatr.

                              // Obrót - dziób wskazuje kierunek, z którego wieje wiatr.
                              ztr := 180 - ztr;

                              if
                                GLS.VectorGeometry.VectorCrossProduct
                                  (
                                    GLS.VectorGeometry.VectorMake( zt_statek.AbsoluteDirection.X, 0, zt_statek.AbsoluteDirection.Z ),
                                    GLS.VectorGeometry.VectorMake( wiatr_vector_g.X, 0, wiatr_vector_g.Z )
                                  ).Y >= 0 then // < 0 gdy dziób jest po prawej stronie wektora wiatru.
                                ztr := -ztr;
                              //---// Obrót - dziób wskazuje kierunek, z którego wieje wiatr.


                              //zt_statek.TurnAngle := zt_statek.TurnAngle - 0.5 * ztr * delta_czasu_f; // Test.
                              zt_statek.TurnAngle := zt_statek.TurnAngle - wiatr_vector_g.W * wiatr__wp³yw_na__statek__obrót_g * ztr * delta_czasu_f;

                            end;
                          //---//if not System.Math.IsNan( ztr ) then

                        end;
                      //---//if   ( kotwica_na_dnie_l ) (...)


                      // Przesuwanie.
                      //if   ( not kotwica_na_dnie_l )
                      //  or (  Abs( zt_statek.prêdkoœæ_aktualna ) = 0  ) then
                      if    ( not kotwica_na_dnie_l )
                        and ( zt_statek.AbsolutePosition.Y > -zanurzanie_precyzja_c ) then // Pod wod¹ wiatr nie przesuwa.
                        begin

                          // Je¿eli statek nie stoi na kotwicy to jest przesuwany przez wiatr.
                          //// Je¿eli statek nie stoi na kotwicy i nie p³ynie to jest przesuwany przez wiatr.

                          // Im k¹t wzglêdem wiatru jest bli¿szy 90 stopniom tym silniej wiatr przesuwa statek.
                          // Modyfikator nie s³abnie poni¿ej 0.5.
                          // Zakres ztr < 1, 0.5 >.

                          ztr := Abs( ztr );

                          if ztr > 90 then
                            ztr := 180 - ztr;

                          if ztr <= 45 then
                            ztr := 0.5
                          else//if ztr <= 45 then
                            ztr := ztr / 90;
                          //---// Im k¹t wzglêdem wiatru jest bli¿szy 90 stopniom tym silniej wiatr przesuwa statek.


                          if    ( zt_statek.czy_samolot )
                            and ( zt_statek.AbsolutePosition.Y >= samolot_w_powietrzu_wysokoœæ_od_c ) then
                            ztr := ztr * 2;


                          zt_statek.Position.AddScaledVector
                            (
                              wiatr_vector_g.W * ztr * wiatr__wp³yw_na__statek__przesuwanie_g * delta_czasu_f,
                              GLS.VectorGeometry.AffineVectorMake
                                (
                                  -wiatr_vector_g.X,
                                  0,
                                  -wiatr_vector_g.Z
                                )
                            );
                          zt_statek.TransformationChanged();

                        end;
                      //---//if    ( not kotwica_na_dnie_l ) (...)


                      // Unoszenie.
                      if    ( zt_statek.czy_samolot )
                        and ( zt_statek.AbsolutePosition.Y >= samolot_w_powietrzu_wysokoœæ_od_c )
                        //and ( zt_statek.Samolot_Na_Lotniskowcu() = nil ) // Jest sprawdzane wy¿ej.
                        and ( not kotwica_na_dnie_l ) then
                        begin

                          // Je¿eli samolot leci to wiatr unosi go w górê i w dó³.

                          zt_statek.Position.AddScaledVector
                            (
                              wiatr_vector_g.Y * wiatr__wp³yw_na__statek__unoszenie_g * delta_czasu_f,
                              GLS.VectorGeometry.AffineVectorMake
                                (
                                  0,
                                  1, // Na kierunek wp³ynie znak wiatr_vector_g.Y.
                                  0
                                )
                            );
                          zt_statek.TransformationChanged();

                        end;
                      //---//if    ( zt_statek.czy_samolot ) (...)

                    end;
                  //---//if    ( Wiatr__Wp³yw_Na_Rozgrywkê_CheckBox.Checked ) (...)


                  if zt_statek.wiatr__kolizja then
                    zt_statek.wiatr__kolizja := false;
                  {$endregion 'Wp³yw wiatru na statek.'}


                  if zt_statek.punkty_¿ycia_aktualne <= 0 then
                    begin

                      if zt_statek.schemat_samolot_zmiana_czas_sekundy_i <> 0 then
                        zt_statek.schemat_samolot_zmiana_czas_sekundy_i := 0; // Utrata ca³ego ¿ycia przerywa proces zmiany samolotu.


                      if zt_statek.statek__czas_do_zatoniêcia_s = '' then
                        begin

                          zti := Czas_Miêdzy_W_Sekundach( zt_statek.statek__utworzenie_czas_i );

                          zt_statek.statek__czas_do_zatoniêcia_s := Sekundy_W__Minuty_Sekundy( zti );

                          i := Gra_Statystyki_R_Identyfikator_ZnajdŸ( zt_statek.id_gracz );

                          if i >= 0 then
                            begin

                              if   ( gra_statystyki_r_t[ i ].czas_do_zatoniêcia__najd³u¿szy_sekund__gs < zti )
                                or ( gra_statystyki_r_t[ i ].czas_do_zatoniêcia__najd³u¿szy_sekund__gs = -1 ) then
                                gra_statystyki_r_t[ i ].czas_do_zatoniêcia__najd³u¿szy_sekund__gs := zti;

                              if   ( gra_statystyki_r_t[ i ].czas_do_zatoniêcia__najkrótszy_sekund__gs > zti )
                                or ( gra_statystyki_r_t[ i ].czas_do_zatoniêcia__najkrótszy_sekund__gs = -1 ) then
                                gra_statystyki_r_t[ i ].czas_do_zatoniêcia__najkrótszy_sekund__gs := zti;

                              gra_statystyki_r_t[ i ].czas_do_zatoniêcia__suma_sekund__gs := gra_statystyki_r_t[ i ].czas_do_zatoniêcia__suma_sekund__gs + zti;
                              gra_statystyki_r_t[ i ].zatoniêcia__gs := gra_statystyki_r_t[ i ].zatoniêcia__gs + 1;

                            end;
                          //---//if i >= 0 then


                          for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
                            if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd = zt_statek.id_gracz then
                              begin

                                Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__odbierz__statek__czas_do_zatoniêcia_c, TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).peer_port_tcp__kd, IntToStr( zt_statek.id_statek ) + ';' + zt_statek.statek__czas_do_zatoniêcia_s  );
                                Break;

                              end;
                            //---//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd <= si_peer_port_c then

                        end;
                      //---//if zt_statek.statek__czas_do_zatoniêcia_s = '' then


                      {$region 'Animacja toniêcia statku.'}
                      if zt_statek.toniêcie__prêdkoœæ_w_dó³ = 0 then
                        begin

                          // Ustalenie wspó³czynników toniêcia (jeden raz).

                          zt_statek.toniêcie__obrót__lewo_prawo := (  Random( 20 ) + 1  ) * 0.01; // Od 0.01 do 0.2.
                          zt_statek.toniêcie__obrót__przód_ty³ := (  Random( 10 ) + 1  ) * 0.01; // Od 0.001 do 0.01.
                          //zt_statek.toniêcie__prêdkoœæ_w_dó³ := (  Random( 10 ) + 1  ) * 0.001; // Od 0.01 do 0.1.
                          zt_statek.toniêcie__prêdkoœæ_w_dó³ := 0.15 + Random( 10 ) * 0.1; // Od 0.15 do 1.15.


                          if Random( 2 ) = 0 then
                            zt_statek.toniêcie__obrót__lewo_prawo := -zt_statek.toniêcie__obrót__lewo_prawo;

                          if Random( 2 ) = 0 then
                            zt_statek.toniêcie__obrót__przód_ty³ := -zt_statek.toniêcie__obrót__przód_ty³;


                          zt_statek.toniêcie__czas_sekundy_i := Czas_Teraz_W_Sekundach();

                        end;
                      //---//if zt_statek.toniêcie__prêdkoœæ_w_dó³ = 0 then


                      //zt_statek.PitchAngle := zt_statek.PitchAngle + 0.2; // Góra (+).
                      //zt_statek.RollAngle := zt_statek.RollAngle + 0.01; // Prawo (+).
                      //zt_statek.Lift( -0.005 ); // Dó³ (-). // Po obrocie przesuwa prostopadle do dna statku a nie w dó³ sceny.
                      //zt_statek.Position.Y := zt_statek.Position.Y - 0.01;

                      if zt_statek.Position.Y > Dno_Kolizje_GLCube.Position.Y then // Aby siê nie krêci³ na dnie.
                        begin

                          //zt_statek.PitchAngle := zt_statek.PitchAngle + zt_statek.toniêcie__obrót__przód_ty³; // Góra (+).
                          //zt_statek.RollAngle := zt_statek.RollAngle + zt_statek.toniêcie__obrót__lewo_prawo; // Prawo (+).
                          //zt_statek.Position.Y := zt_statek.Position.Y - zt_statek.toniêcie__prêdkoœæ_w_dó³;
                          zt_statek.toniêcie_gl_dummy_cube.PitchAngle := zt_statek.toniêcie_gl_dummy_cube.PitchAngle + zt_statek.toniêcie__obrót__przód_ty³; // Góra (+).
                          zt_statek.toniêcie_gl_dummy_cube.RollAngle := zt_statek.toniêcie_gl_dummy_cube.RollAngle + zt_statek.toniêcie__obrót__lewo_prawo; // Prawo (+).
                          //zt_statek.Lift( -zt_statek.toniêcie__prêdkoœæ_w_dó³ * delta_czasu_f );

                          // Aby podczas toniêcia statek nie przenika³ przez (podwodne) l¹dy.
                          ztr := prêdkoœæ__kolizja_zwalnianie_kopia;

                          if ztr >= 100 then
                            ztr := 99;

                          ztr := ( 100 - ztr ) * 0.01; // Prêdkoœæ zadana pomniejszona o si³ê zwalniania (wyra¿on¹ w procentach).

                          if ztr < 0 then
                            ztr := 1;
                          //---// Aby podczas toniêcia statek nie przenika³ przez (podwodne) l¹dy.

                          zt_statek.Lift( -zt_statek.toniêcie__prêdkoœæ_w_dó³ * ztr * delta_czasu_f );

                        end;
                      //---//if zt_statek.Position.Y > Dno_Kolizje_GLCube.Position.Y then


                      //zt_statek.Lift( -0.005 ); // Dó³ (-). // Po obrocie przesuwa prostopadle do dna statku a nie w dó³ sceny.
                      {$endregion 'Animacja toniêcia statku.'}


                      if    ( Statki_Przywracaj_Do_Gry_CheckBox.Checked )
                        and (  Czas_Miêdzy_W_Sekundach( zt_statek.toniêcie__czas_sekundy_i ) > oczekiwanie_na__odnowienie_statku__czas_sekundy_g  ) then
                        begin

                          // Ze wzglêdu na wyliczanie statystyk lepiej wczeœniej wyliczaæ t¹ wartoœæ (statki z zerow¹ iloœci¹ punktów ¿ycia nie s¹ naprawiane).
                          //i := Gra_Statystyki_R_Identyfikator_ZnajdŸ( zt_statek.id_gracz );
                          //
                          //if i >= 0 then
                          //  begin
                          //
                          //    gra_statystyki_r_t[ i ].zatoniêcia__gs := gra_statystyki_r_t[ i ].zatoniêcia__gs + 1;
                          //
                          //  end;
                          ////---//if i >= 0 then


                          zt_statek.czy_usun¹æ_statek := true;

                        end;
                      //---//if    ( Statki_Przywracaj_Do_Gry_CheckBox.Checked ) (...)

                    end
                  else//if zt_statek.punkty_¿ycia_aktualne <= 0 then
                    if    ( zt_statek.schemat_samolot_zmiana_czas_sekundy_i <> 0 )
                      and (  Czas_Miêdzy_W_Sekundach( zt_statek.schemat_samolot_zmiana_czas_sekundy_i ) > oczekiwanie_na__odnowienie_statku__czas_sekundy_g  ) then
                      begin

                        zt_statek.czy_usun¹æ_statek := true; // Aby nie przelicza³ ruchu tego statku.
                        zt_statek.czy_schemat_samolot_zmiana := true;

                      end;
                    //---//if    ( zt_statek.schemat_samolot_zmiana_czas_sekundy_i <> 0 ) (...)

                end
              else//if not czy_klient_g then
                for i := 0 to Length( zt_statek.kotwica_t ) - 1 do
                  zt_statek.kotwica_t[ i ].Kotwica_Lina_Odœwie¿();


              zt_statek.Punkty_¯ycia__WskaŸnik__Rysuj( Gra_GLCamera, Punkty_¯ycia_WskaŸnik__Prezentowanie_Sposób_ComboBox.ItemIndex );


              Œlad_Torowy__Utwórz_Jeden( zt_statek );


              {$region 'Falowanie statku.'}
              if zt_statek.falowanie_opóŸnienie <= 0 then
                begin

                  if zt_statek.Position.Y > Dno_Kolizje_GLCube.Position.Y then // Aby nie falowa³ na dnie.
                    if   ( not zt_statek.czy_samolot )
                      or (
                               ( zt_statek.czy_samolot )
                           and ( not czy_samolot__kolizja_kopia )
                         ) then
                      begin

                        // Gdy jednoczeœnie zmienia siê PitchAngle i RollAngle to falowanie_gl_dummy_cube zaczyna siê krêciæ wokó³ osi Y.
                        zt_statek.falowanie_gl_dummy_cube.ResetRotations();


                        //zt_statek.falowanie_bok_wychylenie_aktualne := zt_statek.falowanie_bok_wychylenie_aktualne + 50 * delta_czasu_f;
                        zt_statek.falowanie_bok_wychylenie_aktualne := zt_statek.falowanie_bok_wychylenie_aktualne + (  25 + Random( 26 )  ) * delta_czasu_f; // Aby falowanie by³o bardziej zmienne.

                        while zt_statek.falowanie_bok_wychylenie_aktualne >= 360 do
                          begin

                            //zt_statek.falowanie_bok_wychylenie_aktualne := 0;
                            zt_statek.falowanie_bok_wychylenie_aktualne := zt_statek.falowanie_bok_wychylenie_aktualne - 360;
                            //zt_statek.falowanie_bok_zakres := Random( 10 );

                          end;
                        //---//while zt_statek.falowanie_bok_wychylenie_aktualne >= 360 do


                        morze_wzburzenie_l := Morze_Wzburzenie_SpinEdit.Value;

                        if morze_wzburzenie_l < Morze_Wzburzenie_SpinEdit.MinValue then
                          morze_wzburzenie_l := Morze_Wzburzenie_SpinEdit.MinValue;

                        ztr := zt_statek.falowanie_bok_zakres * morze_wzburzenie_l * 0.01;

                        if ztr > 60 then
                          ztr := 60;

                        zt_statek.falowanie_gl_dummy_cube.RollAngle := Sin(  DegToRad( zt_statek.falowanie_bok_wychylenie_aktualne ) ) * ztr + zt_statek.falowanie_bok_skrêt;


                        //zt_statek.falowanie_przód_wychylenie_aktualne := zt_statek.falowanie_przód_wychylenie_aktualne + 50 * delta_czasu_f;
                        zt_statek.falowanie_przód_wychylenie_aktualne := zt_statek.falowanie_przód_wychylenie_aktualne + (  25 + Random( 26 )  ) * delta_czasu_f; // Aby falowanie by³o bardziej zmienne.

                        while zt_statek.falowanie_przód_wychylenie_aktualne >= 360 do
                          begin

                            //zt_statek.falowanie_przód_wychylenie_aktualne := 0;
                            zt_statek.falowanie_przód_wychylenie_aktualne := zt_statek.falowanie_przód_wychylenie_aktualne - 360;
                            //zt_statek.falowanie_przód_zakres := Random( 10 );

                          end;
                        //---//while zt_statek.falowanie_przód_wychylenie_aktualne >= 360 do


                        ztr := zt_statek.falowanie_przód_zakres * morze_wzburzenie_l * 0.01;

                        if ztr > 45 then
                          ztr := 45;

                        zt_statek.falowanie_gl_dummy_cube.PitchAngle := Sin(  DegToRad( zt_statek.falowanie_przód_wychylenie_aktualne ) ) * ztr + zt_statek.falowanie_przód_ruch + zt_statek.falowanie_przód_pu³ap; // Gdy w przód to unosi przód i odwrotnie dla ty³u (aby oba koñce tak samo unosi³o nale¿y zapisaæ w nawiasie ( zt_statek.falowanie_przód_zakres + zt_statek.falowanie_przód_ruch ) ).


                        //zt_statek.falowanie_góra_dó³_wysokoœæ_aktualna := zt_statek.falowanie_góra_dó³_wysokoœæ_aktualna + 50 * delta_czasu_f;
                        zt_statek.falowanie_góra_dó³_wysokoœæ_aktualna := zt_statek.falowanie_góra_dó³_wysokoœæ_aktualna + (  25 + Random( 26 )  ) * delta_czasu_f;

                        if zt_statek.falowanie_góra_dó³_wysokoœæ_aktualna >= 360 then
                          zt_statek.falowanie_góra_dó³_wysokoœæ_aktualna := zt_statek.falowanie_góra_dó³_wysokoœæ_aktualna - 360;


                        if   ( not Fale_CheckBox.Checked )
                          or (
                                   ( zt_statek.czy_samolot ) // Samolot w powietrzu nie buja siê na falach.
                               and ( zt_statek.AbsolutePosition.Y > samolot_w_powietrzu_wysokoœæ_od_c ) // Dla wysokich fal mo¿e wystêpowaæ przeskok w pozycji samolotu w pionie.
                             ) then
                          begin

                            ztr := zt_statek.falowanie_góra_dó³_zakres * morze_wzburzenie_l * 0.01;
                            zt_statek.falowanie_gl_dummy_cube.Position.Y := Sin(  DegToRad( zt_statek.falowanie_góra_dó³_wysokoœæ_aktualna ) ) * ztr;

                          end
                        else//if   ( not Fale_CheckBox.Checked ) (...)
                          begin

                            // Wysokoœæ na zboczu fali.
                            zt_statek.falowanie_gl_dummy_cube.Position.Y := Fala__Wysokoœæ_Na_Zboczu( zt_statek.AbsolutePosition );

                          end;
                        //---//if   ( not Fale_CheckBox.Checked ) (...)


                        // Gdy jednoczeœnie zmienia siê PitchAngle i RollAngle to falowanie_gl_dummy_cube zaczyna siê krêciæ wokó³ osi Y.
                        // Przy tym rozwi¹zaniu czasami odchyla siê na bok i stoi krzywo, lepiej sprawdza siê umieszczone na pocz¹tku ResetRotations().
                        //zt_statek.falowanie_gl_dummy_cube.Direction.X := 0;
                        //zt_statek.falowanie_gl_dummy_cube.Direction.Z := 1;

                      end;
                    //---//if   ( not zt_statek.czy_samolot ) (...)

                end
              else//if zt_statek.falowanie_opóŸnienie <= 0 then
                begin

                  if Czas_Teraz_W_Milisekundach() >= zt_statek.falowanie_opóŸnienie then
                    begin

                      zt_statek.falowanie_bok_wychylenie_aktualne := Random( 26 ); // Aby falowanie by³o bardziej zmienne.
                      zt_statek.falowanie_góra_dó³_wysokoœæ_aktualna := Random( 26 ); // Aby falowanie by³o bardziej zmienne.
                      zt_statek.falowanie_przód_wychylenie_aktualne := Random( 26 ); // Aby falowanie by³o bardziej zmienne.

                      zt_statek.falowanie_opóŸnienie := 0;

                    end;
                  //---//if Czas_Teraz_W_Milisekundach() >= zt_statek.falowanie_opóŸnienie then

                end;
              //---//if zt_statek.falowanie_opóŸnienie <= 0 then
              {$endregion 'Falowanie statku.'}


              if MilliSecondsBetween( Now(), dŸwiêk_silnika_zmiana__ostatnie_wywo³anie_data_czas_g ) >= dŸwiêk_silnika_zmiana__czas_milisekundy_c then
                begin

                  DŸwiêki__Efekt__Utwórz_Jeden( zt_statek, der_Silnik, 0, 0, 0 );

                  dŸwiêk_silnika_zmiana__ostatnie_wywo³anie_data_czas_g := Now();

                end;
              //---//if MilliSecondsBetween( Now(), dŸwiêk_silnika_zmiana__ostatnie_wywo³anie_data_czas_g ) >= dŸwiêk_silnika_zmiana__czas_milisekundy_c then

            end
          else//if not zt_statek.czy_usun¹æ_statek then
            begin

              // czy_usun¹æ_statek - tak.

              if    ( not czy_klient_g ) // Klient nie powinien tutaj dojœæ (nie dostaje informacji o zt_statek.czy_usun¹æ_statek).
                and (
                         (
                               ( Statki_Przywracaj_Do_Gry_CheckBox.Checked )
                           and ( zt_statek.czy_usun¹æ_statek )
                         )
                      or ( zt_statek.czy_schemat_samolot_zmiana )
                    ) then
                Statek_Przywróæ_Do_Gry( zt_statek );

            end;
          //---//if not zt_statek.czy_usun¹æ_statek then

        end;
      //---//if zt_statek <> nil then

    end;
  //---//for i_s := 0 to Length( statki_t ) - 1 do

  Amunicja_Ruch( delta_czasu_f );

  Œlad_Torowy__Animuj( delta_czasu_f );

end;//---//Funkcja Statki_Ruch().

//Funkcja Statki_Tabela_Pozycje_Nil_Usuñ().
procedure TStatki_Form.Statki_Tabela_Pozycje_Nil_Usuñ();
var
  ztb : boolean;
  i : integer;
  zt_statek : TStatek;
begin

  //
  // Funkcja je¿eli po zwalnianiu statków (zw³aszcza lotniskowców) pozosta³y pozycje w tabeli statków równe nil to przesunie te pozycje na koniec i zmniejszy wielkoœæ tabeli.
  //

  ztb := true; // Aby wejœæ w pêtlê.

  while ztb do
    begin

      ztb := false;

      for i := 0 to Length( statki_t ) - 2 do
        if    ( statki_t[ i ]= nil )
          and ( statki_t[ i + 1 ] <> nil ) then
          begin

            ztb := true;

            zt_statek := statki_t[ i + 1 ];
            statki_t[ i + 1 ] := nil;
            statki_t[ i ] := zt_statek;

          end;
        //---//if    ( statki_t[ i ]= nil ) (...)

    end;
  //---//while ztb do


  while ( Length( statki_t ) > 0 )
    and ( statki_t[ Length( statki_t ) - 1 ] = nil ) do
    SetLength( statki_t, Length( statki_t ) - 1 );

end;//---//Funkcja Statki_Tabela_Pozycje_Nil_Usuñ().

//Funkcja Statki_Zwolnij().
procedure TStatki_Form.Statki_Zwolnij( const zwolnij_statek_gracza_f : boolean = true; zwolnij_statki_nie_gracza_f : boolean = true );
var
  i : integer;
begin

  //
  // Funkcja zwalnia utworzone statki i czyœci listê statków.
  //
  // Parametry:
  //   zwolnij_statek_gracza_f:
  //     false - nie zwalnia statku gracza.
  //     true - zwalnia statek gracza.
  //   zwolnij_statki_nie_gracza_f:
  //     false - nie zwalnia statków innych ni¿ gracza.
  //     true - zwalnia statki inne ni¿ gracza (gdy prezentuje wszystkie statki zwolni tylko statki prezentowane).
  //
  //     Statki_Zwolnij() - gry zwolnij_statek_gracza_f i zwolnij_statki_nie_gracza_f = true zwolni wszystkie statki.
  //


  if    ( zwolnij_statek_gracza_f )
    and ( zwolnij_statki_nie_gracza_f ) then
    begin

      gracz_tryb_g := gt_Statek;

      // Aby nie zwolni³o kamery wraz ze statkiem.
      while Gra_GLCamera.Parent <> Gra_GLScene.Objects do
        Kamera_Prze³¹cz( kt_Swobodna );

      DŸwiêki__Efekt__Zwolnij_Wszystkie();
      DŸwiêki__Komunikat__Zwolnij_Wszystkie();
      Trafienia_Efekt__Zwolnij_Wszystkie();

      projektowy_tryb__statek := nil;
      samolot__statek_gracza := nil;
      statek_gracza := nil; // Nie zmienia statki_t[ 0 ].


      // Odpina samoloty ze statków aby zosta³y zwolnione osobno.
      for i := 0 to Length( statki_t ) - 1 do
        if    ( statki_t[ i ] <> nil )
          and ( statki_t[ i ].czy_samolot )
          and ( statki_t[ i ].Samolot_Na_Lotniskowcu() <> nil ) then
          statki_t[ i ].Samolot_Lotniskowiec_Od³¹cz();

      for i := 0 to Length( statki_t ) - 1 do // Dodatkowe sprawdzenie.
        if    ( statki_t[ i ] <> nil )
          and ( statki_t[ i ].Parent <> Gra_Obiekty_GLDummyCube ) then
          statki_t[ i ].Parent := Gra_Obiekty_GLDummyCube;


      for i := 0 to Length( statki_t ) - 1 do
        if statki_t[ i ] <> nil then
          FreeAndNil( statki_t[ i ] );

      SetLength( statki_t, 0 );


      DŸwiêki__L¹dów__Zwolnij_Wszystkie( false, true );

    end
  else//if    ( zwolnij_statek_gracza_f ) (...)
    begin

      //if zwolnij_statki_nie_gracza_f then
      //  begin
      //
      //    for i := 1 to Length( statki_t ) - 1 do
      //      if not statki_t[ i ].czy_samolot then
      //        Statek_Zwolnij( i );
      //
      //    //SetLength( statki_t, 1 );
      //
      //  end
      //else//if zwolnij_statki_nie_gracza_f then
      //  if zwolnij_statek_gracza_f then
      //    Statek_Zwolnij( 0 );
      //
      //
      //if   ( zwolnij_statek_gracza_f )
      //  or ( zwolnij_statki_nie_gracza_f ) then
      //  Statki_Tabela_Pozycje_Nil_Usuñ();


      for i := 0 to Length( statki_t ) - 1 do
        if    ( statki_t[ i ] <> nil )
          //and ( not statki_t[ i ].czy_samolot )
          and ( statki_t[ i ].Parent = Gra_Obiekty_GLDummyCube )
          and (
                   (
                         ( zwolnij_statek_gracza_f )
                     and (
                              ( statki_t[ i ].id_gracz = 0 )
                           or ( statki_t[ i ].id_gracz = Gracz_Identyfikator() )
                         )
                   )
                or (
                         ( zwolnij_statki_nie_gracza_f )
                     and ( statki_t[ i ].id_gracz <> 0 )
                     and ( statki_t[ i ].id_gracz <> Gracz_Identyfikator() )
                   )
              ) then
          Statek_Zwolnij( i );


      if   ( zwolnij_statek_gracza_f )
        or ( zwolnij_statki_nie_gracza_f ) then
        Statki_Tabela_Pozycje_Nil_Usuñ();

    end;
  //---//if    ( zwolnij_statek_gracza_f ) (...)

end;//---//Funkcja Statki_Zwolnij().

//Funkcja Syrena_Okrêtowa__Inicjuj().
procedure TStatki_Form.Syrena_Okrêtowa__Inicjuj( const statek_f : TStatek );
begin

  if   ( statek_f = nil )
    or (  not Assigned( statek_f )  ) then
    Exit;


  if czy_klient_g then
    Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__statek__syrena_okrêtowa_klient_nadaje_c, -99, IntToStr( statek_f.id_statek )  )
  else//if czy_klient_g then
    DŸwiêki__Efekt__Utwórz_Jeden( der_Syrena_Okrêtowa, statek_f.AbsolutePosition );

end;//---//Funkcja Syrena_Okrêtowa__Inicjuj().

//Funkcja Œlad_Torowy__Animuj().
procedure TStatki_Form.Œlad_Torowy__Animuj( delta_czasu_f : double );
var
  i : integer;
begin

  //
  // Funkcja animuje œlad torowy i zwalnia koniec œladu torowego.
  //

  if   ( œlad_torowy_list = nil )
    or (  not Assigned( œlad_torowy_list )  ) then
    Exit;


  for i := œlad_torowy_list.Count - 1 downto 0 do
    begin

      if    ( TŒlad_Torowy(œlad_torowy_list[ i ]).powiêksza_siê )
        and ( TŒlad_Torowy(œlad_torowy_list[ i ]).Scale.X < TŒlad_Torowy(œlad_torowy_list[ i ]).œlad_torowy__szerokoœæ_pocz¹tkowa * 10 ) then
        begin

          TŒlad_Torowy(œlad_torowy_list[ i ]).Scale.X := TŒlad_Torowy(œlad_torowy_list[ i ]).Scale.X + 0.1 * delta_czasu_f;
          TŒlad_Torowy(œlad_torowy_list[ i ]).Scale.Z := TŒlad_Torowy(œlad_torowy_list[ i ]).Scale.Z + 0.1 * delta_czasu_f;

        end
      else//if    ( TŒlad_Torowy(œlad_torowy_list[ i ]).powiêksza_siê ) (...)
        if TŒlad_Torowy(œlad_torowy_list[ i ]).powiêksza_siê then
          TŒlad_Torowy(œlad_torowy_list[ i ]).powiêksza_siê := false;


      if    ( not TŒlad_Torowy(œlad_torowy_list[ i ]).zmieni³_kolor )
        and ( TŒlad_Torowy(œlad_torowy_list[ i ]).Scale.X >= TŒlad_Torowy(œlad_torowy_list[ i ]).œlad_torowy__szerokoœæ_pocz¹tkowa * 5 ) then
        begin

          TŒlad_Torowy(œlad_torowy_list[ i ]).EdgeColor.Color := GLS.VectorGeometry.VectorScale( GLS.Color.clrSkyBlue, dzieñ_jasnoœæ_g );

          TŒlad_Torowy(œlad_torowy_list[ i ]).zmieni³_kolor := true;

        end;
      //---//if    ( not TŒlad_Torowy(œlad_torowy_list[ i ]).zmieni³_kolor ) (...)


      // Wysokoœæ na zboczu fali.
      TŒlad_Torowy(œlad_torowy_list[ i ]).Position.Y := Fala__Wysokoœæ_Na_Zboczu( TŒlad_Torowy(œlad_torowy_list[ i ]).AbsolutePosition );


      //if TŒlad_Torowy(œlad_torowy_list[ i ]).zmieni³_kolor then //???
        //TŒlad_Torowy(œlad_torowy_list[ i ]).EdgeColor.Alpha := (  100 - Czas_Miêdzy_W_Milisekundach( TŒlad_Torowy(œlad_torowy_list[ i ]).czas_utworzenia_milisekundy_œt, true ) * 100 / ( TŒlad_Torowy(œlad_torowy_list[ i ]).czas_trwania_milisekundy_œt )  ) * 0.01;
        TŒlad_Torowy(œlad_torowy_list[ i ]).EdgeColor.Alpha := 1 - Czas_Miêdzy_W_Milisekundach( TŒlad_Torowy(œlad_torowy_list[ i ]).czas_utworzenia_milisekundy_œt, true ) / ( TŒlad_Torowy(œlad_torowy_list[ i ]).czas_trwania_milisekundy_œt ); // Uproszczenie obliczeñ.


      if Czas_Miêdzy_W_Milisekundach( TŒlad_Torowy(œlad_torowy_list[ i ]).czas_utworzenia_milisekundy_œt, true ) >= TŒlad_Torowy(œlad_torowy_list[ i ]).czas_trwania_milisekundy_œt then
        Œlad_Torowy__Zwolnij_Jeden( TŒlad_Torowy(œlad_torowy_list[ i ]) );

    end;
  //---//for i := œlad_torowy_list.Count - 1 downto 0 do

end;//---//Funkcja Œlad_Torowy__Animuj().

//Funkcja Œlad_Torowy__Utwórz_Jeden().
procedure TStatki_Form.Œlad_Torowy__Utwórz_Jeden( statek_f : TStatek );
var
  zt_œlad_torowy : TŒlad_Torowy;
begin

  if   ( œlad_torowy_list = nil )
    or (  not Assigned( œlad_torowy_list )  )
    or ( statek_f = nil )
    or (  not Assigned( statek_f )  ) then
    Exit;


  if    (
             (
                   ( not statek_f.czy_samolot )
               and ( statek_f.zanurzenie_pu³ap__aktualne_procent <= 25 )
             )
          or (
                   ( statek_f.czy_samolot )
               and ( statek_f.AbsolutePosition.Y < samolot_w_powietrzu_wysokoœæ_od_c )
             )
        )
    and (
             (
                   ( statek_f.punkty_¿ycia_aktualne > 0 )
               and (
                        (  Czas_Miêdzy_W_Milisekundach( statek_f.œlad_torowy__czas_utworzenia_ostatniego_milisekundy_i, true ) >= œlad_torowy__dodanie_kolejnego__czas_milisekundy_c  )
                     or (  statek_f.DistanceTo( statek_f.œlad_torowy__pozycja_ostatniego ) >= statek_f.œlad_torowy__d³ugoœæ  )
                   )
             )
          or (
                   ( statek_f.punkty_¿ycia_aktualne <= 0 ) // Gdy statek tonie oddala siê od œladu torowego i rysowanie nastêpuje tylko wzglêdem czasu.
               and (  Czas_Miêdzy_W_Milisekundach( statek_f.œlad_torowy__czas_utworzenia_ostatniego_milisekundy_i, true ) >= ( œlad_torowy__dodanie_kolejnego__czas_milisekundy_c * 0.1 )  )
             )
        ) then
    begin

      zt_œlad_torowy := TŒlad_Torowy.Create( Gra_Obiekty_GLDummyCube, statek_f.AbsoluteDirection, statek_f.AbsolutePosition, statek_f.œlad_torowy__d³ugoœæ, statek_f.œlad_torowy__szerokoœæ, dzieñ_jasnoœæ_g, statek_f.Zanurzenie_Peryskopowe__Utrzymywane() );
      œlad_torowy_list.Add( zt_œlad_torowy );

      statek_f.œlad_torowy__czas_utworzenia_ostatniego_milisekundy_i := Czas_Teraz_W_Milisekundach();
      GLS.VectorGeometry.MakeVector( statek_f.œlad_torowy__pozycja_ostatniego, zt_œlad_torowy.Position.AsVector );

    end;
  //---//if    ( (...)

end;//---//Funkcja Œlad_Torowy__Utwórz_Jeden().

//Funkcja Œlad_Torowy__Zwolnij_Jeden().
procedure TStatki_Form.Œlad_Torowy__Zwolnij_Jeden( œlad_torowy_f : TŒlad_Torowy );
begin

  // Usuwaæ tylko w jednym miejscu. //!!!
  // Wywo³anie tej funkcji w kliku miejscach mo¿e coœ zepsuæ.

  if   ( œlad_torowy_list = nil )
    or (  not Assigned( œlad_torowy_list )  )
    or ( œlad_torowy_f = nil ) then
    Exit;

  //pociski_magiczne_blokada := true;

  œlad_torowy_list.Remove( œlad_torowy_f );
  FreeAndNil( œlad_torowy_f );

end;//---//Funkcja Œlad_Torowy__Zwolnij_Jeden()

//Funkcja Œlad_Torowy__Zwolnij_Wszystkie().
procedure TStatki_Form.Œlad_Torowy__Zwolnij_Wszystkie();
var
  i : integer;
begin

  if   ( œlad_torowy_list = nil )
    or (  not Assigned( œlad_torowy_list )  ) then
    Exit;


  for i := œlad_torowy_list.Count - 1 downto 0 do
    begin

      TŒlad_Torowy(œlad_torowy_list[ i ]).Free();
      œlad_torowy_list.Delete( i );

    end;
  //---//for i := œlad_torowy_list.Count - 1 downto 0 do

end;//---//Funkcja Œlad_Torowy__Zwolnij_Wszystkie().

//Funkcja Œwiat³a_Miganie().
procedure TStatki_Form.Œwiat³a_Miganie();
begin

  //
  // Funkcja obs³uguje obiekty œwiat³a, które migaj¹.
  //

  if   ( not Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBox.Checked )
    or (  Czas_Miêdzy_W_Milisekundach( œwiat³a_miganie__czas_przeliczenia_ostatniego_milisekundy_i_g, true ) < œwiat³a_miganie__przeliczenie_milisekundy_c  ) then
    Exit;


  Wygl¹d_Elementy__Noc_Zmieñ( true );


  œwiat³a_miganie__czas_przeliczenia_ostatniego_milisekundy_i_g := Czas_Teraz_W_Milisekundach();


  if    ( dzieñ_jasnoœæ_g >= œwiat³o__w³¹czanie_próg__dzieñ_jasnoœæ_c ) // Przy dobrej widocznoœci l¹d nie miga.
    and ( mg³a_intensywnoœæ_g <= œwiat³o__w³¹czanie_próg__mg³a_intensywnoœæ_c )
    and ( not œwiat³a_miganie__opóŸnienia_losowe_resetuj__l¹d__przeliczono_g ) then
    Œwiat³a_Miganie__OpóŸnienia_Losowe_Resetuj__L¹d();

end;//---//Funkcja Œwiat³a_Miganie().

//Funkcja Œwiat³a_Miganie__OpóŸnienia_Losowe_Resetuj__L¹d().
procedure TStatki_Form.Œwiat³a_Miganie__OpóŸnienia_Losowe_Resetuj__L¹d();
var
  i : integer;
begin

  //
  // Funkcja ponownie wylicza opóŸnienia losowe migania œwiate³.
  //
  // Je¿eli miganie œwiate³ siê rozpocznie to opóŸnienia losowe s¹ zu¿ywane
  // i je¿eli miganie œwiate³ zostanie wy³¹czone i ponownie w³¹czone
  // to nie ma ju¿ losowych zmian w miganiu œwiate³.
  //

  if    ( l¹d_list <> nil )
    and (  Assigned( l¹d_list )  ) then
    for i := 0 to l¹d_list.Count - 1 do
      if Wyglad_Elementy.Œwiat³a_Miganie__Losowoœæ( TGLCustomSceneObject(Self.l¹d_list[ i ]) ) > 0 then
        Wyglad_Elementy.Œwiat³a_Miganie__OpóŸnienie_Losowe__Wylicz( TGLCustomSceneObject(Self.l¹d_list[ i ]) );

  œwiat³a_miganie__opóŸnienia_losowe_resetuj__l¹d__przeliczono_g := true;

end;//---//Funkcja Œwiat³a_Miganie__OpóŸnienia_Losowe_Resetuj__L¹d().

//Funkcja Œwiat³a_Miganie__Wartoœci_Ustaw().
procedure TStatki_Form.Œwiat³a_Miganie__Wartoœci_Ustaw( const gl_custom_scene_object_f : TGLCustomSceneObject; czas_odstêpy_f : string );
var
  i,
  zti
    : integer;
  zts : string;
begin

  if Trim( czas_odstêpy_f ) = '' then
    Exit;

  czas_odstêpy_f := czas_odstêpy_f + ',';

  i := Pos( ',', czas_odstêpy_f );

  while i > 0 do
    begin

      zts := Trim(  Copy( czas_odstêpy_f, 1, i - 1 )  );
      Delete( czas_odstêpy_f, 1, i );

      try
        zti := StrToInt( zts );
      except
        zti := 0;
      end;
      //---//try

      if zti > 0 then
        begin

          Wyglad_Elementy.Œwiat³a_Miganie__Czas_Do_Zmiany( gl_custom_scene_object_f, zti );

          if not Wyglad_Elementy.Œwiat³a_Miganie( gl_custom_scene_object_f ) then
            Wyglad_Elementy.Œwiat³a_Miganie( gl_custom_scene_object_f, true );

        end;
      //---//if zti > 0 then


      i := Pos( ',', czas_odstêpy_f );

    end;
  //---//while i > 0 do

end;//---//Funkcja Œwiat³a_Miganie__Wartoœci_Ustaw().

//Funkcja T³umaczenie__Domyœlne().
procedure TStatki_Form.T³umaczenie__Domyœlne();
var
  zti : integer;
begin

  {$region 'Pokój rozmów polecenia dla SI.'}
  zti := 0;
  SetLength( pokój_rozmów__si_polecenia_t, zti );

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__si_aktywnoœæ_podaj_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_Brak_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__jak_tam_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_Samolot__L¹dowanie_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_Patrol_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Mnie_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Mnie_c + ' ' + pokój_rozmów__si_polecenie__sia_Postój_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Punktu_c + ' ( x = ; z = ; y =  )';

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Punktu_c + ' ( x = ; z = ; y =  ) ' + pokój_rozmów__si_polecenie__sia_Postój_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_Postój_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__l¹dowanie__zezwolenie_proœba__kurs_aktualny_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__l¹dowanie__zezwolenie_proœba__kurs_standardowy_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__l¹dowanie__przerwij_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__l¹dowanie__rezygnacja_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_Samolot__Startowanie_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_Walka_c;



  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sist_Brak_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sist_Celuj_Tylko_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sist_Nie_Celuj_Nie_Strzelaj_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sist_Odpowiedz_Ogniem_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
  pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sist_Strzelaj_Jak_Chcesz_c;
  {$endregion 'Pokój rozmów polecenia dla SI.'}


  {$region 't³umaczenie_komunikaty_r.'}
  t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__czas_kontaktu_udp_ostatniego := 'Czas kontaktu udp ostatniego';
  t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__czas_od³¹czenia := 'Czas od³¹czenia';
  t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__czas_pod³¹czenia := 'Czas pod³¹czenia';
  t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__czas_pod³¹czenia_ostatniego := 'Czas pod³¹czenia ostatniego';
  t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__dane_wys³ane := 'Dane wys³ane';
  t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__gotowy := 'Gotowy';
  t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__id_gracza := 'Id gracza';
  t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__l_p := 'L. p.';
  t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__nazwa := 'Nazwa';
  t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__od³¹czony := 'Od³¹czony';
  t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__peer_port_tcp := 'Peer port tcp';
  t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__peer_port_udp := 'Peer port udp';
  t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__samolot := 'Samolot';
  t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__statek := 'Statek';
  t³umaczenie_komunikaty_r.gracze_lista_nag³ówek__w_grze := 'W grze';

  t³umaczenie_komunikaty_r.ekran_napis__broñ_indeks_zmieniaj__skrót := 'ind';
  t³umaczenie_komunikaty_r.ekran_napis__busola := 'busola';
  t³umaczenie_komunikaty_r.ekran_napis__czas_gry := 'czas gry';
  t³umaczenie_komunikaty_r.ekran_napis__czas_gry__jednostka := 'mmm:ss';
  t³umaczenie_komunikaty_r.ekran_napis__dalmierz := 'dalmierz';
  t³umaczenie_komunikaty_r.ekran_napis__dalmierz__kamera := 'k';
  t³umaczenie_komunikaty_r.ekran_napis__dalmierz__statek := 's';
  t³umaczenie_komunikaty_r.ekran_napis__delta_czasu := 'Delta czasu';
  t³umaczenie_komunikaty_r.ekran_napis__dzia³a_obracaj__skrót := 'obr';
  t³umaczenie_komunikaty_r.ekran_napis__gra := 'Gra';
  t³umaczenie_komunikaty_r.ekran_napis__grupa__skrót := 'gr.';
  t³umaczenie_komunikaty_r.ekran_napis__id__skrót := 'id';
  t³umaczenie_komunikaty_r.ekran_napis__id_st := 'id st.';
  t³umaczenie_komunikaty_r.ekran_napis__katapulta := 'katapulta';
  t³umaczenie_komunikaty_r.ekran_napis__katapulta__oczekiwanie := 'oczekiwanie (zatrzymaj samolot / popraw k¹t)';
  t³umaczenie_komunikaty_r.ekran_napis__katapulta__uruchomiona := 'uruchomiona';
  t³umaczenie_komunikaty_r.ekran_napis__k¹t := 'k¹t';
  t³umaczenie_komunikaty_r.ekran_napis__klatek_na_sekundê__skrót := 'kl./s';
  t³umaczenie_komunikaty_r.ekran_napis__kotwica := 'kotwica';
  t³umaczenie_komunikaty_r.ekran_napis__l¹dowanie_u³atwione := 'L';
  t³umaczenie_komunikaty_r.ekran_napis__l¹duj_na := 'l¹duj na';
  t³umaczenie_komunikaty_r.ekran_napis__l¹duje := 'l¹duje';
  t³umaczenie_komunikaty_r.ekran_napis__losowy__skrót := 'L';
  t³umaczenie_komunikaty_r.ekran_napis__lufy_podnoœ__skrót := 'lf';
  t³umaczenie_komunikaty_r.ekran_napis__naprowadzanie := 'naprowadzanie';
  t³umaczenie_komunikaty_r.ekran_napis__odnawiania_zasobów := 'odnawiania zasobów';
  t³umaczenie_komunikaty_r.ekran_napis__odnawiania_zasobów__oczekiwanie := 'oczekiwanie (zatrzymaj samolot)';
  t³umaczenie_komunikaty_r.ekran_napis__odnawiania_zasobów__wznawianie := 'wznawianie';
  t³umaczenie_komunikaty_r.ekran_napis__odnawiania_zasobów__zakoñczono := 'zakoñczono';
  t³umaczenie_komunikaty_r.ekran_napis__odnowienie := 'odnowienie';
  t³umaczenie_komunikaty_r.ekran_napis__pauza := 'PAUZA';
  t³umaczenie_komunikaty_r.ekran_napis__postêp__z := 'z';
  t³umaczenie_komunikaty_r.ekran_napis__prêdkoœæ := 'prêdkoœæ';
  t³umaczenie_komunikaty_r.ekran_napis__pu³ap := 'pu³ap';
  t³umaczenie_komunikaty_r.ekran_napis__radar := 'Radar';
  t³umaczenie_komunikaty_r.ekran_napis__radar__busola__jeden_znak := 'b';
  t³umaczenie_komunikaty_r.ekran_napis__radar__dalmierz__jeden_znak := 'd';
  t³umaczenie_komunikaty_r.ekran_napis__radar__statek__jeden_znak := 'S';
  t³umaczenie_komunikaty_r.ekran_napis__radar__wspó³rzêdne_kursora__jeden_znak := 'C';
  t³umaczenie_komunikaty_r.ekran_napis__ró¿a_wiatrów__PN := 'PN';
  t³umaczenie_komunikaty_r.ekran_napis__ró¿a_wiatrów__PNW := 'PNW';
  t³umaczenie_komunikaty_r.ekran_napis__ró¿a_wiatrów__W := 'W';
  t³umaczenie_komunikaty_r.ekran_napis__ró¿a_wiatrów__PDW := 'PDW';
  t³umaczenie_komunikaty_r.ekran_napis__ró¿a_wiatrów__PD := 'PD';
  t³umaczenie_komunikaty_r.ekran_napis__ró¿a_wiatrów__PDZ := 'PDZ';
  t³umaczenie_komunikaty_r.ekran_napis__ró¿a_wiatrów__Z := 'Z';
  t³umaczenie_komunikaty_r.ekran_napis__ró¿a_wiatrów__PNZ := 'PNZ';
  t³umaczenie_komunikaty_r.ekran_napis__samolot__l¹dowanie := 's. l¹dowanie';
  t³umaczenie_komunikaty_r.ekran_napis__samolot__na_pok³adzie := 's. na pok³adzie';
  t³umaczenie_komunikaty_r.ekran_napis__si := 'SI';
  t³umaczenie_komunikaty_r.ekran_napis__sekunda__jeden_znak__s := 's';
  t³umaczenie_komunikaty_r.ekran_napis__si_strzela := 'SI strzela';
  t³umaczenie_komunikaty_r.ekran_napis__ster := 'ster';
  t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia := 'Uszkodzenia';
  t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia_samolot := 'Uszkodzenia samolot';
  t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__jeden_znak__u := 'u';
  t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__kotwica := 'kotwica';
  t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__radar := 'radar';
  t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__radio := 'radio';
  t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__sonar := 'sonar';
  t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__ster := 'ster';
  t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__ster_g³êbokoœci := 'ster g³êbokoœci';
  t³umaczenie_komunikaty_r.ekran_napis__uszkodzenia__œruba := 'œruba';
  t³umaczenie_komunikaty_r.ekran_napis__uzbrojenie_opis__artyleria := 'artyleria';
  t³umaczenie_komunikaty_r.ekran_napis__uzbrojenie_opis__bomby_g³êbinowe := 'bomby g³êbinowe';
  t³umaczenie_komunikaty_r.ekran_napis__uzbrojenie_opis__dzia³a := 'dzia³a';
  t³umaczenie_komunikaty_r.ekran_napis__uzbrojenie_opis__je¿e_g³êbinowe := 'je¿e g³êbinowe';
  t³umaczenie_komunikaty_r.ekran_napis__uzbrojenie_opis__torpedy := 'torpedy';
  t³umaczenie_komunikaty_r.ekran_napis__zanurzenie := 'zanurzenie';
  t³umaczenie_komunikaty_r.ekran_napis__zanurzenie__peryskopowe__utrzymywane__jeden_znak := 'p';
  t³umaczenie_komunikaty_r.ekran_napis__zmiana_samolotu := 'zmiana samolotu';
  t³umaczenie_komunikaty_r.ekran_napis__¿ycie := '¿ycie';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja___kliknij_w_polu_przyciskiem_myszy_ := '<kliknij w polu przyciskiem myszy>';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__alt := 'Alt';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__alt__podpowiedŸ := 'Wskazany klawisz + Alt.';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__ctrl := 'Ctrl';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__ctrl__podpowiedŸ := 'Wskazany klawisz + Ctrl.';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__domyœlny := 'Domyœlny';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__domyœlny__podpowiedŸ := 'Ustaw domyœlny klawisz.';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__klawisz__delete := 'Delete';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__klawisz__end := 'End';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__klawisz__home := 'Home';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__klawisz__insert := 'Insert';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__klawisz__kursor_dó³ := 'Kursor dó³';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__klawisz__kursor_góra := 'Kursor góra';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__klawisz__kursor_lewo := 'Kursor lewo';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__klawisz__kursor_prawo := 'Kursor prawo';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__klawisz__menu := 'Menu';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__klawisz__mysz_lewy := 'Mysz lewy';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__klawisz__mysz_prawy := 'Mysz prawy';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__klawisz__mysz_œrodkowy := 'Mysz œrodkowy';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__klawisz__num_dzielenie := 'Num /';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__klawisz__num_lock := 'Num Lock';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__klawisz__page_down := 'Page Down';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__klawisz__page_up := 'Page Up';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__klawisz__pause_break := 'Pause Break';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__klawisz__windows_lewy := 'Windows lewy';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__klawisz__windows_prawy := 'Windows prawy';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__mysz := 'Mysz';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__mysz__podpowiedŸ := 'Funkcjonalnoœæ sterowana klawiszem myszy.';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__niezdefiniowane__podpowiedŸ := 'Wyczyœæ przypisany klawisz.';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__shift := 'Shift';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__shift__podpowiedŸ := 'Wskazany klawisz + Shift.';



  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____amunicja__zanurzenie_g³êbokoœæ_zadana__minus := 'Amunicja zanurzenie g³êbokoœæ zadana minus';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____amunicja__zanurzenie_g³êbokoœæ_zadana__plus := 'Amunicja zanurzenie g³êbokoœæ zadana plus';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____celowanie_bronie_osobno := 'Celowanie bronie osobno';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____celowanie_tryb := 'Celowanie tryb';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____celownicze_linie_unoœ := 'Celownicze linie unoœ';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____celownik_bombowiec_widocznoœæ := 'Celownik bombowiec widocznoœæ';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____celownik_widocznoœæ := 'Celownik widocznoœæ';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____celownik_widocznoœæ_mouse_look_active := 'Celownik widocznoœæ obracanie mysz¹';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____dalmierz := 'Dalmierz';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____dalmierz_tryb := 'Dalmierz tryb';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____dŸwiêk__g³oœnoœæ__minus := 'DŸwiêk g³oœnoœæ minus';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____dŸwiêk__g³oœnoœæ__plus := 'DŸwiêk g³oœnoœæ plus';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____obracaj_dzia³a := 'Broñ obracaj';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____obracaj_dzia³a__na_k¹t_wyznaczony := 'Broñ obracaj na k¹t wyznaczony';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____obrót_k¹t_zablokowany_strza³_wskaŸnik := 'Broñ  obrót k¹t zablokowany strza³ wskaŸnik';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____obrót_k¹t_zablokowany_wskaŸnik := 'Broñ  obrót k¹t zablokowany wskaŸnik';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____podnoœ_lufy := 'Broñ podnoœ lufy';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____podnoœ_lufy__na_k¹t_wyznaczony := 'Broñ podnoœ lufy na k¹t wyznaczony';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____gra_wspó³czynnik_prêdkoœci__minus := 'Gra prêdkoœci minus';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____gra_wspó³czynnik_prêdkoœci__normalna := 'Gra prêdkoœæ normalna';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____gra_wspó³czynnik_prêdkoœci__plus := 'Gra prêdkoœci plus';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____gra_wspó³czynnik_prêdkoœci__x_10 := 'Gra prêdkoœæ x 10';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____mouse_look_active := 'Kamera obracanie mysz¹ prze³¹cz';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__w_dó³_obrót := 'Kamera obrót w dó³';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__w_górê_obrót := 'Kamera obrót w górê';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__w_lewo_obrót := 'Kamera obrót w lewo';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__w_prawo_obrót := 'Kamera obrót w prawo';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__w_dó³ := 'Kamera ruch w dó³';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__w_górê := 'Kamera ruch w górê';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__w_lewo := 'Kamera ruch w lewo';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__w_prawo := 'Kamera ruch w prawo';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__do_przodu := 'Kamera ruch w przód';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__do_ty³u := 'Kamera ruch w ty³';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__Artyleria := 'Kamera ustaw artyleryjska (je¿eli artyleria jest dostêpna na statku)';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__Amunicja := 'Kamera ustaw na amunicjê';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__Statek := 'Kamera ustaw na statek';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__Statek__Fale := 'Kamera ustaw na statek (falowanie)';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__Statek__Projektowy_Tryb := 'Kamera ustaw na statek wskazany dla trybu projektowego';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__Swobodna := 'Kamera ustaw swobodna';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__Za_Statkiem := 'Kamera ustaw za statkiem';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__Za_Statkiem__Fale := 'Kamera ustaw za statkiem (falowanie)';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kotwica__stop := 'Kotwica stop';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kotwica__w__dó³ := 'Kotwica w dó³';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kotwica__w__górê := 'Kotwica w górê';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____l¹dowanie_u³atwione := 'L¹dowanie u³atwione';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____l¹d_odœwie¿_wskazany := 'L¹d odœwie¿ wskazan¹ mapê';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____lotniskowiec_samolot_l¹dowanie_informacje := 'Lotniskowiec samolot l¹dowanie informacje';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____punkt_naprowadzaj := 'Naprowadzaj';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____punkt_naprowadzaj__na_lotniskowiec := 'Naprowadzaj na lotniskowiec';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____punkt_naprowadzaj__odleg³oœæ_do_punktu_prezentuj := 'Naprowadzaj odleg³oœæ do punktu prezentuj';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____punkt_naprowadzaj__punkt := 'Naprowadzaj punkt';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____punkt_naprowadzaj__radar := 'Naprowadzaj radar';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____punkt_naprowadzaj__strza³ka := 'Naprowadzaj strza³ka';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____opcje := 'Opcje';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____pauza := 'Pauza';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____pe³ny_ekran := 'Pe³ny ekran';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____pokój_rozmów__informacja_dodatkowa := 'Pokój rozmów wyœwietlaj dialogi na ekranie gry';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____pokój_rozmów__na_ekranie := 'Pokój rozmów wyœwietlaj na ekranie gry';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__1_plus := 'Prêdkoœæ do przodu +1';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__5_plus := 'Prêdkoœæ do przodu +5';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__25_plus := 'Prêdkoœæ do przodu +25';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__100_plus := 'Prêdkoœæ do przodu +100';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__1_minus := 'Prêdkoœæ do ty³u +1';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__5_minus := 'Prêdkoœæ do ty³u +5';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__25_minus := 'Prêdkoœæ do ty³u +25';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__100_minus := 'Prêdkoœæ do ty³u +100';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__zero := 'Prêdkoœæ zero';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____punkty_¿ycia_wskaŸnik__gracz := 'Punkty ¿ycia wskaŸnik gracz';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____punkty_¿ycia_wskaŸnik__przeciwnik := 'Punkty ¿ycia wskaŸnik przeciwnik';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____punkty_¿ycia_wskaŸnik__sojusznik := 'Punkty ¿ycia wskaŸnik sojusznik';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____radar__broñ_zasiêg_wyœwietlaj := 'Radar broñ zasiêg wyœwietlaj';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____radar__czu³oœæ__1_minus := 'Czu³oœæ radaru -1';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____radar__czu³oœæ__10_minus := 'Czu³oœæ radaru -10';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____radar__czu³oœæ__1_plus := 'Czu³oœæ radaru +1';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____radar__czu³oœæ__10_plus := 'Czu³oœæ radaru +10';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____radar__skala__1_minus := 'Skala radaru -1';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____radar__skala__10_minus := 'Skala radaru -10';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____radar__skala__1_plus := 'Skala radaru +1';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____radar__skala__10_plus := 'Skala radaru +10';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____radar__widocznoœæ := 'Radar wyœwietlaj na ekranie';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____samolot_katapult¹_startuj := 'Samolot katapult¹ startuj';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____samolot_statek_prze³¹cz := 'Samolot / statek prze³¹cz';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____samolot_statek_prze³¹cz_bez_kamery := 'Samolot / statek prze³¹cz bez kamery';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____si__p³ywa__samolot_gracza := 'SI p³ywa samolotem gracza (je¿eli dostêpny)';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____si__p³ywa__statek_gracza := 'SI p³ywa statkiem gracza';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____si__samolot_gracza__l¹duj_na_lotniskowcu_gracza := 'SI samolot gracza l¹duj na lotniskowcu gracza (je¿eli dostêpny)';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____si__statek_gracza__strzela__nie := 'SI strzela statkiem gracza - nie';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____si__statek_gracza__strzela__tak := 'SI strzela statkiem gracza - tak';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____si__statek_gracza__strzela__wszystkim := 'SI strzela statkiem gracza - wszystkim';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____sos_nadaj := 'SOS nadaj';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____statek__utwórz := 'Statek utwórz (ponownie) wskazany / samolot zmieñ';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__1_lewo := 'Ster lewo +1';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__5_lewo := 'Ster lewo +5';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__25_lewo := 'Ster lewo +25';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__100_lewo := 'Ster lewo +100';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__1_prawo := 'Ster prawo +1';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__5_prawo := 'Ster prawo +5';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__25_prawo := 'Ster prawo +25';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__100_prawo := 'Ster prawo +100';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__zero := 'Ster zero';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strza³_1 := 'Strza³ pojedynczy z wszystkich broni wybranych typów';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strza³_2 := 'Strza³ pojedynczy z wszystkich broni wybranych typów (alternatywna kombinacja klawiszy)';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strza³__wszystkie_lufy_1 := 'Strza³ z wszystkich luf wskazanej broni';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strza³__wszystkie_lufy_2 := 'Strza³ z wszystkich luf wskazanej broni (alternatywna kombinacja klawiszy)';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strza³__wszystkie_wybrane_1 := 'Strza³ z wszystkich broni wybranych typów';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strza³__wszystkie_wybrane_2 := 'Strza³ z wszystkich broni wybranych typów (alternatywna kombinacja klawiszy)';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strza³__broñ_indeks_zmieniaj := 'Strza³ przechodŸ na kolejn¹ broñ (tego samego rodzaju) po strzale';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strza³__broñ_indeks_nastêpny := 'Strza³ przejdŸ na nastêpn¹ broñ (tego samego rodzaju)';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strza³__broñ_indeks_poprzedni := 'Strza³ przejdŸ na poprzedni¹ broñ (tego samego rodzaju)';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strzelaj_z__artyleria := 'Strzelaj z artylerii ustaw';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strzelaj_z__bomba_g³êbinowa := 'Strzelaj z bomby g³êbinowej ustaw';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strzelaj_z__je¿e_g³êbinowe := 'Strzelaj z je¿y g³êbinowych ustaw';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strzelaj_z__pocisk := 'Strzelaj z dzia³ ustaw';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strzelaj_z__torpeda := 'Strzelaj z torped ustaw';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strzelaj_z__wszystkie := 'Strzelaj ze wszystkiego ustaw';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____syrena_okrêtowa := 'Syrena okrêtowa';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____œwiat³a := 'Œwiat³a';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____œwiat³a_dodatkowe := 'Œwiat³a dodatkowe';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zamknij_program := 'Zamknij program';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_peryskopowe := 'Zanurzenie peryskopowe';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__100_plus := 'Zanurzenie / pu³ap +100';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__25_plus := 'Zanurzenie / pu³ap +25';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__5_plus := 'Zanurzenie / pu³ap +5';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__1_plus := 'Zanurzenie / pu³ap +1';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__zero := 'Zanurzenie / pu³ap 0';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__1_minus := 'Zanurzenie / pu³ap -1';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__5_minus := 'Zanurzenie / pu³ap -5';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__25_minus := 'Zanurzenie / pu³ap -25';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__100_minus := 'Zanurzenie / pu³ap -100';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_przekraczaj_100_procent := 'Zanurzenie przekraczaj 100%';

  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__obrót_lewo := 'Projektowy tryb statek obrót lewo';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__obrót_prawo := 'Projektowy tryb statek obrót prawo';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__opuszczenie := 'Projektowy tryb statek opuszczenie';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__podniesienie := 'Projektowy tryb statek podniesienie';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__przesuniêcie_w_lewo := 'Projektowy tryb statek przesuniêcie w lewo';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__przesuniêcie_w_prawo := 'Projektowy tryb statek przesuniêcie w prawo';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__przesuniêcie_w_przód := 'Projektowy tryb statek przesuniêcie w przód';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__przesuniêcie_w_ty³ := 'Projektowy tryb statek przesuniêcie w ty³';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__przechylenie_w_lewo := 'Projektowy tryb statek przechylenie w lewo';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__przechylenie_w_prawo := 'Projektowy tryb statek przechylenie w prawo';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__uniesienie_przodu := 'Projektowy tryb statek uniesienie przodu';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__uniesienie_ty³u := 'Projektowy tryb statek uniesienie ty³u';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__prêdkoœæ_zadana_0_100 := 'Projektowy tryb statek prêdkoœæ prze³¹cz 0%, 100%';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__prêdkoœæ_zadana_0_m_100 := 'Projektowy tryb statek prêdkoœæ prze³¹cz 0%, minus 100%';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek___resetuj_obrót := 'Projektowy tryb statek resetuj obrót';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__zanurzenie_zadane_peryskopowe := 'Projektowy tryb statek zanurzenie zadane peryskopowe';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__zanurzenie_zadane_procent_0_100 := 'Projektowy tryb statek zanurzenie zadane procent prze³¹cz 0%, minus 100%';
  t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__w³¹cz_wy³¹cz := 'Projektowy tryb w³¹cz wy³¹cz';



  t³umaczenie_komunikaty_r.komunikat__alarm_torpedowy := 'Alarm torpedowy';
  t³umaczenie_komunikaty_r.komunikat__b³¹d := 'B³¹d';
  t³umaczenie_komunikaty_r.komunikat__b³¹d_odczytania_liczby_z_napisu := 'B³¹d odczytania liczby z napisu';
  t³umaczenie_komunikaty_r.komunikat__b³êdny_rozmiar_strumienia_od__PeerPort_ := 'B³êdny rozmiar strumienia od (PeerPort)';
  t³umaczenie_komunikaty_r.komunikat__brak_definicji_elementów_statku := 'Brak definicji elementów statku.';
  t³umaczenie_komunikaty_r.komunikat__brak_definicji_l¹du := 'Brak definicji l¹du.';
  t³umaczenie_komunikaty_r.komunikat__brak_definicji_prymitywu := 'Brak definicji prymitywu.';
  t³umaczenie_komunikaty_r.komunikat__brak_definicji_samolotu := 'Brak definicji samolotu.';
  t³umaczenie_komunikaty_r.komunikat__brak_definicji_statku := 'Brak definicji statku.';
  t³umaczenie_komunikaty_r.komunikat__czy_skasowaæ_schemat_si_o_nazwie___operacji_nie_mo¿na_cofn¹æ_ := '(operacji nie mo¿na cofn¹æ)';
  t³umaczenie_komunikaty_r.komunikat__czy_skasowaæ_schemat_si_o_nazwie := 'Czy skasowaæ schemat SI o nazwie';
  t³umaczenie_komunikaty_r.komunikat__czy_wczytaæ_konfiguracjê_klawiszy := 'Czy wczytaæ konfiguracjê klawiszy';
  t³umaczenie_komunikaty_r.komunikat__czy_zapisaæ_konfiguracjê_klawiszy := 'Czy zapisaæ konfiguracjê klawiszy';
  t³umaczenie_komunikaty_r.komunikat__czy_zapisaæ_schemat_si_o_nazwie := 'Czy zapisaæ schemat SI o nazwie';
  t³umaczenie_komunikaty_r.komunikat__czy_zapisaæ_ustawienia := 'Czy zapisaæ ustawienia?';
  t³umaczenie_komunikaty_r.komunikat__czy_zastosowaæ_schemat_si_o_nazwie := 'Czy zastosowaæ schemat SI o nazwie';
  t³umaczenie_komunikaty_r.komunikat__czyta_zegar := 'czyta zegar';
  t³umaczenie_komunikaty_r.komunikat__dla_tej_komendy_nale¿y_u¿yæ_innej_wersji_funkcji__Wieloosobowe__Strumieñ_Wyœlij_ := 'Dla tej komendy nale¿y u¿yæ innej wersji funkcji ''Wieloosobowe__Strumieñ_Wyœlij''.';
  t³umaczenie_komunikaty_r.komunikat__dodano_si := 'Dodano SI';
  t³umaczenie_komunikaty_r.komunikat__domyœlne := 'domyœlne';
  t³umaczenie_komunikaty_r.komunikat__element__l¹d__nie_mo¿e_byæ__œwiat³em_migaj¹cym__nie_bêd¹c_jednoczeœnie_ani__œwiat³em__ani__œwiat³em_dodatkowym__zdeaktywowano_cechê__œwiat³a_miganie_ :=
    'Element (l¹d) nie mo¿e byæ ''œwiat³em migaj¹cym'' nie bêd¹c jednoczeœnie ani ''œwiat³em'' ani ''œwiat³em dodatkowym'' zdeaktywowano cechê ''œwiat³a miganie''.';
  t³umaczenie_komunikaty_r.komunikat__element__l¹d__nie_mo¿e_jednoczeœnie_byæ__œwiat³em__i__œwiat³em_dodatkowym__zdeaktywowano_cechê__œwiat³o_ :=
    'Element (l¹d) nie mo¿e jednoczeœnie byæ ''œwiat³em'' i ''œwiat³em dodatkowym'' zdeaktywowano cechê ''œwiat³o''.';
  t³umaczenie_komunikaty_r.komunikat__element__statek__nie_mo¿e_byæ__œwiat³em_migaj¹cym__nie_bêd¹c_jednoczeœnie_ani__œwiat³em__ani__œwiat³em_dodatkowym__zdeaktywowano_cechê__œwiat³a_miganie_ :=
    'Element (statek) nie mo¿e byæ ''œwiat³em migaj¹cym'' nie bêd¹c jednoczeœnie ani ''œwiat³em'' ani ''œwiat³em dodatkowym'' zdeaktywowano cechê ''œwiat³a miganie''.';
  t³umaczenie_komunikaty_r.komunikat__element__statek__nie_mo¿e_jednoczeœnie_byæ__œwiat³em__i__œwiat³em_dodatkowym__zdeaktywowano_cechê__œwiat³o_ :=
    'Element (statek) nie mo¿e jednoczeœnie byæ ''œwiat³em'' i ''œwiat³em dodatkowym'' zdeaktywowano cechê ''œwiat³o''.';
  t³umaczenie_komunikaty_r.komunikat__falowanie_zosta³o_wy³¹czone___spowalnia_rozgrywkê_sieciow¹__z_niewiadomych_przyczyn_ := 'Falowanie zosta³o wy³¹czone - spowalnia rozgrywkê sieciow¹ (z niewiadomych przyczyn).';
  t³umaczenie_komunikaty_r.komunikat__gra_start := 'Gra START.';
  t³umaczenie_komunikaty_r.komunikat__gracze := 'Gracze';
  t³umaczenie_komunikaty_r.komunikat__grupy := 'Grupy';
  t³umaczenie_komunikaty_r.komunikat__grupy_nieokreœlone__klienci_nieuczestnicz¹cy_w_grze_ := 'grupy nieokreœlone (klienci nieuczestnicz¹cy w grze)';
  t³umaczenie_komunikaty_r.komunikat__iloœæ := 'iloœæ';
  t³umaczenie_komunikaty_r.komunikat__informacja := 'Informacja';
  t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__b³êdny_kod_klawisza := 'b³êdny kod klawisza';
  t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__b³êdny_zakres_kodu_klawisza := 'b³êdny zakres kodu klawisza';
  t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__brak_kodu_klawisza := 'brak kodu klawisza';
  t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__brak_nazwy_funkcjonalnoœci := 'brak nazwy funkcjonalnoœci';
  t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__brak_parametru___klawisz_alt := 'brak parametru - klawisz alt';
  t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__brak_parametru___klawisz_ctrl := 'brak parametru - klawisz ctrl';
  t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__brak_parametru___klawisz_shift := 'brak parametru - klawisz shift';
  t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__brak_rodzaju_klawisza := 'brak rodzaju klawisza';
  t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__i := 'i';
  t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__konfiguracje__Alt__oraz__Alt___Ctrl__s¹_nierozró¿nialne := 'konfiguracje ''Alt'' oraz ''Alt + Ctrl'' s¹ nierozró¿nialne';
  t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__niepe³na_definicja := 'niepe³na definicja';
  t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__niepoprawna_definicja := 'niepoprawna definicja';
  t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__powielona_definicja := 'powielona definicja';
  t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__wczytana_konfiguracja_klawiszy_zawiera_nieznane_definicje_funkcjonalnoœci := 'wczytana konfiguracja klawiszy zawiera nieznane definicje funkcjonalnoœci';
  t³umaczenie_komunikaty_r.komunikat__komenda := 'komenda';
  t³umaczenie_komunikaty_r.komunikat__lotniskowiec_aktualnie_obs³uguje_inny_samolot := 'Lotniskowiec aktualnie obs³uguje inny samolot.';
  t³umaczenie_komunikaty_r.komunikat__nale¿y_utworzyæ_statek := 'Nale¿y utworzyæ statek.';
  t³umaczenie_komunikaty_r.komunikat__nale¿y_wskazaæ_adresata_wiadomoœci := 'Nale¿y wskazaæ adresata wiadomoœci.';
  t³umaczenie_komunikaty_r.komunikat__nale¿y_wskazaæ_gracza := 'Nale¿y wskazaæ gracza.';
  t³umaczenie_komunikaty_r.komunikat__nale¿y_wskazaæ_schemat_si := 'Nale¿y wskazaæ schemat SI.';
  t³umaczenie_komunikaty_r.komunikat__nale¿y_wybraæ_samolot := 'Nale¿y wybraæ samolot.';
  t³umaczenie_komunikaty_r.komunikat__nale¿y_wybraæ_statek := 'Nale¿y wybraæ statek.';
  t³umaczenie_komunikaty_r.komunikat__nazwa_gracza__si__powinna_byæ_niepowtarzalna___dodano_czêœæ_losow¹ := 'Nazwa gracza (SI) powinna byæ niepowtarzalna - dodano czêœæ losow¹';
  t³umaczenie_komunikaty_r.komunikat__nazwa_gracza__si__powinna_byæ_niepowtarzalna := 'Nazwa gracza (SI) powinna byæ niepowtarzalna.';
  t³umaczenie_komunikaty_r.komunikat__nazwa_gracza_nie_mo¿e_byæ_pusta := 'Nazwa gracza nie mo¿e byæ pusta.';
  t³umaczenie_komunikaty_r.komunikat__nazwa_gracza_powinna_byæ_niepowtarzalna := 'Nazwa gracza powinna byæ niepowtarzalna.';
  t³umaczenie_komunikaty_r.komunikat__nazwa_schematu_si_nie_mo¿e_byæ_pusta := 'Nazwa schematu SI nie mo¿e byæ pusta';
  t³umaczenie_komunikaty_r.komunikat__nie_mo¿na_nawi¹zaæ_po³aczenia_z_serwerem__handler := 'Nie mo¿na nawi¹zaæ po³aczenia z serwerem (handler)';
  t³umaczenie_komunikaty_r.komunikat__nie_mo¿na_nawi¹zaæ_po³aczenia_z_serwerem__klient := 'Nie mo¿na nawi¹zaæ po³aczenia z serwerem (klient)';
  t³umaczenie_komunikaty_r.komunikat__nie_mo¿na_roz³¹czyæ_samego_siebie := 'Nie mo¿na roz³¹czyæ samego siebie.';
  t³umaczenie_komunikaty_r.komunikat__nie_mo¿na_roz³¹czyæ_serwera := 'Nie mo¿na roz³¹czyæ serwera.';
  t³umaczenie_komunikaty_r.komunikat__nie_mo¿na_zmieniæ_samolotu := 'Nie mo¿na zmieniæ samolotu.';
  t³umaczenie_komunikaty_r.komunikat__nie_odnaleziono_definicji_prymitywu := 'Nie odnaleziono definicji prymitywu';
  t³umaczenie_komunikaty_r.komunikat__nie_odnaleziono_katalogu_t³umaczeñ := 'Nie odnaleziono katalogu t³umaczeñ';
  t³umaczenie_komunikaty_r.komunikat__nie_odnaleziono_plików := 'Nie odnaleziono plików';
  t³umaczenie_komunikaty_r.komunikat__nie_odnaleziono_pliku_konfiguracji_klawiszy := 'Nie odnaleziono pliku konfiguracji klawiszy';
  t³umaczenie_komunikaty_r.komunikat__nie_odnaleziono_pliku_t³umaczenia := 'Nie odnaleziono pliku t³umaczenia:';
  t³umaczenie_komunikaty_r.komunikat__nie_odnaleziono_pliku := 'Nie odnaleziono pliku';
  t³umaczenie_komunikaty_r.komunikat__nie_odnaleziono_statków_si_na_liœcie_graczy__czy_kontynuowaæ := 'Nie odnaleziono statków SI na liœcie graczy, czy kontynuowaæ?';
  t³umaczenie_komunikaty_r.komunikat__nie_odnaleziono_t³umaczenia_dla_konfiguracji_klawiatury := 'Nie odnaleziono t³umaczenia dla konfiguracji klawiatury';
  t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_nadaæ_identyfikatora := 'Nie uda³o siê nadaæ identyfikatora.';
  t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_odczytaæ_identyfikatora_gracza := 'Nie uda³o siê odczytaæ identyfikatora gracza.';
  t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_odnaleŸæ_gracza_o_zadanym_identyfikatorze := 'Nie uda³o siê odnaleŸæ gracza o zadanym identyfikatorze.';
  t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_po³¹czyæ_z_serwerem := 'Nie uda³o siê po³¹czyæ z serwerem.';
  t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_przypomnieæ_identyfikatora := 'Nie uda³o siê przypomnieæ identyfikatora.';
  t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_skasowaæ_pliku := 'Nie uda³o siê skasowaæ pliku';
  t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_wczytaæ_pliku_dŸwiêku := 'Nie uda³o siê wczytaæ pliku dŸwiêku.';
  t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_wys³aæ_danych__strumieñ__do_klienta := 'Nie uda³o siê wys³aæ danych (strumieñ) do klienta';
  t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_wys³aæ_danych__tekst__do_klienta := 'Nie uda³o siê wys³aæ danych (tekst) do klienta';
  t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_zainicjowaæ_dŸwiêku__sprawdŸ_dostêpnoœæ_w_systemie_bibliotek_openal__www_openal_org := 'Nie uda³o siê zainicjowaæ dŸwiêku.' + #13 + #10 +
                                                                                                                                           'SprawdŸ dostêpnoœæ w systemie bibliotek OpenAL (www.openal.org).';
  t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_zlokalizowaæ_gracza := 'Nie uda³o siê zlokalizowaæ gracza.';
  t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_zlokalizowaæ_samolotu_gracza := 'Nie uda³o siê zlokalizowaæ samolotu gracza.';
  t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_zlokalizowaæ_statku_do_przywrócenia := 'Nie uda³o siê zlokalizowaæ statku do przywrócenia.';
  t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_zlokalizowaæ_statku_gracza := 'Nie uda³o siê zlokalizowaæ statku gracza.';
  t³umaczenie_komunikaty_r.komunikat__nie_wszyscy_gracze_otrzymali_dane_o_rozgrywce__czy_kontynuowaæ := 'Nie wszyscy gracze otrzymali dane o rozgrywce. Czy kontynuowaæ?';
  t³umaczenie_komunikaty_r.komunikat__nie_wszyscy_gracze_s¹_gotowi__czy_kontynuowaæ := 'Nie wszyscy gracze s¹ gotowi. Czy kontynuowaæ?';
  t³umaczenie_komunikaty_r.komunikat__nie_wykryto_niezgodnoœci_konfiguracji_klawiszy := 'Nie wykryto niezgodnoœci konfiguracji klawiszy.';
  t³umaczenie_komunikaty_r.komunikat__nie_wyœwietlaj_celownika_w_trybie_obracania_kamery_mysz¹ := 'Nie wyœwietlaj celownika w trybie obracania kamery mysz¹.';
  t³umaczenie_komunikaty_r.komunikat__niepoprawny_identyfikator_nadawcy := 'Niepoprawny identyfikator nadawcy.';
  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_elementów_statku := 'Nieprawid³owa definicja elementów statku.';
  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_l¹du := 'Nieprawid³owa definicja l¹du.';
  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_pliku_xml := 'Nieprawid³owa definicja pliku xml';
  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_pozycji_pocz¹tkowej_statków := 'Nieprawid³owa definicja pozycji pocz¹tkowej statków.';
  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_prymitywu := 'Nieprawid³owa definicja prymitywu.';
  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_schematu_si__b³êdny_numer_grupy := 'b³êdny numer grupy';
  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_schematu_si__nieznana_mapa := 'nieznana mapa';
  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_schematu_si__nieznana_pozycje_pocz¹tkowa_statków := 'nieznana pozycje pocz¹tkowa statków';
  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_schematu_si__nieznany_schemat_samolotu := 'nieznany schemat samolotu';
  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_schematu_si__nieznany_schemat_statku := 'nieznany schemat statku';
  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_schematu_si__numer_grupy_poza_dopuszczalnym_zakresem := 'numer grupy poza dopuszczalnym zakresem';
  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_schematu_si := 'Nieprawid³owa definicja schematu SI.';
  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_lista_graczy := 'Nieprawid³owa lista graczy.';
  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_mg³a := 'Nieprawid³owa wartoœæ wspó³czynnika mg³a';
  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_morze_wzburzenie := 'Nieprawid³owa wartoœæ wspó³czynnika morze wzburzenie';
  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_noc := 'Nieprawid³owa wartoœæ wspó³czynnika noc';
  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_prêdkoœci_gry := 'Nieprawid³owa wartoœæ wspó³czynnika prêdkoœci gry';
  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_trudnoœci_gry := 'Nieprawid³owa wartoœæ wspó³czynnika trudnoœci gry';
  //t³umaczenie_komunikaty_r.xNx__komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_wiatru := 'Nieprawid³owa wartoœæ wspó³czynnika wiatru';
  t³umaczenie_komunikaty_r.komunikat__nieprawid³owe_has³o := 'Nieprawid³owe has³o';
  t³umaczenie_komunikaty_r.komunikat__od³¹czy³_siê := 'Od³¹czy³ siê';
  t³umaczenie_komunikaty_r.komunikat__operacja_zakoñczona := 'Operacja zakoñczona.';
  t³umaczenie_komunikaty_r.komunikat__otrzymany_tekst := 'Otrzymany tekst';
  t³umaczenie_komunikaty_r.komunikat__plik_schematów_si_o_nazwie__istnieje__czy_nadpisaæ := 'istnieje, czy nadpisaæ';
  t³umaczenie_komunikaty_r.komunikat__plik_schematów_si_o_nazwie := 'Plik schematów SI o nazwie';
  t³umaczenie_komunikaty_r.komunikat__pojawi³y_siê_nastêpuj¹ce_b³êdy_podczas_wczytywania_konfiguracji_klawiszy := 'Pojawi³y siê nastêpuj¹ce b³êdy podczas wczytywania konfiguracji klawiszy';
  t³umaczenie_komunikaty_r.komunikat__pokój_rozmów__na_ekranie_gry__etykieta := 'e';
  t³umaczenie_komunikaty_r.komunikat__pokój_rozmów__na_ekranie_gry__podpowiedŸ := 'Wyœwietlaj pokój rozmów na ekranie gry.';
  t³umaczenie_komunikaty_r.komunikat__pokój_rozmów__ukryj__etykieta := 'x';
  t³umaczenie_komunikaty_r.komunikat__pokój_rozmów__ukryj__podpowiedŸ := 'Ukryj.';
  t³umaczenie_komunikaty_r.komunikat__po³¹czenie_od := 'Po³¹czenie od';
  t³umaczenie_komunikaty_r.komunikat__potwierdzenie := 'Potwierdzenie';
  t³umaczenie_komunikaty_r.komunikat__pozycje_pocz¹tkowe_statków := 'Pozycje pocz¹tkowe statków';
  t³umaczenie_komunikaty_r.komunikat__pozycje_pocz¹tkowe_statków__wed³ug_mapy := 'wed³ug mapy';
  t³umaczenie_komunikaty_r.komunikat__radar__czu³oœæ := 'Czu³oœæ radaru ';
  t³umaczenie_komunikaty_r.komunikat__radar__skala := 'Skala radaru ';
  t³umaczenie_komunikaty_r.komunikat__samolot_zg³asza_l¹dowanie := 'Samolot zg³asza l¹dowanie.';
  t³umaczenie_komunikaty_r.komunikat__serwer_zakoñczy³_grê := 'Serwer zakoñczy³ grê.';
  t³umaczenie_komunikaty_r.komunikat__statystyki_gry := 'Statystyki gry';
  t³umaczenie_komunikaty_r.komunikat__strumieñ_wyœlij := 'strumieñ wyœlij';
  t³umaczenie_komunikaty_r.komunikat__tekst_wyœlij := 'tekst wyœlij';
  t³umaczenie_komunikaty_r.komunikat__trafienie_nazwa__amunicja_zneutralizowana := 'Amunicja zneutralizowana';
  t³umaczenie_komunikaty_r.komunikat__trafienie_nazwa__otrzymano_obra¿enia := 'Otrzymano obra¿enia';
  t³umaczenie_komunikaty_r.komunikat__trafienie_nazwa__otrzymano_obra¿enia__od_siebie := 'od siebie';
  t³umaczenie_komunikaty_r.komunikat__trafienie_nazwa__zadano_obra¿enia := 'Zadano obra¿enia';
  t³umaczenie_komunikaty_r.komunikat__torpeda_g³êbokoœæ_zadana := 'Torpeda g³êbokoœæ zadana';
  t³umaczenie_komunikaty_r.komunikat__tryb_projektowy___id_statek := 'Tryb projektowy - id_statek';
  t³umaczenie_komunikaty_r.komunikat__tryb_projektowy___nie_odnaleziono_statku := 'Tryb projektowy - nie odnaleziono statku.';
  t³umaczenie_komunikaty_r.komunikat__tworzenie_elementów_statku___b³¹d_wczytania_dŸwiêku := 'Tworzenie elementów statku - b³¹d wczytania dŸwiêku';
  t³umaczenie_komunikaty_r.komunikat__tworzenie_elementów_statku___b³¹d_wczytania_tekstury := 'Tworzenie elementów statku - b³¹d wczytania tekstury';
  t³umaczenie_komunikaty_r.komunikat__tworzenie_elementów_statku___nieznany_typ_prymitywu := 'Tworzenie elementów statku - nieznany typ prymitywu';
  t³umaczenie_komunikaty_r.komunikat__tworzenie_l¹du___b³¹d_wczytania_dŸwiêku := 'Tworzenie l¹du - b³¹d wczytania dŸwiêku';
  t³umaczenie_komunikaty_r.komunikat__tworzenie_l¹du___b³¹d_wczytania_tekstury := 'Tworzenie l¹du - b³¹d wczytania tekstury';
  t³umaczenie_komunikaty_r.komunikat__tworzenie_l¹du___nieznany_typ_prymitywu := 'Tworzenie l¹du - nieznany typ prymitywu';
  t³umaczenie_komunikaty_r.komunikat__ustawiæ_nazwê_losow¹ := 'Ustawiæ nazwê losow¹?';
  t³umaczenie_komunikaty_r.komunikat__wskazanego_identyfikatora_nie_ma_na_liœcie := 'Wskazanego identyfikatora nie ma na liœcie';
  t³umaczenie_komunikaty_r.komunikat__wskazano_ju¿_wybrany_samolot := 'Wskazano ju¿ wybrany samolot.';
  t³umaczenie_komunikaty_r.komunikat__wskazano_samego_siebie := 'Wskazano samego siebie.';
  t³umaczenie_komunikaty_r.komunikat__wykasowaæ_wszystkie_si := 'Wykasowaæ wszystkie SI?';
  t³umaczenie_komunikaty_r.komunikat__wykryto_nastêpuj¹ce_niezgodnoœci_konfiguracji_klawiszy := 'Wykryto nastêpuj¹ce niezgodnoœci konfiguracji klawiszy';
  t³umaczenie_komunikaty_r.komunikat__wyœwietlaj_celownik_w_trybie_obracania_kamery_mysz¹ := 'Wyœwietlaj celownik w trybie obracania kamery mysz¹.';
  t³umaczenie_komunikaty_r.komunikat__zakoñczyæ_dzia³anie_programu := 'Zakoñczyæ dzia³anie programu?';
  t³umaczenie_komunikaty_r.komunikat__zmiana_samolotu_przyjêta := 'Zmiana samolotu przyjêta';


  t³umaczenie_komunikaty_r.parametry_odczytaj__amunicja_iloœæ := 'amunicja_iloœæ';
  t³umaczenie_komunikaty_r.parametry_odczytaj__amunicja_iloœæ_pocz¹tkowa := 'amunicja_iloœæ_pocz¹tkowa';
  t³umaczenie_komunikaty_r.parametry_odczytaj__amunicja_uzbrajanie_odleg³oœæ := 'amunicja_uzbrajanie_odleg³oœæ';
  t³umaczenie_komunikaty_r.parametry_odczytaj__artyleria_iloœæ := 'artyleria iloœæ';
  t³umaczenie_komunikaty_r.parametry_odczytaj__bomby_g³êbinowe_wyrzutnie_iloœæ := 'bomby g³êbinowe wyrzutnie iloœæ';
  t³umaczenie_komunikaty_r.parametry_odczytaj__broñ_obracana := 'broñ obracana';
  t³umaczenie_komunikaty_r.parametry_odczytaj__dzia³a_iloœæ := 'dzia³a iloœæ';
  t³umaczenie_komunikaty_r.parametry_odczytaj__falowanie_bok_skrêt_zakres := 'falowanie_bok_skrêt_zakres';
  t³umaczenie_komunikaty_r.parametry_odczytaj__falowanie_bok_zakres := 'falowanie_bok_zakres';
  t³umaczenie_komunikaty_r.parametry_odczytaj__falowanie_góra_dó³_zakres := 'falowanie_góra_dó³_zakres';
  t³umaczenie_komunikaty_r.parametry_odczytaj__falowanie_przód_zakres := 'falowanie_przód_zakres';
  t³umaczenie_komunikaty_r.parametry_odczytaj__je¿e_g³êbinowe_wyrzutnie_iloœæ := 'je¿e g³êbinowe wyrzutnie iloœæ';
  t³umaczenie_komunikaty_r.parametry_odczytaj__kamera_odleg³oœæ_maksymalna := 'kamera_odleg³oœæ_maksymalna';
  t³umaczenie_komunikaty_r.parametry_odczytaj__katapulta_start_z_lotniskowca__prze³adowanie_czas_milisekundy := 'katapulta start_z_lotniskowca__prze³adowanie_czas_milisekundy';
  t³umaczenie_komunikaty_r.parametry_odczytaj__lotniskowiec__samolot_przyœpieszanie := 'lotniskowiec__samolot_przyœpieszanie';
  t³umaczenie_komunikaty_r.parametry_odczytaj__lotniskowiec__zasoby_odnawianie__prze³adowanie_czas_milisekundy := 'lotniskowiec__zasoby_odnawianie__prze³adowanie_czas_milisekundy';
  t³umaczenie_komunikaty_r.parametry_odczytaj__lufa_unoszona := 'lufa unoszona';
  t³umaczenie_komunikaty_r.parametry_odczytaj__lufy_iloœæ := 'lufy iloœæ';
  t³umaczenie_komunikaty_r.parametry_odczytaj__luneta_zasiêg := 'luneta_zasiêg';
  t³umaczenie_komunikaty_r.parametry_odczytaj__obra¿enia_zadawane := 'obra¿enia_zadawane';
  t³umaczenie_komunikaty_r.parametry_odczytaj__obrót_k¹t_zablokowany_do := 'obrót_k¹t_zablokowany_do';
  t³umaczenie_komunikaty_r.parametry_odczytaj__obrót_k¹t_zablokowany_od := 'obrót_k¹t_zablokowany_od';
  t³umaczenie_komunikaty_r.parametry_odczytaj__obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny := 'obrót_k¹t_zablokowany_strza³__podniesienie_k¹t_minimalny';
  t³umaczenie_komunikaty_r.parametry_odczytaj__obrót_k¹t_zablokowany_strza³_do := 'obrót_k¹t_zablokowany_strza³_do';
  t³umaczenie_komunikaty_r.parametry_odczytaj__obrót_k¹t_zablokowany_strza³_od := 'obrót_k¹t_zablokowany_strza³_od';
  t³umaczenie_komunikaty_r.parametry_odczytaj__obrót_szybkoœæ := 'obrót_szybkoœæ';
  t³umaczenie_komunikaty_r.parametry_odczytaj__podniesienie_k¹t_maksymalny := 'podniesienie_k¹t_maksymalny';
  t³umaczenie_komunikaty_r.parametry_odczytaj__podniesienie_k¹t_minimalny := 'podniesienie_k¹t_minimalny';
  t³umaczenie_komunikaty_r.parametry_odczytaj__podniesienie_k¹t_pocz¹tkowy := 'podniesienie_k¹t_pocz¹tkowy';
  t³umaczenie_komunikaty_r.parametry_odczytaj__podniesienie_szybkoœæ := 'podniesienie_szybkoœæ';
  t³umaczenie_komunikaty_r.parametry_odczytaj__prêdkoœæ_maksymalna := 'prêdkoœæ_maksymalna';
  t³umaczenie_komunikaty_r.parametry_odczytaj__prêdkoœæ_ograniczenie := 'prêdkoœæ_ograniczenie';
  t³umaczenie_komunikaty_r.parametry_odczytaj__prêdkoœæ_przyspieszanie := 'prêdkoœæ_przyspieszanie';
  t³umaczenie_komunikaty_r.parametry_odczytaj__prêdkoœæ_zwalnianie := 'prêdkoœæ_zwalnianie';
  t³umaczenie_komunikaty_r.parametry_odczytaj__prze³adowanie_czas_milisekundy := 'prze³adowanie_czas_milisekundy';
  t³umaczenie_komunikaty_r.parametry_odczytaj__prze³adowanie_czas_milisekundy_lufa := 'prze³adowanie_czas_milisekundy lufa';
  t³umaczenie_komunikaty_r.parametry_odczytaj__punkty_¿ycia_maksymalne := 'punkty_¿ycia_maksymalne';
  t³umaczenie_komunikaty_r.parametry_odczytaj__radar_zasiêg := 'radar_zasiêg';
  t³umaczenie_komunikaty_r.parametry_odczytaj__radio_zasiêg := 'radio_zasiêg';
  t³umaczenie_komunikaty_r.parametry_odczytaj__skrêt_k¹t_maksymalny := 'skrêt_k¹t_maksymalny';
  t³umaczenie_komunikaty_r.parametry_odczytaj__skrêt_prêdkoœæ := 'skrêt_prêdkoœæ';
  t³umaczenie_komunikaty_r.parametry_odczytaj__skrêt_szybkoœæ_wychylania_steru := 'skrêt_szybkoœæ_wychylania_steru';
  t³umaczenie_komunikaty_r.parametry_odczytaj__skrêt_wspó³czynnik_do_prêdkoœci := 'skrêt_wspó³czynnik_do_prêdkoœci';
  t³umaczenie_komunikaty_r.parametry_odczytaj__sonar_zasiêg := 'sonar_zasiêg';
  t³umaczenie_komunikaty_r.parametry_odczytaj__strza³_od_blokada_milisekundy := 'strza³_od_blokada_milisekundy';
  t³umaczenie_komunikaty_r.parametry_odczytaj__œruby_iloœæ := 'œruby iloœæ';
  t³umaczenie_komunikaty_r.parametry_odczytaj__œruby__czy_obrót_lewo := 'czy_obrót_lewo';
  t³umaczenie_komunikaty_r.parametry_odczytaj__œruby__prêdkoœæ_obrotowa_maksymalna := 'prêdkoœæ_obrotowa_maksymalna';
  t³umaczenie_komunikaty_r.parametry_odczytaj__œruby__prêdkoœæ_obrotowa_przyspieszanie := 'prêdkoœæ_obrotowa_przyspieszanie';
  t³umaczenie_komunikaty_r.parametry_odczytaj__torpedy_wyrzutnie_iloœæ := 'torpedy wyrzutnie iloœæ';
  t³umaczenie_komunikaty_r.parametry_odczytaj__x_prymityw_odleg³oœæ := 'x_prymityw_odleg³oœæ';
  t³umaczenie_komunikaty_r.parametry_odczytaj__y_prymityw_najwiêksze := 'y_prymityw_najwiêksze';
  t³umaczenie_komunikaty_r.parametry_odczytaj__z_prymityw_odleg³oœæ := 'z_prymityw_odleg³oœæ';
  t³umaczenie_komunikaty_r.parametry_odczytaj__zanurzanie := 'zanurzanie';
  t³umaczenie_komunikaty_r.parametry_odczytaj__zanurzenie_peryskopowe_do := 'zanurzenie_peryskopowe_do';
  t³umaczenie_komunikaty_r.parametry_odczytaj__zanurzenie_peryskopowe_do__do := 'do';
  t³umaczenie_komunikaty_r.parametry_odczytaj__zanurzenie_peryskopowe_do__od := 'od';
  t³umaczenie_komunikaty_r.parametry_odczytaj__zanurzenie_pu³ap__maksymalne := 'zanurzenie_pu³ap__maksymalne';
  t³umaczenie_komunikaty_r.parametry_odczytaj__zanurzenie_pu³ap__szybkoœæ := 'zanurzenie_pu³ap__szybkoœæ';
  t³umaczenie_komunikaty_r.parametry_odczytaj__zasiêg := 'zasiêg';
  t³umaczenie_komunikaty_r.parametry_odczytaj__zasiêg_od_parabola := 'zasiêg_od_parabola';


  t³umaczenie_komunikaty_r.radar__skala_spinedit__podpowiedŸ__radia := 'radia';
  t³umaczenie_komunikaty_r.radar__skala_spinedit__podpowiedŸ__skala_radaru_zasiêg_radaru := 'Skala radaru.' + #13 + #10 +
                                                                                            'Zasiêg radaru';
  t³umaczenie_komunikaty_r.radar__skala_spinedit__podpowiedŸ__sonaru := 'sonaru';

  t³umaczenie_komunikaty_r.si__odpowiedŸ__jakieœ_zak³ócenia := 'Jakieœ zak³ócenia.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__nie_uda³o_siê_odczytaæ_sk³adowej_wspó³rzêdnych_x := 'Nie uda³o siê odczytaæ sk³adowej wspó³rzêdnych x.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__nie_uda³o_siê_odczytaæ_sk³adowej_wspó³rzêdnych_z := 'Nie uda³o siê odczytaæ sk³adowej wspó³rzêdnych z.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__nie_uda³o_siê_odnaleŸæ_statku_nadawcy_polecenia := 'Nie uda³o siê odnaleŸæ statku nadawcy polecenia.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__nie_uda³o_siê_zidentyfikowaæ_do_kogo_zosta³o_wys³ane_polecenie := 'Nie uda³o siê zidentyfikowaæ do kogo zosta³o wys³ane polecenie.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__aktywnoœæ_podaj__aktualna_aktywnoœæ := 'Aktualna aktywnoœæ';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__aktywnoœæ_podaj__aktywnoœæ_analizowana := 'Aktywnoœæ analizowana';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__aktywnoœæ_podaj__pozycja := 'Pozycja';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__aktywnoœæ_podaj__tryb_strzelania := 'Tryb strzelania';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__aktywnoœæ_podaj__¿ycie := '¯ycie';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__patrol__1 := 'P³ywam sobie.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__patrol__2 := 'Jakoœ leci.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__patrol__3 := 'Poma³u naprzód.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__patrol__4 := 'A, sobie p³ywam.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__p³ywanie_do_punktu__odnawianie_zasobów__1 := 'Szukam artefaktu.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__p³ywanie_do_punktu__odnawianie_zasobów__2 := 'Szukam kryszta³u.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__p³ywanie_do_punktu__odnawianie_zasobów__3 := 'Niebo staje siê zielone i panuje absolutna cisza.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__p³ywanie_do_punktu__odnawianie_zasobów__4 := 'Ale ch³ód.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__pozosta³e__1 := 'Có¿.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__pozosta³e__2 := 'Hmm...';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__pozosta³e__3 := 'Coœ tam jakoœ tam.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__walka__1 := 'Widzê ich.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__walka__2 := 'Strzelaj¹ do mnie.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__jak_tam__walka__3 := 'Potyczka.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__ej__nie_jestem_samolotem__nie_mogê_wyl¹dowaæ := 'Ej, nie jestem samolotem, nie mogê wyl¹dowaæ.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__nie_jestem_samolotem_ale_spróbujê_siê_wzbiæ_na_falach__hop__hop__hop := 'Nie jestem samolotem ale spróbujê siê wzbiæ na falach; hop, hop, hop.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__niestety__w_tej_chwili_nie_jestem_w_stanie_podj¹æ_próby_wyl¹dowania := 'Niestety, w tej chwili nie jestem w stanie podj¹æ próby wyl¹dowania.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__niestety__w_tej_chwili_nie_jestem_w_stanie_wystartowaæ := 'Niestety, w tej chwili nie jestem w stanie wystartowaæ.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__podchodzê_do_l¹dowania := 'Podchodzê do l¹dowania.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_lotniskowiec__1 := 'Nie jestem lotniskowcem, powtarzam, nie jestem lotniskowcem.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_lotniskowiec__2 := 'Nie mam w zwyczaju przyjmowaæ samolotów.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_lotniskowiec__3 := 'Funkcjonalnoœæ niedostêpna.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_lotniskowiec__4 := 'Jak sobie to wyobra¿asz?';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_lotniskowiec__5 := 'PotwierdŸ, tu nie lotniskowiec.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_lotniskowiec__6 := 'Zapytaj kogoœ innego.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_samolot__1 := 'Nie jesteœ przecie¿ samolotem.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_samolot__2 := 'Poleæ to siê zastanowiê.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__nie_samolot__3 := 'Je¿eli wzlecisz.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__odmowa__oczekuj¹_ciebie_na_innym_lotniskowcu := 'Oczekuj¹ Ciebie na innym lotniskowcu.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__odmowa__odmawiam__mam_zajêty_pok³ad := 'Odmawiam, mam zajêty pok³ad.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__odmowa__odmawiam__musisz_poczekaæ_na_swoj¹_kolej := 'Odmawiam, musisz poczekaæ na swoj¹ kolej.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__odmowa__wskazania_mówi¹__¿e_ju¿_wyl¹dowa³eœ_u_mnie := 'Wskazania mówi¹, ¿e ju¿ wyl¹dowa³eœ u mnie.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__potwierdzam_zgodê := 'Potwierdzam zgodê';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__zgoda := 'Zgoda';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__proœba__zgoda__cd_1 := 'na l¹dowanie.' + #13 + #10 +
                                                                                       'Kieruj siê na';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__przerwij__nie_l¹duje__1 := 'Nigdzie nie zamierzam l¹dowaæ.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__przerwij__nie_l¹duje__2 := 'Wzbijam siê - o co pytasz.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__przerwij__nie_l¹duje__3 := 'Spoko, jeœli kiedyœ to w sumie czemu nie.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__przerwij__nie_samolot__1 := 'Nie jestem samolotem ale mogê nie l¹dowaæ.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__przerwij__nie_samolot__2 := 'Jak to sobie wyobra¿asz.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__przerwij__nie_samolot__3 := 'Nic z tego.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nie_lotniskowiec__1 := 'Nie jestem lotniskowcem ale dobra.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nie_lotniskowiec__2 := 'Co tylko tam chcesz.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nie_lotniskowiec__3 := 'To i tak nie by³ dobry pomys³.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nie_samolot__1 := 'Nie jesteœ nawet samolotem.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nie_samolot__2 := 'Umiesz lataæ?';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nie_samolot__3 := 'Tak jakby ''nie''.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nikt_nie_l¹duje__1 := 'To chyba nie do mnie.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nikt_nie_l¹duje__2 := 'Jak uwa¿asz.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__rezygnacja__nikt_nie_l¹duje__3 := 'Nie rozpraszaj mnie.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__l¹dowanie__rozpoczynam_startowanie := 'Rozpoczynam startowanie.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__niestety__lokalizacje_miejsc_odnawiania_zasobów_s¹_mi_nieznane___nie_mogê_wykonaæ_tego_zadania := 'Niestety, lokalizacje miejsc odnawiania zasobów s¹ mi nieznane - nie mogê wykonaæ tego zadania.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__niestety__w_tej_chwili_mam_inne_zadanie := 'Niestety, w tej chwili mam inne zadanie';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__niestety__w_tej_chwili_nie_mogê_wykonaæ_polecenia := 'Niestety, w tej chwili nie mogê wykonaæ polecenia';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__potwierdzam_przyjêcie_zadania := 'Potwierdzam przyjêcie zadania';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__polecenie__wspó³rzêdna_y_jest_poza_dostêpnym_zasiêgiem__zosta³a_zmieniona_na := 'Wspó³rzêdna y jest poza dostêpnym zasiêgiem, zosta³a zmieniona na';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__potwierdzam_tryb_strzelania := 'Potwierdzam tryb strzelania';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__próbuje_mnie_zak³ócaæ := 'Próbuje mnie zak³ócaæ';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__przyj¹³em___przerywam_l¹dowanie := 'Potwierdzam - przerywam l¹dowanie.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__przyj¹³em___rezygnacja_z_l¹dowania := 'Potwierdzam - rezygnacja z l¹dowania.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__wspó³rzêdna_y_jako_wartoœæ_zanurzenia__pu³apu_powinna_byæ_nieujemna := 'Wspó³rzêdna y jako wartoœæ zanurzenia, pu³apu powinna byæ nieujemna.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__wys³a³_polecenie := 'Wys³a³ polecenie';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__nieokreœlone := '(@_@)';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__odnawianie_zasobów__lotniskowiec__1 := 'Czas na uzupe³nienie zapasów.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__odnawianie_zasobów__lotniskowiec__2 := 'W koñcu remont.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__odnawianie_zasobów__lotniskowiec__3 := 'I tego te¿ by siê przyda³o.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__patrol__1 := 'Dok¹dœ zmierzam.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__patrol__2 := 'Sk¹dœ przybywam.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__patrol__3 := 'Obserwujê.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__p³ywanie_do_punktu__odnawianie_zasobów__1 := 'Odnawiaæ zasoby swe chcê.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__p³ywanie_do_punktu__odnawianie_zasobów__2 := 'Jakie ''Zimno''?';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__p³ywanie_do_punktu__odnawianie_zasobów__3 := 'Kryszta³ek, kryszta³ek, znalaz³ siê na pla¿y.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__p³ywanie_do_punktu__odnawianie_zasobów__4 := 'Czas na piknik!';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__postój__1 := 'Jakoœ nic siê nie dzieje.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__postój__2 := 'Przerwa.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__postój__3 := 'Woda sobie chlupie.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__samolot__l¹dowanie__1 := 'Ku ziemi.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__samolot__l¹dowanie__2 := 'Powrót.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__samolot__l¹dowanie__3 := 'Starczy tego latania.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__samolot__startowanie__1 := 'Wzbijam siê.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__samolot__startowanie__2 := 'I wy¿ej i wy¿ej i wy¿ej wzleæ.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__samolot__startowanie__3 := 'Do³¹czam.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__walka__1 := 'Oj gor¹co.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__walka__2 := 'Wybierz cel, wyceluj, wybierz cel, wyceluj.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__walka__3 := 'Niech wygra lepszy.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__walka__4 := 'Zwyciê¿ymy!';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zagaduje__walka__5 := 'To my zwyciê¿ymy!';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³óca__1 := 'Walka elektroniczna start.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³óca__2 := 'Zak³ócam ciê.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³óca__3 := 'Wy³¹czasz siê.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³ócanie__nie_udane__1 := 'Próbuj dalej, powodzenia ¿yczê.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³ócanie__nie_udane__2 := 'Aaa, nie przejmiesz mnie.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³ócanie__nie_udane__3 := 'Zacna próba Sauronie.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³ócanie__odbite__1  := 'Dobrze ci tak.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³ócanie__odbite__2  := 'Zak³ócanie systemów odbite.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³ócanie__odbite__3  := 'Siebie zak³ócasz…?';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³ócanie__udane__1 := 'Tracê kontrolê!';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³ócanie__udane__2 := 'System nieaktywny.';
  t³umaczenie_komunikaty_r.si__odpowiedŸ__zak³ócanie__udane__3 := 'Zak³ócaj¹ mnie.';


  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____jak_tam := ''; // U¿yte zostan¹ wartoœæ sta³e.
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____l¹dowanie__przerwij := '';
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____l¹dowanie__rezygnacja := '';
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____l¹dowanie__zezwolenie_proœba__kurs_aktualny := '';
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____l¹dowanie__zezwolenie_proœba__kurs_standardowy := '';
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____si_aktywnoœæ_podaj := '';
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Brak := '';
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Patrol := '';
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Mnie := '';
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Punktu := '';
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów := '';
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Postój := '';
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Samolot__L¹dowanie := '';
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Samolot__Startowanie := '';
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Walka := '';
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Brak := '';
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Celuj_Tylko := '';
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Nie_Celuj_Nie_Strzelaj := '';
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Odpowiedz_Ogniem := '';
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Strzelaj_Jak_Chcesz := '';

  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____samolot := '';
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____samolot_nadawca := '';
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____statek := '';
  t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____statek_nadawca := ''; //---// U¿yte zostan¹ wartoœæ sta³e.


  t³umaczenie_komunikaty_r.si__wyliczeniowy_typ__aktywnoœæ__sia_Brak := 'Brak';
  t³umaczenie_komunikaty_r.si__wyliczeniowy_typ__aktywnoœæ__sia_Kotwice_Oczekiwanie_Na_Wci¹gniêcie := 'Kotwice - oczekiwanie na wci¹gniêcie';
  t³umaczenie_komunikaty_r.si__wyliczeniowy_typ__aktywnoœæ__sia_Odnawianie_Zasobów__Lotniskowiec := 'Odnawianie zasobów - lotniskowiec';
  t³umaczenie_komunikaty_r.si__wyliczeniowy_typ__aktywnoœæ__sia_Patrol := 'Patrol';
  t³umaczenie_komunikaty_r.si__wyliczeniowy_typ__aktywnoœæ__sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów := 'P³ywanie w kierunku odnawiania zasobów';
  t³umaczenie_komunikaty_r.si__wyliczeniowy_typ__aktywnoœæ__sia_P³ywanie_Do_Punktu__Patrol := 'P³ywanie do punktu, nastêpnie patrol';
  t³umaczenie_komunikaty_r.si__wyliczeniowy_typ__aktywnoœæ__sia_P³ywanie_Do_Punktu__Postój := 'P³ywanie do punktu, nastêpnie postój';
  t³umaczenie_komunikaty_r.si__wyliczeniowy_typ__aktywnoœæ__sia_Postój := 'Postój';
  t³umaczenie_komunikaty_r.si__wyliczeniowy_typ__aktywnoœæ__sia_Samolot__L¹dowanie := 'Samolot - l¹dowanie';
  t³umaczenie_komunikaty_r.si__wyliczeniowy_typ__aktywnoœæ__sia_Samolot__L¹dowanie__Hamowanie := 'Samolot - l¹dowanie (hamowanie)';
  t³umaczenie_komunikaty_r.si__wyliczeniowy_typ__aktywnoœæ__sia_Samolot__L¹dowanie__Podchodzenie := 'Samolot - l¹dowanie (podchodzenie)';
  t³umaczenie_komunikaty_r.si__wyliczeniowy_typ__aktywnoœæ__sia_Samolot__Startowanie := 'Samolot startowanie';
  t³umaczenie_komunikaty_r.si__wyliczeniowy_typ__aktywnoœæ__sia_Walka := 'Walka';
  t³umaczenie_komunikaty_r.si__wyliczeniowy_typ__aktywnoœæ__sia_Walka__P³ywanie_Do_Punktu := 'Walka - poœcig';
  t³umaczenie_komunikaty_r.si__wyliczeniowy_typ__aktywnoœæ__sia_Walka__Torpedy_Ucieczka := 'Walka - torpedy ucieczka';

  t³umaczenie_komunikaty_r.si__wyliczeniowy_typ__strzelanie_tryb__sist_Brak := 'Brak';
  t³umaczenie_komunikaty_r.si__wyliczeniowy_typ__strzelanie_tryb__sist_Celuj_Tylko := 'Celuj tylko (nie strzelaj)';
  t³umaczenie_komunikaty_r.si__wyliczeniowy_typ__strzelanie_tryb__sist_Nie_Celuj_Nie_Strzelaj := 'Nie celuj, nie strzelaj';
  t³umaczenie_komunikaty_r.si__wyliczeniowy_typ__strzelanie_tryb__sist_Odpowiedz_Ogniem := 'Odpowiedz ogniem';
  t³umaczenie_komunikaty_r.si__wyliczeniowy_typ__strzelanie_tryb__sist_Strzelaj_Jak_Chcesz := 'Strzelaj jak chcesz';


  t³umaczenie_komunikaty_r.s³owo__brak__du¿¹_liter¹ := 'Brak';
  t³umaczenie_komunikaty_r.s³owo__brak__ma³¹_liter¹ := 'brak';
  t³umaczenie_komunikaty_r.s³owo__czas := 'Czas';
  t³umaczenie_komunikaty_r.s³owo__grupa__du¿¹_liter¹ := 'Grupa';
  t³umaczenie_komunikaty_r.s³owo__grupa__ma³¹_liter¹ := 'grupa';
  t³umaczenie_komunikaty_r.s³owo__identyfikator := 'identyfikator';
  t³umaczenie_komunikaty_r.s³owo__ktoœ := 'ktoœ';
  t³umaczenie_komunikaty_r.s³owo__lotniskowiec := 'lotniskowiec';
  t³umaczenie_komunikaty_r.s³owo__mapa := 'Mapa';
  t³umaczenie_komunikaty_r.s³owo__namiar := 'namiar';
  t³umaczenie_komunikaty_r.s³owo__nie := 'nie';
  t³umaczenie_komunikaty_r.s³owo__odleg³oœæ := 'odleg³oœæ';
  t³umaczenie_komunikaty_r.s³owo__samolot := 'samolot';
  t³umaczenie_komunikaty_r.s³owo__si³a := 'si³a';
  t³umaczenie_komunikaty_r.s³owo__sojusznicy := 'sojusznicy';
  t³umaczenie_komunikaty_r.s³owo__tak := 'tak';
  t³umaczenie_komunikaty_r.s³owo__wiatr := 'Wiatr';
  t³umaczenie_komunikaty_r.s³owo__wspó³rzêdne := 'Wspó³rzêdne';
  t³umaczenie_komunikaty_r.s³owo__wszyscy := 'wszyscy';


  t³umaczenie_komunikaty_r.statystyki__log__amunicja_wystrzelona_iloœæ := 'amunicja wystrzelona iloœæ';
  t³umaczenie_komunikaty_r.statystyki__log__amunicja_wystrzelona_obra¿enia_zadawane := 'amunicja wystrzelona obra¿enia zadawane';
  t³umaczenie_komunikaty_r.statystyki__log__celnoœæ_procent := '% celnoœæ';
  t³umaczenie_komunikaty_r.statystyki__log__czas_do_zatoniêcia_najd³u¿szy := 'czas do zatoniêcia najd³u¿szy';
  t³umaczenie_komunikaty_r.statystyki__log__czas_do_zatoniêcia_najkrótszy := 'czas do zatoniêcia najkrótszy';
  t³umaczenie_komunikaty_r.statystyki__log__czas_do_zatoniêcia_suma := 'czas do zatoniêcia suma';
  t³umaczenie_komunikaty_r.statystyki__log__czas_do_zatoniêcia_œredni := 'czas do zatoniêcia œredni';
  t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_otrzymane := 'obra¿enia otrzymane';
  t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_otrzymane_w_tym_od_sojuszników := 'obra¿enia otrzymane od sojuszników';
  t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_otrzymane_w_tym_z_kolizji := 'obra¿enia otrzymane z kolizji';
  t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_otrzymane_z_zak³óceñ := 'obra¿enia otrzymane z zak³óceñ';
  t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_zadane_amunicja := 'obra¿enia zadane amunicja';
  t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_zadane_amunicja_w_tym_sojusznikom := 'obra¿enia zadane amunicja w tym sojusznikom';
  t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_zadane_taranowanie := 'obra¿enia zadane taranowanie';
  t³umaczenie_komunikaty_r.statystyki__log__obra¿enia_zadane_taranowanie_w_tym_sojusznikom := 'obra¿enia zadane taranowanie w tym sojusznikom';
  t³umaczenie_komunikaty_r.statystyki__log__odnawianie_zasobów_iloœæ_razy := 'odnawianie zasobów iloœæ';
  t³umaczenie_komunikaty_r.statystyki__log__taranowania_iloœæ := 'taranowania iloœæ';
  t³umaczenie_komunikaty_r.statystyki__log__taranowania_iloœæ_sojuszników := 'taranowania iloœæ sojuszników';
  t³umaczenie_komunikaty_r.statystyki__log__trafienia := 'trafienia';
  t³umaczenie_komunikaty_r.statystyki__log__zak³ócenia_nieudane := 'zak³ócenia nieudane';
  t³umaczenie_komunikaty_r.statystyki__log__zak³ócenia_odbite_cudze := 'zak³ócenia odbite cudze';
  t³umaczenie_komunikaty_r.statystyki__log__zak³ócenia_odbite_w³asne := 'zak³ócenia odbite w³asne';
  t³umaczenie_komunikaty_r.statystyki__log__zak³ócenia_udane := 'zak³ócenia udane';
  t³umaczenie_komunikaty_r.statystyki__log__zatoniêcia := 'zatoniêcia';
  t³umaczenie_komunikaty_r.statystyki__log__zatopienia := 'zatopienia';
  t³umaczenie_komunikaty_r.statystyki__log__zatopienia_w_tym_sojuszników := 'zatopienia w tym sojuszników';

  t³umaczenie_komunikaty_r.statystyki__nag³ówek__amunicja_wystrzelona_iloœæ := 'Amunicja wystrzelona iloœæ';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__amunicja_wystrzelona_obra¿enia_zadawane := 'A. wystrzelona obra¿enia zadawane';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__celnoœæ_procent := 'Celnoœæ %';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__czas_do_zatoniêcia_najd³u¿szy := 'Czas do z. najd³u¿szy';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__czas_do_zatoniêcia_najkrótszy := 'Czas do zatoniêcia najkrótszy';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__czas_do_zatoniêcia_suma := 'Czas do z. suma';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__czas_do_zatoniêcia_œredni := 'Czas do z. œredni';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__identyfikator := 'Identyfikator';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__l_p := 'L. p.';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__nazwa := 'Nazwa';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__obra¿enia_otrzymane := 'Obra¿enia otrzymane';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__obra¿enia_otrzymane_w_tym_od_sojuszników := 'Obra¿enia o. w. od sojuszników';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__obra¿enia_otrzymane_w_tym_z_kolizji := 'Obra¿enia o. w. z kolizji';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__obra¿enia_otrzymane_z_zak³óceñ := 'O. o. z zak³óceñ';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__obra¿enia_zadane_amunicja := 'O. zadane amunicja';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__obra¿enia_zadane_amunicja_w_tym_sojusznikom := 'O. zadane a. w. sojusznikom';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__obra¿enia_zadane_taranowanie := 'O. zadane taranowanie';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__obra¿enia_zadane_taranowanie_w_tym_sojusznikom := 'O. zadane t. w. sojusznikom';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__odnawianie_zasobów_iloœæ_razy := 'Odnawianie zas.';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__samolot := 'Samolot';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__statek := 'Statek';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__taranowania_iloœæ := 'Taranowania iloœæ';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__taranowania_iloœæ_sojuszników := 'T. iloœæ sojuszników';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__trafienia := 'Trafienia';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__zak³ócenia_nieudane := 'Zak³. nieudane';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__zak³ócenia_odbite_cudze := 'Zak³. odbite cudze';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__zak³ócenia_odbite_w³asne := 'Zak³. odbite w³asne';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__zak³ócenia_udane := 'Zak³ócenia udane';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__zatoniêcia := 'Zatoniêcia';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__zatopienia := 'Zatopienia';
  t³umaczenie_komunikaty_r.statystyki__nag³ówek__zatopienia_w_tym_sojuszników := 'Z. w. sojuszników';
  {$endregion 't³umaczenie_komunikaty_r.'}


  {$region 'Komponenty wizualne.'}
  Gra_TabSheet.Caption := 'Gra';
  Gra_TabSheet.Hint := '';
  Wieloosobowe_TabSheet.Caption := 'Wieloosobowe';
  Wieloosobowe_TabSheet.Hint := '';
  Ustawienia_TabSheet.Caption := 'Ustawienia';
  Ustawienia_TabSheet.Hint := '';
  Pozosta³e_TabSheet.Caption := 'Pozosta³e';
  Pozosta³e_TabSheet.Hint := '';
  Statystyki_TabSheet.Caption := 'Statystyki';
  Statystyki_TabSheet.Hint := '';
  Klawiatura_Konfiguracja_TabSheet.Caption := 'Konfiguracja klawiatury';
  Klawiatura_Konfiguracja_TabSheet.Hint := '';
  Log_TabSheet.Caption := 'Log';
  Log_TabSheet.Hint := '';
  O_Programie_TabSheet.Caption := 'O programie';
  O_Programie_TabSheet.Hint := '';


  Amunicja_Rodzaj_GroupBox.Caption := 'Strzelaj z';
  Amunicja_Rodzaj_GroupBox.Hint := '';
  Amunicja__Cel_Pozycja_Dla_Lotu_Parabol¹_Wyœwietl_CheckBox.Caption := 'Artyleria pozycja celu';
  Amunicja__Cel_Pozycja_Dla_Lotu_Parabol¹_Wyœwietl_CheckBox.Hint := 'Dla artylerii wyœwietlaj znacznik miejsca, w które oddano strza³.';
  Amunicja__Zanurzenie_G³êbokoœæ_Zadana_Edit.Hint := 'Do p³yniêcia na jakiej g³êbokoœci powinna d¹¿yæ torpeda.';
  Amunicja__Zanurzenie_G³êbokoœæ_Zadana_Etykieta_Label.Caption := 'Torpeda g³êbokoœæ zadana';
  Amunicja__Zanurzenie_G³êbokoœæ_Zadana_Etykieta_Label.Hint := 'Do p³yniêcia na jakiej g³êbokoœci powinna d¹¿yæ torpeda.';
  Amunicja__Zanurzenie_G³êbokoœæ_Zadana_Label.Hint := 'Do p³yniêcia na jakiej g³êbokoœci powinna d¹¿yæ torpeda.';
  Amunicja__Zanurzenie_G³êbokoœæ_Zadana__Skok_O_Edit.Hint :=
    'O jak¹ wartoœæ zmieniaæ ''Torpeda g³êbokoœæ zadana''.' + #13 + #10 +
    'Gdy wartoœæ jest mniejsza równa zero zmiana g³êbokoœci odbywa siê w domyœlny sposób.';
  Amunicja__Zanurzenie_G³êbokoœæ_Zadana__Skok_O_Etykieta_Label.Caption := 'Torpeda g³êbokoœæ zadana skok o';
  Amunicja__Zanurzenie_G³êbokoœæ_Zadana__Skok_O_Etykieta_Label.Hint :=
    'O jak¹ wartoœæ zmieniaæ ''Torpeda g³êbokoœæ zadana''.' + #13 + #10 +
    'Gdy wartoœæ jest mniejsza równa zero zmiana g³êbokoœci odbywa siê w domyœlny sposób.';
  Amunicja__Zanurzenie_G³êbokoœæ_Zadana__Skok_O_Label.Hint :=
    'O jak¹ wartoœæ zmieniaæ ''Torpeda g³êbokoœæ zadana''.' + #13 + #10 +
    'Gdy wartoœæ jest mniejsza równa zero zmiana g³êbokoœci odbywa siê w domyœlny sposób.';
  ar_Artyleria_CheckBox.Caption := 'Artyleria';
  ar_Artyleria_CheckBox.Hint := '';
  ar_Bomba_G³êbinowa_CheckBox.Caption := 'Bomba g³êbinowa';
  ar_Bomba_G³êbinowa_CheckBox.Hint := '';
  ar_Je¿e_G³êbinowe_CheckBox.Caption := 'Je¿e g³êbinowe';
  ar_Je¿e_G³êbinowe_CheckBox.Hint := '';
  ar_Pocisk_CheckBox.Caption := 'Dzia³a';
  ar_Pocisk_CheckBox.Hint := '';
  ar_Torpeda_CheckBox.Caption := 'Torpedy';
  ar_Torpeda_CheckBox.Hint := '';
  ar_Wszystkie_CheckBox.Caption := '<wszystko>';
  ar_Wszystkie_CheckBox.Hint := '';
  Celowanie__Bronie_Osobno_CheckBox.Caption := 'Celowanie bronie osobno';
  Celowanie__Bronie_Osobno_CheckBox.Hint := 'Gdy zaznaczone ka¿da broñ korzysta z w³asnego punktu celowania, w przeciwnym razie jest jeden wspólny punkt celowania dla statku.';
  Celowanie__Tryb_RadioGroup.Caption := 'Tryb celowania';
  Celowanie__Tryb_RadioGroup.Hint := 'Celuj równolegle do linii od statku do wskazanego punktu lub zbie¿nie do wskazanego punktu.';

    zti := Celowanie__Tryb_RadioGroup.ItemIndex;
    Celowanie__Tryb_RadioGroup.Items.Clear();
    Celowanie__Tryb_RadioGroup.Items.Add( 'równoleg³y' );
    Celowanie__Tryb_RadioGroup.Items.Add( 'zbie¿ny' );

    if    ( zti >= 0 )
      and ( zti <= Celowanie__Tryb_RadioGroup.Items.Count ) then
      Celowanie__Tryb_RadioGroup.ItemIndex := zti;

  Celowanie_Precyzja__Falowanie_Niwelowanie_Etykieta_Label.Caption := 'Celowanie precyzja niwelowanie falowania';
  Celowanie_Precyzja__Falowanie_Niwelowanie_Etykieta_Label.Hint := 'Gdy ró¿nica miêdzy k¹tem wycelowania a podniesienia luf broni jest mniejsza od tej wartoœci próbuje niwelowaæ wp³yw falowania morza na uniesienie luf.';
  Celowanie_Precyzja__Falowanie_Niwelowanie_SpinEdit.Hint := 'Gdy ró¿nica miêdzy k¹tem wycelowania a podniesienia luf broni jest mniejsza od tej wartoœci próbuje niwelowaæ wp³yw falowania morza na uniesienie luf.';
  Celowanie_Precyzja__Obrót_Etykieta_Label.Caption := 'Celowanie precyzja obrót broni';
  Celowanie_Precyzja__Obrót_Etykieta_Label.Hint :=
    'Precyzja celowania obrotu broni.' + #13 + #10 +
    'Gdy ró¿nica miêdzy k¹tem wycelowania a obrotu broni jest mniejsza od tej wartoœci uznaje, ¿e broñ  jest nakierowana na cel.';
  Celowanie_Precyzja__Obrót_SpinEdit.Hint :=
    'Precyzja celowania obrotu broni.' + #13 + #10 +
    'Gdy ró¿nica miêdzy k¹tem wycelowania a obrotu broni jest mniejsza od tej wartoœci uznaje, ¿e broñ  jest nakierowana na cel.';
  Celowanie_Precyzja__Podniesienie_Etykieta_Label.Caption := 'Celowanie precyzja podniesienie luf';
  Celowanie_Precyzja__Podniesienie_Etykieta_Label.Hint :=
    'Precyzja celowania podniesienia luf broni.' + #13 + #10 +
    'Gdy ró¿nica miêdzy k¹tem wycelowania a podniesienia luf broni jest mniejsza od tej wartoœci uznaje, ¿e broñ  jest nakierowana na cel.';
  Celowanie_Precyzja__Podniesienie_SpinEdit.Hint :=
    'Precyzja celowania podniesienia luf broni.' + #13 + #10 +
    'Gdy ró¿nica miêdzy k¹tem wycelowania a podniesienia luf broni jest mniejsza od tej wartoœci uznaje, ¿e broñ  jest nakierowana na cel.';
  Celownicze_Linie_Unoœ_CheckBox.Caption := 'Celownicze linie unoœ';
  Celownicze_Linie_Unoœ_CheckBox.Hint := '';
  Celownik_Bombowiec_Widocznoœæ_CheckBox.Caption := 'Celownik bombowiec widocznoœæ';
  Celownik_Bombowiec_Widocznoœæ_CheckBox.Hint := '';
  Celownik_Ekranowy__Gruboœæ_Edit.Hint := 'Gruboœæ.';
  Celownik_Ekranowy__Kolor_Etykieta_Label.Caption := 'Celownik kolor (r g b a)';
  Celownik_Ekranowy__Kolor_Etykieta_Label.Hint := 'Kolor celownika ekranowego (czerwony, zielony, niebieski, przezroczystoœæ).';
  Celownik_Ekranowy__Kolor__A_Edit.Hint := 'Przezroczystoœæ.';
  Celownik_Ekranowy__Kolor__B_Edit.Hint := 'Niebieski.';
  Celownik_Ekranowy__Kolor__G_Edit.Hint := 'Zielony.';
  Celownik_Ekranowy__Kolor__R_Edit.Hint := 'Czerwony.';
  Celownik_Ekranowy__Szerokoœæ_Edit.Hint := 'Szerokoœæ.';
  Celownik_Ekranowy__Wielkoœæ_Etykieta_Label.Caption := 'Celownik wielkoœæ (s w g)';
  Celownik_Ekranowy__Wielkoœæ_Etykieta_Label.Hint := 'Rozmiar celownika ekranowego (szerokoœæ, wysokoœæ, gruboœæ).';
  Celownik_Ekranowy__Wielkoœæ_Label.Hint := '';
  Celownik_Ekranowy__Wysokoœæ_Edit.Hint := 'Wysokoœæ.';
  Celownik_Widocznoœæ_CheckBox.Caption := 'Celownik widocznoœæ';
  Celownik_Widocznoœæ_CheckBox.Hint := '';
  Celownik_Widocznoœæ_Mouse_Look_Active_CheckBox.Caption := 'Celownik widocznoœæ obracanie mysz¹';
  Celownik_Widocznoœæ_Mouse_Look_Active_CheckBox.Hint := 'Wyœwietlaj celownik w trybie obracania kamery mysz¹.';
  Chmury_CheckBox.Caption := 'Chmury';
  Chmury_CheckBox.Hint := 'Wyœwietlaj chmury.';
  Czcionka_Wielkoœæ__Ekran_Etykieta_Label.Caption := 'Wielkoœæ czcionki ekran';
  Czcionka_Wielkoœæ__Ekran_Etykieta_Label.Hint := 'Wielkoœæ czcionki napisów wyœwietlanych na ekranie.';
  Czcionka_Wielkoœæ__Ekran_SpinEdit.Hint := 'Wielkoœæ czcionki napisów wyœwietlanych na ekranie.';
  Czcionka_Wielkoœæ__Radar_Etykieta_Label.Caption := 'Wielkoœæ czcionki radar';
  Czcionka_Wielkoœæ__Radar_Etykieta_Label.Hint := 'Wielkoœæ czcionki napisów wyœwietlanych na radarze.';
  Czcionka_Wielkoœæ__Radar_SpinEdit.Hint := 'Wielkoœæ czcionki napisów wyœwietlanych na radarze.';
  Dalmierz_CheckBox.Caption := 'Dalmierz';
  Dalmierz_CheckBox.Hint := 'Prezentuj odleg³oœæ do wskazanego punktu od obiektu wskazanego w trybie dalmierza.';
  Dalmierz_Tryb_RadioGroup.Caption := 'Dalmierz tryb od';
  Dalmierz_Tryb_RadioGroup.Hint := 'Odleg³oœæ od kamery lub statku do wskazanego punktu.';

    zti := Dalmierz_Tryb_RadioGroup.ItemIndex;
    Dalmierz_Tryb_RadioGroup.Items.Clear();
    Dalmierz_Tryb_RadioGroup.Items.Add( 'kamery' );
    Dalmierz_Tryb_RadioGroup.Items.Add( 'statku' );

    if    ( zti >= 0 )
      and ( zti <= Dalmierz_Tryb_RadioGroup.Items.Count ) then
      Dalmierz_Tryb_RadioGroup.ItemIndex := zti;

  Delta_Czasu_Wyœwietlaj_CheckBox.Caption := 'Delta czasu';
  Delta_Czasu_Wyœwietlaj_CheckBox.Hint := 'Wyœwietlaj wartoœæ delty czasu.';
  Do_Wygaszenia_Panel.Caption := '';
  Do_Wygaszenia_Panel.Hint := '';
  DŸwiêk__Aktywnoœæ_CheckBox.Caption := 'DŸwiêk';
  DŸwiêk__Aktywnoœæ_CheckBox.Hint := 'Aktywnoœæ dŸwiêku.';
  DŸwiêk__G³oœnoœæ_Label.Hint := 'G³oœnoœæ dŸwiêku.';
  DŸwiêk__G³oœnoœæ_SpinEdit.Hint := 'G³oœnoœæ dŸwiêku.';
  DŸwiêk__T³umaczenia_Etykieta_Label.Caption := 'T³umaczenia';
  DŸwiêk__T³umaczenia_Etykieta_Label.Hint := 'T³umaczenia komunikatów.';
  DŸwiêk__T³umaczenia_ComboBox.Hint := 'Enter - zastosuj.';
  Efekty_GroupBox.Caption := 'Efekty';
  Efekty_GroupBox.Hint := 'Efekty graficzne.';
  Efekty__Dym_CheckBox.Caption := 'Dym';
  Efekty__Dym_CheckBox.Hint := '';
  Efekty__Element_Uszkodzenie_CheckBox.Caption := 'Element uszkodzenie';
  Efekty__Element_Uszkodzenie_CheckBox.Hint := '';
  Efekty__Mg³a_CheckBox.Caption := 'Mg³a';
  Efekty__Mg³a_CheckBox.Hint := '';
  Efekty__Ogieñ_CheckBox.Caption := 'Ogieñ';
  Efekty__Ogieñ_CheckBox.Hint := '';
  Efekty__Smuga_CheckBox.Caption := 'Smuga';
  Efekty__Smuga_CheckBox.Hint := '';
  Efekty__Smuga_D³uga_CheckBox.Caption := 'Smuga d³uga';
  Efekty__Smuga_D³uga_CheckBox.Hint := '';
  Efekty__Sonarowe_U³atwienie_CheckBox.Caption := 'Sonarowe u³atwienie';
  Efekty__Sonarowe_U³atwienie_CheckBox.Hint := '';
  Efekty__SOS_Rozb³ysk_CheckBox.Caption := 'SOS rozb³ysk';
  Efekty__SOS_Rozb³ysk_CheckBox.Hint := '';
  Efekty__Trafienie_Rozb³ysk_CheckBox.Caption := 'Trafienie rozb³ysk';
  Efekty__Trafienie_Rozb³ysk_CheckBox.Hint := '';
  Efekty__Wpadniêcie_Do_Wody_CheckBox.Caption := 'Wpadniêcie do wody';
  Efekty__Wpadniêcie_Do_Wody_CheckBox.Hint := '';
  Efekty__Wpadniêcie_Do_Wody_0_CheckBox.Caption := 'Wpadniêcie do wody 0';
  Efekty__Wpadniêcie_Do_Wody_0_CheckBox.Hint := '';
  Fale_CheckBox.Caption := 'Fale';
  Fale_CheckBox.Hint := 'Animacja falowania morza.';
  Fotograficzny_Tryb_CheckBox.Caption := 'Fotograficzny tryb';
  Fotograficzny_Tryb_CheckBox.Hint := 'Wy³¹cza informacje ekranowe.';
  Gra_Pauza_Button.Caption := 'Pauza';
  Gra_Pauza_Button.Hint := '';
  Gra_Rozpocznij_BitBtn.Caption := 'Start';
  Gra_Rozpocznij_BitBtn.Hint := 'Rozpocznij grê.';
  Gra_ScrollBox.Hint := '';
  Gra_Wspó³czynnik_Prêdkoœci_Etykieta_Label.Caption := 'Prêdkoœæ gry';
  Gra_Wspó³czynnik_Prêdkoœci_Etykieta_Label.Hint := '';
  Gra_Wspó³czynnik_Prêdkoœci_Label.Hint := '';
  Gra_Wspó³czynnik_Prêdkoœci_SpinEdit.Hint := '';
  Gra_Wspó³czynnik_Prêdkoœci__T³o_Wyró¿nienie_Panel.Caption := '';
  Gra_Wspó³czynnik_Prêdkoœci__T³o_Wyró¿nienie_Panel.Hint := '';
  Gra_Wspó³czynnik_Trudnoœci_Etykieta_Label.Caption := 'Trudnoœæ gry %';
  Gra_Wspó³czynnik_Trudnoœci_Etykieta_Label.Hint := 'W³aœciwie ³atwoœæ - im wiêksza wartoœæ bezwzglêdna tym SI gorzej celuje.';
  Gra_Wspó³czynnik_Trudnoœci_Label.Hint := 'W³aœciwie ³atwoœæ - im wiêksza wartoœæ bezwzglêdna tym SI gorzej celuje.';
  Gra_Wspó³czynnik_Trudnoœci_SpinEdit.Hint := 'W³aœciwie ³atwoœæ - im wiêksza wartoœæ bezwzglêdna tym SI gorzej celuje.';
  Gra_Zakoñcz_BitBtn.Caption := 'Koniec';
  Gra_Zakoñcz_BitBtn.Hint := 'Zakoñcz grê.';
  Gracz_Dane_GroupBox.Caption := 'Gracz dane';
  Gracz_Dane_GroupBox.Hint := '';
  Gracz_Gotowoœæ_Nie_BitBtn.Caption := '';
  Gracz_Gotowoœæ_Nie_BitBtn.Hint := 'Gracz nie gotowy do gry.';
  Gracz_Gotowoœæ_Tak_BitBtn.Caption := '';
  Gracz_Gotowoœæ_Tak_BitBtn.Hint := 'Gracz gotowy do gry.';
  Gracz_Grupa_Etykieta_Label.Caption := 'Grupa';
  Gracz_Grupa_Etykieta_Label.Hint := '';
  Gracz_Grupa_SpinEdit.Hint := '';
  Gracz_Nazwa_Edit.Hint := '';
  Gracz_Nazwa_Etykieta_Label.Caption := 'Nazwa gracza';
  Gracz_Nazwa_Etykieta_Label.Hint := '';
  Gracze_Lista_GroupBox.Caption := 'Gracze lista';
  Gracze_Lista_GroupBox.Hint := '';
  Gracze_Lista_Odœwie¿_BitBtn.Caption := '';
  Gracze_Lista_Odœwie¿_BitBtn.Hint := 'Odœwie¿ listê graczy.';
  Gracze_Lista_Roz³¹cz_Gracza_BitBtn.Caption := '';
  Gracze_Lista_Roz³¹cz_Gracza_BitBtn.Hint := 'Roz³¹cz gracza.';
  Gracze_Lista_StringGrid.Hint := '';
  Group_Box_Popup_Menu__Pokój_Rozmów__Wyczyœæ_MenuItem.Caption := 'Pokój rozmów - wyczyœæ';
  Group_Box_Popup_Menu__Pokój_Rozmów__Wyczyœæ_MenuItem.Hint := '';
  Group_Box_Popup_Menu__Pokój_Rozmów__Wyœlij_Do__Ustaw_MenuItem.Caption := 'Pokój rozmów - odbiorca ustaw';
  Group_Box_Popup_Menu__Pokój_Rozmów__Wyœlij_Do__Ustaw_MenuItem.Hint := '';
  Group_Box_Popup_Menu__Pomniejsz_Bardziej_MenuItem.Caption := 'Pomniejsz bardziej --';
  Group_Box_Popup_Menu__Pomniejsz_Bardziej_MenuItem.Hint := '';
  Group_Box_Popup_Menu__Pomniejsz_MenuItem.Caption := 'Pomniejsz -';
  Group_Box_Popup_Menu__Pomniejsz_MenuItem.Hint := '';
  Group_Box_Popup_Menu__Poszerz_MenuItem.Caption := 'Poszerz';
  Group_Box_Popup_Menu__Poszerz_MenuItem.Hint := '';
  Group_Box_Popup_Menu__Powiêksz_Bardziej_MenuItem.Caption := 'Powiêksz bardziej ++';
  Group_Box_Popup_Menu__Powiêksz_Bardziej_MenuItem.Hint := '';
  Group_Box_Popup_Menu__Powiêksz_MenuItem.Caption := 'Powiêksz +';
  Group_Box_Popup_Menu__Powiêksz_MenuItem.Hint := '';
  Group_Box_Popup_Menu__Wielkoœæ_Domyœlna_MenuItem.Caption := 'Wielkoœæ domyœlna';
  Group_Box_Popup_Menu__Wielkoœæ_Domyœlna_MenuItem.Hint := '';
  Group_Box_Popup_Menu__ZwêŸ_MenuItem.Caption := 'ZwêŸ';
  Group_Box_Popup_Menu__ZwêŸ_MenuItem.Hint := '';
  Gwiazdy_Migotanie_CheckBox.Caption := 'Gwiazdy migotanie';
  Gwiazdy_Migotanie_CheckBox.Hint := '';
  Has³o_Edit.Hint := '';
  Has³o_Etykieta_Label.Caption := 'Has³o';
  Has³o_Etykieta_Label.Hint := '';
  Kamera_Odleg³oœæ_Maksymalna_Etykieta_Label.Caption := 'Kamera odleg³oœæ';
  Kamera_Odleg³oœæ_Maksymalna_Etykieta_Label.Hint := 'Odleg³oœæ maksymalna kamery od obiektu, za którym pod¹¿a (0 - nie aktywne).';
  Kamera_Odleg³oœæ_Maksymalna_SpinEdit.Hint := 'Odleg³oœæ maksymalna kamery od obiektu, za którym pod¹¿a (0 - nie aktywne).';
  Kamera_Szybkoœæ_Ruchu_Edit.Hint := 'Prêdkoœæ ruchu kamery.';
  Kamera_Szybkoœæ_Ruchu_Etykieta_Label.Caption := 'Kamera szybkoœæ ruchu';
  Kamera_Szybkoœæ_Ruchu_Etykieta_Label.Hint := 'Prêdkoœæ ruchu kamery.';
  Kamera_Szybkoœæ_Ruchu_Label.Hint := 'Prêdkoœæ ruchu kamery.';
  Kamera_Szybkoœæ_Ruchu__T³o_Wyró¿nienie_Panel.Caption := '';
  Kamera_Szybkoœæ_Ruchu__T³o_Wyró¿nienie_Panel.Hint := '';
  Klatek_Na_Sekundê_Wyœwietlaj_CheckBox.Caption := 'Klatek na sekundê';
  Klatek_Na_Sekundê_Wyœwietlaj_CheckBox.Hint := 'Wyœwietlaj iloœæ klatek na sekundê.';
  Klawiatura_Konfiguracja_ScrollBox.Hint := '';
  Klawiatura_Konfiguracja__Domyœlna_Button.Caption := 'Domyœlna';
  Klawiatura_Konfiguracja__Domyœlna_Button.Hint := 'Przywróæ domyœln¹ konfiguracjê klawiszy.';
  Klawiatura_Konfiguracja__Konfiguracja_Numer_SpinEdit.Hint :=
    'Zapisz wczytaj konfiguracjê klawiatury o podanym numerze.' + #13 + #10 +
    #13 + #10 +
    'Enter - wczytaj.' + #13 + #10 +
    'Ctrl + Enter - zapisz.';
  Klawiatura_Konfiguracja__Niepowtarzalnoœæ_SprawdŸ_Button.Caption := 'SprawdŸ';
  Klawiatura_Konfiguracja__Niepowtarzalnoœæ_SprawdŸ_Button.Hint := 'SprawdŸ niepowtarzalnoœæ przypisanych konfiguracji klawiszy.';
  Klawiatura_Konfiguracja__Pomoc_Label.Caption := '(?)';
  Klawiatura_Konfiguracja__Pomoc_Label.Hint :=
    'Znane problemy z obs³ug¹ klawiszy.' + #13 + #10 +
    #13 + #10 +
    'Prawy Alt zg³asza siê jako Alt i Ctrl jednoczeœnie.' + #13 + #10 +
    #13 + #10 +
    'Nie wykrywa naciœniêcia klawiszy Tab, PrtScr.' + #13 + #10 +
    #13 + #10 +
    'Klawisze Windows (lewy i prawy) wywo³uj¹ równie¿ systemowe menu start.';
  Klawiatura_Konfiguracja__Przyciski_Panel.Caption := '';
  Klawiatura_Konfiguracja__Przyciski_Panel.Hint := '';
  Klawiatura_Konfiguracja__Rozmiar_Zak³adki_Poszerz_CheckBox.Caption := 'Rozmiar zak³adki poszerz';
  Klawiatura_Konfiguracja__Rozmiar_Zak³adki_Poszerz_CheckBox.Hint := 'Podczas prze³¹czania zak³adki na konfiguracjê klawiatury zwiêkszaj szerokoœæ panelu zak³adek konfiguracji.';
  Klawiatura_Konfiguracja__Sortuj_Button.Caption := 'Sortuj';
  Klawiatura_Konfiguracja__Sortuj_Button.Hint := 'Sortuj wed³ug nazwy.';
  Klawiatura_Konfiguracja__Szukaj_Edit.Hint := 'Szukaj w opisie.';
  Klawiatura_Konfiguracja__Szukaj__Nastêpny_Button.Caption := 'v';
  Klawiatura_Konfiguracja__Szukaj__Nastêpny_Button.Hint := 'Szukaj nastêpny.';
  Klawiatura_Konfiguracja__Szukaj__Pasuj¹ce_Tylko_Wyœwietlaj_CheckBox.Caption := 'Tylko d.';
  Klawiatura_Konfiguracja__Szukaj__Pasuj¹ce_Tylko_Wyœwietlaj_CheckBox.Hint := 'Wyœwietlaj tylko dopasowane wyszukania.';
  Klawiatura_Konfiguracja__Szukaj__Poprzedni_Button.Caption := '^';
  Klawiatura_Konfiguracja__Szukaj__Poprzedni_Button.Hint := 'Szukaj poprzedni.';
  Klawiatura_Konfiguracja__Wczytaj_Button.Caption := 'Wczytaj';
  Klawiatura_Konfiguracja__Wczytaj_Button.Hint := 'Wczytaj konfiguracjê klawiszy.';
  Klawiatura_Konfiguracja__Zapisz_Button.Caption := 'Zapisz';
  Klawiatura_Konfiguracja__Zapisz_Button.Hint := 'Zapisz konfiguracjê klawiszy.';
  Klienci_Od³¹cz_Wszystkich_BitBtn.Caption := '';
  Klienci_Od³¹cz_Wszystkich_BitBtn.Hint := 'Od³¹cz wszystkich klientów.';
  L¹d_ComboBox.Hint := '';
  L¹d_Elementy_Iloœæ_Label.Hint := 'Iloœæ elementów l¹du / iloœæ elementów l¹du uwzglêdnianych przez radar / iloœæ elementów l¹du emituj¹cych dŸwiêk.';
  L¹d_GroupBox.Caption := 'Mapy';
  L¹d_GroupBox.Hint := '';
  L¹d_Opis_Memo.Hint := '';
  L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Caption := 'Komunikat pomiñ';
  L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Hint := 'Pomiñ wypisywanie komunikatów o b³êdach definicji l¹du.';
  L¹d__Odœwie¿_Wskazany_BitBtn.Caption := '';
  L¹d__Odœwie¿_Wskazany_BitBtn.Hint := 'Odœwie¿ wskazan¹ mapê.';
  L¹d__Utwórz_BitBtn.Caption := '';
  L¹d__Utwórz_BitBtn.Hint := 'Utwórz (ponownie) wskazan¹ mapê.';
  L¹d__Wczytaj_Listê_BitBtn.Caption := '';
  L¹d__Wczytaj_Listê_BitBtn.Hint := 'Wczytaj listê map.';
  L¹dowanie_U³atwione_CheckBox.Caption := 'L¹dowanie u³atwione';
  L¹dowanie_U³atwione_CheckBox.Hint := 'Aby wyl¹dowaæ wystarczy lecieæ z odpowiedniego kierunku, z prêdkoœci¹ nie wiêksz¹ ni¿ oko³o 25%, z opadaniem nie wiêkszym ni¿ oko³o 25% i wcelowaæ samolotem w obszar ³apacza samolotów.';
  Log_Memo.Hint := '';
  Lotniskowiec_Samolot_L¹dowanie_Informacje_CheckBox.Caption := 'Lotniskowiec s. l. informacje';
  Lotniskowiec_Samolot_L¹dowanie_Informacje_CheckBox.Hint := 'Wyœwietlaj informacje o l¹dowaniach samolotów na lotniskowcu gracza (je¿eli wybrany).';
  Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero_BitBtn.Caption := '';
  Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero_BitBtn.Hint := 'Wszystkie samoloty na lotniskowcu gracza otrzymaj¹ maksymalne obra¿enia.';
  Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero_GroupBox.Caption := 'Lotniskowiec samoloty wszystkie odrzuæ';
  Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero_GroupBox.Hint := '';
  Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero__Rodzaj_RadioGroup.Caption := 'Rodzaj';
  Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero__Rodzaj_RadioGroup.Hint := '';

    zti := Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero__Rodzaj_RadioGroup.ItemIndex;
    Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero__Rodzaj_RadioGroup.Items.Clear();
    Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero__Rodzaj_RadioGroup.Items.Add( 'innej grupy' );
    Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero__Rodzaj_RadioGroup.Items.Add( 'innych graczy' );
    Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero__Rodzaj_RadioGroup.Items.Add( 'wszystkie' );

    if    ( zti >= 0 )
      and ( zti <= Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero__Rodzaj_RadioGroup.Items.Count ) then
      Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero__Rodzaj_RadioGroup.ItemIndex := zti;

  //Mapa_Label.Caption := ''; // Jest ustawiane na podstawie t³umaczenie_komunikaty_r.s³owo__mapa.
  Mapa_Label.Hint := '';
  Mg³a_Etykieta_Label.Caption := 'Mg³a';
  Mg³a_Etykieta_Label.Hint := 'Intensywnoœæ mg³y.';
  Mg³a_Informacja_Dodatkowa_Pomiñ_CheckBox.Caption := 'Nie informuj';
  Mg³a_Informacja_Dodatkowa_Pomiñ_CheckBox.Hint := 'Nie informuj o zmianach intensywnoœci mg³y.';
  Mg³a_SpinEdit.Hint := 'Intensywnoœæ mg³y.';
  Mg³a__T³o_Wyró¿nienie_Panel.Caption := '';
  Mg³a__T³o_Wyró¿nienie_Panel.Hint := '';
  Morze_Informacja_Dodatkowa_Pomiñ_CheckBox.Caption := 'Nie informuj';
  Morze_Informacja_Dodatkowa_Pomiñ_CheckBox.Hint := 'Nie informuj o zmianach intensywnoœci wzburzenia morza.';
  Morze_Wzburzenie_Etykieta_Label.Caption := 'Morze wzburzenie [%]';
  Morze_Wzburzenie_Etykieta_Label.Hint := 'Wzburzenie morza wp³ywa na falowanie statku (100% jest wartoœci¹ domyœln¹).';
  Morze_Wzburzenie_SpinEdit.Hint := 'Wzburzenie morza wp³ywa na falowanie statku (100% jest wartoœci¹ domyœln¹).';
  Morze_Wzburzenie__T³o_Wyró¿nienie_Panel.Caption := '';
  Morze_Wzburzenie__T³o_Wyró¿nienie_Panel.Hint := '';
  Mysz_Czu³oœæ_Edit.Hint := 'Czu³oœæ myszy (prêdkoœæ ruchu myszy).';
  Mysz_Czu³oœæ_Etykieta_Label.Caption := 'Mysz czu³oœæ';
  Mysz_Czu³oœæ_Etykieta_Label.Hint := 'Czu³oœæ myszy (prêdkoœæ ruchu myszy).';
  Mysz_Czu³oœæ_Label.Hint := 'Czu³oœæ myszy (prêdkoœæ ruchu myszy) wartoœæ ustawiona.';
  Mysz_Czu³oœæ_Luneta_Edit.Hint := 'Czu³oœæ myszy (prêdkoœæ ruchu myszy) przy maksymalnym przybli¿eniu lunety.';
  Mysz_Czu³oœæ_Luneta_Etykieta_Label.Caption := 'Mysz czu³oœæ luneta';
  Mysz_Czu³oœæ_Luneta_Etykieta_Label.Hint := 'Czu³oœæ myszy (prêdkoœæ ruchu myszy) przy maksymalnym przybli¿eniu lunety.';
  Mysz_Czu³oœæ_Luneta_Label.Hint := 'Czu³oœæ myszy (prêdkoœæ ruchu myszy) przy maksymalnym przybli¿eniu lunety - wartoœæ ustawiona.';
  Niebo_Rodzaj_RadioGroup.Caption := 'Niebo';
  Niebo_Rodzaj_RadioGroup.Hint := '';

    zti := Niebo_Rodzaj_RadioGroup.ItemIndex;
    Niebo_Rodzaj_RadioGroup.Items.Clear();
    Niebo_Rodzaj_RadioGroup.Items.Add( 'alternatywne' );
    Niebo_Rodzaj_RadioGroup.Items.Add( 'brak' );
    Niebo_Rodzaj_RadioGroup.Items.Add( 'standardowe' );

    if    ( zti >= 0 )
      and ( zti <= Niebo_Rodzaj_RadioGroup.Items.Count ) then
      Niebo_Rodzaj_RadioGroup.ItemIndex := zti;

  Radar__Niebo_Rodzaj_RadioGroup.Caption := 'Niebo - radar';
  Radar__Niebo_Rodzaj_RadioGroup.Hint := '';

    zti := Radar__Niebo_Rodzaj_RadioGroup.ItemIndex;
    Radar__Niebo_Rodzaj_RadioGroup.Items.Clear();
    Radar__Niebo_Rodzaj_RadioGroup.Items.Add( 'alternatywne' );
    Radar__Niebo_Rodzaj_RadioGroup.Items.Add( 'brak' );
    Radar__Niebo_Rodzaj_RadioGroup.Items.Add( 'standardowe' );

    if    ( zti >= 0 )
      and ( zti <= Radar__Niebo_Rodzaj_RadioGroup.Items.Count ) then
      Radar__Niebo_Rodzaj_RadioGroup.ItemIndex := zti;

  Noc_Etykieta_Label.Caption := 'Noc';
  Noc_Etykieta_Label.Hint := 'Intensywnoœæ nocy.';
  Noc__Czas_Na__Ekranie_Wyœwietlaj_CheckBox.Caption := 'Czas na ekranie';
  Noc__Czas_Na__Ekranie_Wyœwietlaj_CheckBox.Hint := 'Wyœwietlaj godzinê na ekranie.';
  Noc__Czas_Na__Radarze_Wyœwietlaj_CheckBox.Caption := 'Czas na radarze';
  Noc__Czas_Na__Radarze_Wyœwietlaj_CheckBox.Hint := 'Wyœwietlaj godzinê na radarze.';
  Noc__Informacja_Dodatkowa_Pomiñ_CheckBox.Caption := 'Nie informuj';
  Noc__Informacja_Dodatkowa_Pomiñ_CheckBox.Hint := 'Nie informuj o zmianach intensywnoœci nocy.';
  Noc_Label.Hint := 'Intensywnoœæ nocy.';
  Noc_SpinEdit.Hint := 'Intensywnoœæ nocy.';
  Noc__T³o_Wyró¿nienie_Panel.Caption := '';
  Noc__T³o_Wyró¿nienie_Panel.Hint := '';
  Obrót_K¹t_Zablokowany_Strza³_WskaŸnik_CheckBox.Caption := 'Obrót k¹t zablokowany broni strza³ wskaŸnik';
  Obrót_K¹t_Zablokowany_Strza³_WskaŸnik_CheckBox.Hint := 'Wyœwietlaj wskaŸnik zablokowanego k¹ta obrotu strza³u broni (w zakresie tego k¹ta broñ mo¿e siê obracaæ ale nie mo¿e strzelaæ).';
  Obrót_K¹t_Zablokowany_WskaŸnik_CheckBox.Caption := 'Obrót k¹t zablokowany broni wskaŸnik';
  Obrót_K¹t_Zablokowany_WskaŸnik_CheckBox.Hint := 'Wyœwietlaj wskaŸnik zablokowanego k¹ta obrotu broni.';
  Pe³ny_Ekran_CheckBox.Caption := 'Pe³ny ekran';
  Pe³ny_Ekran_CheckBox.Hint := '';
  Pe³ny_Ekran__Znikaj¹ce_Elementy_CheckBox.Caption := 'Pe³ny ekran - znikaj¹ce elementy';
  Pe³ny_Ekran__Znikaj¹ce_Elementy_CheckBox.Hint := 'Mo¿e pomóc gdy na pe³nym ekranie nie widaæ niektórych elementów gry (np. radaru).';
  Pokój_Rozmów_GroupBox.Caption := 'Pokój rozmów';
  Pokój_Rozmów_GroupBox.Hint := '';
  Pokój_Rozmów_Memo.Hint := '';
  Pokój_Rozmów_Przyciski__Rozmiar_Przeci¹gnij_Panel.Caption := '|';
  Pokój_Rozmów_Przyciski__Rozmiar_Przeci¹gnij_Panel.Hint := 'Przytrzymaj i przeci¹gnij aby zmieniæ rozmiar.';
  Pokój_Rozmów__Data_Czas_Wyœwietlaj_CheckBox.Caption := 'Pokój rozmów data czas wyœwietlaj';
  Pokój_Rozmów__Data_Czas_Wyœwietlaj_CheckBox.Hint := 'Wyœwietlaj datê i czas wys³ania wiadomoœci.';
  Pokój_Rozmów__Ignoruj_CheckListBox.Hint :=
    'Ignoruj wiadomoœci przysy³ane od.' + #13 + #10 +
    'Ctrl + A - zaznacz wszystko' + #13 + #10 +
    'Ctrl + N - odznacz wszystko' + #13 + #10 +
    'Ctrl + O - odwróæ zaznaczenie';
  Pokój_Rozmów__Ignoruj_GroupBox.Caption := 'Pokój rozmów - ignorowanie wiadomoœci';
  Pokój_Rozmów__Ignoruj_GroupBox.Hint := '';
  Pokój_Rozmów__Ignoruj__Si_Zagaduje_CheckBox.Caption := 'Pokój rozmów ignoruj SI zagaduje';
  Pokój_Rozmów__Ignoruj__Si_Zagaduje_CheckBox.Hint := 'Nie wyœwietlaj w pokoju rozmów wiadomoœci wysy³anych jako zagadywanie SI.';
  Pokój_Rozmów__Ignoruj__Si_Zak³óca_CheckBox.Caption := 'Pokój rozmów ignoruj próby zak³ócania';
  Pokój_Rozmów__Ignoruj__Si_Zak³óca_CheckBox.Hint := 'Nie wyœwietlaj w pokoju rozmów wiadomoœci wysy³anych jako informacje o próbach zak³ócania systemów statków.';
  Pokój_Rozmów__Ignoruj__Trafienie_Informacja_CheckBox.Caption := 'Pokój rozmów ignoruj trafienia';
  Pokój_Rozmów__Ignoruj__Trafienie_Informacja_CheckBox.Hint := 'Nie wyœwietlaj w pokoju rozmów wiadomoœci wysy³anych jako informacje o trafieniach.';
  Pokój_Rozmów__Ignoruj__Wys³a³_Polecenie_CheckBox.Caption := 'Pokój rozmów ignoruj wys³a³ polecenie';
  Pokój_Rozmów__Ignoruj__Wys³a³_Polecenie_CheckBox.Hint := 'Nie wyœwietlaj w pokoju rozmów wiadomoœci wysy³anych jako informacje, ¿e ktoœ wydaje polecenia dla SI.';
  Pokój_Rozmów__Informacja_Dodatkowa_CheckBox.Caption := 'Pokój rozmów informuj na ekranie';
  Pokój_Rozmów__Informacja_Dodatkowa_CheckBox.Hint := 'Wyœwietlaj dialogi z pokoju rozmów na ekranie gry.';
  Pokój_Rozmów__Na_Ekranie_CheckBox.Caption := 'Pokój rozmów na ekranie';
  Pokój_Rozmów__Na_Ekranie_CheckBox.Hint := 'Wyœwietlaj pokój rozmów na ekranie gry.';
  //Pokój_Rozmów__Ukryj_Button.Caption := ''; // Jest ustawiane na podstawie t³umaczenie_komunikaty_r.komunikat__pokój_rozmów__ukryj__etykieta.
  //Pokój_Rozmów__Ukryj_Button.Hint := ''; // Jest ustawiane na podstawie t³umaczenie_komunikaty_r.komunikat__pokój_rozmów__ukryj__podpowiedŸ.
  Pokój_Rozmów__Wiadomoœæ_Edit.Hint :=
    'Enter - wyœlij.' + #13 + #10 +
    'Esc - gdy pokój rozmów jest widoczny na ekranie przeniesie go na boczny panel.' + #13 + #10 +
    #13 + #10 +
    'Ctrl + I - wstaw symbol polecenia dla SI.' + #13 + #10 +
    'Ctrl + J - wstaw swój identyfikator jako adresata polecenia (np. gdy ustawiono aby SI przejê³a kontrolê nad w³asnymi statkami). Wybranym na liœcie adresatem powinni byæ ''wszyscy'' albo ''grupa'',' +
      ' w przeciwnym wypadku polecenie nie dojdzie do w³asnych statków.' + #13 + #10 +
    #13 + #10 +
    'Ctrl + S - dodaj informacjê czy polecenie dotyczy samolotu adresata (je¿eli jeden gracz lub SI ma statek i samolot).' + #13 + #10 +
    'Ctrl + T - dodaj informacjê czy polecenie dotyczy statku adresata (je¿eli jeden gracz lub SI ma statek i samolot).' + #13 + #10 +
    #13 + #10 +
    'Ctrl + Shift + S - dodaj informacjê czy polecenie dotyczy samolotu nadawcy (je¿eli jeden gracz lub SI ma statek i samolot).' + #13 + #10 +
    'Ctrl + Shift + T - dodaj informacjê czy polecenie dotyczy statku nadawcy (je¿eli jeden gracz lub SI ma statek i samolot).' + #13 + #10 +
    #13 + #10 +
    'Strza³ka w górê, strza³ka w dó³ - przewijaj wys³ane wiadomoœci.' + #13 + #10 +
    'Ctrl + strza³ka w górê, Ctrl + strza³ka w dó³ - przewijaj dostêpnych adresatów.' + #13 + #10 +
    'Shift + strza³ka w górê, Shift + strza³ka w dó³ - przewijaj dostêpne polecenia dla SI.' + #13 + #10 +
    #13 + #10 +
    'Polecenie dla SI rozpoczyna siê od ''' + si_pokój_rozmów__polecenie_symbol_c + '''.' +
    #13 + #10 +
    'Je¿eli SI posiada statek i samolot w poleceniach dla samolotu pod koniec nale¿y umieœciæ ''' + si_pokój_rozmów__polecenie_symbol__samolot_c + '''.' +
    #13 + #10 +
    'Je¿eli SI posiada statek i samolot w poleceniach dla statku pod koniec nale¿y umieœciæ ''' + si_pokój_rozmów__polecenie_symbol__statek_c + '''.' +
    #13 + #10 +
    'Aby w poleceniu wpisaæ adresata nale¿y na koñcu po znaku ''' + si_pokój_rozmów__polecenie_symbol__separator_identyfikatora_c + ''' wpisaæ id gracza lub nazwê gracza.' +
    #13 + #10 +
    'Id gracza lub nazwa gracza mo¿e byæ poprzedzone spacj¹, po nim mo¿e byæ kropka.' +
    #13 + #10 +
    'W pierwszej kolejnoœci jest sprawdzany adresat wybrany w polu ''Wyœlij do''.' +
    #13 + #10 +
    #13 + #10 +
    'Próby zak³ócenia wrogiego statku.' +
    #13 + #10 +
    'Nale¿y wys³aæ jakikolwiek komunikat zgodny z konwencj¹ ''polecenie dla SI''.' +
    #13 + #10 +
    'Komunikat musi byæ wys³any do jednego gracza. Je¿eli gracz ma statek i samolot nale¿y sprecyzowaæ czy jest wysy³any do statku czy samolotu.' +
    #13 + #10 +
    'Kolejna próba zak³ócania mo¿e byæ skuteczna dopiero po pewnym czasie (sekund: ' + Trim(  FormatFloat( '### ### ##0', zak³ócanie__czas_do_ponownej_próby_sekundy_g )  ) + ').' +
    #13 + #10 +
    'Nieudane zak³ócanie mo¿e uszkodziæ statek, który próbowa³ zak³ócaæ (w tym przypadku nie jest uwzglêdniany czas miêdzy próbami zak³ócania).' +
    #13 + #10 +
    'W wyniku zak³ócania na jakiœ czas mog¹ przestaæ dzia³aæ pewne systemy statku oraz powstaæ obra¿enia.' +
    #13 + #10 +
    #13 + #10 +
    'Przyk³ady:' +
    #13 + #10 +
    si_pokój_rozmów__polecenie_symbol_c + pokój_rozmów__si_polecenie__si_aktywnoœæ_podaj_c +
    #13 + #10 +
    si_pokój_rozmów__polecenie_symbol_c + pokój_rozmów__si_polecenie__si_aktywnoœæ_podaj_c + si_pokój_rozmów__polecenie_symbol__separator_identyfikatora_c + ' 123' +
    #13 + #10 +
    si_pokój_rozmów__polecenie_symbol_c + pokój_rozmów__si_polecenie__si_aktywnoœæ_podaj_c + si_pokój_rozmów__polecenie_symbol__samolot_c + si_pokój_rozmów__polecenie_symbol__separator_identyfikatora_c + ' abc.' +
    #13 + #10 +
    si_pokój_rozmów__polecenie_symbol_c + pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Mnie_c + si_pokój_rozmów__polecenie_symbol__samolot_c + si_pokój_rozmów__polecenie_symbol__statek_nadawca_c + ' {samolot(y) adresata(ów) powinien zbli¿yæ siê do statku nadawcy}.';
  Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Hint := 'Wyœlij wiadomoœæ do wybranego adresata.';
  Pokój_Rozmów__Wyœlij_Wiadomoœæ_Button.Caption := 'Wyœlij';
  Pokój_Rozmów__Wyœlij_Wiadomoœæ_Button.Hint := 'Wyœlij wiadomoœæ.';
  Pozosta³e_ScrollBox.Hint := '';
  Projektowy_Tryb_CheckBox.Caption := 'Projektowy tryb';
  Projektowy_Tryb_CheckBox.Hint := '';
  Projektowy_Tryb__Grawitacja_Wy³¹cz_CheckBox.Caption := 'Grawitacja wy³¹cz';
  Projektowy_Tryb__Grawitacja_Wy³¹cz_CheckBox.Hint := '';
  Projektowy_Tryb__Przesuwanie_Skaluj_CheckBox.Caption := 'Przesuwanie skaluj';
  Projektowy_Tryb__Przesuwanie_Skaluj_CheckBox.Hint := 'W trybie projektowym modyfikuj przesuwanie statków o wspó³czynnik prêdkoœci gry.';
  Projektowy_Tryb__Wspó³rzêdne_Sceny_Wyœwietlaj_CheckBox.Caption := 'Wspó³rzêdne wyœwietlaj';
  Projektowy_Tryb__Wspó³rzêdne_Sceny_Wyœwietlaj_CheckBox.Hint := 'Wyœwietlaj na ekranie wspó³rzêdna punktu sceny wskazanego kursorem myszy.';
  Prze³adowanie_WskaŸnik_CheckBox.Caption := 'WskaŸnik prze³adowania';
  Prze³adowanie_WskaŸnik_CheckBox.Hint := 'Wyœwietlaj wskaŸnik prze³adowania na lufach.';
  Punkt_Naprowadzaj_CheckBox.Caption := 'Naprowadzaj';
  Punkt_Naprowadzaj_CheckBox.Hint := 'Wyœwietlaj wskazówki dotarcia do wskazanego punktu.';
  Punkt_Naprowadzaj_GroupBox.Caption := 'Punkt naprowadzaj';
  Punkt_Naprowadzaj_GroupBox.Hint := '';
  Punkt_Naprowadzaj__Na_Lotniskowiec_CheckBox.Caption := 'L.';
  Punkt_Naprowadzaj__Na_Lotniskowiec_CheckBox.Hint := 'Naprowadzaj na lotniskowiec (je¿eli otrzymano zgodê na l¹dowanie). Tylko dla samolotów.';
  Punkt_Naprowadzaj__Odleg³oœæ_Do_Punktu_Prezentuj_CheckBox.Caption := 'O.';
  Punkt_Naprowadzaj__Odleg³oœæ_Do_Punktu_Prezentuj_CheckBox.Hint := 'Prezentuj odleg³oœæ od aktualnie wybranego statku do punktu naprowadzania.';
  Punkt_Naprowadzaj__Punkt_CheckBox.Caption := 'Punkt';
  Punkt_Naprowadzaj__Punkt_CheckBox.Hint := 'Wyœwietlaj punkt.';
  Punkt_Naprowadzaj__Radar_CheckBox.Caption := 'Radar';
  Punkt_Naprowadzaj__Radar_CheckBox.Hint := 'Wyœwietlaj punkt na radarze.';
  Punkt_Naprowadzaj__Strza³ka_CheckBox.Caption := 'Strza³ka';
  Punkt_Naprowadzaj__Strza³ka_CheckBox.Hint := 'Wyœwietlaj strza³kê kierunku.';
  Punkt_Naprowadzaj__X_Etykieta_Label.Caption := 'x';
  Punkt_Naprowadzaj__X_Etykieta_Label.Hint := '';
  Punkt_Naprowadzaj__X_SpinEdit.Hint := '';
  Punkt_Naprowadzaj__Y_Etykieta_Label.Caption := 'y';
  Punkt_Naprowadzaj__Y_Etykieta_Label.Hint := '';
  Punkt_Naprowadzaj__Y_SpinEdit.Hint := '';
  Punkt_Naprowadzaj__Z_Etykieta_Label.Caption := 'z';
  Punkt_Naprowadzaj__Z_Etykieta_Label.Hint := '';
  Punkt_Naprowadzaj__Z_SpinEdit.Hint := '';
  Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBox.Hint := 'Sposób prezentowania wskaŸnika punktów ¿ycia wzglêdem efektów sceny.';

    zti := Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBox.ItemIndex;
    Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBox.Items.Clear();
    Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBox.Items.Add( 'nie podlega efektom sceny' );
    Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBox.Items.Add( 'nie podlega efektom sceny tylko ponad powierzchni¹ wody' );
    Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBox.Items.Add( 'podlega efektom sceny' );

    if    ( zti >= 0 )
      and ( zti <= Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBox.Items.Count ) then
      Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBox.ItemIndex := zti;

  Punkty_¯ycia_WskaŸnik__Gracz_CheckBox.Caption := 'Punkty ¿ycia wskaŸnik gracz';
  Punkty_¯ycia_WskaŸnik__Gracz_CheckBox.Hint := 'Wyœwietlaj wskaŸnik punktów ¿ycia nad statkiem gracza.';
  Punkty_¯ycia_WskaŸnik__Prezentowanie_Sposób_ComboBox.Hint := 'Sposób prezentowania punktów ¿ycia.';

    zti := Punkty_¯ycia_WskaŸnik__Prezentowanie_Sposób_ComboBox.ItemIndex;
    Punkty_¯ycia_WskaŸnik__Prezentowanie_Sposób_ComboBox.Items.Clear();
    Punkty_¯ycia_WskaŸnik__Prezentowanie_Sposób_ComboBox.Items.Add( 'brak' );
    Punkty_¯ycia_WskaŸnik__Prezentowanie_Sposób_ComboBox.Items.Add( 'punkty ¿ycia' );
    Punkty_¯ycia_WskaŸnik__Prezentowanie_Sposób_ComboBox.Items.Add( 'punkty ¿ycia / punkty ¿ycia maksymalne' );
    Punkty_¯ycia_WskaŸnik__Prezentowanie_Sposób_ComboBox.Items.Add( 'punkty ¿ycia %' );
    Punkty_¯ycia_WskaŸnik__Prezentowanie_Sposób_ComboBox.Items.Add( 'punkty ¿ycia i punkty ¿ycia %' );

    if    ( zti >= 0 )
      and ( zti <= Punkty_¯ycia_WskaŸnik__Prezentowanie_Sposób_ComboBox.Items.Count ) then
      Punkty_¯ycia_WskaŸnik__Prezentowanie_Sposób_ComboBox.ItemIndex := zti;

  Punkty_¯ycia_WskaŸnik__Przeciwnik_CheckBox.Caption := 'Punkty ¿ycia wskaŸnik przeciwnik';
  Punkty_¯ycia_WskaŸnik__Przeciwnik_CheckBox.Hint := 'Wyœwietlaj wskaŸnik punktów ¿ycia nad statkami przeciwników.';
  Punkty_¯ycia_WskaŸnik__Sojusznik_CheckBox.Caption := 'Punkty ¿ycia wskaŸnik sojusznik';
  Punkty_¯ycia_WskaŸnik__Sojusznik_CheckBox.Hint := 'Wyœwietlaj wskaŸnik punktów ¿ycia nad statkami sojuszników.';
  Punkty_¯ycia_WskaŸnik____T³o_Wyró¿nienie_Panel.Caption := '';
  Punkty_¯ycia_WskaŸnik____T³o_Wyró¿nienie_Panel.Hint := '';
  Radar__Broñ_Zasiêg_Wyœwietlaj_CheckBox.Caption := 'Radar broñ zasiêg wyœwietlaj';
  Radar__Broñ_Zasiêg_Wyœwietlaj_CheckBox.Hint := 'Wyœwietlaj zasiêg broni na radarze.';
  Radar__Czu³oœæ_Etykieta_Label.Caption := 'C.';
  Radar__Czu³oœæ_Etykieta_Label.Hint := 'Czu³oœæ radaru %.';
  Radar__Czu³oœæ_SpinEdit.Hint := 'Czu³oœæ radaru %.';
  Radar__Dane_Z_Radia_CheckBox.Caption := 'Radio';
  Radar__Dane_Z_Radia_CheckBox.Hint := 'Prezentuj na radarze dane z radia.';
  Radar__Dane_Z_Radia__L¹dy_CheckBox.Caption := 'Radar dane z radia o l¹dach';
  Radar__Dane_Z_Radia__L¹dy_CheckBox.Hint := 'Prezentuj na radarze dane z radia o l¹dach.';
  Radar__Dane_Z_Sonaru_CheckBox.Caption := 'Sonar';
  Radar__Dane_Z_Sonaru_CheckBox.Hint := 'Prezentuj dane z sonaru.';
  Radar__Kamera_Kierunek_Wyœwietlaj_CheckBox.Caption := 'Radar kamera wyœwietlaj';
  Radar__Kamera_Kierunek_Wyœwietlaj_CheckBox.Hint := 'Wyœwietlaj kierunek kamery na radarze.';
  Radar__L¹d_Rysowanie_Zasiêg_Etykieta_Label.Caption := 'Radar l¹d zasiêg %';
  Radar__L¹d_Rysowanie_Zasiêg_Etykieta_Label.Hint := 'W jakim procencie zasiêgu radaru rysowaæ l¹d.';
  Radar__L¹d_Rysowanie_Zasiêg_SpinEdit.Hint := 'W jakim procencie zasiêgu radaru rysowaæ l¹d.';
  Radar__Pomniejsz_Button.Caption := '-';
  Radar__Pomniejsz_Button.Hint := 'Pomniejsz wielkoœæ wyœwietlacza radaru.';
  Radar__Powiêksz_Button.Caption := '+';
  Radar__Powiêksz_Button.Hint := 'Powiêksz wielkoœæ wyœwietlacza radaru.';
  Radar__Przyciski_Panel.Caption := '';
  Radar__Przyciski_Panel.Hint := '';
  Radar__Przyciski_Panel__Ukrywaj_CheckBox.Caption := 'Radar ukrywaj panel przycisków';
  Radar__Przyciski_Panel__Ukrywaj_CheckBox.Hint := 'Ukrywaj panel przycisków na panelu radaru.';
  Radar__Rysowanie_Œladów__Amunicji_Sekundy_Etykieta_Label.Caption := 'Radar œlady amunicji';
  Radar__Rysowanie_Œladów__Amunicji_Sekundy_Etykieta_Label.Hint := 'Czas w sekundach wyœwietlania na radarze œladów amunicji.';
  Radar__Rysowanie_Œladów__Amunicji_Sekundy_SpinEdit.Hint := 'Czas w sekundach wyœwietlania na radarze œladów amunicji.';
  Radar__Rysowanie_Œladów__Statków_Sekundy_Etykieta_Label.Caption := 'Radar œlady statków';
  Radar__Rysowanie_Œladów__Statków_Sekundy_Etykieta_Label.Hint := 'Czas w sekundach wyœwietlania na radarze œladów statków.';
  Radar__Rysowanie_Œladów__Statków_Sekundy_SpinEdit.Hint := 'Czas w sekundach wyœwietlania na radarze œladów statków.';
  Radar__Skala_Etykieta_Label.Caption := 'S.';
  Radar__Skala_Etykieta_Label.Hint := 'Skala radaru.';
  //Radar__Skala_SpinEdit.Hint := ''; // Jest ustawiane na podstawie t³umaczenie_komunikaty_r.radar__skala_spinedit__podpowiedŸ__radia.
  Radar__Skala_Y_Uwzglêdniaj_L¹d_CheckBox.Caption := 'Radar skala y uwzglêdniaj';
  Radar__Skala_Y_Uwzglêdniaj_L¹d_CheckBox.Hint := 'Rysuj na radarze zarys l¹dów z uwzglêdnieniem wysokoœci obiektów.';
  Radar__Widocznoœæ_CheckBox.Caption := 'Radar wyœwietlaj';
  Radar__Widocznoœæ_CheckBox.Hint := 'Wyœwietlaj radar na ekranie.';
  Radar__Wspó³rzêdna_Y_CheckBox.Caption := 'Radar wspó³rzêdna Y';
  Radar__Wspó³rzêdna_Y_CheckBox.Hint := 'Wyœwietlaj wspó³rzêdn¹ Y na radarze.';
  Radar__Wspó³rzêdne_Kursora_CheckBox.Caption := 'Radar wspó³rzêdne kursora wyœwietlaj';
  Radar__Wspó³rzêdne_Kursora_CheckBox.Hint := 'Wyœwietlaj wspó³rzêdne kursora na radarze (aktywne gdy kursor myszy przemieszcza siê nad radarem).';
  Radar__Zmieniaj_Czu³oœæ_Wraz_Ze_Skal¹_CheckBox.Caption := 'Zmieniaj czu³oœæ';
  Radar__Zmieniaj_Czu³oœæ_Wraz_Ze_Skal¹_CheckBox.Hint := 'Zmieniaj czu³oœæ radaru wraz ze zmian¹ skali.';
  Radar_Panel.Caption := '';
  Radar_Panel.Hint := '';
  Schemat_Samolot_Zmieñ_BitBtn.Caption := '';
  Schemat_Samolot_Zmieñ_BitBtn.Hint := 'Zmieñ samolot (dostêpne gdy wyl¹dowano na lotniskowcu).';
  Serwer_Adres_IP_Edit.Hint := '';
  Serwer_Adres_IP_Etykieta_Label.Caption := 'Adres IP serwera';
  Serwer_Adres_IP_Etykieta_Label.Hint := '';
  Serwer_Port_Etykieta_Label.Caption := 'Port serwera';
  Serwer_Port_Etykieta_Label.Hint := '';
  Serwer_Port_SpinEdit.Hint := '';
  SI_GroupBox.Caption := 'SI';
  SI_GroupBox.Hint := '';
  SI_Statek_Gracza_GroupBox.Caption := 'SI statek gracza';
  SI_Statek_Gracza_GroupBox.Hint := '';
  SI__Dodaj_BitBtn.Caption := '';
  SI__Dodaj_BitBtn.Hint := 'Dodaj SI.';
  SI__Grupa_Etykieta_Label.Caption := 'Grupa';
  SI__Grupa_Etykieta_Label.Hint := '';
  SI__Grupa_SpinEdit.Hint := '';
  SI__Kasuj_Wszystkie_BitBtn.Caption := '';
  SI__Kasuj_Wszystkie_BitBtn.Hint := 'Kasuj wszystkie SI.';
  SI__Nazwa_Edit.Hint :=
    'Ctrl + K - wstaw symbol kodu statku i losowej wartoœæ liczbowej do nazwy (zostanie zamieniony na kod statku i losow¹ liczbê podczas dodawania si do listy graczy).' + #13 + #10 +
    'Ctrl + L - wstaw symbol losowej wartoœæ liczbowej do nazwy (zostanie zamieniony na losow¹ liczbê podczas dodawania si do listy graczy).' + #13 + #10 +
    'Ctrl + N - wstaw symbol nazwy statku i losowej wartoœæ liczbowej do nazwy (zostanie zamieniony na nazwê statku i losow¹ liczbê podczas dodawania si do listy graczy).' + #13 + #10 +
    'Ctrl + M = Ctrl + N  +  Ctrl + K  +  Ctrl + L.';
  SI__Nazwa_Etykieta_Label.Caption := 'Nazwa';
  SI__Nazwa_Etykieta_Label.Hint := '';
  SI__Patrol_Blisko_Zostaje_CheckBox.Caption := 'SI blisko bazy';
  SI__Patrol_Blisko_Zostaje_CheckBox.Hint := 'SI nie odp³ynie zbyt daleko od œrodka obszaru patrolu.';
  SI__P³ywa_CheckBox.Caption := 'SI p³ywa';
  SI__P³ywa_CheckBox.Hint := '';
  SI__P³ywa__Samolot_Gracza_CheckBox.Caption := 'SI p³ywa (samolot)';
  SI__P³ywa__Samolot_Gracza_CheckBox.Hint := 'SI p³ywa samolotem gracza (je¿eli dostêpny).';
  SI__P³ywa__Statek_Gracza_CheckBox.Caption := 'SI p³ywa';
  SI__P³ywa__Statek_Gracza_CheckBox.Hint := 'SI p³ywa statkiem gracza.';
  SI__Samolot_Gracza__L¹duj_Na_Lotniskowcu_Gracza_Button.Caption := 'L.';
  SI__Samolot_Gracza__L¹duj_Na_Lotniskowcu_Gracza_Button.Hint := 'Samolot gracza l¹duj na lotniskowcu gracza (je¿eli dostêpny).';
  SI__Schemat__Kasuj_BitBtn.Caption := '';
  SI__Schemat__Kasuj_BitBtn.Hint := 'Kasuj wskazany schemat si.';
  SI__Schemat__Odœwie¿_Wskazany_BitBtn.Caption := '';
  SI__Schemat__Odœwie¿_Wskazany_BitBtn.Hint := 'Odœwie¿ wskazany schemat si.';
  SI__Schemat__Wczytaj_Listê_BitBtn.Caption := '';
  SI__Schemat__Wczytaj_Listê_BitBtn.Hint := 'Wczytaj listê schematów si.';
  SI__Schemat__Zapisz_BitBtn.Caption := '';
  SI__Schemat__Zapisz_BitBtn.Hint := 'Zapisz wskazany schemat si.';
  SI__Schemat__Zapisz__Nazwa_Ttreœæ_Z_Pola_Nazwa_CheckBox.Caption := 'N';
  SI__Schemat__Zapisz__Nazwa_Ttreœæ_Z_Pola_Nazwa_CheckBox.Hint := 'Zapisz jako nazwê si treœæ z pola ''Nazwa'' (SI).';
  SI__Schemat__Zastosuj_BitBtn.Caption := '';
  SI__Schemat__Zastosuj_BitBtn.Hint := 'Zastosuj wskazany schemat si.';
  SI__Schemat__Zastosuj__Pomiñ__L¹d_CheckBox.Caption := 'Mapa';
  SI__Schemat__Zastosuj__Pomiñ__L¹d_CheckBox.Hint := 'Zastosuj wskazany schemat si z pominiêciem informacji o mapie.';
  SI__Schemat__Zastosuj__Pomiñ__Statki_Pozycje_Pocz¹tkowe_CheckBox.Caption := 'Pozycje';
  SI__Schemat__Zastosuj__Pomiñ__Statki_Pozycje_Pocz¹tkowe_CheckBox.Hint := 'Zastosuj wskazany schemat si z pominiêciem informacji o pozycjach pocz¹tkowych statków.';
  SI__Schemat_ComboBox.Hint := '';
  SI__Schemat_GroupBox.Caption := 'SI schemat';
  SI__Schemat_GroupBox.Hint := '';
  SI__Schemat_Opis_Memo.Hint := '';
  SI__Statek_ComboBox.Hint := '';
  SI__Statek__Samolot_ComboBox.Hint := 'Samolot.' + #13 + #10 + 'Je¿eli wybrano lotniskowiec, mo¿na wybraæ samolot.';
  SI__Strzela_CheckBox.Caption := 'SI strzela';
  SI__Strzela_CheckBox.Hint := '';
  SI__Strzela__Statek_Gracza_RadioGroup.Caption := 'SI strzela';
  SI__Strzela__Statek_Gracza_RadioGroup.Hint :=
    'SI strzela:' + #13 + #10 +
    'nie - nie strzela;' + #13 + #10 +
    'tak - strzela z broni niewybranych przez gracza;' + #13 + #10 +
    'wszystkim - strzela z wszystkich broni.';

    zti := SI__Strzela__Statek_Gracza_RadioGroup.ItemIndex;
    SI__Strzela__Statek_Gracza_RadioGroup.Items.Clear();
    SI__Strzela__Statek_Gracza_RadioGroup.Items.Add( t³umaczenie_komunikaty_r.s³owo__nie );
    SI__Strzela__Statek_Gracza_RadioGroup.Items.Add( t³umaczenie_komunikaty_r.s³owo__tak );
    SI__Strzela__Statek_Gracza_RadioGroup.Items.Add( 'wszystkim' );

    if    ( zti >= 0 )
      and ( zti <= SI__Strzela__Statek_Gracza_RadioGroup.Items.Count ) then
      SI__Strzela__Statek_Gracza_RadioGroup.ItemIndex := zti;

  Sonarowe_U³atwienie_CheckBox.Caption := 'Sonarowe u³atwienia';
  Sonarowe_U³atwienie_CheckBox.Hint := 'Wyœwietlaj dane z sonaru na ekranie gry.';
  Sonarowe_U³atwienie__Klient_Zmieniaæ_Mo¿e_CheckBox.Caption := 'Sonarowe u³atwienia - klient mo¿e zmieniaæ';
  Sonarowe_U³atwienie__Klient_Zmieniaæ_Mo¿e_CheckBox.Hint := 'Zezwalaj klientom na zmianê tej opcji.';
  SOS_Nadaj_Button.Caption := 'SOS nadaj';
  SOS_Nadaj_Button.Hint := '';
  Statek_ComboBox.Hint := 'Enter - utwórz (ponownie) wskazany statek.';
  Statek_GroupBox.Caption := 'Statek';
  Statek_GroupBox.Hint := '';
  Statek_Opis_Memo.Hint := '';
  Statek__Komunikat_B³êdu_Pomiñ_CheckBox.Caption := 'Komunikat pomiñ';
  Statek__Komunikat_B³êdu_Pomiñ_CheckBox.Hint := 'Pomiñ wypisywanie komunikatów o b³êdach definicji statku.' + #13 + #10 + 'Przed ponownym utworzeniem statku odœwie¿ dane wskazanego statku.';
  Statek__Odœwie¿_Wskazany_BitBtn.Caption := '';
  Statek__Odœwie¿_Wskazany_BitBtn.Hint := 'Odœwie¿ wskazany statek.';
  Statek__Opis_BitBtn.Caption := '';
  Statek__Opis_BitBtn.Hint := 'Opis (utworzonego) statku.';
  Statek__Samolot_ComboBox.Hint := 'Samolot.' + #13 + #10 + 'Je¿eli wybrano lotniskowiec, mo¿na wybraæ samolot.';
  Statek__Utwórz_BitBtn.Caption := '';
  Statek__Utwórz_BitBtn.Hint := 'Utwórz (ponownie) wskazany statek.';
  Statek__Wczytaj_Listê_BitBtn.Caption := '';
  Statek__Wczytaj_Listê_BitBtn.Hint := 'Wczytaj listê statków.';
  Statek__Zwolnij_BitBtn.Caption := '';
  Statek__Zwolnij_BitBtn.Hint := 'Zwolnij swój statek.';
  Statki_Pozycje_Pocz¹tkowe_ComboBox.Hint := '';
  Statki_Pozycje_Pocz¹tkowe_GroupBox.Caption := 'Pozycje pocz¹tkowe statków';
  Statki_Pozycje_Pocz¹tkowe_GroupBox.Hint := '';
  //Statki_Pozycje_Pocz¹tkowe_Label.Caption := ''; // Jest ustawiane na podstawie t³umaczenie_komunikaty_r.komunikat__pozycje_pocz¹tkowe_statków.
  Statki_Pozycje_Pocz¹tkowe_Label.Hint := '';
  Statki_Pozycje_Pocz¹tkowe_Opis_Memo.Hint := '';
  Statki_Pozycje_Pocz¹tkowe__Brak_BitBtn.Caption := '';
  Statki_Pozycje_Pocz¹tkowe__Brak_BitBtn.Hint := 'Brak pozycji pocz¹tkowej statków.';
  Statki_Pozycje_Pocz¹tkowe__Odœwie¿_Wskazany_BitBtn.Caption := '';
  Statki_Pozycje_Pocz¹tkowe__Odœwie¿_Wskazany_BitBtn.Hint := 'Odœwie¿ wskazan¹ pozycjê pocz¹tkow¹ statków.';
  Statki_Pozycje_Pocz¹tkowe__Wczytaj_Listê_BitBtn.Caption := '';
  Statki_Pozycje_Pocz¹tkowe__Wczytaj_Listê_BitBtn.Hint := 'Wczytaj listê pozycji pocz¹tkowych statków.';
  Statki_Przywracaj_Do_Gry_CheckBox.Caption := 'Statki przywracaj do gry';
  Statki_Przywracaj_Do_Gry_CheckBox.Hint := 'Przywracaj do gry zatopione statki.';
  Statki_Zaprezentuj_Button.Caption := 'Zaprezentuj';
  Statki_Zaprezentuj_Button.Hint := 'Zaprezentuj statki.';
  Statki_Zaprezentuj_CheckListBox.Hint :=
    'Statki do zaprezentowania.' + #13 + #10 +
    'Ctrl + A - zaznacz wszystko' + #13 + #10 +
    'Ctrl + N - odznacz wszystko' + #13 + #10 +
    'Ctrl + O - odwróæ zaznaczenie';
  Statki_Zaprezentuj_GroupBox.Caption := 'Zaprezentuj statki';
  Statki_Zaprezentuj_GroupBox.Hint := '';
  Statki_Zaprezentuj__Kolumna_CheckBox.Caption := 'Prezentuj w kolumnie';
  Statki_Zaprezentuj__Kolumna_CheckBox.Hint := 'Ustawiaj prezentowane statki w kolumnie.';
  Statki_Zaprezentuj__Odstêpy_Miêdzy_Statkami_Etykieta_Label.Caption := 'Odstêpy miêdzy statkami';
  Statki_Zaprezentuj__Odstêpy_Miêdzy_Statkami_Etykieta_Label.Hint := 'Odstêpy miêdzy prezentowanymi statkami.';
  Statki_Zaprezentuj__Odstêpy_Miêdzy_Statkami_SpinEdit.Hint := 'Odstêpy miêdzy prezentowanymi statkami.';
  Statki_Zaprezentuj__Pozycja_Pocz¹tkowa_Etykieta_Label.Caption := 'Pozycja pocz¹tkowa';
  Statki_Zaprezentuj__Pozycja_Pocz¹tkowa_Etykieta_Label.Hint := 'Pozycja pierwszego prezentowanego statku.';
  Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__X_Etykieta_Label.Caption := 'x';
  Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__X_Etykieta_Label.Hint := 'Wspó³rzêdna X pozycji pierwszego prezentowanego statku.';
  Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__X_SpinEdit.Hint := 'Wspó³rzêdna X pozycji pierwszego prezentowanego statku.';
  Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__Y_Etykieta_Label.Caption := 'y';
  Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__Y_Etykieta_Label.Hint := 'Wspó³rzêdna Y pozycji pierwszego prezentowanego statku.';
  Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__Y_SpinEdit.Hint := 'Wspó³rzêdna Y pozycji pierwszego prezentowanego statku.';
  Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__Z_Etykieta_Label.Caption := 'z';
  Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__Z_Etykieta_Label.Hint := 'Wspó³rzêdna Z pozycji pierwszego prezentowanego statku.';
  Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__Z_SpinEdit.Hint := 'Wspó³rzêdna Z pozycji pierwszego prezentowanego statku.';
  Statki_Zaprezentuj__Zwolnij_BitBtn.Caption := '';
  Statki_Zaprezentuj__Zwolnij_BitBtn.Hint := 'Zakoñcz prezentowanie statków.';
  Statystyki_Panel.Caption := '';
  Statystyki_Panel.Hint := '';
  Statystyki_Pomoc_Label.Caption := '(?)';
  Statystyki_Pomoc_Label.Hint :=
    'L. p.' + #13 + #10 +
    'Identyfikator' + #13 + #10 +
    'Grupa' + #13 + #10 +
    'Nazwa' + #13 + #10 +
    'Statek' + #13 + #10 +
    'Samolot' + #13 + #10 +
    'Amunicja wystrzelona iloœæ' + #13 + #10 +
    'Amunicja wystrzelona obra¿enia zadawane' + #13 + #10 +
    'Obra¿enia otrzymane' + #13 + #10 +
    'Obra¿enia otrzymane w tym od sojuszników' + #13 + #10 +
    'Obra¿enia otrzymane w tym z kolizji' + #13 + #10 +
    'Obra¿enia zadane amunicja' + #13 + #10 +
    'Obra¿enia zadane amunicja w tym sojusznikom' + #13 + #10 +
    'Obra¿enia zadane taranowanie' + #13 + #10 +
    'Obra¿enia zadane taranowanie w tym sojusznikom' + #13 + #10 +
    'Taranowania iloœæ' + #13 + #10 +
    'Taranowania iloœæ sojuszników' + #13 + #10 +
    'Trafienia' + #13 + #10 +
    'Zatoniêcia' + #13 + #10 +
    'Zatopienia' + #13 + #10 +
    'Zatopienia w tym sojuszników' + #13 + #10 +
    'Celnoœæ %' + #13 + #10 +
    'Czas do zatoniêcia najkrótszy [mmm:ss]' + #13 + #10 +
    'Czas do zatoniêcia najd³u¿szy [mmm:ss]' + #13 + #10 +
    'Czas do zatoniêcia suma [mmm:ss]' + #13 + #10 +
    'Czas do zatoniêcia œredni [mmm:ss]' + #13 + #10 +
    'Zak³ócenia udane' + #13 + #10 +
    'Zak³ócenia nieudane' + #13 + #10 +
    'Zak³ócenia odbite cudze (iloœæ udanych odbiæ wrogich prób zak³ócenia)' + #13 + #10 +
    'Zak³ócenia odbite w³asne (iloœæ w³asnych prób zak³ócenia, które zosta³y odbite)' + #13 + #10 +
    'Obra¿enia otrzymane z zak³óceñ' + #13 + #10 +
    'Odnawianie zasobów iloœæ razy';
  Statystyki_StringGrid.Hint := '';
  Statystyki_W_Logu_Wypisz_CheckBox.Caption := 'W logu';
  Statystyki_W_Logu_Wypisz_CheckBox.Hint := 'Wypisz statystyki w logu.';
  Statystyki_Wiersz_Numer_Label.Hint := '';
  Statystyki_Wypisz_Button.Caption := 'Statystyki';
  Statystyki_Wypisz_Button.Hint := 'Wypisz statystyki (je¿eli dostêpne).';
  Statystyki__Rozmiar_Zak³adki_Poszerz_CheckBox.Caption := 'Rozmiar zak³adki poszerz';
  Statystyki__Rozmiar_Zak³adki_Poszerz_CheckBox.Hint := 'Podczas prze³¹czania zak³adki na statystyki zwiêkszaj szerokoœæ panelu zak³adek konfiguracji.';
  Œwiat³a_CheckBox.Caption := 'Œwiat³a';
  Œwiat³a_CheckBox.Hint := '';
  Œwiat³a_Dodatkowe_CheckBox.Caption := 'Œwiat³a dodatkowe';
  Œwiat³a_Dodatkowe_CheckBox.Hint := '';
  Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBox.Caption := 'Œwiat³a miganie';
  Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBox.Hint := 'Aktywnoœæ funkcjonalnoœci migaj¹cych œwiate³.';
  T³umaczenia_ComboBox.Hint := 'Enter - zastosuj.';
  T³umaczenie_Etykieta_Label.Caption := 'T³umaczenie';
  T³umaczenie_Etykieta_Label.Hint := '';
  T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Caption := 'T³umacz polecenia dla SI';
  T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Hint := 'Polecenia dla SI podpowiadane w pokoju rozmów bêd¹ wyœwietlane w postaci przet³umaczonej, a wysy³ane w postaci standardowej.';
  Trafienia_W_Logu_Wpisuj_CheckBox.Caption := 'Trafienia loguj';
  Trafienia_W_Logu_Wpisuj_CheckBox.Hint := 'Wypisuj w logu zadane i otrzymane trafienia.';
  Ustawienia_Panel.Caption := '';
  Ustawienia_Panel.Hint := '';
  Ustawienia_ScrollBox.Hint := '';
  Ustawienia_Wczytaj_Button.Caption := 'Wczytaj';
  Ustawienia_Wczytaj_Button.Hint := 'Wczytaj ustawienia.';
  Ustawienia_Zapisz_Button.Caption := 'Zapisz';
  Ustawienia_Zapisz_Button.Hint := 'Zapisz ustawienia.';
  Wiatr_CheckBox.Caption := 'Wiatr';
  Wiatr_CheckBox.Hint := 'Efekt wiatru aktywny.';
  Wiatr__Kierunek_Wyœwietlaj_Na__Ekranie_CheckBox.Caption := 'Wiatr kierunek na ekranie';
  Wiatr__Kierunek_Wyœwietlaj_Na__Ekranie_CheckBox.Hint := 'Wyœwietlaj informacjê o kierunku wiatru na ekranie.';
  Wiatr__Kierunek_Wyœwietlaj_Na__Radarze_CheckBox.Caption := 'Wiatr kierunek na radarze';
  Wiatr__Kierunek_Wyœwietlaj_Na__Radarze_CheckBox.Hint := 'Wyœwietlaj informacjê o kierunku wiatru na radarze.';
  Wiatr__Si³a_SpinEdit.Hint := 'Zakres zmian intensywnoœci wiatru dla trybu automatycznego lub wartoœæ zadana.';
  Wiatr__Wp³yw_Na_Rozgrywkê_CheckBox.Caption := 'Wiatr wp³yw na rozgrywkê';
  Wiatr__Wp³yw_Na_Rozgrywkê_CheckBox.Hint := 'Wiatr jest w stanie przemieszczaæ statki, pociski.';
  Wiatr__Zmiana_Tryb_RadioGroup.Caption := 'Tryb zmiany wiatru';
  Wiatr__Zmiana_Tryb_RadioGroup.Hint :=
    'Ustalaj si³ê wiatru:' + #13 + #10 +
    'automatycznie do zadanej wartoœci;' + #13 + #10 +
    'wed³ug falowania morza;' + #13 + #10 +
    'wartoœæ zadana.';

    zti := Wiatr__Zmiana_Tryb_RadioGroup.ItemIndex;
    Wiatr__Zmiana_Tryb_RadioGroup.Items.Clear();
    Wiatr__Zmiana_Tryb_RadioGroup.Items.Add( 'auto.' );
    Wiatr__Zmiana_Tryb_RadioGroup.Items.Add( 'wg. morza' );
    Wiatr__Zmiana_Tryb_RadioGroup.Items.Add( 'w. zadana' );

    if    ( zti >= 0 )
      and ( zti <= Wiatr__Zmiana_Tryb_RadioGroup.Items.Count ) then
      Wiatr__Zmiana_Tryb_RadioGroup.ItemIndex := zti;

  Wieloosobowe_Gra_GroupBox.Caption := 'Wieloosobowe gra';
  Wieloosobowe_Gra_GroupBox.Hint := '';
  Wieloosobowe_GroupBox.Caption := 'Wieloosobowe';
  Wieloosobowe_GroupBox.Hint := '';
  Wieloosobowe_Identyfikator_Etykieta_Label.Caption := 'Identyfikator gracza';
  Wieloosobowe_Identyfikator_Etykieta_Label.Hint := '';
  Wieloosobowe_Identyfikator_Gra_Etykieta_Label.Caption := 'Identyfikator gracza';
  Wieloosobowe_Identyfikator_Gra_Etykieta_Label.Hint := '';
  Wieloosobowe_ScrollBox.Hint := '';
  Wieloosobowe__Od³¹cz_BitBtn.Caption := 'Od³¹cz';
  Wieloosobowe__Od³¹cz_BitBtn.Hint := 'Dezaktywuj grê lokaln¹ / zatrzymaj serwer / (klient) od³¹cz od serwera.';
  Wieloosobowe__Pod³¹cz_BitBtn.Caption := 'Pod³¹cz';
  Wieloosobowe__Pod³¹cz_BitBtn.Hint := 'Inicjuj grê lokaln¹ / uruchom serwer / (klient) pod³¹cz do serwera.';
  Wieloosobowe__Tryb_RadioGroup.Caption := 'Tryb';
  Wieloosobowe__Tryb_RadioGroup.Hint := '';

    zti := Wieloosobowe__Tryb_RadioGroup.ItemIndex;
    Wieloosobowe__Tryb_RadioGroup.Items.Clear();
    Wieloosobowe__Tryb_RadioGroup.Items.Add( 'Gra lokalna' );
    Wieloosobowe__Tryb_RadioGroup.Items.Add( 'Klient' );
    Wieloosobowe__Tryb_RadioGroup.Items.Add( 'Server' );

    if    ( zti >= 0 )
      and ( zti <= Wieloosobowe__Tryb_RadioGroup.Items.Count ) then
      Wieloosobowe__Tryb_RadioGroup.ItemIndex := zti;

  Zak³ócanie__Dozwolone_CheckBox.Caption := 'Zak³ócanie';
  Zak³ócanie__Dozwolone_CheckBox.Hint := 'Zezwalaj na zak³ócanie wrogich statków komunikatami z pokoju rozmów.' + #13 + #10 + 'Dotyczy tylko statków SI i statków graczy, którymi aktualnie p³ywa SI.';
  Zak³ócanie__Graczy_Nie_SI_Dozwolone_CheckBox.Caption := 'Zak³ócanie graczy';
  Zak³ócanie__Graczy_Nie_SI_Dozwolone_CheckBox.Hint := 'Zezwalaj równie¿ na zak³ócanie wrogich statków graczy (komunikatami z pokoju rozmów).';
  Zanurzenie_Zadane_Przekraczaj_100_Procent_CheckBox.Caption := 'Zanurzenie zadane przekraczaj 100%';
  Zanurzenie_Zadane_Przekraczaj_100_Procent_CheckBox.Hint := 'Zezwalaj na ustawienie zadanego zanurzenia statku na wiêcej ni¿ 100% (mo¿e spowodowaæ uszkodzenia statku).';
  Zmieniaj_Automatycznie_Etykieta_Label.Caption := 'Od | do | si³a | szybkoœæ | losowoœæ | kierunek';
  Zmieniaj_Automatycznie_Etykieta_Label.Hint := 'Zakres zmian od; zakres zmian do; si³a zmian; szybkoœæ zmian w milisekundach; procentowy wp³yw si³y na losowoœæ zmiany; aktualny kierunek zmiany (malej¹cy, rosn¹cy).';
  Zmieniaj_Automatycznie_GroupBox.Caption := 'Zmieniaj automatycznie';
  Zmieniaj_Automatycznie_GroupBox.Hint := '';
  Zmieniaj_Automatycznie__Mg³a_CheckBox.Caption := 'Mg³a';
  Zmieniaj_Automatycznie__Mg³a_CheckBox.Hint := 'Zmieniaj automatycznie intensywnoœæ mg³y.';
  Zmieniaj_Automatycznie__Mg³a__Do_SpinEdit.Hint := 'Zakres zmian intensywnoœci mg³y do.';
  Zmieniaj_Automatycznie__Mg³a__Kierunek_Rosn¹co_CheckBox.Caption := 'Rosn¹co';
  Zmieniaj_Automatycznie__Mg³a__Kierunek_Rosn¹co_CheckBox.Hint := 'Aktualny kierunek zmiany intensywnoœci mg³y.';
  Zmieniaj_Automatycznie__Mg³a__Losowoœæ_SpinEdit.Hint := 'Procentowy wp³yw si³y zmiany na losowoœæ zmiany intensywnoœci mg³y.';
  Zmieniaj_Automatycznie__Mg³a__Od_SpinEdit.Hint := 'Zakres zmian intensywnoœci mg³y od.';
  Zmieniaj_Automatycznie__Mg³a__Si³a_SpinEdit.Hint := 'Si³a zmian intensywnoœci mg³y.';
  Zmieniaj_Automatycznie__Mg³a__Szybkoœæ_SpinEdit.Hint := 'Szybkoœæ zmian intensywnoœci mg³y w milisekundach.';
  Zmieniaj_Automatycznie__Morze_Wzburzenie_CheckBox.Caption := 'Morze';
  Zmieniaj_Automatycznie__Morze_Wzburzenie_CheckBox.Hint := 'Zmieniaj automatycznie intensywnoœæ wzburzenia morza.';
  Zmieniaj_Automatycznie__Morze_Wzburzenie__Do_SpinEdit.Hint := 'Zakres zmian intensywnoœci wzburzenia morza do.';
  Zmieniaj_Automatycznie__Morze_Wzburzenie__Kierunek_Rosn¹co_CheckBox.Caption := 'Rosn¹co';
  Zmieniaj_Automatycznie__Morze_Wzburzenie__Kierunek_Rosn¹co_CheckBox.Hint := 'Aktualny kierunek zmiany intensywnoœci wzburzenia morza.';
  Zmieniaj_Automatycznie__Morze_Wzburzenie__Losowoœæ_SpinEdit.Hint := 'Procentowy wp³yw si³y zmiany na losowoœæ zmiany intensywnoœci wzburzenia morza.';
  Zmieniaj_Automatycznie__Morze_Wzburzenie__Od_SpinEdit.Hint := 'Zakres zmian intensywnoœci wzburzenia morza od.';
  Zmieniaj_Automatycznie__Morze_Wzburzenie__Si³a_SpinEdit.Hint := 'Si³a zmian intensywnoœci wzburzenia morza.';
  Zmieniaj_Automatycznie__Morze_Wzburzenie__Szybkoœæ_SpinEdit.Hint := 'Szybkoœæ zmian intensywnoœci wzburzenia morza w milisekundach.';
  Zmieniaj_Automatycznie__Noc_CheckBox.Caption := 'Noc';
  Zmieniaj_Automatycznie__Noc_CheckBox.Hint := 'Zmieniaj automatycznie intensywnoœæ nocy.';
  Zmieniaj_Automatycznie__Noc__Do_SpinEdit.Hint := 'Zakres zmian intensywnoœci nocy do.';
  Zmieniaj_Automatycznie__Noc__Kierunek_Rosn¹co_CheckBox.Caption := 'Rosn¹co';
  Zmieniaj_Automatycznie__Noc__Kierunek_Rosn¹co_CheckBox.Hint := 'Aktualny kierunek zmiany intensywnoœci nocy.';
  Zmieniaj_Automatycznie__Noc__Losowoœæ_SpinEdit.Hint := 'Procentowy wp³yw si³y zmiany na losowoœæ zmiany intensywnoœci nocy.';
  Zmieniaj_Automatycznie__Noc__Od_SpinEdit.Hint := 'Zakres zmian intensywnoœci nocy od.';
  Zmieniaj_Automatycznie__Noc__Si³a_SpinEdit.Hint := 'Si³a zmian intensywnoœci nocy.';
  Zmieniaj_Automatycznie__Noc__Szybkoœæ_SpinEdit.Hint := 'Szybkoœæ zmian intensywnoœci nocy w milisekundach.';
  {$endregion 'Komponenty wizualne.'}


  T³umaczenie__Lista_Wczytaj(); // Aby zaktualizowaæ treœæ t³umaczenie_komunikaty_r.komunikat__domyœlne.

  T³umaczenie__Pozosta³e_Elementy_Odœwie¿();

end;//---//Funkcja T³umaczenie__Domyœlne().

//Funkcja T³umaczenie__Lista_Wczytaj().
procedure TStatki_Form.T³umaczenie__Lista_Wczytaj();
var
  i : integer;
  zts,
  t³umaczenie_nazwa_kopia_l
    : string;
  search_rec : TSearchRec;
begin

  t³umaczenie_nazwa_kopia_l := T³umaczenia_ComboBox.Text;
  T³umaczenia_ComboBox.Items.Clear();
  T³umaczenia_ComboBox.Items.Add( '<' + t³umaczenie_komunikaty_r.komunikat__domyœlne + '>' );
  T³umaczenia_ComboBox.ItemIndex := 0;

  // Je¿eli znajdzie plik zwraca 0, je¿eli nie znajdzie zwraca numer b³êdu. Na pocz¹tku znajduje '.' '..' potem listê plików.
  if FindFirst(  ExtractFilePath( Application.ExeName ) + 'T³umaczenia\*.txt', faAnyFile, search_rec  ) = 0 then // Application potrzebuje w uses Forms.
    begin

      repeat

        // Dodaje nazwy plików bez rozszerzenia.

        zts := search_rec.Name;
        zts := System.StrUtils.ReverseString( zts );
        Delete(  zts, 1, Pos( '.', zts )  );
        zts := System.StrUtils.ReverseString( zts );

        T³umaczenia_ComboBox.Items.Add( zts );

      until FindNext( search_rec ) <> 0

    end;
  //---//if FindFirst(  ExtractFilePath( Application.ExeName ) + 'T³umaczenia\*.txt', faAnyFile, search_rec  ) = 0 then

  FindClose( search_rec );

  if Trim( t³umaczenie_nazwa_kopia_l ) <> '' then
    for i := T³umaczenia_ComboBox.Items.Count - 1 downto 0 do
      if   ( T³umaczenia_ComboBox.Items[ i ] = t³umaczenie_nazwa_kopia_l )
        or (
                 (  Pos( '<', t³umaczenie_nazwa_kopia_l ) > 0  )
             and (  Pos( '<', T³umaczenia_ComboBox.Items[ i ] ) > 0  )
           ) then
        begin

          T³umaczenia_ComboBox.ItemIndex := i;
          Break;

        end;
      //---//if T³umaczenia_ComboBox.Items[ i ] = zts then

end;//---//Funkcja T³umaczenie__Lista_Wczytaj().

//Funkcja T³umaczenie__Pozosta³e_Elementy_Odœwie¿().
procedure TStatki_Form.T³umaczenie__Pozosta³e_Elementy_Odœwie¿();
var
  zti : integer;
  zts : string;
begin

  // Aby wpisaæ t³umaczenia nag³ówków tabelek.
  Gracze_Lista_StringGrid.Cells[ 0, 0 ] := '';
  Statystyki_StringGrid.Cells[ 0, 0 ] := '';


  Wczytaj_Schemat_Xml( katalog__schematy_lista__l¹dy_c, -1, l¹dy_lista_t );
  Wczytaj_Schemat_Xml( katalog__schematy_lista__si_schematy_c, -1, si_schematy_lista_t );
  Wczytaj_Schemat_Xml( katalog__schematy_lista__statki_c, -1, statki_lista_t );
  Wczytaj_Schemat_Xml( katalog__schematy_lista__statki_pozycje_pocz¹tkowe_c, -1, statki_pozycje_pocz¹tkowe_lista_t );


  Gracze_Lista_Odœwie¿();
  Gra_Statystyki_Wypisz( Statystyki_W_Logu_Wypisz_CheckBox.Checked );

  Interfejs_Parametry_Wed³ug_Statku_Ustaw();

  L¹d_ComboBoxChange( nil );
  Statki_Pozycje_Pocz¹tkowe_ComboBoxChange( nil );

  Pokój_Rozmów__Na_Ekranie_CheckBoxClick( nil );
    Gra_GLSceneViewerExit( nil ); // Nie wyrywa prawid³owo utraty skupienia po powy¿szej operacji.

  for zti := 0 to Klawiatura_Konfiguracja_ScrollBox.ControlCount - 1 do // Tylko wizualne.
    begin

      TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ zti ]).t³umaczenie_komunikaty_r_wsk := @t³umaczenie_komunikaty_r;
      TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ zti ]).T³umaczenie_Ustaw();
      TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ zti ]).Nazwa_Klawisza();
      TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ zti ]).Polecenie_Nazwa_Label.Caption;

    end;
  //---//for zti := 0 to Klawiatura_Konfiguracja_ScrollBox.ControlCount - 1 do


  {$region 'Pokój_Rozmów__Wiadomoœæ_Edit.Hint'}
  Pokój_Rozmów__Wiadomoœæ_Edit.Hint :=
    StringReplace
      (
        Pokój_Rozmów__Wiadomoœæ_Edit.Hint,
        'pokój_rozmów__si_polecenie__si_aktywnoœæ_podaj_c',
        pokój_rozmów__si_polecenie__si_aktywnoœæ_podaj_c,
        [ rfReplaceAll ]
      );

  Pokój_Rozmów__Wiadomoœæ_Edit.Hint :=
    StringReplace
      (
        Pokój_Rozmów__Wiadomoœæ_Edit.Hint,
        'pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Mnie_c',
        pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Mnie_c,
        [ rfReplaceAll ]
      );


  if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
    and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____samolot ) <> ''  ) then
    zts := si_pokój_rozmów__polecenie_symbol__t³umaczenie__prefiks_c + t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____samolot + si_pokój_rozmów__polecenie_symbol__t³umaczenie__sufiks_c
  else
    zts := si_pokój_rozmów__polecenie_symbol__samolot_c;

  Pokój_Rozmów__Wiadomoœæ_Edit.Hint :=
    StringReplace
      (
        Pokój_Rozmów__Wiadomoœæ_Edit.Hint,
        'si_pokój_rozmów__polecenie_symbol__samolot_c',
        zts,
        [ rfReplaceAll ]
      );


  if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
    and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____samolot_nadawca ) <> ''  ) then
    zts := si_pokój_rozmów__polecenie_symbol__t³umaczenie__prefiks_c + t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____samolot_nadawca + si_pokój_rozmów__polecenie_symbol__t³umaczenie__sufiks_c
  else
    zts := si_pokój_rozmów__polecenie_symbol__samolot_nadawca_c;

  Pokój_Rozmów__Wiadomoœæ_Edit.Hint :=
    StringReplace
      (
        Pokój_Rozmów__Wiadomoœæ_Edit.Hint,
        'si_pokój_rozmów__polecenie_symbol__samolot_nadawca_c',
        zts,
        [ rfReplaceAll ]
      );


  Pokój_Rozmów__Wiadomoœæ_Edit.Hint :=
    StringReplace
      (
        Pokój_Rozmów__Wiadomoœæ_Edit.Hint,
        'si_pokój_rozmów__polecenie_symbol__separator_identyfikatora_c',
        si_pokój_rozmów__polecenie_symbol__separator_identyfikatora_c,
        [ rfReplaceAll ]
      );


  if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
    and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____statek ) <> ''  ) then
    zts := si_pokój_rozmów__polecenie_symbol__t³umaczenie__prefiks_c + t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____statek + si_pokój_rozmów__polecenie_symbol__t³umaczenie__sufiks_c
  else
    zts := si_pokój_rozmów__polecenie_symbol__statek_c;

  Pokój_Rozmów__Wiadomoœæ_Edit.Hint :=
    StringReplace
      (
        Pokój_Rozmów__Wiadomoœæ_Edit.Hint,
        'si_pokój_rozmów__polecenie_symbol__statek_c',
        zts,
        [ rfReplaceAll ]
      );


  if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
    and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____statek_nadawca ) <> ''  ) then
    zts := si_pokój_rozmów__polecenie_symbol__t³umaczenie__prefiks_c + t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____statek_nadawca + si_pokój_rozmów__polecenie_symbol__t³umaczenie__sufiks_c
  else
    zts := si_pokój_rozmów__polecenie_symbol__statek_nadawca_c;

  Pokój_Rozmów__Wiadomoœæ_Edit.Hint :=
    StringReplace
      (
        Pokój_Rozmów__Wiadomoœæ_Edit.Hint,
        'si_pokój_rozmów__polecenie_symbol__statek_nadawca_c',
        zts,
        [ rfReplaceAll ]
      );


  Pokój_Rozmów__Wiadomoœæ_Edit.Hint :=
    StringReplace
      (
        Pokój_Rozmów__Wiadomoœæ_Edit.Hint,
        'si_pokój_rozmów__polecenie_symbol_c',
        si_pokój_rozmów__polecenie_symbol_c,
        [ rfReplaceAll ]
      );

  Pokój_Rozmów__Wiadomoœæ_Edit.Hint :=
    StringReplace
      (
        Pokój_Rozmów__Wiadomoœæ_Edit.Hint,
        'zak³ócanie__czas_do_ponownej_próby_sekundy_g',
        Trim(  FormatFloat( '### ### ##0', zak³ócanie__czas_do_ponownej_próby_sekundy_g )  ),
        [ rfReplaceAll ]
      );
  {$endregion 'Pokój_Rozmów__Wiadomoœæ_Edit.Hint'}


  {$region 'Pokój rozmów polecenia dla SI.'}
  zti := 0;
  SetLength( pokój_rozmów__si_polecenia_t, zti );

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____si_aktywnoœæ_podaj ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____si_aktywnoœæ_podaj
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__si_aktywnoœæ_podaj_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Brak ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Brak
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_Brak_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____jak_tam ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____jak_tam
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__jak_tam_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Samolot__L¹dowanie ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Samolot__L¹dowanie
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_Samolot__L¹dowanie_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Patrol ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Patrol
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_Patrol_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Mnie ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Mnie
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Mnie_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Mnie ) <> ''  )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Postój ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Mnie + ' ' + t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Postój
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Mnie_c + ' ' + pokój_rozmów__si_polecenie__sia_Postój_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Punktu ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Punktu + ' ( x = ; z = ; y =  )'
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Punktu_c + ' ( x = ; z = ; y =  )';

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Punktu ) <> ''  )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Postój ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Punktu + ' ( x = ; z = ; y =  ) ' + t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Postój
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Punktu_c + ' ( x = ; z = ; y =  ) ' + pokój_rozmów__si_polecenie__sia_Postój_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Postój ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Postój
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_Postój_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____l¹dowanie__zezwolenie_proœba__kurs_aktualny ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____l¹dowanie__zezwolenie_proœba__kurs_aktualny
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__l¹dowanie__zezwolenie_proœba__kurs_aktualny_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____l¹dowanie__zezwolenie_proœba__kurs_standardowy ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____l¹dowanie__zezwolenie_proœba__kurs_standardowy
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__l¹dowanie__zezwolenie_proœba__kurs_standardowy_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____l¹dowanie__przerwij ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____l¹dowanie__przerwij
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__l¹dowanie__przerwij_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____l¹dowanie__rezygnacja ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____l¹dowanie__rezygnacja
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__l¹dowanie__rezygnacja_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Samolot__Startowanie ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Samolot__Startowanie
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_Samolot__Startowanie_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Walka ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Walka
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sia_Walka_c;



  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Brak ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Brak
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sist_Brak_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Celuj_Tylko ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Celuj_Tylko
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sist_Celuj_Tylko_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Nie_Celuj_Nie_Strzelaj ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Nie_Celuj_Nie_Strzelaj
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sist_Nie_Celuj_Nie_Strzelaj_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Odpowiedz_Ogniem ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Odpowiedz_Ogniem
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sist_Odpowiedz_Ogniem_c;

  inc( zti );
  SetLength( pokój_rozmów__si_polecenia_t, zti );
    if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
      and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Strzelaj_Jak_Chcesz ) <> ''  ) then
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Strzelaj_Jak_Chcesz
    else
      pokój_rozmów__si_polecenia_t[ zti - 1 ] := pokój_rozmów__si_polecenie__sist_Strzelaj_Jak_Chcesz_c;
  {$endregion 'Pokój rozmów polecenia dla SI.'}

end;//---//Funkcja T³umaczenie__Pozosta³e_Elementy_Odœwie¿().

//Funkcja T³umaczenie__Wczytaj().
procedure TStatki_Form.T³umaczenie__Wczytaj();
const
  t³umaczenie_komunikaty_r_c_l : string = 't³umaczenie_komunikaty_r.';
  t³umaczenie__wyró¿nik__elementy_c_l : string = '-->Elementy';
  t³umaczenie__wyró¿nik__podpowiedŸ_c_l : string = '-->PodpowiedŸ';

var
  czy_elementy, // Czy t³umaczenie dotyczy elementów komponentu (np. pozycje listy rozwijanej).
  czy_podpowiedŸ // Czy t³umaczenie dotyczy podpowiedzi komponentu.
    : boolean;

  i,
  zti_1,
  zti_2
    : integer;

  zts_1,
  zts_2,
  nazwa
    : string;

  rtti_field : TRttiField;
  rtti_type : TRttiType;

  tekst_l : TStringList;
  zt_component : TComponent;
begin

  if    ( T³umaczenia_ComboBox.ItemIndex >= 0 )
    and ( T³umaczenia_ComboBox.ItemIndex <= T³umaczenia_ComboBox.Items.Count - 1 ) then
    zts_1 := T³umaczenia_ComboBox.Items[ T³umaczenia_ComboBox.ItemIndex ]
  else//if    ( T³umaczenia_ComboBox.ItemIndex >= 0 ) (...)
    zts_1 := '';

  zts_1 := ExtractFilePath( Application.ExeName ) + 'T³umaczenia\' + zts_1 + '.txt';

  if not FileExists( zts_1 ) then
    begin

      T³umaczenie__Domyœlne();

      if Pos( '<', zts_1 ) <= 0 then // Nie wyœwietla komunikatu gdy wybrane jest t³umaczenie '<domyœlne>'.
        Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_odnaleziono_pliku_t³umaczenia + #13 + #13 + zts_1 + #13 + '.', t³umaczenie_komunikaty_r.komunikat__b³¹d, MB_ICONEXCLAMATION + MB_OK );

      Exit;

    end;
  //---//if not FileExists( zts_1 ) then

  Screen.Cursor := crHourGlass;

  tekst_l := TStringList.Create();
  tekst_l.LoadFromFile( zts_1 );

  if tekst_l.Count > 0 then //???
    rtti_type := TRTTIContext.Create.GetType(  System.TypeInfo( TT³umaczenie_Komunikaty_r )  );


  for i := 0 to tekst_l.Count - 1 do
    begin

      zts_1 := tekst_l[ i ];

      if Trim( zts_1 ) <> '' then
        begin

          zti_1 := Pos( '=', zts_1 );

          // Te komponenty nie podlegaj¹ t³umaczeniu.
          if   (
                     (  Pos( t³umaczenie__wyró¿nik__elementy_c_l + '=', zts_1 ) > 0  )
                 and (
                          (  Pos( Statek_ComboBox.Name, zts_1 ) > 0  )
                       or (  Pos( Statek__Samolot_ComboBox.Name, zts_1 ) > 0  )
                       or (  Pos( SI__Statek_ComboBox.Name, zts_1 ) > 0  )
                       or (  Pos( SI__Statek__Samolot_ComboBox.Name, zts_1 ) > 0  )
                       or (  Pos( SI__Schemat_ComboBox.Name, zts_1 ) > 0  )

                       or (  Pos( L¹d_ComboBox.Name, zts_1 ) > 0  )
                       or (  Pos( Statki_Pozycje_Pocz¹tkowe_ComboBox.Name, zts_1 ) > 0  )

                       or (  Pos( Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Name, zts_1 ) > 0  )

                       or (  Pos( T³umaczenia_ComboBox.Name, zts_1 ) > 0  )
                       or (  Pos( Statki_Zaprezentuj_CheckListBox.Name, zts_1 ) > 0  )
                    )
               )
            or (
                     (  Pos( t³umaczenie__wyró¿nik__elementy_c_l + '=', zts_1 ) <= 0  )
                 and (  Pos( t³umaczenie__wyró¿nik__podpowiedŸ_c_l + '=', zts_1 ) <= 0  )
                 and (
                          (  Pos( Amunicja__Zanurzenie_G³êbokoœæ_Zadana__Skok_O_Edit.Name, zts_1 ) > 0  )
                       or (  Pos( Amunicja__Zanurzenie_G³êbokoœæ_Zadana__Skok_O_Label.Name, zts_1 ) > 0  )
                       or (  Pos( Amunicja__Zanurzenie_G³êbokoœæ_Zadana_Edit.Name, zts_1 ) > 0  )
                       or (  Pos( Amunicja__Zanurzenie_G³êbokoœæ_Zadana_Label.Name, zts_1 ) > 0  )
                       or (  Pos( Celownik_Ekranowy__Gruboœæ_Edit.Name, zts_1 ) > 0  )
                       or (  Pos( Celownik_Ekranowy__Kolor__A_Edit.Name, zts_1 ) > 0  )
                       or (  Pos( Celownik_Ekranowy__Kolor__B_Edit.Name, zts_1 ) > 0  )
                       or (  Pos( Celownik_Ekranowy__Kolor__G_Edit.Name, zts_1 ) > 0  )
                       or (  Pos( Celownik_Ekranowy__Kolor__R_Edit.Name, zts_1 ) > 0  )
                       or (  Pos( Celownik_Ekranowy__Szerokoœæ_Edit.Name, zts_1 ) > 0  )
                       or (  Pos( Celownik_Ekranowy__Wielkoœæ_Label.Name, zts_1 ) > 0  )
                       or (  Pos( Celownik_Ekranowy__Wysokoœæ_Edit.Name, zts_1 ) > 0  )
                       or (  Pos( DŸwiêk__G³oœnoœæ_Label.Name, zts_1 ) > 0  )
                       or (  Pos( Gra_Wspó³czynnik_Prêdkoœci_Label.Name, zts_1 ) > 0  )
                       or (  Pos( Gra_Wspó³czynnik_Trudnoœci_Label.Name, zts_1 ) > 0  )
                       or (  Pos( Gracz_Nazwa_Edit.Name, zts_1 ) > 0  )
                       or (  Pos( Has³o_Edit.Name, zts_1 ) > 0  )
                       or (  Pos( Kamera_Szybkoœæ_Ruchu_Edit.Name, zts_1 ) > 0  )
                       or (  Pos( Kamera_Szybkoœæ_Ruchu_Label.Name, zts_1 ) > 0  )
                       or (  Pos( Klawiatura_Konfiguracja__Szukaj_Edit.Name, zts_1 ) > 0  )
                       or (  Pos( L¹d_ComboBox.Name, zts_1 ) > 0  )
                       or (  Pos( Mapa_Label.Name, zts_1 ) > 0  )
                       or (  Pos( Mysz_Czu³oœæ_Edit.Name, zts_1 ) > 0  )
                       or (  Pos( Mysz_Czu³oœæ_Label.Name, zts_1 ) > 0  )
                       or (  Pos( Mysz_Czu³oœæ_Luneta_Edit.Name, zts_1 ) > 0  )
                       or (  Pos( Mysz_Czu³oœæ_Luneta_Label.Name, zts_1 ) > 0  )
                       or (  Pos( Noc_Label.Name, zts_1 ) > 0  )
                       or (  Pos( Pokój_Rozmów__Ignoruj_CheckListBox.Name, zts_1 ) > 0  )
                       or (  Pos( Pokój_Rozmów__Wiadomoœæ_Edit.Name, zts_1 ) > 0  )
                       or (  Pos( Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Name, zts_1 ) > 0  )
                       or (  Pos( Serwer_Adres_IP_Edit.Name, zts_1 ) > 0  )
                       or (  Pos( SI__Nazwa_Edit.Name, zts_1 ) > 0  )
                       or (  Pos( SI__Schemat_ComboBox.Name, zts_1 ) > 0  )
                       or (  Pos( SI__Statek__Samolot_ComboBox.Name, zts_1 ) > 0  )
                       or (  Pos( SI__Statek_ComboBox.Name, zts_1 ) > 0  )
                       or (  Pos( Statek__Samolot_ComboBox.Name, zts_1 ) > 0  )
                       or (  Pos( Statek_ComboBox.Name, zts_1 ) > 0  )
                       or (  Pos( Statki_Pozycje_Pocz¹tkowe_ComboBox.Name, zts_1 ) > 0  )
                       or (  Pos( Statki_Pozycje_Pocz¹tkowe_Label.Name, zts_1 ) > 0  )
                       or (  Pos( Statki_Zaprezentuj_CheckListBox.Name, zts_1 ) > 0  )
                       or (  Pos( Statystyki_Wiersz_Numer_Label.Name, zts_1 ) > 0  )
                       or (  Pos( T³umaczenia_ComboBox.Name, zts_1 ) > 0  )
                       or (  Pos( Wieloosobowe_Identyfikator_Edit.Name, zts_1 ) > 0  )
                       or (  Pos( Wieloosobowe_Identyfikator_Gra_Label.Name, zts_1 ) > 0  )
                    )
               )

            or (  Pos( Logo_Image.Name, zts_1 ) > 0  )
            or (  Pos( O_Programie_Label.Name, zts_1 ) > 0  )
            or (  Pos( Pokój_Rozmów__Ukryj_Button.Name, zts_1 ) > 0  )
            or (  Pos( Radar__Skala_SpinEdit.Name, zts_1 ) > 0  ) then
            zti_1 := -1;

          // Komentarze '**(...)', '    **(...)'.
          zts_2 := Trim( zts_1 );

          if    ( Length( zts_2 ) > 1 )
            and ( zts_2[ 1 ] = '*' )
            and ( zts_2[ 2 ] = '*' ) then
            zti_1 := -1;

          if zti_1 > 1 then
            begin

              if Pos( t³umaczenie_komunikaty_r_c_l, zts_1 ) <= 0 then
                begin

                  {$region 'Komponenty.'}
                  if Pos( t³umaczenie__wyró¿nik__podpowiedŸ_c_l + '=', zts_1 ) > 0 then
                    begin

                      czy_podpowiedŸ := true;
                      zts_1 := StringReplace( zts_1, t³umaczenie__wyró¿nik__podpowiedŸ_c_l, '', [] );
                      zti_1 := Pos( '=', zts_1 );

                    end
                  else//if Pos( t³umaczenie__wyró¿nik__podpowiedŸ_c_l + '=', zts_1 ) > 0 then
                    czy_podpowiedŸ := false;

                  if Pos( t³umaczenie__wyró¿nik__elementy_c_l + '=', zts_1 ) > 0 then
                    begin

                      czy_elementy := true;
                      zts_1 := StringReplace( zts_1, t³umaczenie__wyró¿nik__elementy_c_l, '', [] );
                      zti_1 := Pos( '=', zts_1 );

                    end
                  else//if Pos( t³umaczenie__wyró¿nik__elementy_c_l + '=', zts_1 ) > 0 then
                    czy_elementy := false;


                  nazwa := Copy( zts_1, 1, zti_1 - 1 );
                  Delete( zts_1, 1, zti_1 );

                  zt_component := nil;

                  zt_component := Self.FindComponent( nazwa );


                  //if czy_podpowiedŸ then //???
                  //  begin
                  //
                  //    // Te podpowiedzi pozycji menu nie podlegaj¹ t³umaczeniu.
                  //    if   (  Pos( 'Obrazki_Kostek__Domyœlne_MenuItem', nazwa ) > 0  )
                  //      or (  Pos( 'Obrazki_Kostek__Brak_MenuItem', nazwa ) > 0  ) then
                  //      zt_component := nil;
                  //
                  //  end;
                  ////---//if czy_podpowiedŸ then


                  if zt_component <> nil then
                    begin

                      zts_1 := StringReplace( zts_1, nowa_linia_c, #13 + #10, [ rfReplaceAll ] );

                      if Pos( '_BitBtn', nazwa ) > 0 then
                        begin

                          if not czy_podpowiedŸ then
                            TBitBtn(zt_component).Caption := zts_1
                          else//if not czy_podpowiedŸ then
                            TBitBtn(zt_component).Hint := zts_1;

                        end
                      else
                      if Pos( '_Button', nazwa ) > 0 then
                        begin

                          if not czy_podpowiedŸ then
                            TButton(zt_component).Caption := zts_1
                          else//if not czy_podpowiedŸ then
                            TButton(zt_component).Hint := zts_1;

                        end
                      else
                      if Pos( '_CheckBox', nazwa ) > 0 then
                        begin

                          if not czy_podpowiedŸ then
                            TCheckBox(zt_component).Caption := zts_1
                          else//if not czy_podpowiedŸ then
                            TCheckBox(zt_component).Hint := zts_1;

                        end
                      else
                      if Pos( '_CheckListBox', nazwa ) > 0 then
                        begin

                          if czy_podpowiedŸ then
                            TCheckListBox(zt_component).Hint := zts_1;

                        end
                      else
                      if Pos( '_ComboBox', nazwa ) > 0 then
                        begin

                          if not czy_podpowiedŸ then
                            begin

                              if not czy_elementy then
                                TComboBox(zt_component).Text := zts_1
                              else//if not czy_elementy then
                                begin

                                  zti_2 := TComboBox(zt_component).ItemIndex;

                                  TComboBox(zt_component).Items.Clear();

                                  zti_1 := Pos( ';', zts_1 );

                                  while zti_1 > 0 do
                                    begin

                                      zts_2 := Copy( zts_1, 1, zti_1 - 1 );
                                      Delete( zts_1, 1, zti_1 );

                                      zts_2 := StringReplace( zts_2, #13, '', [ rfReplaceAll ] );

                                      TComboBox(zt_component).Items.Add( zts_2 );

                                      zti_1 := Pos( ';', zts_1 );

                                    end;
                                  //---//while zti_1 > 0 do

                                  if    ( zti_2 >= 0 )
                                    and ( zti_2 <= TComboBox(zt_component).Items.Count - 1 ) then
                                    TComboBox(zt_component).ItemIndex := zti_2;

                                end;
                              //---//if not czy_elementy then

                            end
                          else//if not czy_podpowiedŸ then
                            TComboBox(zt_component).Hint := zts_1;

                        end
                      else
                      if Pos( '_Edit', nazwa ) > 0 then
                        begin

                          if czy_podpowiedŸ then
                            TEdit(zt_component).Hint := zts_1;

                        end
                      else
                      if Pos( '_GroupBox', nazwa ) > 0 then
                        begin

                          if not czy_podpowiedŸ then
                            TGroupBox(zt_component).Caption := zts_1
                          else//if not czy_podpowiedŸ then
                            TGroupBox(zt_component).Hint := zts_1;

                        end
                      else
                      if Pos( '_Label', nazwa ) > 0 then
                        begin

                          if not czy_podpowiedŸ then
                            TLabel(zt_component).Caption := zts_1
                          else//if not czy_podpowiedŸ then
                            TLabel(zt_component).Hint := zts_1;

                        end
                      else
                      if Pos( '_Memo', nazwa ) > 0 then
                        begin

                          if czy_podpowiedŸ then
                            TMemo(zt_component).Hint := zts_1;

                        end
                      else
                      if Pos( '_MenuItem', nazwa ) > 0 then
                        begin

                          if not czy_podpowiedŸ then
                            TMenuItem(zt_component).Caption := zts_1
                          else//if not czy_podpowiedŸ then
                            TMenuItem(zt_component).Hint := zts_1;

                        end
                      else
                      if Pos( '_Panel', nazwa ) > 0 then
                        begin

                          if not czy_podpowiedŸ then
                            TPanel(zt_component).Caption := zts_1
                          else//if not czy_podpowiedŸ then
                            TPanel(zt_component).Hint := zts_1;

                        end
                      else
                      //if Pos( '_RadioButton', nazwa ) > 0 then
                      //  begin
                      //
                      //    if not czy_podpowiedŸ then
                      //      TRadioButton(zt_component).Caption := zts_1
                      //    else//if not czy_podpowiedŸ then
                      //      TRadioButton(zt_component).Hint := zts_1;
                      //
                      //  end
                      //else
                      if Pos( '_RadioGroup', nazwa ) > 0 then
                        begin

                          if not czy_podpowiedŸ then
                            begin

                              if not czy_elementy then
                                TRadioGroup(zt_component).Caption := zts_1
                              else//if not czy_elementy then
                                begin

                                  zti_2 := TRadioGroup(zt_component).ItemIndex;

                                  TRadioGroup(zt_component).Items.Clear();

                                  zti_1 := Pos( ';', zts_1 );

                                  while zti_1 > 0 do
                                    begin

                                      zts_2 := Copy( zts_1, 1, zti_1 - 1 );
                                      Delete( zts_1, 1, zti_1 );

                                      zts_2 := StringReplace( zts_2, #13, '', [ rfReplaceAll ] );

                                      TRadioGroup(zt_component).Items.Add( zts_2 );

                                      zti_1 := Pos( ';', zts_1 );

                                    end;
                                  //---//while zti_1 > 0 do

                                  if    ( zti_2 >= 0 )
                                    and ( zti_2 <= TRadioGroup(zt_component).Items.Count - 1 ) then
                                    TRadioGroup(zt_component).ItemIndex := zti_2;

                                end;
                              //---//if zti_1 <= 0 then

                            end
                          else//if not czy_elementy then
                            TRadioGroup(zt_component).Hint := zts_1;

                        end
                      else
                      if Pos( '_SpinEdit', nazwa ) > 0 then
                        begin

                          if czy_podpowiedŸ then
                            TSpinEdit(zt_component).Hint := zts_1;

                        end
                      else
                      if Pos( '_StringGrid', nazwa ) > 0 then
                        begin

                          if czy_podpowiedŸ then
                            TStringGrid(zt_component).Hint := zts_1;

                        end
                      else
                      if Pos( '_TabSheet', nazwa ) > 0 then
                        begin

                          if not czy_podpowiedŸ then
                            TTabSheet(zt_component).Caption := zts_1
                          else//if not czy_podpowiedŸ then
                            TTabSheet(zt_component).Hint := zts_1;

                        end
                      else
                        ;

                    end;
                  //---//if zt_component <> nil then
                  {$endregion 'Komponenty.'}

                end
              else//if Pos( t³umaczenie_komunikaty_r_c_l, zts_1 ) <= 0 then
                begin

                  {$region 'Komunikaty.'}
                  nazwa := Copy( zts_1, 1, zti_1 - 1 );
                  Delete( zts_1, 1, zti_1 );

                  nazwa := StringReplace( nazwa, t³umaczenie_komunikaty_r_c_l, '', [ rfReplaceAll ] );
                  zts_1 := StringReplace( zts_1, nowa_linia_c, #13 + #10, [ rfReplaceAll ] );

                  for rtti_field in rtti_type.GetFields do
                    if rtti_field.Name = nazwa then
                      begin

                        if rtti_field.GetValue( @t³umaczenie_komunikaty_r ).Kind in [ System.TypInfo.tkUString, System.TypInfo.tkString, System.TypInfo.tkWString ] then
                          rtti_field.SetValue( @t³umaczenie_komunikaty_r, zts_1 );

                        Break;

                      end;
                    //---//if rtti_field.Name = nazwa then
                  {$endregion 'Komunikaty.'}

                end;
              //---//if Pos( t³umaczenie_komunikaty_r_c_l, zts_1 ) <= 0 then

            end;
          //---//if zti_1 > 1 then

        end;
      //---//if Trim( zts_1 ) <> '' then

    end;
  //---//for i := 0 to tekst_l.Count - 1 do

  tekst_l.Free();


  T³umaczenie__Lista_Wczytaj(); // Aby zaktualizowaæ treœæ t__domyœlne.

  T³umaczenie__Pozosta³e_Elementy_Odœwie¿();

  Screen.Cursor := crDefault;

end;//---//Funkcja T³umaczenie__Wczytaj().

//Funkcja T³umaczenie__Zastosuj().
procedure TStatki_Form.T³umaczenie__Zastosuj();
var
  i : integer;

  rtti_field : TRttiField;
  rtti_type : TRttiType;
begin

  if    ( T³umaczenia_ComboBox.ItemIndex >= 0 )
    and ( T³umaczenia_ComboBox.ItemIndex <= T³umaczenia_ComboBox.Items.Count - 1 ) then
    begin

      T³umaczenie__Domyœlne(); // Je¿eli w t³umaczeniu czegoœ zabraknie to zostanie wartoœæ domyœlna.

      if T³umaczenia_ComboBox.ItemIndex > 0 then
        T³umaczenie__Wczytaj();


      rtti_type := TRTTIContext.Create.GetType(  System.TypeInfo( TT³umaczenie_Komunikaty_r )  );

      for i := 0 to Klawiatura_Konfiguracja_ScrollBox.ControlCount - 1 do // Tylko wizualne.
        for rtti_field in rtti_type.GetFields do
          if rtti_field.Name = TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.polecenie__nazwa then
            begin

              TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.polecenie__t³umaczenie := rtti_field.GetValue( @t³umaczenie_komunikaty_r ).ToString;
              Break;

            end;
          //---//if rtti_field.Name = TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.polecenie__nazwa then

    end;
  //---//if    ( T³umaczenia_ComboBox.ItemIndex >= 0 ) (...)

end;//---//Funkcja T³umaczenie__Zastosuj().

//Funkcja Trafienia_Efekt__Czas_Trwania_SprawdŸ().
procedure TStatki_Form.Trafienia_Efekt__Czas_Trwania_SprawdŸ( const delta_czasu_f : double );
var
  i : integer;
begin

  if   ( trafienia_efekt_list = nil )
    or (  not Assigned( trafienia_efekt_list )  ) then
    Exit;


  for i := trafienia_efekt_list.Count - 1 downto 0 do
    begin

      if Czas_Miêdzy_W_Milisekundach( TTrafienia_Efekt(trafienia_efekt_list[ i ]).czas_utworzenia_milisekundy_te, true ) >= TTrafienia_Efekt(trafienia_efekt_list[ i ]).czas_trwania_milisekundy_te then
        Trafienia_Efekt__Zwolnij_Jeden( TTrafienia_Efekt(trafienia_efekt_list[ i ]) )
      else//if Czas_Miêdzy_W_Milisekundach( TTrafienia_Efekt(trafienia_efekt_list[ i ]).czas_utworzenia_milisekundy_te, true ) >= TTrafienia_Efekt(trafienia_efekt_list[ i ]).czas_trwania_milisekundy_te then
        begin

          if TTrafienia_Efekt(trafienia_efekt_list[ i ]).efekt_rodzaj = er_SOS then
            begin

              //if TTrafienia_Efekt(trafienia_efekt_list[ i ]).AbsolutePosition.Y < 200 then
              //  TTrafienia_Efekt(trafienia_efekt_list[ i ]).Lift( 10 * delta_czasu_f )
              //else//if TTrafienia_Efekt(trafienia_efekt_list[ i ]).AbsolutePosition.Y < 100 then
              //  TTrafienia_Efekt(trafienia_efekt_list[ i ]).Lift( 2 * delta_czasu_f );


              if TTrafienia_Efekt(trafienia_efekt_list[ i ]).wznoszenie_prêdkoœæ > -0.5 then
                TTrafienia_Efekt(trafienia_efekt_list[ i ]).wznoszenie_prêdkoœæ := TTrafienia_Efekt(trafienia_efekt_list[ i ]).wznoszenie_prêdkoœæ - 0.25 * delta_czasu_f; // Wytracanie prêdkoœci wznoszenia.

              if TTrafienia_Efekt(trafienia_efekt_list[ i ]).wznoszenie_prêdkoœæ < -0.5 then
                TTrafienia_Efekt(trafienia_efekt_list[ i ]).wznoszenie_prêdkoœæ := -0.5;

              TTrafienia_Efekt(trafienia_efekt_list[ i ]).Lift( TTrafienia_Efekt(trafienia_efekt_list[ i ]).wznoszenie_prêdkoœæ * delta_czasu_f );


              if TTrafienia_Efekt(trafienia_efekt_list[ i ]).wznoszenie_prêdkoœæ < 2 then
                begin

                  while TTrafienia_Efekt(trafienia_efekt_list[ i ]).Behaviours.IndexOfClass( TGLBSoundEmitter ) > -1 do // -1 - brak, >= 0 zachowania.
                    TTrafienia_Efekt(trafienia_efekt_list[ i ]).Behaviours.Delete( 0 ); // Dezaktywuje dŸwiêkowy efekt lotu.


                  if Efekty__SOS_Rozb³ysk_CheckBox.Checked then
                    with GLS.ParticleFX.GetOrCreateSourcePFX( TTrafienia_Efekt(trafienia_efekt_list[ i ]) ) do
                      begin

                        // Gdy zaczyna opadaæ zaczyna œwieciæ ci¹g³ym wiêkszym œwiat³em.

                        VelocityDispersion := 2; // Prêdkoœæ rozpadania siê i wznoszenia.

                        if TTrafienia_Efekt(trafienia_efekt_list[ i ]).wznoszenie_prêdkoœæ > 0 then
                          Burst( Gra_GLCadencer.CurrentTime, 2 ) // Iloœæ wylatuj¹cych œwiate³ek. // 2
                        else//if TTrafienia_Efekt(trafienia_efekt_list[ i ]).wznoszenie_prêdkoœæ > 0 then
                          Burst(   Gra_GLCadencer.CurrentTime, System.Math.Ceil(  2 - ( 4 * TTrafienia_Efekt(trafienia_efekt_list[ i ]).wznoszenie_prêdkoœæ )  )   ); // Iloœæ wylatuj¹cych œwiate³ek.

                      end;
                    //---//with GLS.ParticleFX.GetOrCreateSourcePFX( TTrafienia_Efekt(trafienia_efekt_list[ i ]) ) do

                end;
              //---//if TTrafienia_Efekt(trafienia_efekt_list[ i ]).wznoszenie_prêdkoœæ < 2 then


              if    ( TTrafienia_Efekt(trafienia_efekt_list[ i ]).AbsolutePosition.Y > 100 )
                and (  Czas_Miêdzy_W_Sekundach( TTrafienia_Efekt(trafienia_efekt_list[ i ]).czas_rozb³ysku_ostatniego_sekundy_i ) >= 10  ) then
                begin

                  // Rozb³yski co pewien odstêp czasu i po przekroczeniu pewnej wysokoœci.

                  if Efekty__SOS_Rozb³ysk_CheckBox.Checked then
                    begin

                      Efekt__SOS_Rozb³ysk_GLPolygonPFXManager.ColorInner.RandomColor();
                      Efekt__SOS_Rozb³ysk_GLPolygonPFXManager.ColorOuter.RandomColor();


                      with GLS.ParticleFX.GetOrCreateSourcePFX( TTrafienia_Efekt(trafienia_efekt_list[ i ]) ) do
                        begin

                          VelocityDispersion := 20; // Prêdkoœæ rozpadania siê i wznoszenia.
                          Burst( Gra_GLCadencer.CurrentTime, 4000 ); // Iloœæ wylatuj¹cych œwiate³ek.

                          VelocityDispersion := 0; // Prêdkoœæ rozpadania siê i wznoszenia.
                          RingExplosion( Gra_GLCadencer.CurrentTime, 1, 12, 7500 ); // uses GLS.ParticleFX.

                        end;
                      //---//with GLS.ParticleFX.GetOrCreateSourcePFX( TTrafienia_Efekt(trafienia_efekt_list[ i ]) ) do

                    end;
                  //---//if Efekty__SOS_Rozb³ysk_CheckBox.Checked then


                  DŸwiêki__Efekt__Utwórz_Jeden( der_SOS_Rozb³ysk, TTrafienia_Efekt(trafienia_efekt_list[ i ]).AbsolutePosition );


                  if TTrafienia_Efekt(trafienia_efekt_list[ i ]).wizualizacja_alternatywna__gl_custom_scene_object <> nil then
                    begin

                      if TTrafienia_Efekt(trafienia_efekt_list[ i ]).wizualizacja_alternatywna__gl_custom_scene_object.Scale.X <> 0.1 then
                        begin

                          TTrafienia_Efekt(trafienia_efekt_list[ i ]).wizualizacja_alternatywna__gl_custom_scene_object.Scale.X := 0.1;
                          TTrafienia_Efekt(trafienia_efekt_list[ i ]).wizualizacja_alternatywna__gl_custom_scene_object.Scale.Y := TTrafienia_Efekt(trafienia_efekt_list[ i ]).wizualizacja_alternatywna__gl_custom_scene_object.Scale.X;
                          TTrafienia_Efekt(trafienia_efekt_list[ i ]).wizualizacja_alternatywna__gl_custom_scene_object.Scale.Z := TTrafienia_Efekt(trafienia_efekt_list[ i ]).wizualizacja_alternatywna__gl_custom_scene_object.Scale.X;

                          TTrafienia_Efekt(trafienia_efekt_list[ i ]).czas_opóŸnienia_animowania_wizualizacji_alternatywnej_milisekundy_i := 100;

                        end;
                      //---//if TTrafienia_Efekt(trafienia_efekt_list[ i ]).wizualizacja_alternatywna__gl_custom_scene_object.Scale.X <> 0.1 then


                      TTrafienia_Efekt(trafienia_efekt_list[ i ]).czas_animowania_wizualizacji_alternatywnej_ostatniego_milisekundy_i := Czas_Teraz_W_Milisekundach();

                    end;
                  //---//if TTrafienia_Efekt(trafienia_efekt_list[ i ]).wizualizacja_alternatywna__gl_custom_scene_object <> nil then


                  TTrafienia_Efekt(trafienia_efekt_list[ i ]).czas_rozb³ysku_ostatniego_sekundy_i := Czas_Teraz_W_Sekundach();

                end;
              //---//if    ( TTrafienia_Efekt(trafienia_efekt_list[ i ]).AbsolutePosition.Y > 100 ) (...)

            end;
          //---//if TTrafienia_Efekt(trafienia_efekt_list[ i ]).efekt_rodzaj = er_SOS then


          if    ( TTrafienia_Efekt(trafienia_efekt_list[ i ]).czas_animowania_wizualizacji_alternatywnej_ostatniego_milisekundy_i <> 0 )
            and (  Czas_Miêdzy_W_Milisekundach( TTrafienia_Efekt(trafienia_efekt_list[ i ]).czas_animowania_wizualizacji_alternatywnej_ostatniego_milisekundy_i, true ) >= TTrafienia_Efekt(trafienia_efekt_list[ i ]).czas_opóŸnienia_animowania_wizualizacji_alternatywnej_milisekundy_i  ) then
            TTrafienia_Efekt(trafienia_efekt_list[ i ]).Wizualizacja_Alternatywna__Animuj();

        end;
      //---//if Czas_Miêdzy_W_Milisekundach( TTrafienia_Efekt(trafienia_efekt_list[ i ]).czas_utworzenia_milisekundy_te, true ) >= TTrafienia_Efekt(trafienia_efekt_list[ i ]).czas_trwania_milisekundy_te then

    end;
  //---//for i := trafienia_efekt_list.Count - 1 downto 0 do

end;//---//Funkcja Trafienia_Efekt__Czas_Trwania_SprawdŸ().

//Funkcja Trafienia_Efekt__Utwórz_Jeden().
procedure TStatki_Form.Trafienia_Efekt__Utwórz_Jeden( AOwner : TGLBaseSceneObject; const efekt_rodzaj_f : TEfekt_Rodzaj; const x_f, y_f, z_f : real; amunicja_f : TAmunicja; czas_trwania_f, czas_trwania_efekt_dodatkowy_f : Int64 );
var
  czas_trwania_l, // Dla elementów wieloosobowych.
  czas_trwania_efekt_dodatkowy_l // Dla elementów wieloosobowych.
    : Int64;
  obra¿enia_zadawane_wspó³czynnik_zmodyfikowany_l,
  skala__amunicja_l
    : real;
  zt_trafienia_efekt,
  zt_trafienia_efekt__dŸwiêk_kontener
    : TTrafienia_Efekt;
begin

  if   ( trafienia_efekt_list = nil )
    or (  not Assigned( trafienia_efekt_list )  ) then
    Exit;


  //if efekt_rodzaj_f = er_Trafienie_Statek then
  //  zt_trafienia_efekt := TTrafienia_Efekt.Create( AOwner, Efekt__Wpadniêcie_Do_Wody_GLFireFXManager, x_f, y_f, z_f, 0, amunicja_f )
  //else
  //if efekt_rodzaj_f = er_Trafienie_Woda then
  //  zt_trafienia_efekt := TTrafienia_Efekt.Create( AOwner, Efekt__Wpadniêcie_Do_Wody_GLPolygonPFXManager, x_f, y_f + 1, z_f, Gra_GLCadencer.CurrentTime, amunicja_f )
  //else
  //  zt_trafienia_efekt := nil;
  //if gl_cadence_able_component_f is TGLFireFXManager then
  //if gl_cadence_able_component_f is TGLPolygonPFXManager then


  if amunicja_f <> nil then
    begin

      obra¿enia_zadawane_wspó³czynnik_zmodyfikowany_l := amunicja_f.obra¿enia_zadawane_wspó³czynnik_zmodyfikowany; // Je¿eli amunicja trafia w coœ poza swoim skutecznym zasiêgiem to efekt trafienia jest odpowiednio mniejszy.
      skala__amunicja_l := amunicja_f.skala__amunicja;

    end
  else//if amunicja_f <> nil then
    begin

      obra¿enia_zadawane_wspó³czynnik_zmodyfikowany_l := 1;
      skala__amunicja_l := 1;

    end;
  //---//if amunicja_f <> nil then


  zt_trafienia_efekt__dŸwiêk_kontener := nil;


  {$region 'Podstawowe efekty.'}
  zt_trafienia_efekt := nil;

  if   ( efekt_rodzaj_f = er_SOS )
    //or ( efekt_rodzaj_f = er_Trafienie_L¹d__Bez_Obra¿eñ )
    or ( efekt_rodzaj_f in [ er_Trafienie_L¹d__Obra¿enia, er_Trafienie_Statek, er_Trafienie_Statek_Zatopienie, er_Wystrza³ ] )
    or ( efekt_rodzaj_f = er_Trafienie_Woda ) then
    zt_trafienia_efekt := TTrafienia_Efekt.Create( AOwner, x_f, y_f, z_f, efekt_rodzaj_f );

  // Dynamiczne dodanie efektu.
  if    ( efekt_rodzaj_f = er_SOS )
    and ( zt_trafienia_efekt <> nil ) then
    begin

      zt_trafienia_efekt.czas_trwania_milisekundy_te := 60000;

      // Gdy kamera jest wewn¹trz efektu bardzo zwalnia.

      if Efekty__SOS_Rozb³ysk_CheckBox.Checked then
        TGLSourcePFXEffect(zt_trafienia_efekt.AddNewEffect( TGLSourcePFXEffect )).Manager := Efekt__SOS_Rozb³ysk_GLPolygonPFXManager
      else//if Efekty__SOS_Rozb³ysk_CheckBox.Checked then
        zt_trafienia_efekt.Wizualizacja_Alternatywna__Utwórz( dzieñ_jasnoœæ_g );

      zt_trafienia_efekt.wznoszenie_prêdkoœæ := 10; // Prêdkoœæ wznoszenia.

      DŸwiêki__Komunikat__Utwórz_Jeden( dkr_SOS_Pikanie, 0 );

      zt_trafienia_efekt__dŸwiêk_kontener := zt_trafienia_efekt;

    end
  else//if    ( efekt_rodzaj_f = er_SOS ) (...)
  //if    ( efekt_rodzaj_f = er_Trafienie_L¹d__Bez_Obra¿eñ )
  //  and ( zt_trafienia_efekt <> nil ) then
  //  begin
  //
  //    //if Efekty__Wpadniêcie_Do_Wody_0_CheckBox.Checked then
  //    //  TGLBFireFX(zt_trafienia_efekt.AddNewEffect( TGLBFireFX )).Manager := Efekt__Wpadniêcie_Do_Wody_0_GLFireFXManager;
  //    //else//if Efekty__Wpadniêcie_Do_Wody_0_CheckBox.Checked then
  //    //  zt_trafienia_efekt.Wizualizacja_Alternatywna__Utwórz( dzieñ_jasnoœæ_g );
  //
  //  end
  //else//if    ( efekt_rodzaj_f = er_Trafienie_L¹d__Bez_Obra¿eñ ) (...)
  if    ( efekt_rodzaj_f in [ er_Trafienie_L¹d__Obra¿enia, er_Trafienie_Statek, er_Trafienie_Statek_Zatopienie, er_Wystrza³ ] )
    and ( zt_trafienia_efekt <> nil ) then
    begin

      if efekt_rodzaj_f <> er_Wystrza³ then
        zt_trafienia_efekt.czas_trwania_milisekundy_te := Random( 20000 ) + 5000
      else//if efekt_rodzaj_f <> er_Wystrza³ then
        zt_trafienia_efekt.czas_trwania_milisekundy_te := Random( 1500 ) + 1000;

      // Zmienia rozmiar efektu.
      if efekt_rodzaj_f = er_Trafienie_Statek_Zatopienie then
        zt_trafienia_efekt.Scale.Scale( 4 )
      else//if efekt_rodzaj_f = er_Trafienie_Statek_Zatopienie then
      if amunicja_f <> nil then
        begin

          case amunicja_f.amunicja_rodzaj of
              Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Bomba_G³êbinowa :
                begin

                  zt_trafienia_efekt.Scale.Scale( 2 * obra¿enia_zadawane_wspó³czynnik_zmodyfikowany_l );

                end;
              //---//Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Bomba_G³êbinowa :

              Typy_Wspolne.ar_Pocisk, Typy_Wspolne.ar_Je¿e_G³êbinowe :
                begin

                  zt_trafienia_efekt.Scale.Scale( 0.5 * obra¿enia_zadawane_wspó³czynnik_zmodyfikowany_l );

                end;
              //---//Typy_Wspolne.ar_Pocisk, Typy_Wspolne.ar_Je¿e_G³êbinowe :

              Typy_Wspolne.ar_Torpeda :
                begin

                  zt_trafienia_efekt.Scale.Scale( 2 * obra¿enia_zadawane_wspó³czynnik_zmodyfikowany_l );

                end;
              //---//Typy_Wspolne.ar_Torpeda :
            end;
          //---//case amunicja_f.amunicja_rodzaj of

        end;
      //---//if amunicja_f <> nil then


      if efekt_rodzaj_f = er_Wystrza³ then
        begin

          zt_trafienia_efekt.Scale.Scale( 0.05 );

          if    ( amunicja_f <> nil )
            and ( amunicja_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe, Typy_Wspolne.ar_Torpeda ] ) then
            zt_trafienia_efekt.Scale.Scale( 0.5 );

        end;
      //---//if efekt_rodzaj_f = er_Wystrza³ then


      if Efekty__Ogieñ_CheckBox.Checked then
        TGLBFireFX(zt_trafienia_efekt.AddNewEffect( TGLBFireFX )).Manager := Efekt__Ogieñ_GLFireFXManager
      else//if Efekty__Ogieñ_CheckBox.Checked then
        zt_trafienia_efekt.Wizualizacja_Alternatywna__Utwórz( dzieñ_jasnoœæ_g );

    end
  else//if    ( efekt_rodzaj_f in [ er_Trafienie_L¹d__Obra¿enia, er_Trafienie_Statek, er_Trafienie_Statek_Zatopienie, er_Wystrza³ ] ) (...)
  if    ( efekt_rodzaj_f = er_Trafienie_Woda )
    and ( zt_trafienia_efekt <> nil ) then
    begin

      zt_trafienia_efekt.czas_trwania_milisekundy_te := 1500;

      // Gdy kamera jest wewn¹trz efektu bardzo zwalnia.

      if Efekty__Wpadniêcie_Do_Wody_CheckBox.Checked then
        begin

          TGLSourcePFXEffect(zt_trafienia_efekt.AddNewEffect( TGLSourcePFXEffect )).Manager := Efekt__Wpadniêcie_Do_Wody_GLPolygonPFXManager;

          with GLS.ParticleFX.GetOrCreateSourcePFX( zt_trafienia_efekt ) do
            begin

              // Jedno œwiate³ko na œrodku jest zawsze.

              VelocityDispersion := 0.75; // Prêdkoœæ rozpadania siê i wznoszenia.
              Burst( Gra_GLCadencer.CurrentTime, 100 ); // Iloœæ wylatuj¹cych œwiate³ek.

              VelocityDispersion := 0.05; // Prêdkoœæ rozpadania siê i wznoszenia.
              Burst( Gra_GLCadencer.CurrentTime, 1 ); // Iloœæ wylatuj¹cych œwiate³ek.

              VelocityDispersion := 0; // Prêdkoœæ rozpadania siê i wznoszenia.
              RingExplosion( Gra_GLCadencer.CurrentTime, 1, 1.2, 75 ); // uses GLS.ParticleFX.
              //EffectScale := 0.0001; //??? nie dzia³a dobrze

            end;
          //---//with GLS.ParticleFX.GetOrCreateSourcePFX( zt_trafienia_efekt ) do

        end
      else//if Efekty__Wpadniêcie_Do_Wody_CheckBox.Checked then
        zt_trafienia_efekt.Wizualizacja_Alternatywna__Utwórz( dzieñ_jasnoœæ_g );


      //if Efekty__Wpadniêcie_Do_Wody_0_CheckBox.Checked then
      //  TGLBFireFX(zt_trafienia_efekt.AddNewEffect( TGLBFireFX )).Manager := Efekt__Wpadniêcie_Do_Wody_0_GLFireFXManager;
      //else//if Efekty__Wpadniêcie_Do_Wody_0_CheckBox.Checked then
      //  zt_trafienia_efekt.Wizualizacja_Alternatywna__Utwórz( dzieñ_jasnoœæ_g );

    end;
  //---//if    ( efekt_rodzaj_f = er_Trafienie_Woda ) (...)


  if zt_trafienia_efekt <> nil then
    begin

      czas_trwania_l := zt_trafienia_efekt.czas_trwania_milisekundy_te;

      if czas_trwania_f > 0 then // Dla elementów wieloosobowych.
        zt_trafienia_efekt.czas_trwania_milisekundy_te := czas_trwania_f;

      trafienia_efekt_list.Add( zt_trafienia_efekt );

    end
  else//if zt_trafienia_efekt <> nil then
    czas_trwania_l := -1;
  {$endregion 'Podstawowe efekty.'}


  if    ( czy_klient_g )
    and ( AOwner <> nil )
    and ( efekt_rodzaj_f in [ er_Trafienie_Statek, er_Trafienie_Statek_Zatopienie ] ) then
    DŸwiêki__Efekt__Utwórz_Jeden( zt_trafienia_efekt__dŸwiêk_kontener, efekt_rodzaj_f, AOwner.AbsolutePosition.X, AOwner.AbsolutePosition.Y, AOwner.AbsolutePosition.Z, amunicja_f )
  else//if    ( czy_klient_g ) (...)
    DŸwiêki__Efekt__Utwórz_Jeden( zt_trafienia_efekt__dŸwiêk_kontener, efekt_rodzaj_f, x_f, y_f, z_f, amunicja_f );


  {$region 'Dodatkowe efekty.'}
  zt_trafienia_efekt := nil;

  if efekt_rodzaj_f in [ er_Trafienie_L¹d__Bez_Obra¿eñ, er_Trafienie_L¹d__Obra¿enia, er_Trafienie_Statek_Zatopienie, er_Wystrza³ ] then
    begin

      zt_trafienia_efekt := TTrafienia_Efekt.Create( AOwner, x_f, y_f, z_f, efekt_rodzaj_f, true );

      if Efekty__Mg³a_CheckBox.Checked then
        begin

          with GLS.ParticleFX.GetOrCreateSourcePFX( zt_trafienia_efekt ) do
            begin

              Manager := Efekt__Mg³a_GLPerlinPFXManager;
              // Gdy kamera jest wewn¹trz efektu bardzo zwalnia.

              // Zmienia rozmiar efektu.
              if efekt_rodzaj_f = er_Trafienie_Statek_Zatopienie then
                begin

                  zt_trafienia_efekt.czas_trwania_milisekundy_te := Random( 5000 ) + 5000;
                  EffectScale := 3;

                end
              else//if efekt_rodzaj_f = er_Trafienie_Statek_Zatopienie then
              if amunicja_f <> nil then
                begin

                  case amunicja_f.amunicja_rodzaj of
                      Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Bomba_G³êbinowa :
                        begin

                          EffectScale := 1 * skala__amunicja_l * obra¿enia_zadawane_wspó³czynnik_zmodyfikowany_l;

                        end;
                      //---//Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Bomba_G³êbinowa :

                      Typy_Wspolne.ar_Pocisk, Typy_Wspolne.ar_Je¿e_G³êbinowe :
                        begin

                          EffectScale := 0.05 * skala__amunicja_l * obra¿enia_zadawane_wspó³czynnik_zmodyfikowany_l;

                        end;
                      //---//Typy_Wspolne.ar_Pocisk, Typy_Wspolne.ar_Je¿e_G³êbinowe :

                      Typy_Wspolne.ar_Torpeda :
                        begin

                          EffectScale := 0.1 * skala__amunicja_l * obra¿enia_zadawane_wspó³czynnik_zmodyfikowany_l;

                        end;
                      //---//Typy_Wspolne.ar_Torpeda :
                    end;
                  //---//case amunicja_f.amunicja_rodzaj of

                end
              else//if amunicja_f <> nil then
                EffectScale := 0.2; // Kolizja statku ze statkiem.


              if efekt_rodzaj_f = er_Wystrza³ then
                begin

                  zt_trafienia_efekt.czas_trwania_milisekundy_te := Random( 1000 ) + 1000;
                  EffectScale := EffectScale * 0.5;

                  if    ( amunicja_f <> nil )
                    and ( amunicja_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe, Typy_Wspolne.ar_Torpeda ] ) then
                    EffectScale := EffectScale * 0.5;

                end;
              //---//if efekt_rodzaj_f = er_Wystrza³ then

            end;
          //---//with GLS.ParticleFX.GetOrCreateSourcePFX( zt_trafienia_efekt ) do

        end
      else//if Efekty__Mg³a_CheckBox.Checked then
        begin

          // Zmienia rozmiar efektu.
          if efekt_rodzaj_f = er_Trafienie_Statek_Zatopienie then
            begin

              zt_trafienia_efekt.czas_trwania_milisekundy_te := Random( 5000 ) + 5000;
              zt_trafienia_efekt.Scale.Scale( 3 );

            end
          else//if efekt_rodzaj_f = er_Trafienie_Statek_Zatopienie then
          if amunicja_f <> nil then
            begin

              case amunicja_f.amunicja_rodzaj of
                  Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Bomba_G³êbinowa :
                    begin

                      zt_trafienia_efekt.Scale.Scale( 1 * skala__amunicja_l * obra¿enia_zadawane_wspó³czynnik_zmodyfikowany_l );

                    end;
                  //---//Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Bomba_G³êbinowa :

                  Typy_Wspolne.ar_Pocisk, Typy_Wspolne.ar_Je¿e_G³êbinowe :
                    begin

                      zt_trafienia_efekt.Scale.Scale( 0.05 * skala__amunicja_l * obra¿enia_zadawane_wspó³czynnik_zmodyfikowany_l );

                    end;
                  //---//Typy_Wspolne.ar_Pocisk, Typy_Wspolne.ar_Je¿e_G³êbinowe :

                  Typy_Wspolne.ar_Torpeda :
                    begin

                      zt_trafienia_efekt.Scale.Scale( 0.1 * skala__amunicja_l * obra¿enia_zadawane_wspó³czynnik_zmodyfikowany_l );

                    end;
                  //---//Typy_Wspolne.ar_Torpeda :
                end;
              //---//case amunicja_f.amunicja_rodzaj of

            end
          else//if amunicja_f <> nil then
            zt_trafienia_efekt.Scale.Scale( 0.2 ); // Kolizja statku ze statkiem.


          if efekt_rodzaj_f = er_Wystrza³ then
            begin

              zt_trafienia_efekt.czas_trwania_milisekundy_te := Random( 1000 ) + 1000;
              zt_trafienia_efekt.Scale.Scale( 0.5 );

              if    ( amunicja_f <> nil )
                and ( amunicja_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Bomba_G³êbinowa, Typy_Wspolne.ar_Je¿e_G³êbinowe, Typy_Wspolne.ar_Torpeda ] ) then
                zt_trafienia_efekt.Scale.Scale( 0.5 );

            end;
          //---//if efekt_rodzaj_f = er_Wystrza³ then


          zt_trafienia_efekt.Wizualizacja_Alternatywna__Utwórz( dzieñ_jasnoœæ_g );

        end;
      //---//if Efekty__Mg³a_CheckBox.Checked then

    end
  else//if efekt_rodzaj_f in [ er_Trafienie_L¹d__Bez_Obra¿eñ, er_Trafienie_L¹d__Obra¿enia, er_Trafienie_Statek_Zatopienie, er_Wystrza³ ] then
  if    ( efekt_rodzaj_f = er_Trafienie_Statek )
    and ( Efekty__Dym_CheckBox.Checked ) then
    begin

      zt_trafienia_efekt := TTrafienia_Efekt.Create( AOwner, x_f, y_f, z_f, efekt_rodzaj_f );

      zt_trafienia_efekt.czas_trwania_milisekundy_te := Random( 20000 ) + 5000;

      with GLS.ParticleFX.GetOrCreateSourcePFX( zt_trafienia_efekt ) do
        begin

          Manager := Efekt__Dym_GLPerlinPFXManager;

          // Zmienia rozmiar efektu.
          if amunicja_f <> nil then
            begin

              case amunicja_f.amunicja_rodzaj of
                  Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Bomba_G³êbinowa :
                    begin

                      EffectScale := 5 * obra¿enia_zadawane_wspó³czynnik_zmodyfikowany_l;

                    end;
                  //---//Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Bomba_G³êbinowa :

                  Typy_Wspolne.ar_Pocisk, Typy_Wspolne.ar_Je¿e_G³êbinowe :
                    begin

                      EffectScale := 2 * obra¿enia_zadawane_wspó³czynnik_zmodyfikowany_l;

                    end;
                  //---//Typy_Wspolne.ar_Pocisk, Typy_Wspolne.ar_Je¿e_G³êbinowe :

                  Typy_Wspolne.ar_Torpeda :
                    begin

                      EffectScale := 3 * obra¿enia_zadawane_wspó³czynnik_zmodyfikowany_l;

                    end;
                  //---//Typy_Wspolne.ar_Torpeda :
                end;
              //---//case amunicja_f.amunicja_rodzaj of

            end;
          //---//if amunicja_f <> nil then

        end;
      //---//with GLS.ParticleFX.GetOrCreateSourcePFX( zt_trafienia_efekt ) do

    end;
  //---//if    ( efekt_rodzaj_f = er_Trafienie_Statek ) (...)
  //else//if    ( efekt_rodzaj_f = er_Trafienie_Statek ) (...)
  //if    ( efekt_rodzaj_f = er_Trafienie_Woda )
  //  and ( Efekty__Wpadniêcie_Do_Wody_0_CheckBox.Checked ) then
  //  begin
  //
  //    // Ustawia ten efekt, gdy¿ podstawowego nie widaæ wyraŸnie.
  //
  //    zt_trafienia_efekt := TTrafienia_Efekt.Create( AOwner, x_f, y_f, z_f, efekt_rodzaj_f );
  //
  //    zt_trafienia_efekt.czas_trwania_milisekundy_te := 1500;
  //
  //    // Zmienia rozmiar rozprysku wody.
  //    if amunicja_f <> nil then
  //      begin
  //
  //        case amunicja_f.amunicja_rodzaj of
  //            Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Bomba_G³êbinowa :
  //              begin
  //
  //                zt_trafienia_efekt.Scale.Scale( 5 );
  //
  //              end;
  //            //---//Typy_Wspolne.ar_Artyleria, Typy_Wspolne.ar_Bomba_G³êbinowa :
  //
  //            Typy_Wspolne.ar_Pocisk, Typy_Wspolne.ar_Je¿e_G³êbinowe :
  //              begin
  //
  //                //zt_trafienia_efekt.Scale.Scale( 1 );
  //
  //              end;
  //            //---//Typy_Wspolne.ar_Pocisk, Typy_Wspolne.ar_Je¿e_G³êbinowe :
  //
  //            Typy_Wspolne.ar_Torpeda :
  //              begin
  //
  //                zt_trafienia_efekt.Scale.Scale( 2 );
  //
  //              end;
  //            //---//Typy_Wspolne.ar_Torpeda :
  //          end;
  //        //---//case amunicja_f.amunicja_rodzaj of
  //
  //      end;
  //    //---//if amunicja_f <> nil then
  //
  //
  //    TGLBFireFX(zt_trafienia_efekt.AddNewEffect( TGLBFireFX )).Manager := Efekt__Wpadniêcie_Do_Wody_0_GLFireFXManager;
  //
  //  end;
  ////---//if    ( efekt_rodzaj_f = er_Trafienie_Woda) (...)


  if zt_trafienia_efekt <> nil then
    begin

      czas_trwania_efekt_dodatkowy_l := zt_trafienia_efekt.czas_trwania_milisekundy_te;

      if czas_trwania_efekt_dodatkowy_f > 0 then // Dla elementów wieloosobowych.
        zt_trafienia_efekt.czas_trwania_milisekundy_te := czas_trwania_efekt_dodatkowy_f;

      trafienia_efekt_list.Add( zt_trafienia_efekt );

    end
  else//if zt_trafienia_efekt <> nil then
    czas_trwania_efekt_dodatkowy_l := -1;
  {$endregion 'Dodatkowe efekty.'}


  {$region 'Efekt wybuchu rozprzestrzeniaj¹cego siê.'}
  if    ( efekt_rodzaj_f in [ er_Trafienie_L¹d__Obra¿enia, er_Trafienie_Statek ] )
    and ( Efekty__Trafienie_Rozb³ysk_CheckBox.Checked ) then
    begin

      // Kolor ¿ó³ty wygl¹da jak zielony i skalowanie niezbyt dobrze wchodzi (zw³aszcza RingExplosion()).

      zt_trafienia_efekt := nil;

      zt_trafienia_efekt := TTrafienia_Efekt.Create( AOwner, x_f, y_f, z_f, efekt_rodzaj_f );
      zt_trafienia_efekt.czas_trwania_milisekundy_te := 1000;

      TGLSourcePFXEffect(zt_trafienia_efekt.AddNewEffect( TGLSourcePFXEffect )).Manager := Efekt__Trafienie_Rozb³ysk_GLPolygonPFXManager;


      if zt_trafienia_efekt <> nil then
        begin

          trafienia_efekt_list.Add( zt_trafienia_efekt );

        end;
      //---//if zt_trafienia_efekt <> nil then


      with GLS.ParticleFX.GetOrCreateSourcePFX( zt_trafienia_efekt ) do
        begin

          EffectScale := 0.5 * skala__amunicja_l;
          VelocityDispersion := 10; // Prêdkoœæ rozpadania siê i wznoszenia.
          Burst( Gra_GLCadencer.CurrentTime, 2000 ); // Iloœæ wylatuj¹cych œwiate³ek.


          VelocityDispersion := 1; // Prêdkoœæ rozpadania siê i wznoszenia.
          RingExplosion(  Gra_GLCadencer.CurrentTime, 1, 12, Round( 750 * skala__amunicja_l )  ); // uses GLS.ParticleFX.

        end;
      //---//with GLS.ParticleFX.GetOrCreateSourcePFX( zt_trafienia_efekt ) do

    end;
  //---//if    ( efekt_rodzaj_f in [ er_Trafienie_L¹d__Obra¿enia, er_Trafienie_Statek ] ) (...)
  {$endregion 'Efekt wybuchu rozprzestrzeniaj¹cego siê.'}


  Wieloosobowe__Efekt_Odczytaj_Jeden( AOwner, efekt_rodzaj_f, x_f, y_f, z_f, amunicja_f, czas_trwania_l, czas_trwania_efekt_dodatkowy_l );

end;//---//Funkcja Trafienia_Efekt__Utwórz_Jeden().

//Funkcja Trafienia_Efekt__Zwolnij_Jeden().
procedure TStatki_Form.Trafienia_Efekt__Zwolnij_Jeden( trafienia_efekt_f : TTrafienia_Efekt );
begin

  // Usuwaæ tylko w jednym miejscu. //!!!
  // Wywo³anie tej funkcji w kliku miejscach mo¿e coœ zepsuæ.

  if   ( trafienia_efekt_list = nil )
    or (  not Assigned( trafienia_efekt_list )  )
    or ( trafienia_efekt_f = nil ) then
    Exit;

  //pociski_magiczne_blokada := true;

  trafienia_efekt_list.Remove( trafienia_efekt_f );
  FreeAndNil( trafienia_efekt_f );

end;//---//Funkcja Trafienia_Efekt__Zwolnij_Jeden().

//Funkcja Trafienia_Efekt__Zwolnij_Wszystkie().
procedure TStatki_Form.Trafienia_Efekt__Zwolnij_Wszystkie();
var
  i : integer;
begin

  if   ( trafienia_efekt_list = nil )
    or (  not Assigned( trafienia_efekt_list )  ) then
    Exit;


  for i := trafienia_efekt_list.Count - 1 downto 0 do
    begin

      TTrafienia_Efekt(trafienia_efekt_list[ i ]).Free();
      trafienia_efekt_list.Delete( i );

    end;
  //---//for i := trafienia_efekt_list.Count - 1 downto 0 do

end;//---//Funkcja Trafienia_Efekt__Zwolnij_Wszystkie().

//Funkcja Trafienie_Nazwa_Wyœwietl().
procedure TStatki_Form.Trafienie_Nazwa_Wyœwietl( statek__trafiony_f, statek__strzelaj¹cy_f : TStatek; const obra¿enia_f : real; const czy_zadano_obra¿enia_f : boolean; const czy_amunicja_zneutralizowana_f : boolean = false );
var
  pokój_rozmów_r_l : TPokój_Rozmów_r;
begin

  //
  // Funkcja przygotowuje i rozsy³a graczom informacje o trafieniach, które otrzymali.
  //
  // Parametry:
  //   statek__trafiony_f
  //   statek__strzelaj¹cy_f
  //   czy_zadano_obra¿enia_f:
  //     false - informacja o otrzymanych obra¿eniach.
  //     true - informacja o zadanych obra¿eniach.
  //   czy_amunicja_zneutralizowana_f:
  //     false - informacja o trafieniu w statek.
  //     true - informacja o trafieniu w amunicjê.
  //

  if   ( statek__trafiony_f = nil )
    or ( statek__strzelaj¹cy_f = nil )
    or ( statek__trafiony_f.id_gracz <= si_peer_port_c ) then
    Exit;


  pokój_rozmów_r_l.id_nadawca := statek__strzelaj¹cy_f.id_gracz;
  pokój_rozmów_r_l.id_odbiorca := statek__trafiony_f.id_gracz;
  pokój_rozmów_r_l.data_czas_wys³ania := Now();
  pokój_rozmów_r_l.odbiorca_rodzaj := pror_Gracz_Jeden;


  if    ( czy_zadano_obra¿enia_f )
    and ( pokój_rozmów_r_l.id_nadawca = pokój_rozmów_r_l.id_odbiorca ) then
    Exit; // Nie informuje o tym, ¿e zadano obra¿enia samemu sobie (tylko, ¿e otrzymano obra¿enia od siebie).


  if not czy_amunicja_zneutralizowana_f then
    begin

      //if pokój_rozmów_r_l.id_nadawca = pokój_rozmów_r_l.id_odbiorca then
      //  pokój_rozmów_r_l.wiadomoœæ := 'Samotrafienie'
      //else//if pokój_rozmów_r_l.id_nadawca = pokój_rozmów_r_l.id_odbiorca then
      //  pokój_rozmów_r_l.wiadomoœæ := 'Trafienie';

      if czy_zadano_obra¿enia_f then
        pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.komunikat__trafienie_nazwa__zadano_obra¿enia
      else//if czy_zadano_obra¿enia_f then
        pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.komunikat__trafienie_nazwa__otrzymano_obra¿enia;

      if pokój_rozmów_r_l.id_nadawca = pokój_rozmów_r_l.id_odbiorca then
        pokój_rozmów_r_l.wiadomoœæ := pokój_rozmów_r_l.wiadomoœæ +
          ' (' + t³umaczenie_komunikaty_r.komunikat__trafienie_nazwa__otrzymano_obra¿enia__od_siebie + ')';

      pokój_rozmów_r_l.wiadomoœæ := pokój_rozmów_r_l.wiadomoœæ +
        ' ' + Trim(  FormatFloat( '### ### ##0.000', obra¿enia_f )  ) +
        si_pokój_rozmów__znacznik_symbol__trafienie_informacja_c;

    end
  else//if not czy_amunicja_zneutralizowana_f then
    begin

      pokój_rozmów_r_l.wiadomoœæ := t³umaczenie_komunikaty_r.komunikat__trafienie_nazwa__amunicja_zneutralizowana;

    end;
  //---//if not czy_amunicja_zneutralizowana_f then

  pokój_rozmów_r_l.wiadomoœæ := pokój_rozmów_r_l.wiadomoœæ +
    '.' + si_pokój_rozmów__znacznik_symbol__trafienie_informacja_c;


  if   ( czy_gra_lokalna_g )
    or (
             ( czy_serwer_g )
         and ( pokój_rozmów_r_l.id_odbiorca = serwer_peer_port_c )
       ) then
    Pokój_Rozmów__Wyœwietl_Wiadomoœæ( pokój_rozmów_r_l )
  else//if   ( czy_gra_lokalna_g ) (...)
    Pokój_Rozmów__Wyœlij_Wiadomoœæ( pokój_rozmów_r_l );



  if    ( czy_amunicja_zneutralizowana_f )
    and ( pokój_rozmów_r_l.id_nadawca <> pokój_rozmów_r_l.id_odbiorca ) then
    begin

      pokój_rozmów_r_l.id_nadawca := statek__trafiony_f.id_gracz;
      pokój_rozmów_r_l.id_odbiorca := statek__strzelaj¹cy_f.id_gracz;


      if   ( czy_gra_lokalna_g )
        or (
                 ( czy_serwer_g )
             and ( pokój_rozmów_r_l.id_odbiorca = serwer_peer_port_c )
           ) then
        Pokój_Rozmów__Wyœwietl_Wiadomoœæ( pokój_rozmów_r_l )
      else//if   ( czy_gra_lokalna_g ) (...)
        Pokój_Rozmów__Wyœlij_Wiadomoœæ( pokój_rozmów_r_l );

    end;
  //---//if    ( czy_amunicja_zneutralizowana_f ) (...)

end;//---//Funkcja Trafienie_Nazwa_Wyœwietl().

//Funkcja Torpeda_Wykrycie_Zasiêg().
function TStatki_Form.Torpeda_Wykrycie_Zasiêg( statek_f : TStatek ) : single;
begin

  //
  // Funkcja z jakiej odleg³oœci statek jest w stanie wykryæ (wystrzelon¹) torpedê.
  //
  // Zwraca odleg³oœci z jakiej statek jest w stanie wykryæ (wystrzelon¹) torpedê.
  //
  // Parametry:
  //   statek_f
  //

  Result := 0;

  if   ( statek_f = nil )
    or (  not Assigned( statek_f )  ) then
    Exit;


  Result := amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ_torpeda * 10;

  if statek_f.y_prymityw_najwiêksze > 1 then
    Result := Result + statek_f.y_prymityw_najwiêksze * 20;

  Result := Result * dzieñ_jasnoœæ_g; // Noc ogranicza widocznoœæ.

  if mg³a_intensywnoœæ_g > 0 then
    Result := Result * mg³a_intensywnoœæ_g * 0.01; // Mg³a ogranicza widocznoœæ.

  if Result < amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ_torpeda then
    Result := amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ_torpeda;

  if    ( statek_f.sonar_zasiêg > 0 )
    and ( Result < statek_f.sonar_zasiêg ) then
    Result := statek_f.sonar_zasiêg;

end;//---//Funkcja Torpeda_Wykrycie_Zasiêg().

//Funkcja Ustawienia_Plik().
procedure TStatki_Form.Ustawienia_Plik( const l¹d_twórz_f : boolean; const zapisuj_ustawienia_f : boolean = false );
var
  zti : integer;
  ztr : real;
  zts : string;
  plik_ini : System.IniFiles.TIniFile;
begin

  //
  // Funkcja wczytuje i zapisuje ustawienia.
  //
  // Parametry:
  //   l¹d_twórz_f (niektóre l¹dy siê d³ugo tworz¹):
  //     false - nie utworzy l¹du.
  //     true - utworzy l¹d.
  //   zapisuj_ustawienia_f:
  //     false - tylko odczytuje ustawienia.
  //     true - zapisuje ustawienia.
  //

  zts := ExtractFilePath( Application.ExeName ) + 'Statki.ini';

  plik_ini := System.IniFiles.TIniFile.Create( zts );


  {$region 'BabyMetal_Statek.'}
  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'BabyMetal_Statek', 'babymetal_statek__lot_wysokoœæ' )  ) then
    plik_ini.WriteFloat( 'BabyMetal_Statek', 'babymetal_statek__lot_wysokoœæ', babymetal_statek__lot_wysokoœæ_g )
  else
    babymetal_statek__lot_wysokoœæ_g := plik_ini.ReadFloat( 'BabyMetal_Statek', 'babymetal_statek__lot_wysokoœæ', babymetal_statek__lot_wysokoœæ_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    BabyMetal_Statek_GLDummyCube.Position.Y := babymetal_statek__lot_wysokoœæ_g;


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'BabyMetal_Statek', 'babymetal_statek__odleg³oœæ_maksymalna' )  ) then
    plik_ini.WriteFloat( 'BabyMetal_Statek', 'babymetal_statek__odleg³oœæ_maksymalna', babymetal_statek__odleg³oœæ_maksymalna_g )
  else
    babymetal_statek__odleg³oœæ_maksymalna_g := plik_ini.ReadFloat( 'BabyMetal_Statek', 'babymetal_statek__odleg³oœæ_maksymalna', babymetal_statek__odleg³oœæ_maksymalna_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( babymetal_statek__odleg³oœæ_maksymalna_g < 0 ) then
    babymetal_statek__odleg³oœæ_maksymalna_g := 1;


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'BabyMetal_Statek', 'babymetal_statek__prawdopodobieñstwo_pojawienia_siê' )  ) then
    plik_ini.WriteFloat( 'BabyMetal_Statek', 'babymetal_statek__prawdopodobieñstwo_pojawienia_siê', babymetal_statek__prawdopodobieñstwo_pojawienia_siê_g )
  else
    babymetal_statek__prawdopodobieñstwo_pojawienia_siê_g := plik_ini.ReadFloat( 'BabyMetal_Statek', 'babymetal_statek__prawdopodobieñstwo_pojawienia_siê', babymetal_statek__prawdopodobieñstwo_pojawienia_siê_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    begin

      if babymetal_statek__prawdopodobieñstwo_pojawienia_siê_g < 0 then
        babymetal_statek__prawdopodobieñstwo_pojawienia_siê_g := 80
      else//if babymetal_statek__prawdopodobieñstwo_pojawienia_siê_g < 0 then
        if babymetal_statek__prawdopodobieñstwo_pojawienia_siê_g > 100 then
          babymetal_statek__prawdopodobieñstwo_pojawienia_siê_g := 100;

    end;
  //---//if not zapisuj_ustawienia_f then


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'BabyMetal_Statek', 'babymetal_statek__prêdkoœæ_maksymalna' )  ) then
    plik_ini.WriteFloat( 'BabyMetal_Statek', 'babymetal_statek__prêdkoœæ_maksymalna', babymetal_statek__prêdkoœæ_maksymalna_g )
  else
    babymetal_statek__prêdkoœæ_maksymalna_g := plik_ini.ReadFloat( 'BabyMetal_Statek', 'babymetal_statek__prêdkoœæ_maksymalna', babymetal_statek__prêdkoœæ_maksymalna_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( babymetal_statek__prêdkoœæ_maksymalna_g < 0 ) then
    babymetal_statek__prêdkoœæ_maksymalna_g := 1;


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'BabyMetal_Statek', 'babymetal_statek__rotacja_w³asna_prêdkoœæ' )  ) then
    plik_ini.WriteFloat( 'BabyMetal_Statek', 'babymetal_statek__rotacja_w³asna_prêdkoœæ', babymetal_statek__rotacja_w³asna_prêdkoœæ_g )
  else
    babymetal_statek__rotacja_w³asna_prêdkoœæ_g := plik_ini.ReadFloat( 'BabyMetal_Statek', 'babymetal_statek__rotacja_w³asna_prêdkoœæ', babymetal_statek__rotacja_w³asna_prêdkoœæ_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  //if    ( not zapisuj_ustawienia_f )
  //  and ( babymetal_statek__rotacja_w³asna_prêdkoœæ_g <= 0 ) then
  //  babymetal_statek__rotacja_w³asna_prêdkoœæ_g := 1;


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'BabyMetal_Statek', 'babymetal_statek__skala' )  ) then
    plik_ini.WriteFloat( 'BabyMetal_Statek', 'babymetal_statek__skala', babymetal_statek__skala_g )
  else
    babymetal_statek__skala_g := plik_ini.ReadFloat( 'BabyMetal_Statek', 'babymetal_statek__skala', babymetal_statek__skala_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    begin

      if babymetal_statek__skala_g <= 0 then
        babymetal_statek__skala_g := 1;

      BabyMetal_Statek_GLDummyCube.Scale.X := babymetal_statek__skala_g;
      BabyMetal_Statek_GLDummyCube.Scale.Y := BabyMetal_Statek_GLDummyCube.Scale.X;
      BabyMetal_Statek_GLDummyCube.Scale.Z := BabyMetal_Statek_GLDummyCube.Scale.X;

    end;
  //---//if not zapisuj_ustawienia_f then


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'BabyMetal_Statek', 'babymetal_statek__skrêt_prêdkoœæ' )  ) then
    plik_ini.WriteFloat( 'BabyMetal_Statek', 'babymetal_statek__skrêt_prêdkoœæ', babymetal_statek__skrêt_prêdkoœæ_g )
  else
    babymetal_statek__skrêt_prêdkoœæ_g := plik_ini.ReadFloat( 'BabyMetal_Statek', 'babymetal_statek__skrêt_prêdkoœæ', babymetal_statek__skrêt_prêdkoœæ_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( babymetal_statek__skrêt_prêdkoœæ_g <= 0 ) then
    babymetal_statek__skrêt_prêdkoœæ_g := 1;
  {$endregion 'BabyMetal_Statek.'}

  {$region 'GRA.'}
  zts := Boolean_W__Tak_Nie( amunicja__obra¿enia_zasiêg_widoczne_g );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'amunicja__obra¿enia_zasiêg_widoczne' )  ) then
    plik_ini.WriteString( 'GRA', 'amunicja__obra¿enia_zasiêg_widoczne', zts )
  else
    zts := plik_ini.ReadString( 'GRA', 'amunicja__obra¿enia_zasiêg_widoczne', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    amunicja__obra¿enia_zasiêg_widoczne_g := zts = Boolean_W__Tak_Nie( true );


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'amunicja_prêdkoœæ_zakresy__prêdkoœæ' )  ) then
    plik_ini.WriteFloat( 'GRA', 'amunicja_prêdkoœæ_zakresy__prêdkoœæ', amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ__apz )
  else
    amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ__apz := plik_ini.ReadFloat( 'GRA', 'amunicja_prêdkoœæ_zakresy__prêdkoœæ', amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ__apz ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ__apz <= 0 ) then
    amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ__apz := 100;


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'amunicja_prêdkoœæ_zakresy__prêdkoœæ_torpeda' )  ) then
    plik_ini.WriteFloat( 'GRA', 'amunicja_prêdkoœæ_zakresy__prêdkoœæ_torpeda', amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ_torpeda )
  else
    amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ_torpeda := plik_ini.ReadFloat( 'GRA', 'amunicja_prêdkoœæ_zakresy__prêdkoœæ_torpeda', amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ_torpeda ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ_torpeda <= 0 ) then
    amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ_torpeda := 10;


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'amunicja_prêdkoœæ_zakresy__prêdkoœæ_opadania_wspó³czynnik' )  ) then
    plik_ini.WriteFloat( 'GRA', 'amunicja_prêdkoœæ_zakresy__prêdkoœæ_opadania_wspó³czynnik', amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ_opadania_wspó³czynnik )
  else
    amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ_opadania_wspó³czynnik := plik_ini.ReadFloat( 'GRA', 'amunicja_prêdkoœæ_zakresy__prêdkoœæ_opadania_wspó³czynnik', amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ_opadania_wspó³czynnik ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ_opadania_wspó³czynnik <= 0 ) then
    amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ_opadania_wspó³czynnik := 0.015;


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'amunicja_prêdkoœæ_zakresy__zmiana_k¹ta_opadania_prêdkoœæ' )  ) then
    plik_ini.WriteFloat( 'GRA', 'amunicja_prêdkoœæ_zakresy__zmiana_k¹ta_opadania_prêdkoœæ', amunicja_prêdkoœæ_zakresy_r_g.zmiana_k¹ta_opadania_prêdkoœæ )
  else
    amunicja_prêdkoœæ_zakresy_r_g.zmiana_k¹ta_opadania_prêdkoœæ := plik_ini.ReadFloat( 'GRA', 'amunicja_prêdkoœæ_zakresy__zmiana_k¹ta_opadania_prêdkoœæ', amunicja_prêdkoœæ_zakresy_r_g.zmiana_k¹ta_opadania_prêdkoœæ ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( amunicja_prêdkoœæ_zakresy_r_g.zmiana_k¹ta_opadania_prêdkoœæ <= 0 ) then
    amunicja_prêdkoœæ_zakresy_r_g.zmiana_k¹ta_opadania_prêdkoœæ := 50;


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'chmury__iloœæ' )  ) then
    plik_ini.WriteInteger( 'GRA', 'chmury__iloœæ', chmury__iloœæ_g )
  else
    chmury__iloœæ_g := plik_ini.ReadInteger( 'GRA', 'chmury__iloœæ', chmury__iloœæ_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'chmury__pozycje__przeliczenie_sekundy' )  ) then
    plik_ini.WriteInteger( 'GRA', 'chmury__pozycje__przeliczenie_sekundy', chmury__pozycje__przeliczenie_sekundy_g )
  else
    chmury__pozycje__przeliczenie_sekundy_g := plik_ini.ReadInteger( 'GRA', 'chmury__pozycje__przeliczenie_sekundy', chmury__pozycje__przeliczenie_sekundy_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'chmury__rozpiêtoœæ_w__pionie' )  ) then
    plik_ini.WriteInteger( 'GRA', 'chmury__rozpiêtoœæ_w__pionie', chmury__rozpiêtoœæ_w__pionie_g )
  else
    chmury__rozpiêtoœæ_w__pionie_g := plik_ini.ReadInteger( 'GRA', 'chmury__rozpiêtoœæ_w__pionie', chmury__rozpiêtoœæ_w__pionie_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'chmury__rozpiêtoœæ_w__poziomie' )  ) then
    plik_ini.WriteInteger( 'GRA', 'chmury__rozpiêtoœæ_w__poziomie', chmury__rozpiêtoœæ_w__poziomie_g )
  else
    chmury__rozpiêtoœæ_w__poziomie_g := plik_ini.ReadInteger( 'GRA', 'chmury__rozpiêtoœæ_w__poziomie', chmury__rozpiêtoœæ_w__poziomie_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( chmury__rozpiêtoœæ_w__poziomie_g < 0 ) then
    chmury__rozpiêtoœæ_w__poziomie_g := 0;


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'chmury__wysokoœæ' )  ) then
    plik_ini.WriteFloat( 'GRA', 'chmury__wysokoœæ', chmury__wysokoœæ_g )
  else
    chmury__wysokoœæ_g := plik_ini.ReadFloat( 'GRA', 'chmury__wysokoœæ', chmury__wysokoœæ_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Chmury_GLDummyCube.Position.Y := chmury__wysokoœæ_g;


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'dŸwiêk_emiter__wyœwietlanie_poziom' )  ) then
    plik_ini.WriteInteger( 'GRA', 'dŸwiêk_emiter__wyœwietlanie_poziom', dŸwiêk_emiter__wyœwietlanie_poziom_g )
  else
    dŸwiêk_emiter__wyœwietlanie_poziom_g := plik_ini.ReadInteger( 'GRA', 'dŸwiêk_emiter__wyœwietlanie_poziom', dŸwiêk_emiter__wyœwietlanie_poziom_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'dŸwiêk_emiter__zasiêg_minimalny' )  ) then
    plik_ini.WriteFloat( 'GRA', 'dŸwiêk_emiter__zasiêg_minimalny', dŸwiêk_emiter__zasiêg_minimalny_g )
  else
    dŸwiêk_emiter__zasiêg_minimalny_g := plik_ini.ReadFloat( 'GRA', 'dŸwiêk_emiter__zasiêg_minimalny', dŸwiêk_emiter__zasiêg_minimalny_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if dŸwiêk_emiter__zasiêg_minimalny_g <= 0 then
    dŸwiêk_emiter__zasiêg_minimalny_g := 1;


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'fale__obszar_ograniczenie' )  ) then
    plik_ini.WriteFloat( 'GRA', 'fale__obszar_ograniczenie', fale__obszar_ograniczenie_g )
  else
    fale__obszar_ograniczenie_g := plik_ini.ReadFloat( 'GRA', 'fale__obszar_ograniczenie', fale__obszar_ograniczenie_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( fale__obszar_ograniczenie_g < 0 ) then
    fale__obszar_ograniczenie_g := 0;


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'fale__wysokoœæ_bazowa' )  ) then
    plik_ini.WriteFloat( 'GRA', 'fale__wysokoœæ_bazowa', fale__wysokoœæ_bazowa_g )
  else
    fale__wysokoœæ_bazowa_g := plik_ini.ReadFloat( 'GRA', 'fale__wysokoœæ_bazowa', fale__wysokoœæ_bazowa_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( not czy_klient_g ) then
    fale__wysokoœæ_bazowa__serwer_g := fale__wysokoœæ_bazowa_g;


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'kotwica_zakresy__odleg³oœæ_maksymalna' )  ) then
    plik_ini.WriteFloat( 'GRA', 'kotwica_zakresy__odleg³oœæ_maksymalna', kotwica_zakresy_r_g.odleg³oœæ_maksymalna__kz )
  else
    kotwica_zakresy_r_g.odleg³oœæ_maksymalna__kz := plik_ini.ReadFloat( 'GRA', 'kotwica_zakresy__odleg³oœæ_maksymalna', kotwica_zakresy_r_g.odleg³oœæ_maksymalna__kz ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( kotwica_zakresy_r_g.odleg³oœæ_maksymalna__kz <= 0 ) then
    kotwica_zakresy_r_g.odleg³oœæ_maksymalna__kz := Abs( Dno_GLPlane.Position.Y ) * 4;


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'kotwica_zakresy__prêdkoœæ__podnoszenia' )  ) then
    plik_ini.WriteFloat( 'GRA', 'kotwica_zakresy__prêdkoœæ__podnoszenia', kotwica_zakresy_r_g.prêdkoœæ__podnoszenia )
  else
    kotwica_zakresy_r_g.prêdkoœæ__podnoszenia := plik_ini.ReadFloat( 'GRA', 'kotwica_zakresy__prêdkoœæ__podnoszenia', kotwica_zakresy_r_g.prêdkoœæ__podnoszenia ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( kotwica_zakresy_r_g.prêdkoœæ__podnoszenia <= 0 ) then
    kotwica_zakresy_r_g.prêdkoœæ__podnoszenia := 1;


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'kotwica_zakresy__prêdkoœæ__opadania' )  ) then
    plik_ini.WriteFloat( 'GRA', 'kotwica_zakresy__prêdkoœæ__opadania', kotwica_zakresy_r_g.prêdkoœæ__opadania )
  else
    kotwica_zakresy_r_g.prêdkoœæ__opadania := plik_ini.ReadFloat( 'GRA', 'kotwica_zakresy__prêdkoœæ__opadania', kotwica_zakresy_r_g.prêdkoœæ__opadania ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( kotwica_zakresy_r_g.prêdkoœæ__opadania <= 0 ) then
    kotwica_zakresy_r_g.prêdkoœæ__opadania := kotwica_zakresy_r_g.prêdkoœæ__podnoszenia * 4;


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'oczekiwanie_na__naprawienie_elementu__czas_sekund' )  ) then
    plik_ini.WriteInteger( 'GRA', 'oczekiwanie_na__naprawienie_elementu__czas_sekund', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g )
  else
    oczekiwanie_na__naprawienie_elementu__czas_sekundy_g := plik_ini.ReadInteger( 'GRA', 'oczekiwanie_na__naprawienie_elementu__czas_sekund', oczekiwanie_na__naprawienie_elementu__czas_sekundy_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'oczekiwanie_na__odnowienie_statku__czas_sekund' )  ) then
    plik_ini.WriteInteger( 'GRA', 'oczekiwanie_na__odnowienie_statku__czas_sekund', oczekiwanie_na__odnowienie_statku__czas_sekundy_g )
  else
    oczekiwanie_na__odnowienie_statku__czas_sekundy_g := plik_ini.ReadInteger( 'GRA', 'oczekiwanie_na__odnowienie_statku__czas_sekund', oczekiwanie_na__odnowienie_statku__czas_sekundy_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'rekord_statki__wysy³ane_rzadziej__czas_milisekundy' )  ) then
    plik_ini.WriteInteger( 'GRA', 'rekord_statki__wysy³ane_rzadziej__czas_milisekundy', rekord_statki__wysy³ane_rzadziej__czas_milisekundy_g )
  else
    rekord_statki__wysy³ane_rzadziej__czas_milisekundy_g := plik_ini.ReadInteger( 'GRA', 'rekord_statki__wysy³ane_rzadziej__czas_milisekundy', rekord_statki__wysy³ane_rzadziej__czas_milisekundy_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'si__lot_trwanie_do_l¹dowania__czas_sekundy' )  ) then
    plik_ini.WriteInteger( 'GRA', 'si__lot_trwanie_do_l¹dowania__czas_sekundy', si__lot_trwanie_do_l¹dowania__czas_sekundy_g )
  else
    si__lot_trwanie_do_l¹dowania__czas_sekundy_g := plik_ini.ReadInteger( 'GRA', 'si__lot_trwanie_do_l¹dowania__czas_sekundy', si__lot_trwanie_do_l¹dowania__czas_sekundy_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'si__p³ywanie_do_punktu__odnawianie_zasobów__trwanie__czas_sekundy' )  ) then
    plik_ini.WriteInteger( 'GRA', 'si__p³ywanie_do_punktu__odnawianie_zasobów__trwanie__czas_sekundy', si__p³ywanie_do_punktu__odnawianie_zasobów__trwanie__czas_sekundy_g )
  else
    si__p³ywanie_do_punktu__odnawianie_zasobów__trwanie__czas_sekundy_g := plik_ini.ReadInteger( 'GRA', 'si__p³ywanie_do_punktu__odnawianie_zasobów__trwanie__czas_sekundy', si__p³ywanie_do_punktu__odnawianie_zasobów__trwanie__czas_sekundy_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'si__uszkodzenia_wykryto__trwanie__czas_sekundy' )  ) then
    plik_ini.WriteInteger( 'GRA', 'si__uszkodzenia_wykryto__trwanie__czas_sekundy', si__uszkodzenia_wykryto__trwanie__czas_sekundy_g )
  else
    si__uszkodzenia_wykryto__trwanie__czas_sekundy_g := plik_ini.ReadInteger( 'GRA', 'si__uszkodzenia_wykryto__trwanie__czas_sekundy', si__uszkodzenia_wykryto__trwanie__czas_sekundy_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy' )  ) then
    plik_ini.WriteInteger( 'GRA', 'si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy', si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_g )
  else
    si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_g := plik_ini.ReadInteger( 'GRA', 'si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy', si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'si__zak³óca_sekundy' )  ) then
    plik_ini.WriteInteger( 'GRA', 'si__zak³óca_sekundy', si__zak³óca_sekundy_g )
  else
    si__zak³óca_sekundy_g := plik_ini.ReadInteger( 'GRA', 'si__zak³óca_sekundy', si__zak³óca_sekundy_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'wiatr__przeliczenie_sekundy' )  ) then
    plik_ini.WriteInteger( 'GRA', 'wiatr__przeliczenie_sekundy', wiatr__przeliczenie_sekundy_g )
  else
    wiatr__przeliczenie_sekundy_g := plik_ini.ReadInteger( 'GRA', 'wiatr__przeliczenie_sekundy', wiatr__przeliczenie_sekundy_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'wiatr__wp³yw_na__amunicjê__przesuwanie' )  ) then
    plik_ini.WriteFloat( 'GRA', 'wiatr__wp³yw_na__amunicjê__przesuwanie', wiatr__wp³yw_na__amunicjê__przesuwanie_g )
  else
    wiatr__wp³yw_na__amunicjê__przesuwanie_g := plik_ini.ReadFloat( 'GRA', 'wiatr__wp³yw_na__amunicjê__przesuwanie', wiatr__wp³yw_na__amunicjê__przesuwanie_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( wiatr__wp³yw_na__amunicjê__przesuwanie_g < 0 ) then
    wiatr__wp³yw_na__amunicjê__przesuwanie_g := 0;


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'wiatr__wp³yw_na__amunicjê__unoszenie' )  ) then
    plik_ini.WriteFloat( 'GRA', 'wiatr__wp³yw_na__amunicjê__unoszenie', wiatr__wp³yw_na__amunicjê__unoszenie_g )
  else
    wiatr__wp³yw_na__amunicjê__unoszenie_g := plik_ini.ReadFloat( 'GRA', 'wiatr__wp³yw_na__amunicjê__unoszenie', wiatr__wp³yw_na__amunicjê__unoszenie_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( wiatr__wp³yw_na__amunicjê__unoszenie_g < 0 ) then
    wiatr__wp³yw_na__amunicjê__unoszenie_g := 0;


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'wiatr__wp³yw_na__statek__obrót' )  ) then
    plik_ini.WriteFloat( 'GRA', 'wiatr__wp³yw_na__statek__obrót', wiatr__wp³yw_na__statek__obrót_g )
  else
    wiatr__wp³yw_na__statek__obrót_g := plik_ini.ReadFloat( 'GRA', 'wiatr__wp³yw_na__statek__obrót', wiatr__wp³yw_na__statek__obrót_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( wiatr__wp³yw_na__statek__obrót_g < 0 ) then
    wiatr__wp³yw_na__statek__obrót_g := 0;


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'wiatr__wp³yw_na__statek__przesuwanie' )  ) then
    plik_ini.WriteFloat( 'GRA', 'wiatr__wp³yw_na__statek__przesuwanie', wiatr__wp³yw_na__statek__przesuwanie_g )
  else
    wiatr__wp³yw_na__statek__przesuwanie_g := plik_ini.ReadFloat( 'GRA', 'wiatr__wp³yw_na__statek__przesuwanie', wiatr__wp³yw_na__statek__przesuwanie_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( wiatr__wp³yw_na__statek__przesuwanie_g < 0 ) then
    wiatr__wp³yw_na__statek__przesuwanie_g := 0;


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'wiatr__wp³yw_na__statek__unoszenie' )  ) then
    plik_ini.WriteFloat( 'GRA', 'wiatr__wp³yw_na__statek__unoszenie', wiatr__wp³yw_na__statek__unoszenie_g )
  else
    wiatr__wp³yw_na__statek__unoszenie_g := plik_ini.ReadFloat( 'GRA', 'wiatr__wp³yw_na__statek__unoszenie', wiatr__wp³yw_na__statek__unoszenie_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( wiatr__wp³yw_na__statek__unoszenie_g < 0 ) then
    wiatr__wp³yw_na__statek__unoszenie_g := 0;


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'wieloosobowe__komenda__gra__serwer_czas_wyœlij_sekundy' )  ) then
    plik_ini.WriteInteger( 'GRA', 'wieloosobowe__komenda__gra__serwer_czas_wyœlij_sekundy', wieloosobowe__komenda__gra__serwer_czas_wyœlij_sekundy )
  else
    wieloosobowe__komenda__gra__serwer_czas_wyœlij_sekundy := plik_ini.ReadInteger( 'GRA', 'wieloosobowe__komenda__gra__serwer_czas_wyœlij_sekundy', wieloosobowe__komenda__gra__serwer_czas_wyœlij_sekundy ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.


  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'zak³ócanie__czas_do_ponownej_próby_sekundy' )  ) then
    plik_ini.WriteInteger( 'GRA', 'zak³ócanie__czas_do_ponownej_próby_sekundy', zak³ócanie__czas_do_ponownej_próby_sekundy_g )
  else
    zak³ócanie__czas_do_ponownej_próby_sekundy_g := plik_ini.ReadInteger( 'GRA', 'zak³ócanie__czas_do_ponownej_próby_sekundy', zak³ócanie__czas_do_ponownej_próby_sekundy_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'GRA', 'zak³ócenie__prawdopodobieñstwo_sukcesu_procent' )  ) then
    plik_ini.WriteInteger( 'GRA', 'zak³ócenie__prawdopodobieñstwo_sukcesu_procent', zak³ócenie__prawdopodobieñstwo_sukcesu_procent_g )
  else
    zak³ócenie__prawdopodobieñstwo_sukcesu_procent_g := plik_ini.ReadInteger( 'GRA', 'zak³ócenie__prawdopodobieñstwo_sukcesu_procent', zak³ócenie__prawdopodobieñstwo_sukcesu_procent_g ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.
  {$endregion 'GRA.'}

  {$region 'KLAWIATURA_KONFIGURACJA.'}
  zti := Klawiatura_Konfiguracja__Konfiguracja_Numer_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'KLAWIATURA_KONFIGURACJA', 'klawiatura_konfiguracja__konfiguracja_numer' )  ) then
    plik_ini.WriteInteger( 'KLAWIATURA_KONFIGURACJA', 'klawiatura_konfiguracja__konfiguracja_numer', zti )
  else
    zti := plik_ini.ReadInteger( 'KLAWIATURA_KONFIGURACJA', 'klawiatura_konfiguracja__konfiguracja_numer', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Klawiatura_Konfiguracja__Konfiguracja_Numer_SpinEdit.Value := zti;


  zts := Boolean_W__Tak_Nie( Klawiatura_Konfiguracja__Rozmiar_Zak³adki_Poszerz_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'KLAWIATURA_KONFIGURACJA', 'klawiatura_konfiguracja__rozmiar_zak³adki_poszerz' )  ) then
    plik_ini.WriteString( 'KLAWIATURA_KONFIGURACJA', 'klawiatura_konfiguracja__rozmiar_zak³adki_poszerz', zts )
  else
    zts := plik_ini.ReadString( 'KLAWIATURA_KONFIGURACJA', 'klawiatura_konfiguracja__rozmiar_zak³adki_poszerz', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Klawiatura_Konfiguracja__Rozmiar_Zak³adki_Poszerz_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Klawiatura_Konfiguracja__Szukaj__Pasuj¹ce_Tylko_Wyœwietlaj_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'KLAWIATURA_KONFIGURACJA', 'klawiatura_konfiguracja__szukaj__pasuj¹ce_tylko_wyœwietlaj' )  ) then
    plik_ini.WriteString( 'KLAWIATURA_KONFIGURACJA', 'klawiatura_konfiguracja__szukaj__pasuj¹ce_tylko_wyœwietlaj', zts )
  else
    zts := plik_ini.ReadString( 'KLAWIATURA_KONFIGURACJA', 'klawiatura_konfiguracja__szukaj__pasuj¹ce_tylko_wyœwietlaj', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Klawiatura_Konfiguracja__Szukaj__Pasuj¹ce_Tylko_Wyœwietlaj_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );
  {$endregion 'KLAWIATURA_KONFIGURACJA.'}

  {$region 'POZOSTA£E.'}
  zti := Czcionka_Wielkoœæ__Ekran_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'czcionka_wielkoœæ__ekran' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'czcionka_wielkoœæ__ekran', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'czcionka_wielkoœæ__ekran', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    begin

      if zti <= 0 then
        zti := 16;

      Czcionka_Wielkoœæ__Ekran_SpinEdit.Value := zti;

    end;
  //---//if not zapisuj_ustawienia_f then


  zti := Czcionka_Wielkoœæ__Radar_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'czcionka_wielkoœæ__radar' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'czcionka_wielkoœæ__radar', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'czcionka_wielkoœæ__radar', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    begin

      if zti <= 0 then
        zti := 11;

      Czcionka_Wielkoœæ__Radar_SpinEdit.Value := zti;

    end;
  //---//if not zapisuj_ustawienia_f then


  zts := Boolean_W__Tak_Nie( Delta_Czasu_Wyœwietlaj_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'delta_czasu_wyœwietlaj' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'delta_czasu_wyœwietlaj', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'delta_czasu_wyœwietlaj', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Delta_Czasu_Wyœwietlaj_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Efekty__Dym_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'efekty__dym' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'efekty__dym', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'efekty__dym', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Efekty__Dym_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Efekty__Element_Uszkodzenie_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'efekty__element_uszkodzenie' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'efekty__element_uszkodzenie', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'efekty__element_uszkodzenie', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Efekty__Element_Uszkodzenie_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Efekty__Mg³a_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'efekty__mg³a' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'efekty__mg³a', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'efekty__mg³a', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Efekty__Mg³a_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Efekty__Ogieñ_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'efekty__ogieñ' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'efekty__ogieñ', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'efekty__ogieñ', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Efekty__Ogieñ_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Efekty__Smuga_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'efekty__smuga' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'efekty__smuga', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'efekty__smuga', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Efekty__Smuga_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Efekty__Smuga_D³uga_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'efekty__smuga_d³uga' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'efekty__smuga_d³uga', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'efekty__smuga_d³uga', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Efekty__Smuga_D³uga_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Efekty__Sonarowe_U³atwienie_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'efekty__sonarowe_u³atwienie' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'efekty__sonarowe_u³atwienie', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'efekty__sonarowe_u³atwienie', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Efekty__Sonarowe_U³atwienie_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Efekty__SOS_Rozb³ysk_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'efekty__sos_rozb³ysk' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'efekty__sos_rozb³ysk', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'efekty__sos_rozb³ysk', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Efekty__SOS_Rozb³ysk_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Efekty__Trafienie_Rozb³ysk_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'efekty__trafienie_rozb³ysk' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'efekty__trafienie_rozb³ysk', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'efekty__trafienie_rozb³ysk', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Efekty__Trafienie_Rozb³ysk_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Efekty__Wpadniêcie_Do_Wody_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'efekty__wpadniêcie_do_wody' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'efekty__wpadniêcie_do_wody', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'efekty__wpadniêcie_do_wody', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Efekty__Wpadniêcie_Do_Wody_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Efekty__Wpadniêcie_Do_Wody_0_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'efekty__wpadniêcie_do_wody_0' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'efekty__wpadniêcie_do_wody_0', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'efekty__wpadniêcie_do_wody_0', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Efekty__Wpadniêcie_Do_Wody_0_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Gwiazdy_Migotanie_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'gwiazdy_migotanie' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'gwiazdy_migotanie', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'gwiazdy_migotanie', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Gwiazdy_Migotanie_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  //zti := Kamera_Odleg³oœæ_Maksymalna_SpinEdit.Value;
  //
  //if   (  zapisuj_ustawienia_f )
  //  or (  not plik_ini.ValueExists( 'POZOSTA£E', 'kamera_odleg³oœæ_maksymalna' )  ) then
  //  plik_ini.WriteInteger( 'POZOSTA£E', 'kamera_odleg³oœæ_maksymalna', zti )
  //else
  //  zti := plik_ini.ReadInteger( 'POZOSTA£E', 'kamera_odleg³oœæ_maksymalna', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.
  //
  //if not zapisuj_ustawienia_f then
  //  Kamera_Odleg³oœæ_Maksymalna_SpinEdit.Value := zti;


  zts := Boolean_W__Tak_Nie( Klatek_Na_Sekundê_Wyœwietlaj_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'klatek_na_sekundê_wyœwietlaj' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'klatek_na_sekundê_wyœwietlaj', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'klatek_na_sekundê_wyœwietlaj', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Klatek_Na_Sekundê_Wyœwietlaj_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := Niebo_Rodzaj_RadioGroup.ItemIndex;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'niebo_rodzaj' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'niebo_rodzaj', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'niebo_rodzaj', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( Niebo_Rodzaj_RadioGroup.Items.Count > 0 )
    and ( zti >= 0 )
    and ( zti <= Niebo_Rodzaj_RadioGroup.Items.Count - 1 ) then
    Niebo_Rodzaj_RadioGroup.ItemIndex := zti;


  zts := Boolean_W__Tak_Nie( Projektowy_Tryb_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'projektowy_tryb' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'projektowy_tryb', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'projektowy_tryb', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if    ( not zapisuj_ustawienia_f )
    and ( not czy_klient_g ) then
    Projektowy_Tryb_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Projektowy_Tryb__Grawitacja_Wy³¹cz_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'projektowy_tryb__grawitacja_wy³¹cz' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'projektowy_tryb__grawitacja_wy³¹cz', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'projektowy_tryb__grawitacja_wy³¹cz', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if    ( not zapisuj_ustawienia_f )
    and ( not czy_klient_g ) then
    Projektowy_Tryb__Grawitacja_Wy³¹cz_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Projektowy_Tryb__Przesuwanie_Skaluj_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'projektowy_tryb__przesuwanie_skaluj' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'projektowy_tryb__przesuwanie_skaluj', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'projektowy_tryb__przesuwanie_skaluj', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Projektowy_Tryb__Przesuwanie_Skaluj_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Projektowy_Tryb__Wspó³rzêdne_Sceny_Wyœwietlaj_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'projektowy_tryb__wspó³rzêdne_sceny_wyœwietlaj' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'projektowy_tryb__wspó³rzêdne_sceny_wyœwietlaj', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'projektowy_tryb__wspó³rzêdne_sceny_wyœwietlaj', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Projektowy_Tryb__Wspó³rzêdne_Sceny_Wyœwietlaj_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Prze³adowanie_WskaŸnik_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'prze³adowanie_wskaŸnik' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'prze³adowanie_wskaŸnik', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'prze³adowanie_wskaŸnik', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Prze³adowanie_WskaŸnik_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Punkt_Naprowadzaj_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'punkt_naprowadzaj' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'punkt_naprowadzaj', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'punkt_naprowadzaj', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Punkt_Naprowadzaj_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Punkt_Naprowadzaj__Na_Lotniskowiec_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'punkt_naprowadzaj__na_lotniskowiec' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'punkt_naprowadzaj__na_lotniskowiec', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'punkt_naprowadzaj__na_lotniskowiec', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Punkt_Naprowadzaj__Na_Lotniskowiec_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Punkt_Naprowadzaj__Odleg³oœæ_Do_Punktu_Prezentuj_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'punkt_naprowadzaj__odleg³oœæ_do_punktu_prezentuj' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'punkt_naprowadzaj__odleg³oœæ_do_punktu_prezentuj', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'punkt_naprowadzaj__odleg³oœæ_do_punktu_prezentuj', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Punkt_Naprowadzaj__Odleg³oœæ_Do_Punktu_Prezentuj_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Punkt_Naprowadzaj__Punkt_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'punkt_naprowadzaj__punkt' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'punkt_naprowadzaj__punkt', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'punkt_naprowadzaj__punkt', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Punkt_Naprowadzaj__Punkt_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Punkt_Naprowadzaj__Radar_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'punkt_naprowadzaj__radar' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'punkt_naprowadzaj__radar', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'punkt_naprowadzaj__radar', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Punkt_Naprowadzaj__Radar_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Punkt_Naprowadzaj__Strza³ka_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'punkt_naprowadzaj__strza³ka' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'punkt_naprowadzaj__strza³ka', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'punkt_naprowadzaj__strza³ka', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Punkt_Naprowadzaj__Strza³ka_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := Radar__Niebo_Rodzaj_RadioGroup.ItemIndex;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'radar__niebo_rodzaj' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'radar__niebo_rodzaj', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'radar__niebo_rodzaj', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( Radar__Niebo_Rodzaj_RadioGroup.Items.Count > 0 )
    and ( zti >= 0 )
    and ( zti <= Radar__Niebo_Rodzaj_RadioGroup.Items.Count - 1 ) then
    Radar__Niebo_Rodzaj_RadioGroup.ItemIndex := zti;


  zts := Boolean_W__Tak_Nie( SI__Patrol_Blisko_Zostaje_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'si__patrol_blisko_zostaje' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'si__patrol_blisko_zostaje', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'si__patrol_blisko_zostaje', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if    ( not zapisuj_ustawienia_f )
    and ( not czy_klient_g ) then
    SI__Patrol_Blisko_Zostaje_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( SI__P³ywa_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'si__p³ywa' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'si__p³ywa', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'si__p³ywa', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if    ( not zapisuj_ustawienia_f )
    and ( not czy_klient_g ) then
    SI__P³ywa_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( SI__Strzela_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'si__strzela' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'si__strzela', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'si__strzela', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if    ( not zapisuj_ustawienia_f )
    and ( not czy_klient_g ) then
    SI__Strzela_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Statki_Przywracaj_Do_Gry_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'statki_przywracaj_do_gry' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'statki_przywracaj_do_gry', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'statki_przywracaj_do_gry', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if    ( not zapisuj_ustawienia_f )
    and ( not czy_klient_g ) then
    Statki_Przywracaj_Do_Gry_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Statki_Zaprezentuj__Kolumna_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'statki_zaprezentuj__kolumna' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'statki_zaprezentuj__kolumna', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'statki_zaprezentuj__kolumna', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Statki_Zaprezentuj__Kolumna_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := Statki_Zaprezentuj__Odstêpy_Miêdzy_Statkami_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'statki_zaprezentuj__odstêpy_miêdzy_statkami' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'statki_zaprezentuj__odstêpy_miêdzy_statkami', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'statki_zaprezentuj__odstêpy_miêdzy_statkami', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Statki_Zaprezentuj__Odstêpy_Miêdzy_Statkami_SpinEdit.Value := zti;


  zti := Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__X_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'statki_zaprezentuj__pozycja_pocz¹tkowa__x' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'statki_zaprezentuj__pozycja_pocz¹tkowa__x', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'statki_zaprezentuj__pozycja_pocz¹tkowa__x', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__X_SpinEdit.Value := zti;


  zti := Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__Y_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'statki_zaprezentuj__pozycja_pocz¹tkowa__y' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'statki_zaprezentuj__pozycja_pocz¹tkowa__y', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'statki_zaprezentuj__pozycja_pocz¹tkowa__y', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__Y_SpinEdit.Value := zti;


  zti := Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__Z_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'statki_zaprezentuj__pozycja_pocz¹tkowa__z' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'statki_zaprezentuj__pozycja_pocz¹tkowa__z', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'statki_zaprezentuj__pozycja_pocz¹tkowa__z', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__Z_SpinEdit.Value := zti;


  zts := ',';

  for zti := 0 to Statki_Zaprezentuj_CheckListBox.Items.Count - 1 do
    if Statki_Zaprezentuj_CheckListBox.Checked[ zti ] then
      zts := zts +
        ' ' + IntToStr( zti ) + ',';

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'statki_zaprezentuj__statki_wybrane' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'statki_zaprezentuj__statki_wybrane', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'statki_zaprezentuj__statki_wybrane', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    for zti := 0 to Statki_Zaprezentuj_CheckListBox.Items.Count - 1 do
      Statki_Zaprezentuj_CheckListBox.Checked[ zti ] := Pos( ', ' + IntToStr( zti ) + ',', zts ) > 0;


  zts := Boolean_W__Tak_Nie( Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'œwiat³a_miganie__funkcjonalnoœæ_aktywna' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'œwiat³a_miganie__funkcjonalnoœæ_aktywna', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'œwiat³a_miganie__funkcjonalnoœæ_aktywna', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 't³umaczenie__t³umacz_polecenia_dla_si' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 't³umaczenie__t³umacz_polecenia_dla_si', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 't³umaczenie__t³umacz_polecenia_dla_si', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    begin

      T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.OnClick := nil; // Aby dwa razy nie wczytywa³ t³umaczeñ.
      T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );
      T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.OnClick := T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBoxClick;

    end;
  //---//if not zapisuj_ustawienia_f then


  zts := Boolean_W__Tak_Nie( Trafienia_W_Logu_Wpisuj_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'trafienia_w_logu_wpisuj' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'trafienia_w_logu_wpisuj', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'trafienia_w_logu_wpisuj', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Trafienia_W_Logu_Wpisuj_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Wiatr_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'wiatr' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'wiatr', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'wiatr', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if    ( not zapisuj_ustawienia_f )
    and ( not czy_klient_g ) then
    Wiatr_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Wiatr__Kierunek_Wyœwietlaj_Na__Ekranie_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'wiatr__kierunek_wyœwietlaj_na__ekranie' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'wiatr__kierunek_wyœwietlaj_na__ekranie', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'wiatr__kierunek_wyœwietlaj_na__ekranie', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Wiatr__Kierunek_Wyœwietlaj_Na__Ekranie_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Wiatr__Kierunek_Wyœwietlaj_Na__Radarze_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'wiatr__kierunek_wyœwietlaj_na__radarze' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'wiatr__kierunek_wyœwietlaj_na__radarze', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'wiatr__kierunek_wyœwietlaj_na__radarze', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Wiatr__Kierunek_Wyœwietlaj_Na__Radarze_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := Wiatr__Si³a_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'wiatr__si³a' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'wiatr__si³a', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'wiatr__si³a', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Wiatr__Si³a_SpinEdit.Value := zti;


  zts := Boolean_W__Tak_Nie( Wiatr__Wp³yw_Na_Rozgrywkê_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'wiatr__wp³yw_na_rozgrywkê' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'wiatr__wp³yw_na_rozgrywkê', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'wiatr__wp³yw_na_rozgrywkê', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if    ( not zapisuj_ustawienia_f )
    and ( not czy_klient_g ) then
    Wiatr__Wp³yw_Na_Rozgrywkê_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := Wiatr__Zmiana_Tryb_RadioGroup.ItemIndex;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'wiatr__zmiana_tryb' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'wiatr__zmiana_tryb', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'wiatr__zmiana_tryb', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Wiatr__Zmiana_Tryb_RadioGroup.ItemIndex := zti;


  zts := Boolean_W__Tak_Nie( Zak³ócanie__Dozwolone_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zak³ócanie__dozwolone' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'zak³ócanie__dozwolone', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'zak³ócanie__dozwolone', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if    ( not zapisuj_ustawienia_f )
    and ( not czy_klient_g ) then
    Zak³ócanie__Dozwolone_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Zak³ócanie__Graczy_Nie_SI_Dozwolone_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zak³ócanie__graczy_nie_si_dozwolone' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'zak³ócanie__graczy_nie_si_dozwolone', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'zak³ócanie__graczy_nie_si_dozwolone', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if    ( not zapisuj_ustawienia_f )
    and ( not czy_klient_g ) then
    Zak³ócanie__Graczy_Nie_SI_Dozwolone_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  {$region 'Zmieniaj automatycznie intensywnoœæ.'}
  zts := Boolean_W__Tak_Nie( Zmieniaj_Automatycznie__Mg³a_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zmieniaj_automatycznie__mg³a' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'zmieniaj_automatycznie__mg³a', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'zmieniaj_automatycznie__mg³a', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Zmieniaj_Automatycznie__Mg³a_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Zmieniaj_Automatycznie__Mg³a__Kierunek_Rosn¹co_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zmieniaj_automatycznie__mg³a__kierunek_rosn¹co' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'zmieniaj_automatycznie__mg³a__kierunek_rosn¹co', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'zmieniaj_automatycznie__mg³a__kierunek_rosn¹co', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Zmieniaj_Automatycznie__Mg³a__Kierunek_Rosn¹co_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := Zmieniaj_Automatycznie__Mg³a__Od_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zmieniaj_automatycznie__mg³a__od' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__mg³a__od', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__mg³a__od', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Zmieniaj_Automatycznie__Mg³a__Od_SpinEdit.Value := zti;


  zti := Zmieniaj_Automatycznie__Mg³a__Do_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zmieniaj_automatycznie__mg³a__do' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__mg³a__do', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__mg³a__do', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Zmieniaj_Automatycznie__Mg³a__Do_SpinEdit.Value := zti;


  zti := Zmieniaj_Automatycznie__Mg³a__Si³a_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zmieniaj_automatycznie__mg³a__si³a' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__mg³a__si³a', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__mg³a__si³a', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Zmieniaj_Automatycznie__Mg³a__Si³a_SpinEdit.Value := zti;


  zti := Zmieniaj_Automatycznie__Mg³a__Szybkoœæ_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zmieniaj_automatycznie__mg³a__szybkoœæ' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__mg³a__szybkoœæ', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__mg³a__szybkoœæ', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Zmieniaj_Automatycznie__Mg³a__Szybkoœæ_SpinEdit.Value := zti;


  zti := Zmieniaj_Automatycznie__Mg³a__Losowoœæ_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zmieniaj_automatycznie__mg³a__losowoœæ' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__mg³a__losowoœæ', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__mg³a__losowoœæ', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Zmieniaj_Automatycznie__Mg³a__Losowoœæ_SpinEdit.Value := zti;


  zts := Boolean_W__Tak_Nie( Zmieniaj_Automatycznie__Morze_Wzburzenie_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zmieniaj_automatycznie__morze_wzburzenie' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'zmieniaj_automatycznie__morze_wzburzenie', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'zmieniaj_automatycznie__morze_wzburzenie', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Zmieniaj_Automatycznie__Morze_Wzburzenie_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Zmieniaj_Automatycznie__Morze_Wzburzenie__Kierunek_Rosn¹co_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zmieniaj_automatycznie__morze_wzburzenie__kierunek_rosn¹co' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'zmieniaj_automatycznie__morze_wzburzenie__kierunek_rosn¹co', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'zmieniaj_automatycznie__morze_wzburzenie__kierunek_rosn¹co', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Zmieniaj_Automatycznie__Morze_Wzburzenie__Kierunek_Rosn¹co_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := Zmieniaj_Automatycznie__Morze_Wzburzenie__Od_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zmieniaj_automatycznie__morze_wzburzenie__od' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__morze_wzburzenie__od', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__morze_wzburzenie__od', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Zmieniaj_Automatycznie__Morze_Wzburzenie__Od_SpinEdit.Value := zti;


  zti := Zmieniaj_Automatycznie__Morze_Wzburzenie__Do_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zmieniaj_automatycznie__morze_wzburzenie__do' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__morze_wzburzenie__do', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__morze_wzburzenie__do', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Zmieniaj_Automatycznie__Morze_Wzburzenie__Do_SpinEdit.Value := zti;


  zti := Zmieniaj_Automatycznie__Morze_Wzburzenie__Si³a_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zmieniaj_automatycznie__morze_wzburzenie__si³a' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__morze_wzburzenie__si³a', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__morze_wzburzenie__si³a', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Zmieniaj_Automatycznie__Morze_Wzburzenie__Si³a_SpinEdit.Value := zti;


  zti := Zmieniaj_Automatycznie__Morze_Wzburzenie__Szybkoœæ_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zmieniaj_automatycznie__morze_wzburzenie__szybkoœæ' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__morze_wzburzenie__szybkoœæ', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__morze_wzburzenie__szybkoœæ', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Zmieniaj_Automatycznie__Morze_Wzburzenie__Szybkoœæ_SpinEdit.Value := zti;


  zti := Zmieniaj_Automatycznie__Morze_Wzburzenie__Losowoœæ_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zmieniaj_automatycznie__morze_wzburzenie__losowoœæ' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__morze_wzburzenie__losowoœæ', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__morze_wzburzenie__losowoœæ', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Zmieniaj_Automatycznie__Morze_Wzburzenie__Losowoœæ_SpinEdit.Value := zti;


  zts := Boolean_W__Tak_Nie( Zmieniaj_Automatycznie__Noc_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zmieniaj_automatycznie__noc' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'zmieniaj_automatycznie__noc', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'zmieniaj_automatycznie__noc', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Zmieniaj_Automatycznie__Noc_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Zmieniaj_Automatycznie__Noc__Kierunek_Rosn¹co_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zmieniaj_automatycznie__noc__kierunek_rosn¹co' )  ) then
    plik_ini.WriteString( 'POZOSTA£E', 'zmieniaj_automatycznie__noc__kierunek_rosn¹co', zts )
  else
    zts := plik_ini.ReadString( 'POZOSTA£E', 'zmieniaj_automatycznie__noc__kierunek_rosn¹co', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Zmieniaj_Automatycznie__Noc__Kierunek_Rosn¹co_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := Zmieniaj_Automatycznie__Noc__Od_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zmieniaj_automatycznie__noc__od' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__noc__od', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__noc__od', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Zmieniaj_Automatycznie__Noc__Od_SpinEdit.Value := zti;


  zti := Zmieniaj_Automatycznie__Noc__Do_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zmieniaj_automatycznie__noc__do' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__noc__do', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__noc__do', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Zmieniaj_Automatycznie__Noc__Do_SpinEdit.Value := zti;


  zti := Zmieniaj_Automatycznie__Noc__Si³a_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zmieniaj_automatycznie__noc__si³a' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__noc__si³a', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__noc__si³a', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Zmieniaj_Automatycznie__Noc__Si³a_SpinEdit.Value := zti;


  zti := Zmieniaj_Automatycznie__Noc__Szybkoœæ_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zmieniaj_automatycznie__noc__szybkoœæ' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__noc__szybkoœæ', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__noc__szybkoœæ', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Zmieniaj_Automatycznie__Noc__Szybkoœæ_SpinEdit.Value := zti;


  zti := Zmieniaj_Automatycznie__Noc__Losowoœæ_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'POZOSTA£E', 'zmieniaj_automatycznie__noc__losowoœæ' )  ) then
    plik_ini.WriteInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__noc__losowoœæ', zti )
  else
    zti := plik_ini.ReadInteger( 'POZOSTA£E', 'zmieniaj_automatycznie__noc__losowoœæ', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Zmieniaj_Automatycznie__Noc__Losowoœæ_SpinEdit.Value := zti;
  {$endregion 'Zmieniaj automatycznie intensywnoœæ.'}
  {$endregion 'POZOSTA£E.'}

  {$region 'PREFERENCJE.'}
  zti := 1;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'PREFERENCJE', 'gracz_grupa' )  ) then
    plik_ini.WriteInteger( 'PREFERENCJE', 'gracz_grupa', zti )
  else
    zti := plik_ini.ReadInteger( 'PREFERENCJE', 'gracz_grupa', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Gracz_Grupa_SpinEdit.Value := zti;


  zts := Gracz_Nazwa_Edit.Text;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'PREFERENCJE', 'gracz_nazwa' )  ) then
    plik_ini.WriteString( 'PREFERENCJE', 'gracz_nazwa', zts )
  else
    zts := plik_ini.ReadString( 'PREFERENCJE', 'gracz_nazwa', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Gracz_Nazwa_Edit.Text := zts;


  //zts = Boolean_W__Tak_Nie( kamera_obrót_mysz¹_g );
  //if kamera_obrót_mysz¹_g then
  //  zts := 'tak'
  //else//if kamera_obrót_mysz¹_g then
  //  zts := 'nie';
  //
  //if   (  zapisuj_ustawienia_f )
  //  or (  not plik_ini.ValueExists( 'PREFERENCJE', 'kamera_obrót_mysz¹' )  ) then
  //  plik_ini.WriteString( 'PREFERENCJE', 'kamera_obrót_mysz¹', zts )
  //else
  //  zts := plik_ini.ReadString( 'PREFERENCJE', 'kamera_obrót_mysz¹', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.
  //
  //if not zapisuj_ustawienia_f then
  //  kamera_obrót_mysz¹_g := zts = Boolean_W__Tak_Nie( true );


  zti := L¹d_ComboBox.ItemIndex;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'PREFERENCJE', 'l¹d' )  ) then
    plik_ini.WriteInteger( 'PREFERENCJE', 'l¹d', zti )
  else
    zti := plik_ini.ReadInteger( 'PREFERENCJE', 'l¹d', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( L¹d_ComboBox.Enabled ) then // Aby nie zmieniaæ mapy gdy nie jest to wskazane (np. wczytanie ustawieñ podczas gry).
    L¹d_ComboBox.ItemIndex := zti; // Nie wywo³a L¹d_ComboBoxChange().


  zts := Boolean_W__Tak_Nie( L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'PREFERENCJE', 'l¹d__komunikat_b³êdu_pomiñ' )  ) then
    plik_ini.WriteString( 'PREFERENCJE', 'l¹d__komunikat_b³êdu_pomiñ', zts )
  else
    zts := plik_ini.ReadString( 'PREFERENCJE', 'l¹d__komunikat_b³êdu_pomiñ', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := SI__Schemat_ComboBox.ItemIndex;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'PREFERENCJE', 'si__schemat' )  ) then
    plik_ini.WriteInteger( 'PREFERENCJE', 'si__schemat', zti )
  else
    zti := plik_ini.ReadInteger( 'PREFERENCJE', 'si__schemat', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    SI__Schemat_ComboBox.ItemIndex := zti; // Nie wywo³a SI__Schemat_ComboBox_ComboBoxChange().


  zts := Boolean_W__Tak_Nie( SI__Schemat__Zastosuj__Pomiñ__L¹d_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'PREFERENCJE', 'si__schemat__zastosuj__pomiñ__l¹d' )  ) then
    plik_ini.WriteString( 'PREFERENCJE', 'si__schemat__zastosuj__pomiñ__l¹d', zts )
  else
    zts := plik_ini.ReadString( 'PREFERENCJE', 'si__schemat__zastosuj__pomiñ__l¹d', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    SI__Schemat__Zastosuj__Pomiñ__L¹d_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( SI__Schemat__Zastosuj__Pomiñ__Statki_Pozycje_Pocz¹tkowe_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'PREFERENCJE', 'si__schemat__zastosuj__pomiñ__statki_pozycje_pocz¹tkowe' )  ) then
    plik_ini.WriteString( 'PREFERENCJE', 'si__schemat__zastosuj__pomiñ__statki_pozycje_pocz¹tkowe', zts )
  else
    zts := plik_ini.ReadString( 'PREFERENCJE', 'si__schemat__zastosuj__pomiñ__statki_pozycje_pocz¹tkowe', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    SI__Schemat__Zastosuj__Pomiñ__Statki_Pozycje_Pocz¹tkowe_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := Statek_ComboBox.ItemIndex;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'PREFERENCJE', 'statek' )  ) then
    plik_ini.WriteInteger( 'PREFERENCJE', 'statek', zti )
  else
    zti := plik_ini.ReadInteger( 'PREFERENCJE', 'statek', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( Statek_ComboBox.Enabled ) then // Aby nie zmieniaæ statku gdy nie jest to wskazane (np. wczytanie ustawieñ podczas gry).
    Statek_ComboBox.ItemIndex := zti; // Nie wywo³a Statek_ComboBoxChange().


  zti := Statek__Samolot_ComboBox.ItemIndex;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'PREFERENCJE', 'statek__samolot' )  ) then
    plik_ini.WriteInteger( 'PREFERENCJE', 'statek__samolot', zti )
  else
    zti := plik_ini.ReadInteger( 'PREFERENCJE', 'statek__samolot', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Statek__Samolot_ComboBox.ItemIndex := zti; // Nie wywo³a Statek__Samolot_ComboBoxChange().


  zts := Boolean_W__Tak_Nie( Statek__Komunikat_B³êdu_Pomiñ_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'PREFERENCJE', 'statek__komunikat_b³êdu_pomiñ' )  ) then
    plik_ini.WriteString( 'PREFERENCJE', 'statek__komunikat_b³êdu_pomiñ', zts )
  else
    zts := plik_ini.ReadString( 'PREFERENCJE', 'statek__komunikat_b³êdu_pomiñ', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Statek__Komunikat_B³êdu_Pomiñ_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'PREFERENCJE', 'statki_pozycje_pocz¹tkowe' )  ) then
    plik_ini.WriteInteger( 'PREFERENCJE', 'statki_pozycje_pocz¹tkowe', zti )
  else
    zti := plik_ini.ReadInteger( 'PREFERENCJE', 'statki_pozycje_pocz¹tkowe', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( Statki_Pozycje_Pocz¹tkowe_ComboBox.Enabled ) then // Aby nie zmieniaæ pozycji pocz¹tkowych gdy nie jest to wskazane (np. wczytanie ustawieñ podczas gry).
    Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex := zti; // Nie wywo³a Statki_Pozycje_Pocz¹tkowe_ComboBoxChange().


  zts := Boolean_W__Tak_Nie( Statystyki_W_Logu_Wypisz_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'PREFERENCJE', 'statystyki_w_logu_wypisz' )  ) then
    plik_ini.WriteString( 'PREFERENCJE', 'statystyki_w_logu_wypisz', zts )
  else
    zts := plik_ini.ReadString( 'PREFERENCJE', 'statystyki_w_logu_wypisz', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Statystyki_W_Logu_Wypisz_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );
  {$endregion 'PREFERENCJE.'}

  {$region 'STATYSTYKI.'}
  zts := Boolean_W__Tak_Nie( Statystyki__Rozmiar_Zak³adki_Poszerz_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'STATYSTYKI', 'statystyki__rozmiar_zak³adki_poszerz' )  ) then
    plik_ini.WriteString( 'STATYSTYKI', 'statystyki__rozmiar_zak³adki_poszerz', zts )
  else
    zts := plik_ini.ReadString( 'STATYSTYKI', 'statystyki__rozmiar_zak³adki_poszerz', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Statystyki__Rozmiar_Zak³adki_Poszerz_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );
  {$endregion 'STATYSTYKI.'}

  {$region 'USTAWIENIA.'}
  zts := Boolean_W__Tak_Nie( Amunicja__Cel_Pozycja_Dla_Lotu_Parabol¹_Wyœwietl_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'amunicja__cel_pozycja_dla_lotu_parabol¹_wyœwietl' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'amunicja__cel_pozycja_dla_lotu_parabol¹_wyœwietl', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'amunicja__cel_pozycja_dla_lotu_parabol¹_wyœwietl', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Amunicja__Cel_Pozycja_Dla_Lotu_Parabol¹_Wyœwietl_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  ztr := Odczytaj_Liczbê_Z_Napisu( Amunicja__Zanurzenie_G³êbokoœæ_Zadana_Edit.Text, -0.3 );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'amunicja__zanurzenie_g³êbokoœæ_zadana' )  ) then
    plik_ini.WriteFloat( 'USTAWIENIA', 'amunicja__zanurzenie_g³êbokoœæ_zadana', ztr )
  else
    ztr := plik_ini.ReadFloat( 'USTAWIENIA', 'amunicja__zanurzenie_g³êbokoœæ_zadana', ztr ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    begin

      Amunicja__Zanurzenie_G³êbokoœæ_Zadana_Edit.Text := Trim(  FormatFloat( '### ### ##0.00#######', ztr )  );
      Amunicja__Zanurzenie_G³êbokoœæ_Zadana_Edit.Text := StringReplace( Amunicja__Zanurzenie_G³êbokoœæ_Zadana_Edit.Text, ' ', '', [ rfReplaceAll ] ); // Mo¿e byæ wartoœæ ujemna - usunie spacjê miêdzy minusem a liczb¹.

    end;
  //---//if not zapisuj_ustawienia_f then


  ztr := Odczytaj_Liczbê_Z_Napisu( Amunicja__Zanurzenie_G³êbokoœæ_Zadana__Skok_O_Edit.Text, 0 );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'amunicja__zanurzenie_g³êbokoœæ_zadana_skok_o' )  ) then
    plik_ini.WriteFloat( 'USTAWIENIA', 'amunicja__zanurzenie_g³êbokoœæ_zadana_skok_o', ztr )
  else
    ztr := plik_ini.ReadFloat( 'USTAWIENIA', 'amunicja__zanurzenie_g³êbokoœæ_zadana_skok_o', ztr ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Amunicja__Zanurzenie_G³êbokoœæ_Zadana__Skok_O_Edit.Text := Trim(  FormatFloat( '### ### ##0.00#######', ztr )  );


  zts := Boolean_W__Tak_Nie( Celowanie__Bronie_Osobno_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'celowanie__bronie_osobno' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'celowanie__bronie_osobno', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'celowanie__bronie_osobno', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Celowanie__Bronie_Osobno_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := Celowanie__Tryb_RadioGroup.ItemIndex;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'celowanie__tryb' )  ) then
    plik_ini.WriteInteger( 'USTAWIENIA', 'celowanie__tryb', zti )
  else
    zti := plik_ini.ReadInteger( 'USTAWIENIA', 'celowanie__tryb', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Celowanie__Tryb_RadioGroup.ItemIndex := zti;


  //zti := Celowanie_Precyzja__Falowanie_Niwelowanie_SpinEdit.Value;
  //
  //if   (  zapisuj_ustawienia_f )
  //  or (  not plik_ini.ValueExists( 'USTAWIENIA', 'celowanie_precyzja__falowanie_niwelowanie' )  ) then
  //  plik_ini.WriteInteger( 'USTAWIENIA', 'celowanie_precyzja__falowanie_niwelowanie', zti )
  //else
  //  zti := plik_ini.ReadInteger( 'USTAWIENIA', 'celowanie_precyzja__falowanie_niwelowanie', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.
  //
  //if not zapisuj_ustawienia_f then
  //  Celowanie_Precyzja__Falowanie_Niwelowanie_SpinEdit.Value := zti;


  zti := Celowanie_Precyzja__Obrót_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'celowanie_precyzja__obrót' )  ) then
    plik_ini.WriteInteger( 'USTAWIENIA', 'celowanie_precyzja__obrót', zti )
  else
    zti := plik_ini.ReadInteger( 'USTAWIENIA', 'celowanie_precyzja__obrót', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Celowanie_Precyzja__Obrót_SpinEdit.Value := zti;


  zti := Celowanie_Precyzja__Podniesienie_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'celowanie_precyzja__podniesienie' )  ) then
    plik_ini.WriteInteger( 'USTAWIENIA', 'celowanie_precyzja__podniesienie', zti )
  else
    zti := plik_ini.ReadInteger( 'USTAWIENIA', 'celowanie_precyzja__podniesienie', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Celowanie_Precyzja__Podniesienie_SpinEdit.Value := zti;


  zts := Boolean_W__Tak_Nie( Celownicze_Linie_Unoœ_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'celownicze_linie_unoœ' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'celownicze_linie_unoœ', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'celownicze_linie_unoœ', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Celownicze_Linie_Unoœ_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Celownik_Bombowiec_Widocznoœæ_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'celownik_bombowiec_widocznoœæ' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'celownik_bombowiec_widocznoœæ', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'celownik_bombowiec_widocznoœæ', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Celownik_Bombowiec_Widocznoœæ_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  ztr := Odczytaj_Liczbê_Z_Napisu( Celownik_Ekranowy__Kolor__R_Edit.Text, 0.0 );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'celownik_ekranowy__kolor__r' )  ) then
    plik_ini.WriteFloat( 'USTAWIENIA', 'celownik_ekranowy__kolor__r', ztr )
  else
    ztr := plik_ini.ReadFloat( 'USTAWIENIA', 'celownik_ekranowy__kolor__r', ztr ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Celownik_Ekranowy__Kolor__R_Edit.Text := Trim(  FormatFloat( '### ### ##0.00#######', ztr )  );


  ztr := Odczytaj_Liczbê_Z_Napisu( Celownik_Ekranowy__Kolor__G_Edit.Text, 0.0 );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'celownik_ekranowy__kolor__g' )  ) then
    plik_ini.WriteFloat( 'USTAWIENIA', 'celownik_ekranowy__kolor__g', ztr )
  else
    ztr := plik_ini.ReadFloat( 'USTAWIENIA', 'celownik_ekranowy__kolor__g', ztr ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Celownik_Ekranowy__Kolor__G_Edit.Text := Trim(  FormatFloat( '### ### ##0.00#######', ztr )  );


  ztr := Odczytaj_Liczbê_Z_Napisu( Celownik_Ekranowy__Kolor__B_Edit.Text, 0.0 );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'celownik_ekranowy__kolor__b' )  ) then
    plik_ini.WriteFloat( 'USTAWIENIA', 'celownik_ekranowy__kolor__b', ztr )
  else
    ztr := plik_ini.ReadFloat( 'USTAWIENIA', 'celownik_ekranowy__kolor__b', ztr ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Celownik_Ekranowy__Kolor__B_Edit.Text := Trim(  FormatFloat( '### ### ##0.00#######', ztr )  );


  ztr := Odczytaj_Liczbê_Z_Napisu( Celownik_Ekranowy__Kolor__A_Edit.Text, 0.0 );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'celownik_ekranowy__kolor__a' )  ) then
    plik_ini.WriteFloat( 'USTAWIENIA', 'celownik_ekranowy__kolor__a', ztr )
  else
    ztr := plik_ini.ReadFloat( 'USTAWIENIA', 'celownik_ekranowy__kolor__a', ztr ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Celownik_Ekranowy__Kolor__A_Edit.Text := Trim(  FormatFloat( '### ### ##0.00#######', ztr )  );


  ztr := Odczytaj_Liczbê_Z_Napisu( Celownik_Ekranowy__Szerokoœæ_Edit.Text, 0.01 );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'celownik_ekranowy__szerokoœæ' )  ) then
    plik_ini.WriteFloat( 'USTAWIENIA', 'celownik_ekranowy__szerokoœæ', ztr )
  else
    ztr := plik_ini.ReadFloat( 'USTAWIENIA', 'celownik_ekranowy__szerokoœæ', ztr ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Celownik_Ekranowy__Szerokoœæ_Edit.Text := Trim(  FormatFloat( '### ### ##0.00#######', ztr )  );


  ztr := Odczytaj_Liczbê_Z_Napisu( Celownik_Ekranowy__Wysokoœæ_Edit.Text, 0.01 );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'celownik_ekranowy__wysokoœæ' )  ) then
    plik_ini.WriteFloat( 'USTAWIENIA', 'celownik_ekranowy__wysokoœæ', ztr )
  else
    ztr := plik_ini.ReadFloat( 'USTAWIENIA', 'celownik_ekranowy__wysokoœæ', ztr ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Celownik_Ekranowy__Wysokoœæ_Edit.Text := Trim(  FormatFloat( '### ### ##0.00#######', ztr )  );


  ztr := Odczytaj_Liczbê_Z_Napisu( Celownik_Ekranowy__Gruboœæ_Edit.Text, 0.01 );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'celownik_ekranowy__gruboœæ' )  ) then
    plik_ini.WriteFloat( 'USTAWIENIA', 'celownik_ekranowy__gruboœæ', ztr )
  else
    ztr := plik_ini.ReadFloat( 'USTAWIENIA', 'celownik_ekranowy__gruboœæ', ztr ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Celownik_Ekranowy__Gruboœæ_Edit.Text := Trim(  FormatFloat( '### ### ##0.00#######', ztr )  );


  zts := Boolean_W__Tak_Nie( Celownik_Widocznoœæ_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'celownik_widocznoœæ' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'celownik_widocznoœæ', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'celownik_widocznoœæ', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Celownik_Widocznoœæ_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Celownik_Widocznoœæ_Mouse_Look_Active_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'celownik_widocznoœæ_mouse_look_active' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'celownik_widocznoœæ_mouse_look_active', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'celownik_widocznoœæ_mouse_look_active', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Celownik_Widocznoœæ_Mouse_Look_Active_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Chmury_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'chmury' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'chmury', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'chmury', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Chmury_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Dalmierz_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'dalmierz' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'dalmierz', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'dalmierz', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Dalmierz_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := Dalmierz_Tryb_RadioGroup.ItemIndex;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'dalmierz_tryb' )  ) then
    plik_ini.WriteInteger( 'USTAWIENIA', 'dalmierz_tryb', zti )
  else
    zti := plik_ini.ReadInteger( 'USTAWIENIA', 'dalmierz_tryb', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( Dalmierz_Tryb_RadioGroup.Items.Count > 0 )
    and ( zti >= 0 )
    and ( zti <= Dalmierz_Tryb_RadioGroup.Items.Count - 1 ) then
    Dalmierz_Tryb_RadioGroup.ItemIndex := zti;


  zts := Boolean_W__Tak_Nie( DŸwiêk__Aktywnoœæ_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'dŸwiêk__aktywnoœæ' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'dŸwiêk__aktywnoœæ', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'dŸwiêk__aktywnoœæ', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    begin

      DŸwiêk__Aktywnoœæ_CheckBox.OnClick := nil; // Aby sprawdzenie dzia³ania dŸwiêku odby³o siê póŸniej.
      DŸwiêk__Aktywnoœæ_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );
      DŸwiêk__Aktywnoœæ_CheckBox.OnClick := DŸwiêk__Aktywnoœæ_CheckBoxClick;

    end;
  //---//if not zapisuj_ustawienia_f then


  zti := DŸwiêk__G³oœnoœæ_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'dŸwiêk__g³oœnoœæ' )  ) then
    plik_ini.WriteInteger( 'USTAWIENIA', 'dŸwiêk__g³oœnoœæ', zti )
  else
    zti := plik_ini.ReadInteger( 'USTAWIENIA', 'dŸwiêk__g³oœnoœæ', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    begin

      if zti > DŸwiêk__G³oœnoœæ_SpinEdit.MaxValue then
        zti := DŸwiêk__G³oœnoœæ_SpinEdit.MaxValue
      else//if zti >= DŸwiêk__G³oœnoœæ_SpinEdit.MaxValue then
      if zti < DŸwiêk__G³oœnoœæ_SpinEdit.MinValue then
        zti := DŸwiêk__G³oœnoœæ_SpinEdit.MinValue;

      if DŸwiêk__G³oœnoœæ_SpinEdit.Value <> zti then
        DŸwiêk__G³oœnoœæ_SpinEdit.Value := zti
      else//if DŸwiêk__G³oœnoœæ_SpinEdit.Value <> zti then
        DŸwiêk__G³oœnoœæ_SpinEditChange( nil ); // Aby ustawiæ wartoœæ etykiety.

    end;
  //---//if not zapisuj_ustawienia_f then


  zts := DŸwiêk__T³umaczenia_ComboBox.Text;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'dŸwiêk__t³umaczenia' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'dŸwiêk__t³umaczenia', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'dŸwiêk__t³umaczenia', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if    ( not zapisuj_ustawienia_f )
    and (  Trim( zts ) <> ''  ) then
    for zti := DŸwiêk__T³umaczenia_ComboBox.Items.Count - 1 downto 0 do
      if DŸwiêk__T³umaczenia_ComboBox.Items[ zti ] = zts then
        begin

          DŸwiêk__T³umaczenia_ComboBox.ItemIndex := zti;
          Break;

        end;
      //---//if DŸwiêk__T³umaczenia_ComboBox.Items[ zti ] = zts then


  zts := Boolean_W__Tak_Nie( Fale_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'fale' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'fale', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'fale', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Fale_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := Gra_Wspó³czynnik_Prêdkoœci_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'gra_wspó³czynnik_prêdkoœci' )  ) then
    plik_ini.WriteInteger( 'USTAWIENIA', 'gra_wspó³czynnik_prêdkoœci', zti )
  else
    zti := plik_ini.ReadInteger( 'USTAWIENIA', 'gra_wspó³czynnik_prêdkoœci', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( not czy_klient_g ) then
    Gra_Wspó³czynnik_Prêdkoœci_SpinEdit.Value := zti;


  zti := Gra_Wspó³czynnik_Trudnoœci_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'gra_wspó³czynnik_trudnoœci' )  ) then
    plik_ini.WriteInteger( 'USTAWIENIA', 'gra_wspó³czynnik_trudnoœci', zti )
  else
    zti := plik_ini.ReadInteger( 'USTAWIENIA', 'gra_wspó³czynnik_trudnoœci', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( not czy_klient_g ) then
    Gra_Wspó³czynnik_Trudnoœci_SpinEdit.Value := zti;


  ztr := Odczytaj_Liczbê_Z_Napisu( Kamera_Szybkoœæ_Ruchu_Edit.Text, 1 );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'kamera_szybkoœæ_ruchu' )  ) then
    plik_ini.WriteFloat( 'USTAWIENIA', 'kamera_szybkoœæ_ruchu', ztr )
  else
    ztr := plik_ini.ReadFloat( 'USTAWIENIA', 'kamera_szybkoœæ_ruchu', ztr ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Kamera_Szybkoœæ_Ruchu_Edit.Text := Trim(  FormatFloat( '### ### ##0.00#######', ztr )  );


  zts := Boolean_W__Tak_Nie( L¹dowanie_U³atwione_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'l¹dowanie_u³atwione' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'l¹dowanie_u³atwione', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'l¹dowanie_u³atwione', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if    ( not zapisuj_ustawienia_f )
    and ( not czy_klient_g ) then
    L¹dowanie_U³atwione_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Lotniskowiec_Samolot_L¹dowanie_Informacje_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'lotniskowiec_samolot_l¹dowanie_informacje' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'lotniskowiec_samolot_l¹dowanie_informacje', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'lotniskowiec_samolot_l¹dowanie_informacje', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if    ( not zapisuj_ustawienia_f )
    and ( not czy_klient_g ) then
    Lotniskowiec_Samolot_L¹dowanie_Informacje_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := Mg³a_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'mg³a' )  ) then
    plik_ini.WriteInteger( 'USTAWIENIA', 'mg³a', zti )
  else
    zti := plik_ini.ReadInteger( 'USTAWIENIA', 'mg³a', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( not czy_klient_g ) then
    Mg³a_SpinEdit.Value := zti;


  zts := Boolean_W__Tak_Nie( Mg³a_Informacja_Dodatkowa_Pomiñ_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'mg³a_informacja_dodatkowa_pomiñ' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'mg³a_informacja_dodatkowa_pomiñ', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'mg³a_informacja_dodatkowa_pomiñ', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Mg³a_Informacja_Dodatkowa_Pomiñ_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := Morze_Wzburzenie_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'morze_wzburzenie' )  ) then
    plik_ini.WriteInteger( 'USTAWIENIA', 'morze_wzburzenie', zti )
  else
    zti := plik_ini.ReadInteger( 'USTAWIENIA', 'morze_wzburzenie', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( not czy_klient_g ) then
    Morze_Wzburzenie_SpinEdit.Value := zti;


  zts := Boolean_W__Tak_Nie( Morze_Informacja_Dodatkowa_Pomiñ_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'morze_informacja_dodatkowa_pomiñ' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'morze_informacja_dodatkowa_pomiñ', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'morze_informacja_dodatkowa_pomiñ', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Morze_Informacja_Dodatkowa_Pomiñ_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  ztr := Odczytaj_Liczbê_Z_Napisu( Mysz_Czu³oœæ_Edit.Text, 10 );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'mysz_czu³oœæ' )  ) then
    plik_ini.WriteFloat( 'USTAWIENIA', 'mysz_czu³oœæ', ztr )
  else
    ztr := plik_ini.ReadFloat( 'USTAWIENIA', 'mysz_czu³oœæ', ztr ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Mysz_Czu³oœæ_Edit.Text := Trim(  FormatFloat( '### ### ##0.00#######', ztr )  );


  ztr := Odczytaj_Liczbê_Z_Napisu( Mysz_Czu³oœæ_Luneta_Edit.Text, 0.1 );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'mysz_czu³oœæ_luneta' )  ) then
    plik_ini.WriteFloat( 'USTAWIENIA', 'mysz_czu³oœæ_luneta', ztr )
  else
    ztr := plik_ini.ReadFloat( 'USTAWIENIA', 'mysz_czu³oœæ_luneta', ztr ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Mysz_Czu³oœæ_Luneta_Edit.Text := Trim(  FormatFloat( '### ### ##0.00#######', ztr )  );


  zti := Noc_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'noc' )  ) then
    plik_ini.WriteInteger( 'USTAWIENIA', 'noc', zti )
  else
    zti := plik_ini.ReadInteger( 'USTAWIENIA', 'noc', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( not czy_klient_g ) then
    Noc_SpinEdit.Value := zti;


  zts := Boolean_W__Tak_Nie( Noc__Czas_Na__Ekranie_Wyœwietlaj_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'noc__czas_na__ekranie_wyœwietlaj' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'noc__czas_na__ekranie_wyœwietlaj', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'noc__czas_na__ekranie_wyœwietlaj', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Noc__Czas_Na__Ekranie_Wyœwietlaj_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Noc__Czas_Na__Radarze_Wyœwietlaj_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'noc__czas_na__radarze_wyœwietlaj' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'noc__czas_na__radarze_wyœwietlaj', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'noc__czas_na__radarze_wyœwietlaj', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Noc__Czas_Na__Radarze_Wyœwietlaj_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Noc__Informacja_Dodatkowa_Pomiñ_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'noc__informacja_dodatkowa_pomiñ' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'noc__informacja_dodatkowa_pomiñ', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'noc__informacja_dodatkowa_pomiñ', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Noc__Informacja_Dodatkowa_Pomiñ_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Obrót_K¹t_Zablokowany_Strza³_WskaŸnik_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'obrót_k¹t_zablokowany_strza³_wskaŸnik' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'obrót_k¹t_zablokowany_strza³_wskaŸnik', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'obrót_k¹t_zablokowany_strza³_wskaŸnik', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Obrót_K¹t_Zablokowany_Strza³_WskaŸnik_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Obrót_K¹t_Zablokowany_WskaŸnik_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'obrót_k¹t_zablokowany_wskaŸnik' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'obrót_k¹t_zablokowany_wskaŸnik', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'obrót_k¹t_zablokowany_wskaŸnik', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Obrót_K¹t_Zablokowany_WskaŸnik_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Pe³ny_Ekran_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'pe³ny_ekran' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'pe³ny_ekran', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'pe³ny_ekran', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Pe³ny_Ekran_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Pe³ny_Ekran__Znikaj¹ce_Elementy_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'pe³ny_ekran__znikaj¹ce_elementy' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'pe³ny_ekran__znikaj¹ce_elementy', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'pe³ny_ekran__znikaj¹ce_elementy', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Pe³ny_Ekran__Znikaj¹ce_Elementy_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Pokój_Rozmów__Data_Czas_Wyœwietlaj_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'pokój_rozmów__data_czas_wyœwietlaj' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'pokój_rozmów__data_czas_wyœwietlaj', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'pokój_rozmów__data_czas_wyœwietlaj', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Pokój_Rozmów__Data_Czas_Wyœwietlaj_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Pokój_Rozmów__Ignoruj__Si_Zagaduje_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'pokój_rozmów__ignoruj__si_zagaduje' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'pokój_rozmów__ignoruj__si_zagaduje', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'pokój_rozmów__ignoruj__si_zagaduje', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Pokój_Rozmów__Ignoruj__Si_Zagaduje_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Pokój_Rozmów__Ignoruj__Si_Zak³óca_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'pokój_rozmów__ignoruj__si_zak³óca' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'pokój_rozmów__ignoruj__si_zak³óca', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'pokój_rozmów__ignoruj__si_zak³óca', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Pokój_Rozmów__Ignoruj__Si_Zak³óca_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Pokój_Rozmów__Ignoruj__Trafienie_Informacja_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'pokój_rozmów__ignoruj__trafienie_informacja' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'pokój_rozmów__ignoruj__trafienie_informacja', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'pokój_rozmów__ignoruj__trafienie_informacja', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Pokój_Rozmów__Ignoruj__Trafienie_Informacja_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Pokój_Rozmów__Ignoruj__Wys³a³_Polecenie_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'pokój_rozmów__ignoruj__wys³a³_polecenie' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'pokój_rozmów__ignoruj__wys³a³_polecenie', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'pokój_rozmów__ignoruj__wys³a³_polecenie', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Pokój_Rozmów__Ignoruj__Wys³a³_Polecenie_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Pokój_Rozmów__Informacja_Dodatkowa_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'pokój_rozmów__informacja_dodatkowa' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'pokój_rozmów__informacja_dodatkowa', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'pokój_rozmów__informacja_dodatkowa', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Pokój_Rozmów__Informacja_Dodatkowa_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Pokój_Rozmów__Na_Ekranie_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'pokój_rozmów__na_ekranie' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'pokój_rozmów__na_ekranie', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'pokój_rozmów__na_ekranie', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Pokój_Rozmów__Na_Ekranie_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBox.ItemIndex;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'punkty_¿ycia_wskaŸnik__efekty_tryb' )  ) then
    plik_ini.WriteInteger( 'USTAWIENIA', 'punkty_¿ycia_wskaŸnik__efekty_tryb', zti )
  else
    zti := plik_ini.ReadInteger( 'USTAWIENIA', 'punkty_¿ycia_wskaŸnik__efekty_tryb', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if    ( not zapisuj_ustawienia_f )
    and ( not czy_klient_g ) then
    Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBox.ItemIndex := zti; // Nie wywo³a Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBoxChange().


  zts := Boolean_W__Tak_Nie( Punkty_¯ycia_WskaŸnik__Gracz_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'punkty_¿ycia_wskaŸnik__gracz' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'punkty_¿ycia_wskaŸnik__gracz', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'punkty_¿ycia_wskaŸnik__gracz', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Punkty_¯ycia_WskaŸnik__Gracz_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := Punkty_¯ycia_WskaŸnik__Prezentowanie_Sposób_ComboBox.ItemIndex;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'punkty_¿ycia_wskaŸnik__prezentowanie_sposób' )  ) then
    plik_ini.WriteInteger( 'USTAWIENIA', 'punkty_¿ycia_wskaŸnik__prezentowanie_sposób', zti )
  else
    zti := plik_ini.ReadInteger( 'USTAWIENIA', 'punkty_¿ycia_wskaŸnik__prezentowanie_sposób', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Punkty_¯ycia_WskaŸnik__Prezentowanie_Sposób_ComboBox.ItemIndex := zti;


  zts := Boolean_W__Tak_Nie( Punkty_¯ycia_WskaŸnik__Przeciwnik_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'punkty_¿ycia_wskaŸnik__przeciwnik' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'punkty_¿ycia_wskaŸnik__przeciwnik', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'punkty_¿ycia_wskaŸnik__przeciwnik', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Punkty_¯ycia_WskaŸnik__Przeciwnik_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Punkty_¯ycia_WskaŸnik__Sojusznik_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'punkty_¿ycia_wskaŸnik__sojusznik' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'punkty_¿ycia_wskaŸnik__sojusznik', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'punkty_¿ycia_wskaŸnik__sojusznik', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Punkty_¯ycia_WskaŸnik__Sojusznik_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Radar__Broñ_Zasiêg_Wyœwietlaj_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'radar__broñ_zasiêg_wyœwietlaj' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'radar__broñ_zasiêg_wyœwietlaj', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'radar__broñ_zasiêg_wyœwietlaj', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Radar__Broñ_Zasiêg_Wyœwietlaj_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := Radar__Czu³oœæ_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'radar__czu³oœæ' )  ) then
    plik_ini.WriteInteger( 'USTAWIENIA', 'radar__czu³oœæ', zti )
  else
    zti := plik_ini.ReadInteger( 'USTAWIENIA', 'radar__czu³oœæ', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Radar__Czu³oœæ_SpinEdit.Value := zti;


  zts := Boolean_W__Tak_Nie( Radar__Dane_Z_Radia__L¹dy_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'radar__dane_z_radia__l¹dy' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'radar__dane_z_radia__l¹dy', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'radar__dane_z_radia__l¹dy', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Radar__Dane_Z_Radia__L¹dy_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Radar__Kamera_Kierunek_Wyœwietlaj_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'radar__kamera_kierunek_wyœwietlaj' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'radar__kamera_kierunek_wyœwietlaj', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'radar__kamera_kierunek_wyœwietlaj', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Radar__Kamera_Kierunek_Wyœwietlaj_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := Radar__L¹d_Rysowanie_Zasiêg_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'radar__l¹d_rysowanie_zasiêg' )  ) then
    plik_ini.WriteInteger( 'USTAWIENIA', 'radar__l¹d_rysowanie_zasiêg', zti )
  else
    zti := plik_ini.ReadInteger( 'USTAWIENIA', 'radar__l¹d_rysowanie_zasiêg', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Radar__L¹d_Rysowanie_Zasiêg_SpinEdit.Value := zti;


  zti := radar_panel__wielkoœæ_procent_okna_g;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'radar__panel__wielkoœæ_procent_okna' )  ) then
    plik_ini.WriteInteger( 'USTAWIENIA', 'radar__panel__wielkoœæ_procent_okna', zti )
  else
    zti := plik_ini.ReadInteger( 'USTAWIENIA', 'radar__panel__wielkoœæ_procent_okna', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    radar_panel__wielkoœæ_procent_okna_g := zti;


  zts := Boolean_W__Tak_Nie( Radar__Przyciski_Panel__Ukrywaj_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'radar__przyciski_panel__ukrywaj' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'radar__przyciski_panel__ukrywaj', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'radar__przyciski_panel__ukrywaj', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Radar__Przyciski_Panel__Ukrywaj_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := Radar__Rysowanie_Œladów__Amunicji_Sekundy_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'radar__rysowanie_œladów__amunicji_sekundy' )  ) then
    plik_ini.WriteInteger( 'USTAWIENIA', 'radar__rysowanie_œladów__amunicji_sekundy', zti )
  else
    zti := plik_ini.ReadInteger( 'USTAWIENIA', 'radar__rysowanie_œladów__amunicji_sekundy', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Radar__Rysowanie_Œladów__Amunicji_Sekundy_SpinEdit.Value := zti;


  zti := Radar__Rysowanie_Œladów__Statków_Sekundy_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'radar__rysowanie_œladów__statków_sekundy' )  ) then
    plik_ini.WriteInteger( 'USTAWIENIA', 'radar__rysowanie_œladów__statków_sekundy', zti )
  else
    zti := plik_ini.ReadInteger( 'USTAWIENIA', 'radar__rysowanie_œladów__statków_sekundy', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Radar__Rysowanie_Œladów__Statków_Sekundy_SpinEdit.Value := zti;


    if Radar__Zmieniaj_Czu³oœæ_Wraz_Ze_Skal¹_CheckBox.Checked then
      ztr := 1
    else//if Radar__Zmieniaj_Czu³oœæ_Wraz_Ze_Skal¹_CheckBox.Checked then
      ztr := 0;

    Radar__Zmieniaj_Czu³oœæ_Wraz_Ze_Skal¹_CheckBox.Checked := false; // Aby zmiana skali radaru nie zmieni³a czu³oœci radaru.

  zti := Radar__Skala_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'radar__skala' )  ) then
    plik_ini.WriteInteger( 'USTAWIENIA', 'radar__skala', zti )
  else
    zti := plik_ini.ReadInteger( 'USTAWIENIA', 'radar__skala', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Radar__Skala_SpinEdit.Value := zti;

    if ztr = 1 then
      Radar__Zmieniaj_Czu³oœæ_Wraz_Ze_Skal¹_CheckBox.Checked := true;


  zts := Boolean_W__Tak_Nie( Radar__Skala_Y_Uwzglêdniaj_L¹d_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'radar__skala_y_uwzglêdniaj_l¹d' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'radar__skala_y_uwzglêdniaj_l¹d', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'radar__skala_y_uwzglêdniaj_l¹d', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Radar__Skala_Y_Uwzglêdniaj_L¹d_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Radar__Widocznoœæ_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'radar__widocznoœæ' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'radar__widocznoœæ', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'radar__widocznoœæ', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Radar__Widocznoœæ_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Radar__Wspó³rzêdna_Y_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'radar__wspó³rzêdna_y' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'radar__wspó³rzêdna_y', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'radar__wspó³rzêdna_y', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Radar__Wspó³rzêdna_Y_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Radar__Wspó³rzêdne_Kursora_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'radar__wspó³rzêdne_kursora' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'radar__wspó³rzêdne_kursora', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'radar__wspó³rzêdne_kursora', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Radar__Wspó³rzêdne_Kursora_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Radar__Zmieniaj_Czu³oœæ_Wraz_Ze_Skal¹_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'radar__zmieniaj_czu³oœæ_wraz_ze_skal¹' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'radar__zmieniaj_czu³oœæ_wraz_ze_skal¹', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'radar__zmieniaj_czu³oœæ_wraz_ze_skal¹', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Radar__Zmieniaj_Czu³oœæ_Wraz_Ze_Skal¹_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( SI__P³ywa__Samolot_Gracza_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'si__p³ywa__samolot_gracza' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'si__p³ywa__samolot_gracza', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'si__p³ywa__samolot_gracza', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    SI__P³ywa__Samolot_Gracza_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( SI__P³ywa__Statek_Gracza_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'si__p³ywa__statek_gracza' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'si__p³ywa__statek_gracza', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'si__p³ywa__statek_gracza', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    SI__P³ywa__Statek_Gracza_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zti := SI__Strzela__Statek_Gracza_RadioGroup.ItemIndex;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'si__strzela__statek_gracza' )  ) then
    plik_ini.WriteInteger( 'USTAWIENIA', 'si__strzela__statek_gracza', zti )
  else
    zti := plik_ini.ReadInteger( 'USTAWIENIA', 'si__strzela__statek_gracza', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    SI__Strzela__Statek_Gracza_RadioGroup.ItemIndex := zti;


  zts := Boolean_W__Tak_Nie( Sonarowe_U³atwienie_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'sonarowe_u³atwienie' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'sonarowe_u³atwienie', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'sonarowe_u³atwienie', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if    ( not zapisuj_ustawienia_f )
    and ( not czy_klient_g ) then
    Sonarowe_U³atwienie_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Sonarowe_U³atwienie__Klient_Zmieniaæ_Mo¿e_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'sonarowe_u³atwienie__klient_zmieniaæ_mo¿e' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'sonarowe_u³atwienie__klient_zmieniaæ_mo¿e', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'sonarowe_u³atwienie__klient_zmieniaæ_mo¿e', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if    ( not zapisuj_ustawienia_f )
    and ( not czy_klient_g ) then
    Sonarowe_U³atwienie__Klient_Zmieniaæ_Mo¿e_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Œwiat³a_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'œwiat³a' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'œwiat³a', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'œwiat³a', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Œwiat³a_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Œwiat³a_Dodatkowe_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'œwiat³a_dodatkowe' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'œwiat³a_dodatkowe', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'œwiat³a_dodatkowe', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Œwiat³a_Dodatkowe_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );


  zts := Boolean_W__Tak_Nie( Zanurzenie_Zadane_Przekraczaj_100_Procent_CheckBox.Checked );

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'USTAWIENIA', 'zanurzenie_zadane_przekraczaj_100_procent' )  ) then
    plik_ini.WriteString( 'USTAWIENIA', 'zanurzenie_zadane_przekraczaj_100_procent', zts )
  else
    zts := plik_ini.ReadString( 'USTAWIENIA', 'zanurzenie_zadane_przekraczaj_100_procent', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Zanurzenie_Zadane_Przekraczaj_100_Procent_CheckBox.Checked := zts = Boolean_W__Tak_Nie( true );
  {$endregion 'USTAWIENIA.'}

  {$region 'WIELOOSOBOWE.'}
  zti := Klient_IdTCP_Czyta_Timer.Interval;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'WIELOOSOBOWE', 'klient_id_tcp_czyta_timer__interval' )  ) then
    plik_ini.WriteInteger( 'WIELOOSOBOWE', 'klient_id_tcp_czyta_timer__interval', zti )
  else
    zti := plik_ini.ReadInteger( 'WIELOOSOBOWE', 'klient_id_tcp_czyta_timer__interval', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Klient_IdTCP_Czyta_Timer.Interval := zti;


  zti := Klient_IdUDP_Czyta_Timer.Interval;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'WIELOOSOBOWE', 'klient_id_udp_czyta_timer__interval' )  ) then
    plik_ini.WriteInteger( 'WIELOOSOBOWE', 'klient_id_udp_czyta_timer__interval', zti )
  else
    zti := plik_ini.ReadInteger( 'WIELOOSOBOWE', 'klient_id_udp_czyta_timer__interval', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Klient_IdUDP_Czyta_Timer.Interval := zti;


  zts := Serwer_Adres_IP_Edit.Text;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'WIELOOSOBOWE', 'serwer_adres_ip' )  ) then
    plik_ini.WriteString( 'WIELOOSOBOWE', 'serwer_adres_ip', zts )
  else
    zts := plik_ini.ReadString( 'WIELOOSOBOWE', 'serwer_adres_ip', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Serwer_Adres_IP_Edit.Text := zts;


  zti := Serwer_Port_SpinEdit.Value;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'WIELOOSOBOWE', 'serwer_port' )  ) then
    plik_ini.WriteInteger( 'WIELOOSOBOWE', 'serwer_port', zti )
  else
    zti := plik_ini.ReadInteger( 'WIELOOSOBOWE', 'serwer_port', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Serwer_Port_SpinEdit.Value := zti;


  zti := Serwer_Wysy³a_Timer.Interval;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'WIELOOSOBOWE', 'serwer_wysy³a_timer__interval' )  ) then
    plik_ini.WriteInteger( 'WIELOOSOBOWE', 'serwer_wysy³a_timer__interval', zti )
  else
    zti := plik_ini.ReadInteger( 'WIELOOSOBOWE', 'serwer_wysy³a_timer__interval', zti ); // Je¿eli nie znajdzie to podstawia wartoœæ zti.

  if not zapisuj_ustawienia_f then
    Serwer_Wysy³a_Timer.Interval := zti;


  zts := Has³o_Edit.Text;

  if   (  zapisuj_ustawienia_f )
    or (  not plik_ini.ValueExists( 'WIELOOSOBOWE', 'has³o' )  ) then
    plik_ini.WriteString( 'WIELOOSOBOWE', 'has³o', zts )
  else
    zts := plik_ini.ReadString( 'WIELOOSOBOWE', 'has³o', zts ); // Je¿eli nie znajdzie to podstawia wartoœæ zts.

  if not zapisuj_ustawienia_f then
    Has³o_Edit.Text := zts;
  {$endregion 'WIELOOSOBOWE.'}


  plik_ini.Free();


  Ustawienia_T³umaczenia( zapisuj_ustawienia_f );


  if not zapisuj_ustawienia_f then
    begin

      if l¹d_twórz_f then
        L¹d_ComboBoxChange( nil );

      Morze_Wzburzenie_SpinEditChange( nil ); // Je¿eli zmieni siê wartoœæ fale__wysokoœæ_bazowa_g ale nie zmieni siê wartoœæ wzburzenia morza.
      Niebo_Rodzaj_RadioGroupClick( nil );
      Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBoxChange( nil );
      SI__Schemat_Opis_Memo.Text := 'Opis schematu si.';
      SI__Schemat_ComboBoxChange( nil );
      Statek_ComboBoxChange( nil );
      SI__Statek_ComboBoxChange( nil );
      Statki_Pozycje_Pocz¹tkowe_ComboBoxChange( nil );
      Wiatr__Si³a_SpinEditChange( nil ); // Najpierw wczytuje Wiatr_CheckBox a potem dopiero Wiatr__Zmiana_Tryb_RadioGroup.


      if czy_klient_g then
        Interfejs_Aktywnoœæ_Ustaw__Klient( false );


      Radar__Wielkoœæ_ButtonClick( Radar_Panel ); // Dla radar_panel__wielkoœæ_procent_okna_g.


      if l¹d_twórz_f then
        DŸwiêk__Aktywnoœæ_CheckBoxClick( nil );

    end;
  //---//if not zapisuj_ustawienia_f then

end;//---//Funkcja Ustawienia_Plik().

//Funkcja Ustawienia_T³umaczenia().
procedure TStatki_Form.Ustawienia_T³umaczenia( const zapisuj_ustawienia_f : boolean = false );
var
  i : integer;
  zts : string;
  tekst_string_list : TStringList;
begin

  zts := ExtractFilePath( Application.ExeName ) + 'T³umaczenia';

  if not DirectoryExists( zts ) then
    begin

      Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_odnaleziono_katalogu_t³umaczeñ + #13 + #13 + zts + #13 +'.', t³umaczenie_komunikaty_r.komunikat__informacja, MB_ICONEXCLAMATION );

    end
  else//if not DirectoryExists( zts ) then
    begin

      tekst_string_list := TStringList.Create();

      zts := ExtractFilePath( Application.ExeName ) + 'T³umaczenia\T³umaczenia.ini';

      if   (  zapisuj_ustawienia_f )
        or (  not FileExists( zts )  ) then
        begin

          if    ( T³umaczenia_ComboBox.ItemIndex >= 0 )
            and ( T³umaczenia_ComboBox.ItemIndex <= T³umaczenia_ComboBox.Items.Count - 1 ) then
            tekst_string_list.Text := T³umaczenia_ComboBox.Items[ T³umaczenia_ComboBox.ItemIndex ];

          if Trim( tekst_string_list.Text ) = '' then
            tekst_string_list.Text := '<' + t³umaczenie_komunikaty_r.komunikat__domyœlne + '>';

          tekst_string_list.SaveToFile( zts, TEncoding.UTF8 );

        end
      else//if   (  zapisuj_ustawienia_f ) (...)
        begin

          tekst_string_list.LoadFromFile( zts );
          zts := tekst_string_list.Text;
          zts := StringReplace( zts, #$D#$A, '', [ rfReplaceAll ] );

          if    (  Pos( '<', zts ) > 0  )
            and ( T³umaczenia_ComboBox.Items.Count > 0 ) then
            T³umaczenia_ComboBox.ItemIndex := 0
          else//if    (  Pos( '<', zts ) > 0  ) (...)
            for i := T³umaczenia_ComboBox.Items.Count - 1 downto 0 do
              if T³umaczenia_ComboBox.Items[ i ] = zts then
                begin

                  T³umaczenia_ComboBox.ItemIndex := i;
                  Break;

                end;
              //---//if T³umaczenia_ComboBox.Items[ i ] = zts then

          T³umaczenie__Wczytaj();

        end;
      //---//if   (  zapisuj_ustawienia_f ) (...)

      FreeAndNil( tekst_string_list );

    end;
  //---//if not DirectoryExists( zts ) then

end;//---//Funkcja Ustawienia_T³umaczenia().

//Funkcja Vector__Do__Wieloosobowe__Wektor_4().
function TStatki_Form.Vector__Do__Wieloosobowe__Wektor_4( const vector_f : GLS.VectorTypes.TVector4f ) : TWieloosobowe__Wektor_4;
begin

  //
  // Funkcja podstawia wartoœci z typu GLS.VectorTypes.TVector4d do typu TWieloosobowe__Wektor_4.
  //
  // Zwraca TWieloosobowe__Wektor_4.
  //

  Result.X := vector_f.X;
  Result.Y := vector_f.Y;
  Result.Z := vector_f.Z;
  Result.W := vector_f.W;

end;//---//Funkcja Vector__Do__Wieloosobowe__Wektor_4().

//Funkcja WaterPhase().
function TStatki_Form.WaterPhase( const px_f, py_f : single ) : single;
begin

  Result := Gra_GLCadencer.CurrentTime * 1 + px_f * 0.16 + py_f * 0.09;

end;//---//Funkcja WaterPhase().

//Funkcja Wczytaj_Schemat_Xml().
procedure TStatki_Form.Wczytaj_Schemat_Xml( const katalog_nazwa_f : string; const lista_indeks_f : integer; var schematy_lista_r_t_f : TSchematy_Lista_r_t );
var
  i,
  j,
  item_tndex_kopia_l
    : integer;
  zts : string;
  search_rec : TSearchRec;
  zt_string_list : TStringList;
  zt_xml_document : Xml.XMLDoc.TXMLDocument;

  zt_combo_box : TComboBox;
begin

  //
  // Funkcja wczytuje schematy z plików xml w zadanym katalogu i sprawdza poprawnoœæ sk³adni xml.
  //
  // Parametry:
  //   katalog_nazwa_f - katalog, w którym wyszukiwaæ pliki.
  //   lista_indeks_f:
  //     < 0 - czyœci tabelê schematów i wczyta wszystkie schematy z plików.
  //     >= 0 - odczyta ponowie schemat tylko dla podanego indeksu tabeli schematów.
  //   schematy_lista_r_t_f - tabela, do której wpisywaæ dane schematów.
  //

  if    ( lista_indeks_f >= 0 )
    and (
             (  Length( schematy_lista_r_t_f ) < 0  )
          or (  lista_indeks_f > Length( schematy_lista_r_t_f ) - 1  )
        ) then
    Exit;


  if katalog_nazwa_f = katalog__schematy_lista__l¹dy_c then
    begin

      zt_combo_box := L¹d_ComboBox;

    end
  else//if katalog_nazwa_f = katalog__schematy_lista__l¹dy_c then
  if katalog_nazwa_f = katalog__schematy_lista__si_schematy_c then
    begin

      zt_combo_box := SI__Schemat_ComboBox;

    end
  else//if katalog_nazwa_f = katalog__schematy_lista__si_schematy_c then
  if katalog_nazwa_f = katalog__schematy_lista__statki_c then
    begin

      zt_combo_box := Statek_ComboBox;

    end
  else//if katalog_nazwa_f = katalog__schematy_lista__statki_c then
  if katalog_nazwa_f = katalog__schematy_lista__statki_pozycje_pocz¹tkowe_c then
    begin

      zt_combo_box := Statki_Pozycje_Pocz¹tkowe_ComboBox;

    end
  else//if katalog_nazwa_f = katalog__schematy_lista__statki_pozycje_pocz¹tkowe_c then
    zt_combo_box := nil;


  item_tndex_kopia_l := -1;

  if lista_indeks_f < 0 then
    begin

      if zt_combo_box <> nil then
        begin

          item_tndex_kopia_l := zt_combo_box.ItemIndex;
          zt_combo_box.Items.Clear();

        end;
      //---//if zt_combo_box <> nil then

      SetLength( schematy_lista_r_t_f, 0 );

    end;
  //---//if lista_indeks_f < 0 then


  zt_string_list := TStringList.Create();
  zt_xml_document := Xml.XMLDoc.TXMLDocument.Create( Application );
  zt_xml_document.Options := zt_xml_document.Options + [ doNodeAutoIndent ]; // Domyœlnie ma: doNodeAutoCreate, doAttrNull, doAutoPrefix, doNamespaceDecl.

  j := -99;

  zts := ExtractFilePath( Application.ExeName ) + katalog_nazwa_f + '\';

  // Je¿eli znajdzie plik zwraca 0, je¿eli nie znajdzie zwraca numer b³êdu. Na pocz¹tku znajduje '.' '..' potem listê plików.
  if FindFirst( zts + '*.xml', faAnyFile, search_rec ) = 0 then // Application potrzebuje w uses Forms.
    begin

      repeat //FindNext( search_rec ) <> 0;
        // Czasami bez begin i end nieprawid³owo rozpoznaje miejsca na umieszczenie breakpoint (linijkê za wysoko) w XE5.

        if    ( search_rec.Attr <> faDirectory )
          and ( search_rec.Name <> '.' )
          and ( search_rec.Name <> '..' )
          and (
                   ( lista_indeks_f < 0 )
                or ( schematy_lista_r_t_f[ lista_indeks_f ].plik_nazwa__sl = search_rec.Name )
              ) then
          begin

            if zt_xml_document.Active then
              zt_xml_document.Active := false;


            zt_string_list.Clear();
            zt_string_list.LoadFromFile( zts + search_rec.Name );


            try
              zt_xml_document.LoadFromXML( zt_string_list.Text );
            except
              on E : Exception do
                //Komunikat_Wyœwietl(  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_l¹du + ' ' + search_rec.Name + '.' + #13 + E.Message + ' ' + IntToStr( E.HelpContext ), t³umaczenie_komunikaty_r.komunikat__b³¹d, MB_OK + MB_ICONEXCLAMATION  );
                Log_Wypisz(  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_pliku_xml + ' ' + search_rec.Name + '.' + #13 + #10 + E.Message + ' ' + IntToStr( E.HelpContext )  );
            end;
            //---//try

            if zt_xml_document.Active then
              begin

                if lista_indeks_f < 0 then
                  begin

                    i := Length( schematy_lista_r_t_f );
                    SetLength( schematy_lista_r_t_f, i + 1 );

                  end
                else//if lista_indeks_f < 0 then
                  i := lista_indeks_f;


                schematy_lista_r_t_f[ i ].czy_lotniskowiec__sl := false;
                schematy_lista_r_t_f[ i ].czy_samolot__sl := false;
                schematy_lista_r_t_f[ i ].id__sl := IntToStr( i + 1 );
                schematy_lista_r_t_f[ i ].plik_nazwa__sl := search_rec.Name;
                schematy_lista_r_t_f[ i ].treœæ__sl := zt_string_list.Text; // Jako 'abc'#$D#$A'def'#$D#$A gdy treœæ pliku abc + #13 + def.

                for j := 0 to zt_xml_document.DocumentElement.ChildNodes.Count - 1 do
                  begin

                    if zt_xml_document.DocumentElement.ChildNodes[ j ].LocalName = 'lotniskowiec' then
                      schematy_lista_r_t_f[ i ].czy_lotniskowiec__sl := AnsiLowerCase( zt_xml_document.DocumentElement.ChildNodes[ j ].Text ) = 'tak'
                    else
                    if zt_xml_document.DocumentElement.ChildNodes[ j ].LocalName = 'nazwa' then
                      schematy_lista_r_t_f[ i ].nazwa__sl := zt_xml_document.DocumentElement.ChildNodes[ j ].Text
                    else
                    if zt_xml_document.DocumentElement.ChildNodes[ j ].LocalName = 'opis' then
                      schematy_lista_r_t_f[ i ].opis__sl := zt_xml_document.DocumentElement.ChildNodes[ j ].Text
                    else
                    if zt_xml_document.DocumentElement.ChildNodes[ j ].LocalName = 'samolot' then
                      schematy_lista_r_t_f[ i ].czy_samolot__sl := AnsiLowerCase( zt_xml_document.DocumentElement.ChildNodes[ j ].Text ) = 'tak';

                  end;
                //---//for j := 0 to zt_xml_document.DocumentElement.ChildNodes.Count - 1 do

              end;
            //---//if zt_xml_document.Active then


            j := -88;

          end;
        //---//if    ( search_rec.Attr <> faDirectory )


      until FindNext( search_rec ) <> 0; // Zwraca dane kolejnego pliku zgodnego z parametrami wczeœniej wywo³anej funkcji FindFirst. Je¿eli mo¿na przejœæ do nastêpnego znalezionego pliku zwraca 0.

    end;
  //---//if FindFirst( zts + '*.xml', faAnyFile, search_rec ) = 0 then

  FindClose( search_rec );

  zt_string_list.Free();
  zt_xml_document.Free();


  if    ( j = -99 )
    and ( katalog_nazwa_f <> katalog__schematy_lista__si_schematy_c ) then
    if lista_indeks_f < 0 then
      Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_odnaleziono_plików + ' (' + katalog_nazwa_f + ').', t³umaczenie_komunikaty_r.komunikat__b³¹d, MB_OK + MB_ICONEXCLAMATION )
    else//if lista_indeks_f < 0 then
      Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_odnaleziono_pliku + ' (' + katalog_nazwa_f + ').', t³umaczenie_komunikaty_r.komunikat__b³¹d, MB_OK + MB_ICONEXCLAMATION );


  if zt_combo_box <> nil then
    begin

      if lista_indeks_f < 0 then
        for i := 0 to Length( schematy_lista_r_t_f ) - 1 do
          begin

            if Trim( schematy_lista_r_t_f[ i ].nazwa__sl ) <> '' then
              zts := schematy_lista_r_t_f[ i ].nazwa__sl
            else//if Trim( schematy_lista_r_t_f[ i ].nazwa__sl ) <> '' then
              zts := schematy_lista_r_t_f[ i ].plik_nazwa__sl;


            if schematy_lista_r_t_f[ i ].czy_samolot__sl then
              zts := zts +
                si_pokój_rozmów__polecenie_symbol__t³umaczenie__prefiks_c + t³umaczenie_komunikaty_r.s³owo__samolot + si_pokój_rozmów__polecenie_symbol__t³umaczenie__sufiks_c;

            zt_combo_box.Items.Add( zts );

          end;
        //---//for i := 0 to Length( schematy_lista_r_t_f ) - 1 do



      if katalog_nazwa_f = katalog__schematy_lista__statki_c then
        begin

          // Dopisuje statki do listy wyboru dla SI.

          if SI__Statek_ComboBox.Items.Count > 0 then
            begin

              j := SI__Statek_ComboBox.ItemIndex;
              SI__Statek_ComboBox.Clear();

            end
          else//if SI__Statek_ComboBox.Items.Count > 0 then
            j := -99;


          for i := 0 to zt_combo_box.Items.Count - 1 do
            SI__Statek_ComboBox.Items.Add( zt_combo_box.Items[ i ] );


          if SI__Statek_ComboBox.Items.Count > 0 then
            if j >= 0 then
              SI__Statek_ComboBox.ItemIndex := j
            else//if j >= 0 then
              SI__Statek_ComboBox.ItemIndex := 0;



          // Statek__Samolot_ComboBox, SI__Statek__Samolot_ComboBox s¹ wpisywane osobno aby zapamiêtaæ wybran¹ pozycjê z listy.

          // Dopisuje statki do listy wyboru samolotów.
          if Statek__Samolot_ComboBox.Items.Count > 0 then
            begin

              j := Statek__Samolot_ComboBox.ItemIndex;
              Statek__Samolot_ComboBox.Clear();

            end
          else//if Statek__Samolot_ComboBox.Items.Count > 0 then
            j := -99;


          Statek__Samolot_ComboBox.Items.Add( '<' + t³umaczenie_komunikaty_r.s³owo__brak__ma³¹_liter¹ + '>' );

          for i := 0 to zt_combo_box.Items.Count - 1 do
            if schematy_lista_r_t_f[ i ].czy_samolot__sl then
              Statek__Samolot_ComboBox.Items.Add( zt_combo_box.Items[ i ] );


          if Statek__Samolot_ComboBox.Items.Count > 0 then
            if j >= 0 then
              Statek__Samolot_ComboBox.ItemIndex := j
            else//if j >= 0 then
              Statek__Samolot_ComboBox.ItemIndex := 1; // <brak>.



          // Dopisuje statki do listy wyboru samolotów dla SI.
          if SI__Statek__Samolot_ComboBox.Items.Count > 0 then
            begin

              j := SI__Statek__Samolot_ComboBox.ItemIndex;
              SI__Statek__Samolot_ComboBox.Clear();

            end
          else//if SI__Statek_ComboBox.Items.Count > 0 then
            j := -99;


          SI__Statek__Samolot_ComboBox.Items.Add( '<' + t³umaczenie_komunikaty_r.s³owo__brak__ma³¹_liter¹ + '>' );

          for i := 0 to zt_combo_box.Items.Count - 1 do
            if schematy_lista_r_t_f[ i ].czy_samolot__sl then
              SI__Statek__Samolot_ComboBox.Items.Add( zt_combo_box.Items[ i ] );


          if SI__Statek__Samolot_ComboBox.Items.Count > 0 then
            if j >= 0 then
              SI__Statek__Samolot_ComboBox.ItemIndex := j
            else//if j >= 0 then
              SI__Statek__Samolot_ComboBox.ItemIndex := 1; // <brak>.



          // Dopisuje statki do listy wyboru zaprezentowania statków.
          zts := ',';

          for i := 0 to Statki_Zaprezentuj_CheckListBox.Items.Count - 1 do
            if Statki_Zaprezentuj_CheckListBox.Checked[ i ] then
              zts := zts +
                ' ' + IntToStr( i ) + ',';

          Statki_Zaprezentuj_CheckListBox.Items.Clear();

          for i := 0 to zt_combo_box.Items.Count - 1 do
            Statki_Zaprezentuj_CheckListBox.Items.Add( zt_combo_box.Items[ i ] );


          for i := 0 to Statki_Zaprezentuj_CheckListBox.Items.Count - 1 do
            Statki_Zaprezentuj_CheckListBox.Checked[ i ] := Pos( ', ' + IntToStr( i ) + ',', zts ) > 0;

          //Statki_Zaprezentuj_CheckListBox.CheckAll( cbChecked, false, false ); // Zaznaczenia s¹ wczytywane z ustawieñ.

        end;
      //---//if katalog_nazwa_f = katalog__schematy_lista__statki_c then


      if    ( item_tndex_kopia_l >= 0 )
        and ( item_tndex_kopia_l <= zt_combo_box.Items.Count ) then
        begin

          zt_combo_box.ItemIndex := item_tndex_kopia_l;

          if Assigned( zt_combo_box.OnChange ) then
            zt_combo_box.OnChange( nil );

        end;
      //---//if    ( item_tndex_kopia_l >= 0 ) (...)

    end;
  //---//if zt_combo_box <> nil then


  if   ( katalog_nazwa_f = katalog__schematy_lista__l¹dy_c )
    or ( katalog_nazwa_f = katalog__schematy_lista__statki_c ) then
    Wczytaj_Schemat_Xml( katalog__schematy_lista__prymitywy_c, -1, prymitywy_lista_t ); // Wczytuje listê prymitywów razem ze schematami statków i l¹dów (podwójnie ale mo¿e byæ ³atwiej podczas tworzenia statków i l¹dów).

end;//---//Funkcja Wczytaj_Schemat_Xml().

//Funkcja xNx__Wiatr__Wartoœæ_Do_Napisu().
function TStatki_Form.xNx__Wiatr__Wartoœæ_Do_Napisu() : string;
begin

  Result :=
    FloatToStr(  RoundTo( wiatr_vector_g.X, -5 )  ) + dŸwiêki__komunikat__separator_c +
    FloatToStr(  RoundTo( wiatr_vector_g.Y, -5 )  ) + dŸwiêki__komunikat__separator_c +
    FloatToStr(  RoundTo( wiatr_vector_g.Z, -5 )  ) + dŸwiêki__komunikat__separator_c +
    FloatToStr(  RoundTo( wiatr_vector_g.W, -5 )  ) + dŸwiêki__komunikat__separator_c;

end;//---//Funkcja xNx__Wiatr__Wartoœæ_Do_Napisu().

//Funkcja Wiatr__Wylicz().
procedure TStatki_Form.Wiatr__Wylicz( const do_klientów_wysy³aj_f : boolean = true );
var
  zt_vector : GLS.VectorTypes.TVector4f;
  wieloosobowe__efekt_r_l : TObiekty_Wieloosobowe__Efekt_r;
begin

  //
  // Funkcja wylicza kierunek i si³ê wiatru.
  //
  // Parametry:
  //   do_klientów_wysy³aj_f:
  //     false - nie wysy³a informacji o zmianach wiatru do klientów.
  //     true - wysy³a informacje o zmianach wiatru do klientów.
  //

  if not czy_klient_g then
    begin

      if   ( not Wiatr_CheckBox.Checked )
        or (  Czas_Miêdzy_W_Sekundach( wiatr__czas_przeliczenia_ostatniego_sekundy_i_g ) < wiatr__przeliczenie_sekundy_g  ) then
        Exit;


      wiatr_vector_g :=
        GLS.VectorGeometry.VectorMake
          (
              RandomRange( -100, 101 )
            , RandomRange( -100, 101 )
            , RandomRange( -100, 101 )
          );
      GLS.VectorGeometry.NormalizeVector( wiatr_vector_g );


      case Wiatr__Zmiana_Tryb_RadioGroup.ItemIndex of
          0 : wiatr_vector_g.W := Random(  System.Math.Floor( Wiatr__Si³a_SpinEdit.Value )  ); // auto.
          1 : wiatr_vector_g.W := Random(  System.Math.Floor( Morze_Wzburzenie_SpinEdit.Value * 0.2 )  ); // wg. morza
          else//case Wiatr__Zmiana_Tryb_RadioGroup.ItemIndex of
            wiatr_vector_g.W := Wiatr__Si³a_SpinEdit.Value; // w. zadana
        end;
      //---//case Wiatr__Zmiana_Tryb_RadioGroup.ItemIndex of

    end;
  //---//if not czy_klient_g then


  // Ujemne wartoœci bo linia wskazuje kierunek z którego wieje wiatr.
  Radar_Wiatr_Kierunek_Linia_GLLines.Direction.X := -wiatr_vector_g.X;
  Radar_Wiatr_Kierunek_Linia_GLLines.Direction.Z := -wiatr_vector_g.Z;


  // Je¿eli si³a wiatru wynosi zero to nie widaæ linii wiatru na radarze.
  if wiatr_vector_g.W > 0 then
    Radar_Wiatr_Kierunek_Linia_GLLines.Nodes[ 1 ].Z := Radar_PN_Linia_GLLines.Nodes[ 1 ].Z
  else//if wiatr_vector_g.W > 0 then
    Radar_Wiatr_Kierunek_Linia_GLLines.Nodes[ 1 ].Z := 0;


  zt_vector := Gra_GLCamera.AbsolutePosition;

  if zt_vector.Y < 0 then
    zt_vector.Y := 0;


  if Wiatr_CheckBox.Checked then
    DŸwiêki__Efekt__Utwórz_Jeden( der_Wiatr, zt_vector.X + wiatr_vector_g.X, zt_vector.Y - wiatr_vector_g.Y, zt_vector.Z + wiatr_vector_g.Z );


  if czy_serwer_g then
    begin

      wieloosobowe__efekt_r_l.pozycja_ef__owo := wiatr_vector_g;
      //Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__wiatr_c, -99, xNx__Wiatr__Wartoœæ_Do_Napisu() );
      Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__wiatr_c, -99, wieloosobowe__efekt_r_l );

    end;
  //---//if czy_serwer_g then


  if not czy_klient_g then
    wiatr__czas_przeliczenia_ostatniego_sekundy_i_g := Czas_Teraz_W_Sekundach();

end;//---//Funkcja Wiatr__Wylicz().

//Funkcja Wieloosobowe_Amunicja_Parametry_Odczytaj().
procedure TStatki_Form.Wieloosobowe_Amunicja_Parametry_Odczytaj();
var
  i : integer;
begin

  //
  // Funkcja odczytuje parametry amunicji.
  //

  if   ( amunicja_wystrzelona_list = nil )
    or (  not Assigned( amunicja_wystrzelona_list )  ) then
    Exit;


  SetLength( wieloosobowe__amunicja_t, 0 );
  SetLength( wieloosobowe__amunicja_t, amunicja_wystrzelona_list.Count );


  for i := amunicja_wystrzelona_list.Count - 1 downto 0 do
    begin

      wieloosobowe__amunicja_t[ i ].id_gracz_am__owo := TAmunicja(amunicja_wystrzelona_list[ i ]).id_gracz;
      wieloosobowe__amunicja_t[ i ].id_statek_am__owo := TAmunicja(amunicja_wystrzelona_list[ i ]).id_statek;
      wieloosobowe__amunicja_t[ i ].id_wieloosobowe_amunicja__owo := TAmunicja(amunicja_wystrzelona_list[ i ]).id_amunicja;
      wieloosobowe__amunicja_t[ i ].czy_lot_parabol¹_am__owo := TAmunicja(amunicja_wystrzelona_list[ i ]).czy_lot_parabol¹;
      wieloosobowe__amunicja_t[ i ].czy_poza_luf¹__owo := TAmunicja(amunicja_wystrzelona_list[ i ]).czy_poza_luf¹;
      //wieloosobowe__amunicja_t[ i ].przeliczone_am__owo := false;

      wieloosobowe__amunicja_t[ i ].kierunek_am__owo := TAmunicja(amunicja_wystrzelona_list[ i ]).korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsoluteDirection;
      wieloosobowe__amunicja_t[ i ].pozycja_am__owo := TAmunicja(amunicja_wystrzelona_list[ i ]).korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsolutePosition;
      wieloosobowe__amunicja_t[ i ].pozycja_celu__owo := TAmunicja(amunicja_wystrzelona_list[ i ]).pozycja_celu.AbsolutePosition;

      wieloosobowe__amunicja_t[ i ].korpus__BottomRadius__owo := TAmunicja(amunicja_wystrzelona_list[ i ]).korpus__amunicja.BottomRadius;
      wieloosobowe__amunicja_t[ i ].korpus__TopRadius__owo := TAmunicja(amunicja_wystrzelona_list[ i ]).korpus__amunicja.TopRadius;
      wieloosobowe__amunicja_t[ i ].pitch_angle__owo := TAmunicja(amunicja_wystrzelona_list[ i ]).PitchAngle;
      wieloosobowe__amunicja_t[ i ].skala__amunicja__owo := TAmunicja(amunicja_wystrzelona_list[ i ]).skala__amunicja;
      wieloosobowe__amunicja_t[ i ].turn_angle__owo := TAmunicja(amunicja_wystrzelona_list[ i ]).TurnAngle;

      wieloosobowe__amunicja_t[ i ].korpus__Height__owo := TAmunicja(amunicja_wystrzelona_list[ i ]).korpus__amunicja.Height;
      wieloosobowe__amunicja_t[ i ].jasna_linia_Height__owo := TAmunicja(amunicja_wystrzelona_list[ i ]).jasna_linia.Height;

      wieloosobowe__amunicja_t[ i ].amunicja_rodzaj_am__owo := TAmunicja(amunicja_wystrzelona_list[ i ]).amunicja_rodzaj;

      if TAmunicja(amunicja_wystrzelona_list[ i ]).torpeda_efekt_na_wodzie_gl_dummy_cube = nil then
        wieloosobowe__amunicja_t[ i ].torpeda_efekt_na_wodzie_stan__owo := 2
      else//if TAmunicja(amunicja_wystrzelona_list[ i ]).torpeda_efekt_na_wodzie_gl_dummy_cube = nil then
      if TAmunicja(amunicja_wystrzelona_list[ i ]).torpeda_efekt_na_wodzie_gl_dummy_cube.Parent = nil then
        wieloosobowe__amunicja_t[ i ].torpeda_efekt_na_wodzie_stan__owo := 0
      else//if TAmunicja(amunicja_wystrzelona_list[ i ]).torpeda_efekt_na_wodzie_gl_dummy_cube.Parent = nil then
        wieloosobowe__amunicja_t[ i ].torpeda_efekt_na_wodzie_stan__owo := 1;

    end;
  //---//for i := amunicja_wystrzelona_list.Count - 1 downto 0 do

end;//---//Funkcja Wieloosobowe_Amunicja_Parametry_Odczytaj().

//Funkcja Wieloosobowe_Amunicja_Parametry_Ustaw().
procedure TStatki_Form.Wieloosobowe_Amunicja_Parametry_Ustaw();

  //Funkcja Parametry_Ustaw() w Wieloosobowe_Amunicja_Parametry_Ustaw().
  procedure Parametry_Ustaw( amunicja_f : TAmunicja; var obiekty_wieloosobowe_amunicja_r_f : TObiekty_Wieloosobowe__Amunicja_r );
  begin

    if   ( amunicja_wystrzelona_list = nil )
      or (  not Assigned( amunicja_wystrzelona_list )  ) then
      Exit;

    amunicja_f.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsolutePosition := obiekty_wieloosobowe_amunicja_r_f.pozycja_am__owo;
    amunicja_f.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.AbsoluteDirection := obiekty_wieloosobowe_amunicja_r_f.kierunek_am__owo;
    amunicja_f.AbsolutePosition := obiekty_wieloosobowe_amunicja_r_f.pozycja_am__owo; // Dla ustawienia kamery na amunicji dla klientów.
    amunicja_f.AbsoluteDirection := obiekty_wieloosobowe_amunicja_r_f.kierunek_am__owo; // Dla ustawienia kamery na amunicji dla klientów.

    amunicja_f.TurnAngle := obiekty_wieloosobowe_amunicja_r_f.turn_angle__owo;
    amunicja_f.PitchAngle := obiekty_wieloosobowe_amunicja_r_f.pitch_angle__owo;

    amunicja_f.jasna_linia.Height := obiekty_wieloosobowe_amunicja_r_f.jasna_linia_Height__owo;
    amunicja_f.Jasna_Linia_Pozycja_Z_Ustaw();

    if    ( obiekty_wieloosobowe_amunicja_r_f.czy_poza_luf¹__owo )
      and ( amunicja_f.jasna_linia.Position.Y <> amunicja_f.korpus__amunicja.TopRadius ) then
      amunicja_f.jasna_linia.Position.Y := amunicja_f.korpus__amunicja.TopRadius; // To samo .jasna_linia.Height.


    if    ( Amunicja__Cel_Pozycja_Dla_Lotu_Parabol¹_Wyœwietl_CheckBox.Checked ) // Taki sam warunek pozycja_celu_Visible.
      and ( not amunicja_f.pozycja_celu.Visible )
      and ( obiekty_wieloosobowe_amunicja_r_f.czy_lot_parabol¹_am__owo )
      and ( obiekty_wieloosobowe_amunicja_r_f.czy_poza_luf¹__owo )
      and ( amunicja_f.id_gracz = Gracz_Identyfikator() ) then
      begin

        amunicja_f.pozycja_celu.AbsolutePosition := obiekty_wieloosobowe_amunicja_r_f.pozycja_celu__owo;
        amunicja_f.pozycja_celu.Visible := true;

      end;
    //---//if    ( Amunicja__Cel_Pozycja_Dla_Lotu_Parabol¹_Wyœwietl_CheckBox.Checked ) (...)


    //obiekty_wieloosobowe_amunicja_r_f.przeliczone_am__owo := true;


    if    ( obiekty_wieloosobowe_amunicja_r_f.torpeda_efekt_na_wodzie_stan__owo = 1 )
      and ( amunicja_f.torpeda_efekt_na_wodzie_gl_dummy_cube <> nil ) then
      begin

        if amunicja_f.torpeda_efekt_na_wodzie_gl_dummy_cube.Parent = nil then
          begin

            Amunicja_Wystrzelona_Efekt_Utwórz( amunicja_f, true, dzieñ_jasnoœæ_g, true );
            amunicja_f.torpeda_efekt_na_wodzie_gl_dummy_cube.Parent := Gra_Obiekty_GLDummyCube;

          end
        else//if amunicja_f.torpeda_efekt_na_wodzie_gl_dummy_cube.Parent = nil then
          begin

            amunicja_f.torpeda_efekt_na_wodzie_gl_dummy_cube.Position.AsVector := VectorMake(  amunicja_f.korpus__amunicja.AbsolutePosition.X, 0 + ( Random() - 0.5 ) * 0.25, amunicja_f.korpus__amunicja.AbsolutePosition.Z  );

          end;
        //---//if amunicja_f.torpeda_efekt_na_wodzie_gl_dummy_cube.Parent <> nil then

      end
    else//if    ( obiekty_wieloosobowe_amunicja_r_f.torpeda_efekt_na_wodzie_stan__owo = 1 ) (...)
    if    ( obiekty_wieloosobowe_amunicja_r_f.torpeda_efekt_na_wodzie_stan__owo = 2 )
      and ( amunicja_f.torpeda_efekt_na_wodzie_gl_dummy_cube <> nil ) then
      FreeAndNil( amunicja_f.torpeda_efekt_na_wodzie_gl_dummy_cube );



    // To samo der_Amunicja__Lot.
    if    ( DŸwiêk__Aktywnoœæ_CheckBox.Checked )
      and ( GLSMOpenAL1.Active )
      and ( ActiveSoundManager() <> nil ) then
      if    ( amunicja_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] )
        and ( amunicja_f.AbsolutePosition.Y < 0 )
        and (  amunicja_f.Behaviours.IndexOfClass( TGLBSoundEmitter ) > -1  ) // -1 - brak, >= 0 zachowania.
        and ( not TGLBSoundEmitter(amunicja_f.Behaviours.Items[ 0 ]).Playing ) then
        TGLBSoundEmitter(amunicja_f.Behaviours.Items[ 0 ]).Playing := true // Gdy torpeda pierwszy raz wpadnie do wody w³¹cza efekt dŸwiêkowy.
      else//if    ( amunicja_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] ) (...)
        if    (  not ( amunicja_f.amunicja_rodzaj in [ Typy_Wspolne.ar_Torpeda ] )  )
          and (  amunicja_f.Behaviours.IndexOfClass( TGLBSoundEmitter ) > -1  ) then // -1 - brak, >= 0 zachowania.
          if    ( amunicja_f.AbsolutePosition.Y < 0 )
            and ( TGLBSoundEmitter(amunicja_f.Behaviours.Items[ 0 ]).Playing ) then
            TGLBSoundEmitter(amunicja_f.Behaviours.Items[ 0 ]).Playing := false // Gdy amunicja wpadnie pod wodê wy³¹cza dŸwiêk lotu.
          else//if    ( amunicja_f.AbsolutePosition.Y < 0 ) (...)
          if    ( amunicja_f.AbsolutePosition.Y >= 0 )
            and ( not TGLBSoundEmitter(amunicja_f.Behaviours.Items[ 0 ]).Playing ) then
            TGLBSoundEmitter(amunicja_f.Behaviours.Items[ 0 ]).Playing := true; // Gdy amunicja wzleci na wodê w³¹cza dŸwiêk lotu.

  end;//---//Funkcja Parametry_Ustaw() w Wieloosobowe_Amunicja_Parametry_Ustaw().

var
  i,
  j
    : integer;
  zt_amunicja : TAmunicja;

  ztb : boolean;
begin//Funkcja Wieloosobowe_Amunicja_Parametry_Ustaw().

  //
  // Funkcja ustawia parametry amunicji wieloosobowej.
  //

  // Je¿eli wczeœniej utworzonej amunicji nie ma na otrzymanej liœcie amunicji usuwa wczeœniej utworzon¹ amunicjê.
  for i := wieloosobowe_amunicja_wystrzelona_list.Count - 1 downto 0 do
    begin

      ztb := false;

      for j := 0 to Length( wieloosobowe__amunicja_t ) - 1 do
        if wieloosobowe__amunicja_t[ j ].id_wieloosobowe_amunicja__owo = TAmunicja(wieloosobowe_amunicja_wystrzelona_list[ i ]).id_amunicja then
          begin

            ztb := true;
            Parametry_Ustaw( TAmunicja(wieloosobowe_amunicja_wystrzelona_list[ i ]), wieloosobowe__amunicja_t[ j ] );
            //wieloosobowe__amunicja_t[ j ].przeliczone := true;
            Break;

          end;
        //---//if wieloosobowe__amunicja_t[ j ].id_wieloosobowe_amunicja__owo = TAmunicja(wieloosobowe_amunicja_wystrzelona_list[ i ]).id_amunicja then


      if not ztb then
        Wieloosobowe_Amunicja_Wystrzelona_Zwolnij_Jeden( wieloosobowe_amunicja_wystrzelona_list, i );

    end;
  //---//for i := wieloosobowe_amunicja_wystrzelona_list.Count - 1 downto 0 do
  //---// Je¿eli wczeœniej utworzonej amunicji nie ma na otrzymanej liœcie amunicji usuwa wczeœniej utworzon¹ amunicjê.


  for i := 0 to Length( wieloosobowe__amunicja_t ) - 1 do
    //if not wieloosobowe__amunicja_t[ i ].przeliczone_am__owo then
      begin

        ztb := false;

        for j := 0 to wieloosobowe_amunicja_wystrzelona_list.Count - 1 do
          if wieloosobowe__amunicja_t[ i ].id_wieloosobowe_amunicja__owo = TAmunicja(wieloosobowe_amunicja_wystrzelona_list[ j ]).id_amunicja then
            begin

              // Je¿eli wczeœniej utworzona amunicja jest na otrzymanej liœcie amunicji ustawia jej aktualne parametry.

              ztb := true;
              Parametry_Ustaw( TAmunicja(wieloosobowe_amunicja_wystrzelona_list[ j ]), wieloosobowe__amunicja_t[ i ] );
              //wieloosobowe__amunicja_t[ i ].przeliczone := true;
              Break;

            end;
          //---//if wieloosobowe__amunicja_t[ i ].id_wieloosobowe_amunicja__owo = TAmunicja(wieloosobowe_amunicja_wystrzelona_list[ j ]).id_amunicja then

        if not ztb then
          begin

            // Je¿eli na otrzymanej liœcie amunicji nie ma wczeœniej utworzonej amunicji dodaje brakuj¹c¹ amunicjê.

            zt_amunicja := TAmunicja.Create( wieloosobowe__amunicja_t[ i ], Gra_Obiekty_GLDummyCube );
            zt_amunicja.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.Scale.Scale( zt_amunicja.skala__amunicja );


            if wieloosobowe_amunicja_efekt_g = nil then
              begin

                wieloosobowe_amunicja_efekt_g := TAmunicja.Create( wieloosobowe__amunicja_t[ i ], Gra_Obiekty_GLDummyCube ); // Pierwsze utworzenie instancji.

                // Nie ma detekcji kolizji.
                wieloosobowe_amunicja_efekt_g.skala__amunicja := 1;
                wieloosobowe_amunicja_efekt_g.Position.Y := Dno_GLPlane.Position.Y * 2;
                wieloosobowe_amunicja_efekt_g.ResetRotations();
                wieloosobowe_amunicja_efekt_g.Visible := false;
                wieloosobowe_amunicja_efekt_g.korpus_ustawienie_pocz¹tkowe_gl_dummy_cube.Visible := false;

              end;
            //---//if wieloosobowe_amunicja_efekt_g = nil then


            Amunicja_Wystrzelona_Efekt_Utwórz( zt_amunicja, false, dzieñ_jasnoœæ_g, true );

            wieloosobowe_amunicja_wystrzelona_list.Add( zt_amunicja );

            Parametry_Ustaw( zt_amunicja, wieloosobowe__amunicja_t[ i ] );
            //wieloosobowe__amunicja_t[ i ].przeliczone := true;

            DŸwiêki__Efekt__Utwórz_Jeden( zt_amunicja, der_Amunicja__Lot, 0, 0, 0 );


            zt_amunicja.obra¿enia_zasiêg_st_gl_sphere.Visible := amunicja__obra¿enia_zasiêg_widoczne_g;

          end;
        //---//if not ztb then

      end;
    //---//for i := 0 to Length( wieloosobowe__amunicja_t ) - 1 do

end;//---//Funkcja Wieloosobowe_Amunicja_Parametry_Ustaw().

//Funkcja Wieloosobowe_Amunicja_Wystrzelona_Zwolnij_Jeden().
procedure TStatki_Form.Wieloosobowe_Amunicja_Wystrzelona_Zwolnij_Jeden( lista_f : TList; const indeks_f : integer );
begin

  if   ( indeks_f < 0 )
    or ( lista_f = nil )
    or ( indeks_f > lista_f.Count - 1 )
    or ( lista_f.Count < 1 ) then
    Exit;


  if Gra_GLCamera <> nil then
    if Gra_GLCamera.Parent = lista_f[ indeks_f ] then
      if wieloosobowe_amunicja_wystrzelona_list.Count > 1 then
        Kamera_Prze³¹cz( kt_Amunicja ) // Prze³¹cza na kolejn¹ wystrzelon¹ amunicjê.
      else//if wieloosobowe_amunicja_wystrzelona_list.Count > 1 then
        Kamera_Prze³¹cz( kt_Statek );


  // Aby nie zwolni³o kamery wraz z amunicj¹.
  while Gra_GLCamera.Parent = lista_f[ indeks_f ] do
    Kamera_Prze³¹cz( kt_Statek__Swobodna );


  TAmunicja(lista_f[ indeks_f ]).Free();
  lista_f.Delete( indeks_f );

end;//---//Funkcja Wieloosobowe_Amunicja_Wystrzelona_Zwolnij_Jeden().

//Funkcja Wieloosobowe_Klawisze_Obs³uga_Parametry_Odczytaj().
procedure TStatki_Form.Wieloosobowe_Klawisze_Obs³uga_Parametry_Odczytaj(  Sender : TObject = nil );
var
  zt_statek : TStatek;
begin

  //
  // Funkcja odczytuje parametry obs³ugi klawiszy.
  //

  if    ( Sender <> nil )
    and ( TComponent(Sender).Name = SI__P³ywa__Statek_Gracza_CheckBox.Name ) then
    zt_statek := statek_gracza
  else//if    ( Sender <> nil ) (...)
  if    ( Sender <> nil )
    and ( TComponent(Sender).Name = SI__P³ywa__Samolot_Gracza_CheckBox.Name ) then
    zt_statek := samolot__statek_gracza
  else//if    ( Sender <> nil ) (...)
    zt_statek := Statek_Gracza__Gracz_Tryb_Zwróæ();


  if zt_statek <> nil then
    begin

      wieloosobowe__statek_klawisze_obs³uga_r.id_statek_kl__owo := zt_statek.id_statek;
      wieloosobowe__statek_klawisze_obs³uga_r.amunicja_zanurzenie_g³êbokoœæ_zadana__owo := zt_statek.amunicja_zanurzenie_g³êbokoœæ_zadana;
      wieloosobowe__statek_klawisze_obs³uga_r.amunicja_rodzaj_wybrana__artyleria__owo := zt_statek.amunicja_rodzaj_wybrana__artyleria;
      wieloosobowe__statek_klawisze_obs³uga_r.amunicja_rodzaj_wybrana__bomba_g³êbinowa__owo := zt_statek.amunicja_rodzaj_wybrana__bomba_g³êbinowa;
      wieloosobowe__statek_klawisze_obs³uga_r.amunicja_rodzaj_wybrana__je¿e_g³êbinowe__owo := zt_statek.amunicja_rodzaj_wybrana__je¿e_g³êbinowe;
      wieloosobowe__statek_klawisze_obs³uga_r.amunicja_rodzaj_wybrana__pocisk__owo := zt_statek.amunicja_rodzaj_wybrana__pocisk;
      wieloosobowe__statek_klawisze_obs³uga_r.amunicja_rodzaj_wybrana__torpeda__owo := zt_statek.amunicja_rodzaj_wybrana__torpeda;
      wieloosobowe__statek_klawisze_obs³uga_r.amunicja_rodzaj_wybrana__wszystkie__owo := zt_statek.amunicja_rodzaj_wybrana__wszystkie;
      wieloosobowe__statek_klawisze_obs³uga_r.celowanie__bronie_osobno__owo := zt_statek.celowanie__bronie_osobno;
      wieloosobowe__statek_klawisze_obs³uga_r.celowanie__tryb__owo := integer(zt_statek.celowanie__tryb);
      //wieloosobowe__statek_klawisze_obs³uga_r.celowanie_precyzja__falowanie_niwelowanie__owo := zt_statek.celowanie_precyzja__falowanie_niwelowanie;
      wieloosobowe__statek_klawisze_obs³uga_r.celowanie_precyzja__obrót__owo := zt_statek.celowanie_precyzja__obrót;
      wieloosobowe__statek_klawisze_obs³uga_r.celowanie_precyzja__podniesienie__owo := zt_statek.celowanie_precyzja__podniesienie;
      wieloosobowe__statek_klawisze_obs³uga_r.si__statek_gracza__p³ywa__owo := zt_statek.si__statek_gracza__p³ywa;
      wieloosobowe__statek_klawisze_obs³uga_r.si__statek_gracza__strzela__owo := integer(zt_statek.si__statek_gracza__strzela);
      wieloosobowe__statek_klawisze_obs³uga_r.œwiat³a_w³¹czone__owo_sko := zt_statek.œwiat³a_w³¹czone;
      wieloosobowe__statek_klawisze_obs³uga_r.œwiat³a_dodatkowe_w³¹czone__owo_sko := zt_statek.œwiat³a_dodatkowe_w³¹czone;
      wieloosobowe__statek_klawisze_obs³uga_r.zanurzenie_zadane_przekraczaj_100_procent__owo_sko := zt_statek.zanurzenie_zadane_przekraczaj_100_procent;
      wieloosobowe__statek_klawisze_obs³uga_r.cel_wspó³rzêdne__owo := zt_statek.cel_wspó³rzêdne_bezwzglêdne_affine_vektor;

    end
  else//if zt_statek <> nil then
    begin

      wieloosobowe__statek_klawisze_obs³uga_r.id_statek_kl__owo := -9999;
      wieloosobowe__statek_klawisze_obs³uga_r.cel_wspó³rzêdne__owo := GLS.VectorGeometry.AffineVectorMake( 0, 0, 0 );

    end;
  //---//if zt_statek <> nil then


  wieloosobowe__statek_klawisze_obs³uga_r.klawisz__owo := 0;
  wieloosobowe__statek_klawisze_obs³uga_r.mysz_przycisk__owo := -1;
  wieloosobowe__statek_klawisze_obs³uga_r.polecenie__nazwa__owo := '';
  wieloosobowe__statek_klawisze_obs³uga_r.shift__owo := [];

end;//---//Funkcja Wieloosobowe_Klawisze_Obs³uga_Parametry_Odczytaj().

//Funkcja Wieloosobowe_Klawisze_Obs³uga_Parametry_Ustaw().
procedure TStatki_Form.Wieloosobowe_Klawisze_Obs³uga_Parametry_Ustaw( const wieloosobowe__statek_klawisze_obs³uga_r_f : TObiekty_Wieloosobowe__Statek_Klawisze_Obs³uga_r );
var
  czy_œwiat³a_w³¹czone_zmiana,
  czy_œwiat³a_dodatkowe_w³¹czone_zmiana,
  si__statek_gracza__p³ywa_kopia
    : boolean;
  i : integer;
  zt_statek : TStatek;
  si__statek_gracza__strzela_kopia : TSi__Statek_Gracza__Strzela;
begin

  //
  // Funkcja ustawia parametry statku zgodnie z poleceniami gracza.
  //
  // Parametry:
  //   wieloosobowe__statek_klawisze_obs³uga_r_f
  //


  zt_statek := nil;


  for i := 0 to Length( statki_t ) - 1 do
    if    ( statki_t[ i ] <> nil )
      and ( statki_t[ i ].id_statek = wieloosobowe__statek_klawisze_obs³uga_r_f.id_statek_kl__owo ) then
      begin

        zt_statek := statki_t[ i ];
        Break;

      end;
    //---//if    ( statki_t[ i ] <> nil ) (...)


  if   ( zt_statek = nil )
    or (  not Assigned( zt_statek )  ) then
    Exit;


  zt_statek.amunicja_zanurzenie_g³êbokoœæ_zadana := wieloosobowe__statek_klawisze_obs³uga_r_f.amunicja_zanurzenie_g³êbokoœæ_zadana__owo;
  zt_statek.amunicja_rodzaj_wybrana__artyleria := wieloosobowe__statek_klawisze_obs³uga_r_f.amunicja_rodzaj_wybrana__artyleria__owo;
  zt_statek.amunicja_rodzaj_wybrana__bomba_g³êbinowa := wieloosobowe__statek_klawisze_obs³uga_r_f.amunicja_rodzaj_wybrana__bomba_g³êbinowa__owo;
  zt_statek.amunicja_rodzaj_wybrana__je¿e_g³êbinowe := wieloosobowe__statek_klawisze_obs³uga_r_f.amunicja_rodzaj_wybrana__je¿e_g³êbinowe__owo;
  zt_statek.amunicja_rodzaj_wybrana__pocisk := wieloosobowe__statek_klawisze_obs³uga_r_f.amunicja_rodzaj_wybrana__pocisk__owo;
  zt_statek.amunicja_rodzaj_wybrana__torpeda := wieloosobowe__statek_klawisze_obs³uga_r_f.amunicja_rodzaj_wybrana__torpeda__owo;
  zt_statek.amunicja_rodzaj_wybrana__wszystkie := wieloosobowe__statek_klawisze_obs³uga_r_f.amunicja_rodzaj_wybrana__wszystkie__owo;
  zt_statek.celowanie__bronie_osobno := wieloosobowe__statek_klawisze_obs³uga_r_f.celowanie__bronie_osobno__owo;

  if    (  wieloosobowe__statek_klawisze_obs³uga_r_f.celowanie__tryb__owo >= integer(Low( TCelowanie_Tryb ))  )
    and (  wieloosobowe__statek_klawisze_obs³uga_r_f.celowanie__tryb__owo <= integer(High( TCelowanie_Tryb ))  ) then
    zt_statek.celowanie__tryb := TCelowanie_Tryb(wieloosobowe__statek_klawisze_obs³uga_r_f.celowanie__tryb__owo);

  //zt_statek.celowanie_precyzja__falowanie_niwelowanie := wieloosobowe__statek_klawisze_obs³uga_r_f.celowanie_precyzja__falowanie_niwelowanie__owo;
  zt_statek.celowanie_precyzja__obrót := wieloosobowe__statek_klawisze_obs³uga_r_f.celowanie_precyzja__obrót__owo;
  zt_statek.celowanie_precyzja__podniesienie := wieloosobowe__statek_klawisze_obs³uga_r_f.celowanie_precyzja__podniesienie__owo;

  si__statek_gracza__p³ywa_kopia := zt_statek.si__statek_gracza__p³ywa;
  si__statek_gracza__strzela_kopia := zt_statek.si__statek_gracza__strzela;
  zt_statek.si__statek_gracza__p³ywa := wieloosobowe__statek_klawisze_obs³uga_r_f.si__statek_gracza__p³ywa__owo;
  zt_statek.si__statek_gracza__strzela := TSi__Statek_Gracza__Strzela(wieloosobowe__statek_klawisze_obs³uga_r_f.si__statek_gracza__strzela__owo);

  czy_œwiat³a_w³¹czone_zmiana := zt_statek.œwiat³a_w³¹czone <> wieloosobowe__statek_klawisze_obs³uga_r_f.œwiat³a_w³¹czone__owo_sko;
  zt_statek.œwiat³a_w³¹czone := wieloosobowe__statek_klawisze_obs³uga_r_f.œwiat³a_w³¹czone__owo_sko;

  czy_œwiat³a_dodatkowe_w³¹czone_zmiana := zt_statek.œwiat³a_dodatkowe_w³¹czone <> wieloosobowe__statek_klawisze_obs³uga_r_f.œwiat³a_dodatkowe_w³¹czone__owo_sko;
  zt_statek.œwiat³a_dodatkowe_w³¹czone := wieloosobowe__statek_klawisze_obs³uga_r_f.œwiat³a_dodatkowe_w³¹czone__owo_sko;
  zt_statek.zanurzenie_zadane_przekraczaj_100_procent := wieloosobowe__statek_klawisze_obs³uga_r_f.zanurzenie_zadane_przekraczaj_100_procent__owo_sko;

  zt_statek.Amunicja_Rodzaj_Zbiór_Wyznacz();


  if    ( czy_serwer_g )
    and (
             ( czy_œwiat³a_w³¹czone_zmiana )
          or ( czy_œwiat³a_dodatkowe_w³¹czone_zmiana )
        ) then
    Noc_SpinEditChange( nil );


  if    ( czy_œwiat³a_w³¹czone_zmiana )
    and ( not zt_statek.œwiat³a_w³¹czone ) then
    zt_statek.Œwiat³a_Miganie__OpóŸnienia_Losowe_Resetuj__Statek( false );

  if    ( czy_œwiat³a_dodatkowe_w³¹czone_zmiana )
    and ( not zt_statek.œwiat³a_dodatkowe_w³¹czone ) then
    zt_statek.Œwiat³a_Miganie__OpóŸnienia_Losowe_Resetuj__Statek( true );


  SI__Statek_Gracza__Sterowanie_Ustaw( zt_statek, si__statek_gracza__p³ywa_kopia, si__statek_gracza__strzela_kopia );


  // Je¿eli gracz ma statek i samolot to taka sama wartoœæ jest ustawiana do obu.
  for i := 0 to Length( statki_t ) - 1 do
    if    ( statki_t[ i ] <> nil )
      and ( statki_t[ i ].id_statek <> zt_statek.id_statek )
      and ( statki_t[ i ].id_gracz = zt_statek.id_gracz )
      and ( statki_t[ i ].si__statek_gracza__strzela <> zt_statek.si__statek_gracza__strzela ) then
      begin

        statki_t[ i ].si__statek_gracza__strzela := zt_statek.si__statek_gracza__strzela;

        SI__Statek_Gracza__Sterowanie_Ustaw( zt_statek, si__statek_gracza__p³ywa_kopia, sisgs_Brak ); // sisgs_Brak - wartoœæ niemo¿liwa do wybrania w SI__Strzela__Statek_Gracza_RadioGroup.

      end;
    //---//if    ( statki_t[ i ] <> nil ) (...)

end;//---//Funkcja Wieloosobowe_Klawisze_Obs³uga_Parametry_Ustaw().

//Funkcja Wieloosobowe_Statki__Parametry_Odczytaj().
procedure TStatki_Form.Wieloosobowe_Statki__Parametry_Odczytaj();
var
  i,
  j,
  k
    : integer;
begin

  //
  // Funkcja odczytuje parametry statków wieloosobowych.
  //

  if Length( wieloosobowe__statki_t ) <> Length( statki_t ) then
    begin


      Wieloosobowe_Statki__Rekord_Czyœæ();
      SetLength(  wieloosobowe__statki_t, Length( statki_t )  );

    end;
  //---//if Length( wieloosobowe__statki_t ) <> Length( statki_t ) then


  for i := 0 to Length( statki_t ) - 1 do
    begin

      //wieloosobowe__statki_t[ i ].cel_wspó³rzêdne := Vector__Do__Wieloosobowe__Wektor_4( statki_t[ i ].celownicza_linia.Nodes[ 1 ].AsVector ); //???

      wieloosobowe__statki_t[ i ].id_gracz__owo := statki_t[ i ].id_gracz;
      wieloosobowe__statki_t[ i ].id_grupa__owo := statki_t[ i ].id_grupa;
      wieloosobowe__statki_t[ i ].id_statek_st__owo := statki_t[ i ].id_statek;
      wieloosobowe__statki_t[ i ].id_statek_schemat__owo := statki_t[ i ].id_statek_schemat;
      //wieloosobowe__statki_t[ i ].gracz__nazwa__owo := statki_t[ i ].gracz__nazwa.Text;
      //wieloosobowe__statki_t[ i ].przeliczone_st__owo := false;

      wieloosobowe__statki_t[ i ].pozycja_st__owo := Vector__Do__Wieloosobowe__Wektor_4( statki_t[ i ].AbsolutePosition );
      wieloosobowe__statki_t[ i ].kierunek_st__owo := Vector__Do__Wieloosobowe__Wektor_4( statki_t[ i ].AbsoluteDirection );

      wieloosobowe__statki_t[ i ].czy_lotniskowiec__owo := statki_t[ i ].czy_lotniskowiec;
      wieloosobowe__statki_t[ i ].czy_samolot__owo := statki_t[ i ].czy_samolot;
      wieloosobowe__statki_t[ i ].czy_samolot__kolizja__owo := statki_t[ i ].czy_samolot__kolizja;
      wieloosobowe__statki_t[ i ].falowanie_bok_skrêt__owo := statki_t[ i ].falowanie_bok_skrêt;
      wieloosobowe__statki_t[ i ].falowanie_przód_pu³ap__owo := statki_t[ i ].falowanie_przód_pu³ap;
      wieloosobowe__statki_t[ i ].falowanie_przód_ruch__owo := statki_t[ i ].falowanie_przód_ruch;
      wieloosobowe__statki_t[ i ].toniêcie__przechylenie__lewo_prawo__owo := statki_t[ i ].toniêcie_gl_dummy_cube.RollAngle;
      wieloosobowe__statki_t[ i ].toniêcie__przechylenie__przód_ty³__owo := statki_t[ i ].toniêcie_gl_dummy_cube.PitchAngle;
      wieloosobowe__statki_t[ i ].punkty_¿ycia__owo := statki_t[ i ].punkty_¿ycia_aktualne;
      wieloosobowe__statki_t[ i ].punkty_¿ycia_maksymalne__owo := statki_t[ i ].punkty_¿ycia_maksymalne;
      wieloosobowe__statki_t[ i ].punkty_¿ycia_procent_zosta³o__owo := statki_t[ i ].punkty_¿ycia_procent_zosta³o;


      if Length( statki_t[ i ].ster_t ) > 0 then
        wieloosobowe__statki_t[ i ].ster_k¹t__owo := statki_t[ i ].ster_t[ 0 ].TurnAngle
      else//if Length( statki_t[ i ].ster_t ) > 0 then
        wieloosobowe__statki_t[ i ].ster_k¹t__owo := 0;

      if Length( statki_t[ i ].ster_g³êbokoœci_t ) > 0 then
        wieloosobowe__statki_t[ i ].ster_g³êbokoœci_k¹t__owo := statki_t[ i ].ster_g³êbokoœci_t[ 0 ].PitchAngle
      else//if Length( statki_t[ i ].ster_g³êbokoœci_t ) > 0 then
        wieloosobowe__statki_t[ i ].ster_g³êbokoœci_k¹t__owo := 0;


      //wieloosobowe__statki_t[ i ].radar_id_l¹dy_w_zasiêgu__owo := statki_t[ i ].radar_id_l¹dy_w_zasiêgu;
      //wieloosobowe__statki_t[ i ].radar_id_statki_w_zasiêgu__owo := statki_t[ i ].radar_id_statki_w_zasiêgu;
      //wieloosobowe__statki_t[ i ].radio_id_l¹dy_w_zasiêgu__owo := statki_t[ i ].radio_id_l¹dy_w_zasiêgu;
      //wieloosobowe__statki_t[ i ].radio_id_statki_w_zasiêgu__owo := statki_t[ i ].radio_id_statki_w_zasiêgu;
      //wieloosobowe__statki_t[ i ].sonar_id_statki_w_zasiêgu__owo := statki_t[ i ].sonar_id_statki_w_zasiêgu;


      SetLength(  wieloosobowe__statki_t[ i ].kotwica__ruch_etap_t__owo, Length( statki_t[ i ].kotwica_t )  ); // Ustawia d³ugoœæ tabel.
      SetLength(  wieloosobowe__statki_t[ i ].kotwica__uszkodzone_czas_i_t__owo, Length( statki_t[ i ].kotwica_t )  ); // Ustawia d³ugoœæ tabel.
      SetLength(  wieloosobowe__statki_t[ i ].kotwica__wspó³rzêdne_t__owo, Length( statki_t[ i ].kotwica_t )  ); // Ustawia d³ugoœæ tabel.
      wieloosobowe__statki_t[ i ].kotwica_t__d³ugoœæ_tabeli__owo := Length( wieloosobowe__statki_t[ i ].kotwica__ruch_etap_t__owo );

      SetLength(  wieloosobowe__statki_t[ i ].ster__uszkodzone_czas_i_t__owo, Length( statki_t[ i ].ster_t )  ); // Ustawia d³ugoœæ tabel.
      wieloosobowe__statki_t[ i ].ster_t__d³ugoœæ_tabeli__owo := Length( wieloosobowe__statki_t[ i ].ster__uszkodzone_czas_i_t__owo );

      SetLength(  wieloosobowe__statki_t[ i ].ster_g³êbokoœci__uszkodzone_czas_i_t__owo, Length( statki_t[ i ].ster_g³êbokoœci_t )  ); // Ustawia d³ugoœæ tabel.
      wieloosobowe__statki_t[ i ].ster_g³êbokoœci_t__d³ugoœæ_tabeli__owo := Length( wieloosobowe__statki_t[ i ].ster_g³êbokoœci__uszkodzone_czas_i_t__owo );

      SetLength(  wieloosobowe__statki_t[ i ].œruba__obrót_k¹t_t__owo, Length( statki_t[ i ].œruby_t )  ); // Ustawia d³ugoœæ tabel.
      SetLength(  wieloosobowe__statki_t[ i ].œruba__uszkodzone_czas_i_t__owo, Length( statki_t[ i ].œruby_t )  ); // Ustawia d³ugoœæ tabel.
      wieloosobowe__statki_t[ i ].œruba_t__d³ugoœæ_tabeli__owo := Length( wieloosobowe__statki_t[ i ].œruba__obrót_k¹t_t__owo );


      wieloosobowe__statki_t[ i ].œwiat³a_w³¹czone__owo := statki_t[ i ].œwiat³a_w³¹czone;
      wieloosobowe__statki_t[ i ].œwiat³a_dodatkowe_w³¹czone__owo := statki_t[ i ].œwiat³a_dodatkowe_w³¹czone;
      wieloosobowe__statki_t[ i ].zanurzenie_peryskopowe__przekroczone__owo := statki_t[ i ].Zanurzenie_Peryskopowe__Przekroczone();
      wieloosobowe__statki_t[ i ].zanurzenie_zadane_przekraczaj_100_procent__owo := statki_t[ i ].zanurzenie_zadane_przekraczaj_100_procent;

      wieloosobowe__statki_t[ i ].zanurzenie_pu³ap__aktualne__owo := statki_t[ i ].zanurzenie_pu³ap__aktualne;
      wieloosobowe__statki_t[ i ].zanurzenie_pu³ap__aktualne_procent__owo := statki_t[ i ].zanurzenie_pu³ap__aktualne_procent;


      {$region 'Dzia³a strzelaj¹ce - ustawia d³ugoœæ tabel.'}
      SetLength(  wieloosobowe__statki_t[ i ].artyleria_t__owo, Length( statki_t[ i ].artyleria_t )  );
      wieloosobowe__statki_t[ i ].artyleria_t__d³ugoœæ_tabeli__owo := Length( wieloosobowe__statki_t[ i ].artyleria_t__owo );

      for j := 0 to Length( statki_t[ i ].artyleria_t ) - 1 do
        begin

          SetLength(  wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo, Length( statki_t[ i ].artyleria_t[ j ].lufy_t )  );
          wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli__owo := Length( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo );

        end;
      //---//for j := 0 to Length( statki_t[ i ].artyleria_t ) - 1 do


      SetLength(  wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo, Length( statki_t[ i ].bomba_g³êbinowa_t )  );
      wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__d³ugoœæ_tabeli__owo := Length( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo );

      for j := 0 to Length( statki_t[ i ].bomba_g³êbinowa_t ) - 1 do
        begin

          SetLength(  wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo, Length( statki_t[ i ].bomba_g³êbinowa_t[ j ].lufy_t )  );
          wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli__owo := Length( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo );

        end;
      //---//for j := 0 to Length( statki_t[ i ].bomba_g³êbinowa_t ) - 1 do


      SetLength(  wieloosobowe__statki_t[ i ].dzia³a_t__owo, Length( statki_t[ i ].dzia³a_t )  );
      wieloosobowe__statki_t[ i ].dzia³a_t__d³ugoœæ_tabeli__owo := Length( wieloosobowe__statki_t[ i ].dzia³a_t__owo );

      for j := 0 to Length( statki_t[ i ].dzia³a_t ) - 1 do
        begin

          SetLength(  wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo, Length( statki_t[ i ].dzia³a_t[ j ].lufy_t )  );
          wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli__owo := Length( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo );

        end;
      //---//for j := 0 to Length( statki_t[ i ].dzia³a_t ) - 1 do


      SetLength(  wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo, Length( statki_t[ i ].je¿e_g³êbinowe_t )  );
      wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__d³ugoœæ_tabeli__owo := Length( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo );

      for j := 0 to Length( statki_t[ i ].je¿e_g³êbinowe_t ) - 1 do
        begin

          SetLength(  wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo, Length( statki_t[ i ].je¿e_g³êbinowe_t[ j ].lufy_t )  );
          wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli__owo := Length( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo );

        end;
      //---//for j := 0 to Length( statki_t[ i ].je¿e_g³êbinowe_t ) - 1 do


      SetLength(  wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo, Length( statki_t[ i ].torpedy_wyrzutnie_t )  );
      wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__d³ugoœæ_tabeli__owo := Length( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo );

      for j := 0 to Length( statki_t[ i ].torpedy_wyrzutnie_t ) - 1 do
        begin

          SetLength(  wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo, Length( statki_t[ i ].torpedy_wyrzutnie_t[ j ].lufy_t )  );
          wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli__owo := Length( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo );

        end;
      //---//for j := 0 to Length( statki_t[ i ].torpedy_wyrzutnie_t ) - 1 do
      {$endregion 'Dzia³a strzelaj¹ce - ustawia d³ugoœæ tabel.'}


      for j := 0 to Length( statki_t[ i ].kotwica_t ) - 1 do
        begin

          wieloosobowe__statki_t[ i ].kotwica__ruch_etap_t__owo[ j ] := statki_t[ i ].kotwica_t[ j ].kotwica_ruch_etap__ko;
          wieloosobowe__statki_t[ i ].kotwica__uszkodzone_czas_i_t__owo[ j ] := statki_t[ i ].kotwica_t[ j ].uszkodzone_czas_sekundy_i;
          wieloosobowe__statki_t[ i ].kotwica__wspó³rzêdne_t__owo[ j ] := statki_t[ i ].kotwica_t[ j ].Position.AsAffineVector;

        end;
      //---//for j := 0 to Length( statki_t[ i ].kotwica_t ) - 1 do

      for j := 0 to Length( statki_t[ i ].ster_t ) - 1 do
        wieloosobowe__statki_t[ i ].ster__uszkodzone_czas_i_t__owo[ j ] := statki_t[ i ].ster_t[ j ].uszkodzone_czas_sekundy_i;

      for j := 0 to Length( statki_t[ i ].ster_g³êbokoœci_t ) - 1 do
        wieloosobowe__statki_t[ i ].ster_g³êbokoœci__uszkodzone_czas_i_t__owo[ j ] := statki_t[ i ].ster_g³êbokoœci_t[ j ].uszkodzone_czas_sekundy_i;

      for j := 0 to Length( statki_t[ i ].œruby_t ) - 1 do
        begin

          wieloosobowe__statki_t[ i ].œruba__obrót_k¹t_t__owo[ j ] := statki_t[ i ].œruby_t[ j ].obrót_gl_dummy_cube.RollAngle;
          wieloosobowe__statki_t[ i ].œruba__uszkodzone_czas_i_t__owo[ j ] := statki_t[ i ].œruby_t[ j ].uszkodzone_czas_sekundy_i;

        end;
      //---//for j := 0 to Length( statki_t[ i ].œruby_t ) - 1 do


      {$region 'Dzia³a strzelaj¹ce.'}
      for j := 0 to Length( statki_t[ i ].artyleria_t ) - 1 do
        begin

          wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].czy_lot_parabol¹__owo := statki_t[ i ].artyleria_t[ j ].czy_lot_parabol¹;
          wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obrót_k¹t__owo := statki_t[ i ].artyleria_t[ j ].TurnAngle;
          wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].celownik_linia__podniesienie_k¹t__owo := statki_t[ i ].artyleria_t[ j ].celownik_linia.PitchAngle;
          wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].celownik_linia__kolor__owo := Vector__Do__Wieloosobowe__Wektor_4( statki_t[ i ].artyleria_t[ j ].celownik_linia.LineColor.Color );
          wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].celownik_linia__szerokoœæ__owo := statki_t[ i ].artyleria_t[ j ].celownik_linia.LineWidth;
          //wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].celownik_linia__koñcówki__owo := word(statki_t[ i ].artyleria_t[ j ].celownik_linia.NodesAspect);
          wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].celownik_linia__wzór__owo := statki_t[ i ].artyleria_t[ j ].celownik_linia.LinePattern;

          wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].amunicja_iloœæ__owo := statki_t[ i ].artyleria_t[ j ].amunicja_iloœæ; // Informacje do wyœwietlania dla gracza o jego statku.
          wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].uszkodzone_czas_i__owo := statki_t[ i ].artyleria_t[ j ].uszkodzone_czas_sekundy_i;

          for k := 0 to Length( statki_t[ i ].artyleria_t[ j ].lufy_t ) - 1 do
            begin

              wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_podniesienie_k¹t__owo := statki_t[ i ].artyleria_t[ j ].lufy_t[ k ].PitchAngle;
              wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_pozycja_z__owo := statki_t[ i ].artyleria_t[ j ].lufy_t[ k ].korpus__lufa.Position.Z;
              wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_procent__owo := statki_t[ i ].artyleria_t[ j ].lufy_t[ k ].prze³adowanie_procent;
              wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__pozycja__owo := Vector__Do__Wieloosobowe__Wektor_4( statki_t[ i ].artyleria_t[ j ].lufy_t[ k ].prze³adowanie_wskaŸnik.Position.AsVector );
              wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__kolor__owo := Vector__Do__Wieloosobowe__Wektor_4( statki_t[ i ].artyleria_t[ j ].lufy_t[ k ].prze³adowanie_wskaŸnik.Material.FrontProperties.Ambient.Color );

              wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].strza³_gotowoœæ__owo := statki_t[ i ].artyleria_t[ j ].lufy_t[ k ].strza³_gotowoœæ; // Informacje do wyœwietlania dla gracza o jego statku.

            end;
          //---//for k := 0 to Length( statki_t[ i ].artyleria_t[ j ].lufy_t ) - 1 do

        end;
      //---//for j := 0 to Length( statki_t[ i ].artyleria_t ) - 1 do


      for j := 0 to Length( statki_t[ i ].bomba_g³êbinowa_t ) - 1 do
        begin

          wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obrót_k¹t__owo := statki_t[ i ].bomba_g³êbinowa_t[ j ].TurnAngle;
          wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].celownik_linia__podniesienie_k¹t__owo := statki_t[ i ].bomba_g³êbinowa_t[ j ].celownik_linia.PitchAngle;
          wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].celownik_linia__kolor__owo := Vector__Do__Wieloosobowe__Wektor_4( statki_t[ i ].bomba_g³êbinowa_t[ j ].celownik_linia.LineColor.Color );
          wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].celownik_linia__szerokoœæ__owo := statki_t[ i ].bomba_g³êbinowa_t[ j ].celownik_linia.LineWidth;
          //wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].celownik_linia__koñcówki__owo := word(statki_t[ i ].bomba_g³êbinowa_t[ j ].celownik_linia.NodesAspect);
          wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].celownik_linia__wzór__owo := statki_t[ i ].bomba_g³êbinowa_t[ j ].celownik_linia.LinePattern;

          wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].amunicja_iloœæ__owo := statki_t[ i ].bomba_g³êbinowa_t[ j ].amunicja_iloœæ; // Informacje do wyœwietlania dla gracza o jego statku.
          wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].uszkodzone_czas_i__owo := statki_t[ i ].bomba_g³êbinowa_t[ j ].uszkodzone_czas_sekundy_i;

          for k := 0 to Length( statki_t[ i ].bomba_g³êbinowa_t[ j ].lufy_t ) - 1 do
            begin

              wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_podniesienie_k¹t__owo := statki_t[ i ].bomba_g³êbinowa_t[ j ].lufy_t[ k ].PitchAngle;
              wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_pozycja_z__owo := statki_t[ i ].bomba_g³êbinowa_t[ j ].lufy_t[ k ].korpus__lufa.Position.Z;
              wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_procent__owo := statki_t[ i ].bomba_g³êbinowa_t[ j ].lufy_t[ k ].prze³adowanie_procent;
              wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__pozycja__owo := Vector__Do__Wieloosobowe__Wektor_4( statki_t[ i ].bomba_g³êbinowa_t[ j ].lufy_t[ k ].prze³adowanie_wskaŸnik.Position.AsVector );
              wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__kolor__owo := Vector__Do__Wieloosobowe__Wektor_4( statki_t[ i ].bomba_g³êbinowa_t[ j ].lufy_t[ k ].prze³adowanie_wskaŸnik.Material.FrontProperties.Ambient.Color );

              wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].strza³_gotowoœæ__owo := statki_t[ i ].bomba_g³êbinowa_t[ j ].lufy_t[ k ].strza³_gotowoœæ; // Informacje do wyœwietlania dla gracza o jego statku.

            end;
          //---//for k := 0 to Length( statki_t[ i ].bomba_g³êbinowa_t[ j ].lufy_t ) - 1 do

        end;
      //---//for j := 0 to Length( statki_t[ i ].bomba_g³êbinowa_t ) - 1 do


      for j := 0 to Length( statki_t[ i ].dzia³a_t ) - 1 do
        begin

          wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obrót_k¹t__owo := statki_t[ i ].dzia³a_t[ j ].TurnAngle;
          wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].celownik_linia__podniesienie_k¹t__owo := statki_t[ i ].dzia³a_t[ j ].celownik_linia.PitchAngle;
          wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].celownik_linia__kolor__owo := Vector__Do__Wieloosobowe__Wektor_4( statki_t[ i ].dzia³a_t[ j ].celownik_linia.LineColor.Color );
          wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].celownik_linia__szerokoœæ__owo := statki_t[ i ].dzia³a_t[ j ].celownik_linia.LineWidth;
          //wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].celownik_linia__koñcówki__owo := word(statki_t[ i ].dzia³a_t[ j ].celownik_linia.NodesAspect);
          wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].celownik_linia__wzór__owo := statki_t[ i ].dzia³a_t[ j ].celownik_linia.LinePattern;

          wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].amunicja_iloœæ__owo := statki_t[ i ].dzia³a_t[ j ].amunicja_iloœæ; // Informacje do wyœwietlania dla gracza o jego statku.
          wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].uszkodzone_czas_i__owo := statki_t[ i ].dzia³a_t[ j ].uszkodzone_czas_sekundy_i;

          for k := 0 to Length( statki_t[ i ].dzia³a_t[ j ].lufy_t ) - 1 do
            begin

              wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_podniesienie_k¹t__owo := statki_t[ i ].dzia³a_t[ j ].lufy_t[ k ].PitchAngle;
              wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_pozycja_z__owo := statki_t[ i ].dzia³a_t[ j ].lufy_t[ k ].korpus__lufa.Position.Z;
              wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_procent__owo := statki_t[ i ].dzia³a_t[ j ].lufy_t[ k ].prze³adowanie_procent;
              wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__pozycja__owo := Vector__Do__Wieloosobowe__Wektor_4( statki_t[ i ].dzia³a_t[ j ].lufy_t[ k ].prze³adowanie_wskaŸnik.Position.AsVector );
              wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__kolor__owo := Vector__Do__Wieloosobowe__Wektor_4( statki_t[ i ].dzia³a_t[ j ].lufy_t[ k ].prze³adowanie_wskaŸnik.Material.FrontProperties.Ambient.Color );

              wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].strza³_gotowoœæ__owo := statki_t[ i ].dzia³a_t[ j ].lufy_t[ k ].strza³_gotowoœæ; // Informacje do wyœwietlania dla gracza o jego statku.

            end;
          //---//for k := 0 to Length( statki_t[ i ].dzia³a_t[ j ].lufy_t ) - 1 do

        end;
      //---//for j := 0 to Length( statki_t[ i ].dzia³a_t ) - 1 do


      for j := 0 to Length( statki_t[ i ].je¿e_g³êbinowe_t ) - 1 do
        begin

          wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obrót_k¹t__owo := statki_t[ i ].je¿e_g³êbinowe_t[ j ].TurnAngle;
          wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].celownik_linia__podniesienie_k¹t__owo := statki_t[ i ].je¿e_g³êbinowe_t[ j ].celownik_linia.PitchAngle;
          wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].celownik_linia__kolor__owo := Vector__Do__Wieloosobowe__Wektor_4( statki_t[ i ].je¿e_g³êbinowe_t[ j ].celownik_linia.LineColor.Color );
          wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].celownik_linia__szerokoœæ__owo := statki_t[ i ].je¿e_g³êbinowe_t[ j ].celownik_linia.LineWidth;
          //wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].celownik_linia__koñcówki__owo := word(statki_t[ i ].je¿e_g³êbinowe_t[ j ].celownik_linia.NodesAspect);
          wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].celownik_linia__wzór__owo := statki_t[ i ].je¿e_g³êbinowe_t[ j ].celownik_linia.LinePattern;

          wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].amunicja_iloœæ__owo := statki_t[ i ].je¿e_g³êbinowe_t[ j ].amunicja_iloœæ; // Informacje do wyœwietlania dla gracza o jego statku.
          wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].uszkodzone_czas_i__owo := statki_t[ i ].je¿e_g³êbinowe_t[ j ].uszkodzone_czas_sekundy_i;

          for k := 0 to Length( statki_t[ i ].je¿e_g³êbinowe_t[ j ].lufy_t ) - 1 do
            begin

              wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_podniesienie_k¹t__owo := statki_t[ i ].je¿e_g³êbinowe_t[ j ].lufy_t[ k ].PitchAngle;
              wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_pozycja_z__owo := statki_t[ i ].je¿e_g³êbinowe_t[ j ].lufy_t[ k ].korpus__lufa.Position.Z;
              wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_procent__owo := statki_t[ i ].je¿e_g³êbinowe_t[ j ].lufy_t[ k ].prze³adowanie_procent;
              wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__pozycja__owo := Vector__Do__Wieloosobowe__Wektor_4( statki_t[ i ].je¿e_g³êbinowe_t[ j ].lufy_t[ k ].prze³adowanie_wskaŸnik.Position.AsVector );
              wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__kolor__owo := Vector__Do__Wieloosobowe__Wektor_4( statki_t[ i ].je¿e_g³êbinowe_t[ j ].lufy_t[ k ].prze³adowanie_wskaŸnik.Material.FrontProperties.Ambient.Color );

              wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].strza³_gotowoœæ__owo := statki_t[ i ].je¿e_g³êbinowe_t[ j ].lufy_t[ k ].strza³_gotowoœæ; // Informacje do wyœwietlania dla gracza o jego statku.

            end;
          //---//for k := 0 to Length( statki_t[ i ].je¿e_g³êbinowe_t[ j ].lufy_t ) - 1 do

        end;
      //---//for j := 0 to Length( statki_t[ i ].je¿e_g³êbinowe_t ) - 1 do


      for j := 0 to Length( statki_t[ i ].torpedy_wyrzutnie_t ) - 1 do
        begin

          wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obrót_k¹t__owo := statki_t[ i ].torpedy_wyrzutnie_t[ j ].TurnAngle;
          wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].celownik_linia__podniesienie_k¹t__owo := statki_t[ i ].torpedy_wyrzutnie_t[ j ].celownik_linia.PitchAngle;
          wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].celownik_linia__kolor__owo := Vector__Do__Wieloosobowe__Wektor_4( statki_t[ i ].torpedy_wyrzutnie_t[ j ].celownik_linia.LineColor.Color );
          wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].celownik_linia__szerokoœæ__owo := statki_t[ i ].torpedy_wyrzutnie_t[ j ].celownik_linia.LineWidth;
          //wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].celownik_linia__koñcówki__owo := word(statki_t[ i ].torpedy_wyrzutnie_t[ j ].celownik_linia.NodesAspect);
          wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].celownik_linia__wzór__owo := statki_t[ i ].torpedy_wyrzutnie_t[ j ].celownik_linia.LinePattern;

          wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].amunicja_iloœæ__owo := statki_t[ i ].torpedy_wyrzutnie_t[ j ].amunicja_iloœæ; // Informacje do wyœwietlania dla gracza o jego statku.
          wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].uszkodzone_czas_i__owo := statki_t[ i ].torpedy_wyrzutnie_t[ j ].uszkodzone_czas_sekundy_i;

          for k := 0 to Length( statki_t[ i ].torpedy_wyrzutnie_t[ j ].lufy_t ) - 1 do
            begin

              wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_podniesienie_k¹t__owo := statki_t[ i ].torpedy_wyrzutnie_t[ j ].lufy_t[ k ].PitchAngle;
              wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_pozycja_z__owo := statki_t[ i ].torpedy_wyrzutnie_t[ j ].lufy_t[ k ].korpus__lufa.Position.Z;
              wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_procent__owo := statki_t[ i ].torpedy_wyrzutnie_t[ j ].lufy_t[ k ].prze³adowanie_procent;
              wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__pozycja__owo := Vector__Do__Wieloosobowe__Wektor_4( statki_t[ i ].torpedy_wyrzutnie_t[ j ].lufy_t[ k ].prze³adowanie_wskaŸnik.Position.AsVector );
              wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__kolor__owo := Vector__Do__Wieloosobowe__Wektor_4( statki_t[ i ].torpedy_wyrzutnie_t[ j ].lufy_t[ k ].prze³adowanie_wskaŸnik.Material.FrontProperties.Ambient.Color );

              wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].strza³_gotowoœæ__owo := statki_t[ i ].torpedy_wyrzutnie_t[ j ].lufy_t[ k ].strza³_gotowoœæ; // Informacje do wyœwietlania dla gracza o jego statku.

            end;
          //---//for k := 0 to Length( statki_t[ i ].torpedy_wyrzutnie_t[ j ].lufy_t ) - 1 do

        end;
      //---//for j := 0 to Length( statki_t[ i ].torpedy_wyrzutnie_t ) - 1 do
      {$endregion 'Dzia³a strzelaj¹ce.'}


      // Wysy³ane osobn¹ funkcj¹ do przesy³ania sterowania (nacisniêtych klawiszy). //???
      wieloosobowe__statki_t[ i ].czy_wszystkie_lufy__owo := false; //???

      wieloosobowe__statki_t[ i ].broñ_indeks_zmieniaj__owo := statki_t[ i ].broñ_indeks_zmieniaj;
      wieloosobowe__statki_t[ i ].obracaj_dzia³a__owo := statki_t[ i ].obracaj_dzia³a;
      wieloosobowe__statki_t[ i ].obracaj_dzia³a__na_k¹t_wyznaczony__owo := statki_t[ i ].obracaj_dzia³a__na_k¹t_wyznaczony;
      wieloosobowe__statki_t[ i ].podnoœ_lufy__owo := statki_t[ i ].podnoœ_lufy;
      wieloosobowe__statki_t[ i ].podnoœ_lufy__na_k¹t_wyznaczony__owo := statki_t[ i ].podnoœ_lufy__na_k¹t_wyznaczony;

      wieloosobowe__statki_t[ i ].amunicja_rodzaj_st__owo := Typy_Wspolne.ar_Wszystkie; //???


      // Informacje do wyœwietlania dla gracza o jego statku.
      wieloosobowe__statki_t[ i ].id_statek__lotniskowiec__ma_samolot_na_pok³adzie__owo := statki_t[ i ].id_statek__lotniskowiec__ma_samolot_na_pok³adzie;
      wieloosobowe__statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie__owo := statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie;
      wieloosobowe__statki_t[ i ].czy_samolot__na_lotniskowcu__owo := statki_t[ i ].czy_samolot__na_lotniskowcu;
      wieloosobowe__statki_t[ i ].lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__owo := statki_t[ i ].lotniskowiec__zasoby_odnawianie__prze³adowanie_procent;
      wieloosobowe__statki_t[ i ].prêdkoœæ_aktualna_procent__wzglêdny__owo := statki_t[ i ].prêdkoœæ_aktualna_procent__wzglêdny;
      wieloosobowe__statki_t[ i ].prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__k¹t__owo := statki_t[ i ].prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__k¹t;
      wieloosobowe__statki_t[ i ].prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__owo := statki_t[ i ].prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent;
      wieloosobowe__statki_t[ i ].prêdkoœæ_zadana_procent__owo := statki_t[ i ].prêdkoœæ_zadana_procent;
      wieloosobowe__statki_t[ i ].si_aktywnoœæ__owo := integer(statki_t[ i ].si_aktywnoœæ);
      wieloosobowe__statki_t[ i ].si_strzelanie_tryb__owo := integer(statki_t[ i ].si_strzelanie_tryb);
      wieloosobowe__statki_t[ i ].skrêt_aktualny_procent__owo := statki_t[ i ].skrêt_aktualny_procent;
      wieloosobowe__statki_t[ i ].skrêt_zadany_procent__owo := statki_t[ i ].skrêt_zadany_procent;
      wieloosobowe__statki_t[ i ].schemat_samolot_zmiana_czas_i__owo := statki_t[ i ].schemat_samolot_zmiana_czas_sekundy_i;
      wieloosobowe__statki_t[ i ].toniêcie__czas_i__owo := statki_t[ i ].toniêcie__czas_sekundy_i;
      wieloosobowe__statki_t[ i ].uszkodzone_czas_i__kotwica__owo := statki_t[ i ].uszkodzone_czas_sekundy_i__kotwica;
      wieloosobowe__statki_t[ i ].uszkodzone_czas_i__radar__owo := statki_t[ i ].uszkodzone_czas_sekundy_i__radar;
      wieloosobowe__statki_t[ i ].uszkodzone_czas_i__radio__owo := statki_t[ i ].uszkodzone_czas_sekundy_i__radio;
      wieloosobowe__statki_t[ i ].uszkodzone_czas_i__sonar__owo := statki_t[ i ].uszkodzone_czas_sekundy_i__sonar;
      wieloosobowe__statki_t[ i ].uszkodzone_czas_i__ster__owo := statki_t[ i ].uszkodzone_czas_sekundy_i__ster;
      wieloosobowe__statki_t[ i ].uszkodzone_czas_i__ster_g³êbokoœci__owo := statki_t[ i ].uszkodzone_czas_sekundy_i__ster_g³êbokoœci;
      wieloosobowe__statki_t[ i ].uszkodzone_czas_i__œruba__owo := statki_t[ i ].uszkodzone_czas_sekundy_i__œruba;
      wieloosobowe__statki_t[ i ].zanurzenie_pu³ap__zadane_procent__owo := statki_t[ i ].zanurzenie_pu³ap__zadane_procent;
      //---// Informacje do wyœwietlania dla gracza o jego statku.

    end;
  //---//for i := 0 to Length( statki_t ) - 1 do

end;//---//Funkcja Wieloosobowe_Statki__Parametry_Odczytaj().

//Funkcja Wieloosobowe_Statki__Parametry_Ustaw().
procedure TStatki_Form.Wieloosobowe_Statki__Parametry_Ustaw();

  //Funkcja Statki_Utwórz() w Wieloosobowe_Statki__Parametry_Ustaw().
  procedure Statki_Utwórz( const indeks_statku_f : integer = -1; const indeks_wieloosobowe__statki_f : integer = -1 );

    //Funkcja Statek_Utwórz() w Statki_Utwórz() w Wieloosobowe_Statki__Parametry_Ustaw().
    procedure Statek_Utwórz( const indeks_statku_f_f, indeks_wieloosobowe__statki_f_f : integer );
    begin

      //
      // Funkcja tworzy jeden statek dla klienta gry wieloosobowej.
      //

      statki_t[ indeks_statku_f_f ] := TStatek.Create(  Gra_Obiekty_GLDummyCube, nil, Efekt__Element_Uszkodzenie_Menad¿er__Zwróæ(), wieloosobowe__statki_t[ indeks_wieloosobowe__statki_f_f ].id_gracz__owo, wieloosobowe__statki_t[ indeks_wieloosobowe__statki_f_f ].id_statek_st__owo, Statek_Odczytaj_Schemat( wieloosobowe__statki_t[ indeks_wieloosobowe__statki_f_f ].id_statek_schemat__owo ), prymitywy_lista_t, Punkty_¯ycia_WskaŸnik__Material_Options_Ustal(), statek_create_funkcje_g, t³umaczenie_komunikaty_r  );
      statki_t[ indeks_statku_f_f ].id_gracz := wieloosobowe__statki_t[ indeks_wieloosobowe__statki_f_f ].id_gracz__owo;
      statki_t[ indeks_statku_f_f ].id_grupa := wieloosobowe__statki_t[ indeks_wieloosobowe__statki_f_f ].id_grupa__owo;
      statki_t[ indeks_statku_f_f ].id_statek_schemat := wieloosobowe__statki_t[ indeks_wieloosobowe__statki_f_f ].id_statek_schemat__owo;
      statki_t[ indeks_statku_f_f ].czy_lotniskowiec := wieloosobowe__statki_t[ indeks_wieloosobowe__statki_f_f ].czy_lotniskowiec__owo;
      statki_t[ indeks_statku_f_f ].czy_samolot := wieloosobowe__statki_t[ indeks_wieloosobowe__statki_f_f ].czy_samolot__owo;
      //statki_t[ indeks_statku_f_f ].gracz__nazwa.Text := wieloosobowe__statki_t[ indeks_wieloosobowe__statki_f_f ].gracz__nazwa__owo;
      statki_t[ indeks_statku_f_f ].punkty_¿ycia_wskaŸnik__zanurzenie_peryskopowe__przekroczone__przeliczenie_poprzednie := wieloosobowe__statki_t[ indeks_wieloosobowe__statki_f_f ].zanurzenie_peryskopowe__przekroczone__owo;
      statki_t[ indeks_statku_f_f ].œwiat³a_w³¹czone := wieloosobowe__statki_t[ indeks_wieloosobowe__statki_f_f ].œwiat³a_w³¹czone__owo;
      statki_t[ indeks_statku_f_f ].œwiat³a_dodatkowe_w³¹czone := wieloosobowe__statki_t[ indeks_wieloosobowe__statki_f_f ].œwiat³a_dodatkowe_w³¹czone__owo;
      statki_t[ indeks_statku_f_f ].zanurzenie_zadane_przekraczaj_100_procent := wieloosobowe__statki_t[ indeks_wieloosobowe__statki_f_f ].zanurzenie_zadane_przekraczaj_100_procent__owo;
      statki_t[ indeks_statku_f_f ].Wygl¹d_Elementy__Noc_Zmieñ( dzieñ_jasnoœæ_g, Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBox.Checked, Wygl¹d_Elementy__Kolor_Noc_Zmieñ );

      if statki_t[ indeks_statku_f_f ].id_gracz = Gracz_Identyfikator() then
        begin

          // Najpierw na liœcie jest lotniskowiec potem samolot.
          if statek_gracza = nil then
            statek_gracza := statki_t[ indeks_statku_f_f ]
          else//if statek_gracza = nil then
            if    ( statek_gracza.czy_lotniskowiec )
              and ( statki_t[ indeks_statku_f_f ].czy_samolot )
              and ( samolot__statek_gracza = nil ) then
              samolot__statek_gracza := statki_t[ indeks_statku_f_f ];


          Celowanie_ParametryClick( nil );

          statki_t[ indeks_statku_f_f ].Elementy_Gracza_Dostosuj( -99, Celownik_Bombowiec_Widocznoœæ_CheckBox.Checked, Gra_GLCamera.AbsolutePosition.Y < 0, L¹dowanie_U³atwione_CheckBox.Checked, Punkty_¯ycia_WskaŸnik__Gracz_CheckBox.Checked, false, false, Obrót_K¹t_Zablokowany_WskaŸnik_CheckBox.Checked, Obrót_K¹t_Zablokowany_Strza³_WskaŸnik_CheckBox.Checked, Prze³adowanie_WskaŸnik_CheckBox.Checked );

          Interfejs_Parametry_Wed³ug_Statku_Ustaw();

        end
      else//if statki_t[ indeks_statku_f_f ].id_gracz = Gracz_Identyfikator() then
        begin

          statki_t[ indeks_statku_f_f ].Elementy_Gracza_Widocznoœæ( Gracz_Grupa_SpinEdit.Value, false );
          statki_t[ indeks_statku_f_f ].Elementy_Gracza_Dostosuj( Gracz_Grupa_SpinEdit.Value, Celownik_Bombowiec_Widocznoœæ_CheckBox.Checked, Gra_GLCamera.AbsolutePosition.Y < 0, L¹dowanie_U³atwione_CheckBox.Checked, false, Punkty_¯ycia_WskaŸnik__Przeciwnik_CheckBox.Checked, Punkty_¯ycia_WskaŸnik__Sojusznik_CheckBox.Checked, false, false, false );

        end;
      //---//if statki_t[ indeks_statku_f_f ].id_gracz = Gracz_Identyfikator() then

    end;//---//Funkcja Statek_Utwórz() w Statki_Utwórz() w Wieloosobowe_Statki__Parametry_Ustaw().

  var
    i_l : integer;
  begin//Funkcja Statki_Utwórz() w Wieloosobowe_Statki__Parametry_Ustaw().

    //
    // Funkcja tworzy statki dla klienta gry wieloosobowej.
    //

    if    ( indeks_statku_f = -1 )
      and ( indeks_wieloosobowe__statki_f = -1 ) then
      begin

        Statki_Zwolnij();

        for i_l := 0 to Length( wieloosobowe__statki_t ) - 1 do
          begin

            SetLength( statki_t, i_l + 1 );

            Statek_Utwórz( i_l, i_l );

          end;
        //---//for i_l := 0 to Length( wieloosobowe__statki_t ) - 1 do

      end
    else//if    ( indeks_statku_f = -1 ) (...)
      begin

        Statek_Zwolnij( indeks_statku_f );
        Statek_Utwórz( indeks_statku_f, indeks_wieloosobowe__statki_f );

      end;
    //---//if    ( indeks_statku_f = -1 ) (...)



    if statek_gracza = nil then
      Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_zlokalizowaæ_statku_gracza, t³umaczenie_komunikaty_r.komunikat__informacja, MB_ICONEXCLAMATION )
    else//if statek_gracza = nil then
      if    ( statek_gracza.czy_lotniskowiec )
        and ( samolot__statek_gracza = nil ) then
        //Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_zlokalizowaæ_samolotu_gracza, t³umaczenie_komunikaty_r.komunikat__informacja, MB_ICONEXCLAMATION );
        Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_zlokalizowaæ_samolotu_gracza );


    Interfejs_Aktywnoœæ_Ustaw__Schemat_Samolot_Zmieñ( true );


    dŸwiêki__losowe_uruchomione__wszystkie__statki_g := false;


    if    ( indeks_statku_f = -1 )
      and ( indeks_wieloosobowe__statki_f = -1 ) then
      Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__gracz__nazwa_c, -99, '' )
    else//if    ( indeks_statku_f = -1 ) (...)
      Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__odbierz__gracz__nazwa_c, -99, IntToStr( statki_t[ indeks_statku_f ].id_statek )  );

  end;//---//Funkcja Statki_Utwórz() w Wieloosobowe_Statki__Parametry_Ustaw().

  //Funkcja Parametry_Ustaw() w Wieloosobowe_Statki__Parametry_Ustaw().
  procedure Parametry_Ustaw( statek_f : TStatek; var obiekty_wieloosobowe_statek_r_f : TObiekty_Wieloosobowe__Statek_r );

    //Funkcja Parametry_Ustaw_Statek_Gracza() w Parametry_Ustaw() w Wieloosobowe_Statki__Parametry_Ustaw().
    procedure Parametry_Ustaw_Statek_Gracza( statek_f_f : TStatek );
    var
      // Nie ma i aby by³o tak samo jak w konstruktorze.
      j_l,
      k_l
        : integer;
    begin

      // Potem mo¿na przesy³aæ po TCP tylko do danego gracza.

      if   ( statek_f_f = nil )
        or (  not Assigned( statek_f_f )  ) then
        Exit;


      if    ( obiekty_wieloosobowe_statek_r_f.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__owo = lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__nie_znaleziono_zasobów_do_odnowienia_c )
        and ( statek_f_f.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent <> obiekty_wieloosobowe_statek_r_f.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__owo ) then
        DŸwiêki__Komunikat__Utwórz_Jeden( dkr_Odnawianie_Zasobów_Zakoñczone, 0 );

      if    ( obiekty_wieloosobowe_statek_r_f.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__owo = prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__katapult_jest_gotowa_do_uruchomienia_c )
        and ( statek_f_f.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent <> obiekty_wieloosobowe_statek_r_f.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__owo ) then
        DŸwiêki__Komunikat__Utwórz_Jeden( dkr_Lotniskowiec_Katapulta_Gotowa, 0 );

      if statek_f_f.prêdkoœæ_zadana_procent <> obiekty_wieloosobowe_statek_r_f.prêdkoœæ_zadana_procent__owo then
        begin

          // Tworzy komunikat dŸwiêkowy niezw³ocznie po wyst¹pieniu zdarzenia.
          //DŸwiêki__Komunikat__Utwórz_Jeden(  dkr_Prêdkoœæ, Round( obiekty_wieloosobowe_statek_r_f.prêdkoœæ_zadana_procent__owo )  );

          // Komunikaty dŸwiêkowe s¹ tworzone z pewnym opóŸnieniem (aby ograniczyæ ich iloœæ).
          dŸwiêki__komunikat__prêdkoœæ__ostatnie_wywo³anie__data_czas_g := Now();
          dŸwiêki__komunikat__prêdkoœæ__ostatnie_wywo³anie__id_statek_g := obiekty_wieloosobowe_statek_r_f.id_statek_st__owo;

        end;
      //---//if statek_f_f.prêdkoœæ_zadana_procent <> obiekty_wieloosobowe_statek_r_f.prêdkoœæ_zadana_procent__owo then

      if statek_f_f.skrêt_zadany_procent <> obiekty_wieloosobowe_statek_r_f.skrêt_zadany_procent__owo then
        begin

          // Tworzy komunikat dŸwiêkowy niezw³ocznie po wyst¹pieniu zdarzenia.
          //DŸwiêki__Komunikat__Utwórz_Jeden(  dkr_Skrêt, Round( obiekty_wieloosobowe_statek_r_f.skrêt_zadany_procent__owo )  );

          // Komunikaty dŸwiêkowe s¹ tworzone z pewnym opóŸnieniem (aby ograniczyæ ich iloœæ).
          dŸwiêki__komunikat__skrêt__ostatnie_wywo³anie__data_czas_g := Now();
          dŸwiêki__komunikat__skrêt__ostatnie_wywo³anie__id_statek_g := obiekty_wieloosobowe_statek_r_f.id_statek_st__owo;

        end;
      //---//if statek_f_f.skrêt_zadany_procent <> obiekty_wieloosobowe_statek_r_f.skrêt_zadany_procent__owo then


      if    ( statek_f_f.zanurzenie_pu³ap__zadane_procent <> obiekty_wieloosobowe_statek_r_f.zanurzenie_pu³ap__zadane_procent__owo )
        and (
                 ( statek_f_f.czy_zanurzanie )
              or ( statek_f_f.czy_samolot )
            ) then
        if    ( not statek_f_f.czy_samolot )
          and ( obiekty_wieloosobowe_statek_r_f.zanurzenie_pu³ap__zadane_procent__owo = statek_f_f.Zanurzenie_Peryskopowe__Jako__Zadane_Procent_Wylicz() ) then
          DŸwiêki__Komunikat__Utwórz_Jeden(  dkr_Zanurzenie_Pu³ap__Peryskopowe, Round( obiekty_wieloosobowe_statek_r_f.zanurzenie_pu³ap__zadane_procent__owo )  )
        else//if    ( not statek_f_f.czy_samolot ) (...)
          begin

            // Tworzy komunikat dŸwiêkowy niezw³ocznie po wyst¹pieniu zdarzenia.
            //if statek_f_f.czy_samolot then
            //  DŸwiêki__Komunikat__Utwórz_Jeden(  dkr_Pu³ap, Round( obiekty_wieloosobowe_statek_r_f.zanurzenie_pu³ap__zadane_procent__owo )  )
            //else//if statek_f_f.czy_samolot then
            //  DŸwiêki__Komunikat__Utwórz_Jeden(  dkr_Zanurzenie, Round( obiekty_wieloosobowe_statek_r_f.zanurzenie_pu³ap__zadane_procent__owo )  );

            // Komunikaty dŸwiêkowe s¹ tworzone z pewnym opóŸnieniem (aby ograniczyæ ich iloœæ).
            dŸwiêki__komunikat__zanurzenie__ostatnie_wywo³anie__data_czas_g := Now();
            dŸwiêki__komunikat__zanurzenie__ostatnie_wywo³anie__id_statek_g := obiekty_wieloosobowe_statek_r_f.id_statek_st__owo;

          end;
        //---//if    ( not statek_f_f.czy_samolot ) (...)


      statek_f_f.id_statek__lotniskowiec__ma_samolot_na_pok³adzie := obiekty_wieloosobowe_statek_r_f.id_statek__lotniskowiec__ma_samolot_na_pok³adzie__owo;

      if    ( statek_f_f.czy_lotniskowiec )
        and ( obiekty_wieloosobowe_statek_r_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie__owo <> -99 )
        and ( statek_f_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie <> obiekty_wieloosobowe_statek_r_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie__owo ) then
        Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__samolot_zg³asza_l¹dowanie );

      statek_f_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie := obiekty_wieloosobowe_statek_r_f.id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie__owo;

      statek_f_f.broñ_indeks_zmieniaj := obiekty_wieloosobowe_statek_r_f.broñ_indeks_zmieniaj__owo;
      statek_f_f.czy_samolot__na_lotniskowcu := obiekty_wieloosobowe_statek_r_f.czy_samolot__na_lotniskowcu__owo;
      statek_f_f.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent := obiekty_wieloosobowe_statek_r_f.lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__owo;
      statek_f_f.obracaj_dzia³a := obiekty_wieloosobowe_statek_r_f.obracaj_dzia³a__owo;
      statek_f_f.obracaj_dzia³a__na_k¹t_wyznaczony := obiekty_wieloosobowe_statek_r_f.obracaj_dzia³a__na_k¹t_wyznaczony__owo;
      statek_f_f.podnoœ_lufy := obiekty_wieloosobowe_statek_r_f.podnoœ_lufy__owo;
      statek_f_f.podnoœ_lufy__na_k¹t_wyznaczony := obiekty_wieloosobowe_statek_r_f.podnoœ_lufy__na_k¹t_wyznaczony__owo;
      //statek_f_f.prêdkoœæ_aktualna_procent__wzglêdny := obiekty_wieloosobowe_statek_r_f.prêdkoœæ_aktualna_procent__wzglêdny__owo;
      statek_f_f.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__k¹t := obiekty_wieloosobowe_statek_r_f.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__k¹t__owo;
      statek_f_f.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent := obiekty_wieloosobowe_statek_r_f.prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__owo;
      statek_f_f.prêdkoœæ_zadana_procent := obiekty_wieloosobowe_statek_r_f.prêdkoœæ_zadana_procent__owo;
      statek_f_f.si_aktywnoœæ := TSi_Aktywnoœæ(obiekty_wieloosobowe_statek_r_f.si_aktywnoœæ__owo);
      statek_f_f.si_strzelanie_tryb := TSi_Strzelanie_Tryb(obiekty_wieloosobowe_statek_r_f.si_strzelanie_tryb__owo);
      statek_f_f.skrêt_aktualny_procent := obiekty_wieloosobowe_statek_r_f.skrêt_aktualny_procent__owo;
      statek_f_f.skrêt_zadany_procent := obiekty_wieloosobowe_statek_r_f.skrêt_zadany_procent__owo;
      statek_f_f.schemat_samolot_zmiana_czas_sekundy_i := obiekty_wieloosobowe_statek_r_f.schemat_samolot_zmiana_czas_i__owo;
      statek_f_f.toniêcie__czas_sekundy_i := obiekty_wieloosobowe_statek_r_f.toniêcie__czas_i__owo;
      statek_f_f.uszkodzone_czas_sekundy_i__kotwica := obiekty_wieloosobowe_statek_r_f.uszkodzone_czas_i__kotwica__owo;
      statek_f_f.uszkodzone_czas_sekundy_i__radar := obiekty_wieloosobowe_statek_r_f.uszkodzone_czas_i__radar__owo;
      statek_f_f.uszkodzone_czas_sekundy_i__radio := obiekty_wieloosobowe_statek_r_f.uszkodzone_czas_i__radio__owo;
      statek_f_f.uszkodzone_czas_sekundy_i__sonar := obiekty_wieloosobowe_statek_r_f.uszkodzone_czas_i__sonar__owo;
      statek_f_f.uszkodzone_czas_sekundy_i__ster := obiekty_wieloosobowe_statek_r_f.uszkodzone_czas_i__ster__owo;
      statek_f_f.uszkodzone_czas_sekundy_i__ster_g³êbokoœci := obiekty_wieloosobowe_statek_r_f.uszkodzone_czas_i__ster_g³êbokoœci__owo;
      statek_f_f.uszkodzone_czas_sekundy_i__œruba := obiekty_wieloosobowe_statek_r_f.uszkodzone_czas_i__œruba__owo;
      statek_f_f.zanurzenie_pu³ap__zadane_procent := obiekty_wieloosobowe_statek_r_f.zanurzenie_pu³ap__zadane_procent__owo;

      for j_l := 0 to Length( statek_f_f.artyleria_t ) - 1 do
        begin

          statek_f_f.artyleria_t[ j_l ].amunicja_iloœæ := obiekty_wieloosobowe_statek_r_f.artyleria_t__owo[ j_l ].amunicja_iloœæ__owo;
          //statek_f_f.artyleria_t[ j_l ].uszkodzone_czas_sekundy_i := obiekty_wieloosobowe_statek_r_f.artyleria_t__owo[ j_l ].uszkodzone_czas_i__owo;

          for k_l := 0 to Length( statek_f_f.artyleria_t[ j_l ].lufy_t ) - 1 do
            statek_f_f.artyleria_t[ j_l ].lufy_t[ k_l ].strza³_gotowoœæ := obiekty_wieloosobowe_statek_r_f.artyleria_t__owo[ j_l ].obiekty_wieloosobowe_lufa_r_t__owo[ k_l ].strza³_gotowoœæ__owo;

        end;
      //---//for j_l := 0 to Length( Self.artyleria_t ) - 1 do

      for j_l := 0 to Length( statek_f_f.bomba_g³êbinowa_t ) - 1 do
        begin

          statek_f_f.bomba_g³êbinowa_t[ j_l ].amunicja_iloœæ := obiekty_wieloosobowe_statek_r_f.bomba_g³êbinowa_t__owo[ j_l ].amunicja_iloœæ__owo;
          //statek_f_f.bomba_g³êbinowa_t[ j_l ].uszkodzone_czas_sekundy_i := obiekty_wieloosobowe_statek_r_f.bomba_g³êbinowa_t__owo[ j_l ].uszkodzone_czas_i__owo;

          for k_l := 0 to Length( statek_f_f.bomba_g³êbinowa_t[ j_l ].lufy_t ) - 1 do
            statek_f_f.bomba_g³êbinowa_t[ j_l ].lufy_t[ k_l ].strza³_gotowoœæ := obiekty_wieloosobowe_statek_r_f.bomba_g³êbinowa_t__owo[ j_l ].obiekty_wieloosobowe_lufa_r_t__owo[ k_l ].strza³_gotowoœæ__owo;

        end;
      //---//for j_l := 0 to Length( Self.bomba_g³êbinowa_t ) - 1 do

      for j_l := 0 to Length( statek_f_f.dzia³a_t ) - 1 do
        begin

          statek_f_f.dzia³a_t[ j_l ].amunicja_iloœæ := obiekty_wieloosobowe_statek_r_f.dzia³a_t__owo[ j_l ].amunicja_iloœæ__owo;
          //statek_f_f.dzia³a_t[ j_l ].uszkodzone_czas_sekundy_i := obiekty_wieloosobowe_statek_r_f.dzia³a_t__owo[ j_l ].uszkodzone_czas_i__owo;

          for k_l := 0 to Length( statek_f_f.dzia³a_t[ j_l ].lufy_t ) - 1 do
            statek_f_f.dzia³a_t[ j_l ].lufy_t[ k_l ].strza³_gotowoœæ := obiekty_wieloosobowe_statek_r_f.dzia³a_t__owo[ j_l ].obiekty_wieloosobowe_lufa_r_t__owo[ k_l ].strza³_gotowoœæ__owo;

        end;
      //---//for j_l := 0 to Length( Self.dzia³a_t ) - 1 do

      for j_l := 0 to Length( statek_f_f.je¿e_g³êbinowe_t ) - 1 do
        begin

          statek_f_f.je¿e_g³êbinowe_t[ j_l ].amunicja_iloœæ := obiekty_wieloosobowe_statek_r_f.je¿e_g³êbinowe_t__owo[ j_l ].amunicja_iloœæ__owo;
          //statek_f_f.je¿e_g³êbinowe_t[ j_l ].uszkodzone_czas_sekundy_i := obiekty_wieloosobowe_statek_r_f.je¿e_g³êbinowe_t__owo[ j_l ].uszkodzone_czas_i__owo;

          for k_l := 0 to Length( statek_f_f.je¿e_g³êbinowe_t[ j_l ].lufy_t ) - 1 do
            statek_f_f.je¿e_g³êbinowe_t[ j_l ].lufy_t[ k_l ].strza³_gotowoœæ := obiekty_wieloosobowe_statek_r_f.je¿e_g³êbinowe_t__owo[ j_l ].obiekty_wieloosobowe_lufa_r_t__owo[ k_l ].strza³_gotowoœæ__owo;

        end;
      //---//for j_l := 0 to Length( Self.je¿e_g³êbinowe_t ) - 1 do

      for j_l := 0 to Length( statek_f_f.torpedy_wyrzutnie_t ) - 1 do
        begin

          statek_f_f.torpedy_wyrzutnie_t[ j_l ].amunicja_iloœæ := obiekty_wieloosobowe_statek_r_f.torpedy_wyrzutnie_t__owo[ j_l ].amunicja_iloœæ__owo;
          //statek_f_f.torpedy_wyrzutnie_t[ j_l ].uszkodzone_czas_sekundy_i := obiekty_wieloosobowe_statek_r_f.torpedy_wyrzutnie_t__owo[ j_l ].uszkodzone_czas_i__owo;

          for k_l := 0 to Length( statek_f_f.torpedy_wyrzutnie_t[ j_l ].lufy_t ) - 1 do
            statek_f_f.torpedy_wyrzutnie_t[ j_l ].lufy_t[ k_l ].strza³_gotowoœæ := obiekty_wieloosobowe_statek_r_f.torpedy_wyrzutnie_t__owo[ j_l ].obiekty_wieloosobowe_lufa_r_t__owo[ k_l ].strza³_gotowoœæ__owo;

        end;
      //---//for j_l := 0 to Length( Self.torpedy_wyrzutnie_t ) - 1 do


      if    ( statek_f_f = Statek_Gracza__Gracz_Tryb_Zwróæ() )
        and ( statek_f_f.si__statek_gracza__p³ywa )
        and ( Œwiat³a_CheckBox.Checked <> statek_f_f.œwiat³a_w³¹czone ) then
        Œwiat³a_CheckBox.Checked := statek_f_f.œwiat³a_w³¹czone;

      if    ( statek_f_f = Statek_Gracza__Gracz_Tryb_Zwróæ() )
        and ( statek_f_f.si__statek_gracza__p³ywa )
        and ( Œwiat³a_Dodatkowe_CheckBox.Checked <> statek_f_f.œwiat³a_dodatkowe_w³¹czone ) then
        Œwiat³a_Dodatkowe_CheckBox.Checked := statek_f_f.œwiat³a_dodatkowe_w³¹czone;

    end;//---//Funkcja Parametry_Ustaw_Statek_Gracza() w Parametry_Ustaw() w Wieloosobowe_Statki__Parametry_Ustaw().

  var
    czy_œwiat³a_w³¹czone_zmiana,
    czy_œwiat³a_dodatkowe_w³¹czone_zmiana,
    czy_zanurzenie_peryskopowe__przekroczone_zmiana
      : boolean;
    // Nie ma i aby by³o tak samo jak w konstruktorze.
    j,
    k
      : integer;
  begin//Funkcja Parametry_Ustaw() w Wieloosobowe_Statki__Parametry_Ustaw().

    if   ( statek_f = nil )
      or (  not Assigned( statek_f )  ) then
      Exit;

    statek_f.AbsolutePosition := Wieloosobowe__Wektor_4__Do__Vector( obiekty_wieloosobowe_statek_r_f.pozycja_st__owo );
    statek_f.AbsoluteDirection := Wieloosobowe__Wektor_4__Do__Vector( obiekty_wieloosobowe_statek_r_f.kierunek_st__owo );

    statek_f.czy_samolot__kolizja := obiekty_wieloosobowe_statek_r_f.czy_samolot__kolizja__owo;

    statek_f.falowanie_bok_skrêt := obiekty_wieloosobowe_statek_r_f.falowanie_bok_skrêt__owo;
    statek_f.falowanie_przód_pu³ap := obiekty_wieloosobowe_statek_r_f.falowanie_przód_pu³ap__owo;
    statek_f.falowanie_przód_ruch := obiekty_wieloosobowe_statek_r_f.falowanie_przód_ruch__owo;
    statek_f.toniêcie_gl_dummy_cube.RollAngle := obiekty_wieloosobowe_statek_r_f.toniêcie__przechylenie__lewo_prawo__owo;
    statek_f.toniêcie_gl_dummy_cube.PitchAngle := obiekty_wieloosobowe_statek_r_f.toniêcie__przechylenie__przód_ty³__owo;
    statek_f.punkty_¿ycia_aktualne := obiekty_wieloosobowe_statek_r_f.punkty_¿ycia__owo;
    statek_f.punkty_¿ycia_procent_zosta³o := obiekty_wieloosobowe_statek_r_f.punkty_¿ycia_procent_zosta³o__owo;

    if statek_f.punkty_¿ycia_maksymalne <> obiekty_wieloosobowe_statek_r_f.punkty_¿ycia_maksymalne__owo then
      statek_f.punkty_¿ycia_maksymalne := obiekty_wieloosobowe_statek_r_f.punkty_¿ycia_maksymalne__owo;

    //statek_f.radar_id_l¹dy_w_zasiêgu := obiekty_wieloosobowe_statek_r_f.radar_id_l¹dy_w_zasiêgu__owo;
    //statek_f.radar_id_statki_w_zasiêgu := obiekty_wieloosobowe_statek_r_f.radar_id_statki_w_zasiêgu__owo;
    //statek_f.radio_id_l¹dy_w_zasiêgu := obiekty_wieloosobowe_statek_r_f.radio_id_l¹dy_w_zasiêgu__owo;
    //statek_f.radio_id_statki_w_zasiêgu := obiekty_wieloosobowe_statek_r_f.radio_id_statki_w_zasiêgu__owo;
    //statek_f.sonar_id_statki_w_zasiêgu := obiekty_wieloosobowe_statek_r_f.sonar_id_statki_w_zasiêgu__owo;

    czy_zanurzenie_peryskopowe__przekroczone_zmiana := statek_f.punkty_¿ycia_wskaŸnik__zanurzenie_peryskopowe__przekroczone__przeliczenie_poprzednie <> obiekty_wieloosobowe_statek_r_f.zanurzenie_peryskopowe__przekroczone__owo;
    statek_f.punkty_¿ycia_wskaŸnik__zanurzenie_peryskopowe__przekroczone__przeliczenie_poprzednie := obiekty_wieloosobowe_statek_r_f.zanurzenie_peryskopowe__przekroczone__owo;

    statek_f.prêdkoœæ_aktualna_procent__wzglêdny := obiekty_wieloosobowe_statek_r_f.prêdkoœæ_aktualna_procent__wzglêdny__owo; // Potrzebne dla dŸwiêków silnika.

    czy_œwiat³a_w³¹czone_zmiana := statek_f.œwiat³a_w³¹czone <> obiekty_wieloosobowe_statek_r_f.œwiat³a_w³¹czone__owo;
    statek_f.œwiat³a_w³¹czone := obiekty_wieloosobowe_statek_r_f.œwiat³a_w³¹czone__owo;

    czy_œwiat³a_dodatkowe_w³¹czone_zmiana := statek_f.œwiat³a_dodatkowe_w³¹czone <> obiekty_wieloosobowe_statek_r_f.œwiat³a_dodatkowe_w³¹czone__owo;
    statek_f.œwiat³a_dodatkowe_w³¹czone := obiekty_wieloosobowe_statek_r_f.œwiat³a_dodatkowe_w³¹czone__owo;
    statek_f.zanurzenie_zadane_przekraczaj_100_procent := obiekty_wieloosobowe_statek_r_f.zanurzenie_zadane_przekraczaj_100_procent__owo;

    statek_f.zanurzenie_pu³ap__aktualne := obiekty_wieloosobowe_statek_r_f.zanurzenie_pu³ap__aktualne__owo;
    statek_f.zanurzenie_pu³ap__aktualne_procent := obiekty_wieloosobowe_statek_r_f.zanurzenie_pu³ap__aktualne_procent__owo;

    //statek_f.œruby_t[ 0 ].obrót_gl_dummy_cube.RollAngle := obiekty_wieloosobowe_statek_r_f.ztr;


    for j := 0 to Length( statek_f.kotwica_t ) - 1 do
      begin

        statek_f.kotwica_t[ j ].kotwica_ruch_etap__ko := obiekty_wieloosobowe_statek_r_f.kotwica__ruch_etap_t__owo[ j ];
        statek_f.kotwica_t[ j ].uszkodzone_czas_sekundy_i := obiekty_wieloosobowe_statek_r_f.kotwica__uszkodzone_czas_i_t__owo[ j ];
        statek_f.kotwica_t[ j ].Position.AsAffineVector := obiekty_wieloosobowe_statek_r_f.kotwica__wspó³rzêdne_t__owo[ j ];

        statek_f.kotwica_t[ j ].Element_Uszkodzenie_Przeliczaj( oczekiwanie_na__naprawienie_elementu__czas_sekundy_g, czy_klient_g );
        statek_f.kotwica_t[ j ].Kotwica_Rodzic_Zmieñ( statek_f.kotwica_t[ j ].kotwica_ruch_etap__ko );
        statek_f.kotwica_t[ j ].Kotwica_Lina_Odœwie¿();

      end;
    //---//for j := 0 to Length( statek_f.kotwica_t ) - 1 do

    for j := 0 to Length( statek_f.ster_t ) - 1 do
      begin

        statek_f.ster_t[ j ].TurnAngle := obiekty_wieloosobowe_statek_r_f.ster_k¹t__owo;
        statek_f.ster_t[ j ].uszkodzone_czas_sekundy_i := obiekty_wieloosobowe_statek_r_f.ster__uszkodzone_czas_i_t__owo[ j ];
        statek_f.ster_t[ j ].Element_Uszkodzenie_Przeliczaj( oczekiwanie_na__naprawienie_elementu__czas_sekundy_g, czy_klient_g );

      end;
    //---//for j := 0 to Length( statek_f.ster_t ) - 1 do

    for j := 0 to Length( statek_f.ster_g³êbokoœci_t ) - 1 do
      begin

        statek_f.ster_g³êbokoœci_t[ j ].PitchAngle := obiekty_wieloosobowe_statek_r_f.ster_g³êbokoœci_k¹t__owo;
        statek_f.ster_g³êbokoœci_t[ j ].uszkodzone_czas_sekundy_i := obiekty_wieloosobowe_statek_r_f.ster_g³êbokoœci__uszkodzone_czas_i_t__owo[ j ];
        statek_f.ster_g³êbokoœci_t[ j ].Element_Uszkodzenie_Przeliczaj( oczekiwanie_na__naprawienie_elementu__czas_sekundy_g, czy_klient_g );

      end;
    //---//for j := 0 to Length( statek_f.ster_g³êbokoœci_t ) - 1 do

    for j := 0 to Length( statek_f.œruby_t ) - 1 do
      begin

        statek_f.œruby_t[ j ].obrót_gl_dummy_cube.RollAngle := obiekty_wieloosobowe_statek_r_f.œruba__obrót_k¹t_t__owo[ j ];
        statek_f.œruby_t[ j ].uszkodzone_czas_sekundy_i := obiekty_wieloosobowe_statek_r_f.œruba__uszkodzone_czas_i_t__owo[ j ];
        statek_f.œruby_t[ j ].Element_Uszkodzenie_Przeliczaj( oczekiwanie_na__naprawienie_elementu__czas_sekundy_g, czy_klient_g );

      end;
    //---//for j := 0 to Length( statek_f.œruby_t ) - 1 do


    {$region 'Dzia³a strzelaj¹ce.'}
    for j := 0 to Length( statek_f.artyleria_t ) - 1 do
      begin

        statek_f.artyleria_t[ j ].czy_lot_parabol¹ := obiekty_wieloosobowe_statek_r_f.artyleria_t__owo[ j ].czy_lot_parabol¹__owo;
        statek_f.artyleria_t[ j ].TurnAngle := obiekty_wieloosobowe_statek_r_f.artyleria_t__owo[ j ].obrót_k¹t__owo;
        statek_f.artyleria_t[ j ].celownik_linia.PitchAngle := obiekty_wieloosobowe_statek_r_f.artyleria_t__owo[ j ].celownik_linia__podniesienie_k¹t__owo;
        statek_f.artyleria_t[ j ].celownik_linia.LineColor.Color := Wieloosobowe__Wektor_4__Do__Vector( obiekty_wieloosobowe_statek_r_f.artyleria_t__owo[ j ].celownik_linia__kolor__owo );
        statek_f.artyleria_t[ j ].celownik_linia.LineWidth := obiekty_wieloosobowe_statek_r_f.artyleria_t__owo[ j ].celownik_linia__szerokoœæ__owo;
        //statek_f.artyleria_t[ j ].celownik_linia.NodesAspect := TGLLineNodesAspect(obiekty_wieloosobowe_statek_r_f.artyleria_t__owo[ j ].celownik_linia__koñcówki__owo);
        statek_f.artyleria_t[ j ].celownik_linia.LinePattern := obiekty_wieloosobowe_statek_r_f.artyleria_t__owo[ j ].celownik_linia__wzór__owo;
        statek_f.artyleria_t[ j ].celownik_linia_bez_falowania.LineColor.Color := statek_f.artyleria_t[ j ].celownik_linia.LineColor.Color;
        statek_f.artyleria_t[ j ].celownik_linia_bez_falowania.LinePattern := statek_f.artyleria_t[ j ].celownik_linia.LinePattern;
        statek_f.artyleria_t[ j ].celownik_linia_bez_falowania.LineWidth := statek_f.artyleria_t[ j ].celownik_linia.LineWidth;
        //statek_f.artyleria_t[ j ].celownik_linia_bez_falowania.NodesAspect := statek_f.artyleria_t[ j ].celownik_linia.NodesAspect;
        TTorpedy_Wyrzutnia(statek_f.artyleria_t[ j ]).Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj( false );
        statek_f.artyleria_t[ j ].Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj( statek_f.amunicja_rodzaj_wybrana__artyleria or statek_f.amunicja_rodzaj_wybrana__wszystkie );
        statek_f.artyleria_t[ j ].uszkodzone_czas_sekundy_i := obiekty_wieloosobowe_statek_r_f.artyleria_t__owo[ j ].uszkodzone_czas_i__owo;
        statek_f.artyleria_t[ j ].Element_Uszkodzenie_Przeliczaj( oczekiwanie_na__naprawienie_elementu__czas_sekundy_g, czy_klient_g );

        for k := 0 to Length( statek_f.artyleria_t[ j ].lufy_t ) - 1 do
          begin

            statek_f.artyleria_t[ j ].lufy_t[ k ].PitchAngle := obiekty_wieloosobowe_statek_r_f.artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_podniesienie_k¹t__owo;
            statek_f.artyleria_t[ j ].lufy_t[ k ].korpus__lufa.Position.Z := obiekty_wieloosobowe_statek_r_f.artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_pozycja_z__owo;
            statek_f.artyleria_t[ j ].lufy_t[ k ].prze³adowanie_procent := obiekty_wieloosobowe_statek_r_f.artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_procent__owo;
            statek_f.artyleria_t[ j ].lufy_t[ k ].prze³adowanie_wskaŸnik.Position.AsVector := Wieloosobowe__Wektor_4__Do__Vector( obiekty_wieloosobowe_statek_r_f.artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__pozycja__owo );
            statek_f.artyleria_t[ j ].lufy_t[ k ].prze³adowanie_wskaŸnik.Material.FrontProperties.Ambient.Color := Wieloosobowe__Wektor_4__Do__Vector( obiekty_wieloosobowe_statek_r_f.artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__kolor__owo );

          end;
        //---//for k := 0 to Length( statek_f.artyleria_t[ j ].lufy_t ) - 1 do

      end;
    //---//for j := 0 to Length( statek_f.artyleria_t ) - 1 do


    for j := 0 to Length( statek_f.bomba_g³êbinowa_t ) - 1 do
      begin

        statek_f.bomba_g³êbinowa_t[ j ].TurnAngle := obiekty_wieloosobowe_statek_r_f.bomba_g³êbinowa_t__owo[ j ].obrót_k¹t__owo;
        statek_f.bomba_g³êbinowa_t[ j ].celownik_linia.PitchAngle := obiekty_wieloosobowe_statek_r_f.bomba_g³êbinowa_t__owo[ j ].celownik_linia__podniesienie_k¹t__owo;
        statek_f.bomba_g³êbinowa_t[ j ].celownik_linia.LineColor.Color := Wieloosobowe__Wektor_4__Do__Vector( obiekty_wieloosobowe_statek_r_f.bomba_g³êbinowa_t__owo[ j ].celownik_linia__kolor__owo );
        statek_f.bomba_g³êbinowa_t[ j ].celownik_linia.LineWidth := obiekty_wieloosobowe_statek_r_f.bomba_g³êbinowa_t__owo[ j ].celownik_linia__szerokoœæ__owo;
        //statek_f.bomba_g³êbinowa_t[ j ].celownik_linia.NodesAspect := TGLLineNodesAspect(obiekty_wieloosobowe_statek_r_f.bomba_g³êbinowa_t__owo[ j ].celownik_linia__koñcówki__owo);
        statek_f.bomba_g³êbinowa_t[ j ].celownik_linia.LinePattern := obiekty_wieloosobowe_statek_r_f.bomba_g³êbinowa_t__owo[ j ].celownik_linia__wzór__owo;
        statek_f.bomba_g³êbinowa_t[ j ].celownik_linia_bez_falowania.LineColor.Color := statek_f.bomba_g³êbinowa_t[ j ].celownik_linia.LineColor.Color;
        statek_f.bomba_g³êbinowa_t[ j ].celownik_linia_bez_falowania.LinePattern := statek_f.bomba_g³êbinowa_t[ j ].celownik_linia.LinePattern;
        statek_f.bomba_g³êbinowa_t[ j ].celownik_linia_bez_falowania.LineWidth := statek_f.bomba_g³êbinowa_t[ j ].celownik_linia.LineWidth;
        //statek_f.bomba_g³êbinowa_t[ j ].celownik_linia_bez_falowania.NodesAspect := statek_f.bomba_g³êbinowa_t[ j ].celownik_linia.NodesAspect;
        statek_f.bomba_g³êbinowa_t[ j ].Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj( statek_f.amunicja_rodzaj_wybrana__bomba_g³êbinowa or statek_f.amunicja_rodzaj_wybrana__wszystkie );
        statek_f.bomba_g³êbinowa_t[ j ].uszkodzone_czas_sekundy_i := obiekty_wieloosobowe_statek_r_f.bomba_g³êbinowa_t__owo[ j ].uszkodzone_czas_i__owo;
        statek_f.bomba_g³êbinowa_t[ j ].Element_Uszkodzenie_Przeliczaj( oczekiwanie_na__naprawienie_elementu__czas_sekundy_g, czy_klient_g );

        for k := 0 to Length( statek_f.bomba_g³êbinowa_t[ j ].lufy_t ) - 1 do
          begin

            statek_f.bomba_g³êbinowa_t[ j ].lufy_t[ k ].PitchAngle := obiekty_wieloosobowe_statek_r_f.bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_podniesienie_k¹t__owo;
            statek_f.bomba_g³êbinowa_t[ j ].lufy_t[ k ].korpus__lufa.Position.Z := obiekty_wieloosobowe_statek_r_f.bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_pozycja_z__owo;
            statek_f.bomba_g³êbinowa_t[ j ].lufy_t[ k ].prze³adowanie_procent := obiekty_wieloosobowe_statek_r_f.bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_procent__owo;
            statek_f.bomba_g³êbinowa_t[ j ].lufy_t[ k ].prze³adowanie_wskaŸnik.Position.AsVector := Wieloosobowe__Wektor_4__Do__Vector( obiekty_wieloosobowe_statek_r_f.bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__pozycja__owo );
            statek_f.bomba_g³êbinowa_t[ j ].lufy_t[ k ].prze³adowanie_wskaŸnik.Material.FrontProperties.Ambient.Color := Wieloosobowe__Wektor_4__Do__Vector( obiekty_wieloosobowe_statek_r_f.bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__kolor__owo );

          end;
        //---//for k := 0 to Length( statek_f.bomba_g³êbinowa_t[ j ].lufy_t ) - 1 do

      end;
    //---//for j := 0 to Length( statek_f.bomba_g³êbinowa_t ) - 1 do


    for j := 0 to Length( statek_f.dzia³a_t ) - 1 do
      begin

        statek_f.dzia³a_t[ j ].TurnAngle := obiekty_wieloosobowe_statek_r_f.dzia³a_t__owo[ j ].obrót_k¹t__owo;
        statek_f.dzia³a_t[ j ].celownik_linia.PitchAngle := obiekty_wieloosobowe_statek_r_f.dzia³a_t__owo[ j ].celownik_linia__podniesienie_k¹t__owo;
        statek_f.dzia³a_t[ j ].celownik_linia.LineColor.Color := Wieloosobowe__Wektor_4__Do__Vector( obiekty_wieloosobowe_statek_r_f.dzia³a_t__owo[ j ].celownik_linia__kolor__owo );
        statek_f.dzia³a_t[ j ].celownik_linia.LineWidth := obiekty_wieloosobowe_statek_r_f.dzia³a_t__owo[ j ].celownik_linia__szerokoœæ__owo;
        //statek_f.dzia³a_t[ j ].celownik_linia.NodesAspect := TGLLineNodesAspect(obiekty_wieloosobowe_statek_r_f.dzia³a_t__owo[ j ].celownik_linia__koñcówki__owo);
        statek_f.dzia³a_t[ j ].celownik_linia.LinePattern := obiekty_wieloosobowe_statek_r_f.dzia³a_t__owo[ j ].celownik_linia__wzór__owo;
        statek_f.dzia³a_t[ j ].celownik_linia_bez_falowania.LineColor.Color := statek_f.dzia³a_t[ j ].celownik_linia.LineColor.Color;
        statek_f.dzia³a_t[ j ].celownik_linia_bez_falowania.LinePattern := statek_f.dzia³a_t[ j ].celownik_linia.LinePattern;
        statek_f.dzia³a_t[ j ].celownik_linia_bez_falowania.LineWidth := statek_f.dzia³a_t[ j ].celownik_linia.LineWidth;
        //statek_f.dzia³a_t[ j ].celownik_linia_bez_falowania.NodesAspect := statek_f.dzia³a_t[ j ].celownik_linia.NodesAspect;
        TTorpedy_Wyrzutnia(statek_f.dzia³a_t[ j ]).Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj( false );
        statek_f.dzia³a_t[ j ].Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj( statek_f.amunicja_rodzaj_wybrana__pocisk or statek_f.amunicja_rodzaj_wybrana__wszystkie );
        statek_f.dzia³a_t[ j ].uszkodzone_czas_sekundy_i := obiekty_wieloosobowe_statek_r_f.dzia³a_t__owo[ j ].uszkodzone_czas_i__owo;
        statek_f.dzia³a_t[ j ].Element_Uszkodzenie_Przeliczaj( oczekiwanie_na__naprawienie_elementu__czas_sekundy_g, czy_klient_g );

        for k := 0 to Length( statek_f.dzia³a_t[ j ].lufy_t ) - 1 do
          begin

            statek_f.dzia³a_t[ j ].lufy_t[ k ].PitchAngle := obiekty_wieloosobowe_statek_r_f.dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_podniesienie_k¹t__owo;
            statek_f.dzia³a_t[ j ].lufy_t[ k ].korpus__lufa.Position.Z := obiekty_wieloosobowe_statek_r_f.dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_pozycja_z__owo;
            statek_f.dzia³a_t[ j ].lufy_t[ k ].prze³adowanie_procent := obiekty_wieloosobowe_statek_r_f.dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_procent__owo;
            statek_f.dzia³a_t[ j ].lufy_t[ k ].prze³adowanie_wskaŸnik.Position.AsVector := Wieloosobowe__Wektor_4__Do__Vector( obiekty_wieloosobowe_statek_r_f.dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__pozycja__owo );
            statek_f.dzia³a_t[ j ].lufy_t[ k ].prze³adowanie_wskaŸnik.Material.FrontProperties.Ambient.Color := Wieloosobowe__Wektor_4__Do__Vector( obiekty_wieloosobowe_statek_r_f.dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__kolor__owo );

          end;
        //---//for k := 0 to Length( statek_f.dzia³a_t[ j ].lufy_t ) - 1 do

      end;
    //---//for j := 0 to Length( statek_f.dzia³a_t ) - 1 do


    for j := 0 to Length( statek_f.je¿e_g³êbinowe_t ) - 1 do
      begin

        statek_f.je¿e_g³êbinowe_t[ j ].TurnAngle := obiekty_wieloosobowe_statek_r_f.je¿e_g³êbinowe_t__owo[ j ].obrót_k¹t__owo;
        statek_f.je¿e_g³êbinowe_t[ j ].celownik_linia.PitchAngle := obiekty_wieloosobowe_statek_r_f.je¿e_g³êbinowe_t__owo[ j ].celownik_linia__podniesienie_k¹t__owo;
        statek_f.je¿e_g³êbinowe_t[ j ].celownik_linia.LineColor.Color := Wieloosobowe__Wektor_4__Do__Vector( obiekty_wieloosobowe_statek_r_f.je¿e_g³êbinowe_t__owo[ j ].celownik_linia__kolor__owo );
        statek_f.je¿e_g³êbinowe_t[ j ].celownik_linia.LineWidth := obiekty_wieloosobowe_statek_r_f.je¿e_g³êbinowe_t__owo[ j ].celownik_linia__szerokoœæ__owo;
        //statek_f.je¿e_g³êbinowe_t[ j ].celownik_linia.NodesAspect := TGLLineNodesAspect(obiekty_wieloosobowe_statek_r_f.je¿e_g³êbinowe_t__owo[ j ].celownik_linia__koñcówki__owo);
        statek_f.je¿e_g³êbinowe_t[ j ].celownik_linia.LinePattern := obiekty_wieloosobowe_statek_r_f.je¿e_g³êbinowe_t__owo[ j ].celownik_linia__wzór__owo;
        statek_f.je¿e_g³êbinowe_t[ j ].celownik_linia_bez_falowania.LineColor.Color := statek_f.je¿e_g³êbinowe_t[ j ].celownik_linia.LineColor.Color;
        statek_f.je¿e_g³êbinowe_t[ j ].celownik_linia_bez_falowania.LinePattern := statek_f.je¿e_g³êbinowe_t[ j ].celownik_linia.LinePattern;
        statek_f.je¿e_g³êbinowe_t[ j ].celownik_linia_bez_falowania.LineWidth := statek_f.je¿e_g³êbinowe_t[ j ].celownik_linia.LineWidth;
        //statek_f.je¿e_g³êbinowe_t[ j ].celownik_linia_bez_falowania.NodesAspect := statek_f.je¿e_g³êbinowe_t[ j ].celownik_linia.NodesAspect;
        statek_f.je¿e_g³êbinowe_t[ j ].Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj( statek_f.amunicja_rodzaj_wybrana__je¿e_g³êbinowe or statek_f.amunicja_rodzaj_wybrana__wszystkie );
        statek_f.je¿e_g³êbinowe_t[ j ].uszkodzone_czas_sekundy_i := obiekty_wieloosobowe_statek_r_f.je¿e_g³êbinowe_t__owo[ j ].uszkodzone_czas_i__owo;
        statek_f.je¿e_g³êbinowe_t[ j ].Element_Uszkodzenie_Przeliczaj( oczekiwanie_na__naprawienie_elementu__czas_sekundy_g, czy_klient_g );

        for k := 0 to Length( statek_f.je¿e_g³êbinowe_t[ j ].lufy_t ) - 1 do
          begin

            statek_f.je¿e_g³êbinowe_t[ j ].lufy_t[ k ].PitchAngle := obiekty_wieloosobowe_statek_r_f.je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_podniesienie_k¹t__owo;
            statek_f.je¿e_g³êbinowe_t[ j ].lufy_t[ k ].korpus__lufa.Position.Z := obiekty_wieloosobowe_statek_r_f.je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_pozycja_z__owo;
            statek_f.je¿e_g³êbinowe_t[ j ].lufy_t[ k ].prze³adowanie_procent := obiekty_wieloosobowe_statek_r_f.je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_procent__owo;
            statek_f.je¿e_g³êbinowe_t[ j ].lufy_t[ k ].prze³adowanie_wskaŸnik.Position.AsVector := Wieloosobowe__Wektor_4__Do__Vector( obiekty_wieloosobowe_statek_r_f.je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__pozycja__owo );
            statek_f.je¿e_g³êbinowe_t[ j ].lufy_t[ k ].prze³adowanie_wskaŸnik.Material.FrontProperties.Ambient.Color := Wieloosobowe__Wektor_4__Do__Vector( obiekty_wieloosobowe_statek_r_f.je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__kolor__owo );

          end;
        //---//for k := 0 to Length( statek_f.je¿e_g³êbinowe_t[ j ].lufy_t ) - 1 do

      end;
    //---//for j := 0 to Length( statek_f.je¿e_g³êbinowe_t ) - 1 do


    for j := 0 to Length( statek_f.torpedy_wyrzutnie_t ) - 1 do
      begin

        statek_f.torpedy_wyrzutnie_t[ j ].TurnAngle := obiekty_wieloosobowe_statek_r_f.torpedy_wyrzutnie_t__owo[ j ].obrót_k¹t__owo;
        statek_f.torpedy_wyrzutnie_t[ j ].celownik_linia.PitchAngle := obiekty_wieloosobowe_statek_r_f.torpedy_wyrzutnie_t__owo[ j ].celownik_linia__podniesienie_k¹t__owo;
        statek_f.torpedy_wyrzutnie_t[ j ].celownik_linia.LineColor.Color := Wieloosobowe__Wektor_4__Do__Vector( obiekty_wieloosobowe_statek_r_f.torpedy_wyrzutnie_t__owo[ j ].celownik_linia__kolor__owo );
        statek_f.torpedy_wyrzutnie_t[ j ].celownik_linia.LineWidth := obiekty_wieloosobowe_statek_r_f.torpedy_wyrzutnie_t__owo[ j ].celownik_linia__szerokoœæ__owo;
        //statek_f.torpedy_wyrzutnie_t[ j ].celownik_linia.NodesAspect := TGLLineNodesAspect(obiekty_wieloosobowe_statek_r_f.torpedy_wyrzutnie_t__owo[ j ].celownik_linia__koñcówki__owo);
        statek_f.torpedy_wyrzutnie_t[ j ].celownik_linia.LinePattern := obiekty_wieloosobowe_statek_r_f.torpedy_wyrzutnie_t__owo[ j ].celownik_linia__wzór__owo;
        statek_f.torpedy_wyrzutnie_t[ j ].celownik_linia_bez_falowania.LineColor.Color := statek_f.torpedy_wyrzutnie_t[ j ].celownik_linia.LineColor.Color;
        statek_f.torpedy_wyrzutnie_t[ j ].celownik_linia_bez_falowania.LinePattern := statek_f.torpedy_wyrzutnie_t[ j ].celownik_linia.LinePattern;
        statek_f.torpedy_wyrzutnie_t[ j ].celownik_linia_bez_falowania.LineWidth := statek_f.torpedy_wyrzutnie_t[ j ].celownik_linia.LineWidth;
        //statek_f.torpedy_wyrzutnie_t[ j ].celownik_linia_bez_falowania.NodesAspect := statek_f.torpedy_wyrzutnie_t[ j ].celownik_linia.NodesAspect;
        statek_f.torpedy_wyrzutnie_t[ j ].Celownik_Linia_Bez_Falowania__Kierunek_Aktualizuj( statek_f.amunicja_rodzaj_wybrana__torpeda or statek_f.amunicja_rodzaj_wybrana__wszystkie );
        statek_f.torpedy_wyrzutnie_t[ j ].uszkodzone_czas_sekundy_i := obiekty_wieloosobowe_statek_r_f.torpedy_wyrzutnie_t__owo[ j ].uszkodzone_czas_i__owo;
        statek_f.torpedy_wyrzutnie_t[ j ].Element_Uszkodzenie_Przeliczaj( oczekiwanie_na__naprawienie_elementu__czas_sekundy_g, czy_klient_g );

        for k := 0 to Length( statek_f.torpedy_wyrzutnie_t[ j ].lufy_t ) - 1 do
          begin

            statek_f.torpedy_wyrzutnie_t[ j ].lufy_t[ k ].PitchAngle := obiekty_wieloosobowe_statek_r_f.torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_podniesienie_k¹t__owo;
            statek_f.torpedy_wyrzutnie_t[ j ].lufy_t[ k ].korpus__lufa.Position.Z := obiekty_wieloosobowe_statek_r_f.torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_pozycja_z__owo;
            statek_f.torpedy_wyrzutnie_t[ j ].lufy_t[ k ].prze³adowanie_procent := obiekty_wieloosobowe_statek_r_f.torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_procent__owo;
            statek_f.torpedy_wyrzutnie_t[ j ].lufy_t[ k ].prze³adowanie_wskaŸnik.Position.AsVector := Wieloosobowe__Wektor_4__Do__Vector( obiekty_wieloosobowe_statek_r_f.torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__pozycja__owo );
            statek_f.torpedy_wyrzutnie_t[ j ].lufy_t[ k ].prze³adowanie_wskaŸnik.Material.FrontProperties.Ambient.Color := Wieloosobowe__Wektor_4__Do__Vector( obiekty_wieloosobowe_statek_r_f.torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__kolor__owo );

          end;
        //---//for k := 0 to Length( statek_f.torpedy_wyrzutnie_t[ j ].lufy_t ) - 1 do

      end;
    //---//for j := 0 to Length( statek_f.torpedy_wyrzutnie_t ) - 1 do
    {$endregion 'Dzia³a strzelaj¹ce.'}

    obiekty_wieloosobowe_statek_r_f.przeliczone_st__owo := true;


    if not statek_f.Visible then
      statek_f.Visible := true; // Po przywróceniu statku do gry klient umieszcza go na wyliczonej samodzielnie pozycji i dopiero po odebraniu danych o pozycji z serwera zaktualizuje pozycjê statku i ustawi na widoczny.


    {$region 'Informacje do wyœwietlania dla gracza o jego statku.'}
    if    ( statek_gracza <> nil )
      and ( statek_gracza.id_statek = statek_f.id_statek )
      and ( statek_f.id_gracz = Gracz_Identyfikator() ) //statek_gracza.id_statek
      and ( statek_f.id_statek = obiekty_wieloosobowe_statek_r_f.id_statek_st__owo ) then
      Parametry_Ustaw_Statek_Gracza( statek_f );

    if    ( samolot__statek_gracza <> nil )
      and ( samolot__statek_gracza.id_statek = statek_f.id_statek )
      and ( statek_f.id_gracz = Gracz_Identyfikator() ) //statek_gracza.id_statek
      and ( statek_f.id_statek = obiekty_wieloosobowe_statek_r_f.id_statek_st__owo ) then
      Parametry_Ustaw_Statek_Gracza( samolot__statek_gracza );
    {$endregion 'Informacje do wyœwietlania dla gracza o jego statku.'}


    if   ( czy_œwiat³a_w³¹czone_zmiana )
      or ( czy_œwiat³a_dodatkowe_w³¹czone_zmiana ) then // UDP mo¿e przeoczyæ tak¹ zmianê.
      Wygl¹d_Elementy__Noc_Zmieñ();


    if czy_zanurzenie_peryskopowe__przekroczone_zmiana then // UDP mo¿e przeoczyæ tak¹ zmianê.
      statek_f.Punkty_¯ycia__WskaŸnik__Noc_Zmieñ( dzieñ_jasnoœæ_g );


    if    ( czy_œwiat³a_w³¹czone_zmiana )
      and ( not statek_f.œwiat³a_w³¹czone ) then
      statek_f.Œwiat³a_Miganie__OpóŸnienia_Losowe_Resetuj__Statek( false );

    if    ( czy_œwiat³a_dodatkowe_w³¹czone_zmiana )
      and ( not statek_f.œwiat³a_dodatkowe_w³¹czone ) then
      statek_f.Œwiat³a_Miganie__OpóŸnienia_Losowe_Resetuj__Statek( true );

  end;//---//Funkcja Parametry_Ustaw() w Wieloosobowe_Statki__Parametry_Ustaw().

var
  i,
  j
    : integer;
begin//Funkcja Wieloosobowe_Statki__Parametry_Ustaw().

  //
  // Funkcja ustawia parametry statków wieloosobowych.
  //

  if Length( statki_t ) <> Length( wieloosobowe__statki_t ) then
    begin

      Statki_Utwórz();

    end;
  //---//if Length( statki_t ) <> Length( wieloosobowe__statki_t ) then


  for i := 0 to Length( wieloosobowe__statki_t ) - 1 do
    if not wieloosobowe__statki_t[ i ].przeliczone_st__owo then
      begin

        for j := 0 to Length( statki_t ) - 1 do
          if wieloosobowe__statki_t[ i ].id_statek_st__owo = statki_t[ j ].id_statek then
            begin

              if wieloosobowe__statki_t[ i ].id_statek_schemat__owo <> statki_t[ j ].id_statek_schemat then
                Statki_Utwórz( i, j );

              // Je¿eli wczeœniej utworzony statek jest na otrzymanej liœcie statków ustawia jego aktualne parametry.

              Parametry_Ustaw( statki_t[ j ], wieloosobowe__statki_t[ i ] );
              Break;

            end;
          //---//if wieloosobowe__statki_t[ i ].id_statek_st__owo = statki_t[ j ].id_statek then

      end;
    //---//if not wieloosobowe__statki_t[ i ].przeliczone_st__owo then


  for i := 0 to Length( wieloosobowe__statki_t ) - 1 do
    if not wieloosobowe__statki_t[ i ].przeliczone_st__owo then
      begin

        Statki_Utwórz();
        Break;

      end;
    //---//if not wieloosobowe__statki_t[ i ].przeliczone_st__owo then



  if klient_pierwsze_ustawienie_kamery_g then
    begin

      klient_pierwsze_ustawienie_kamery_g := false;

      Kamera_Na_Statek_Gracza_Ustaw();

    end;
  //---//if klient_pierwsze_ustawienie_kamery_g then

end;//---//Funkcja Wieloosobowe_Statki__Parametry_Ustaw().

//Funkcja Wieloosobowe_Statki__Rekord_Czyœæ().
procedure TStatki_Form.Wieloosobowe_Statki__Rekord_Czyœæ();
var
  i,
  j
    : integer;
begin

  //
  // Funkcja czyœci dane parametrów statków wieloosobowych.
  //

  for i := 0 to Length( wieloosobowe__statki_t ) - 1 do
    begin

      //wieloosobowe__statki_t[ i ].id_gracz__owo := -99;
      //wieloosobowe__statki_t[ i ].id_statek_st__owo := -99;
      //wieloosobowe__statki_t[ i ].id_statek_schemat__owo := -1;
      ////wieloosobowe__statki_t[ i ].gracz__nazwa__owo := '';

      SetLength( wieloosobowe__statki_t[ i ].kotwica__ruch_etap_t__owo, 0 );
      SetLength( wieloosobowe__statki_t[ i ].kotwica__uszkodzone_czas_i_t__owo, 0 );
      SetLength( wieloosobowe__statki_t[ i ].kotwica__wspó³rzêdne_t__owo, 0 );
      SetLength( wieloosobowe__statki_t[ i ].ster__uszkodzone_czas_i_t__owo, 0 );
      SetLength( wieloosobowe__statki_t[ i ].ster_g³êbokoœci__uszkodzone_czas_i_t__owo, 0 );
      SetLength( wieloosobowe__statki_t[ i ].œruba__obrót_k¹t_t__owo, 0 );
      SetLength( wieloosobowe__statki_t[ i ].œruba__uszkodzone_czas_i_t__owo, 0 );


      {$region 'Dzia³a strzelaj¹ce.'}
      for j := 0 to Length( wieloosobowe__statki_t[ i ].artyleria_t__owo ) - 1 do
        SetLength( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo, 0 );

      SetLength( wieloosobowe__statki_t[ i ].artyleria_t__owo, 0 );


      for j := 0 to Length( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo ) - 1 do
        SetLength( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo, 0 );

      SetLength( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo, 0 );


      for j := 0 to Length( wieloosobowe__statki_t[ i ].dzia³a_t__owo ) - 1 do
        SetLength( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo, 0 );

      SetLength( wieloosobowe__statki_t[ i ].dzia³a_t__owo, 0 );


      for j := 0 to Length( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo ) - 1 do
        SetLength( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo, 0 );

      SetLength( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo, 0 );


      for j := 0 to Length( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo ) - 1 do
        SetLength( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo, 0 );

      SetLength( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo, 0 );
      {$endregion 'Dzia³a strzelaj¹ce.'}

    end;
  //---//for i := 0 to Length( wieloosobowe__statki_t ) - 1 do


  SetLength( wieloosobowe__statki_t, 0 );

end;//---//Funkcja Wieloosobowe_Statki__Rekord_Czyœæ().

//Funkcja Wieloosobowe_Statki__Wysy³ane_Rzadziej__Parametry_Odczytaj().
procedure TStatki_Form.Wieloosobowe_Statki__Wysy³ane_Rzadziej__Parametry_Odczytaj();
var
  i : integer;
begin

  //
  // Funkcja odczytuje parametry statków wieloosobowych wysy³anych rzadziej.
  //

  if Length( wieloosobowe__statki__wysy³ane_rzadziej_t ) <> Length( statki_t ) then
    begin


      Wieloosobowe_Statki__Wysy³ane_Rzadziej__Rekord_Czyœæ();
      SetLength(  wieloosobowe__statki__wysy³ane_rzadziej_t, Length( statki_t )  );

    end;
  //---//if Length( wieloosobowe__statki__wysy³ane_rzadziej_t ) <> Length( statki_t ) then


  for i := 0 to Length( statki_t ) - 1 do
    begin

      wieloosobowe__statki__wysy³ane_rzadziej_t[ i ].id_statek_st__owo_wr := statki_t[ i ].id_statek;
      wieloosobowe__statki__wysy³ane_rzadziej_t[ i ].radar_id_l¹dy_w_zasiêgu__owo_wr := statki_t[ i ].radar_id_l¹dy_w_zasiêgu;
      wieloosobowe__statki__wysy³ane_rzadziej_t[ i ].radar_id_statki_w_zasiêgu__owo_wr := statki_t[ i ].radar_id_statki_w_zasiêgu;
      wieloosobowe__statki__wysy³ane_rzadziej_t[ i ].radio_id_l¹dy_w_zasiêgu__owo_wr := statki_t[ i ].radio_id_l¹dy_w_zasiêgu;
      wieloosobowe__statki__wysy³ane_rzadziej_t[ i ].radio_id_statki_w_zasiêgu__owo_wr := statki_t[ i ].radio_id_statki_w_zasiêgu;
      wieloosobowe__statki__wysy³ane_rzadziej_t[ i ].sonar_id_statki_w_zasiêgu__owo_wr := statki_t[ i ].sonar_id_statki_w_zasiêgu;

    end;
  //---//for i := 0 to Length( statki_t ) - 1 do

end;//---//Funkcja Wieloosobowe_Statki__Wysy³ane_Rzadziej__Parametry_Odczytaj().

//Funkcja Wieloosobowe_Statki__Wysy³ane_Rzadziej__Parametry_Ustaw().
procedure TStatki_Form.Wieloosobowe_Statki__Wysy³ane_Rzadziej__Parametry_Ustaw();

  //Funkcja Parametry_Ustaw__Wysy³ane_Rzadziej() w Wieloosobowe_Statki__Wysy³ane_Rzadziej__Parametry_Ustaw().
  procedure Parametry_Ustaw__Wysy³ane_Rzadziej( statek_f : TStatek; var wieloosobowe__statki__wysy³ane_rzadziej_r_f : TObiekty_Wieloosobowe__Statek__Wysy³ane_Rzadziej_r );
  begin

    if   ( statek_f = nil )
      or (  not Assigned( statek_f )  ) then
      Exit;

    statek_f.radar_id_l¹dy_w_zasiêgu := wieloosobowe__statki__wysy³ane_rzadziej_r_f.radar_id_l¹dy_w_zasiêgu__owo_wr;
    statek_f.radar_id_statki_w_zasiêgu := wieloosobowe__statki__wysy³ane_rzadziej_r_f.radar_id_statki_w_zasiêgu__owo_wr;
    statek_f.radio_id_l¹dy_w_zasiêgu := wieloosobowe__statki__wysy³ane_rzadziej_r_f.radio_id_l¹dy_w_zasiêgu__owo_wr;
    statek_f.radio_id_statki_w_zasiêgu := wieloosobowe__statki__wysy³ane_rzadziej_r_f.radio_id_statki_w_zasiêgu__owo_wr;
    statek_f.sonar_id_statki_w_zasiêgu := wieloosobowe__statki__wysy³ane_rzadziej_r_f.sonar_id_statki_w_zasiêgu__owo_wr;

  end;//---//Funkcja Parametry_Ustaw__Wysy³ane_Rzadziej() w Wieloosobowe_Statki__Wysy³ane_Rzadziej__Parametry_Ustaw().

var
  i,
  j
    : integer;
begin//Funkcja Wieloosobowe_Statki__Wysy³ane_Rzadziej__Parametry_Ustaw().

  //
  // Funkcja ustawia parametry statków wieloosobowych wysy³anych rzadziej.
  //

  for i := 0 to Length( wieloosobowe__statki__wysy³ane_rzadziej_t ) - 1 do
    begin

      for j := 0 to Length( statki_t ) - 1 do
        if wieloosobowe__statki__wysy³ane_rzadziej_t[ i ].id_statek_st__owo_wr = statki_t[ j ].id_statek then
          begin

            // Je¿eli wczeœniej utworzony statek jest na otrzymanej liœcie statków ustawia jego aktualne parametry wysy³ane rzadziej.

            Parametry_Ustaw__Wysy³ane_Rzadziej( statki_t[ j ], wieloosobowe__statki__wysy³ane_rzadziej_t[ i ] );
            Break;

          end;
        //---//if wieloosobowe__statki__wysy³ane_rzadziej_t[ i ].id_statek_st__owo = statki_t[ j ].id_statek then

    end;
  //---//for i := 0 to Length( wieloosobowe__statki__wysy³ane_rzadziej_t ) - 1 do

end;//---//Funkcja Wieloosobowe_Statki__Wysy³ane_Rzadziej__Parametry_Ustaw().

//Funkcja Wieloosobowe_Statki__Wysy³ane_Rzadziej__Rekord_Czyœæ().
procedure TStatki_Form.Wieloosobowe_Statki__Wysy³ane_Rzadziej__Rekord_Czyœæ();
begin

  //
  // Funkcja czyœci dane parametrów statków wieloosobowych wysy³anych rzadziej.
  //

  SetLength( wieloosobowe__statki__wysy³ane_rzadziej_t, 0 );

end;//---//Funkcja Wieloosobowe_Statki__Wysy³ane_Rzadziej__Rekord_Czyœæ().

//Funkcja Wieloosobowe__DŸwiêk_Efekt_Utwórz().
procedure TStatki_Form.Wieloosobowe__DŸwiêk_Efekt_Utwórz( obiekty_wieloosobowe__efekt_r_f : TObiekty_Wieloosobowe__Efekt_r );
var
  i,
  j
    : integer;
  zt_gl_base_scene_object : TGLBaseSceneObject;
begin

  zt_gl_base_scene_object := nil;

  if obiekty_wieloosobowe__efekt_r_f.id_statek_ef__owo <> -1 then // Scena.
    for i := 0 to Length( statki_t ) - 1 do
      if    ( statki_t[ i ] <> nil )
        and ( statki_t[ i ].id_statek = obiekty_wieloosobowe__efekt_r_f.id_statek_ef__owo ) then
        begin

          for j := 0 to Length( statki_t[ i ].kotwica_t ) - 1 do
            if statki_t[ i ].kotwica_t[ j ].id_kotwica = obiekty_wieloosobowe__efekt_r_f.czas_trwania__owo then // Aby nie powiêkszaæ rekordu czas_trwania__owo zapamiêta id_kotwica.
              begin

                zt_gl_base_scene_object := statki_t[ i ].kotwica_t[ j ].efekt__dŸwiêk_kontener_gl_dummy_cube;
                Break;

              end;
            //---//if statki_t[ i ].kotwica_t[ j ].id_kotwica = obiekty_wieloosobowe__efekt_r_f.czas_trwania__owo then

          Break;

        end;
      //---//if    ( statki_t[ i ] <> nil ) (...)


  if obiekty_wieloosobowe__efekt_r_f.dŸwiêk_efekt_rodzaj_owo in [ der_Kotwica__Brak, der_Kotwica__Statek, der_Kotwica__Stop, der_Kotwica__W_Dó³, der_Kotwica__W_Górê ] then // To samo der_Kotwica__Brak.
    begin

      if zt_gl_base_scene_object <> nil then
        DŸwiêki__Efekt__Utwórz_Jeden( zt_gl_base_scene_object, obiekty_wieloosobowe__efekt_r_f.dŸwiêk_efekt_rodzaj_owo, 0, 0, 0 );

    end
  else//if obiekty_wieloosobowe__efekt_r_f.dŸwiêk_efekt_rodzaj_owo in [ der_Kotwica__Brak, der_Kotwica__Statek, der_Kotwica__Stop, der_Kotwica__W_Dó³, der_Kotwica__W_Górê ] then // To samo der_Kotwica__Brak.
    DŸwiêki__Efekt__Utwórz_Jeden( obiekty_wieloosobowe__efekt_r_f.dŸwiêk_efekt_rodzaj_owo, obiekty_wieloosobowe__efekt_r_f.pozycja_ef__owo );

end;//---//Funkcja Wieloosobowe__DŸwiêk_Efekt_Utwórz().

//Funkcja Wieloosobowe__Efekt_Odczytaj_Jeden().
procedure TStatki_Form.Wieloosobowe__Efekt_Odczytaj_Jeden( AOwner : TGLBaseSceneObject; efekt_rodzaj_f : TEfekt_Rodzaj; x_f, y_f, z_f : real; amunicja_f : TAmunicja; czas_trwania_f, czas_trwania_efekt_dodatkowy_f : Int64 );
var
  i : integer;
  wieloosobowe__efekt_r_l : TObiekty_Wieloosobowe__Efekt_r;
begin

  if not czy_serwer_g then
    Exit;


  if    ( AOwner <> nil )
    and ( AOwner is TStatek ) then
    wieloosobowe__efekt_r_l.id_statek_ef__owo := TStatek(AOwner).id_statek
  else//if    ( AOwner <> nil ) (...)
    wieloosobowe__efekt_r_l.id_statek_ef__owo := -1; // Scena.


  wieloosobowe__efekt_r_l.czas_trwania__owo := czas_trwania_f;
  wieloosobowe__efekt_r_l.czas_trwania_efekt_dodatkowy__owo := czas_trwania_efekt_dodatkowy_f;

  wieloosobowe__efekt_r_l.dŸwiêk_efekt_rodzaj_owo := der_Brak;
  wieloosobowe__efekt_r_l.efekt_rodzaj__owo := efekt_rodzaj_f;

  wieloosobowe__efekt_r_l.pozycja_ef__owo.X := x_f;
  wieloosobowe__efekt_r_l.pozycja_ef__owo.Y := y_f;
  wieloosobowe__efekt_r_l.pozycja_ef__owo.Z := z_f;

  wieloosobowe__efekt_r_l.wys³ane__owo := false;


  if amunicja_f <> nil then
    begin

      wieloosobowe__efekt_r_l.amunicja_rodzaj_ef__owo := amunicja_f.amunicja_rodzaj;
      wieloosobowe__efekt_r_l.obra¿enia_zadawane_wspó³czynnik_zmodyfikowany__owo := amunicja_f.obra¿enia_zadawane_wspó³czynnik_zmodyfikowany;
      wieloosobowe__efekt_r_l.skala__amunicja_owo := amunicja_f.skala__amunicja;

    end
  else//if amunicja_f <> nil then
    begin

      wieloosobowe__efekt_r_l.amunicja_rodzaj_ef__owo := Typy_Wspolne.ar_Brak;
      wieloosobowe__efekt_r_l.obra¿enia_zadawane_wspó³czynnik_zmodyfikowany__owo := 1;
      wieloosobowe__efekt_r_l.skala__amunicja_owo := 1;

    end;
  //---//if amunicja_f <> nil then

  Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__rekord_efekt_c, -99, wieloosobowe__efekt_r_l, true );

  Exit;
  // Efekt wysy³any jako tabela.

  i := Length( wieloosobowe__efekt_t );
  SetLength( wieloosobowe__efekt_t, i + 1 );


  if    ( AOwner <> nil )
    and ( AOwner is TStatek ) then
    wieloosobowe__efekt_t[ i ].id_statek_ef__owo := TStatek(AOwner).id_statek
  else//if    ( AOwner <> nil ) (...)
    wieloosobowe__efekt_t[ i ].id_statek_ef__owo := -1; // Scena.


  wieloosobowe__efekt_t[ i ].czas_trwania__owo := czas_trwania_f;
  wieloosobowe__efekt_t[ i ].czas_trwania_efekt_dodatkowy__owo := czas_trwania_efekt_dodatkowy_f;

  wieloosobowe__efekt_t[ i ].dŸwiêk_efekt_rodzaj_owo := der_Brak;
  wieloosobowe__efekt_t[ i ].efekt_rodzaj__owo := efekt_rodzaj_f;

  wieloosobowe__efekt_t[ i ].pozycja_ef__owo.X := x_f;
  wieloosobowe__efekt_t[ i ].pozycja_ef__owo.Y := y_f;
  wieloosobowe__efekt_t[ i ].pozycja_ef__owo.Z := z_f;

  wieloosobowe__efekt_t[ i ].wys³ane__owo := false;


  if amunicja_f <> nil then
    begin

      wieloosobowe__efekt_t[ i ].amunicja_rodzaj_ef__owo := amunicja_f.amunicja_rodzaj;
      wieloosobowe__efekt_t[ i ].obra¿enia_zadawane_wspó³czynnik_zmodyfikowany__owo := amunicja_f.obra¿enia_zadawane_wspó³czynnik_zmodyfikowany;
      wieloosobowe__efekt_t[ i ].skala__amunicja_owo := amunicja_f.skala__amunicja;

    end
  else//if amunicja_f <> nil then
    begin

      wieloosobowe__efekt_t[ i ].amunicja_rodzaj_ef__owo := Typy_Wspolne.ar_Brak;
      wieloosobowe__efekt_t[ i ].obra¿enia_zadawane_wspó³czynnik_zmodyfikowany__owo := 1;
      wieloosobowe__efekt_t[ i ].skala__amunicja_owo := 1;

    end;
  //---//if amunicja_f <> nil then

end;//---//Funkcja Wieloosobowe__Efekt_Odczytaj_Jeden().

//Funkcja Wieloosobowe__Log_Wypisz().
procedure TStatki_Form.Wieloosobowe__Log_Wypisz( const napis_f : string; const wyró¿nij_f : boolean = false );
var
  wieloosobowe_powiadomienie_l : TWieloosobowe_Powiadomienie;
begin

  wieloosobowe_powiadomienie_l := TWieloosobowe_Powiadomienie.Create();
  wieloosobowe_powiadomienie_l.powiadomienie_treœæ := napis_f;
  wieloosobowe_powiadomienie_l.wyró¿nij := wyró¿nij_f;
  wieloosobowe_powiadomienie_l.zt_strings := Log_Memo.Lines;
  wieloosobowe_powiadomienie_l.zt_page_control := PageControl1;
  wieloosobowe_powiadomienie_l.zt_tab_sheet := Log_TabSheet;

  wieloosobowe_powiadomienie_l.Notify();

  // Bez Free().

end;//---//Funkcja Wieloosobowe__Log_Wypisz().

//Funkcja Wieloosobowe__Odczytaj().
function TStatki_Form.Wieloosobowe__Odczytaj( const io_handler_f : IdIOHandler.TIdIOHandler; const komenda_udp_f : string; const id_context_f : TIdContext; const id_socket_handle_f : TIdSocketHandle ) : string;

  //Funkcja Strumieñ_Napis_Odczytaj() w Wieloosobowe__Odczytaj().
  function Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_f : TMemoryStream ) : string;
  var
    i,
    j
      : integer;
    zt_wieloosobowe_string : TWieloosobowe_String;
  begin

    strumieñ_pamiêci_f.Read(  i, SizeOf( i )  );

    Result := '';

    for j := 1 to i do
      begin

        zt_wieloosobowe_string := '';
        strumieñ_pamiêci_f.Read( zt_wieloosobowe_string, wieloosobowe_string__rozmiar_c );
        Result := Result + zt_wieloosobowe_string;

      end;
    //---//for j := 0 to i do


    Result := IdDecoderMIME1.DecodeString( Result, IdGlobal.IndyUTF8Encoding  ); // Znaki lokalne (kanji) wysy³a³y siê jako znaki zapytania.

  end;//---//Funkcja Strumieñ_Napis_Odczytaj() w Wieloosobowe__Odczytaj().

var
  ztb,
  czy_udp_l
    : boolean;
  i,
  j,
  k,
  peer_port__nadawca_l,
  strumieñ_rozmiar
    : integer;
  ztdu : double;
  zts,
  komenda_l
    : string;
  pokój_rozmów_r_l : TPokój_Rozmów_r;
  zt_tcp_klient_dane : TTCP_Klient_Dane;
  komunikacja_rekord_testowy_2_r_l : TKomunikacja_Rekord_Testowy_2_r; // Ze zmienn¹ lokaln¹ lepiej dzia³a (?). //???
  wieloosobowe__efekt_r_l : TObiekty_Wieloosobowe__Efekt_r;
  wieloosobowe__statek_cel_wspó³rzêdne_r_l : TObiekty_Wieloosobowe__Statek_Cel_Wspó³rzêdne_r;
  wieloosobowe__statek_klawisze_obs³uga_r_l : TObiekty_Wieloosobowe__Statek_Klawisze_Obs³uga_r;
  strumieñ_pamiêci_l : TMemoryStream;
  zt_id_bytes : TIdBytes;
begin//Funkcja Wieloosobowe__Odczytaj().

  Result := '';


  if    (
             ( io_handler_f = nil )
          or (  not Assigned( io_handler_f )  )
        )
    and ( Trim( komenda_udp_f ) = ''  ) then
    Exit;


  if    ( io_handler_f <> nil )
    and (  Assigned( io_handler_f )  ) then
    czy_udp_l := false
  else//if    ( io_handler_f <> nil ) (...)
    czy_udp_l := true;


  if not czy_udp_l then
    komenda_l := io_handler_f.ReadLn( IdGlobal.IndyTextEncoding_UTF8 ) // W XE 3 IdGlobal.TIdTextEncoding.UTF8.
  else//if not czy_udp_l then
    komenda_l := komenda_udp_f;


  if id_context_f <> nil then
    begin

      zts := 'TCP ';
      zts := zts + id_context_f.Binding.PeerIP; // 127.0.0.1
      zts := zts + '; ' + IntToStr( id_context_f.Binding.PeerPort ); // 62951 - Niepowtarzalny dla klientów numer.
      zts := zts + '; ' + IntToStr( id_context_f.Binding.Port ); // 3500
      zts := zts + '; ' + komenda_l;

      //Wieloosobowe__Log_Wypisz( zts );

    end
  else//if id_context_f <> nil then
  if id_socket_handle_f <> nil then
    begin

      zts := 'UDP ';
      zts := zts + id_socket_handle_f.PeerIP; // 127.0.0.1
      zts := zts + '; ' + IntToStr( id_socket_handle_f.PeerPort ); // 62951 - Niepowtarzalny dla klientów numer.
      zts := zts + '; ' + IntToStr( id_socket_handle_f.Port ); // 3500
      zts := zts + '; ' + komenda_l;

      //Wieloosobowe__Log_Wypisz( zts );

    end;
  //---//if id_socket_handle_f <> nil then


  if   ( komenda_l = wieloosobowe__komenda__gra__dane_wys³ane_c )
    or ( komenda_l = wieloosobowe__komenda__gra__mg³a_c )
    or ( komenda_l = wieloosobowe__komenda__gra__morze_wzburzenie_c )
    or ( komenda_l = wieloosobowe__komenda__gra__noc_c )
    or ( komenda_l = wieloosobowe__komenda__gra__rozpocznij_c )
    or ( komenda_l = wieloosobowe__komenda__gra__serwer_czas_wyœlij_c )
    or ( komenda_l = wieloosobowe__komenda__gra__statystyki_wyœlij_c )
    or ( komenda_l = wieloosobowe__komenda__gra__wiatr_c )
    or ( komenda_l = wieloosobowe__komenda__gra__wspó³czynnik_prêdkoœci_c )
    or ( komenda_l = wieloosobowe__komenda__gra__wspó³czynnik_trudnoœci_c )
    or ( komenda_l = wieloosobowe__komenda__gra__wspó³czynniki_inne_c )
    or ( komenda_l = wieloosobowe__komenda__gra__zakoñcz_c )
    or ( komenda_l = wieloosobowe__komenda__gracz_gotowoœæ_c )
    or ( komenda_l = wieloosobowe__komenda__gracz_lista_odœwie¿_c )
    or ( komenda_l = wieloosobowe__komenda__has³o__sprawdŸ_c )
    or ( komenda_l = wieloosobowe__komenda__identyfikator__nadaj_c )
    or ( komenda_l = wieloosobowe__komenda__identyfikator__przypomnij_c )
    or ( komenda_l = wieloosobowe__komenda__identyfikator__zapamiêtaj_c )
    or ( komenda_l = wieloosobowe__komenda__informacja_dodatkowa_dodaj_c )
    or ( komenda_l = wieloosobowe__komenda__odbierz__dŸwiêk_efekt_c )
    or ( komenda_l = wieloosobowe__komenda__odbierz__gracz__nazwa_c )
    or ( komenda_l = wieloosobowe__komenda__odbierz__l¹d__definicja_c )
    or ( komenda_l = wieloosobowe__komenda__odbierz__l¹d__trafienie_c )
    or ( komenda_l = wieloosobowe__komenda__odbierz__prymitywy_definicja_c )
    or ( komenda_l = wieloosobowe__komenda__odbierz__rekord_amunicja_c )
    or ( komenda_l = wieloosobowe__komenda__odbierz__rekord_efekt_c )
    or ( komenda_l = wieloosobowe__komenda__odbierz__rekord_pokój_rozmów_r_c )
    or ( komenda_l = wieloosobowe__komenda__odbierz__rekord_statki_c )
    or ( komenda_l = wieloosobowe__komenda__odbierz__rekord_statki__wysy³ane_rzadziej_c )
    or ( komenda_l = wieloosobowe__komenda__odbierz__statek__czas_do_zatoniêcia_c )
    or ( komenda_l = wieloosobowe__komenda__odbierz__statki_definicje_c )
    or ( komenda_l = wieloosobowe__komenda__pauza_c )
    or ( komenda_l = wieloosobowe__komenda__schemat_samolot_zmieñ_c )
    //or ( komenda_l = wieloosobowe__komenda__serwer_wy³¹cza_siê_c )
    or ( komenda_l = wieloosobowe__komenda__statek__cel_wspó³rzêdne_c )
    or ( komenda_l = wieloosobowe__komenda__statek__klawisze_obs³uga_c )
    or ( komenda_l = wieloosobowe__komenda__statek__lotniskowiec__samoloty_wszystkie__punkty_¿ycia_zero_c )
    or ( komenda_l = wieloosobowe__komenda__statek__przywróæ_do_gry_c )
    or ( komenda_l = wieloosobowe__komenda__statek__si__samolot_gracza__l¹duj_na_lotniskowcu_gracza_c )
    or ( komenda_l = wieloosobowe__komenda__statek__sos_nadaje_c )
    or ( komenda_l = wieloosobowe__komenda__statek__syrena_okrêtowa_klient_nadaje_c )
    or ( komenda_l = wieloosobowe__komenda__udp__klient_po³¹czony_nadal_c )
    or ( komenda_l = wieloosobowe__komenda__odbierz__rekord_komunikacja_rekord_testowy_r_c )
    or ( komenda_l = wieloosobowe__komenda__odbierz__rekord_komunikacja_rekord_testowy_2_r_c ) then
    begin

      {$region 'Odczytuje dane.'}
      // Rozmiar strumienia.
      if not czy_udp_l then
        zts := io_handler_f.ReadLn( IdGlobal.IndyTextEncoding_UTF8 )
      else//if not czy_udp_l then
        begin

          i := 0;

          if czy_serwer_g then
            zts := IdUDPServer1.ReceiveString( -1, IdGlobal.IndyTextEncoding_UTF8 )
          else//if czy_serwer_g then
            zts := IdUDPClient1.ReceiveString( -1, IdGlobal.IndyTextEncoding_UTF8 );

        end;
      //---//if not czy_udp_l then


      if id_context_f <> nil then
        peer_port__nadawca_l := id_context_f.Binding.PeerPort
      else//if id_context_f <> nil then
      if id_socket_handle_f <> nil then
        peer_port__nadawca_l := id_socket_handle_f.PeerPort
      else//if id_socket_handle_f <> nil then
        peer_port__nadawca_l := -99;


      try
        strumieñ_rozmiar := StrToInt( zts );
      except
        strumieñ_rozmiar := 0;

        //zts := 'B³êdny rozmiar strumienia od (PeerPort) ';

        //if id_context_f <> nil then
        //  zts := zts + IntToStr( id_context_f.Binding.PeerPort )
        //else//if id_context_f <> nil then
        //if id_socket_handle_f <> nil then
        //  zts := zts + IntToStr( id_socket_handle_f.PeerPort );

        zts := ' (' + zts + ').';

        if czy_udp_l then
          zts := ' UDP' + zts
        else//if czy_udp_l then
          zts := ' TCP' + zts;

        zts := t³umaczenie_komunikaty_r.komunikat__b³êdny_rozmiar_strumienia_od__PeerPort_ + ' ' + IntToStr( peer_port__nadawca_l ) + zts;

        Log_Wypisz( zts, false );
      end;
      //---//try

      if    ( czy_udp_l )
        and ( strumieñ_rozmiar > 0 ) then
        begin

          SetLength( zt_id_bytes, strumieñ_rozmiar ); //???  IdUDPClient1.BufferSize // Najlepiej przesy³aæ informacjê wielkoœæ wysy³anego (do odebrania) strumienia.

          if czy_serwer_g then
            i := IdUDPServer1.ReceiveBuffer( zt_id_bytes ) // Nie oczekuje na dane (przechodzi dalej, nie zatrzymuje siê tutaj).
          else//if czy_serwer_g then
            i := IdUDPClient1.ReceiveBuffer( zt_id_bytes ); // Nie oczekuje na dane (przechodzi dalej, nie zatrzymuje siê tutaj).

        end;
      //---//if    ( czy_udp_l ) (...)


      //if    ( strumieñ_rozmiar > 0 )
      //  and (
      //           ( not czy_udp_l )
      //        or (
      //                 ( czy_udp_l )
      //             and ( i > 0 )
      //           )
      //      ) then
      if    (
                 ( not czy_udp_l )
              or (
                       ( czy_udp_l )
                   and ( i > 0 )
                 )
            ) then
        begin

          strumieñ_pamiêci_l := TMemoryStream.Create();


          if strumieñ_rozmiar > 0 then
            if not czy_udp_l then
              begin

                io_handler_f.ReadStream( strumieñ_pamiêci_l, strumieñ_rozmiar ); // Najlepiej przesy³aæ informacjê wielkoœæ wysy³anego (do odebrania) strumienia.

              end
            else//if not czy_udp_l then
              begin

                //SetLength( zt_id_bytes, strumieñ_rozmiar ); //???  IdUDPClient1.BufferSize // Najlepiej przesy³aæ informacjê wielkoœæ wysy³anego (do odebrania) strumienia.
                //
                //i := IdUDPClient1.ReceiveBuffer( zt_id_bytes ); // Nie oczekuje na dane (przechodzi dalej, nie zatrzymuje siê tutaj).

                if i > 0 then
                  IdGlobal.WriteTIdBytesToStream( strumieñ_pamiêci_l, zt_id_bytes );

              end;
            //---//if not czy_udp_l then


          strumieñ_pamiêci_l.Position := 0;

//          strumieñ_pamiêci_l.Read( rekord_r, strumieñ_rozmiar ); // Najlepiej przesy³aæ informacjê wielkoœæ wysy³anego (do odebrania) strumienia.
          //strumieñ_pamiêci_l.Read( rekord_r_t, strumieñ_rozmiar );
        {$endregion 'Odczytuje dane.'}

          {$region 'Przetwarza odczytane dane.'}
          if komenda_l = wieloosobowe__komenda__gra__dane_wys³ane_c then
            begin

              if czy_klient_g then
                begin

                  // Tylko klient odczytuje komunikat o zakoñczeniu wysy³ania podstawowych danych gry przez serwer.

                  Statek__Utwórz_BitBtnClick( nil );


                  Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__dane_wys³ane_c, -99, '' ); // Klient wysy³a potwierdzenie otrzymania danych.

                end
              else//if czy_klient_g then
              if czy_serwer_g then
                begin

                  // Tylko serwer odczytuje potwierdzenie, ¿e klient odebra³ dane.

                  zt_tcp_klient_dane := tcp_klienci_lista_g.ZnajdŸ_Peer_Port( peer_port__nadawca_l );

                  if zt_tcp_klient_dane <> nil then
                    begin

                      zt_tcp_klient_dane.dane_wys³ane__kd := true;

                      Gracze_Lista_Odœwie¿();

                      Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gracz_lista_odœwie¿_c, -99, '' );

                    end;
                  //---//if zt_tcp_klient_dane <> nil then

                end;
              //---//if czy_serwer_g then

            end
          else//if komenda_l = wieloosobowe__komenda__gra__dane_wys³ane_c then
          if komenda_l = wieloosobowe__komenda__gra__mg³a_c then
            begin

              if czy_klient_g then
                begin

                  // Tylko klient odczytuje komunikat o wspó³czynniku mg³y.

                  zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                  try
                    Mg³a_SpinEdit.Value := StrToInt( zts );
                  except
                    Log_Wypisz( t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_mg³a + ': ' + zts + '.', false );
                  end;
                  //---//try

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__gra__mg³a_c then
          if komenda_l = wieloosobowe__komenda__gra__morze_wzburzenie_c then
            begin

              if czy_klient_g then
                begin

                  // Tylko klient odczytuje komunikat o wspó³czynniku wzburzenia morza.

                  zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                  try
                    Morze_Wzburzenie_SpinEdit.Value := StrToInt( zts );
                  except
                    Log_Wypisz( t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_morze_wzburzenie + ': ' + zts + '.', false );
                  end;
                  //---//try

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__gra__morze_wzburzenie_c then
          if komenda_l = wieloosobowe__komenda__gra__noc_c then
            begin

              if czy_klient_g then
                begin

                  // Tylko klient odczytuje komunikat o wspó³czynniku nocy.

                  zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                  try
                    Noc_SpinEdit.Value := StrToInt( zts );
                  except
                    Log_Wypisz( t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_noc + ': ' + zts + '.', false );
                  end;
                  //---//try

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__gra__noc_c then
          if komenda_l = wieloosobowe__komenda__gra__rozpocznij_c then
            begin

              if czy_klient_g then
                begin

                  // Tylko klient odczytuje komunikat o rozpoczêciu gry.

                  if not IdUDPClient1.Connected then
                    begin

                      Gracz_Gotowoœæ_Tak_BitBtn.Enabled := false;
                      Gracz_Gotowoœæ_Nie_BitBtn.Enabled := false;

                      Interfejs_Aktywnoœæ_Ustaw__Grupa_Komponentów( Statek_GroupBox, false );


                      Elementy_Gry_Zwolnij();


                      IdUDPClient1.Host := Serwer_Adres_IP_Edit.Text;
                      IdUDPClient1.Port := Serwer_Port_SpinEdit.Value;
                      IdUDPClient1.ReceiveTimeout := 5; //???

                      IdUDPClient1.Connect();

                    end;
                  //---//if not IdUDPClient1.Connected then



                  udp_data_czas_sprawdzanie_po³¹czeñ_ostatnie_g := Now();
                  //udp_klienci_lista_g.Dodaj( '0', 0, Gracz_Identyfikator() ); // Przechowa dane o (próbie) swoim ostatnim kontakcie z serwerem.


                  Klient_IdUDP_Czyta_Timer.Enabled := true;
                  Klient_Wysy³a_Timer.Enabled := true;

                  klient_pierwsze_ustawienie_kamery_g := true;


                  //SetLength( prymitywy_lista_t, 0 ); // Klient szybciej rozpoczyna grê ni¿ odbierze wszystkie dane.


                  Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__udp__klient_po³¹czony_nadal_c, -99, '', true );


                  Radar__Wyczyœæ( rcz_Wszystko );

                  L¹d__Utwórz( -99 ); // Klient szybciej rozpoczyna grê ni¿ odbierze wszystkie dane.

                  Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__gra_start );

                  DŸwiêki__Komunikat__Utwórz_Jeden( dkr_Start, 0 );

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__gra__rozpocznij_c then
          if komenda_l = wieloosobowe__komenda__gra__serwer_czas_wyœlij_c then
            begin

              if czy_klient_g then
                begin

                  // Tylko klient odczytuje dane czasie serwera.

                  strumieñ_pamiêci_l.Read(  klient__cadencer_current_time__korekta_o_czas_serwera_g, SizeOf( klient__cadencer_current_time__korekta_o_czas_serwera_g )  );

                  klient__cadencer_current_time__korekta_o_czas_serwera_g := klient__cadencer_current_time__korekta_o_czas_serwera_g - Gra_GLCadencer.CurrentTime;

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__gra__serwer_czas_wyœlij_c then
          if komenda_l = wieloosobowe__komenda__gra__statystyki_wyœlij_c then
            begin

              if czy_klient_g then
                begin

                  // Tylko klient odczytuje dane statystyk.

                  SetLength( gra_statystyki_r_t, 0 );

                  while strumieñ_pamiêci_l.Position < strumieñ_pamiêci_l.Size do
                    begin

                      i := Length( gra_statystyki_r_t );
                      SetLength( gra_statystyki_r_t, i + 1 );

                      strumieñ_pamiêci_l.Read( gra_statystyki_r_t[ i ], obiekty_wieloosobowe__gra_statystyki_r_rozmiar_c );

                    end;
                  //---//while strumieñ_pamiêci_l.Position < strumieñ_pamiêci_l.Size do


                  Gra_Statystyki_Wypisz( Statystyki_W_Logu_Wypisz_CheckBox.Checked );

                end
              else//if czy_klient_g then
              if czy_serwer_g then
                begin

                  // Tylko serwer wysy³a dane statystyk.

                  Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__statystyki_wyœlij_c, peer_port__nadawca_l, '' );

                end;
              //---//if czy_serwer_g then

            end
          else//if komenda_l = wieloosobowe__komenda__gra__statystyki_wyœlij_c then
          if komenda_l = wieloosobowe__komenda__gra__wiatr_c then
            begin

              if czy_klient_g then
                begin

                  // Tylko klient odczytuje komunikat o parametrach wiatru.

                  strumieñ_pamiêci_l.Read(  wiatr_vector_g, SizeOf( GLS.VectorTypes.TVector4d )  );

                  Wiatr__Si³a_SpinEditChange( nil );
                  Wiatr__Wylicz();

                  //zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );
                  //
                  //i := Pos( dŸwiêki__komunikat__separator_c, zts );
                  //
                  //if i > 0 then
                  //  begin
                  //
                  //    try
                  //      wiatr_vector_g.X := String_To__Float(  Copy( zts, 1, i - 1 )  );
                  //    except
                  //      Log_Wypisz( t³umaczenie_komunikaty_r.xNx__komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_wiatru + ' X: ' + zts + '.', false );
                  //    end;
                  //    //---//try
                  //
                  //    Delete( zts, 1, i );
                  //
                  //
                  //    i := Pos( dŸwiêki__komunikat__separator_c, zts );
                  //
                  //    if i > 0 then
                  //      begin
                  //
                  //        try
                  //          wiatr_vector_g.Y := String_To__Float(  Copy( zts, 1, i - 1 )  );
                  //        except
                  //          Log_Wypisz( t³umaczenie_komunikaty_r.xNx__komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_wiatru + ' Y: ' + zts + '.', false );
                  //        end;
                  //        //---//try
                  //
                  //        Delete( zts, 1, i );
                  //
                  //
                  //        i := Pos( dŸwiêki__komunikat__separator_c, zts );
                  //
                  //        if i > 0 then
                  //          begin
                  //
                  //            try
                  //              wiatr_vector_g.Z := String_To__Float(  Copy( zts, 1, i - 1 )  );
                  //            except
                  //              Log_Wypisz( t³umaczenie_komunikaty_r.xNx__komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_wiatru + ' Z: ' + zts + '.', false );
                  //            end;
                  //            //---//try
                  //
                  //            Delete( zts, 1, i );
                  //
                  //
                  //            i := Pos( dŸwiêki__komunikat__separator_c, zts );
                  //
                  //            if i > 0 then
                  //              begin
                  //
                  //                try
                  //                  wiatr_vector_g.W := String_To__Float(  Copy( zts, 1, i - 1 )  );
                  //                except
                  //                  Log_Wypisz( t³umaczenie_komunikaty_r.xNx__komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_wiatru + ' W: ' + zts + '.', false );
                  //                end;
                  //                //---//try
                  //
                  //                Delete( zts, 1, i );
                  //
                  //
                  //                Wiatr__Si³a_SpinEditChange( nil );
                  //                Wiatr__Wylicz();
                  //
                  //              end
                  //            else//if i > 0 then
                  //              Log_Wypisz( t³umaczenie_komunikaty_r.xNx__komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_wiatru + ' W (0): ' + zts + '.', false );
                  //
                  //          end
                  //        else//if i > 0 then
                  //          Log_Wypisz( t³umaczenie_komunikaty_r.xNx__komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_wiatru + ' Z (0): ' + zts + '.', false );
                  //
                  //      end
                  //    else//if i > 0 then
                  //      Log_Wypisz( t³umaczenie_komunikaty_r.xNx__komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_wiatru + ' Y (0): ' + zts + '.', false );
                  //
                  //  end
                  //else//if i > 0 then
                  //  Log_Wypisz( t³umaczenie_komunikaty_r.xNx__komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_wiatru + ' X (0): ' + zts + '.', false );

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__gra__wiatr_c then
          if komenda_l = wieloosobowe__komenda__gra__wspó³czynnik_prêdkoœci_c then
            begin

              if czy_klient_g then
                begin

                  // Tylko klient odczytuje komunikat o wspó³czynniku prêdkoœci gry, wzburzeniu morza.

                  zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                  try
                    Gra_Wspó³czynnik_Prêdkoœci_SpinEdit.Value := StrToInt( zts );
                  except
                    Log_Wypisz( t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_prêdkoœci_gry + ': ' + zts + '.', false );
                  end;
                  //---//try

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__gra__wspó³czynnik_prêdkoœci_c then
          if komenda_l = wieloosobowe__komenda__gra__wspó³czynnik_trudnoœci_c then
            begin

              if czy_klient_g then
                begin

                  // Tylko klient odczytuje komunikat o wspó³czynniku trudnoœci gry.

                  zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                  try
                    Gra_Wspó³czynnik_Trudnoœci_SpinEdit.Value := StrToInt( zts );
                  except
                    Log_Wypisz( t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_wartoœæ_wspó³czynnika_trudnoœci_gry + ': ' + zts + '.', false );
                  end;
                  //---//try

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__gra__wspó³czynnik_trudnoœci_c then
          if komenda_l = wieloosobowe__komenda__gra__wspó³czynniki_inne_c then
            begin

              if czy_klient_g then
                begin

                  // Tylko klient odczytuje informacje o innych wspó³czynnikach gry.

                  strumieñ_pamiêci_l.Read(  fale__wysokoœæ_bazowa__serwer_g, SizeOf ( fale__wysokoœæ_bazowa__serwer_g )  );


                  strumieñ_pamiêci_l.Read(  i, SizeOf ( integer )  ); // Tylko informacja o nazwie wybranego na serwerze l¹du (bez danych l¹du).

                  if    ( i >= 0 )
                    and ( L¹d_ComboBox.Items.Count > 0 )
                    and ( i < L¹d_ComboBox.Items.Count ) then
                    begin

                      L¹d_ComboBox.ItemIndex := i; // Nie wywo³a L¹d_ComboBoxChange().
                      L¹d_ComboBoxChange( nil );

                    end;
                  //---//if    ( i >= 0 ) (...)


                  strumieñ_pamiêci_l.Read(  ztb, SizeOf ( boolean )  );
                  L¹dowanie_U³atwione_CheckBox.Checked := ztb;


                  strumieñ_pamiêci_l.Read(  ztb, SizeOf ( boolean )  );

                  if ztb then
                    Projektowy_Tryb_CheckBox.Font.Style := [ fsUnderline ]
                  else//if ztb then
                    Projektowy_Tryb_CheckBox.Font.Style := [];


                  strumieñ_pamiêci_l.Read(  ztb, SizeOf ( boolean )  );
                  Projektowy_Tryb__Grawitacja_Wy³¹cz_CheckBox.Checked := ztb;

                  strumieñ_pamiêci_l.Read(  i, SizeOf ( integer )  );
                  Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBox.ItemIndex := i; // Nie wywo³a Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBoxChange().

                  strumieñ_pamiêci_l.Read(  ztb, SizeOf ( boolean )  );
                  SI__Patrol_Blisko_Zostaje_CheckBox.Checked := ztb;

                  strumieñ_pamiêci_l.Read(  ztb, SizeOf ( boolean )  );
                  SI__P³ywa_CheckBox.Checked := ztb;

                  strumieñ_pamiêci_l.Read(  ztb, SizeOf ( boolean )  );
                  SI__Strzela_CheckBox.Checked := ztb;


                  strumieñ_pamiêci_l.Read(  i, SizeOf ( integer )  );

                  if    ( i >= 0 )
                    and ( Statki_Pozycje_Pocz¹tkowe_ComboBox.Items.Count > 0 )
                    and ( i < Statki_Pozycje_Pocz¹tkowe_ComboBox.Items.Count ) then
                    begin

                      Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex := i; // Nie wywo³a Statki_Pozycje_Pocz¹tkowe_ComboBoxChange().
                      Statki_Pozycje_Pocz¹tkowe_ComboBoxChange( nil );

                    end
                  else//if    ( i >= 0 ) (...)
                    if i = -1 then
                      Statki_Pozycje_Pocz¹tkowe__Brak_BitBtnClick( nil );


                  strumieñ_pamiêci_l.Read(  ztb, SizeOf ( boolean )  );
                  Statki_Przywracaj_Do_Gry_CheckBox.Checked := ztb;

                  strumieñ_pamiêci_l.Read(  ztb, SizeOf ( boolean )  ); // Sonarowe_U³atwienie__Klient_Zmieniaæ_Mo¿e_CheckBox.Checked.
                  Sonarowe_U³atwienie_CheckBox.Enabled := ztb;
                  Sonarowe_U³atwienie__Klient_Zmieniaæ_Mo¿e_CheckBox.Checked := Sonarowe_U³atwienie_CheckBox.Enabled;


                  strumieñ_pamiêci_l.Read(  ztb, SizeOf ( boolean )  );

                  if not Sonarowe_U³atwienie_CheckBox.Enabled then
                    Sonarowe_U³atwienie_CheckBox.Checked := ztb;


                  strumieñ_pamiêci_l.Read(  ztb, SizeOf ( boolean )  );
                  Wiatr_CheckBox.Checked := ztb;

                  strumieñ_pamiêci_l.Read(  ztb, SizeOf ( boolean )  );
                  Wiatr__Wp³yw_Na_Rozgrywkê_CheckBox.Checked := ztb;

                  strumieñ_pamiêci_l.Read(  ztb, SizeOf ( boolean )  );
                  Zak³ócanie__Dozwolone_CheckBox.Checked := ztb;

                  strumieñ_pamiêci_l.Read(  ztb, SizeOf ( boolean )  );
                  Zak³ócanie__Graczy_Nie_SI_Dozwolone_CheckBox.Checked := ztb;


                  Statki__Punkty_¯ycia_WskaŸnik__Efekty_Tryb_Ustaw();
                  Morze_Wzburzenie_SpinEditChange( nil );


                  mapa__klient_wartoœæ_g := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );
                  Mapa_Label.Caption := t³umaczenie_komunikaty_r.s³owo__mapa + ': ' + mapa__klient_wartoœæ_g + '.';


                  statki_pozycje_pocz¹tkowe__klient_wartoœæ_g := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                  if statki_pozycje_pocz¹tkowe__klient_wartoœæ_g = wieloosobowe__komenda__pozycje_pocz¹tkowe_statków__wed³ug_mapy_c then
                    begin

                      statki_pozycje_pocz¹tkowe__klient_wartoœæ__wed³ug_mapy_g := true;
                      statki_pozycje_pocz¹tkowe__klient_wartoœæ_g := t³umaczenie_komunikaty_r.komunikat__pozycje_pocz¹tkowe_statków__wed³ug_mapy;

                    end
                  else//if statki_pozycje_pocz¹tkowe__klient_wartoœæ_g = wieloosobowe__komenda__pozycje_pocz¹tkowe_statków__wed³ug_mapy_c then
                    statki_pozycje_pocz¹tkowe__klient_wartoœæ__wed³ug_mapy_g := false;

                  Statki_Pozycje_Pocz¹tkowe_Label.Caption := t³umaczenie_komunikaty_r.komunikat__pozycje_pocz¹tkowe_statków + ': ' + statki_pozycje_pocz¹tkowe__klient_wartoœæ_g + '.';

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__gra__wspó³czynniki_inne_c then
          if komenda_l = wieloosobowe__komenda__gra__zakoñcz_c then
            begin

              if czy_klient_g then
                begin

                  // Tylko klient odczytuje komunikat o zakoñczeniu gry.

                  Klient_IdUDP_Czyta_Timer.Enabled := false;
                  Klient_Wysy³a_Timer.Enabled := false;


                  if IdUDPClient1.Connected then
                    IdUDPClient1.Disconnect();


                  //udp_klienci_lista_g.Usuñ_Wszystkich();


                  Gracz_Gotowoœæ_BitBtnClick( Gracz_Gotowoœæ_Nie_BitBtn );

                  //Gracz_Gotowoœæ_Tak_BitBtn.Enabled := true;
                  //Gracz_Gotowoœæ_Nie_BitBtn.Enabled := true;

                  Interfejs_Aktywnoœæ_Ustaw__Schemat_Samolot_Zmieñ( false );

                  Interfejs_Aktywnoœæ_Ustaw__Grupa_Komponentów( Statek_GroupBox, true );


                  Elementy_Gry_Zwolnij( false );
                  Statek__Utwórz_BitBtnClick( nil );

                  Kamera_Na_Statek_Gracza_Ustaw();

                  Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__serwer_zakoñczy³_grê );

                  DŸwiêki__Komunikat__Utwórz_Jeden( dkr_Stop, 0 );

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__gra__zakoñcz_c then
          if komenda_l = wieloosobowe__komenda__gracz_gotowoœæ_c then
            begin

              zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

              if czy_serwer_g then
                begin

                  // Tylko serwer okreœla status gotowoœci.

                  if peer_port__nadawca_l <> -99 then
                    begin

                      zt_tcp_klient_dane := tcp_klienci_lista_g.ZnajdŸ_Peer_Port( peer_port__nadawca_l );

                      if zt_tcp_klient_dane <> nil then
                        begin

                          if zts = 'Tak' then
                            begin

                              // Gracz zg³asza, ¿e jest gotowy.

                              strumieñ_pamiêci_l.Read(  j, SizeOf ( integer )  );
                              zt_tcp_klient_dane.id_grupa__kd := j;

                              strumieñ_pamiêci_l.Read(  j, SizeOf ( integer )  );
                              zt_tcp_klient_dane.id_statek_schemat__kd := j;

                              strumieñ_pamiêci_l.Read(  j, SizeOf ( integer )  );
                              zt_tcp_klient_dane.id_statek__samolot_schemat__kd := j;

                              zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );


                              if tcp_klienci_lista_g.Nazwa_Niepowtarzalna( zt_tcp_klient_dane.peer_port_tcp__kd, zts ) then
                                begin

                                  zt_tcp_klient_dane.nazwa__kd := zts;
                                  zt_tcp_klient_dane.gotowy__kd := true;

                                  Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gracz_gotowoœæ_c, zt_tcp_klient_dane.peer_port_tcp__kd, 'Tak' ); // Serwer potwierdza, ¿e gracz jest gotowy.

                                end
                              else//if tcp_klienci_lista_g.Nazwa_Niepowtarzalna( zt_tcp_klient_dane.peer_port_tcp__kd, zts ) then
                                begin

                                  zt_tcp_klient_dane.gotowy__kd := false;

                                  //Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gracz_gotowoœæ_c, zt_tcp_klient_dane.peer_port_tcp__kd, 'Nie' ); // Serwer wskazuje b³¹d gotowoœci gracza.
                                  Wieloosobowe__Tekst_Wyœlij( t³umaczenie_komunikaty_r.komunikat__nazwa_gracza_powinna_byæ_niepowtarzalna, peer_port__nadawca_l );

                                end;
                              //---//if tcp_klienci_lista_g.Nazwa_Niepowtarzalna( zt_tcp_klient_dane.peer_port, zts ) then

                            end
                          else//if zts = 'Tak' then
                            begin

                              // Gracz zg³asza, ¿e nie jest gotowy.

                              zt_tcp_klient_dane.gotowy__kd := false;

                            end;
                          //---//if zts = 'Tak' then

                          Gracze_Lista_Odœwie¿();

                          Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gracz_lista_odœwie¿_c, -99, '' );

                        end;
                      //---//if zt_tcp_klient_dane <> nil then

                    end;
                  //---//if peer_port__nadawca_l <> -99 then

                end
              else//if czy_serwer_g then
              if czy_klient_g then
                begin

                  // Klient otrzymuje potwierdzenie statusu gotowoœci.

                  if zts = 'Tak' then
                    begin

                      // Status gotowoœci potwierdzony.

                      Gracz_Gotowoœæ_Nie_BitBtn.Enabled := true;
                      Gracz_Gotowoœæ_Tak_BitBtn.Enabled := false;

                      Gracz_Grupa_SpinEdit.Enabled := false;
                      Gracz_Nazwa_Edit.Enabled := false;
                      Interfejs_Aktywnoœæ_Ustaw__Grupa_Komponentów( Statek_GroupBox, false );

                    end;
                  //---//if zts = 'Tak' then

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__gracz_gotowoœæ_c then
          if komenda_l = wieloosobowe__komenda__gracz_lista_odœwie¿_c then
            begin

              if czy_serwer_g then
                Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gracz_lista_odœwie¿_c, -99, '' ) // Na zapytanie klienta serwer odsy³a aktualn¹ listê graczy.
              else//if czy_serwer_g then
              if czy_klient_g then
                begin

                  // Tylko klient odbiera listê graczy.

                  //mapa__klient_wartoœæ_g := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );
                  //Mapa_Label.Caption := t³umaczenie_komunikaty_r.s³owo__mapa + ': ' + mapa__klient_wartoœæ_g + '.';
                  //
                  //
                  //statki_pozycje_pocz¹tkowe__klient_wartoœæ_g := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );
                  //
                  //if statki_pozycje_pocz¹tkowe__klient_wartoœæ_g = wieloosobowe__komenda__pozycje_pocz¹tkowe_statków__wed³ug_mapy_c then
                  //  begin
                  //
                  //    statki_pozycje_pocz¹tkowe__klient_wartoœæ__wed³ug_mapy_g := true;
                  //    statki_pozycje_pocz¹tkowe__klient_wartoœæ_g := t³umaczenie_komunikaty_r.komunikat__pozycje_pocz¹tkowe_statków__wed³ug_mapy;
                  //
                  //  end
                  //else//if statki_pozycje_pocz¹tkowe__klient_wartoœæ_g = wieloosobowe__komenda__pozycje_pocz¹tkowe_statków__wed³ug_mapy_c then
                  //  statki_pozycje_pocz¹tkowe__klient_wartoœæ__wed³ug_mapy_g := false;
                  //
                  //Statki_Pozycje_Pocz¹tkowe_Label.Caption := t³umaczenie_komunikaty_r.komunikat__pozycje_pocz¹tkowe_statków + ': ' + statki_pozycje_pocz¹tkowe__klient_wartoœæ_g + '.';


                  tcp_klienci_lista_g.Usuñ_Wszystkich();

                  while strumieñ_pamiêci_l.Position < strumieñ_pamiêci_l.Size do
                    begin

                      zt_tcp_klient_dane := TTCP_Klient_Dane.Create();


                      strumieñ_pamiêci_l.Read(  zt_tcp_klient_dane.dane_wys³ane__kd, SizeOf( boolean )  );
                      strumieñ_pamiêci_l.Read(  zt_tcp_klient_dane.gotowy__kd, SizeOf( boolean )  );
                      strumieñ_pamiêci_l.Read(  zt_tcp_klient_dane.od³¹czony__kd, SizeOf( boolean )  );
                      strumieñ_pamiêci_l.Read(  zt_tcp_klient_dane.w_grze__kd, SizeOf( boolean )  );

                      strumieñ_pamiêci_l.Read(  zt_tcp_klient_dane.identyfikator__kd, SizeOf( integer )  );
                      strumieñ_pamiêci_l.Read(  zt_tcp_klient_dane.id_grupa__kd, SizeOf( integer )  );
                      strumieñ_pamiêci_l.Read(  zt_tcp_klient_dane.id_statek_schemat__kd, SizeOf( integer )  );
                      strumieñ_pamiêci_l.Read(  zt_tcp_klient_dane.id_statek__samolot_schemat__kd, SizeOf( integer )  );
                      strumieñ_pamiêci_l.Read(  zt_tcp_klient_dane.peer_port_tcp__kd, SizeOf( integer )  );
                      strumieñ_pamiêci_l.Read(  zt_tcp_klient_dane.peer_port_udp__kd, SizeOf( integer )  );

                      strumieñ_pamiêci_l.Read(  zt_tcp_klient_dane.data_czas__od³¹czenia__kd, SizeOf( TDateTime )  );
                      strumieñ_pamiêci_l.Read(  zt_tcp_klient_dane.data_czas__pod³¹czenia__kd, SizeOf( TDateTime )  );
                      strumieñ_pamiêci_l.Read(  zt_tcp_klient_dane.data_czas__pod³¹czenia_ostatniego__kd, SizeOf( TDateTime )  );
                      strumieñ_pamiêci_l.Read(  zt_tcp_klient_dane.data_czas__udp_kontakt__kd, SizeOf( TDateTime )  );

                      strumieñ_pamiêci_l.Read( zt_tcp_klient_dane.nazwa__kd, wieloosobowe_string__rozmiar_c );


                      tcp_klienci_lista_g.klienci_lista_list.Add( zt_tcp_klient_dane );

                    end;
                  //---//while strumieñ_pamiêci_l.Position < strumieñ_pamiêci_l.Size do


                  Gracze_Lista_Odœwie¿();

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__gracz_lista_odœwie¿_c then
          if komenda_l = wieloosobowe__komenda__has³o__sprawdŸ_c then
            begin

              if czy_klient_g then
                begin

                  // Tylko klient czeka na potwierdzenie prawid³owoœci has³a.

                  zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                  if zts = 'Tak' then
                    begin

                      // Has³o prawid³owe.

                    end
                  else//if zts = 'Tak' then
                    Wieloosobowe__Od³¹cz_BitBtnClick( nil );

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__has³o__sprawdŸ_c then
          if komenda_l = wieloosobowe__komenda__identyfikator__nadaj_c then
            begin

              if czy_serwer_g then
                begin

                  // Tylko serwer nadaje identyfikator.

                  if peer_port__nadawca_l <> -99 then
                    begin

                      zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                      if zts = Has³o_Edit.Text then
                        begin

                          zt_tcp_klient_dane := tcp_klienci_lista_g.Dodaj_Aktualizuj( peer_port__nadawca_l, -99 );

                          if zt_tcp_klient_dane <> nil then
                            begin

                              j := zt_tcp_klient_dane.identyfikator__kd;
                              zt_tcp_klient_dane.dane_wys³ane__kd := false;

                              Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__serwer_czas_wyœlij_c, peer_port__nadawca_l, '' );

                              Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__identyfikator__zapamiêtaj_c, peer_port__nadawca_l, IntToStr( j )  );

                              Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gracz_lista_odœwie¿_c, -99, '' );


                              Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__statki_definicje_c, peer_port__nadawca_l, '' );

                              for i := 0 to Length( prymitywy_lista_t ) - 1 do
                                Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__odbierz__prymitywy_definicja_c, peer_port__nadawca_l, IntToStr( i )  ); // Klient szybciej rozpoczyna grê ni¿ odbierze wszystkie dane.

                              Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__l¹d__definicja_c, peer_port__nadawca_l, '' ); // Klient szybciej rozpoczyna grê ni¿ odbierze wszystkie dane.


                              Wspó³czynniki_Gry_Informacja_Wyœlij( peer_port__nadawca_l );


                              Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__dane_wys³ane_c, peer_port__nadawca_l, '' );

                            end
                          else//if zt_tcp_klient_dane <> nil then
                            Wieloosobowe__Tekst_Wyœlij( t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_nadaæ_identyfikatora, peer_port__nadawca_l );


                          Gracze_Lista_Odœwie¿();

                        end
                      else//if zts = Has³o_Edit.Text then
                        begin

                          Wieloosobowe__Tekst_Wyœlij( t³umaczenie_komunikaty_r.komunikat__nieprawid³owe_has³o + ' (n).', peer_port__nadawca_l ); // Je¿eli najpierw roz³¹czy to potem nie ma sensu wysy³aæ komunikatu.
                          Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__has³o__sprawdŸ_c, peer_port__nadawca_l, 'Nie' );

                        end;
                      //---//if zts = Has³o_Edit.Text then

                    end;
                  //---//if peer_port__nadawca_l <> -99 then

                end;
              //---//if czy_serwer_g then

            end
          else//if komenda_l = wieloosobowe__komenda__identyfikator__nadaj_c then
          if komenda_l = wieloosobowe__komenda__identyfikator__przypomnij_c then
            begin

              if czy_serwer_g then
                begin

                  // Tylko serwer obs³uguje wys³ane przypomnienia identyfikatorów.

                  if peer_port__nadawca_l <> -99 then
                    begin

                      zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                      if zts = Has³o_Edit.Text then
                        begin

                          zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                          try
                            j := StrToInt( zts );

                            if tcp_klienci_lista_g.Dodaj_Aktualizuj( peer_port__nadawca_l, j ) = nil then
                              begin

                                Wieloosobowe__Tekst_Wyœlij( t³umaczenie_komunikaty_r.komunikat__wskazanego_identyfikatora_nie_ma_na_liœcie + ' ''' + zts + '''.', peer_port__nadawca_l );
                                Wieloosobowe__Tekst_Wyœlij( wieloosobowe__komenda__serwer_wy³¹cza_siê_c, peer_port__nadawca_l );

                              end;
                            //---//if tcp_klienci_lista_g.Dodaj_Aktualizuj( peer_port__nadawca_l, j ) = nil then

                          except
                            Wieloosobowe__Tekst_Wyœlij( t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_przypomnieæ_identyfikatora, peer_port__nadawca_l );
                            Wieloosobowe__Tekst_Wyœlij( t³umaczenie_komunikaty_r.komunikat__nieprawid³owe_has³o + ' (p1).', peer_port__nadawca_l ); // Je¿eli najpierw roz³¹czy to potem nie ma sensu wysy³aæ komunikatu.
                            Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__has³o__sprawdŸ_c, peer_port__nadawca_l, 'Nie' );
                          end;
                          //---//try

                          Gracze_Lista_Odœwie¿();

                          Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gracz_lista_odœwie¿_c, -99, '' );

                        end
                      else//if zts = Has³o_Edit.Text then
                        begin

                          Wieloosobowe__Tekst_Wyœlij( t³umaczenie_komunikaty_r.komunikat__nieprawid³owe_has³o + ' (p2).', peer_port__nadawca_l ); // Je¿eli najpierw roz³¹czy to potem nie ma sensu wysy³aæ komunikatu.
                          Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__has³o__sprawdŸ_c, peer_port__nadawca_l, 'Nie' );

                        end;
                      //---//if zts = Has³o_Edit.Text then

                    end;
                  //---//if peer_port__nadawca_l <> -99 then

                end;
              //---//if czy_serwer_g then

            end
          else//if komenda_l = wieloosobowe__komenda__identyfikator__przypomnij_c then
          if komenda_l = wieloosobowe__komenda__identyfikator__zapamiêtaj_c then
            begin

              if czy_klient_g then
                begin

                  // Tylko serwer nadaje identyfikator.

                  Wieloosobowe_Identyfikator_Edit.Text := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );
                  Wieloosobowe_Identyfikator_Gra_Label.Caption := Wieloosobowe_Identyfikator_Edit.Text;

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__identyfikator__zapamiêtaj_c then
          if komenda_l = wieloosobowe__komenda__informacja_dodatkowa_dodaj_c then
            begin

              if czy_klient_g then
                begin

                  // Tylko serwer wysy³a informacje.

                  zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                  Informacja_Dodatkowa_Dodaj( zts );

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__informacja_dodatkowa_dodaj_c then
          if komenda_l = wieloosobowe__komenda__odbierz__dŸwiêk_efekt_c then
            begin

              if czy_klient_g then
                begin

                  // Tylko klient odbiera informacje o efekcie dŸwiêkowym.

                  strumieñ_pamiêci_l.Read(  wieloosobowe__efekt_r_l.id_statek_ef__owo, SizeOf( integer )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__efekt_r_l.czas_trwania__owo, SizeOf( Int64 )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__efekt_r_l.dŸwiêk_efekt_rodzaj_owo, SizeOf( TDŸwiêk_Efekt_Rodzaj )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__efekt_r_l.pozycja_ef__owo, SizeOf( GLS.VectorTypes.TVector4d )  );

                  Wieloosobowe__DŸwiêk_Efekt_Utwórz( wieloosobowe__efekt_r_l );

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__odbierz__dŸwiêk_efekt_c then
          if komenda_l = wieloosobowe__komenda__odbierz__gracz__nazwa_c then
            begin

              if czy_serwer_g then
                begin

                  // Serwer wysy³a nazwy graczy.

                  if peer_port__nadawca_l <> -99 then
                    begin

                      zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                      if zts <> '' then
                        try
                          j := StrToInt( zts );
                        except
                          zts := '';
                        end;
                        //---//try

                      for i := 0 to Length( statki_t ) - 1 do
                        if    ( statki_t[ i ] <> nil )
                          and (
                                   ( zts = '' )
                                or ( statki_t[ i ].id_statek = j )
                              ) then
                          begin

                            Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__odbierz__gracz__nazwa_c, peer_port__nadawca_l, IntToStr( statki_t[ i ].id_statek ) + ';' + statki_t[ i ].gracz__nazwa.Text  );

                            if zts <> '' then
                              Break;

                          end;
                        //---//if    ( statki_t[ i ] <> nil ) (...)

                    end;
                  //---//if peer_port__nadawca_l <> -99 then

                end
              else//if czy_serwer_g then
              if czy_klient_g then
                begin

                  // Klient odczytuje dane o nazwach graczy.

                  zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                  i := Pos( ';', zts );

                  if i > 0 then
                    begin

                      try
                        j := StrToInt(  Copy( zts, 1, i - 1 )  );
                      except
                        zts := '';
                      end;
                      //---//try

                      if zts <> '' then
                        begin

                          Delete( zts, 1, i );

                          for i := 0 to Length( statki_t ) - 1 do
                            if    ( statki_t[ i ] <> nil )
                              and ( statki_t[ i ].id_statek = j ) then
                              begin

                                statki_t[ i ].gracz__nazwa.Text := zts;
                                Break;

                              end;
                            //---//if    ( statki_t[ i ] <> nil ) (...)

                        end;
                      //---//if j = 0 then

                    end;
                  //---//if zts <> '' then

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__odbierz__gracz__nazwa_c then
          if komenda_l = wieloosobowe__komenda__odbierz__l¹d__definicja_c then
            begin

              if czy_klient_g then
                begin

                  // Tylko klient odczytuje dane o l¹dzie.

                  l¹d_definicja_g := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                  strumieñ_pamiêci_l.Read(  i, SizeOf( integer )  );


                  L¹d__Zwolnij();
                  L¹d__Utwórz( -99 );


                  if    ( i >= 0 )
                    and ( L¹d_ComboBox.Items.Count > 0 )
                    and ( i < L¹d_ComboBox.Items.Count ) then
                    begin

                     // Ustawi nazwê wybranego l¹du na serwerze dla informacji klientów.
                     L¹d_ComboBox.ItemIndex := i; // Nie wywo³a L¹d_ComboBoxChange().
                     L¹d_ComboBoxChange( nil );

                    end;
                  //---//if    ( i >= 0 ) (...)

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__odbierz__l¹d__definicja_c then
          if komenda_l = wieloosobowe__komenda__odbierz__l¹d__trafienie_c then
            begin

              if czy_klient_g then
                begin

                  // Tylko klient odczytuje dane o zmianie punktów ¿ycia l¹du.

                  zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                  i := Pos( ';', zts );

                  if i > 0 then
                    begin

                      try
                        ztdu := String_To__Float(  Copy( zts, 1, i - 1 )  );
                        j := 0;
                      except
                        j := 1;
                      end;
                      //---//try

                      if j = 0 then
                        begin

                          Delete( zts, 1, i );
                          j := Pos( wieloosobowe__l¹d__trafienie_usuñ_c, zts );
                          zts := StringReplace( zts, wieloosobowe__l¹d__trafienie_usuñ_c, '', [ rfReplaceAll ] );

                          try
                            k := StrToInt( zts );
                          except
                            k := -1;
                          end;
                          //---//try

                          if k > 0 then
                            for i := l¹d_list.Count - 1 downto 0 do
                              if    (  Wyglad_Elementy.Identyfikator_Elementu( TGLCustomSceneObject(l¹d_list[ i ]) ) = k  )
                                and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(l¹d_list[ i ]) ) <> Wyglad_Elementy.or_DŸwiêk_Emiter  ) then
                                begin

                                  if j = 0 then
                                    L¹d__Punkty_¯ycia_Zmieñ( TGLCustomSceneObject(l¹d_list[ i ]), ztdu )
                                  else//if j = 0 then
                                    L¹d__Punkty_¯ycia_Zmieñ( TGLCustomSceneObject(l¹d_list[ i ]), ztdu, true );

                                  l¹d_zwolnij_uszkodzenia_przelicz_g := true;

                                  Break;

                                end;
                              //---//if    (  Wyglad_Elementy.Identyfikator_Elementu( TGLCustomSceneObject(l¹d_list[ i ]) ) = k  ) (...)

                        end;
                      //---//if j = 0 then

                    end;
                  //---//if i > 0 then

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__odbierz__l¹d__trafienie_c then
          if komenda_l = wieloosobowe__komenda__odbierz__prymitywy_definicja_c then
            begin

              if czy_klient_g then
                begin

                  // Tylko klient odczytuje dane o prymitywach.

                  i := Length( prymitywy_lista_t );
                  SetLength( prymitywy_lista_t, i + 1 );

                  prymitywy_lista_t[ i ].plik_nazwa__sl := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );
                  prymitywy_lista_t[ i ].treœæ__sl := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__odbierz__prymitywy_definicja_c then
          if komenda_l = wieloosobowe__komenda__odbierz__rekord_amunicja_c then
            begin

              SetLength( wieloosobowe__amunicja_t, 0 );

              while strumieñ_pamiêci_l.Position < strumieñ_pamiêci_l.Size do
                begin

                  i := Length( wieloosobowe__amunicja_t );
                  SetLength( wieloosobowe__amunicja_t, i + 1 );

                  strumieñ_pamiêci_l.Read( wieloosobowe__amunicja_t[ i ], obiekty_wieloosobowe__amunicja_r__rozmiar_c );

                end;
              //---//while strumieñ_pamiêci_l.Position < strumieñ_pamiêci_l.Size do

            end
          else//if komenda_l = wieloosobowe__komenda__odbierz__rekord_amunicja_c then
          if komenda_l = wieloosobowe__komenda__odbierz__rekord_efekt_c then
            begin

              strumieñ_pamiêci_l.Read( wieloosobowe__efekt_r_l, obiekty_wieloosobowe__efekt_r__rozmiar_c );
              Wieloosobowe__Trafienia_Efekt_Utwórz( wieloosobowe__efekt_r_l );

              // Efekt wysy³any jako tabela.
              //SetLength( wieloosobowe__efekt_t, 0 );
              //
              //while strumieñ_pamiêci_l.Position < strumieñ_pamiêci_l.Size do
              //  begin
              //
              //    i := Length( wieloosobowe__efekt_t );
              //    SetLength( wieloosobowe__efekt_t, i + 1 );
              //
              //    strumieñ_pamiêci_l.Read( wieloosobowe__efekt_t[ i ], obiekty_wieloosobowe__efekt_r__rozmiar_c );
              //
              //  end;
              ////---//while strumieñ_pamiêci_l.Position < strumieñ_pamiêci_l.Size do
              //
              //Wieloosobowe__Trafienia_Efekt_Utwórz( wieloosobowe__efekt_t );
              //SetLength( wieloosobowe__efekt_t, 0 );

            end
          else//if komenda_l = wieloosobowe__komenda__odbierz__rekord_efekt_c then
          if komenda_l = wieloosobowe__komenda__odbierz__rekord_pokój_rozmów_r_c then
            begin

              strumieñ_pamiêci_l.Read(  pokój_rozmów_r_l.id_nadawca, SizeOf( integer )  );
              strumieñ_pamiêci_l.Read(  pokój_rozmów_r_l.id_odbiorca, SizeOf( integer )  );
              strumieñ_pamiêci_l.Read(  pokój_rozmów_r_l.odbiorca_rodzaj, SizeOf( TPokój_Rozmów__Odbiorca_Rodzaj )  );
              strumieñ_pamiêci_l.Read(  pokój_rozmów_r_l.data_czas_wys³ania, SizeOf( TDateTime )  );
              pokój_rozmów_r_l.wiadomoœæ := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

              //Wieloosobowe__Log_Wypisz(   'P_R_o od: ' + IntToStr( pokój_rozmów_r_l.id_nadawca ) + ' do: ' + IntToStr( pokój_rozmów_r_l.id_odbiorca ) + ' opóŸnienie: ' + IntToStr(  SecondsBetween( Now(), pokój_rozmów_r_l.data_czas_wys³ania )  ) + ' wiadomoœæ : ' + pokój_rozmów_r_l.wiadomoœæ + '.'  ); //???


              if   ( czy_klient_g )
                or ( pokój_rozmów_r_l.odbiorca_rodzaj = pror_Wszyscy )
                or (
                         ( pokój_rozmów_r_l.odbiorca_rodzaj = pror_Grupa_Jedna )
                     and ( pokój_rozmów_r_l.id_odbiorca = Gracz_Grupa_SpinEdit.Value )
                   )
                or (
                         ( pokój_rozmów_r_l.odbiorca_rodzaj = pror_Gracz_Jeden )
                     and ( pokój_rozmów_r_l.id_odbiorca = Gracz_Identyfikator() )
                   ) then
                Pokój_Rozmów__Wyœwietl_Wiadomoœæ( pokój_rozmów_r_l );


              if czy_serwer_g then
                begin

                  // Przesy³a wiadomoœæ do klientów.

                  if pokój_rozmów_r_l.odbiorca_rodzaj = pror_Wszyscy then
                    Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__rekord_pokój_rozmów_r_c, -99, pokój_rozmów_r_l )
                  else//if pokój_rozmów_r_l.odbiorca_rodzaj = pror_Wszyscy then
                    begin

                      for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
                        if   ( pokój_rozmów_r_l.id_nadawca = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd ) // Odsy³a wiadomoœci do nadawcy.
                          or (
                                   ( pokój_rozmów_r_l.odbiorca_rodzaj = pror_Gracz_Jeden )
                               and ( pokój_rozmów_r_l.id_odbiorca = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd )
                             )
                          or (
                                   ( pokój_rozmów_r_l.odbiorca_rodzaj = pror_Grupa_Jedna )
                               and ( pokój_rozmów_r_l.id_odbiorca = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_grupa__kd )
                             ) then
                          begin

                            Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__rekord_pokój_rozmów_r_c, TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).peer_port_tcp__kd, pokój_rozmów_r_l );

                            // Bez tego bo wysy³a wiadomoœæ do odbiorcy i kopiê do nadawcy (klienta).
                            //if    ( pokój_rozmów_r_l.odbiorca_rodzaj = pror_Gracz_Jeden )
                            //  and ( pokój_rozmów_r_l.id_nadawca <> TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd ) then
                            //  Break;

                          end;
                        //---//if    ( pokój_rozmów_r_l.id_nadawca <> TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd ) (...)

                    end;
                  //---//if pokój_rozmów_r_l.odbiorca_rodzaj = pror_Wszyscy then


                  SI__Polecenie__Zak³ócenia_Interpretuj( pokój_rozmów_r_l );

                end;
              //---//if czy_serwer_g then

            end
          else//if komenda_l = wieloosobowe__komenda__odbierz__rekord_pokój_rozmów_r_c then
          if komenda_l = wieloosobowe__komenda__odbierz__rekord_statki_c then
            begin

              {$region 'Zakomentowane - obs³ugiwane w taki sposób zg³asza b³êdy dostêpu - wieloosobowe__komenda__odbierz__rekord_statki_c.'}
              //Wieloosobowe_Statki__Rekord_Czyœæ();
              //
              //while strumieñ_pamiêci_l.Position < strumieñ_pamiêci_l.Size do
              //  begin
              //
              //    i := Length( wieloosobowe__statki_t );
              //    SetLength( wieloosobowe__statki_t, i + 1 );
              //
              //
              //    strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ], obiekty_wieloosobowe__statki_r__rozmiar_c );
              //
              //
              //    SetLength( wieloosobowe__statki_t[ i ].œruba_obrót_k¹t, wieloosobowe__statki_t[ i ].œruba_obrót_k¹t__d³ugoœæ );
              //
              //    for j := 0 to Length( wieloosobowe__statki_t[ i ].œruba_obrót_k¹t ) - 1 do
              //      strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].œruba_obrót_k¹t[ j ], SizeOf( real )  );
              //
              //
              //    SetLength( wieloosobowe__statki_t[ i ].artyleria_t, wieloosobowe__statki_t[ i ].artyleria_t__d³ugoœæ_tabeli );
              //
              //    for j := 0 to Length( wieloosobowe__statki_t[ i ].artyleria_t ) - 1 do
              //      begin
              //
              //        strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].artyleria_t[ j ], obiekty_wieloosobowe__dzia³o_r__rozmiar_c );
              //
              //        SetLength( wieloosobowe__statki_t[ i ].artyleria_t[ j ].obiekty_wieloosobowe_lufa_r_t, wieloosobowe__statki_t[ i ].artyleria_t[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli );
              //
              //        for k := 0 to Length( wieloosobowe__statki_t[ i ].artyleria_t[ j ].obiekty_wieloosobowe_lufa_r_t ) - 1 do
              //          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].artyleria_t[ j ].obiekty_wieloosobowe_lufa_r_t[ k ], obiekty_wieloosobowe__lufa_r__rozmiar_c );
              //
              //      end;
              //    //---//for j := 0 to Length( wieloosobowe__statki_t[ i ].artyleria_t ) - 1 do
              //
              //
              //    SetLength( wieloosobowe__statki_t[ i ].dzia³a_t, wieloosobowe__statki_t[ i ].dzia³a_t__d³ugoœæ_tabeli );
              //
              //    for j := 0 to Length( wieloosobowe__statki_t[ i ].dzia³a_t ) - 1 do
              //      begin
              //
              //        strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].dzia³a_t[ j ], obiekty_wieloosobowe__dzia³o_r__rozmiar_c );
              //
              //        SetLength( wieloosobowe__statki_t[ i ].dzia³a_t[ j ].obiekty_wieloosobowe_lufa_r_t, wieloosobowe__statki_t[ i ].dzia³a_t[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli );
              //
              //        for k := 0 to Length( wieloosobowe__statki_t[ i ].dzia³a_t[ j ].obiekty_wieloosobowe_lufa_r_t ) - 1 do
              //          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].dzia³a_t[ j ].obiekty_wieloosobowe_lufa_r_t[ k ], obiekty_wieloosobowe__lufa_r__rozmiar_c );
              //
              //      end;
              //    //---//for j := 0 to Length( wieloosobowe__statki_t[ i ].dzia³a_t ) - 1 do
              //
              //
              //    SetLength( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t, wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__d³ugoœæ_tabeli );
              //
              //    for j := 0 to Length( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t ) - 1 do
              //      begin
              //
              //        strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t[ j ], obiekty_wieloosobowe__dzia³o_r__rozmiar_c );
              //
              //        SetLength( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t[ j ].obiekty_wieloosobowe_lufa_r_t, wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli );
              //
              //        for k := 0 to Length( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t[ j ].obiekty_wieloosobowe_lufa_r_t ) - 1 do
              //          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t[ j ].obiekty_wieloosobowe_lufa_r_t[ k ], obiekty_wieloosobowe__lufa_r__rozmiar_c );
              //
              //      end;
              //    //---//for j := 0 to Length( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t ) - 1 do
              //
              //  end;
              ////---//while strumieñ_pamiêci_l.Position < strumieñ_pamiêci_l.Size do
              {$endregion 'Zakomentowane - obs³ugiwane w taki sposób zg³asza b³êdy dostêpu - wieloosobowe__komenda__odbierz__rekord_statki_c.'}


              {$region 'wieloosobowe__komenda__odbierz__rekord_statki_c.'}
              Wieloosobowe_Statki__Rekord_Czyœæ();

              while strumieñ_pamiêci_l.Position < strumieñ_pamiêci_l.Size do
                begin

                  i := Length( wieloosobowe__statki_t );
                  SetLength( wieloosobowe__statki_t, i + 1 );

                  wieloosobowe__statki_t[ i ].przeliczone_st__owo := false;


                  //strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ], obiekty_wieloosobowe__statki_r__rozmiar_c );

                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].czy_lotniskowiec__owo, SizeOf( boolean )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].czy_samolot__owo, SizeOf( boolean )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].czy_samolot__kolizja__owo, SizeOf( boolean )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].czy_samolot__na_lotniskowcu__owo, SizeOf( boolean )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].czy_wszystkie_lufy__owo, SizeOf( boolean )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].broñ_indeks_zmieniaj__owo, SizeOf( boolean )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].obracaj_dzia³a__owo, SizeOf( boolean )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].obracaj_dzia³a__na_k¹t_wyznaczony__owo, SizeOf( boolean )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].podnoœ_lufy__owo, SizeOf( boolean )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].podnoœ_lufy__na_k¹t_wyznaczony__owo, SizeOf( boolean )  );
                  //strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].przeliczone_st__owo, SizeOf( boolean )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].œwiat³a_w³¹czone__owo, SizeOf( boolean )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].œwiat³a_dodatkowe_w³¹czone__owo, SizeOf( boolean )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].zanurzenie_peryskopowe__przekroczone__owo, SizeOf( boolean )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].zanurzenie_zadane_przekraczaj_100_procent__owo, SizeOf( boolean )  );

                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].id_gracz__owo, SizeOf( integer )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].id_grupa__owo, SizeOf( integer )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].id_statek_st__owo, SizeOf( integer )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].id_statek_schemat__owo, SizeOf( integer )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].id_statek__lotniskowiec__ma_samolot_na_pok³adzie__owo, SizeOf( integer )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie__owo, SizeOf( integer )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].artyleria_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].dzia³a_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].kotwica_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].si_aktywnoœæ__owo, SizeOf( integer )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].si_strzelanie_tryb__owo, SizeOf( integer )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].ster_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].ster_g³êbokoœci_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].œruba_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );

                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].schemat_samolot_zmiana_czas_i__owo, SizeOf( Int64 )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].toniêcie__czas_i__owo, SizeOf( Int64 )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].uszkodzone_czas_i__kotwica__owo, SizeOf( Int64 )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].uszkodzone_czas_i__radar__owo, SizeOf( Int64 )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].uszkodzone_czas_i__radio__owo, SizeOf( Int64 )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].uszkodzone_czas_i__sonar__owo, SizeOf( Int64 )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].uszkodzone_czas_i__ster__owo, SizeOf( Int64 )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].uszkodzone_czas_i__ster_g³êbokoœci__owo, SizeOf( Int64 )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].uszkodzone_czas_i__œruba__owo, SizeOf( Int64 )  );

                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].falowanie_bok_skrêt__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].falowanie_przód_pu³ap__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].falowanie_przód_ruch__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].prêdkoœæ_aktualna_procent__wzglêdny__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__k¹t__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].prêdkoœæ_zadana_procent__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].punkty_¿ycia__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].punkty_¿ycia_maksymalne__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].punkty_¿ycia_procent_zosta³o__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].skrêt_aktualny_procent__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].skrêt_zadany_procent__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].ster_k¹t__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].ster_g³êbokoœci_k¹t__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].toniêcie__przechylenie__lewo_prawo__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].toniêcie__przechylenie__przód_ty³__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].zanurzenie_pu³ap__aktualne__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].zanurzenie_pu³ap__aktualne_procent__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].zanurzenie_pu³ap__zadane_procent__owo, SizeOf( real )  );

                  //strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].gracz__nazwa__owo, SizeOf( TWieloosobowe_String )  );

                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].cel_wspó³rzêdne_st__owo, SizeOf( GLS.VectorGeometry.TAffineVector )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].kierunek_st__owo, SizeOf( TWieloosobowe__Wektor_4 )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].pozycja_st__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].amunicja_rodzaj_st__owo, SizeOf( Typy_Wspolne.TAmunicja_Rodzaj )  );


                  SetLength( wieloosobowe__statki_t[ i ].kotwica__ruch_etap_t__owo, wieloosobowe__statki_t[ i ].kotwica_t__d³ugoœæ_tabeli__owo );

                  for j := 0 to Length( wieloosobowe__statki_t[ i ].kotwica__ruch_etap_t__owo ) - 1 do
                    strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].kotwica__ruch_etap_t__owo[ j ], SizeOf( TKotwica_Ruch_Etap )  );


                  SetLength( wieloosobowe__statki_t[ i ].kotwica__uszkodzone_czas_i_t__owo, wieloosobowe__statki_t[ i ].kotwica_t__d³ugoœæ_tabeli__owo );

                  for j := 0 to Length( wieloosobowe__statki_t[ i ].kotwica__uszkodzone_czas_i_t__owo ) - 1 do
                    strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].kotwica__uszkodzone_czas_i_t__owo[ j ], SizeOf( Int64 )  );


                  SetLength( wieloosobowe__statki_t[ i ].kotwica__wspó³rzêdne_t__owo, wieloosobowe__statki_t[ i ].kotwica_t__d³ugoœæ_tabeli__owo );

                  for j := 0 to Length( wieloosobowe__statki_t[ i ].kotwica__wspó³rzêdne_t__owo ) - 1 do
                    strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].kotwica__wspó³rzêdne_t__owo[ j ], SizeOf( GLS.VectorGeometry.TAffineVector )  );


                  SetLength( wieloosobowe__statki_t[ i ].ster__uszkodzone_czas_i_t__owo, wieloosobowe__statki_t[ i ].ster_t__d³ugoœæ_tabeli__owo );

                  for j := 0 to Length( wieloosobowe__statki_t[ i ].ster__uszkodzone_czas_i_t__owo ) - 1 do
                    strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].ster__uszkodzone_czas_i_t__owo[ j ], SizeOf( Int64 )  );


                  SetLength( wieloosobowe__statki_t[ i ].ster_g³êbokoœci__uszkodzone_czas_i_t__owo, wieloosobowe__statki_t[ i ].ster_g³êbokoœci_t__d³ugoœæ_tabeli__owo );

                  for j := 0 to Length( wieloosobowe__statki_t[ i ].ster_g³êbokoœci__uszkodzone_czas_i_t__owo ) - 1 do
                    strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].ster_g³êbokoœci__uszkodzone_czas_i_t__owo[ j ], SizeOf( Int64 )  );


                  SetLength( wieloosobowe__statki_t[ i ].œruba__obrót_k¹t_t__owo, wieloosobowe__statki_t[ i ].œruba_t__d³ugoœæ_tabeli__owo );
                  SetLength( wieloosobowe__statki_t[ i ].œruba__uszkodzone_czas_i_t__owo, wieloosobowe__statki_t[ i ].œruba_t__d³ugoœæ_tabeli__owo );

                  for j := 0 to Length( wieloosobowe__statki_t[ i ].œruba__obrót_k¹t_t__owo ) - 1 do
                    begin

                      strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].œruba__obrót_k¹t_t__owo[ j ], SizeOf( real )  );
                      strumieñ_pamiêci_l.Read(  wieloosobowe__statki_t[ i ].œruba__uszkodzone_czas_i_t__owo[ j ], SizeOf( Int64 )  );

                    end;
                  //---//for j := 0 to Length( wieloosobowe__statki_t[ i ].œruba__obrót_k¹t_t__owo ) - 1 do


                  SetLength( wieloosobowe__statki_t[ i ].artyleria_t__owo, wieloosobowe__statki_t[ i ].artyleria_t__d³ugoœæ_tabeli__owo );

                  for j := 0 to Length( wieloosobowe__statki_t[ i ].artyleria_t__owo ) - 1 do
                    begin

                      //strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ], obiekty_wieloosobowe__dzia³o_r__rozmiar_c );

                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].czy_lot_parabol¹__owo, SizeOf( boolean )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obrót_k¹t__owo, SizeOf( real )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].celownik_linia__podniesienie_k¹t__owo, SizeOf( real )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].celownik_linia__szerokoœæ__owo, SizeOf( single )  );
                      //strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].celownik_linia__koñcówki__owo, SizeOf( word )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].celownik_linia__wzór__owo, SizeOf( word )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].amunicja_iloœæ__owo, SizeOf( integer )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].uszkodzone_czas_i__owo, SizeOf( Int64 )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].celownik_linia__kolor__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

                      SetLength( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo, wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli__owo );

                      for k := 0 to Length( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo ) - 1 do
                        begin

                          //strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ], obiekty_wieloosobowe__lufa_r__rozmiar_c );

                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_podniesienie_k¹t__owo, SizeOf( real )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_pozycja_z__owo, SizeOf( real )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_procent__owo, SizeOf( real )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].strza³_gotowoœæ__owo, SizeOf( boolean )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__kolor__owo, SizeOf( TWieloosobowe__Wektor_4 )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__pozycja__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

                        end;
                      //---//for k := 0 to Length( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo ) - 1 do

                    end;
                  //---//for j := 0 to Length( wieloosobowe__statki_t[ i ].artyleria_t__owo ) - 1 do


                  SetLength( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo, wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__d³ugoœæ_tabeli__owo );

                  for j := 0 to Length( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo ) - 1 do
                    begin

                      //strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ], obiekty_wieloosobowe__dzia³o_r__rozmiar_c );

                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obrót_k¹t__owo, SizeOf( real )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].celownik_linia__podniesienie_k¹t__owo, SizeOf( real )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].celownik_linia__szerokoœæ__owo, SizeOf( single )  );
                      //strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].celownik_linia__koñcówki__owo, SizeOf( word )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].celownik_linia__wzór__owo, SizeOf( word )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].amunicja_iloœæ__owo, SizeOf( integer )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].uszkodzone_czas_i__owo, SizeOf( Int64 )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].celownik_linia__kolor__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

                      SetLength( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo, wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli__owo );

                      for k := 0 to Length( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo ) - 1 do
                        begin

                          //strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ], obiekty_wieloosobowe__lufa_r__rozmiar_c );

                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_podniesienie_k¹t__owo, SizeOf( real )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_pozycja_z__owo, SizeOf( real )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_procent__owo, SizeOf( real )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].strza³_gotowoœæ__owo, SizeOf( boolean )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__kolor__owo, SizeOf( TWieloosobowe__Wektor_4 )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__pozycja__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

                        end;
                      //---//for k := 0 to Length( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo ) - 1 do

                    end;
                  //---//for j := 0 to Length( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo ) - 1 do


                  SetLength( wieloosobowe__statki_t[ i ].dzia³a_t__owo, wieloosobowe__statki_t[ i ].dzia³a_t__d³ugoœæ_tabeli__owo );

                  for j := 0 to Length( wieloosobowe__statki_t[ i ].dzia³a_t__owo ) - 1 do
                    begin

                      //strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ], obiekty_wieloosobowe__dzia³o_r__rozmiar_c );

                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obrót_k¹t__owo, SizeOf( real )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].celownik_linia__podniesienie_k¹t__owo, SizeOf( real )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].celownik_linia__szerokoœæ__owo, SizeOf( single )  );
                      //strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].celownik_linia__koñcówki__owo, SizeOf( word )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].celownik_linia__wzór__owo, SizeOf( word )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].amunicja_iloœæ__owo, SizeOf( integer )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].uszkodzone_czas_i__owo, SizeOf( Int64 )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].celownik_linia__kolor__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

                      SetLength( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo, wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli__owo );

                      for k := 0 to Length( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo ) - 1 do
                        begin

                          //strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ], obiekty_wieloosobowe__lufa_r__rozmiar_c );

                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_podniesienie_k¹t__owo, SizeOf( real )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_pozycja_z__owo, SizeOf( real )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_procent__owo, SizeOf( real )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].strza³_gotowoœæ__owo, SizeOf( boolean )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__kolor__owo, SizeOf( TWieloosobowe__Wektor_4 )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__pozycja__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

                        end;
                      //---//for k := 0 to Length( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo ) - 1 do

                    end;
                  //---//for j := 0 to Length( wieloosobowe__statki_t[ i ].dzia³a_t__owo ) - 1 do


                  SetLength( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo, wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__d³ugoœæ_tabeli__owo );

                  for j := 0 to Length( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo ) - 1 do
                    begin

                      //strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ], obiekty_wieloosobowe__dzia³o_r__rozmiar_c );

                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obrót_k¹t__owo, SizeOf( real )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].celownik_linia__podniesienie_k¹t__owo, SizeOf( real )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].celownik_linia__szerokoœæ__owo, SizeOf( single )  );
                      //strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].celownik_linia__koñcówki__owo, SizeOf( word )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].celownik_linia__wzór__owo, SizeOf( word )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].amunicja_iloœæ__owo, SizeOf( integer )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].uszkodzone_czas_i__owo, SizeOf( Int64 )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].celownik_linia__kolor__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

                      SetLength( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo, wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli__owo );

                      for k := 0 to Length( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo ) - 1 do
                        begin

                          //strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ], obiekty_wieloosobowe__lufa_r__rozmiar_c );

                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_podniesienie_k¹t__owo, SizeOf( real )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_pozycja_z__owo, SizeOf( real )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_procent__owo, SizeOf( real )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].strza³_gotowoœæ__owo, SizeOf( boolean )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__kolor__owo, SizeOf( TWieloosobowe__Wektor_4 )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__pozycja__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

                        end;
                      //---//for k := 0 to Length( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo ) - 1 do

                    end;
                  //---//for j := 0 to Length( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo ) - 1 do


                  SetLength( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo, wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__d³ugoœæ_tabeli__owo );

                  for j := 0 to Length( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo ) - 1 do
                    begin

                      //strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ], obiekty_wieloosobowe__dzia³o_r__rozmiar_c );

                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obrót_k¹t__owo, SizeOf( real )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].celownik_linia__podniesienie_k¹t__owo, SizeOf( real )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].celownik_linia__szerokoœæ__owo, SizeOf( single )  );
                      //strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].celownik_linia__koñcówki__owo, SizeOf( word )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].celownik_linia__wzór__owo, SizeOf( word )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].amunicja_iloœæ__owo, SizeOf( integer )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].uszkodzone_czas_i__owo, SizeOf( Int64 )  );
                      strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].celownik_linia__kolor__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

                      SetLength( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo, wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli__owo );

                      for k := 0 to Length( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo ) - 1 do
                        begin

                          //strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ], obiekty_wieloosobowe__lufa_r__rozmiar_c );

                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_podniesienie_k¹t__owo, SizeOf( real )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_pozycja_z__owo, SizeOf( real )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_procent__owo, SizeOf( real )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].strza³_gotowoœæ__owo, SizeOf( boolean )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__kolor__owo, SizeOf( TWieloosobowe__Wektor_4 )  );
                          strumieñ_pamiêci_l.Read( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__pozycja__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

                        end;
                      //---//for k := 0 to Length( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo ) - 1 do

                    end;
                  //---//for j := 0 to Length( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo ) - 1 do


                  //wieloosobowe__statki_t[ i ].radar_id_l¹dy_w_zasiêgu__owo := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );
                  //wieloosobowe__statki_t[ i ].radar_id_statki_w_zasiêgu__owo := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );
                  //wieloosobowe__statki_t[ i ].radio_id_l¹dy_w_zasiêgu__owo := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );
                  //wieloosobowe__statki_t[ i ].radio_id_statki_w_zasiêgu__owo := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );
                  //wieloosobowe__statki_t[ i ].sonar_id_statki_w_zasiêgu__owo := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                end;
              //---//while strumieñ_pamiêci_l.Position < strumieñ_pamiêci_l.Size do
              {$endregion 'wieloosobowe__komenda__odbierz__rekord_statki_c.'}

            end
          else//if komenda_l = wieloosobowe__komenda__odbierz__rekord_statki_c then
          if komenda_l = wieloosobowe__komenda__odbierz__rekord_statki__wysy³ane_rzadziej_c then
            begin

              Wieloosobowe_Statki__Wysy³ane_Rzadziej__Rekord_Czyœæ();

              while strumieñ_pamiêci_l.Position < strumieñ_pamiêci_l.Size do
                begin

                  i := Length( wieloosobowe__statki__wysy³ane_rzadziej_t );
                  SetLength( wieloosobowe__statki__wysy³ane_rzadziej_t, i + 1 );


                  strumieñ_pamiêci_l.Read(  wieloosobowe__statki__wysy³ane_rzadziej_t[ i ].id_statek_st__owo_wr, SizeOf( integer )  );

                  wieloosobowe__statki__wysy³ane_rzadziej_t[ i ].radar_id_l¹dy_w_zasiêgu__owo_wr := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );
                  wieloosobowe__statki__wysy³ane_rzadziej_t[ i ].radar_id_statki_w_zasiêgu__owo_wr := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );
                  wieloosobowe__statki__wysy³ane_rzadziej_t[ i ].radio_id_l¹dy_w_zasiêgu__owo_wr := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );
                  wieloosobowe__statki__wysy³ane_rzadziej_t[ i ].radio_id_statki_w_zasiêgu__owo_wr := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );
                  wieloosobowe__statki__wysy³ane_rzadziej_t[ i ].sonar_id_statki_w_zasiêgu__owo_wr := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                end;
              //---//while strumieñ_pamiêci_l.Position < strumieñ_pamiêci_l.Size do

            end
          else//if komenda_l = wieloosobowe__komenda__odbierz__rekord_statki__wysy³ane_rzadziej_c then
          if komenda_l = wieloosobowe__komenda__odbierz__statek__czas_do_zatoniêcia_c then
            begin

              if czy_klient_g then
                begin

                  // Tylko klient odczytuje dane o czasie zatoniêcia statku.

                  zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                  i := Pos( ';', zts );

                  if i > 0 then
                    begin

                      try
                        j := StrToInt(  Copy( zts, 1, i - 1 )  );
                      except
                        zts := '';
                      end;
                      //---//try

                      if zts <> '' then
                        begin

                          Delete( zts, 1, i );

                          for i := 0 to Length( statki_t ) - 1 do
                            if    ( statki_t[ i ] <> nil )
                              and ( statki_t[ i ].id_statek = j ) then
                              begin

                                statki_t[ i ].statek__czas_do_zatoniêcia_s := zts;
                                Break;

                              end;
                            //---//if    ( statki_t[ i ] <> nil ) (...)

                        end;
                      //---//if j = 0 then

                    end;
                  //---//if zts <> '' then

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__odbierz__statek__czas_do_zatoniêcia_c then
          if komenda_l = wieloosobowe__komenda__odbierz__statki_definicje_c then
            begin

              SetLength( statki_lista_t, 0 );

              if czy_klient_g then
                begin

                  // Tylko klient odczytuje dane o statkach.

                  while strumieñ_pamiêci_l.Position < strumieñ_pamiêci_l.Size do
                    begin

                      i := Length( statki_lista_t );
                      SetLength( statki_lista_t, i + 1 );

                      strumieñ_pamiêci_l.Read(  statki_lista_t[ i ].czy_lotniskowiec__sl, SizeOf( boolean )  );
                      strumieñ_pamiêci_l.Read(  statki_lista_t[ i ].czy_samolot__sl, SizeOf( boolean )  );
                      statki_lista_t[ i ].id__sl := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );
                      statki_lista_t[ i ].nazwa__sl := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );
                      statki_lista_t[ i ].opis__sl := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );
                      statki_lista_t[ i ].plik_nazwa__sl := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );
                      statki_lista_t[ i ].treœæ__sl := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                    end;
                  //---//while strumieñ_pamiêci_l.Position < strumieñ_pamiêci_l.Size do


                  j := Statek_ComboBox.ItemIndex;
                  Statek_ComboBox.Items.Clear();

                  for i := 0 to Length( statki_lista_t ) - 1 do
                    begin

                      if Trim( statki_lista_t[ i ].nazwa__sl ) <> '' then
                        zts := statki_lista_t[ i ].nazwa__sl
                      else//if Trim( statki_lista_t[ i ].nazwa__sl ) <> '' then
                        zts := statki_lista_t[ i ].plik_nazwa__sl;


                      if statki_lista_t[ i ].czy_samolot__sl then
                        zts := zts +
                          si_pokój_rozmów__polecenie_symbol__t³umaczenie__prefiks_c + t³umaczenie_komunikaty_r.s³owo__samolot + si_pokój_rozmów__polecenie_symbol__t³umaczenie__sufiks_c;

                      Statek_ComboBox.Items.Add( zts );

                    end;
                  //---//for i := 0 to Length( statki_lista_t ) - 1 do


                  k := Statek__Samolot_ComboBox.ItemIndex;
                  Statek__Samolot_ComboBox.Items.Clear();

                  Statek__Samolot_ComboBox.Items.Add( '<' + t³umaczenie_komunikaty_r.s³owo__brak__ma³¹_liter¹ + '>' );

                  for i := 0 to Statek_ComboBox.Items.Count - 1 do
                    if statki_lista_t[ i ].czy_samolot__sl then
                      Statek__Samolot_ComboBox.Items.Add( Statek_ComboBox.Items[ i ] );


                  Statki_Zwolnij();


                  Statek_ComboBox.ItemIndex := j;

                  if    ( Statek_ComboBox.ItemIndex < 0 )
                    and (  Statek_ComboBox.Items.Count >= 1  ) then
                    Statek_ComboBox.ItemIndex := 0;


                  Statek__Samolot_ComboBox.ItemIndex := k;

                  if    ( Statek__Samolot_ComboBox.ItemIndex < 0 )
                    and (  Statek__Samolot_ComboBox.Items.Count >= 1  ) then
                    Statek__Samolot_ComboBox.ItemIndex := 0;


                  Statek_ComboBoxChange( nil );
                  //SI__Statek_ComboBoxChange( nil );

                  //Statek__Utwórz_BitBtnClick( nil );

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__odbierz__statki_definicje_c then
          if komenda_l = wieloosobowe__komenda__pauza_c then
            begin

              if czy_klient_g then
                begin

                  // Tylko klient odczytuje komunikat o pauzie.

                  Pauza(  Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l ) = 'Tak'  );

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__pauza_c then
          if komenda_l = wieloosobowe__komenda__schemat_samolot_zmieñ_c then
            begin

              if czy_serwer_g then
                begin

                  // Tylko serwer odbiera informacje o chêci zmiany schematu samolotu od klientów.

                  strumieñ_pamiêci_l.Read(  i, SizeOf( integer )  ); // id_statek.

                  zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                  try
                    j := StrToInt( zts ); // id_statek_schemat__samolot_zmieñ_na.
                  except
                    j := -99;
                  end;
                  //---//try

                  zts := '';

                  if    ( i <> -99 )
                    and ( j <> -99 )
                    and ( j >= 0 )
                    and ( Statek_ComboBox.Items.Count > j )
                    and (  j <= Length( statki_lista_t ) - 1  )
                    and ( statki_lista_t[ j ].czy_samolot__sl  ) then
                    begin

                      for k := 0 to Length( statki_t ) - 1 do
                        if    ( statki_t[ k ] <> nil )
                          and ( statki_t[ k ].id_statek = i )
                          and ( statki_t[ k ].czy_samolot ) then
                          begin

                            i := k; // Zapamiêtuje indeks tabeli odnosz¹cy siê do samolotu.
                            zts := '1';

                            Break;

                          end;
                        //---//if    ( statki_t[ k ] <> nil ) (...)


                      if zts = '1' then
                        for k := 0 to Length( statki_t ) - 1 do
                          if    ( k <> i ) // Sprawdza czy statkiem gracza jest lotniskowiec.
                            and ( statki_t[ k ] <> nil )
                            and ( statki_t[ k ].id_gracz = statki_t[ i ].id_gracz )
                            and ( statki_t[ k ].czy_lotniskowiec ) then
                            begin

                              if statki_t[ i ].Id_Statek_Schemat__Samolot_Zmieñ_Na__Ustaw( j ) then
                                zts := '2';

                              Break;

                            end;
                          //---//if    ( k <> i ) (...)

                    end;
                  //---//if    ( i <> -99 ) (...)


                  if zts <> '2' then
                    Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__schemat_samolot_zmieñ_c, peer_port__nadawca_l, t³umaczenie_komunikaty_r.komunikat__nie_mo¿na_zmieniæ_samolotu )
                  else//if zts <> '2' then
                    begin

                      //if    ( Statek_ComboBox.ItemIndex > 0 ) // To sprawdzenie jest wy¿ej.
                      //  and ( j >= 0 )
                      //  and ( Statek_ComboBox.Items.Count > j ) then
                      Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__schemat_samolot_zmieñ_c, peer_port__nadawca_l, t³umaczenie_komunikaty_r.komunikat__zmiana_samolotu_przyjêta + ' (' + Statek_ComboBox.Items[ j ] + ').' );

                    end;
                  //---//if zts <> '2' then

                end
              else//if czy_serwer_g then
              if czy_klient_g then
                begin

                  // Tylko klient odczytuje komunikat czy zg³oszenie o zmianie schematu samolotu zosta³o zaakceptowane.

                  Informacja_Dodatkowa_Dodaj(  Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l )  );

                end;
              //---//if czy_klient_g then

            end
          else//if komenda_l = wieloosobowe__komenda__schemat_samolot_zmieñ_c then
          if komenda_l = wieloosobowe__komenda__serwer_wy³¹cza_siê_c then
            begin

              Result := wieloosobowe__komenda__serwer_wy³¹cza_siê_c;
              strumieñ_pamiêci_l.Read(  zts, SizeOf ( wieloosobowe__komenda__serwer_wy³¹cza_siê_c )  );

            end
          else//if komenda_l = wieloosobowe__komenda__serwer_wy³¹cza_siê_c then
          if komenda_l = wieloosobowe__komenda__statek__cel_wspó³rzêdne_c then
            begin

              if czy_serwer_g then
                begin

                  // Tylko serwer odbiera informacje o wspó³rzêdnych celu od klientów.

                  //strumieñ_pamiêci_l.Read( wieloosobowe__statek_cel_wspó³rzêdne_r_l, obiekty_wieloosobowe__statek_cel_wspó³rzêdne_r__rozmiar_c );

                  strumieñ_pamiêci_l.Read(  wieloosobowe__statek_cel_wspó³rzêdne_r_l.id_statek_cel__owo, SizeOf( integer )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statek_cel_wspó³rzêdne_r_l.cel_wspó³rzêdne_cel__owo.X, SizeOf( single )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statek_cel_wspó³rzêdne_r_l.cel_wspó³rzêdne_cel__owo.Y, SizeOf( single )  );
                  strumieñ_pamiêci_l.Read(  wieloosobowe__statek_cel_wspó³rzêdne_r_l.cel_wspó³rzêdne_cel__owo.Z, SizeOf( single )  );

                  Statek_Klient_Cel_Ustaw( wieloosobowe__statek_cel_wspó³rzêdne_r_l.id_statek_cel__owo, wieloosobowe__statek_cel_wspó³rzêdne_r_l.cel_wspó³rzêdne_cel__owo );

                end;
              //---//if czy_serwer_g then

            end
          else//if komenda_l = wieloosobowe__komenda__statek__cel_wspó³rzêdne_c then
          if komenda_l = wieloosobowe__komenda__statek__klawisze_obs³uga_c then
            begin

              if czy_serwer_g then
                begin

                  // Tylko serwer odbiera informacje o obs³udze klawiszy od klientów.

                  strumieñ_pamiêci_l.Read( wieloosobowe__statek_klawisze_obs³uga_r_l, obiekty_wieloosobowe__statek_klawisze_obs³uga_r__rozmiar_c );

                  Wieloosobowe_Klawisze_Obs³uga_Parametry_Ustaw( wieloosobowe__statek_klawisze_obs³uga_r_l );
                  Statek_Klient_Cel_Ustaw( wieloosobowe__statek_klawisze_obs³uga_r_l.id_statek_kl__owo, wieloosobowe__statek_klawisze_obs³uga_r_l.cel_wspó³rzêdne__owo );

                  // T³umaczy konfiguracjê klawiatury klienta na konfiguracjê klawiatury serwera.
                  j := 1;

                  if Trim( wieloosobowe__statek_klawisze_obs³uga_r_l.polecenie__nazwa__owo ) <> '' then
                    begin

                      for i := 0 to Length( klawiatura_konfiguracja_r_t ) - 1 do
                        if wieloosobowe__statek_klawisze_obs³uga_r_l.polecenie__nazwa__owo = klawiatura_konfiguracja_r_t[ i ].polecenie__nazwa then
                          begin

                            j := 0;


                            if klawiatura_konfiguracja_r_t[ i ].czy_mysz then
                              begin

                                wieloosobowe__statek_klawisze_obs³uga_r_l.klawisz__owo := 0;
                                wieloosobowe__statek_klawisze_obs³uga_r_l.mysz_przycisk__owo := klawiatura_konfiguracja_r_t[ i ].klawisz;

                              end
                            else//if klawiatura_konfiguracja_r_t[ i ].czy_mysz then
                              begin

                                wieloosobowe__statek_klawisze_obs³uga_r_l.klawisz__owo := klawiatura_konfiguracja_r_t[ i ].klawisz;
                                wieloosobowe__statek_klawisze_obs³uga_r_l.mysz_przycisk__owo := -1;

                              end;
                            //---//if klawiatura_konfiguracja_r_t[ i ].czy_mysz then


                            wieloosobowe__statek_klawisze_obs³uga_r_l.shift__owo := [];

                            if klawiatura_konfiguracja_r_t[ i ].plus_alt then
                              wieloosobowe__statek_klawisze_obs³uga_r_l.shift__owo := wieloosobowe__statek_klawisze_obs³uga_r_l.shift__owo + [ ssAlt ];

                            if klawiatura_konfiguracja_r_t[ i ].plus_ctrl then
                              wieloosobowe__statek_klawisze_obs³uga_r_l.shift__owo := wieloosobowe__statek_klawisze_obs³uga_r_l.shift__owo + [ ssCtrl ];

                            if klawiatura_konfiguracja_r_t[ i ].plus_shift then
                              wieloosobowe__statek_klawisze_obs³uga_r_l.shift__owo := wieloosobowe__statek_klawisze_obs³uga_r_l.shift__owo + [ ssShift ];

                            Break;

                          end;
                      //---//if wieloosobowe__statek_klawisze_obs³uga_r_l.polecenie__nazwa__owo = klawiatura_konfiguracja_r_t[ i ].polecenie__nazwa then

                    end;
                  //---//if Trim( wieloosobowe__statek_klawisze_obs³uga_r_l.polecenie__nazwa__owo ) <> '' then
                  //---// T³umaczy konfiguracjê klawiatury klienta na konfiguracjê klawiatury serwera.


                  if j = 0 then // Je¿eli kombinacja klawiszy jest nierozpoznana nic nie zmienia.
                    Klawisze_Obs³uga__Statek
                      (
                        wieloosobowe__statek_klawisze_obs³uga_r_l.id_statek_kl__owo,
                        wieloosobowe__statek_klawisze_obs³uga_r_l.klawisz__owo,
                        wieloosobowe__statek_klawisze_obs³uga_r_l.mysz_przycisk__owo,
                        wieloosobowe__statek_klawisze_obs³uga_r_l.shift__owo,
                        true
                      );

                end;
              //---//if czy_serwer_g then

            end
          else//if komenda_l = wieloosobowe__komenda__statek__klawisze_obs³uga_c then
          if komenda_l = wieloosobowe__komenda__statek__lotniskowiec__samoloty_wszystkie__punkty_¿ycia_zero_c then
            begin

              if czy_serwer_g then
                begin

                  // Tylko serwer odbiera informacje o zmianie punktów ¿ycia samolotów na lotniskowcu.

                  zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                  i := Pos( ';', zts );
                  j := -9999;

                  if i > 1 then
                    try
                      j := StrToInt(  Copy( zts, 1, i - 1 )  ); // id_statek.
                    except
                    end;
                    //---//try

                  if j <> -9999 then
                    begin

                      Delete( zts, 1, i );

                      try
                        k := StrToInt( zts ); // rodzaj.
                      except
                        k := -99;
                      end;
                      //---//try

                      if k <> -99 then
                        begin

                          for i := 0 to Length( statki_t ) - 1 do
                            if    ( statki_t[ i ] <> nil )
                              and ( statki_t[ i ].czy_lotniskowiec )
                              and ( statki_t[ i ].id_statek = j ) then
                              begin

                                Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero( statki_t[ i ], nil, k );
                                Break;

                              end;
                            //---//if    ( statki_t[ i ] <> nil ) (...)

                        end;
                      //---//if czy_serwer_g then

                    end;
                  //---//if j <> -9999 then

                end;
              //---//if czy_serwer_g then

            end
          else//if komenda_l = wieloosobowe__komenda__statek__lotniskowiec__samoloty_wszystkie__punkty_¿ycia_zero_c then
          if komenda_l = wieloosobowe__komenda__statek__przywróæ_do_gry_c then
            begin

              strumieñ_pamiêci_l.Read( i, SizeOf( integer )  ); // id_statek.

              if czy_klient_g then
                Statek_Przywróæ_Do_Gry( i );

            end
          else//if komenda_l = wieloosobowe__komenda__statek__przywróæ_do_gry_c then
          if komenda_l = wieloosobowe__komenda__statek__si__samolot_gracza__l¹duj_na_lotniskowcu_gracza_c then
            begin

              strumieñ_pamiêci_l.Read( i, SizeOf( integer )  ); // id_gracz.

              if czy_serwer_g then
                SI__Samolot_Gracza__L¹duj_Na_Lotniskowcu_Gracza( i, peer_port__nadawca_l );

            end
          else//if komenda_l = wieloosobowe__komenda__statek__si__samolot_gracza__l¹duj_na_lotniskowcu_gracza_c then
          if komenda_l = wieloosobowe__komenda__statek__sos_nadaje_c then
            begin

              zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

              try
                i := StrToInt( zts ); // id_statek.
              except
                i := -9999;
              end;
              //---//try

              if i <> -9999 then
                begin

                  if czy_serwer_g then // Tylko serwer wysy³a informacje do klientów o tym aby utworzyli efekty sygna³u SOS.
                    Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__statek__sos_nadaje_c, -99, zts );


                  SOS__Przygotuj( i );

                end;
              //---//if czy_serwer_g then

            end
          else//if komenda_l = wieloosobowe__komenda__statek__sos_nadaje_c then
          if komenda_l = wieloosobowe__komenda__statek__syrena_okrêtowa_klient_nadaje_c then
            begin

              zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

              if czy_serwer_g then
                begin

                  // Tylko serwer wysy³a informacje do klientów o tym aby utworzyli efekty syreny okrêtowej.

                  try
                    j := StrToInt( zts ); // id_statek.
                  except
                    j := -9999;
                  end;
                  //---//try

                  if j <> -9999 then
                    begin

                      for i := 0 to Length( statki_t ) - 1 do
                        if    ( statki_t[ i ] <> nil )
                          and ( statki_t[ i ].id_statek = j ) then
                          begin

                            DŸwiêki__Efekt__Utwórz_Jeden( der_Syrena_Okrêtowa, statki_t[ i ].AbsolutePosition );
                            Break;

                          end;
                        //---//if    ( statki_t[ i ] <> nil ) (...)

                    end;
                  //---//if j <> -9999 then

                end;
              //---//if czy_serwer_g then

            end
          else//if komenda_l = wieloosobowe__komenda__statek__syrena_okrêtowa_klient_nadaje_c then
          if komenda_l = wieloosobowe__komenda__udp__klient_po³¹czony_nadal_c then
            begin

              if czy_serwer_g then
                begin

                  // Tylko serwer odczytuje aktywnoœæ pod³¹czenia klientów.

                  if czy_udp_l then
                    begin

                      // Sprawdza czy klient UDP przys³a³ dane zgodne z klientem TCP i czy znacznik czasu wysy³ki nie jest za stary, zapamiêtuje peer port klienta  UDP.

                      zts := Strumieñ_Napis_Odczytaj( strumieñ_pamiêci_l );

                      i := Pos( ';', zts );
                      j := -99;

                      if i > 1 then
                        try
                          j := StrToInt(  Copy( zts, 1, i - 1 )  ); // TCP peer_port.
                        except
                        end;
                        //---//try

                      if j <> -99 then
                        begin

                          Delete( zts, 1, i );

                          zt_tcp_klient_dane := tcp_klienci_lista_g.ZnajdŸ_Peer_Port( j );

                          if zt_tcp_klient_dane <> nil then
                            begin

                              i := Pos( ';', zts );
                              j := -1;

                              if i > 1 then
                                try
                                  j := StrToInt(  Copy( zts, 1, i - 1 )  ); // Identyfikator gracza.
                                except
                                end;
                                //---//try


                              if    ( j <> -1 )
                                and ( zt_tcp_klient_dane.identyfikator__kd = j ) then
                                begin

                                  Delete( zts, 1, i );


                                  i := Pos( ';', zts );
                                  ztdu := -1;

                                  if i > 1 then
                                    try
                                      ztdu := String_To__Float(  Copy( zts, 1, i - 1 )  ); // Znacznik czasu.
                                    except
                                    end;
                                    //---//try

                                  if SecondsBetween( Now(), ztdu ) <= udp_klient_po³¹czenie_potwierdzanie_sekundy_c * 2 then
                                    begin

                                      zt_tcp_klient_dane.peer_port_udp__kd := id_socket_handle_f.PeerPort;
                                      zt_tcp_klient_dane.data_czas__udp_kontakt__kd := Now();
                                      udp_klienci_lista_g.Dodaj( id_socket_handle_f.PeerIP, id_socket_handle_f.PeerPort, zt_tcp_klient_dane.identyfikator__kd );

                                      //udp_klienci_lista_g.Usuñ_Przeterminowanych();
                                      //udp_data_czas_sprawdzanie_po³¹czeñ_ostatnie_g := Now();

                                    end;
                                  //---//if SecondsBetween( Now(), ztdu ) <= udp_klient_po³¹czenie_potwierdzanie_sekundy_c * 2 then

                                end;
                              //---//if    ( j <> -1 ) (...)

                            end;
                          //---//if zt_tcp_klient_dane <> nil then

                        end;
                      //---//if j <> -99 then

                    end;
                  //---//if czy_udp_l then

                end;
              //---//if czy_serwer_g then

            end
          else//if komenda_l = wieloosobowe__komenda__udp__klient_po³¹czony_nadal_c then
          if komenda_l = wieloosobowe__komenda__odbierz__rekord_komunikacja_rekord_testowy_r_c then
            begin

              strumieñ_pamiêci_l.Read( komunikacja_rekord_testowy_r, komunikacja_rekord_testowy_r__rozmiar_c );
              Komunikacja_Rekord_Testowy_Obs³uga();

            end
          else//if komenda_l = wieloosobowe__komenda__odbierz__rekord_komunikacja_rekord_testowy_r_c then
          if komenda_l = wieloosobowe__komenda__odbierz__rekord_komunikacja_rekord_testowy_2_r_c then
            begin

              strumieñ_pamiêci_l.Read(  komunikacja_rekord_testowy_2_r_l.liczba_ca³kowita, SizeOf( integer )  );
              strumieñ_pamiêci_l.Read(  komunikacja_rekord_testowy_2_r_l.liczba_rzeczywista, SizeOf( real )  );
              strumieñ_pamiêci_l.Read(  komunikacja_rekord_testowy_2_r_l.data_czas, SizeOf( TDateTime )  );

              //strumieñ_pamiêci_l.Read( komunikacja_rekord_testowy_2_r_l, komunikacja_rekord_testowy_2_r__rozmiar_c ); // Tak nie dzia³a.

              if komunikacja_rekord_testowy_2_r_l.liczba_ca³kowita > 0 then
                begin

                  SetLength( komunikacja_rekord_testowy_2_r_l.napis, komunikacja_rekord_testowy_2_r_l.liczba_ca³kowita );

                  strumieñ_pamiêci_l.ReadBuffer(
                      Pointer( komunikacja_rekord_testowy_2_r_l.napis )^,
                      char_rozmiar_c * komunikacja_rekord_testowy_2_r_l.liczba_ca³kowita
                    );

                end;
              //---//if komunikacja_rekord_testowy_2_r_l.liczba_ca³kowita > 0 then

              Wieloosobowe__Log_Wypisz(   'RT o ' + IntToStr( komunikacja_rekord_testowy_2_r_l.liczba_ca³kowita ) + ' ' + ': ' + komunikacja_rekord_testowy_2_r_l.napis + '.'  ); //???

            end;
          //else//if komenda_l = wieloosobowe__komenda__odbierz__rekord_komunikacja_rekord_testowy_2_r_c then
          //  ;


          FreeAndNil( strumieñ_pamiêci_l );


          if komenda_l = wieloosobowe__komenda__odbierz__rekord_amunicja_c then
            Wieloosobowe_Amunicja_Parametry_Ustaw()
          else//if komenda_l = wieloosobowe__komenda__odbierz__rekord_amunicja_c then
          if komenda_l = wieloosobowe__komenda__odbierz__rekord_statki_c then
            Wieloosobowe_Statki__Parametry_Ustaw()
          else//if komenda_l = wieloosobowe__komenda__odbierz__rekord_statki_c then
          if komenda_l = wieloosobowe__komenda__odbierz__rekord_statki__wysy³ane_rzadziej_c then
            Wieloosobowe_Statki__Wysy³ane_Rzadziej__Parametry_Ustaw();
          {$endregion 'Przetwarza odczytane dane.'}

        end
      else//if    ( strumieñ_rozmiar > 0 ) (...)
        begin

          if komenda_l = wieloosobowe__komenda__odbierz__rekord_amunicja_c then
            begin

              // Je¿eli nie ma ju¿ amunicji na scenie to przychodzi pusta informacja (komenda i pusty strumieñ wielkoœæ równa 0)
              // Klienci usun¹ u siebie pozosta³¹ widoczn¹ amunicjê.

              SetLength( wieloosobowe__amunicja_t, 0 );
              Wieloosobowe_Amunicja_Parametry_Ustaw();

            end;
          //---//if komenda_l = wieloosobowe__komenda__odbierz__rekord_amunicja_c then

        end;
      //---//
      //---//if    ( strumieñ_rozmiar > 0 ) (...)

    end
  else//if   ( komenda_l = wieloosobowe__komenda__odbierz__rekord_amunicja_c ) (...)
    Result := komenda_l;

end;//---//Funkcja Wieloosobowe__Odczytaj().

//Funkcja Wieloosobowe__Strumieñ_Wyœlij().
procedure TStatki_Form.Wieloosobowe__Strumieñ_Wyœlij( const komenda_f : string; const peer_port_f : integer; const wartoœæ_f : TWieloosobowe_String; const czy_udp_f : boolean = false );
var
  pokój_rozmów_r_l : TPokój_Rozmów_r; // Tylko aby wywo³aæ funkcjê.
  wieloosobowe__efekt_r_l : TObiekty_Wieloosobowe__Efekt_r; // Tylko aby wywo³aæ funkcjê.
begin

  if   ( komenda_f = wieloosobowe__komenda__odbierz__rekord_pokój_rozmów_r_c )
    or ( komenda_f = wieloosobowe__komenda__odbierz__rekord_efekt_c ) then
    Log_Wypisz( t³umaczenie_komunikaty_r.komunikat__dla_tej_komendy_nale¿y_u¿yæ_innej_wersji_funkcji__Wieloosobowe__Strumieñ_Wyœlij_ );

  Wieloosobowe__Strumieñ_Wyœlij( komenda_f, peer_port_f, wartoœæ_f, pokój_rozmów_r_l, wieloosobowe__efekt_r_l, czy_udp_f );

end;//---//Funkcja Wieloosobowe__Strumieñ_Wyœlij().

//Funkcja Wieloosobowe__Strumieñ_Wyœlij().
procedure TStatki_Form.Wieloosobowe__Strumieñ_Wyœlij( const komenda_f : string; const peer_port_f : integer; const pokój_rozmów_r_f : TPokój_Rozmów_r; const czy_udp_f : boolean = false );
var
  wieloosobowe__efekt_r_l : TObiekty_Wieloosobowe__Efekt_r; // Tylko aby wywo³aæ funkcjê.
begin

  if komenda_f = wieloosobowe__komenda__odbierz__rekord_efekt_c then
    Log_Wypisz( t³umaczenie_komunikaty_r.komunikat__dla_tej_komendy_nale¿y_u¿yæ_innej_wersji_funkcji__Wieloosobowe__Strumieñ_Wyœlij_ );

  Wieloosobowe__Strumieñ_Wyœlij( komenda_f, peer_port_f, '', pokój_rozmów_r_f, wieloosobowe__efekt_r_l, czy_udp_f );

end;//---//Funkcja Wieloosobowe__Strumieñ_Wyœlij().

//Funkcja Wieloosobowe__Strumieñ_Wyœlij().
procedure TStatki_Form.Wieloosobowe__Strumieñ_Wyœlij( const komenda_f : string; const peer_port_f : integer; const wieloosobowe__efekt_r_f : TObiekty_Wieloosobowe__Efekt_r; const czy_udp_f : boolean = false );
var
  pokój_rozmów_r_l : TPokój_Rozmów_r; // Tylko aby wywo³aæ funkcjê.
begin

  if komenda_f = wieloosobowe__komenda__odbierz__rekord_pokój_rozmów_r_c then
    Log_Wypisz( t³umaczenie_komunikaty_r.komunikat__dla_tej_komendy_nale¿y_u¿yæ_innej_wersji_funkcji__Wieloosobowe__Strumieñ_Wyœlij_ );

  Wieloosobowe__Strumieñ_Wyœlij( komenda_f, peer_port_f, '', pokój_rozmów_r_l, wieloosobowe__efekt_r_f, czy_udp_f );

end;//---//Funkcja Wieloosobowe__Strumieñ_Wyœlij().

//Funkcja Wieloosobowe__Strumieñ_Wyœlij().
procedure TStatki_Form.Wieloosobowe__Strumieñ_Wyœlij( const komenda_f : string; const peer_port_f : integer; const wartoœæ_f : TWieloosobowe_String; const pokój_rozmów_r_f : TPokój_Rozmów_r; const wieloosobowe__efekt_r_f : TObiekty_Wieloosobowe__Efekt_r; const czy_udp_f : boolean = false );

  //Funkcja Strumieñ_Napis_Wpisz() w Wieloosobowe__Strumieñ_Wyœlij().
  procedure Strumieñ_Napis_Wpisz( napis_f : string; strumieñ_pamiêci_f : TMemoryStream );
  var
    i : integer;
    zt_wieloosobowe_string : TWieloosobowe_String;
  begin

    napis_f := IdEncoderMIME1.EncodeString( napis_f, IdGlobal.IndyUTF8Encoding  ); // Znaki lokalne (kanji) wysy³a³y siê jako znaki zapytania.


    i := System.Math.Ceil(  Length( napis_f ) / High( zt_wieloosobowe_string )  );

    strumieñ_pamiêci_f.Write(  i, SizeOf( i )  );


    while Length( napis_f ) > 0 do
      begin

        zt_wieloosobowe_string := Copy(  napis_f, 1, High( zt_wieloosobowe_string )  );
        Delete(  napis_f, 1, High( zt_wieloosobowe_string )  );

        strumieñ_pamiêci_f.Write( zt_wieloosobowe_string, wieloosobowe_string__rozmiar_c );

      end;
    //---//while Length( napis_f ) > 0 do

  end;//---//Funkcja Strumieñ_Napis_Wpisz() w Wieloosobowe__Strumieñ_Wyœlij().

var
  ztb,
  czy_b³¹d
    : boolean;
  i,
  j,
  k
    : integer;
  lista : TList;
  zt_tcp_klient_dane : TTCP_Klient_Dane;
  strumieñ_pamiêci_l : TMemoryStream;
  zt_id_bytes : TIdBytes;
begin//Funkcja Wieloosobowe__Strumieñ_Wyœlij().

  //
  // Funkcja wysy³a zadany rekord danych - komenda (komenda_f) jest wysy³ana zawsze.
  //
  // Parametry:
  //   komenda_f - rodzaj rekordu.
  //   peer_port_f
  //       (parametr nie ma znaczenia gdy wysy³a klient)
  //     -99 - serwer wysy³a do wszystkich klientów.
  //     <> -99 - serwer wysy³a do wskazanego klienta.
  //   wartoœæ_f - wartoœæ wysy³ana w poleceniu.
  //   czy_udp_f
  //     false - wysy³a poprzez TCP.
  //     true - wysy³a poprzez UDP.
  //


  if   (  Trim( komenda_f ) = ''  )
    or (
             ( komenda_f <> wieloosobowe__komenda__gra__dane_wys³ane_c )
         and ( komenda_f <> wieloosobowe__komenda__gra__mg³a_c )
         and ( komenda_f <> wieloosobowe__komenda__gra__morze_wzburzenie_c )
         and ( komenda_f <> wieloosobowe__komenda__gra__noc_c )
         and ( komenda_f <> wieloosobowe__komenda__gra__rozpocznij_c )
         and ( komenda_f <> wieloosobowe__komenda__gra__serwer_czas_wyœlij_c )
         and ( komenda_f <> wieloosobowe__komenda__gra__statystyki_wyœlij_c )
         and ( komenda_f <> wieloosobowe__komenda__gra__wiatr_c )
         and ( komenda_f <> wieloosobowe__komenda__gra__wspó³czynnik_prêdkoœci_c )
         and ( komenda_f <> wieloosobowe__komenda__gra__wspó³czynnik_trudnoœci_c )
         and ( komenda_f <> wieloosobowe__komenda__gra__wspó³czynniki_inne_c )
         and ( komenda_f <> wieloosobowe__komenda__gra__zakoñcz_c )
         and ( komenda_f <> wieloosobowe__komenda__gracz_gotowoœæ_c )
         and ( komenda_f <> wieloosobowe__komenda__gracz_lista_odœwie¿_c )
         and ( komenda_f <> wieloosobowe__komenda__has³o__sprawdŸ_c )
         and ( komenda_f <> wieloosobowe__komenda__identyfikator__nadaj_c )
         and ( komenda_f <> wieloosobowe__komenda__identyfikator__przypomnij_c )
         and ( komenda_f <> wieloosobowe__komenda__identyfikator__zapamiêtaj_c )
         and ( komenda_f <> wieloosobowe__komenda__informacja_dodatkowa_dodaj_c )
         and ( komenda_f <> wieloosobowe__komenda__odbierz__dŸwiêk_efekt_c )
         and ( komenda_f <> wieloosobowe__komenda__odbierz__gracz__nazwa_c )
         and ( komenda_f <> wieloosobowe__komenda__odbierz__l¹d__definicja_c )
         and ( komenda_f <> wieloosobowe__komenda__odbierz__l¹d__trafienie_c )
         and ( komenda_f <> wieloosobowe__komenda__odbierz__prymitywy_definicja_c )
         and ( komenda_f <> wieloosobowe__komenda__odbierz__rekord_amunicja_c )
         and ( komenda_f <> wieloosobowe__komenda__odbierz__rekord_efekt_c )
         and ( komenda_f <> wieloosobowe__komenda__odbierz__rekord_pokój_rozmów_r_c )
         and ( komenda_f <> wieloosobowe__komenda__odbierz__rekord_statki_c )
         and ( komenda_f <> wieloosobowe__komenda__odbierz__rekord_statki__wysy³ane_rzadziej_c )
         and ( komenda_f <> wieloosobowe__komenda__odbierz__statek__czas_do_zatoniêcia_c )
         and ( komenda_f <> wieloosobowe__komenda__odbierz__statki_definicje_c )
         and ( komenda_f <> wieloosobowe__komenda__pauza_c )
         and ( komenda_f <> wieloosobowe__komenda__schemat_samolot_zmieñ_c )
         //and ( komenda_f <> wieloosobowe__komenda__serwer_wy³¹cza_siê_c )
         and ( komenda_f <> wieloosobowe__komenda__statek__cel_wspó³rzêdne_c )
         and ( komenda_f <> wieloosobowe__komenda__statek__klawisze_obs³uga_c )
         and ( komenda_f <> wieloosobowe__komenda__statek__lotniskowiec__samoloty_wszystkie__punkty_¿ycia_zero_c )
         and ( komenda_f <> wieloosobowe__komenda__statek__przywróæ_do_gry_c )
         and ( komenda_f <> wieloosobowe__komenda__statek__si__samolot_gracza__l¹duj_na_lotniskowcu_gracza_c )
         and ( komenda_f <> wieloosobowe__komenda__statek__sos_nadaje_c )
         and ( komenda_f <> wieloosobowe__komenda__statek__syrena_okrêtowa_klient_nadaje_c )
         and ( komenda_f <> wieloosobowe__komenda__udp__klient_po³¹czony_nadal_c )
         and ( komenda_f <> wieloosobowe__komenda__odbierz__rekord_komunikacja_rekord_testowy_r_c )
         and ( komenda_f <> wieloosobowe__komenda__odbierz__rekord_komunikacja_rekord_testowy_2_r_c )
       ) then
    Exit;


  czy_b³¹d := false;
  strumieñ_pamiêci_l := TMemoryStream.Create();


  {$region 'Zapisuje rekord do strumienia.'}
  //if komenda_f = wieloosobowe__komenda__gra__dane_wys³ane_c then
  //  begin
  //  end
  //else//if komenda_f = wieloosobowe__komenda__gra__dane_wys³ane_c then
  if   ( komenda_f = wieloosobowe__komenda__gra__mg³a_c )
    or ( komenda_f = wieloosobowe__komenda__gra__morze_wzburzenie_c )
    or ( komenda_f = wieloosobowe__komenda__gra__noc_c )
    //or ( komenda_f = wieloosobowe__komenda__gra__wiatr_c )
    or ( komenda_f = wieloosobowe__komenda__gra__wspó³czynnik_prêdkoœci_c )
    or ( komenda_f = wieloosobowe__komenda__gra__wspó³czynnik_trudnoœci_c ) then
    begin

      if czy_serwer_g then
        begin

          // Tylko serwer wysy³a informacjê o wspó³czynnikach gry.

          Strumieñ_Napis_Wpisz( wartoœæ_f, strumieñ_pamiêci_l );

        end;
      //---//if czy_serwer_g then

    end
  else//if   ( komenda_f = wieloosobowe__komenda__gra__mg³a_c ) (...)
  //if komenda_f = wieloosobowe__komenda__gra__rozpocznij_c then
  //  begin
  //  end
  //else//if komenda_f = wieloosobowe__komenda__gra__rozpocznij_c then
  if komenda_f = wieloosobowe__komenda__gra__serwer_czas_wyœlij_c then
    begin

      if czy_serwer_g then
        begin

          // Tylko serwer wysy³a dane o swoim aktualnym czasie.

          //strumieñ_pamiêci_l.Write(  klient__cadencer_current_time__korekta_o_czas_serwera_g, SizeOf( klient__cadencer_current_time__korekta_o_czas_serwera_g )  );
          strumieñ_pamiêci_l.Write(  Gra_GLCadencer.CurrentTime, SizeOf( klient__cadencer_current_time__korekta_o_czas_serwera_g )  );

        end;
      //---//if czy_serwer_g then

    end
  else//if komenda_f = wieloosobowe__komenda__gra__serwer_czas_wyœlij_c then
  if komenda_f = wieloosobowe__komenda__gra__statystyki_wyœlij_c then
    begin

      //if czy_klient_g then
      //  begin
      //
      //    // Tylko klient pyta o dane statystyk.
      //
      //  end
      //else//if czy_klient_g then
      if czy_serwer_g then
        begin

          // Tylko serwer wysy³a dane statystyk.

          for i := 0 to Length( gra_statystyki_r_t ) - 1 do
            begin

              strumieñ_pamiêci_l.Write( gra_statystyki_r_t[ i ], obiekty_wieloosobowe__gra_statystyki_r_rozmiar_c );

            end;
          //---//for i := 0 to Length( gra_statystyki_r_t ) - 1 do

        end;
      //---//if czy_serwer_g then

    end
  else//if komenda_f = wieloosobowe__komenda__gra__statystyki_wyœlij_c then
  if komenda_f = wieloosobowe__komenda__gra__wiatr_c then
    begin

      if czy_serwer_g then
        begin

          // Tylko serwer wysy³a informacjê o parametrach wiatru.

          //strumieñ_pamiêci_l.Write(  wieloosobowe__efekt_r_f.pozycja_ef__owo, SizeOf( wieloosobowe__efekt_r_f.pozycja_ef__owo )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__efekt_r_f.pozycja_ef__owo, SizeOf( GLS.VectorTypes.TVector4d )  );

        end;
      //---//if czy_serwer_g then

    end
  else//if komenda_f = wieloosobowe__komenda__gra__wiatr_c then
  if komenda_f = wieloosobowe__komenda__gra__wspó³czynniki_inne_c then
    begin

      if czy_serwer_g then
        begin

          // Tylko serwer wysy³a informacje o innych wspó³czynnikach gry.

          strumieñ_pamiêci_l.Write(  fale__wysokoœæ_bazowa_g, SizeOf ( fale__wysokoœæ_bazowa_g )  );

          i := L¹d_ComboBox.ItemIndex; // Tylko informacja o nazwie wybranego na serwerze l¹du (bez danych l¹du).
          strumieñ_pamiêci_l.Write(  i, SizeOf ( integer )  );

          ztb := L¹dowanie_U³atwione_CheckBox.Checked;
          strumieñ_pamiêci_l.Write(  ztb, SizeOf ( boolean )  );

          ztb := Projektowy_Tryb_CheckBox.Checked;
          strumieñ_pamiêci_l.Write(  ztb, SizeOf ( boolean )  );

          ztb := Projektowy_Tryb__Grawitacja_Wy³¹cz_CheckBox.Checked;
          strumieñ_pamiêci_l.Write(  ztb, SizeOf ( boolean )  );

          i := Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBox.ItemIndex;
          strumieñ_pamiêci_l.Write(  i, SizeOf ( integer )  );

          ztb := SI__Patrol_Blisko_Zostaje_CheckBox.Checked;
          strumieñ_pamiêci_l.Write(  ztb, SizeOf ( boolean )  );

          ztb := SI__P³ywa_CheckBox.Checked;
          strumieñ_pamiêci_l.Write(  ztb, SizeOf ( boolean )  );

          ztb := SI__Strzela_CheckBox.Checked;
          strumieñ_pamiêci_l.Write(  ztb, SizeOf ( boolean )  );

          i := Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex;
          strumieñ_pamiêci_l.Write(  i, SizeOf ( integer )  );

          ztb := Statki_Przywracaj_Do_Gry_CheckBox.Checked;
          strumieñ_pamiêci_l.Write(  ztb, SizeOf ( boolean )  );

          ztb := Sonarowe_U³atwienie__Klient_Zmieniaæ_Mo¿e_CheckBox.Checked;
          strumieñ_pamiêci_l.Write(  ztb, SizeOf ( boolean )  );

          ztb := Sonarowe_U³atwienie_CheckBox.Checked;
          strumieñ_pamiêci_l.Write(  ztb, SizeOf ( boolean )  );

          ztb := Wiatr_CheckBox.Checked;
          strumieñ_pamiêci_l.Write(  ztb, SizeOf ( boolean )  );

          ztb := Wiatr__Wp³yw_Na_Rozgrywkê_CheckBox.Checked;
          strumieñ_pamiêci_l.Write(  ztb, SizeOf ( boolean )  );

          ztb := Zak³ócanie__Dozwolone_CheckBox.Checked;
          strumieñ_pamiêci_l.Write(  ztb, SizeOf ( boolean )  );

          ztb := Zak³ócanie__Graczy_Nie_SI_Dozwolone_CheckBox.Checked;
          strumieñ_pamiêci_l.Write(  ztb, SizeOf ( boolean )  );


          Strumieñ_Napis_Wpisz( L¹d_ComboBox.Text, strumieñ_pamiêci_l );

          if Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex >= 0 then
            Strumieñ_Napis_Wpisz( Statki_Pozycje_Pocz¹tkowe_ComboBox.Text, strumieñ_pamiêci_l )
          else//if Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex >= 0 then
            Strumieñ_Napis_Wpisz( wieloosobowe__komenda__pozycje_pocz¹tkowe_statków__wed³ug_mapy_c, strumieñ_pamiêci_l );

        end;
      //---//if czy_serwer_g then

    end
  else//if komenda_f = wieloosobowe__komenda__gra__wspó³czynniki_inne_c then
  //if komenda_f = wieloosobowe__komenda__gra__zakoñcz_c then
  //  begin
  //  end
  //else//if komenda_f = wieloosobowe__komenda__gra__zakoñcz_c then
  if komenda_f = wieloosobowe__komenda__gracz_gotowoœæ_c then
    begin

      if czy_serwer_g then
        begin

          // Serwer potwierdza, ¿e gracz jest gotowy.

          if wartoœæ_f = 'Tak' then
            begin

              Strumieñ_Napis_Wpisz( wartoœæ_f, strumieñ_pamiêci_l );

            end;
          //---//if wartoœæ_f = 'Tak' then

        end
      else//if czy_serwer_g then
      if czy_klient_g then
        begin

          // Tylko klient zwraca siê o nadanie statusu gotowoœci.

          Strumieñ_Napis_Wpisz( wartoœæ_f, strumieñ_pamiêci_l );

          if wartoœæ_f = 'Tak' then
            begin

              i := Gracz_Grupa_SpinEdit.Value;
              strumieñ_pamiêci_l.Write(  i, SizeOf ( integer )  );

              i := Statek_ComboBox.ItemIndex;
              strumieñ_pamiêci_l.Write(  i, SizeOf ( integer )  );


              if Statek__Samolot_ComboBox.Color = clWindow then
                i := Statek__Samolot_Odczytaj_Schemat_Indeks( Statek__Samolot_ComboBox.Items[ Statek__Samolot_ComboBox.ItemIndex ] )
              else//if Statek__Samolot_ComboBox.Color = clWindow then
                i := -1; // Statek nie jest lotniskowcem.

              strumieñ_pamiêci_l.Write(  i, SizeOf ( integer )  );


              Strumieñ_Napis_Wpisz( Gracz_Nazwa_Edit.Text, strumieñ_pamiêci_l );

            end;
          //---//if wartoœæ_f = 'Tak' then

        end;
      //---//if czy_klient_g then

    end
  else//if komenda_f = wieloosobowe__komenda__gracz_gotowoœæ_c then
  if komenda_f = wieloosobowe__komenda__gracz_lista_odœwie¿_c then
    begin

      if czy_serwer_g then
        begin

          // Tylko serwer wysy³a listê graczy.

          //Strumieñ_Napis_Wpisz( L¹d_ComboBox.Text, strumieñ_pamiêci_l );
          //
          //if Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex >= 0 then
          //  Strumieñ_Napis_Wpisz( Statki_Pozycje_Pocz¹tkowe_ComboBox.Text, strumieñ_pamiêci_l )
          //else//if Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex >= 0 then
          //  Strumieñ_Napis_Wpisz( wieloosobowe__komenda__pozycje_pocz¹tkowe_statków__wed³ug_mapy_c, strumieñ_pamiêci_l );


          for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
            begin

              zt_tcp_klient_dane := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]);


              strumieñ_pamiêci_l.Write(  zt_tcp_klient_dane.dane_wys³ane__kd, SizeOf( boolean )  );
              strumieñ_pamiêci_l.Write(  zt_tcp_klient_dane.gotowy__kd, SizeOf( boolean )  );
              strumieñ_pamiêci_l.Write(  zt_tcp_klient_dane.od³¹czony__kd, SizeOf( boolean )  );
              strumieñ_pamiêci_l.Write(  zt_tcp_klient_dane.w_grze__kd, SizeOf( boolean )  );

              strumieñ_pamiêci_l.Write(  zt_tcp_klient_dane.identyfikator__kd, SizeOf( integer )  );
              strumieñ_pamiêci_l.Write(  zt_tcp_klient_dane.id_grupa__kd, SizeOf( integer )  );
              strumieñ_pamiêci_l.Write(  zt_tcp_klient_dane.id_statek_schemat__kd, SizeOf( integer )  );
              strumieñ_pamiêci_l.Write(  zt_tcp_klient_dane.id_statek__samolot_schemat__kd, SizeOf( integer )  );
              strumieñ_pamiêci_l.Write(  zt_tcp_klient_dane.peer_port_tcp__kd, SizeOf( integer )  );
              strumieñ_pamiêci_l.Write(  zt_tcp_klient_dane.peer_port_udp__kd, SizeOf( integer )  );

              strumieñ_pamiêci_l.Write(  zt_tcp_klient_dane.data_czas__od³¹czenia__kd, SizeOf( TDateTime )  );
              strumieñ_pamiêci_l.Write(  zt_tcp_klient_dane.data_czas__pod³¹czenia__kd, SizeOf( TDateTime )  );
              strumieñ_pamiêci_l.Write(  zt_tcp_klient_dane.data_czas__pod³¹czenia_ostatniego__kd, SizeOf( TDateTime )  );
              strumieñ_pamiêci_l.Write(  zt_tcp_klient_dane.data_czas__udp_kontakt__kd, SizeOf( TDateTime )  );

              strumieñ_pamiêci_l.Write( zt_tcp_klient_dane.nazwa__kd, wieloosobowe_string__rozmiar_c );

            end;
          //---//klienci_lista_list

        end
      //---//if czy_serwer_g then

      // Klienta pyta serwer o aktualn¹ listê graczy.

    end
  else//if komenda_f = wieloosobowe__komenda__gracz_lista_odœwie¿_c then
  if komenda_f = wieloosobowe__komenda__has³o__sprawdŸ_c then
    begin

      if czy_serwer_g then
        begin

          // Serwer wysy³a odpowiedŸ czy has³o jest prawid³owe.

          Strumieñ_Napis_Wpisz( wartoœæ_f, strumieñ_pamiêci_l );

        end;
      //else//if czy_serwer_g then
      //if czy_klient_g then
      //  begin
      //
      //    // Tylko klient wysy³a has³o do sprawdzenia.
      //
      //    Strumieñ_Napis_Wpisz( Has³o_Edit.Text, strumieñ_pamiêci_l );
      //
      //  end;
      ////---//if czy_klient_g then

    end
  else//if komenda_f = wieloosobowe__komenda__has³o__sprawdŸ_c then
  if komenda_f = wieloosobowe__komenda__identyfikator__nadaj_c then
    begin

      if czy_klient_g then
        begin

          // Tylko klient zwraca siê o nadanie identyfikatora.

          Strumieñ_Napis_Wpisz( Has³o_Edit.Text, strumieñ_pamiêci_l ); // Tylko klient wysy³a has³o do sprawdzenia.

        end;
      //---//if czy_klient_g then

    end
  else//if komenda_f = wieloosobowe__komenda__identyfikator__nadaj_c then
  if komenda_f = wieloosobowe__komenda__identyfikator__przypomnij_c then
    begin

      if czy_klient_g then
        begin

          // Tylko klient przypomina swój identyfikator.

          Strumieñ_Napis_Wpisz( Has³o_Edit.Text, strumieñ_pamiêci_l ); // Tylko klient wysy³a has³o do sprawdzenia.
          Strumieñ_Napis_Wpisz( wartoœæ_f, strumieñ_pamiêci_l );

        end;
      //---//if czy_klient_g then

    end
  else//if komenda_f = wieloosobowe__komenda__identyfikator__przypomnij_c then
  if komenda_f = wieloosobowe__komenda__identyfikator__zapamiêtaj_c then
    begin

      if czy_serwer_g then
        begin

          // Tylko serwer nadaje identyfikator.

          Strumieñ_Napis_Wpisz( wartoœæ_f, strumieñ_pamiêci_l );

        end;
      //---//if czy_serwer_g then

    end
  else//if komenda_f = wieloosobowe__komenda__identyfikator__zapamiêtaj_c then
  if komenda_f = wieloosobowe__komenda__informacja_dodatkowa_dodaj_c then
    begin

      if czy_serwer_g then
        begin

          // Tylko serwer wysy³a informacje.

          Strumieñ_Napis_Wpisz( wartoœæ_f, strumieñ_pamiêci_l );

        end;
      //---//if czy_serwer_g then

    end
  else//if komenda_f = wieloosobowe__komenda__informacja_dodatkowa_dodaj_c then
  if komenda_f = wieloosobowe__komenda__odbierz__dŸwiêk_efekt_c then
    begin

      if czy_serwer_g then
        begin

          // Tylko serwer wysy³a informacje o efekcie dŸwiêkowym.

          strumieñ_pamiêci_l.Write(  wieloosobowe__efekt_r_f.id_statek_ef__owo, SizeOf( integer )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__efekt_r_f.czas_trwania__owo, SizeOf( Int64 )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__efekt_r_f.dŸwiêk_efekt_rodzaj_owo, SizeOf( TDŸwiêk_Efekt_Rodzaj )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__efekt_r_f.pozycja_ef__owo, SizeOf( GLS.VectorTypes.TVector4d )  );

        end;
      //---//if czy_serwer_g then

    end
  else//if komenda_f = wieloosobowe__komenda__odbierz__dŸwiêk_efekt_c then
  if komenda_f = wieloosobowe__komenda__odbierz__gracz__nazwa_c then
    begin

      // Klient zwraca siê o przes³anie nazwy graczy.
      // Serwer wysy³a nazwy graczy.

      Strumieñ_Napis_Wpisz( wartoœæ_f, strumieñ_pamiêci_l );

    end
  else//if komenda_f = wieloosobowe__komenda__odbierz__gracz__nazwa_c then
  if komenda_f = wieloosobowe__komenda__odbierz__l¹d__definicja_c then
    begin

      if not czy_klient_g then
        begin

          // Tylko serwer wysy³a dane o l¹dzie.

          Strumieñ_Napis_Wpisz( l¹d_definicja_g, strumieñ_pamiêci_l );

          i := L¹d_ComboBox.ItemIndex;
          strumieñ_pamiêci_l.Write(  i, SizeOf( integer )  );

        end;
      //---//if not czy_klient_g then

    end
  else//if komenda_f = wieloosobowe__komenda__odbierz__l¹d__definicja_c then
  if komenda_f = wieloosobowe__komenda__odbierz__l¹d__trafienie_c then
    begin

      if not czy_klient_g then
        begin

          // Tylko serwer wysy³a dane o zmianie punktów ¿ycia l¹du.

          Strumieñ_Napis_Wpisz( wartoœæ_f, strumieñ_pamiêci_l );

        end;
      //---//if not czy_klient_g then

    end
  else//if komenda_f = wieloosobowe__komenda__odbierz__l¹d__trafienie_c then
  if komenda_f = wieloosobowe__komenda__odbierz__prymitywy_definicja_c then
    begin

      if not czy_klient_g then
        begin

          // Tylko serwer wysy³a dane o prymitywach.

          try
            i := StrToInt( wartoœæ_f );
          except
            i := -99;
          end;
          //---//try

          if    ( i >= 0 )
            and (  i <= Length( prymitywy_lista_t ) - 1  ) then
            begin

              Strumieñ_Napis_Wpisz( prymitywy_lista_t[ i ].plik_nazwa__sl, strumieñ_pamiêci_l );
              Strumieñ_Napis_Wpisz( prymitywy_lista_t[ i ].treœæ__sl, strumieñ_pamiêci_l );

            end;
          //---//if    ( i >= 0 ) (...)

        end;
      //---//if not czy_klient_g then

    end
  else//if komenda_f = wieloosobowe__komenda__odbierz__prymitywy_definicja_c then
  if komenda_f = wieloosobowe__komenda__odbierz__rekord_amunicja_c then
    begin

      Wieloosobowe_Amunicja_Parametry_Odczytaj();


      for i := 0 to Length( wieloosobowe__amunicja_t ) - 1 do
        begin

          strumieñ_pamiêci_l.Write( wieloosobowe__amunicja_t[ i ], obiekty_wieloosobowe__amunicja_r__rozmiar_c );

        end;
      //---//for i := 0 to Length( wieloosobowe__amunicja_t ) - 1 do

    end
  else//if komenda_f = wieloosobowe__komenda__odbierz__rekord_amunicja_c then
  if komenda_f = wieloosobowe__komenda__odbierz__rekord_efekt_c then
    begin

      strumieñ_pamiêci_l.Write( wieloosobowe__efekt_r_f, obiekty_wieloosobowe__efekt_r__rozmiar_c );

      // Efekt wysy³any jako tabela.
      //for i := 0 to Length( wieloosobowe__efekt_t ) - 1 do
      //  begin
      //
      //    if not wieloosobowe__efekt_t[ i ].wys³ane then
      //      begin
      //
      //        strumieñ_pamiêci_l.Write( wieloosobowe__efekt_t[ i ], obiekty_wieloosobowe__efekt_r__rozmiar_c );
      //        wieloosobowe__efekt_t[ i ].wys³ane := true;
      //
      //      end;
      //    //---//if not wieloosobowe__efekt_t[ i ].wys³ane then
      //
      //  end;
      ////---//for i := 0 to Length( wieloosobowe__efekt_t ) - 1 do

    end
  else//if komenda_f = wieloosobowe__komenda__odbierz__rekord_efekt_c then
  if komenda_f = wieloosobowe__komenda__odbierz__rekord_pokój_rozmów_r_c then
    begin

      strumieñ_pamiêci_l.Write(  pokój_rozmów_r_f.id_nadawca, SizeOf( integer )  );
      strumieñ_pamiêci_l.Write(  pokój_rozmów_r_f.id_odbiorca, SizeOf( integer )  );
      strumieñ_pamiêci_l.Write(  pokój_rozmów_r_f.odbiorca_rodzaj, SizeOf( TPokój_Rozmów__Odbiorca_Rodzaj )  );
      strumieñ_pamiêci_l.Write(  pokój_rozmów_r_f.data_czas_wys³ania, SizeOf( TDateTime )  );
      Strumieñ_Napis_Wpisz( pokój_rozmów_r_f.wiadomoœæ, strumieñ_pamiêci_l );

    end
  else//if komenda_f = wieloosobowe__komenda__odbierz__rekord_pokój_rozmów_r_c then
  if komenda_f = wieloosobowe__komenda__odbierz__rekord_statki_c then
    begin

      Wieloosobowe_Statki__Parametry_Odczytaj();

      {$region 'Zakomentowane - obs³ugiwane w taki sposób zg³asza b³êdy dostêpu - wieloosobowe__komenda__odbierz__rekord_statki_c.'}
      //for i := 0 to Length( wieloosobowe__statki_t ) - 1 do
      //  begin
      //
      //    strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ], obiekty_wieloosobowe__statki_r__rozmiar_c );
      //
      //
      //    for j := 0 to Length( wieloosobowe__statki_t[ i ].œruba_obrót_k¹t ) - 1 do
      //      strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].œruba_obrót_k¹t[ j ], SizeOf( real )  );
      //
      //
      //    for j := 0 to Length( wieloosobowe__statki_t[ i ].artyleria_t ) - 1 do
      //      begin
      //
      //        strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].artyleria_t[ j ], obiekty_wieloosobowe__dzia³o_r__rozmiar_c  );
      //
      //        for k := 0 to Length( wieloosobowe__statki_t[ i ].artyleria_t[ j ].obiekty_wieloosobowe_lufa_r_t ) - 1 do
      //          strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].artyleria_t[ j ].obiekty_wieloosobowe_lufa_r_t[ k ], obiekty_wieloosobowe__lufa_r__rozmiar_c );
      //
      //      end;
      //    //---//for j := 0 to Length( wieloosobowe__statki_t[ i ].artyleria_t ) - 1 do
      //
      //    for j := 0 to Length( wieloosobowe__statki_t[ i ].dzia³a_t ) - 1 do
      //      begin
      //
      //        strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].dzia³a_t[ j ], obiekty_wieloosobowe__dzia³o_r__rozmiar_c  );
      //
      //        for k := 0 to Length( wieloosobowe__statki_t[ i ].dzia³a_t[ j ].obiekty_wieloosobowe_lufa_r_t ) - 1 do
      //          strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].dzia³a_t[ j ].obiekty_wieloosobowe_lufa_r_t[ k ], obiekty_wieloosobowe__lufa_r__rozmiar_c );
      //
      //      end;
      //    //---//for j := 0 to Length( wieloosobowe__statki_t[ i ].dzia³a_t ) - 1 do
      //
      //    for j := 0 to Length( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t ) - 1 do
      //      begin
      //
      //        strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t[ j ], obiekty_wieloosobowe__dzia³o_r__rozmiar_c  );
      //
      //        for k := 0 to Length( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t[ j ].obiekty_wieloosobowe_lufa_r_t ) - 1 do
      //          strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t[ j ].obiekty_wieloosobowe_lufa_r_t[ k ], obiekty_wieloosobowe__lufa_r__rozmiar_c );
      //
      //      end;
      //    //---//for j := 0 to Length( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t ) - 1 do
      //
      //  end;
      ////---//for i := 0 to Length( wieloosobowe__statki_t ) - 1 do
      {$endregion 'Zakomentowane - obs³ugiwane w taki sposób zg³asza b³êdy dostêpu - wieloosobowe__komenda__odbierz__rekord_statki_c.'}


      {$region 'wieloosobowe__komenda__odbierz__rekord_statki_c.'}
      for i := 0 to Length( wieloosobowe__statki_t ) - 1 do
        begin

          //strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ], obiekty_wieloosobowe__statki_r__rozmiar_c );

          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].czy_lotniskowiec__owo, SizeOf( boolean )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].czy_samolot__owo, SizeOf( boolean )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].czy_samolot__kolizja__owo, SizeOf( boolean )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].czy_samolot__na_lotniskowcu__owo, SizeOf( boolean )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].czy_wszystkie_lufy__owo, SizeOf( boolean )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].broñ_indeks_zmieniaj__owo, SizeOf( boolean )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].obracaj_dzia³a__owo, SizeOf( boolean )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].obracaj_dzia³a__na_k¹t_wyznaczony__owo, SizeOf( boolean )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].podnoœ_lufy__owo, SizeOf( boolean )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].podnoœ_lufy__na_k¹t_wyznaczony__owo, SizeOf( boolean )  );
          //strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].przeliczone_st__owo, SizeOf( boolean )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].œwiat³a_w³¹czone__owo, SizeOf( boolean )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].œwiat³a_dodatkowe_w³¹czone__owo, SizeOf( boolean )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].zanurzenie_peryskopowe__przekroczone__owo, SizeOf( boolean )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].zanurzenie_zadane_przekraczaj_100_procent__owo, SizeOf( boolean )  );

          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].id_gracz__owo, SizeOf( integer )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].id_grupa__owo, SizeOf( integer )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].id_statek_st__owo, SizeOf( integer )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].id_statek_schemat__owo, SizeOf( integer )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].id_statek__lotniskowiec__ma_samolot_na_pok³adzie__owo, SizeOf( integer )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].id_statek__lotniskowiec__samolot_w_trakcie_l¹dowanie__owo, SizeOf( integer )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].artyleria_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].dzia³a_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].kotwica_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].si_aktywnoœæ__owo, SizeOf( integer )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].si_strzelanie_tryb__owo, SizeOf( integer )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].ster_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].ster_g³êbokoœci_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].œruba_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );

          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].schemat_samolot_zmiana_czas_i__owo, SizeOf( Int64 )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].toniêcie__czas_i__owo, SizeOf( Int64 )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].uszkodzone_czas_i__kotwica__owo, SizeOf( Int64 )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].uszkodzone_czas_i__radar__owo, SizeOf( Int64 )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].uszkodzone_czas_i__radio__owo, SizeOf( Int64 )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].uszkodzone_czas_i__sonar__owo, SizeOf( Int64 )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].uszkodzone_czas_i__ster__owo, SizeOf( Int64 )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].uszkodzone_czas_i__ster_g³êbokoœci__owo, SizeOf( Int64 )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].uszkodzone_czas_i__œruba__owo, SizeOf( Int64 )  );

          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].falowanie_bok_skrêt__owo, SizeOf( real )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].falowanie_przód_pu³ap__owo, SizeOf( real )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].falowanie_przód_ruch__owo, SizeOf( real )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].lotniskowiec__zasoby_odnawianie__prze³adowanie_procent__owo, SizeOf( real )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].prêdkoœæ_aktualna_procent__wzglêdny__owo, SizeOf( real )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__k¹t__owo, SizeOf( real )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].prêdkoœæ_przyspieszanie__start_z_lotniskowca__prze³adowanie__procent__owo, SizeOf( real )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].prêdkoœæ_zadana_procent__owo, SizeOf( real )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].punkty_¿ycia__owo, SizeOf( real )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].punkty_¿ycia_maksymalne__owo, SizeOf( real )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].punkty_¿ycia_procent_zosta³o__owo, SizeOf( real )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].skrêt_aktualny_procent__owo, SizeOf( real )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].skrêt_zadany_procent__owo, SizeOf( real )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].ster_k¹t__owo, SizeOf( real )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].ster_g³êbokoœci_k¹t__owo, SizeOf( real )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].toniêcie__przechylenie__lewo_prawo__owo, SizeOf( real )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].toniêcie__przechylenie__przód_ty³__owo, SizeOf( real )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].zanurzenie_pu³ap__aktualne__owo, SizeOf( real )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].zanurzenie_pu³ap__aktualne_procent__owo, SizeOf( real )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].zanurzenie_pu³ap__zadane_procent__owo, SizeOf( real )  );

          //strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].gracz__nazwa__owo, SizeOf( TWieloosobowe_String )  );

          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].cel_wspó³rzêdne_st__owo, SizeOf( GLS.VectorGeometry.TAffineVector )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].kierunek_st__owo, SizeOf( TWieloosobowe__Wektor_4 )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].pozycja_st__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

          strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].amunicja_rodzaj_st__owo, SizeOf( Typy_Wspolne.TAmunicja_Rodzaj )  );


          for j := 0 to Length( wieloosobowe__statki_t[ i ].kotwica__ruch_etap_t__owo ) - 1 do
            strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].kotwica__ruch_etap_t__owo[ j ], SizeOf( TKotwica_Ruch_Etap )  );

          for j := 0 to Length( wieloosobowe__statki_t[ i ].kotwica__uszkodzone_czas_i_t__owo ) - 1 do
            strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].kotwica__uszkodzone_czas_i_t__owo[ j ], SizeOf( Int64 )  );

          for j := 0 to Length( wieloosobowe__statki_t[ i ].kotwica__wspó³rzêdne_t__owo ) - 1 do
            strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].kotwica__wspó³rzêdne_t__owo[ j ], SizeOf( GLS.VectorGeometry.TAffineVector )  );

          for j := 0 to Length( wieloosobowe__statki_t[ i ].ster__uszkodzone_czas_i_t__owo ) - 1 do
            strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].ster__uszkodzone_czas_i_t__owo[ j ], SizeOf( Int64 )  );

          for j := 0 to Length( wieloosobowe__statki_t[ i ].ster_g³êbokoœci__uszkodzone_czas_i_t__owo ) - 1 do
            strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].ster_g³êbokoœci__uszkodzone_czas_i_t__owo[ j ], SizeOf( Int64 )  );

          for j := 0 to Length( wieloosobowe__statki_t[ i ].œruba__obrót_k¹t_t__owo ) - 1 do
            begin

              strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].œruba__obrót_k¹t_t__owo[ j ], SizeOf( real )  );
              strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].œruba__uszkodzone_czas_i_t__owo[ j ], SizeOf( Int64 )  );

            end;
          //---//for j := 0 to Length( wieloosobowe__statki_t[ i ].œruba__obrót_k¹t_t__owo ) - 1 do


          for j := 0 to Length( wieloosobowe__statki_t[ i ].artyleria_t__owo ) - 1 do
            begin

              //strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ], obiekty_wieloosobowe__dzia³o_r__rozmiar_c  );

              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].czy_lot_parabol¹__owo, SizeOf( boolean )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obrót_k¹t__owo, SizeOf( real )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].celownik_linia__podniesienie_k¹t__owo, SizeOf( real )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].celownik_linia__szerokoœæ__owo, SizeOf( single )  );
              //strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].celownik_linia__koñcówki__owo, SizeOf( word )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].celownik_linia__wzór__owo, SizeOf( word )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].amunicja_iloœæ__owo, SizeOf( integer )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].uszkodzone_czas_i__owo, SizeOf( Int64 )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].celownik_linia__kolor__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

              for k := 0 to Length( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo ) - 1 do
                begin

                  //strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ], obiekty_wieloosobowe__lufa_r__rozmiar_c );

                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_podniesienie_k¹t__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_pozycja_z__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_procent__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].strza³_gotowoœæ__owo, SizeOf( boolean )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__kolor__owo, SizeOf( TWieloosobowe__Wektor_4 )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__pozycja__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

                end;
              //---//for k := 0 to Length( wieloosobowe__statki_t[ i ].artyleria_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo ) - 1 do

            end;
          //---//for j := 0 to Length( wieloosobowe__statki_t[ i ].artyleria_t__owo ) - 1 do

          for j := 0 to Length( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo ) - 1 do
            begin

              //strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ], obiekty_wieloosobowe__dzia³o_r__rozmiar_c  );

              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obrót_k¹t__owo, SizeOf( real )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].celownik_linia__podniesienie_k¹t__owo, SizeOf( real )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].celownik_linia__szerokoœæ__owo, SizeOf( single )  );
              //strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].celownik_linia__koñcówki__owo, SizeOf( word )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].celownik_linia__wzór__owo, SizeOf( word )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].amunicja_iloœæ__owo, SizeOf( integer )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].uszkodzone_czas_i__owo, SizeOf( Int64 )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].celownik_linia__kolor__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

              for k := 0 to Length( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo ) - 1 do
                begin

                  //strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ], obiekty_wieloosobowe__lufa_r__rozmiar_c );

                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_podniesienie_k¹t__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_pozycja_z__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_procent__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].strza³_gotowoœæ__owo, SizeOf( boolean )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__kolor__owo, SizeOf( TWieloosobowe__Wektor_4 )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__pozycja__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

                end;
              //---//for k := 0 to Length( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo ) - 1 do

            end;
          //---//for j := 0 to Length( wieloosobowe__statki_t[ i ].bomba_g³êbinowa_t__owo ) - 1 do

          for j := 0 to Length( wieloosobowe__statki_t[ i ].dzia³a_t__owo ) - 1 do
            begin

              //strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ], obiekty_wieloosobowe__dzia³o_r__rozmiar_c  );

              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obrót_k¹t__owo, SizeOf( real )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].celownik_linia__podniesienie_k¹t__owo, SizeOf( real )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].celownik_linia__szerokoœæ__owo, SizeOf( single )  );
              //strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].celownik_linia__koñcówki__owo, SizeOf( word )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].celownik_linia__wzór__owo, SizeOf( word )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].amunicja_iloœæ__owo, SizeOf( integer )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].uszkodzone_czas_i__owo, SizeOf( Int64 )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].celownik_linia__kolor__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

              for k := 0 to Length( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo ) - 1 do
                begin

                  //strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ], obiekty_wieloosobowe__lufa_r__rozmiar_c );

                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_podniesienie_k¹t__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_pozycja_z__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_procent__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].strza³_gotowoœæ__owo, SizeOf( boolean )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__kolor__owo, SizeOf( TWieloosobowe__Wektor_4 )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__pozycja__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

                end;
              //---//for k := 0 to Length( wieloosobowe__statki_t[ i ].dzia³a_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo ) - 1 do

            end;
          //---//for j := 0 to Length( wieloosobowe__statki_t[ i ].dzia³a_t__owo ) - 1 do

          for j := 0 to Length( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo ) - 1 do
            begin

              //strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ], obiekty_wieloosobowe__dzia³o_r__rozmiar_c  );

              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obrót_k¹t__owo, SizeOf( real )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].celownik_linia__podniesienie_k¹t__owo, SizeOf( real )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].celownik_linia__szerokoœæ__owo, SizeOf( single )  );
              //strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].celownik_linia__koñcówki__owo, SizeOf( word )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].celownik_linia__wzór__owo, SizeOf( word )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].amunicja_iloœæ__owo, SizeOf( integer )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].uszkodzone_czas_i__owo, SizeOf( Int64 )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].celownik_linia__kolor__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

              for k := 0 to Length( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo ) - 1 do
                begin

                  //strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ], obiekty_wieloosobowe__lufa_r__rozmiar_c );

                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_podniesienie_k¹t__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_pozycja_z__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_procent__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].strza³_gotowoœæ__owo, SizeOf( boolean )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__kolor__owo, SizeOf( TWieloosobowe__Wektor_4 )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__pozycja__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

                end;
              //---//for k := 0 to Length( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo ) - 1 do

            end;
          //---//for j := 0 to Length( wieloosobowe__statki_t[ i ].je¿e_g³êbinowe_t__owo ) - 1 do

          for j := 0 to Length( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo ) - 1 do
            begin

              //strumieñ_pamiêci_l.Write(  wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ], obiekty_wieloosobowe__dzia³o_r__rozmiar_c  );

              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obrót_k¹t__owo, SizeOf( real )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].celownik_linia__podniesienie_k¹t__owo, SizeOf( real )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].celownik_linia__szerokoœæ__owo, SizeOf( single )  );
              //strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].celownik_linia__koñcówki__owo, SizeOf( word )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].celownik_linia__wzór__owo, SizeOf( word )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].amunicja_iloœæ__owo, SizeOf( integer )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__d³ugoœæ_tabeli__owo, SizeOf( integer )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].uszkodzone_czas_i__owo, SizeOf( Int64 )  );
              strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].celownik_linia__kolor__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

              for k := 0 to Length( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo ) - 1 do
                begin

                  //strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ], obiekty_wieloosobowe__lufa_r__rozmiar_c );

                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_podniesienie_k¹t__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].lufa_pozycja_z__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_procent__owo, SizeOf( real )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].strza³_gotowoœæ__owo, SizeOf( boolean )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__kolor__owo, SizeOf( TWieloosobowe__Wektor_4 )  );
                  strumieñ_pamiêci_l.Write( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo[ k ].prze³adowanie_wskaŸnik__pozycja__owo, SizeOf( TWieloosobowe__Wektor_4 )  );

                end;
              //---//for k := 0 to Length( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo[ j ].obiekty_wieloosobowe_lufa_r_t__owo ) - 1 do

            end;
          //---//for j := 0 to Length( wieloosobowe__statki_t[ i ].torpedy_wyrzutnie_t__owo ) - 1 do


          //Strumieñ_Napis_Wpisz( wieloosobowe__statki_t[ i ].radar_id_l¹dy_w_zasiêgu__owo, strumieñ_pamiêci_l );
          //Strumieñ_Napis_Wpisz( wieloosobowe__statki_t[ i ].radar_id_statki_w_zasiêgu__owo, strumieñ_pamiêci_l );
          //Strumieñ_Napis_Wpisz( wieloosobowe__statki_t[ i ].radio_id_l¹dy_w_zasiêgu__owo, strumieñ_pamiêci_l );
          //Strumieñ_Napis_Wpisz( wieloosobowe__statki_t[ i ].radio_id_statki_w_zasiêgu__owo, strumieñ_pamiêci_l );
          //Strumieñ_Napis_Wpisz( wieloosobowe__statki_t[ i ].sonar_id_statki_w_zasiêgu__owo, strumieñ_pamiêci_l );

        end;
      //---//for i := 0 to Length( wieloosobowe__statki_t ) - 1 do
      {$endregion 'wieloosobowe__komenda__odbierz__rekord_statki_c.'}


      // Tutaj mo¿na przetestowaæ odczytanie strumienia. //???
      // Wieloosobowe_Statki__Rekord_Czyœæ();
      // strumieñ_pamiêci_l.Position := 0; // while strumieñ_pamiêci_l.Position < strumieñ_pamiêci_l.Size do (...)

    end
  else//if komenda_f = wieloosobowe__komenda__odbierz__rekord_statki_c then
  if komenda_f = wieloosobowe__komenda__odbierz__rekord_statki__wysy³ane_rzadziej_c then
    begin

      Wieloosobowe_Statki__Wysy³ane_Rzadziej__Parametry_Odczytaj();

      for i := 0 to Length( wieloosobowe__statki__wysy³ane_rzadziej_t ) - 1 do
        begin

          strumieñ_pamiêci_l.Write(  wieloosobowe__statki__wysy³ane_rzadziej_t[ i ].id_statek_st__owo_wr, SizeOf( integer )  );

          Strumieñ_Napis_Wpisz( wieloosobowe__statki__wysy³ane_rzadziej_t[ i ].radar_id_l¹dy_w_zasiêgu__owo_wr, strumieñ_pamiêci_l );
          Strumieñ_Napis_Wpisz( wieloosobowe__statki__wysy³ane_rzadziej_t[ i ].radar_id_statki_w_zasiêgu__owo_wr, strumieñ_pamiêci_l );
          Strumieñ_Napis_Wpisz( wieloosobowe__statki__wysy³ane_rzadziej_t[ i ].radio_id_l¹dy_w_zasiêgu__owo_wr, strumieñ_pamiêci_l );
          Strumieñ_Napis_Wpisz( wieloosobowe__statki__wysy³ane_rzadziej_t[ i ].radio_id_statki_w_zasiêgu__owo_wr, strumieñ_pamiêci_l );
          Strumieñ_Napis_Wpisz( wieloosobowe__statki__wysy³ane_rzadziej_t[ i ].sonar_id_statki_w_zasiêgu__owo_wr, strumieñ_pamiêci_l );

        end;
      //---//for i := 0 to Length( wieloosobowe__statki__wysy³ane_rzadziej_t ) - 1 do

    end
  else//if komenda_f = wieloosobowe__komenda__odbierz__rekord_statki__wysy³ane_rzadziej_c then
  if komenda_f = wieloosobowe__komenda__odbierz__statek__czas_do_zatoniêcia_c then
    begin

      if czy_serwer_g then
        begin

          // Tylko serwer wysy³a informacjê o czasie zatoniêcia statku.

          Strumieñ_Napis_Wpisz( wartoœæ_f, strumieñ_pamiêci_l );

        end;
      //---//if czy_serwer_g then

    end
  else//if komenda_f = wieloosobowe__komenda__odbierz__statek__czas_do_zatoniêcia_c then
  if komenda_f = wieloosobowe__komenda__odbierz__statki_definicje_c then
    begin

      if not czy_klient_g then
        begin

          // Tylko serwer wysy³a dane o statkach.

          for i := 0 to Length( statki_lista_t ) - 1 do
            begin

              strumieñ_pamiêci_l.Write(  statki_lista_t[ i ].czy_lotniskowiec__sl, SizeOf( boolean )  );
              strumieñ_pamiêci_l.Write(  statki_lista_t[ i ].czy_samolot__sl, SizeOf( boolean )  );
              Strumieñ_Napis_Wpisz( statki_lista_t[ i ].id__sl, strumieñ_pamiêci_l );
              Strumieñ_Napis_Wpisz( statki_lista_t[ i ].nazwa__sl, strumieñ_pamiêci_l );
              Strumieñ_Napis_Wpisz( statki_lista_t[ i ].opis__sl, strumieñ_pamiêci_l );
              Strumieñ_Napis_Wpisz( statki_lista_t[ i ].plik_nazwa__sl, strumieñ_pamiêci_l );
              Strumieñ_Napis_Wpisz( statki_lista_t[ i ].treœæ__sl, strumieñ_pamiêci_l );

            end;
          //---//for i := 0 to Length( statki_lista_t ) - 1 do

        end;
      //---//if not czy_klient_g then

    end
  else//if komenda_f = wieloosobowe__komenda__odbierz__statki_definicje_c then
  if komenda_f = wieloosobowe__komenda__pauza_c then
    begin

      if czy_serwer_g then
        begin

          // Tylko serwer wysy³a informacjê o pauzie.

          Strumieñ_Napis_Wpisz( wartoœæ_f, strumieñ_pamiêci_l );

        end;
      //---//if czy_serwer_g then

    end
  else//if komenda_f = wieloosobowe__komenda__pauza_c then
  if komenda_f = wieloosobowe__komenda__schemat_samolot_zmieñ_c then
    begin

      if czy_klient_g then
        begin

          // Tylko klient wysy³a informacje o chêci zmiany schematu samolotu na serwer.

          //if Statek_Gracza__Gracz_Tryb_Zwróæ() <> nil then
          //  i := Statek_Gracza__Gracz_Tryb_Zwróæ().id_statek
          //else//if Statek_Gracza__Gracz_Tryb_Zwróæ() <> nil then
          if    ( samolot__statek_gracza <> nil ) // Sprawdza czy statkiem gracza jest lotniskowiec.
            and ( statek_gracza <> nil )
            and ( statek_gracza.czy_lotniskowiec ) then
            begin

              //i := samolot__statek_gracza.id_statek;
              //strumieñ_pamiêci_l.Write(  i, SizeOf( integer )  );
              strumieñ_pamiêci_l.Write(  samolot__statek_gracza.id_statek, SizeOf( integer )  );
              Strumieñ_Napis_Wpisz( wartoœæ_f, strumieñ_pamiêci_l );

            end
          else//if    ( samolot__statek_gracza <> nil ) (...)
            //i := -99;
            czy_b³¹d := true; // Nic nie wysy³a w takiej sytuacji.

        end
      else//if czy_klient_g then
      if czy_serwer_g then
        begin

          // Tylko serwer wysy³a informacjê czy zg³oszenie o zmianie schematu samolotu od klienta zosta³o zaakceptowane.

          Strumieñ_Napis_Wpisz( wartoœæ_f, strumieñ_pamiêci_l );

        end;
      //---//if czy_serwer_g then

    end
  else//if komenda_f = wieloosobowe__komenda__schemat_samolot_zmieñ_c then
  if komenda_f = wieloosobowe__komenda__serwer_wy³¹cza_siê_c then
    begin

      strumieñ_pamiêci_l.Write(  wieloosobowe__komenda__serwer_wy³¹cza_siê_c, SizeOf ( wieloosobowe__komenda__serwer_wy³¹cza_siê_c )  );

    end
  else//if komenda_f = wieloosobowe__komenda__serwer_wy³¹cza_siê_c then
  if komenda_f = wieloosobowe__komenda__statek__cel_wspó³rzêdne_c then
    begin

      if czy_klient_g then
        begin

          // Tylko klient wysy³a informacje o wspó³rzêdnych swojego celu na serwer.

          //strumieñ_pamiêci_l.Write( wieloosobowe__statek_cel_wspó³rzêdne_r, obiekty_wieloosobowe__statek_cel_wspó³rzêdne_r__rozmiar_c );

          strumieñ_pamiêci_l.Write(  wieloosobowe__statek_cel_wspó³rzêdne_r.id_statek_cel__owo, SizeOf( integer )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statek_cel_wspó³rzêdne_r.cel_wspó³rzêdne_cel__owo.X, SizeOf( single )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statek_cel_wspó³rzêdne_r.cel_wspó³rzêdne_cel__owo.Y, SizeOf( single )  );
          strumieñ_pamiêci_l.Write(  wieloosobowe__statek_cel_wspó³rzêdne_r.cel_wspó³rzêdne_cel__owo.Z, SizeOf( single )  );

        end;
      //---//if czy_klient_g then

    end
  else//if komenda_f = wieloosobowe__komenda__statek__cel_wspó³rzêdne_c then
  if komenda_f = wieloosobowe__komenda__statek__klawisze_obs³uga_c then
    begin

      if czy_klient_g then // Tylko klient wysy³a informacje o obs³udze klawiszy na serwer.
        strumieñ_pamiêci_l.Write( wieloosobowe__statek_klawisze_obs³uga_r, obiekty_wieloosobowe__statek_klawisze_obs³uga_r__rozmiar_c );

    end
  else//if komenda_f = wieloosobowe__komenda__statek__klawisze_obs³uga_c then
  if komenda_f = wieloosobowe__komenda__statek__lotniskowiec__samoloty_wszystkie__punkty_¿ycia_zero_c then
    begin

      if czy_klient_g then // Tylko klient wysy³a informacje o zmianie punktów ¿ycia samolotów na lotniskowcu.
        Strumieñ_Napis_Wpisz( wartoœæ_f, strumieñ_pamiêci_l );

    end
  else//if komenda_f = wieloosobowe__komenda__statek__lotniskowiec__samoloty_wszystkie__punkty_¿ycia_zero_c then
  if komenda_f = wieloosobowe__komenda__statek__przywróæ_do_gry_c then
    begin

      try
        i := StrToInt( wartoœæ_f ); // id_statek.
      except
        i := -99;
      end;
      //---//try

      strumieñ_pamiêci_l.Write(  i, SizeOf( integer )  ); // id_statek.

    end
  else//if komenda_f = wieloosobowe__komenda__statek__przywróæ_do_gry_c then
  if komenda_f = wieloosobowe__komenda__statek__si__samolot_gracza__l¹duj_na_lotniskowcu_gracza_c then
    begin

      try
        i := StrToInt( wartoœæ_f ); // id_gracz.
      except
        i := -99;
      end;
      //---//try

      strumieñ_pamiêci_l.Write(  i, SizeOf( integer )  ); // id_statek.

    end
  else//if komenda_f = wieloosobowe__komenda__statek__si__samolot_gracza__l¹duj_na_lotniskowcu_gracza_c then
  if komenda_f = wieloosobowe__komenda__statek__sos_nadaje_c then
    begin

      // Klient wysy³a informacjê do serwera, ¿e chce nadaæ sygna³ SOS.
      // Serwer wysy³a informacje do klientów o tym aby utworzyli efekty sygna³u SOS.

      Strumieñ_Napis_Wpisz( wartoœæ_f, strumieñ_pamiêci_l );

    end
  else//if komenda_f = wieloosobowe__komenda__statek__sos_nadaje_c then
  if komenda_f = wieloosobowe__komenda__statek__syrena_okrêtowa_klient_nadaje_c then
    begin

      // Klient wysy³a informacjê do serwera, ¿e chce nadaæ sygna³ syreny okrêtowej.
      // Serwer wysy³a informacje do klientów o tym aby utworzyli efekty sygna³u syreny okrêtowej.

      Strumieñ_Napis_Wpisz( wartoœæ_f, strumieñ_pamiêci_l );

    end
  else//if komenda_f = wieloosobowe__komenda__statek__syrena_okrêtowa_klient_nadaje_c then
  if komenda_f = wieloosobowe__komenda__udp__klient_po³¹czony_nadal_c then
    begin

      if czy_klient_g then
        begin

          // Tylko klient informuje o aktywnoœci swojego pod³¹czenia do serwera.

          if czy_udp_f then
            begin

              Strumieñ_Napis_Wpisz
                (
                  IntToStr( IdTCPClient1.Socket.Binding.Port ) + ';' +
                  Wieloosobowe_Identyfikator_Edit.Text + ';' +
                  FloatToStr( double(Now()) ) + ';',
                  strumieñ_pamiêci_l
                );

            end;
          //---//if czy_udp_f then

        end;
      //---//if czy_klient_g then

    end
  else//if komenda_f = wieloosobowe__komenda__udp__klient_po³¹czony_nadal_c then
  if komenda_f = wieloosobowe__komenda__odbierz__rekord_komunikacja_rekord_testowy_r_c then
    begin

      Komunikacja_Rekord_Testowy_Obs³uga( false );
      strumieñ_pamiêci_l.Write( komunikacja_rekord_testowy_r, komunikacja_rekord_testowy_r__rozmiar_c );

    end
  else//if komenda_f = wieloosobowe__komenda__odbierz__rekord_komunikacja_rekord_testowy_r_c then
  if komenda_f = wieloosobowe__komenda__odbierz__rekord_komunikacja_rekord_testowy_2_r_c then
    begin

      komunikacja_rekord_testowy_2_r.napis := '¹ê ŒÆ ³Ñ';
      komunikacja_rekord_testowy_2_r.liczba_ca³kowita := Length( komunikacja_rekord_testowy_2_r.napis );

      //strumieñ_pamiêci_l.Write( komunikacja_rekord_testowy_2_r, komunikacja_rekord_testowy_2_r__rozmiar_c ); // Tak nie dzia³a.

      strumieñ_pamiêci_l.Write(  komunikacja_rekord_testowy_2_r.liczba_ca³kowita, SizeOf( integer )  );
      strumieñ_pamiêci_l.Write(  komunikacja_rekord_testowy_2_r.liczba_rzeczywista, SizeOf( real )  );
      strumieñ_pamiêci_l.Write(  komunikacja_rekord_testowy_2_r.data_czas, SizeOf( TDateTime )  );

      if komunikacja_rekord_testowy_2_r.liczba_ca³kowita > 0 then
        strumieñ_pamiêci_l.WriteBuffer(
            Pointer( komunikacja_rekord_testowy_2_r.napis )^,
            char_rozmiar_c * komunikacja_rekord_testowy_2_r.liczba_ca³kowita
          );

    end;
  //else//if komenda_f = wieloosobowe__komenda__odbierz__rekord_komunikacja_rekord_testowy_2_r_c then
  //  ;
  {$endregion 'Zapisuje rekord do strumienia.'}


  if not czy_b³¹d then
    begin

      strumieñ_pamiêci_l.Position := 0; // Chyba nie trzeba.
      //strumieñ_rozmiar := strumieñ_pamiêci_l.Size;


      {$region 'Wysy³a dane.'}
      if not czy_serwer_g then
        begin

          // Klient.

          if not czy_udp_f then
            begin

              // TCP.

              // Zabezpiecza przed zasypaniem komunikatami:
              // Socket Error #10054 Connection reset by peer.
              try
                if IdTCPClient1.Connected then
                  ;

                if    ( IdTCPClient1.IOHandler <> nil )
                  and ( IdTCPClient1.IOHandler.Connected ) then
                  ;

                czy_b³¹d := false;
              except
                on E : Exception do
                  begin

                    czy_b³¹d := true;
                    Log_Wypisz( E.Message + ' (TCP - ' + t³umaczenie_komunikaty_r.komunikat__strumieñ_wyœlij + ').' );

                  end;
                //---//on E : Exception do
              end;
              //---//try


              if    ( not czy_b³¹d )
                and ( IdTCPClient1.Connected )
                and ( IdTCPClient1.IOHandler <> nil )
                and ( IdTCPClient1.IOHandler.Opened ) then // Gdy uszkodzi siê po³¹czenie pojawia siê b³¹d 'Connection Closed Gracefully' i nie mo¿na zamkn¹æ programu.
                begin

                  //IdTCPClient1.IOHandler.WriteBufferOpen(); //???
                  IdTCPClient1.IOHandler.WriteLn( komenda_f, IdGlobal.IndyTextEncoding_UTF8 ); // W XE 3 IdGlobal.TIdTextEncoding.UTF8.
                  IdTCPClient1.IOHandler.WriteLn(  IntToStr( strumieñ_pamiêci_l.Size ), IdGlobal.IndyTextEncoding_UTF8  );
                  IdTCPClient1.IOHandler.Write( strumieñ_pamiêci_l, strumieñ_pamiêci_l.Size );
                  //IdTCPClient1.IOHandler.WriteBufferFlush(); //???

                end;
              //---//if    ( not czy_b³¹d ) (...)

            end
          else//if not czy_udp_f then
            begin

              // UDP.

              if IdUDPClient1.Connected then // Tylko pod³¹cza klienta do portu (lokalnie). Je¿eli nie ma serwera i tak wyœwietla, ¿e siê po³¹czy³.
                begin

                  IdGlobal.ReadTIdBytesFromStream( strumieñ_pamiêci_l, zt_id_bytes, strumieñ_pamiêci_l.Size );


                  IdUDPClient1.Send( komenda_f, IdGlobal.IndyTextEncoding_UTF8 ); // W XE 3 IdGlobal.TIdTextEncoding.UTF8.
                  IdUDPClient1.Send(  IntToStr( strumieñ_pamiêci_l.Size ), IdGlobal.IndyTextEncoding_UTF8  );
                  IdUDPClient1.SendBuffer( IdUDPClient1.Host, IdUDPClient1.Port, zt_id_bytes );

                end;
              //---//if IdUDPClient1.Connected then

            end;
          //---//if not czy_udp_f then

        end
      else//if not czy_serwer_g then
        begin

          // Serwer.

          if not czy_udp_f then
            begin

              // TCP.

              lista := IdTCPServer1.Contexts.LockList();

              try
                for i := 0 to lista.Count - 1 do
                  if   ( peer_port_f = -99 )
                    or ( TIdContext(lista[ i ]).Connection.Socket.Binding.PeerPort = peer_port_f ) then
                    begin
                      try
                        strumieñ_pamiêci_l.Position := 0; // Chyba nie trzeba.

                        //TIdContext(lista[ i ]).Connection.IOHandler.WriteBufferOpen(); //???
                        TIdContext(lista[ i ]).Connection.IOHandler.WriteLn( komenda_f, IdGlobal.IndyTextEncoding_UTF8 ); // W XE 3 IdGlobal.TIdTextEncoding.UTF8.
                        TIdContext(lista[ i ]).Connection.IOHandler.WriteLn(  IntToStr( strumieñ_pamiêci_l.Size ), IdGlobal.IndyTextEncoding_UTF8  );
                        TIdContext(lista[ i ]).Connection.IOHandler.Write( strumieñ_pamiêci_l, strumieñ_pamiêci_l.Size );
                        //TIdContext(lista[ i ]).Connection.IOHandler.WriteBufferFlush(); //???
                      except
                        on E : Exception do
                          begin
                            Wieloosobowe__Log_Wypisz(
                                t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_wys³aæ_danych__strumieñ__do_klienta + ': ' + IntToStr( TIdContext(lista[ i ]).Binding.PeerPort ) + #13 + #10 +
                                E.Message + ' ' + IntToStr( E.HelpContext ) + '.'
                              );
                            //Komunikat_Wyœwietl(
                            //    t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_wys³aæ_danych__strumieñ__do_klienta + ': ' + IntToStr( TIdContext(lista[ i ]).Binding.PeerPort ) + #13 +
                            //    E.Message + ' ' + IntToStr( E.HelpContext ) + '.', t³umaczenie_komunikaty_r.komunikat__b³¹d,
                            //    MB_OK + MB_ICONEXCLAMATION
                            //  );
                          end;
                      end;
                    end;
                  //---//if   ( peer_port_f = -99 ) (...)
              finally
                IdTCPServer1.Contexts.UnlockList();
              end;
              //---//try

            end
          else//if not czy_udp_f then
            begin

              // UDP.

              IdGlobal.ReadTIdBytesFromStream( strumieñ_pamiêci_l, zt_id_bytes, strumieñ_pamiêci_l.Size );


              for i := udp_klienci_lista_g.klienci_lista_list.Count - 1 downto 0 do
                if   ( peer_port_f = -99 )
                  or ( TUDP_Klient_Dane(udp_klienci_lista_g.klienci_lista_list[ i ]).peer_port = peer_port_f ) then
                  begin

                    IdUDPServer1.Send( TUDP_Klient_Dane(udp_klienci_lista_g.klienci_lista_list[ i ]).adres_ip, TUDP_Klient_Dane(udp_klienci_lista_g.klienci_lista_list[ i ]).peer_port, komenda_f, IdGlobal.IndyTextEncoding_UTF8 );
                    IdUDPServer1.Send(  TUDP_Klient_Dane(udp_klienci_lista_g.klienci_lista_list[ i ]).adres_ip, TUDP_Klient_Dane(udp_klienci_lista_g.klienci_lista_list[ i ]).peer_port, IntToStr( strumieñ_pamiêci_l.Size ), IdGlobal.IndyTextEncoding_UTF8  );
                    IdUDPServer1.SendBuffer( TUDP_Klient_Dane(udp_klienci_lista_g.klienci_lista_list[ i ]).adres_ip, TUDP_Klient_Dane(udp_klienci_lista_g.klienci_lista_list[ i ]).peer_port, zt_id_bytes );

                  end;
                //---//if   ( peer_port_f = -99 ) (...)

            end;
          //---//if not czy_udp_f then

        end;
      //---//if not czy_serwer_g then
      {$endregion 'Wysy³a dane.'}

    end;
  //---//if not czy_b³¹d then

  FreeAndNil( strumieñ_pamiêci_l );

end;//---//Funkcja Wieloosobowe__Strumieñ_Wyœlij().

//Funkcja Wieloosobowe__Tekst_Wyœlij().
procedure TStatki_Form.Wieloosobowe__Tekst_Wyœlij( const napis_f : string; const peer_port_f : integer = -99 );
var
  czy_b³¹d : boolean;
  i : integer;
  lista : TList;
begin

  if not czy_serwer_g then
    begin

      // Klient.

      // Tutaj raczej tego nie trzeba (nie wykry³em aby to coœ poprawia³o).
      //// Zabezpiecza przed zasypaniem komunikatami:
      //// Socket Error #10054 Connection reset by peer.
      try
        if IdTCPClient1.Connected then
          ;

        if    ( IdTCPClient1.IOHandler <> nil )
          and ( IdTCPClient1.IOHandler.Connected ) then
          ;

        czy_b³¹d := false;
      except
        on E : Exception do
          begin

            czy_b³¹d := true;
            Log_Wypisz( E.Message + ' (TCP - ' + t³umaczenie_komunikaty_r.komunikat__tekst_wyœlij + ').' );

          end;
        //---//on E : Exception do
      end;
      //---//try


      if    ( not czy_b³¹d )
        and ( IdTCPClient1.Connected )
        and ( IdTCPClient1.IOHandler <> nil )
        and ( IdTCPClient1.IOHandler.Opened ) then // Gdy uszkodzi siê po³¹czenie pojawia siê b³¹d 'Connection Closed Gracefully' i nie mo¿na zamkn¹æ programu.
        begin

          IdTCPClient1.IOHandler.WriteLn( napis_f, IdGlobal.IndyTextEncoding_UTF8 );

        end;
      //---//if    ( not czy_b³¹d ) (...)

    end
  else//if not czy_serwer_g then
    begin

      // Serwer.

      lista := IdTCPServer1.Contexts.LockList();

      try
        for i := 0 to lista.Count - 1 do
          if   ( peer_port_f = -99 )
            or ( TIdContext(lista[ i ]).Connection.Socket.Binding.PeerPort = peer_port_f ) then
            begin
              try
                TIdContext(lista[ i ]).Connection.IOHandler.WriteLn( napis_f, IdGlobal.IndyTextEncoding_UTF8 );
              except
                on E : Exception do
                  begin
                    Wieloosobowe__Log_Wypisz(
                        t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_wys³aæ_danych__tekst__do_klienta + ': ' + IntToStr( TIdContext(lista[ i ]).Binding.PeerPort ) + #13 + #10 +
                        E.Message + ' ' + IntToStr( E.HelpContext ) + '.'
                      );
                    //Komunikat_Wyœwietl(
                    //    t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_wys³aæ_danych__tekst__do_klienta + ': ' + IntToStr( TIdContext(lista[ i ]).Binding.PeerPort ) + #13 +
                    //    E.Message + ' ' + IntToStr( E.HelpContext ) + '.', t³umaczenie_komunikaty_r.komunikat__b³¹d,
                    //    MB_OK + MB_ICONEXCLAMATION
                    //  );
                  end;
              end;
            end;
          //---//if   ( peer_port_f = -99 ) (...)
      finally
        IdTCPServer1.Contexts.UnlockList();
      end;
      //---//try

    end;
  //---//if not czy_serwer_g then

end;//---//Funkcja Wieloosobowe__Tekst_Wyœlij().

//Funkcja xNx__Wieloosobowe__Tekst_Wyœlij_UDP().
procedure TStatki_Form.xNx__Wieloosobowe__Tekst_Wyœlij_UDP( const napis_f : string );
var
  i : integer;
begin

  if not czy_serwer_g then
    begin

      // Klient.

      if IdUDPClient1.Connected then // Tylko pod³¹cza klienta do portu (lokalnie). Je¿eli nie ma serwera i tak wyœwietla, ¿e siê po³¹czy³.
        begin

          IdUDPClient1.Send( napis_f, IdGlobal.IndyTextEncoding_UTF8 ); // W XE 3 IdGlobal.TIdTextEncoding.UTF8. // try nie obs³uguje b³êdu (np. gdy nie ma serwera).

        end;
      //---//if IdUDPClient1.Connected then

    end
  else//if not czy_serwer_g then
    begin

      // Serwer.

      for i := udp_klienci_lista_g.klienci_lista_list.Count - 1 downto 0 do
        begin

          IdUDPServer1.Send( TUDP_Klient_Dane(udp_klienci_lista_g.klienci_lista_list[ i ]).adres_ip, TUDP_Klient_Dane(udp_klienci_lista_g.klienci_lista_list[ i ]).peer_port, napis_f, IdGlobal.IndyTextEncoding_UTF8 );

        end;
      //---//for i := udp_klienci_lista_g.klienci_lista_list.Count - 1 downto 0 do

    end;
  //---//if not czy_serwer_g then

end;//---//Funkcja xNx__Wieloosobowe__Tekst_Wyœlij_UDP().

//Funkcja Wieloosobowe__Trafienia_Efekt_Utwórz().
procedure TStatki_Form.Wieloosobowe__Trafienia_Efekt_Utwórz( obiekty_wieloosobowe__efekt_r_f : TObiekty_Wieloosobowe__Efekt_r );
var
  i : integer;
  zt_gl_base_scene_object : TGLBaseSceneObject;
begin

  if obiekty_wieloosobowe__efekt_r_f.id_statek_ef__owo = -1 then // Scena.
    zt_gl_base_scene_object := Gra_Obiekty_GLDummyCube
  else//if obiekty_wieloosobowe__efekt_r_f.id_statek_ef__owo = -1 then
    begin

      zt_gl_base_scene_object := nil;

      for i := 0 to Length( statki_t ) - 1 do
        if    ( statki_t[ i ] <> nil )
          and ( statki_t[ i ].id_statek = obiekty_wieloosobowe__efekt_r_f.id_statek_ef__owo ) then
          begin

            zt_gl_base_scene_object := statki_t[ i ];
            Break;

          end;
        //---//if    ( statki_t[ i ] <> nil ) (...)

    end;
  //---//if obiekty_wieloosobowe__efekt_r_f.id_statek_ef__owo = -1 then


  if wieloosobowe_amunicja_efekt_g <> nil then
    begin

      wieloosobowe_amunicja_efekt_g.amunicja_rodzaj := obiekty_wieloosobowe__efekt_r_f.amunicja_rodzaj_ef__owo;
      wieloosobowe_amunicja_efekt_g.obra¿enia_zadawane_wspó³czynnik_zmodyfikowany := obiekty_wieloosobowe__efekt_r_f.obra¿enia_zadawane_wspó³czynnik_zmodyfikowany__owo;
      wieloosobowe_amunicja_efekt_g.skala__amunicja := obiekty_wieloosobowe__efekt_r_f.skala__amunicja_owo;

    end;
  //---//if wieloosobowe_amunicja_efekt_g <> nil then


  Trafienia_Efekt__Utwórz_Jeden( zt_gl_base_scene_object, obiekty_wieloosobowe__efekt_r_f.efekt_rodzaj__owo, obiekty_wieloosobowe__efekt_r_f.pozycja_ef__owo.X, obiekty_wieloosobowe__efekt_r_f.pozycja_ef__owo.Y, obiekty_wieloosobowe__efekt_r_f.pozycja_ef__owo.Z, wieloosobowe_amunicja_efekt_g, obiekty_wieloosobowe__efekt_r_f.czas_trwania__owo, obiekty_wieloosobowe__efekt_r_f.czas_trwania_efekt_dodatkowy__owo );

end;//---//Funkcja Wieloosobowe__Trafienia_Efekt_Utwórz().

//Funkcja xNx__Wieloosobowe__Trafienia_Efekt_Utwórz().
procedure TStatki_Form.xNx__Wieloosobowe__Trafienia_Efekt_Utwórz( obiekty_wieloosobowe__efekt_t_f : array of TObiekty_Wieloosobowe__Efekt_r );
var
  i,
  j
    : integer;
  zt_gl_base_scene_object : TGLBaseSceneObject;
begin

  for i := 0 to Length( wieloosobowe__efekt_t ) - 1 do
    begin

      if obiekty_wieloosobowe__efekt_t_f[ i ].id_statek_ef__owo = -1 then // Scena.
        zt_gl_base_scene_object := Gra_Obiekty_GLDummyCube
      else//if obiekty_wieloosobowe__efekt_t_f[ i ].id_statek_ef__owo = -1 then
        begin

          zt_gl_base_scene_object := nil;

          for j := 0 to Length( statki_t ) - 1 do
            if    ( statki_t[ j ] <> nil )
              and ( statki_t[ j ].id_statek = obiekty_wieloosobowe__efekt_t_f[ i ].id_statek_ef__owo ) then
              begin

                zt_gl_base_scene_object := statki_t[ j ];
                Break;

              end;
            //---//if    ( statki_t[ j ] <> nil ) (...)

        end;
      //---//if obiekty_wieloosobowe__efekt_t_f[ i ].id_statek_ef__owo = -1 then


      if wieloosobowe_amunicja_efekt_g <> nil then
        begin

          wieloosobowe_amunicja_efekt_g.amunicja_rodzaj := obiekty_wieloosobowe__efekt_t_f[ i ].amunicja_rodzaj_ef__owo;
          wieloosobowe_amunicja_efekt_g.obra¿enia_zadawane_wspó³czynnik_zmodyfikowany := obiekty_wieloosobowe__efekt_t_f[ i ].obra¿enia_zadawane_wspó³czynnik_zmodyfikowany__owo;
          wieloosobowe_amunicja_efekt_g.obra¿enia_zadawane_wspó³czynnik_zmodyfikowany := obiekty_wieloosobowe__efekt_t_f[ i ].skala__amunicja_owo;

        end;
      //---//if wieloosobowe_amunicja_efekt_g <> nil then


      Trafienia_Efekt__Utwórz_Jeden( zt_gl_base_scene_object, obiekty_wieloosobowe__efekt_t_f[ i ].efekt_rodzaj__owo, obiekty_wieloosobowe__efekt_t_f[ i ].pozycja_ef__owo.X, obiekty_wieloosobowe__efekt_t_f[ i ].pozycja_ef__owo.Y, obiekty_wieloosobowe__efekt_t_f[ i ].pozycja_ef__owo.Z, wieloosobowe_amunicja_efekt_g, obiekty_wieloosobowe__efekt_t_f[ i ].czas_trwania__owo, obiekty_wieloosobowe__efekt_t_f[ i ].czas_trwania_efekt_dodatkowy__owo );

    end;
  //---//for i := 0 to Length( wieloosobowe__efekt_t ) - 1 do

end;//---//Funkcja xNx__Wieloosobowe__Trafienia_Efekt_Utwórz().

//Funkcja Wieloosobowe__Wektor_4__Do__Vector().
function TStatki_Form.Wieloosobowe__Wektor_4__Do__Vector( const wieloosobowe__wektor_4_f : TWieloosobowe__Wektor_4 ) : GLS.VectorTypes.TVector4f;
begin

  //
  // Funkcja podstawia wartoœci z typu TWieloosobowe__Wektor_4 do typu GLS.VectorTypes.TVector4d.
  //
  // Zwraca GLS.VectorTypes.TVector4d.
  //

  Result.X := wieloosobowe__wektor_4_f.X;
  Result.Y := wieloosobowe__wektor_4_f.Y;
  Result.Z := wieloosobowe__wektor_4_f.Z;
  Result.W := wieloosobowe__wektor_4_f.W;

end;//---//Funkcja Wieloosobowe__Wektor_4__Do__Vector().

//Funkcja Wspó³czynniki_Gry_Informacja_Wyœlij().
procedure TStatki_Form.Wspó³czynniki_Gry_Informacja_Wyœlij( const peer_port_f : integer = -99 );
var
  wieloosobowe__efekt_r_l : TObiekty_Wieloosobowe__Efekt_r;
begin

  //
  // Funkcja wysy³a informacje o wspó³czynnikach gry ustawianych tylko na serwerze.
  //

  Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__gra__mg³a_c, peer_port_f, IntToStr( Mg³a_SpinEdit.Value )  );
  Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__gra__morze_wzburzenie_c, peer_port_f, IntToStr( Morze_Wzburzenie_SpinEdit.Value )  );
  Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__gra__noc_c, peer_port_f, IntToStr( Noc_SpinEdit.Value )  );

  wieloosobowe__efekt_r_l.pozycja_ef__owo := wiatr_vector_g;
  //Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__wiatr_c, peer_port_f, xNx__Wiatr__Wartoœæ_Do_Napisu() );
  Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__wiatr_c, peer_port_f, wieloosobowe__efekt_r_l );

  Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__gra__wspó³czynnik_prêdkoœci_c, peer_port_f, IntToStr( Gra_Wspó³czynnik_Prêdkoœci_SpinEdit.Value )  );
  Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__gra__wspó³czynnik_trudnoœci_c, peer_port_f, IntToStr( Gra_Wspó³czynnik_Trudnoœci_SpinEdit.Value )  );
  Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__wspó³czynniki_inne_c, peer_port_f, '' );

end;//---//Funkcja Wspó³czynniki_Gry_Informacja_Wyœlij().

//Funkcja Wygl¹d_Elementy__DŸwiêk_Wczytaj().
function TStatki_Form.Wygl¹d_Elementy__DŸwiêk_Wczytaj( wzorzec__gl_custom_scene_object_f : TGLCustomSceneObject; dŸwiêk_nazwa_f : string; const dŸwiêki__zasiêg_minimalny_f : real; const zt_statek_f : TStatek = nil ) : boolean;
var
  zts : string;
  zt_gl_dummy_cube_l : TGLDummyCube;
  zt_gl_custom_scene_object_l : TGLCustomSceneObject;
begin

  //
  // Funkcja wczytuje dŸwiêk do biblioteki (je¿eli jeszcze taki dŸwiêk nie zosta³ wczytany) i tworzy emiter dŸwiêku.
  //
  // Zwraca prawdê gdy uda³o siê wczytaæ dŸwiêk (je¿eli by³a taka koniecznoœæ) i utworzyæ emiter dŸwiêku lub gdy funkcjonalnoœæ dŸwiêków w grze nie jest dostêpna (aktywna).
  //
  // Parametry:
  //   wzorzec__gl_custom_scene_object_f - element, na podstawie którego tworzony jest emiter dŸwiêku
  //   dŸwiêk_nazwa_f - nazwa pliku z dŸwiêkiem
  //   dŸwiêki__zasiêg_minimalny_f - TGLBSoundEmitter.Source.MinDistance
  //   zt_statek_f:
  //     = nil - emiter dŸwiêku jest tworzony dla elementu l¹du.
  //     <> nil - emiter dŸwiêku jest tworzony dla elementu statku.
  //

  Result := true;


  if   ( not DŸwiêk__Aktywnoœæ_CheckBox.Checked )
    or ( not GLSMOpenAL1.Active )
    or ( ActiveSoundManager() = nil )
    or (  Trim( dŸwiêk_nazwa_f ) = ''  ) then
    Exit;


  Result := false;


  zts := ExtractFilePath( Application.ExeName ) + katalog__dŸwiêki__l¹dów_c + '\' + dŸwiêk_nazwa_f;

  if not FileExists( zts ) then
    Exit;


  if zt_statek_f <> nil then
    dŸwiêk_nazwa_f := dŸwiêki__l¹dów_prefiks__statek_c + dŸwiêk_nazwa_f
  else//if zt_statek_f <> nil then
    dŸwiêk_nazwa_f := dŸwiêki__l¹dów_prefiks__l¹d_c + dŸwiêk_nazwa_f;


  if DŸwiêki_L¹dów_GLSoundLibrary.Samples.GetByName( dŸwiêk_nazwa_f ) = nil then
    try
      DŸwiêki_L¹dów_GLSoundLibrary.Samples.AddFile // uses GLS.FileWAV.
        (
          zts,
          dŸwiêk_nazwa_f
        );
    except
      on E : Exception do
        begin

          Log_Wypisz(  t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_wczytaæ_pliku_dŸwiêku + ' ' + E.Message + ' ' + IntToStr( E.HelpContext ) + '.'  );
          Exit;

        end;
      //---//on E : Exception do
    end;
    //---//try


  if DŸwiêki_L¹dów_GLSoundLibrary.Samples.GetByName( dŸwiêk_nazwa_f ) <> nil then
    begin

      if zt_statek_f <> nil then
        zt_gl_dummy_cube_l := zt_statek_f.falowanie_gl_dummy_cube
      else//if zt_statek_f <> nil then
        zt_gl_dummy_cube_l := nil;


      zt_gl_custom_scene_object_l := Wygl¹d_Elementy__Utwórz_Element( nil, wygl¹d_specjalny__dŸwiêk_emiter_c, Gra_Obiekty_GLDummyCube, zt_gl_dummy_cube_l );


      if zt_gl_custom_scene_object_l <> nil then
        begin

          if zt_statek_f <> nil then
            begin

              zt_statek_f.wygl¹d_elementy_list.Add( zt_gl_custom_scene_object_l );

              zt_gl_custom_scene_object_l.Position.AsVector := zt_gl_dummy_cube_l.AbsoluteToLocal( wzorzec__gl_custom_scene_object_f.AbsolutePosition );

            end
          else//if zt_statek_f <> nil then
            begin

              l¹d_list.Add( zt_gl_custom_scene_object_l );

              zt_gl_custom_scene_object_l.Position.AsVector := wzorzec__gl_custom_scene_object_f.AbsolutePosition;
              Wyglad_Elementy.Punkty_¯ycia(  zt_gl_custom_scene_object_l, Wyglad_Elementy.Punkty_¯ycia( wzorzec__gl_custom_scene_object_f )  );

            end;
          //---//if zt_statek_f <> nil then

          Wyglad_Elementy.DŸwiêki__Losowoœæ(  zt_gl_custom_scene_object_l, Wyglad_Elementy.DŸwiêki__Losowoœæ( wzorzec__gl_custom_scene_object_f )  );
          Wyglad_Elementy.DŸwiêki__OpóŸnienie_Losowe__Wylicz( zt_gl_custom_scene_object_l );
          Wyglad_Elementy.Identyfikator_Elementu(  zt_gl_custom_scene_object_l, Wyglad_Elementy.Identyfikator_Elementu( wzorzec__gl_custom_scene_object_f )  );


          if dŸwiêk_emiter__wyœwietlanie_poziom_g >= 1 then
            TGLDummyCube(zt_gl_custom_scene_object_l).VisibleAtRunTime := true;

          if dŸwiêk_emiter__wyœwietlanie_poziom_g >= 2 then
            zt_gl_custom_scene_object_l.ShowAxes := true;

        end;
      //---//if zt_gl_custom_scene_object_l <> nil then


      if zt_gl_custom_scene_object_l <> nil then
        with TGLBSoundEmitter.Create( zt_gl_custom_scene_object_l.Behaviours ) do
          begin

            Source.SoundLibrary := DŸwiêki_L¹dów_GLSoundLibrary;
            Source.SoundName := dŸwiêk_nazwa_f;
            Source.NbLoops := 2; // Wartoœæ wiêksza od 1 zapêtla odtwarzanie w nieskoñczonoœæ.

            if dŸwiêki__zasiêg_minimalny_f >= 0 then
              Source.MinDistance := dŸwiêki__zasiêg_minimalny_f
            else//if dŸwiêki__zasiêg_minimalny_f >= 0 then
              Source.MinDistance := dŸwiêk_emiter__zasiêg_minimalny_g;

            //Playing := true;
            Playing := Wyglad_Elementy.DŸwiêki__OpóŸnienie_Losowe( zt_gl_custom_scene_object_l ) <= 0;
            //  zt_gl_custom_scene_object_l.ShowAxes := Playing;


            if    ( dŸwiêk_emiter__wyœwietlanie_poziom_g >= 1 )
              and ( Playing )
              and ( not zt_gl_custom_scene_object_l.ShowAxes ) then
              zt_gl_custom_scene_object_l.ShowAxes := true; // Je¿eli wylosuje siê, ¿e od razu jest w³¹czony dŸwiêk.

          end;
        //---//with TGLBSoundEmitter.Create( zt_gl_custom_scene_object_l.Behaviours ) do

    end;
  //---//if DŸwiêki_L¹dów_GLSoundLibrary.Samples.GetByName( dŸwiêk_nazwa_f ) <> nil then


  Result := true;

end;//---//Funkcja Wygl¹d_Elementy__DŸwiêk_Wczytaj().

//Funkcja Wygl¹d_Elementy__Kolor_Losowy_Wylicz().
function TStatki_Form.Wygl¹d_Elementy__Kolor_Losowy_Wylicz( kolor_od_f, kolor_do_f : real ) : GLS.VectorTypes.TVector4f;
var
  ztr : real;
begin

  //
  // Funkcja wyznacza kolor losowy z zadanego zakresu wartoœci.
  //
  // Parametry:
  //   kolor_od_f
  //   kolor_do_f
  //

  if kolor_od_f < 0 then
    kolor_od_f := 0;

  if kolor_do_f < 0 then
    kolor_do_f := 1;

  if kolor_do_f < kolor_od_f then
    begin

      ztr := kolor_od_f;
      kolor_od_f := kolor_do_f;
      kolor_do_f := ztr;

    end;
  //---//if kolor_do_f < kolor_od_f then

  if kolor_od_f > 0 then
    kolor_do_f := kolor_do_f - kolor_od_f;

  GLS.VectorGeometry.SetVector
    (
      Result,
      Random(  Round( kolor_do_f * 10 + 1 )  ) * 0.1 + kolor_od_f, // + 1 bo Random() losuje z przedzia³u otwartego prawostronnie.
      Random(  Round( kolor_do_f * 10 + 1 )  ) * 0.1 + kolor_od_f,
      Random(  Round( kolor_do_f * 10 + 1 )  ) * 0.1 + kolor_od_f,
      Random(  Round( kolor_do_f * 10 + 1 )  ) * 0.1 + kolor_od_f
    );

end;//---//Funkcja Wygl¹d_Elementy__Kolor_Losowy_Wylicz().

//Funkcja Wygl¹d_Elementy__Kolor_Noc_Zmieñ().
procedure TStatki_Form.Wygl¹d_Elementy__Kolor_Noc_Zmieñ( const gl_material_f : TGLMaterial; const dzieñ_jasnoœæ_f : real );
begin

  gl_material_f.FrontProperties.Emission.Color := GLS.VectorGeometry.VectorScale( gl_material_f.FrontProperties.Ambient.Color, dzieñ_jasnoœæ_f );

end;//---//Funkcja Wygl¹d_Elementy__Kolor_Noc_Zmieñ().

//Funkcja Wygl¹d_Elementy__Kolor_Ustaw().
procedure TStatki_Form.Wygl¹d_Elementy__Kolor_Ustaw( const gl_material_f : TGLMaterial; const vector_f : GLS.VectorTypes.TVector4f );
begin

  gl_material_f.FrontProperties.Ambient.Color := vector_f;
  gl_material_f.FrontProperties.Diffuse.Color := vector_f;
  gl_material_f.FrontProperties.Emission.Color := vector_f;

end;//---//Funkcja Wygl¹d_Elementy__Kolor_Ustaw().

//Funkcja Wygl¹d_Elementy__Kolor_Ustaw_Losowy().
procedure TStatki_Form.Wygl¹d_Elementy__Kolor_Ustaw_Losowy( const gl_material_f : TGLMaterial; kolor_od_f : real = -1; kolor_do_f : real = -1 );
var
  kolor_vector : GLS.VectorTypes.TVector4f;
begin

  //
  // Parametry:
  //   kolor_od_f, kolor_do_f:
  //     -1 - ustawia kolor losowy.
  //     >= 0 - ustawia kolor losowy z zadanego zakresu wartoœci.
  //

  if    ( kolor_od_f < 0 )
    and ( kolor_do_f < 0 ) then
    begin

      gl_material_f.FrontProperties.Ambient.RandomColor();
      gl_material_f.FrontProperties.Diffuse.RandomColor();
      gl_material_f.FrontProperties.Emission.RandomColor();

    end
  else//if    ( kolor_od_f < 0 ) (...)
    begin

      kolor_vector := Wygl¹d_Elementy__Kolor_Losowy_Wylicz( kolor_od_f, kolor_do_f );
      Wygl¹d_Elementy__Kolor_Ustaw( gl_material_f, kolor_vector );

    end;
  //---//if    ( kolor_od_f < 0 ) (...)

end;//---//Funkcja Wygl¹d_Elementy__Kolor_Ustaw_Losowy().

//Funkcja Wygl¹d_Elementy__Kopiuj_W³aœciwoœci().
procedure TStatki_Form.Wygl¹d_Elementy__Kopiuj_W³aœciwoœci( zt_gl_custom_scene_object_wzorzec_f, zt_gl_custom_scene_object_kopia_f : TGLCustomSceneObject; kolor_od_f : real = -1; kolor_do_f : real = -1 );
var
  i : integer;
begin

  //
  // Parametry:
  //   kolor_od_f, kolor_do_f:
  //     -2 - kopiowanemu elementowi ustawia kolor losowy.
  //     -1 - kopiowanemu elementowi ustawia kolor taki sam jaki ma element, od którego s¹ kopiowane cechy.
  //     >= 0 - kopiowanemu elementowi ustawia kolor losowy z zadanego zakresu wartoœci.
  //

  Wyglad_Elementy.DŸwiêk_Nazwa(  zt_gl_custom_scene_object_kopia_f, Wyglad_Elementy.DŸwiêk_Nazwa( zt_gl_custom_scene_object_wzorzec_f )  );
  Wyglad_Elementy.DŸwiêki__Losowoœæ(  zt_gl_custom_scene_object_kopia_f, Wyglad_Elementy.DŸwiêki__Losowoœæ( zt_gl_custom_scene_object_wzorzec_f )  );
  Wyglad_Elementy.DŸwiêki__Zasiêg_Minimalny(  zt_gl_custom_scene_object_kopia_f, Wyglad_Elementy.DŸwiêki__Zasiêg_Minimalny( zt_gl_custom_scene_object_wzorzec_f )  );

  //i := Wyglad_Elementy.DŸwiêki__Losowoœæ( zt_gl_custom_scene_object_kopia_f );
  //
  //if i > 0 then
  //  Wyglad_Elementy.DŸwiêki__OpóŸnienie_Losowe__Wylicz( zt_gl_custom_scene_object_kopia_f );


  Wyglad_Elementy.Kolizja_Wp³yw__Amunicja_Uzupe³nianie(  zt_gl_custom_scene_object_kopia_f, Wyglad_Elementy.Kolizja_Wp³yw__Amunicja_Uzupe³nianie( zt_gl_custom_scene_object_wzorzec_f )  );
  Wyglad_Elementy.Kolizja_Wp³yw__Obra¿enia(  zt_gl_custom_scene_object_kopia_f, Wyglad_Elementy.Kolizja_Wp³yw__Obra¿enia( zt_gl_custom_scene_object_wzorzec_f )  );
  Wyglad_Elementy.Kolizja_Wp³yw__Prêdkoœæ(  zt_gl_custom_scene_object_kopia_f, Wyglad_Elementy.Kolizja_Wp³yw__Prêdkoœæ( zt_gl_custom_scene_object_wzorzec_f )  );

  if    ( kolor_od_f = -2 )
    and ( kolor_do_f = -2 ) then
    Wygl¹d_Elementy__Kolor_Ustaw_Losowy( zt_gl_custom_scene_object_kopia_f.Material )
  else//if    ( kolor_od_f = -2 ) (...)
  if    ( kolor_od_f < 0 )
    and ( kolor_do_f < 0 ) then
    Wygl¹d_Elementy__Kolor_Ustaw(  zt_gl_custom_scene_object_kopia_f.Material, VectorMake( zt_gl_custom_scene_object_wzorzec_f.Material.FrontProperties.Ambient.Color.X, zt_gl_custom_scene_object_wzorzec_f.Material.FrontProperties.Ambient.Color.Y, zt_gl_custom_scene_object_wzorzec_f.Material.FrontProperties.Ambient.Color.Z, zt_gl_custom_scene_object_wzorzec_f.Material.FrontProperties.Ambient.Alpha )  )
  else//if    ( kolor_od_f < 0 ) (...)
    Wygl¹d_Elementy__Kolor_Ustaw_Losowy( zt_gl_custom_scene_object_kopia_f.Material, kolor_od_f, kolor_do_f );

  zt_gl_custom_scene_object_kopia_f.TurnAngle := zt_gl_custom_scene_object_wzorzec_f.TurnAngle;

  zt_gl_custom_scene_object_kopia_f.Scale.X := zt_gl_custom_scene_object_wzorzec_f.Scale.X;
  zt_gl_custom_scene_object_kopia_f.Scale.Y := zt_gl_custom_scene_object_wzorzec_f.Scale.Y;
  zt_gl_custom_scene_object_kopia_f.Scale.Z := zt_gl_custom_scene_object_wzorzec_f.Scale.Z;

  Wygl¹d_Elementy__Tekstura_Wczytaj_2( zt_gl_custom_scene_object_kopia_f, '', zt_gl_custom_scene_object_wzorzec_f.Material.LibMaterialName );

  Wyglad_Elementy.Punkty_¯ycia(  zt_gl_custom_scene_object_kopia_f, Wyglad_Elementy.Punkty_¯ycia( zt_gl_custom_scene_object_wzorzec_f )  );
  Wyglad_Elementy.Radar_Ignoruje(  zt_gl_custom_scene_object_kopia_f, Wyglad_Elementy.Radar_Ignoruje( zt_gl_custom_scene_object_wzorzec_f )  );
  Wyglad_Elementy.Œwiat³a_Miganie(  zt_gl_custom_scene_object_kopia_f, Wyglad_Elementy.Œwiat³a_Miganie( zt_gl_custom_scene_object_wzorzec_f )  );
  Wyglad_Elementy.Œwiat³a_Miganie__Losowoœæ(  zt_gl_custom_scene_object_kopia_f, Wyglad_Elementy.Œwiat³a_Miganie__Losowoœæ( zt_gl_custom_scene_object_wzorzec_f )  );

  i := Wyglad_Elementy.Œwiat³a_Miganie__Losowoœæ( zt_gl_custom_scene_object_kopia_f );

  if i > 0 then
    Wyglad_Elementy.Œwiat³a_Miganie__OpóŸnienie_Losowe__Wylicz( zt_gl_custom_scene_object_kopia_f );

  Wyglad_Elementy.Œwiat³a_Miganie__Tabela_Czasów_Wartoœci_Ustaw( zt_gl_custom_scene_object_kopia_f, zt_gl_custom_scene_object_wzorzec_f );
  Wyglad_Elementy.Œwiat³o(  zt_gl_custom_scene_object_kopia_f, Wyglad_Elementy.Œwiat³o( zt_gl_custom_scene_object_wzorzec_f )  );
  Wyglad_Elementy.Œwiat³o_Dodatkowe(  zt_gl_custom_scene_object_kopia_f, Wyglad_Elementy.Œwiat³o_Dodatkowe( zt_gl_custom_scene_object_wzorzec_f )  );

  if zt_gl_custom_scene_object_wzorzec_f is TGLFrustrum then
    TGLFrustrum(zt_gl_custom_scene_object_kopia_f).Height := TGLFrustrum(zt_gl_custom_scene_object_wzorzec_f).Height;

  if zt_gl_custom_scene_object_wzorzec_f is TGLTorus then
    begin

      TGLTorus(zt_gl_custom_scene_object_kopia_f).MajorRadius := TGLTorus(zt_gl_custom_scene_object_wzorzec_f).MajorRadius;
      TGLTorus(zt_gl_custom_scene_object_kopia_f).MinorRadius := TGLTorus(zt_gl_custom_scene_object_wzorzec_f).MinorRadius;

    end;
  //---//if zt_gl_custom_scene_object_wzorzec_f is TGLTorus then

  zt_gl_custom_scene_object_kopia_f.Position.X := zt_gl_custom_scene_object_wzorzec_f.Position.X;
  zt_gl_custom_scene_object_kopia_f.Position.Y := zt_gl_custom_scene_object_wzorzec_f.Position.Y;
  zt_gl_custom_scene_object_kopia_f.Position.Z := zt_gl_custom_scene_object_wzorzec_f.Position.Z;

  zt_gl_custom_scene_object_kopia_f.RollAngle := zt_gl_custom_scene_object_wzorzec_f.RollAngle;
  zt_gl_custom_scene_object_kopia_f.PitchAngle := zt_gl_custom_scene_object_wzorzec_f.PitchAngle;


  // Je¿eli obiekt wzorcowy w pêtli jest kontenerem i obiekty w nim zawarte maj¹ ustawione nieujemne punkty ¿ycia
  // oraz obiekt docelowy jest kontenerem to ustawi obiektom w kontenerze docelowym punkty ¿ycia z pierwszego obiektu kontenera wzorcowego.
  if    ( zt_gl_custom_scene_object_wzorzec_f.Count > 0 )
    //and (  Trim( zt_gl_custom_scene_object_wzorzec_f.Name ) = ''  ) // Jest to kontener na prymitywy.
    and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(zt_gl_custom_scene_object_wzorzec_f) ) = Wyglad_Elementy.or_Kontener_Prymitywów  ) // Jest to kontener na prymitywy.
    and (  Wyglad_Elementy.Punkty_¯ycia( TGLCustomSceneObject(zt_gl_custom_scene_object_wzorzec_f.Children[ 0 ]) ) >= 0  )
    and ( zt_gl_custom_scene_object_kopia_f.Count > 0 )
    //and (  Trim( zt_gl_custom_scene_object_kopia_f.Name ) = ''  ) // Jest to kontener na prymitywy.
    and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(zt_gl_custom_scene_object_kopia_f) ) = Wyglad_Elementy.or_Kontener_Prymitywów  ) then // Jest to kontener na prymitywy.
    for i := 0 to zt_gl_custom_scene_object_kopia_f.Count - 1 do // Wszystkim obiektom prymitywu w kontenerze ustawia zadan¹ wartoœæ.
      Wyglad_Elementy.Punkty_¯ycia(  TGLCustomSceneObject(zt_gl_custom_scene_object_kopia_f.Children[ i ]), Wyglad_Elementy.Punkty_¯ycia( TGLCustomSceneObject(zt_gl_custom_scene_object_wzorzec_f.Children[ 0 ]) )  );


  // Je¿eli obiekt wzorcowy w pêtli jest kontenerem i ma ustawione przekazywanie potomkom wartoœci ignorowania przez radar
  // oraz obiekt docelowy jest kontenerem to ustawi obiektom w kontenerze docelowym ignorowanie przez radar.
  if    ( zt_gl_custom_scene_object_wzorzec_f.Count > 0 )
    and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(zt_gl_custom_scene_object_wzorzec_f) ) = Wyglad_Elementy.or_Kontener_Prymitywów  ) // Jest to kontener na prymitywy.
    and (  Wyglad_Elementy.Radar_Ignoruje__Przeka¿_Potomkom( TGLCustomSceneObject(zt_gl_custom_scene_object_wzorzec_f) )  )
    and ( zt_gl_custom_scene_object_kopia_f.Count > 0 )
    and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(zt_gl_custom_scene_object_kopia_f) ) = Wyglad_Elementy.or_Kontener_Prymitywów  ) then // Jest to kontener na prymitywy.
    for i := 0 to zt_gl_custom_scene_object_kopia_f.Count - 1 do // Wszystkim obiektom prymitywu w kontenerze ustawia zadan¹ wartoœæ.
      //Wyglad_Elementy.Radar_Ignoruje( TGLCustomSceneObject(zt_gl_custom_scene_object_kopia_f.Children[ i ]), true );
      Wyglad_Elementy.Radar_Ignoruje(  TGLCustomSceneObject(zt_gl_custom_scene_object_kopia_f.Children[ i ]), Wyglad_Elementy.Radar_Ignoruje( TGLCustomSceneObject(zt_gl_custom_scene_object_wzorzec_f) )  );


  //// Kopiuje efekty dŸwiêkowe.
  //for i := 0 to zt_gl_custom_scene_object_wzorzec_f.Behaviours.Count - 1 do // DŸwiêków emitowanych przez zagnie¿d¿one obiekty jakoœ nie s³ychaæ.
  //  if zt_gl_custom_scene_object_wzorzec_f.Behaviours.Items[ i ] is TGLBSoundEmitter then
  //    begin
  //
  //      if DŸwiêki_L¹dów_GLSoundLibrary.Samples.GetByName( TGLBSoundEmitter(zt_gl_custom_scene_object_wzorzec_f.Behaviours.Items[ i ]).Source.SoundName ) <> nil then
  //        with TGLBSoundEmitter.Create( zt_gl_custom_scene_object_kopia_f.Behaviours ) do
  //          begin
  //
  //            Source.SoundLibrary := TGLBSoundEmitter(zt_gl_custom_scene_object_wzorzec_f.Behaviours.Items[ i ]).Source.SoundLibrary;
  //            Source.SoundName := TGLBSoundEmitter(zt_gl_custom_scene_object_wzorzec_f.Behaviours.Items[ i ]).Source.SoundName;
  //            Source.NbLoops := TGLBSoundEmitter(zt_gl_custom_scene_object_wzorzec_f.Behaviours.Items[ i ]).Source.NbLoops; // Wartoœæ wiêksza od 1 zapêtla odtwarzanie w nieskoñczonoœæ.
  //            Source.MaxDistance := TGLBSoundEmitter(zt_gl_custom_scene_object_wzorzec_f.Behaviours.Items[ i ]).Source.MaxDistance;
  //            Source.MinDistance := TGLBSoundEmitter(zt_gl_custom_scene_object_wzorzec_f.Behaviours.Items[ i ]).Source.MinDistance;
  //
  //            if    ( DŸwiêk__Aktywnoœæ_CheckBox.Checked )
  //              and ( GLSMOpenAL1.Active )
  //              and ( ActiveSoundManager() <> nil ) then
  //              Playing := TGLBSoundEmitter(zt_gl_custom_scene_object_wzorzec_f.Behaviours.Items[ i ]).Playing;
  //
  //          end;
  //        //---//with TGLBSoundEmitter.Create( zt_gl_custom_scene_object_kopia_f.Behaviours ) do
  //
  //    end;
  //  //---//if zt_gl_custom_scene_object_wzorzec_f.Behaviours.Items[ i ] is TGLBSoundEmitter then

end;//---//Funkcja Wygl¹d_Elementy__Kopiuj_W³aœciwoœci().

//Funkcja Wygl¹d_Elementy__Noc_Zmieñ().
procedure TStatki_Form.Wygl¹d_Elementy__Noc_Zmieñ( const œwiat³a_miganie_tylko_f : boolean = false );
var
  i : integer;
begin

  //
  // Funkcja przyciemnia kolory obiektów wraz z zapadaniem nocy.
  //
  // Parametry:
  //   œwiat³a_miganie_tylko_f:
  //     false - obs³uguje zmiany pory dnia.
  //     true - obs³uguje tylko miganie œwiate³.
  //

  if    ( not œwiat³a_miganie_tylko_f )
    and ( œlad_torowy_list <> nil )
    and (  Assigned( œlad_torowy_list )  ) then
    for i := œlad_torowy_list.Count - 1 downto 0 do
      begin

        if TŒlad_Torowy(œlad_torowy_list[ i ]).zmieni³_kolor then
          begin

            TŒlad_Torowy(œlad_torowy_list[ i ]).EdgeColor.Color := GLS.VectorGeometry.VectorScale( GLS.Color.clrSkyBlue, dzieñ_jasnoœæ_g );

          end
        else//if TŒlad_Torowy(œlad_torowy_list[ i ]).zmieni³_kolor then
          begin

            TŒlad_Torowy(œlad_torowy_list[ i ]).EdgeColor.Color := GLS.VectorGeometry.VectorScale( GLS.Color.clrLightBlue, dzieñ_jasnoœæ_g );

          end;
        //---//if TŒlad_Torowy(œlad_torowy_list[ i ]).zmieni³_kolor then

      end;
    //---//for i := œlad_torowy_list.Count - 1 downto 0 do


  if    ( l¹d_list <> nil )
    and (  Assigned( l¹d_list )  ) then
    for i := 0 to l¹d_list.Count - 1 do
      if not ( TGLCustomSceneObject(Self.l¹d_list[ i ]) is TGLLines ) then
        if   ( not Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBox.Checked )
          or ( // Przy dobrej widocznoœci l¹d nie miga.
                   ( dzieñ_jasnoœæ_g >= œwiat³o__w³¹czanie_próg__dzieñ_jasnoœæ_c )
               and ( mg³a_intensywnoœæ_g <= œwiat³o__w³¹czanie_próg__mg³a_intensywnoœæ_c )
             )
          or (
                   ( not œwiat³a_miganie_tylko_f )
               and (  not Wyglad_Elementy.Œwiat³o( TGLCustomSceneObject(Self.l¹d_list[ i ]) )  )
               and (  not Wyglad_Elementy.Œwiat³o_Dodatkowe( TGLCustomSceneObject(Self.l¹d_list[ i ]) )  )
             ) then
          begin

            if    (  not Wyglad_Elementy.Œwiat³o( TGLCustomSceneObject(Self.l¹d_list[ i ]) )  )
              and (  not Wyglad_Elementy.Œwiat³o_Dodatkowe( TGLCustomSceneObject(Self.l¹d_list[ i ]) )  ) then
              Wygl¹d_Elementy__Kolor_Noc_Zmieñ( TGLCustomSceneObject(l¹d_list[ i ]).Material, dzieñ_jasnoœæ_g )
            else//if    (  not Wyglad_Elementy.Œwiat³o( TGLCustomSceneObject(Self.l¹d_list[ i ]) )  ) (...)
              if not GLS.VectorGeometry.VectorEquals( TGLCustomSceneObject(l¹d_list[ i ]).Material.FrontProperties.Emission.Color, TGLCustomSceneObject(l¹d_list[ i ]).Material.FrontProperties.Ambient.Color ) then //???
                Wygl¹d_Elementy__Kolor_Noc_Zmieñ( TGLCustomSceneObject(l¹d_list[ i ]).Material, 1 ); // Aby rozjaœniæ œwiat³a gdy zosta³y przyciemnione noc¹.

            // Nie wiem czy trzeba bêdzie zmieniaæ jasnoœæ tekstur. //???
            //if TGLCustomSceneObject(l¹d_list[ i ]).Material.LibMaterialName <> '' then
            //  TGLCustomSceneObject(l¹d_list[ i ]).Material.Texture. ? ImageGamma := 10 + dzieñ_jasnoœæ_g;

          end
        else//if   ( not Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBox.Checked ) (...)
          if    ( œwiat³a_miganie_tylko_f )
            and (  Wyglad_Elementy.Œwiat³a_Miganie( TGLCustomSceneObject(Self.l¹d_list[ i ]) )  )
            and (  Czas_Miêdzy_W_Milisekundach(  Wyglad_Elementy.Œwiat³a_Miganie__Czas_Przeliczenia_Ostatniego( TGLCustomSceneObject(Self.l¹d_list[ i ]) ), true  ) >= Wyglad_Elementy.Œwiat³a_Miganie__Czas_Do_Zmiany( TGLCustomSceneObject(Self.l¹d_list[ i ]) )  ) then
            begin

              if Wyglad_Elementy.Œwiat³a_Miganie__OpóŸnienie_Losowe( TGLCustomSceneObject(Self.l¹d_list[ i ]) ) > 0 then
                begin

                  Wyglad_Elementy.Œwiat³a_Miganie__OpóŸnienie_Losowe(  TGLCustomSceneObject(Self.l¹d_list[ i ]), Wyglad_Elementy.Œwiat³a_Miganie__OpóŸnienie_Losowe( TGLCustomSceneObject(Self.l¹d_list[ i ]) ) - 1  );

                end
              else//if Wyglad_Elementy.Œwiat³a_Miganie__OpóŸnienie_Losowe( TGLCustomSceneObject(Self.l¹d_list[ i ]) ) > 0 then
                begin

                  if Wyglad_Elementy.Œwiat³a_Miganie__Œwiat³o_W³¹czone( TGLCustomSceneObject(Self.l¹d_list[ i ]) ) then
                    begin

                      Wygl¹d_Elementy__Kolor_Noc_Zmieñ( TGLCustomSceneObject(l¹d_list[ i ]).Material, dzieñ_jasnoœæ_g );
                      Wyglad_Elementy.Œwiat³a_Miganie__Œwiat³o_W³¹czone( TGLCustomSceneObject(Self.l¹d_list[ i ]), false );

                    end
                  else//if Wyglad_Elementy.Œwiat³a_Miganie__Œwiat³o_W³¹czone( TGLCustomSceneObject(Self.l¹d_list[ i ]) ) then
                    begin

                      // Œwiat³a migaj¹ce œwiec¹ jaœniej od niemigaj¹cych.

                      if Wyglad_Elementy.Œwiat³o( TGLCustomSceneObject(Self.l¹d_list[ i ]) ) then
                        Wygl¹d_Elementy__Kolor_Noc_Zmieñ( TGLCustomSceneObject(l¹d_list[ i ]).Material, œwiat³o__jasnoœæ_c )
                      else//if Wyglad_Elementy.Œwiat³o( TGLCustomSceneObject(Self.l¹d_list[ i ]) ) then
                        if Wyglad_Elementy.Œwiat³o_Dodatkowe( TGLCustomSceneObject(Self.l¹d_list[ i ]) ) then
                          Wygl¹d_Elementy__Kolor_Noc_Zmieñ( TGLCustomSceneObject(l¹d_list[ i ]).Material, œwiat³o_dodatkowe__jasnoœæ_c );

                      Wyglad_Elementy.Œwiat³a_Miganie__Œwiat³o_W³¹czone( TGLCustomSceneObject(Self.l¹d_list[ i ]), true );

                    end;
                  //---//if Wyglad_Elementy.Œwiat³a_Miganie__Œwiat³o_W³¹czone( TGLCustomSceneObject(Self.l¹d_list[ i ]) ) then


                  Wyglad_Elementy.Œwiat³a_Miganie__Czas_Do_Zmiany( TGLCustomSceneObject(Self.l¹d_list[ i ]), true ); // Przesunie indeks dla tabeli czasów.

                end;
              //---//if Wyglad_Elementy.Œwiat³a_Miganie__OpóŸnienie_Losowe( TGLCustomSceneObject(Self.l¹d_list[ i ]) ) > 0 then


              Wyglad_Elementy.Œwiat³a_Miganie__Czas_Przeliczenia_Ostatniego( TGLCustomSceneObject(Self.l¹d_list[ i ]), Czas_Teraz_W_Milisekundach() );


              if œwiat³a_miganie__opóŸnienia_losowe_resetuj__l¹d__przeliczono_g then
                œwiat³a_miganie__opóŸnienia_losowe_resetuj__l¹d__przeliczono_g := false;

            end;
          //---//if œwiat³a_miganie_tylko_f then


  for i := 0 to Length( statki_t ) - 1 do
    if statki_t[ i ] <> nil then
      statki_t[ i ].Wygl¹d_Elementy__Noc_Zmieñ( dzieñ_jasnoœæ_g, Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBox.Checked, Wygl¹d_Elementy__Kolor_Noc_Zmieñ, TStatek_Funkcje.Czas_Miêdzy_W_Milisekundach_SF, œwiat³a_miganie_tylko_f );


  //if not œwiat³a_miganie_tylko_f then
  //  for i := 0 to Fale_GLMaterialLibrary.Materials.Count - 1 do
  //    Fale_GLMaterialLibrary.Materials[ i ].Material.Texture.ImageBrightness := dzieñ_jasnoœæ_g;

  if    ( not œwiat³a_miganie_tylko_f )
    and (  Fale_GLMaterialLibrary.Materials.GetLibMaterialByName( woda_tekstura_nazwa_c ) <> nil  ) then
    Fale_GLMaterialLibrary.Materials.GetLibMaterialByName( woda_tekstura_nazwa_c ).Material.Texture.ImageBrightness := dzieñ_jasnoœæ_g;

end;//---//Funkcja Wygl¹d_Elementy__Noc_Zmieñ().

//Funkcja xNx__Wygl¹d_Elementy__Tekstura_Wczytaj().
function TStatki_Form.xNx__Wygl¹d_Elementy__Tekstura_Wczytaj( gl_custom_scene_object_f : TGLCustomSceneObject; tekstura_œcie¿ka_f : string ) : boolean;
var
  bit_map : TBitmap;
  obrazek_png : pngimage.TPngImage;
begin

  // Czasami nie wczytuje tekstury i wyœwietla siê tekstura domyœlna z napisem 'texture error'.

  Result := false;

  if Trim( tekstura_œcie¿ka_f ) = '' then
    Exit;

  if not FileExists( tekstura_œcie¿ka_f ) then // Application potrzebuje w uses Forms.
    tekstura_œcie¿ka_f := ExtractFilePath( Application.ExeName ) + 'Tekstury\' + tekstura_œcie¿ka_f;

  if not FileExists( tekstura_œcie¿ka_f ) then // Application potrzebuje w uses Forms.
    Exit;

  if AnsiLowerCase(  ExtractFileExt( tekstura_œcie¿ka_f )  ) <> '.png' then
    Exit;


  bit_map := TBitmap.Create();

  obrazek_png := pngimage.TPngImage.Create();
  obrazek_png.LoadFromFile( tekstura_œcie¿ka_f );
  bit_map.Assign( obrazek_png );
  obrazek_png.Free();

  if not bit_map.Empty then
    begin

      gl_custom_scene_object_f.Material.Texture.Image.Assign( bit_map );
      gl_custom_scene_object_f.Material.Texture.Enabled := true;

    end;
  //---//if not bit_map.Empty then

  bit_map.Free();

  // Tak te¿ czasami nie dzia³a.
  //gl_custom_scene_object_f.Material.Texture.Image.LoadFromFile( tekstura_œcie¿ka_f );
  //gl_custom_scene_object_f.Material.Texture.Enabled := true;

  Result := true;

end;//---//xNx__Funkcja Wygl¹d_Elementy__Tekstura_Wczytaj().

//Funkcja Wygl¹d_Elementy__Tekstura_Wczytaj_2().
function TStatki_Form.Wygl¹d_Elementy__Tekstura_Wczytaj_2( gl_custom_scene_object_f : TGLCustomSceneObject; tekstura_œcie¿ka_f : string; const materia³_nazwa_f : string = '' ) :  boolean;
var
  tekstura_nazwa_l : string;
  zt_gltexture : GLS.Texture.TGLTexture;
  //zt_gl_lib_material : TGLLibMaterial;
begin

  Result := false;


  if Trim( materia³_nazwa_f ) = '' then
    begin

      // Wyszukuje teksturê poprzez œcie¿kê i nazwê pliku.

      if Trim( tekstura_œcie¿ka_f ) = '' then
        Exit;

      if not FileExists( tekstura_œcie¿ka_f ) then // Application potrzebuje w uses Forms.
        tekstura_œcie¿ka_f := ExtractFilePath( Application.ExeName ) + 'Tekstury\' + tekstura_œcie¿ka_f;

      if not FileExists( tekstura_œcie¿ka_f ) then // Application potrzebuje w uses Forms.
        Exit;


      tekstura_nazwa_l := System.IOUtils.TPath.GetFileNameWithoutExtension( tekstura_œcie¿ka_f );
      tekstura_nazwa_l := StringReplace( tekstura_nazwa_l, ' ', '_', [ rfReplaceAll ] );

      try
        zt_gltexture := GLMaterialLibrary1.TextureByName( tekstura_nazwa_l );
      except
        zt_gltexture := nil;
      end;
      //---//try

      if zt_gltexture = nil then
        GLMaterialLibrary1.AddTextureMaterial( tekstura_nazwa_l, tekstura_œcie¿ka_f );

    end
  else//if Trim( materia³_nazwa_f ) = '' then
    begin

      // Wyszukuje teksturê poprzez nazwê materia³u w bibliotece.

      tekstura_nazwa_l := materia³_nazwa_f;

    end;
  //---//if Trim( materia³_nazwa_f ) = '' then


  gl_custom_scene_object_f.Material.MaterialLibrary := GLMaterialLibrary1;
  gl_custom_scene_object_f.Material.LibMaterialName := tekstura_nazwa_l;


  //zt_gl_lib_material := GLMaterialLibrary1.AddTextureMaterial( tekstura_nazwa_l, tekstura_œcie¿ka_f );
  //zt_gl_lib_material.Material.Texture.Disabled := false;
  //zt_gl_lib_material.Material.Texture.TextureMode := GLTexture.tmDecal; // Uses GLTexture.
  //
  ////zt_gl_lib_material.TextureScale.X := 10;
  ////zt_gl_lib_material.TextureScale.Y := 10;
  //
  //zt_gl_lib_material.Material.BlendingMode := bmTransparency;
  //zt_gl_lib_material.Material.FrontProperties.Diffuse.Alpha := 0.92; // 0 - nie widaæ, 1 - brak przezroczystoœci.


  Result := true;

end;//---//Funkcja Wygl¹d_Elementy__Tekstura_Wczytaj_2().

//Funkcja Wygl¹d_Elementy__Utwórz_Element().
function TStatki_Form.Wygl¹d_Elementy__Utwórz_Element( const statek_f : TStatek; const l¹d_prymityw_f : string; const w³aœciciel_gl_base_scene_object_f : TGLBaseSceneObject; const rodzic_gl_dummy_cube_f : TGLDummyCube = nil ) : TGLCustomSceneObject;
begin

  //
  // Funkcja tworzy elementy wygl¹du.
  //
  // Zwraca utworzony element wygl¹du.
  //
  // Parametry:
  //   statek_f
  //     = nil - tworzy elementów wygl¹du l¹du.
  //     <> nil - tworzy elementów wygl¹du statku.
  //   l¹d_prymityw_f - symbol typu elementu wygl¹du (kula, prostopad³oœcian itp.)
  //   w³aœciciel_gl_base_scene_object_f - w³aœciciel tworzonego elementu wygl¹du
  //   rodzic_gl_dummy_cube_f - rodzic tworzonego elementu wygl¹du:
  //     = nil - rodzicem jest w³aœciciel.
  //     <> nil - rodzicem jest kontener na prymitywy.
  //

  Result := nil;


  if l¹d_prymityw_f = wygl¹d_prymityw__kapsu³a_c then
    Result := Wyglad_Elementy.TSt_GLCapsule.Create( w³aœciciel_gl_base_scene_object_f )
  else
  if l¹d_prymityw_f = wygl¹d_prymityw__kula_c then
    //Result := TGLSphere.Create( w³aœciciel_gl_base_scene_object_f )
    //Result := Wyglad_Elementy.TSt_GLCustomSceneObject(Wyglad_Elementy.TSt_GLSphere.Create( w³aœciciel_gl_base_scene_object_f ))
    Result := Wyglad_Elementy.TSt_GLSphere.Create( w³aœciciel_gl_base_scene_object_f )
  else
  if l¹d_prymityw_f = wygl¹d_prymityw__linia_c then
    begin

      Result := TGLLines.Create( w³aœciciel_gl_base_scene_object_f );
      TGLLines(Result).Pickable := false;
      TGLLines(Result).AddNode( 0, 0, 0 );
      TGLLines(Result).AddNode( 0, 0, -1 );

    end
  else//if l¹d_prymityw_f = wygl¹d_prymityw__linia_c then
  if l¹d_prymityw_f = wygl¹d_prymityw__ostros³up_c then
    begin

      //Result := TGLFrustrum.Create( w³aœciciel_gl_base_scene_object_f );
      Result := Wyglad_Elementy.TSt_GLFrustrum.Create( w³aœciciel_gl_base_scene_object_f );
      TGLFrustrum(Result).Height := 1;
      TGLFrustrum(Result).ApexHeight := 1;

    end
  else//if l¹d_prymityw_f = wygl¹d_prymityw__ostros³up_c then
  if l¹d_prymityw_f = wygl¹d_prymityw__prostopad³oœcian_c then
    //Result := TGLCube.Create( w³aœciciel_gl_base_scene_object_f )
    Result := Wyglad_Elementy.TSt_GLCube.Create( w³aœciciel_gl_base_scene_object_f )
  else
  if l¹d_prymityw_f = wygl¹d_prymityw__sto¿ek_c then
    //Result := TGLCone.Create( w³aœciciel_gl_base_scene_object_f )
    Result := Wyglad_Elementy.TSt_GLCone.Create( w³aœciciel_gl_base_scene_object_f )
  else
  if l¹d_prymityw_f = wygl¹d_prymityw__torus_c then
    Result := Wyglad_Elementy.TSt_GLTorus.Create( w³aœciciel_gl_base_scene_object_f )
  else
  if l¹d_prymityw_f = wygl¹d_prymityw__walec_c then
    //Result := TGLCylinder.Create( w³aœciciel_gl_base_scene_object_f )
    Result := Wyglad_Elementy.TSt_GLCylinder.Create( w³aœciciel_gl_base_scene_object_f )
  else
  if   ( l¹d_prymityw_f = wygl¹d_prymityw_c )
    or ( l¹d_prymityw_f = wygl¹d_specjalny__dŸwiêk_emiter_c ) then
    begin

      //Result := TGLDummyCube.Create( w³aœciciel_gl_base_scene_object_f )
      Result := Wyglad_Elementy.TSt_GLDummyCube.Create( w³aœciciel_gl_base_scene_object_f );
      //Wyglad_Elementy.Radar_Ignoruje( Result, true ); // Kontenerów na obiekty nie rysuje na radarze.

    end
  else//if   ( l¹d_prymityw_f = wygl¹d_prymityw_c ) (...)
    //Result := TGLSphere.Create( w³aœciciel_gl_base_scene_object_f );
    if statek_f = nil then
      Log_Wypisz( t³umaczenie_komunikaty_r.komunikat__tworzenie_l¹du___nieznany_typ_prymitywu + ': ' + l¹d_prymityw_f + '.', not L¹d__Komunikat_B³êdu_Pomiñ_CheckBox.Checked )
    else//if statek_f = nil then
      Log_Wypisz( t³umaczenie_komunikaty_r.komunikat__tworzenie_elementów_statku___nieznany_typ_prymitywu + ': ' + l¹d_prymityw_f + '.', not Statek__Komunikat_B³êdu_Pomiñ_CheckBox.Checked );


  if Result <> nil then
    begin

      if rodzic_gl_dummy_cube_f = nil then
        Result.Parent := w³aœciciel_gl_base_scene_object_f
      else//if rodzic_gl_dummy_cube_f = nil then
        Result.Parent := rodzic_gl_dummy_cube_f;


      //if not ( Result is TGLDummyCube ) then
      if not ( Result is Wyglad_Elementy.TSt_GLDummyCube ) then
        begin

          Result.Material.FrontProperties.Ambient.Color := GLS.Color.clrTransparent;
          Result.Material.FrontProperties.Diffuse.Color := GLS.Color.clrTransparent;
          Result.Material.FrontProperties.Emission.Color := GLS.Color.clrTransparent;

        end;
      //---//if not ( Result is TGLDummyCube ) then


      if    ( l¹d_prymityw_f <> wygl¹d_prymityw_c )
        and ( l¹d_prymityw_f <> wygl¹d_specjalny__dŸwiêk_emiter_c ) then
        begin

          // Do kontenera prymitywów, emitera dŸwiêku nie dodaje detekcji kolizji.

          if statek_f = nil then
            begin

              //Result.Name := obiekt_nazwa_prefiks__l¹d_c + Trim(  FormatFloat( '000000000', l¹d_list.Count + 1 )  );
              inc( l¹d_nazwa_numer_g );
              //Result.Name := obiekt_nazwa_prefiks__l¹d_c + Trim(  FormatFloat( '000000000', l¹d_nazwa_numer_g )  );
              Wyglad_Elementy.Obiekt_Rodzaj( Result, Wyglad_Elementy.or_L¹d );
              Wyglad_Elementy.Identyfikator_Elementu( Result, l¹d_nazwa_numer_g );

            end
          else//if statek_f = nil then
            begin

              //Result.Name := 'Statek_Wygl¹d_Elementy__' + Trim(  FormatFloat( '0000', statek_f.id_statek )  ) + '__' + Trim(  FormatFloat( '000000000', statek_f.wygl¹d_elementy_list.Count + 1 )  );
              //inc( statek_f.wygl¹d_elementy_nazwa_numer );
              //Result.Name := 'Statek_Wygl¹d_Elementy__' + Trim(  FormatFloat( '0000', statek_f.id_statek )  ) + '__' + Trim(  FormatFloat( '000000000', statek_f.wygl¹d_elementy_nazwa_numer )  );
              Wyglad_Elementy.Obiekt_Rodzaj( Result, Wyglad_Elementy.or_Statek );

            end;
          //---//if statek_f = nil then

          //Result.MoveUp(); // Aby nie zas³ania³o Informacje_G³ówne_GLHUDText. //???



          // Dynamiczne dodanie zdarzenia kolizji.
          if l¹d_prymityw_f <> wygl¹d_prymityw__linia_c then
            with TGLBCollision.Create( Result.Behaviours ) do
              begin

                GroupIndex := 0;
                Manager := Gra_GLCollisionManager;

                if l¹d_prymityw_f = wygl¹d_prymityw__kula_c then
                  BoundingMode := cbmSphere
                else//if l¹d_prymityw_f = wygl¹d_prymityw__kula_c then
                  BoundingMode := cbmCube;

              end;
            //---//with TGLBCollision.Create( Result.Behaviours ) do

        end
      else//if    ( l¹d_prymityw_f <> wygl¹d_prymityw_c ) (...)
        if l¹d_prymityw_f = wygl¹d_prymityw_c then
          Wyglad_Elementy.Obiekt_Rodzaj( Result, Wyglad_Elementy.or_Kontener_Prymitywów )
        else//if l¹d_prymityw_f = wygl¹d_prymityw_c then
          if l¹d_prymityw_f = wygl¹d_specjalny__dŸwiêk_emiter_c then
            begin

              Wyglad_Elementy.Obiekt_Rodzaj( Result, Wyglad_Elementy.or_DŸwiêk_Emiter );
              Wyglad_Elementy.Radar_Ignoruje( Result, true );
              Result.Pickable := false;

            end;
          //---//if l¹d_prymityw_f = wygl¹d_specjalny__dŸwiêk_emiter_c then

    end;
  //---//if Result <> nil then

end;//---//Funkcja Wygl¹d_Elementy__Utwórz_Element().

//Funkcja Komunikacja_Rekord_Testowy_Obs³uga().
procedure TStatki_Form.Komunikacja_Rekord_Testowy_Obs³uga( const tylko_wyœwietl_f : boolean = true );
var
  i : integer;
begin

  //
  // Funkcja wyœwietla zawartoœæ testowego rekordu komunikacji
  // i ewentualnie podstawia dane do testowego rekordu komunikacji.
  //
  // Parametry:
  //   tylko_wyœwietl_f:
  //     false - podstawi dane.
  //     true - tylko wyœwietli.
  //


  if not tylko_wyœwietl_f then
    begin

      komunikacja_rekord_testowy_r.liczba_ca³kowita := Random( 99 );
      komunikacja_rekord_testowy_r.liczba_rzeczywista := Random( 999 ) + Random( 9999 ) * 0.0001;
      komunikacja_rekord_testowy_r.data_czas := Now();
      komunikacja_rekord_testowy_r.napis_krótki := '¹¥êÊŒÆñó³';

      for i := 1 to 10 do
        komunikacja_rekord_testowy_r.napis_krótki := komunikacja_rekord_testowy_r.napis_krótki +
          Char(  Random( 188 ) + 32  ); // Od 32 do 220.

    end;
  //---//if not tylko_wyœwietl_f then


  Log_Memo.Lines.Add(  '*' + IntToStr( komunikacja_rekord_testowy_r.liczba_ca³kowita ) + '*liczba ca³kowita'  );
  Log_Memo.Lines.Add(  '*' + FloatToStr( komunikacja_rekord_testowy_r.liczba_rzeczywista ) + '*liczba rzeczywista'  );
  Log_Memo.Lines.Add(  '*' + DateTimeToStr( komunikacja_rekord_testowy_r.data_czas ) + '*data czas'  );
  Log_Memo.Lines.Add( '*' + komunikacja_rekord_testowy_r.napis_krótki + '*napis krótki' );
  Log_Memo.Lines.Add(    'OpóŸnienie: ' + Trim(   FormatFloat(  '### ### ##0', SecondsBetween( Now(), komunikacja_rekord_testowy_r.data_czas )  )   ) + ' [s].'    );

end;//---//Funkcja Komunikacja_Rekord_Testowy_Obs³uga().

//---//      ***      Funkcje      ***      //---//


//FormShow().
procedure TStatki_Form.FormShow( Sender: TObject );

  //Funkcja Gwiazdy_Nawigacyjne_Dodaj() w FormShow().
  procedure Gwiazdy_Nawigacyjne_Dodaj( gl_sky_dome_f : GLS.SkyDome.TGLSkyDome );
  var
    zt_gl_sky_dome_star : GLS.SkyDome.TGLSkyDomeStar;
  begin

    if gl_sky_dome_f = nil then
      Exit;


    {$region 'Gwiazdy nawigacyjne.'}
    // Iloœæ gwiazd nawigacyjnych.
    // PN dól.
    zt_gl_sky_dome_star := gl_sky_dome_f.Stars.Add();
    zt_gl_sky_dome_star.Dec := 45; // Góra dó³ ( 0 - 180 ), ujemnych, pod horyzontem nie widaæ.
    zt_gl_sky_dome_star.Magnitude := -0.75; // Wielkoœæ -5 (najwiêksza chyba).
    zt_gl_sky_dome_star.RA := 90; // Prawo. Obrót (lewo prawo) 90 przód -90 ty³ (gdy przód z, lewo x).
    zt_gl_sky_dome_star.Color := clSkyBlue;
    //---// PN dó³.

    // PN góra.
    zt_gl_sky_dome_star := gl_sky_dome_f.Stars.Add();
    zt_gl_sky_dome_star.Dec := 65;
    zt_gl_sky_dome_star.Magnitude := -0.5;
    zt_gl_sky_dome_star.RA := 90;
    zt_gl_sky_dome_star.Color := clWhite;
    //---// PN góra.

    // Z.
    zt_gl_sky_dome_star := gl_sky_dome_f.Stars.Add();
    zt_gl_sky_dome_star.Dec := 30;
    zt_gl_sky_dome_star.Magnitude := -1.25;
    zt_gl_sky_dome_star.RA := 180;
    zt_gl_sky_dome_star.Color := clMaroon;
    //---// Z.

    // W.
    zt_gl_sky_dome_star := gl_sky_dome_f.Stars.Add();
    zt_gl_sky_dome_star.Dec := 2;
    zt_gl_sky_dome_star.Magnitude := 0.0005;
    zt_gl_sky_dome_star.RA := 0;
    zt_gl_sky_dome_star.Color := clYellow;
    //---// W.

    // Góra œrodek.
    zt_gl_sky_dome_star := gl_sky_dome_f.Stars.Add();
    zt_gl_sky_dome_star.Dec := 90;
    zt_gl_sky_dome_star.Magnitude := -0.575;
    zt_gl_sky_dome_star.RA := 90;
    zt_gl_sky_dome_star.Color := clBlue;
    //---// Góra œrodek.

    // PD œrodek.
    zt_gl_sky_dome_star := gl_sky_dome_f.Stars.Add();
    zt_gl_sky_dome_star.Dec := 0;
    zt_gl_sky_dome_star.Magnitude := -0.3;
    zt_gl_sky_dome_star.RA := -90;
    zt_gl_sky_dome_star.Color := clGreen;
    //---// PD œrodek.

    // PD skos.
    zt_gl_sky_dome_star := gl_sky_dome_f.Stars.Add();
    zt_gl_sky_dome_star.Dec := 1;
    zt_gl_sky_dome_star.Magnitude := -0.1;
    zt_gl_sky_dome_star.RA := -91;
    zt_gl_sky_dome_star.Color := clMoneyGreen;
    //---// PD skos.
    {$endregion 'Gwiazdy nawigacyjne.'}

  end;//---//Funkcja Gwiazdy_Nawigacyjne_Dodaj() w FormShow().

begin//FormShow().

  // Wywo³anie w obrêbie dzia³ania tego zdarzenia Application.MessageBox, ShowMessage, Komunikat_Wyœwietl wyœwietla b³¹d 'Argument out of range' ale nie przerywa wykonywania reszty kodu.

  Gra_GLCadencer.CurrentTime := 0;

  Randomize();

  amunicja__obra¿enia_zasiêg_widoczne_g := false;
  babymetal_statek__lot_wysokoœæ_g := 1100;
  babymetal_statek__odleg³oœæ_maksymalna_g := 2000;
  babymetal_statek__prawdopodobieñstwo_pojawienia_siê_g := 80;
  babymetal_statek__prêdkoœæ_maksymalna_g := 5;
  babymetal_statek__prêdkoœæ_mmno¿nik_aktualny_g := 0.5;
  babymetal_statek__rotacja_w³asna_g := false;
  babymetal_statek__rotacja_w³asna_prêdkoœæ_g := 20;
  babymetal_statek__skala_g := 10;
  babymetal_statek__skrêt_prêdkoœæ_g := 30;
  babymetal_statek__widocznoœæ_losowanie__ostatnie__czas_sekundy_g := Czas_Teraz_W_Sekundach();
  babymetal_statek__widocznoœæ_losowanie__sekundy_i_g := 30;
  celownik_widocznoœæ__prze³¹czony_g := false;
  chmury__iloœæ_g := 100;
  chmury__rozpiêtoœæ_w__pionie_g := 100;
  chmury__rozpiêtoœæ_w__poziomie_g := 2500;
  chmury__wysokoœæ_g := 350;
  chmury__pozycje__czas_przeliczenia_ostatniego_sekundy_i_g := 0;
  chmury__pozycje__przeliczenie_sekundy_g := 10;
  czy_gra_lokalna_g := false;
  czy_kamera_od_najnowszego_pocisku := true;
  czy_pauza_g := false;
  czy_serwer_g := false;
  czy_klient_g := false;
  czy_wy³¹czanie_serwera_g := false;
  //czy_wysy³anie_trwa_g := false;
  dzieñ_jasnoœæ_g := 1;
  dŸwiêk_emiter__wyœwietlanie_poziom_g := 0;
  dŸwiêk_emiter__zasiêg_minimalny_g := 2;
  dŸwiêk_silnika_zmiana__ostatnie_wywo³anie_data_czas_g := 0;
  dŸwiêki_efekt__czas_trwania_sprawdŸ__ostatnie_wywo³anie_data_czas_g := 0;
  dŸwiêki__iloœæ__amunicja__lot_g := 0;
  dŸwiêki__iloœæ__amunicja__lot__du¿e_g := 0;
  dŸwiêki__iloœæ__amunicja__p³yniêcie_g := 0;
  dŸwiêki__iloœæ__kotwica__statek_g := 0;
  dŸwiêki__iloœæ__kotwica__stop_g := 0;
  dŸwiêki__iloœæ__kotwica__w_dó³_g := 0;
  dŸwiêki__iloœæ__kotwica__w_górê_g := 0;
  dŸwiêki__iloœæ__lufa_za³adowanie_g := 0;
  dŸwiêki__iloœæ__lufa_za³adowanie__du¿e_g := 0;
  dŸwiêki__iloœæ__silnik__25_g := 0;
  dŸwiêki__iloœæ__silnik__50_g := 0;
  dŸwiêki__iloœæ__silnik__75_g := 0;
  dŸwiêki__iloœæ__silnik__100_g := 0;
  dŸwiêki__iloœæ__sos_lot_g := 0;
  dŸwiêki__iloœæ__sos_rozb³ysk_g := 0;
  dŸwiêki__iloœæ__syrena_okrêtowa_g := 0;
  dŸwiêki__iloœæ__trafienie_l¹d_g := 0;
  dŸwiêki__iloœæ__trafienie_l¹d__du¿e_g := 0;
  dŸwiêki__iloœæ__trafienie_statek_g := 0;
  dŸwiêki__iloœæ__trafienie_statek__du¿e_g := 0;
  dŸwiêki__iloœæ__trafienie_woda_g := 0;
  dŸwiêki__iloœæ__trafienie_woda__du¿e_g := 0;
  dŸwiêki__iloœæ__wiatr_g := 0;
  dŸwiêki__iloœæ__wystrza³_g := 0;
  dŸwiêki__iloœæ__wystrza³__du¿e_g := 0;
  dŸwiêki__iloœæ__zatopienie_statek_g := 0;
  dŸwiêki__losowe_uruchomione__czas_przeliczenia_ostatniego_milisekundy_i_g := 0;
  dŸwiêki__losowe_uruchomione__milisekundy__modyfikator_losowy_i_g := Random( dŸwiêki__losowe_uruchomione__przeliczenie_milisekundy_c );
  dŸwiêki__losowe_uruchomione__wszystkie__l¹d_g := false;
  dŸwiêki__losowe_uruchomione__wszystkie__statki_g := false;
  dŸwiêki__komunikat__alarm_torpedowy__ostatnie_wywo³anie_data_czas_g := 0;
  dŸwiêki__komunikat__o_zmianie_utwórz__ostatnie_wywo³anie_data_czas_g := 0;
  dŸwiêki__komunikat__odtwarzanie_nastêpny_sprawdŸ__ostatnie_wywo³anie_data_czas_g := 0;
  dŸwiêki__komunikat__prêdkoœæ__ostatnie_wywo³anie__data_czas_g := 0;
  dŸwiêki__komunikat__prêdkoœæ__ostatnie_wywo³anie__id_statek_g := -99;
  dŸwiêki__komunikat__skrêt__ostatnie_wywo³anie__data_czas_g := 0;
  dŸwiêki__komunikat__skrêt__ostatnie_wywo³anie__id_statek_g := -99;
  dŸwiêki__komunikat__wyg³aszany_g := '';
  dŸwiêki__komunikat__wyg³aszany__czas_trwania_milisekundy_g := 0;
  dŸwiêki__komunikat__wyg³aszany__pauza__czas_trwania_milisekundy_g := 0;
  dŸwiêki__komunikat__wyg³aszany__rodzaj_g := dkr_Brak;
  dŸwiêki__komunikat__wyg³aszany__rozpoczêcie_data_czas_g := 0;
  dŸwiêki__komunikat__zanurzenie__ostatnie_wywo³anie__data_czas_g := 0;
  dŸwiêki__komunikat__zanurzenie__ostatnie_wywo³anie__id_statek_g := -99;
  fale__obszar_ograniczenie_g := 1016;
  fale__wysokoœæ_bazowa_g := 6;
  fale__wysokoœæ_bazowa__serwer_g := fale__wysokoœæ_bazowa_g;
  gracz_tryb_g := gt_Statek;
  kamera_dla_prze³¹czania_statku_kopia__kamera_tryb_g := kt_Brak;
  kamera_indeks_amunicji_g := 0;
  kamera_tryb_g := kt_Brak;
  kamera_ustawienie_kopia__kamera_tryb_g := kt_Brak;
  kamera_ustawienie_kopia__ogniskowa_g := -99;
  kamera_radar__y_domyœlne_g := 2;
  kamera_szybkoœæ_ruchu_g := 1;
  klawiatura_konfiguracja__szukaj__znaleziony_indeks_g := -1;
  klient_pierwsze_ustawienie_kamery_g := false;
  klient__cadencer_current_time__korekta_o_czas_serwera_g := 0;
  l¹d_definicja_g := '';
  l¹d_nazwa_numer_g := 0;
  l¹d_zwolnij_uszkodzenia_przelicz_g := false;
  mg³a_intensywnoœæ_g := 0;
  mapa__klient_wartoœæ_g := '<?>';
  //moment_wciœniêcia_klawisza := Now();
  oczekiwanie_na__naprawienie_elementu__czas_sekundy_g := 30;
  oczekiwanie_na__odnowienie_statku__czas_sekundy_g := 60;
  pauza__rozpoczêcie_data_czas_g := 0;
  pokój_rozmów__ostatnia_wiadomoœci__indeks_ostatni_g := 0;
  pokój_rozmów__ostatnia_wiadomoœæ_wys³ana_data_czas_g := 0;
  pokój_rozmów__si_polecenia__indeks_ostatni_g := -1;
  pokój_rozmów__zmiana_szerokoœci__aktywnoœæ_g := false;
  pokój_rozmów__zmiana_szerokoœci__szerokoœæ_pocz¹tkowa_g := 0;
  pokój_rozmów__zmiana_szerokoœci__wysokoœæ_pocz¹tkowa_g := 0;
  pokój_rozmów__zmiana_szerokoœci__x_pocz¹tkowy_g := 0;
  pokój_rozmów__zmiana_szerokoœci__y_pocz¹tkowy_g := 0;
  punkt_naprowadzaj__na_lotniskowiec__okreœlenie_ostatnie_sekundy_i_g := -punkt_naprowadzaj__na_lotniskowiec__okreœlenie_sekundy_c;
  radar__przyciski_panel__ukrywanie__odliczanie_pocz¹tek_czas_sekundy_i_g := -1;
  radar__rysowanie__l¹d__ostatnie_wywo³anie_data_czas_g := 0;
  radar_panel__wielkoœæ_procent_okna_g := 25;
  rekord_statki__wysy³ane_rzadziej__czas_milisekundy_g := 1000;
  rekord_statki__wysy³ane_rzadziej__ostatnie_wys³anie_data_czas_g := 0;
  si__lot_trwanie_do_l¹dowania__czas_sekundy_g := 300;
  si__p³ywanie_do_punktu__odnawianie_zasobów__trwanie__czas_sekundy_g := 30;
  si__uszkodzenia_wykryto__trwanie__czas_sekundy_g := 60;
  si__walka__p³ywanie_do_punktu__trwanie__czas_sekundy_g := 30;
  si__zak³óca_sekundy_g := 60;
  s³oñce_ksiê¿yc_odcieñ_pora_przeliczone_g := 0;
  statek_parametry_ustaw__blokuj_g := false;
  statki_pozycje_pocz¹tkowe__klient_wartoœæ_g := '<?>';
  statki_pozycje_pocz¹tkowe__klient_wartoœæ__wed³ug_mapy_g := false;
  œwiat³a_miganie__czas_przeliczenia_ostatniego_milisekundy_i_g := 0;
  œwiat³a_miganie__opóŸnienia_losowe_resetuj__l¹d__przeliczono_g := false;
  wiatr__czas_przeliczenia_ostatniego_sekundy_i_g := 0;
  wiatr__przeliczenie_sekundy_g := 30;
  wiatr__wp³yw_na__amunicjê__przesuwanie_g := 0.025;
  wiatr__wp³yw_na__amunicjê__unoszenie_g := 0.5;
  wiatr__wp³yw_na__statek__obrót_g := 0.0001;
  wiatr__wp³yw_na__statek__przesuwanie_g := 0.005;
  wiatr__wp³yw_na__statek__unoszenie_g := 1;
  wieloosobowe__komenda__gra__serwer_czas_wyœli_ostatnie_g := 0;
  wieloosobowe__komenda__gra__serwer_czas_wyœlij_sekundy := 60;
  zak³ócanie__czas_do_ponownej_próby_sekundy_g := 15;
  zak³ócenie__prawdopodobieñstwo_sukcesu_procent_g := 30;

  amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ__apz := 100;
  amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ_torpeda := 10;
  amunicja_prêdkoœæ_zakresy_r_g.prêdkoœæ_opadania_wspó³czynnik := 0.015;
  amunicja_prêdkoœæ_zakresy_r_g.zmiana_k¹ta_opadania_prêdkoœæ := 50;

  kotwica_zakresy_r_g.odleg³oœæ_maksymalna__kz := Abs( Dno_GLPlane.Position.Y ) * 4;
  kotwica_zakresy_r_g.prêdkoœæ__podnoszenia := 1;
  kotwica_zakresy_r_g.prêdkoœæ__opadania := kotwica_zakresy_r_g.prêdkoœæ__podnoszenia * 4;

  wiatr_vector_g := GLS.VectorGeometry.VectorMake( 0, 0, 0, 0 );

  statek_create_funkcje_g.statek__komunikat_b³êdu_pomiñ := Statek__Komunikat_B³êdu_Pomiñ_CheckBox.Checked;

  statek_create_funkcje_g.Amunicja_Wystrzelona_Utwórz_Jeden := Amunicja_Wystrzelona_Utwórz_Jeden;
  statek_create_funkcje_g.Grawitacja_Opadanie_Obra¿enia_Wylicz := Grawitacja_Opadanie_Obra¿enia_Wylicz;
  statek_create_funkcje_g.Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero := Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero;

  statek_create_funkcje_g.Log_Wypisz_wsk := Log_Wypisz;
  statek_create_funkcje_g.Odczytaj_Liczbê_Z_Napisu_wsk := Odczytaj_Liczbê_Z_Napisu;
  statek_create_funkcje_g.Odczytaj_Liczbê_Z_Napisu_Xml_wsk := Odczytaj_Liczbê_Z_Napisu_Xml;
  statek_create_funkcje_g.Pêtla_Wzorzec_Oznacz_wsk := Pêtla_Wzorzec_Oznacz;
  statek_create_funkcje_g.Œwiat³a_Miganie__Wartoœci_Ustaw_wsk := Œwiat³a_Miganie__Wartoœci_Ustaw;
  statek_create_funkcje_g.Wygl¹d_Elementy__DŸwiêk_Wczytaj_wsk := Wygl¹d_Elementy__DŸwiêk_Wczytaj;
  statek_create_funkcje_g.Wygl¹d_Elementy__Kolor_Losowy_Wylicz_wsk := Wygl¹d_Elementy__Kolor_Losowy_Wylicz;
  statek_create_funkcje_g.Wygl¹d_Elementy__Kolor_Ustaw_wsk := Wygl¹d_Elementy__Kolor_Ustaw;
  statek_create_funkcje_g.Wygl¹d_Elementy__Kopiuj_W³aœciwoœci_wsk := Wygl¹d_Elementy__Kopiuj_W³aœciwoœci;
  statek_create_funkcje_g.Wygl¹d_Elementy__Tekstura_Wczytaj_2_wsk := Wygl¹d_Elementy__Tekstura_Wczytaj_2;
  statek_create_funkcje_g.Wygl¹d_Elementy__Utwórz_Element_wsk := Wygl¹d_Elementy__Utwórz_Element;


  Pozycja_Pocz¹tkowa_Parametry_Domyœlne_Ustaw( l¹d_pozycja_pocz¹tkowa_parametry_t[ 1 ], false );
  Pozycja_Pocz¹tkowa_Parametry_Domyœlne_Ustaw( l¹d_pozycja_pocz¹tkowa_parametry_t[ 2 ], true );

  gra_pozycja_pocz¹tkowa_parametry_t[ 1 ] := l¹d_pozycja_pocz¹tkowa_parametry_t[ 1 ];
  gra_pozycja_pocz¹tkowa_parametry_t[ 2 ] := l¹d_pozycja_pocz¹tkowa_parametry_t[ 2 ];

  statki_pozycja_pocz¹tkowa_parametry_t[ 1 ] := l¹d_pozycja_pocz¹tkowa_parametry_t[ 1 ];
  statki_pozycja_pocz¹tkowa_parametry_t[ 2 ] := l¹d_pozycja_pocz¹tkowa_parametry_t[ 2 ];


  informacje_dodatkowe_zegar_pozorny_r.oczekiwanie_milisekundy := 1000;
  informacje_dodatkowe_zegar_pozorny_r.ostatnie_wywo³anie := 0;

  napis_odœwie¿_zegar_pozorny_r.oczekiwanie_milisekundy := 300;
  napis_odœwie¿_zegar_pozorny_r.ostatnie_wywo³anie := 0;

  page_control_1_active_page_kopia_tab_sheet_g := nil;
  page_control_1_szerokoœæ_kopia_g := 0;
  page_control_1_szerokoœæ_pocz¹tkowa_g := PageControl1.Width;

  radar_zegar_pozorny_r.oczekiwanie_milisekundy := 1000;
  radar_zegar_pozorny_r.w³¹czony := false;
  radar_zegar_pozorny_r.ostatnie_wywo³anie := 0;
  radar__rysowanie__opóŸnienie_cykli__œlad_g := 0;


  // Dla 50 / 1 animacja jest w miarê p³ynna (wysy³ka albo odbiór).
  Serwer_Wysy³a_Timer.Interval := 50;
  Klient_IdTCP_Czyta_Timer.Interval := 100;
  Klient_IdUDP_Czyta_Timer.Interval := 1;


  projektowy_tryb__statek := nil;
  samolot__statek_gracza := nil;
  statek_gracza := nil; // Nie zmienia statki_t[ 0 ].
  wieloosobowe_amunicja_efekt_g := nil;


  Gra_GLSceneViewer.Align := alClient;
  Radar_GLSceneViewer.Align := alClient;
  Klawiatura_Konfiguracja_ScrollBox.Align := alClient;

  //mouse_look_active_przed_pauz¹ := Gra_GLUserInterface.MouseLookActive;

  Woda_Góra_GLPlane.Height := 100000;
  Woda_Góra_GLPlane.Width := Woda_Góra_GLPlane.Height;

  // Nie wykrywa mi kolizji z Plane wiêc ta bry³a s³u¿y do wykrywania trafieñ w wodê.
  Woda_Kolizje_GLCube.Position.Y := Woda_Góra_GLPlane.Position.Y - Woda_Kolizje_GLCube.CubeHeight * 0.5;
  Woda_Kolizje_GLCube.CubeDepth := Woda_Góra_GLPlane.Height;
  Woda_Kolizje_GLCube.CubeWidth := Woda_Góra_GLPlane.Width;

  Woda_Dó³_GLPlane.Height := Woda_Góra_GLPlane.Height;
  Woda_Dó³_GLPlane.Width := Woda_Góra_GLPlane.Width;

  Dno_GLPlane.Height := Woda_Góra_GLPlane.Height;
  Dno_GLPlane.Width := Woda_Góra_GLPlane.Width;
  Dno_GLPlane.Position.Y := -30;

  Dno_Kolizje_GLCube.Position.Y := Dno_GLPlane.Position.Y - Dno_Kolizje_GLCube.CubeHeight * 0.5;
  Dno_Kolizje_GLCube.CubeDepth := Woda_Góra_GLPlane.Height;
  Dno_Kolizje_GLCube.CubeWidth := Woda_Góra_GLPlane.Width;

  Radar_T³o_GLPlane.Height := Woda_Góra_GLPlane.Height;
  Radar_T³o_GLPlane.Width := Woda_Góra_GLPlane.Width;
  Radar_GLLightSource.Position.Y := Radar_T³o_GLPlane.Height * 10; // T³o radaru robi siê bardzo ciemne przy du¿ych rozmiarach mapy.
  Radar_Wiatr_Kierunek_Linia_GLLines.Nodes[ 1 ].Z := 0;

  {$region 'Celownik ekranowy.'}
  Celownik_Ekranowy__Góra_GLHUDSprite.Material.BlendingMode := Celownik_Ekranowy__Dó³_GLHUDSprite.Material.BlendingMode;
  Celownik_Ekranowy__Góra_GLHUDSprite.Material.FrontProperties.Ambient := Celownik_Ekranowy__Dó³_GLHUDSprite.Material.FrontProperties.Ambient;
  Celownik_Ekranowy__Góra_GLHUDSprite.Material.FrontProperties.Diffuse := Celownik_Ekranowy__Dó³_GLHUDSprite.Material.FrontProperties.Diffuse;
  Celownik_Ekranowy__Góra_GLHUDSprite.Material.FrontProperties.Emission := Celownik_Ekranowy__Dó³_GLHUDSprite.Material.FrontProperties.Emission;
  Celownik_Ekranowy__Góra_GLHUDSprite.Material.MaterialOptions := Celownik_Ekranowy__Dó³_GLHUDSprite.Material.MaterialOptions;
  Celownik_Ekranowy__Góra_GLHUDSprite.Pickable := Celownik_Ekranowy__Dó³_GLHUDSprite.Pickable;

  Celownik_Ekranowy__Lewo_GLHUDSprite.Material.BlendingMode := Celownik_Ekranowy__Dó³_GLHUDSprite.Material.BlendingMode;
  Celownik_Ekranowy__Lewo_GLHUDSprite.Material.FrontProperties.Ambient := Celownik_Ekranowy__Dó³_GLHUDSprite.Material.FrontProperties.Ambient;
  Celownik_Ekranowy__Lewo_GLHUDSprite.Material.FrontProperties.Diffuse := Celownik_Ekranowy__Dó³_GLHUDSprite.Material.FrontProperties.Diffuse;
  Celownik_Ekranowy__Lewo_GLHUDSprite.Material.FrontProperties.Emission := Celownik_Ekranowy__Dó³_GLHUDSprite.Material.FrontProperties.Emission;
  Celownik_Ekranowy__Lewo_GLHUDSprite.Material.MaterialOptions := Celownik_Ekranowy__Dó³_GLHUDSprite.Material.MaterialOptions;
  Celownik_Ekranowy__Lewo_GLHUDSprite.Pickable := Celownik_Ekranowy__Dó³_GLHUDSprite.Pickable;

  Celownik_Ekranowy__Prawo_GLHUDSprite.Material.BlendingMode := Celownik_Ekranowy__Dó³_GLHUDSprite.Material.BlendingMode;
  Celownik_Ekranowy__Prawo_GLHUDSprite.Material.FrontProperties.Ambient := Celownik_Ekranowy__Dó³_GLHUDSprite.Material.FrontProperties.Ambient;
  Celownik_Ekranowy__Prawo_GLHUDSprite.Material.FrontProperties.Diffuse := Celownik_Ekranowy__Dó³_GLHUDSprite.Material.FrontProperties.Diffuse;
  Celownik_Ekranowy__Prawo_GLHUDSprite.Material.FrontProperties.Emission := Celownik_Ekranowy__Dó³_GLHUDSprite.Material.FrontProperties.Emission;
  Celownik_Ekranowy__Prawo_GLHUDSprite.Material.MaterialOptions := Celownik_Ekranowy__Dó³_GLHUDSprite.Material.MaterialOptions;
  Celownik_Ekranowy__Prawo_GLHUDSprite.Pickable := Celownik_Ekranowy__Dó³_GLHUDSprite.Pickable;
  {$endregion 'Celownik ekranowy.'}

  Gracz_Nazwa_Edit.MaxLength := SizeOf( TWieloosobowe_String ) - 1;
  Pokój_Rozmów__Wiadomoœæ_Edit.MaxLength := SizeOf( TWieloosobowe_String ) - 1;

  Kamera_Odleg³oœæ_Maksymalna_SpinEdit.Value := 0;

  Ustawienia_ScrollBox.VertScrollBar.Position := 0;
  Ustawienia_ScrollBox.HorzScrollBar.Position := 0;

  Pozosta³e_ScrollBox.VertScrollBar.Position := 0;
  Pozosta³e_ScrollBox.HorzScrollBar.Position := 0;

  {$region 'Ustawia wartoœci automatycznych zmian intensywnoœci.'}
  Zmieniaj_Automatycznie__Mg³a__Do_SpinEdit.MinValue := Mg³a_SpinEdit.MinValue;
  Zmieniaj_Automatycznie__Mg³a__Do_SpinEdit.MaxValue := Mg³a_SpinEdit.MaxValue;
  //Zmieniaj_Automatycznie__Mg³a__Do_SpinEdit.Value := Mg³a_SpinEdit.MaxValue;

  Zmieniaj_Automatycznie__Mg³a__Od_SpinEdit.MinValue := Mg³a_SpinEdit.MinValue;
  Zmieniaj_Automatycznie__Mg³a__Od_SpinEdit.MaxValue := Mg³a_SpinEdit.MaxValue;
  Zmieniaj_Automatycznie__Mg³a__Od_SpinEdit.Value := Mg³a_SpinEdit.MinValue;

  Zmieniaj_Automatycznie__Mg³a__Si³a_SpinEdit.MinValue := Mg³a_SpinEdit.MinValue;
  Zmieniaj_Automatycznie__Mg³a__Si³a_SpinEdit.MaxValue := Mg³a_SpinEdit.MaxValue;
  //Zmieniaj_Automatycznie__Mg³a__Si³a_SpinEdit.Value := 1;


  Zmieniaj_Automatycznie__Morze_Wzburzenie__Do_SpinEdit.MinValue := Morze_Wzburzenie_SpinEdit.MinValue;
  Zmieniaj_Automatycznie__Morze_Wzburzenie__Do_SpinEdit.MaxValue := Morze_Wzburzenie_SpinEdit.MaxValue;
  //Zmieniaj_Automatycznie__Morze_Wzburzenie__Do_SpinEdit.Value := Morze_Wzburzenie_SpinEdit.MaxValue;

  Zmieniaj_Automatycznie__Morze_Wzburzenie__Od_SpinEdit.MinValue := Morze_Wzburzenie_SpinEdit.MinValue;
  Zmieniaj_Automatycznie__Morze_Wzburzenie__Od_SpinEdit.MaxValue := Morze_Wzburzenie_SpinEdit.MaxValue;
  Zmieniaj_Automatycznie__Morze_Wzburzenie__Od_SpinEdit.Value := Morze_Wzburzenie_SpinEdit.MinValue;

  Zmieniaj_Automatycznie__Morze_Wzburzenie__Si³a_SpinEdit.MinValue := Morze_Wzburzenie_SpinEdit.MinValue;
  Zmieniaj_Automatycznie__Morze_Wzburzenie__Si³a_SpinEdit.MaxValue := Morze_Wzburzenie_SpinEdit.MaxValue;
  //Zmieniaj_Automatycznie__Morze_Wzburzenie__Si³a_SpinEdit.Value := 1;


  Zmieniaj_Automatycznie__Noc__Do_SpinEdit.MinValue := Noc_SpinEdit.MinValue;
  Zmieniaj_Automatycznie__Noc__Do_SpinEdit.MaxValue := Noc_SpinEdit.MaxValue;
  //Zmieniaj_Automatycznie__Noc__Do_SpinEdit.Value := Noc_SpinEdit.MaxValue;

  Zmieniaj_Automatycznie__Noc__Od_SpinEdit.MinValue := Noc_SpinEdit.MinValue;
  Zmieniaj_Automatycznie__Noc__Od_SpinEdit.MaxValue := Noc_SpinEdit.MaxValue;
  Zmieniaj_Automatycznie__Noc__Od_SpinEdit.Value := Noc_SpinEdit.MinValue;

  Zmieniaj_Automatycznie__Noc__Si³a_SpinEdit.MinValue := Noc_SpinEdit.MinValue;
  Zmieniaj_Automatycznie__Noc__Si³a_SpinEdit.MaxValue := Noc_SpinEdit.MaxValue;
  //Zmieniaj_Automatycznie__Noc__Si³a_SpinEdit.Value := 1;
  {$endregion 'Ustawia wartoœci automatycznych zmian intensywnoœci.'}

  Interfejs_Aktywnoœæ_Ustaw__SI( false );

  amunicja_wystrzelona_list := TList.Create();
  wieloosobowe_amunicja_wystrzelona_list := TList.Create();

  dŸwiêki_efekt_list := TList.Create();
  informacje_dodatkowe_list := TList.Create();
  l¹d_list := TList.Create();
  œlad_torowy_list := TList.Create();
  trafienia_efekt_list := TList.Create();

  tcp_klienci_lista_g := TTCP_Klienci_Lista.Create();
  udp_klienci_lista_g := TUDP_Klienci_Lista.Create();

  dŸwiêki_komunikaty_string_list := TStringList.Create();
  pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list := TStringList.Create();


  Gra_GLEarthSkyDome.HazeColor := Gra_GLSkyDome.Bands.Items[ 0 ].StartColor;
  Gra_GLEarthSkyDome.SkyColor := Gra_GLSkyDome.Bands.Items[ 0 ].StopColor;

  Radar_GLEarthSkyDome.DeepColor := Radar_T³o_GLPlane.Material.FrontProperties.Diffuse;
  Radar_GLEarthSkyDome.HazeColor := Radar_T³o_GLPlane.Material.FrontProperties.Diffuse;
  Radar_GLEarthSkyDome.SkyColor := Radar_T³o_GLPlane.Material.FrontProperties.Diffuse;

  Radar_GLSceneViewer.Buffer.BackgroundColor := Radar_T³o_GLPlane.Material.FrontProperties.Diffuse.AsWinColor; // $00345A14


  Gwiazdy_Nawigacyjne_Dodaj( Gra_GLSkyDome );
  Gwiazdy_Nawigacyjne_Dodaj( Gra_GLEarthSkyDome );

  pokój_rozmów__szerokoœæ_kopia_g := Pokój_Rozmów_GroupBox.Width;


  T³umaczenie__Domyœlne();
  T³umaczenie__Lista_Wczytaj();

  Ustawienia_T³umaczenia(); // Aby w poni¿szych listach wyboru (np. Statek_ComboBox) dopisywane by³y przet³umaczone zwroty.


  DŸwiêki__Komunikaty__Lista_Wczytaj( false ); // Aby potem ustawiæ odpowiedni¹ wartoœæ z zapisanej konfiguracji.

  if DŸwiêk__T³umaczenia_ComboBox.Items.Count > 1 then
    DŸwiêk__T³umaczenia_ComboBox.ItemIndex := 1; // Aby podczas pierwszego uruchomienia programu ustawi³ jakieœ t³umaczenia dŸwiêków.


  // Je¿eli statek jest tworzony w FormShow() to stworzenie w broni TGLDisk.Create() sprawia, ¿e pojawia siê b³¹d wyœwietlania tekstur.
  // Niektóre l¹dy siê d³ugo tworz¹.
  Ustawienia_Plik( false );

  //T³umaczenie__Wczytaj(); // Jest w Ustawienia_Plik().

  Klawiatura_Konfiguracja__Domyœlna_ButtonClick( Sender );


  if    ( L¹d_ComboBox.ItemIndex < 0 )
    and (  L¹d_ComboBox.Items.Count >= 1  ) then
    L¹d_ComboBox.ItemIndex := 0; // Nie wywo³a L¹d_ComboBoxChange().

  if    ( Statek_ComboBox.ItemIndex < 0 )
    and (  Statek_ComboBox.Items.Count >= 1  ) then
    Statek_ComboBox.ItemIndex := 0; // Nie wywo³a Statek_ComboBoxChange().

  if    ( Statek__Samolot_ComboBox.ItemIndex < 0 )
    and (  Statek__Samolot_ComboBox.Items.Count >= 2  ) then // <brak>.
    Statek__Samolot_ComboBox.ItemIndex := 1;

  if    ( SI__Statek__Samolot_ComboBox.ItemIndex < 0 )
    and (  SI__Statek__Samolot_ComboBox.Items.Count >= 2  ) then // <brak>.
    SI__Statek__Samolot_ComboBox.ItemIndex := 1;


  Gra_Wspó³czynnik_Prêdkoœci_SpinEditChange( Sender );
  Celownik_Wielkoœæ_EditChange( Sender );
  Kamera_Szybkoœæ_Ruchu_EditChange( Sender );
  Mysz_Czu³oœæ_EditChange( Sender );
  Amunicja__Zanurzenie_G³êbokoœæ_Zadana_EditChange( Sender );
  Amunicja__Zanurzenie_G³êbokoœæ_Zadana_EditChange( Amunicja__Zanurzenie_G³êbokoœæ_Zadana__Skok_O_Edit );
  Punkt_Naprowadzaj_SpinEditChange( Sender );
  Gra_Wspó³czynnik_Trudnoœci_SpinEditChange( Sender );


  Informacje_Dodatkowe_GLAsyncTimer.Enabled := false;
  radar_zegar_pozorny_r.w³¹czony := true;
  radar__skala_spinedit__value__poprzednia_wartoœæ_g := Radar__Skala_SpinEdit.Value;


  Gracze_Lista_Odœwie¿();


  Klawiatura_Konfiguracja__Wczytaj_ButtonClick( Klawiatura_Konfiguracja__Przyciski_Panel );

  Pokój_Rozmów__Na_Ekranie_CheckBoxClick( Sender );
  Gra_GLSceneViewerMouseDown( Sender, System.UITypes.TMouseButton.mbLeft, [ System.Classes.ssHorizontal ], 0, 0 ); // Ze wzglêdu na Gra_GLSceneViewer.skupienie_ustawione i ssHorizontal nie strzeli.


  Radar_0_GLSphere.Visible := false;
  Radar_L_GLCapsule.Visible := false;



  SetLength( dŸwiêki_komunikaty_czasy_trwania_r_t, 0 );
  SetLength( gra_statystyki_r_t, 0 );
  //SetLength( gra_statystyki_r_t, 1 );

  //Gra_Statystyki_Zeruj( gra_statystyki_r_t[ 0 ] );
  //gra_statystyki_r_t[ 0 ].identyfikator := 0;

  Gra_Statystyki_Wypisz( false );


  //tcp_klienci_lista_g.Dodaj_Aktualizuj( serwer_peer_port_c, -99 ); // Serwer ma peer_port_f i identyfikator_f = -1.
  //Elementy_Gry_Przygotuj();

  Self.WindowState := wsMaximized;
  window_state_kopia_g := Self.WindowState;


  {$IFDEF DEBUG}
  PageControl1.ActivePage := Wieloosobowe_TabSheet; //Gra_TabSheet Wieloosobowe_TabSheet Ustawienia_TabSheet Pozosta³e_TabSheet Statystyki_TabSheet Klawiatura_Konfiguracja_TabSheet Log_TabSheet
  {$ELSE DEBUG}
  //????
  Button1.Visible := false;
  PageControl1.ActivePage := Gra_TabSheet; //Wieloosobowe_TabSheet
  Wieloosobowe__Pod³¹cz_BitBtnClick( Sender ); // Mo¿e nowym osob¹ bêdzie ³atwiej rozpocz¹æ grê.
  {$ENDIF}

  //Morze_Wzburzenie_SpinEditChange( Sender ); // Aby ustawiæ parametry fal. // Jest w Ustawienia_Plik().

  Form_Show_Dokoñcz_Timer.Enabled := true;

end;//---//FormShow().

//Form_Show_Dokoñcz_TimerTimer().
procedure TStatki_Form.Form_Show_Dokoñcz_TimerTimer( Sender: TObject );
begin

  // Je¿eli statek jest tworzony w FormShow() to stworzenie w broni TGLDisk.Create() sprawia, ¿e pojawia siê b³¹d wyœwietlania tekstur.
  // Niektóre l¹dy siê d³ugo tworz¹.

  Form_Show_Dokoñcz_Timer.Enabled := false;


  DŸwiêk__Aktywnoœæ_CheckBoxClick( Sender );
  

  Statek__Utwórz_BitBtnClick( nil );

  Kamera_Prze³¹cz( kt_Za_Statkiem );

  {$IFDEF DEBUG}
  //???
  Kamera_Prze³¹cz( kt_Swobodna );
  {$ENDIF}


  L¹d_ComboBoxChange( Sender );  


  Celownik_Widocznoœæ_CheckBoxClick( Sender );

  Zmieniaj_Automatycznie_CheckBoxClick( Zmieniaj_Automatycznie__Mg³a_CheckBox );
  Zmieniaj_Automatycznie_CheckBoxClick( Zmieniaj_Automatycznie__Morze_Wzburzenie_CheckBox );
  Zmieniaj_Automatycznie_CheckBoxClick( Zmieniaj_Automatycznie__Noc_CheckBox );

  Chmury_CheckBoxClick( Sender );

  Fale_CheckBoxClick( Sender );


  DŸwiêki__Komunikaty_GLAsyncTimer.Enabled := true;


  {$IFNDEF DEBUG}
    Exit; // Test. //?????
  {$ENDIF}

end;//---//Form_Show_Dokoñcz_TimerTimer().

//FormClose().
procedure TStatki_Form.FormClose( Sender: TObject; var Action: TCloseAction );
var
  i : integer;
begin

  {$IFNDEF DEBUG}
  if Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__zakoñczyæ_dzia³anie_programu, t³umaczenie_komunikaty_r.komunikat__potwierdzenie, MB_YESNO + MB_DEFBUTTON2 + MB_ICONQUESTION ) <> IDYES then
    begin

      Action := caNone;
      Exit;

    end;
  //---//if Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__zakoñczyæ_dzia³anie_programu, t³umaczenie_komunikaty_r.komunikat__potwierdzenie, MB_YESNO + MB_DEFBUTTON2 + MB_ICONQUESTION ) <> IDYES then
  {$ENDIF}


  Klawiatura_Konfiguracja_ScrollBox.Visible := false; // Trochê przyœpiesza dzia³anie.

  Gra_GLCadencer.Enabled := false;


  if GLSMOpenAL1.Active then
    GLSMOpenAL1.Active := false;


  Screen.Cursor := crDefault;

  DŸwiêki__Komunikaty_GLAsyncTimer.Enabled := false;
  Informacje_Dodatkowe_GLAsyncTimer.Enabled := false;

  Pauza( true );

  Radar__Wyczyœæ( rcz_Wszystko );


  Chmury__Zwolnij();


  //Gra_Zakoñcz_BitBtnClick( Sender ); // Jest ju¿ w Wieloosobowe__Od³¹cz_BitBtnClick().
  Wieloosobowe__Od³¹cz_BitBtnClick( Sender );


  //Elementy_Gry_Zwolnij( false ); // Jest ju¿ w Wieloosobowe__Od³¹cz_BitBtnClick() w Wieloosobowe__Od³¹cz_BitBtnClick().

  SetLength( klawiatura_konfiguracja_r_t, 0 );
  Klawisz_Konfiguracja_Zwolnij();

  SetLength( pokój_rozmów__si_polecenia_t, 0 );


  GLMaterialLibrary1.Materials.Clear(); // Usuwa wszystkie tekstury.


  SetLength( gra_statystyki_r_t, 0 );
  SetLength( l¹dy_lista_t, 0 );
  SetLength( prymitywy_lista_t, 0 );
  SetLength( si_schematy_lista_t, 0 );
  SetLength( statki_lista_t, 0 );
  SetLength( statki_pozycje_pocz¹tkowe_lista_t, 0 );


  FreeAndNil( wieloosobowe_amunicja_efekt_g );

  FreeAndNil( dŸwiêki_efekt_list );

  FreeAndNil( amunicja_wystrzelona_list );
  FreeAndNil( wieloosobowe_amunicja_wystrzelona_list );

  FreeAndNil( l¹d_list );
  FreeAndNil( œlad_torowy_list );
  FreeAndNil( trafienia_efekt_list );

  FreeAndNil( tcp_klienci_lista_g );
  FreeAndNil( udp_klienci_lista_g );


  dŸwiêki_komunikaty_string_list.Clear();
  FreeAndNil( dŸwiêki_komunikaty_string_list );

  pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list.Clear();
  FreeAndNil( pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list );


  for i := informacje_dodatkowe_list.Count - 1 downto 0 do
    Informacja_Dodatkowa_Zwolnij_Jeden( informacje_dodatkowe_list, i );

  FreeAndNil( informacje_dodatkowe_list );


  for i := 0 to Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Items.Count - 1 do
    TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj(Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Items.Objects[ i ]).Free();

  Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Clear();


  for i := 0 to Pokój_Rozmów__Ignoruj_CheckListBox.Items.Count - 1 do
    TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj(Pokój_Rozmów__Ignoruj_CheckListBox.Items.Objects[ i ]).Free();

  Pokój_Rozmów__Ignoruj_CheckListBox.Clear();

end;//---//FormClose().

//FormResize().
procedure TStatki_Form.FormResize( Sender: TObject );
var
  zti : integer;
begin

  Radar_Panel.Height := Round( Gra_GLSceneViewer.Height * radar_panel__wielkoœæ_procent_okna_g * 0.01 );
  Radar_Panel.Top := Gra_GLSceneViewer.Height - Radar_Panel.Height;

  Radar_Panel.Width := Radar_Panel.Height;


  if Pokój_Rozmów_GroupBox.Parent = Self then
    begin

      if Radar_Panel.Visible then
        zti := Radar_Panel.Height
      else//if Radar_Panel.Visible then
        zti := 0;

      Pokój_Rozmów_GroupBox.Top := Gra_GLSceneViewer.Height - zti - Pokój_Rozmów_GroupBox.Height - 10;

    end;
  //---//if Pokój_Rozmów_GroupBox.Parent = Self then

end;//---//FormResize().

//Gra_GLSceneViewerExit().
procedure TStatki_Form.Gra_GLSceneViewerExit( Sender: TObject );
begin

  Gra_GLSceneViewer.skupienie_ustawione := false;
  Screen.Cursor := crDefault;

end;//---//Gra_GLSceneViewerExit().

//Gra_GLSceneViewerClick().
procedure TStatki_Form.Gra_GLSceneViewerClick(Sender: TObject);
begin

  //if not Gra_GLSceneViewer.Focused then
  //  Gra_GLSceneViewer.SetFocus();

end;//---//Gra_GLSceneViewerClick().

//Gra_GLSceneViewerMouseDown().
procedure TStatki_Form.Gra_GLSceneViewerMouseDown( Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer );
var
  zt_statek : TStatek;
  Selected : TGLSceneObject;
begin

  if not Gra_GLSceneViewer.Focused then
    Gra_GLSceneViewer.SetFocus();

  if not Gra_GLSceneViewer.skupienie_ustawione then
    begin

      // Aby pierwsze klikniêcie mysz¹ nie wywo³ywa³o akcji obs³ugi klawiszy (gdy zmienia siê skupienie).

      Gra_GLSceneViewer.skupienie_ustawione := true;
      Screen.Cursor := crCross;
      Exit;

    end;
  //---//if not Gra_GLSceneViewer.skupienie_ustawione then


  //if not czy_pauza_g then
    begin

      //// Pauza nie jest ca³kowicie aktywna (nie wszystkie klawisze s¹ obs³ugiwane podczas pauzy).
      // Mo¿e lepiej aby pauza by³a aktywna.

      //if    ( gracz_tryb_g = gt_Samolot )
      //  and ( samolot__statek_gracza <> nil ) then
      //  Klawisze_Obs³uga__Statek( samolot__statek_gracza.id_statek, 0, Word(Button), Shift )
      //else//if    ( gracz_tryb_g = gt_Samolot ) (...)
      //if    ( gracz_tryb_g = gt_Statek )
      //  and ( statek_gracza <> nil ) then
      //  Klawisze_Obs³uga__Statek( statek_gracza.id_statek, 0, Word(Button), Shift );
      //if Statek_Gracza__Gracz_Tryb_Zwróæ() <> nil then
      //  Klawisze_Obs³uga__Statek( Statek_Gracza__Gracz_Tryb_Zwróæ().id_statek, 0, Word(Button), Shift );
      //
      //Klawisze_Obs³uga__Zachowanie_Ci¹g³e__Lokalne( 0.15, Shift, Word(Button) ); // Na wypadek gdyby przypisano np. ruch kamery pod przycisk myszy.

      Klawisze_Obs³uga( 0, Word(Button), Shift );

    end;
  //---//if not czy_pauza_g then


  if czy_pauza_g then
    Napis_Odœwie¿( -1, true );


  Pauza_Podczas_Funkcje();


  if not Projektowy_Tryb_CheckBox.Checked then
    Exit;


  Selected := nil;

  if ( Gra_GLSceneViewer.Buffer.GetPickedObject( x, y ) is TGLSceneObject ) then
    try
      Selected := ( Gra_GLSceneViewer.Buffer.GetPickedObject( x, y ) as TGLSceneObject ); // W IDE 10.2 czasami zg³asza b³¹d 'Invalid class typecast' (gdy wykrywa klikniêcie w TGLSkyDome, mo¿na mu ustawiæ Pickable = false - te¿ pomaga).
    except
    end;
    //---//try


  if Selected <> nil then
    begin

      zt_statek := Statek_ZnajdŸ( Selected.Owner );


      if zt_statek <> nil then
        begin

          projektowy_tryb__statek := zt_statek;
          //Log_Wypisz(  t³umaczenie_komunikaty_r.komunikat__tryb_projektowy___id_statek + ': ' + IntToStr( projektowy_tryb__statek.id_statek ) + '.'  );
          Informacja_Dodatkowa_Dodaj(  t³umaczenie_komunikaty_r.komunikat__tryb_projektowy___id_statek + ': ' + IntToStr( projektowy_tryb__statek.id_statek ) + '.', 3  );

        end
      else//if zt_statek <> nil then
        //Log_Wypisz( t³umaczenie_komunikaty_r.komunikat__tryb_projektowy___nie_odnaleziono_statku );
        Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__tryb_projektowy___nie_odnaleziono_statku, 3 );

    end;
  //---//if Selected <> nil then

end;//---//Gra_GLSceneViewerMouseDown().

//Gra_GLSceneViewerMouseWheel().
procedure TStatki_Form.Gra_GLSceneViewerMouseWheel( Sender: TObject; Shift: TShiftState; WheelDelta: Integer; MousePos: TPoint; var Handled: Boolean );
var
  zti,
  luneta_zasiêg_l
    : integer;
  ztr : real;
begin

  if Gra_GLCamera.Parent = Gra_GLScene.Objects then
    begin

      // Kamera za statkiem.

      if WheelDelta >= 0 then
        //Gra_GLCamera.Position.Z := Gra_GLCamera.Position.Z
        Gra_GLCamera.Move( 1 )
      else//if WheelDelta >= 0 then
        //Gra_GLCamera.Position.Z := Gra_GLCamera.Position.Z;
        Gra_GLCamera.Move( -1 );

    end
  else//if Gra_GLCamera.Parent = Gra_GLScene.Objects then
    begin

      // Kamera na statku.

      // Okreœla rz¹d wielkoœci aktualnej wartoœci przybli¿enia (jak szybko zmienia siê przybli¿enie lunety).
      zti := Round( Gra_GLCamera.FocalLength );

      if WheelDelta < 0 then
        dec( zti );

      zti := Length(  IntToStr( zti )  ) - 1;
      zti := Round(  Power( 10, zti )  );
      //---// Okreœla rz¹d wielkoœci aktualnej wartoœci przybli¿enia (jak szybko zmienia siê przybli¿enie lunety).


      if Statek_Gracza__Gracz_Tryb_Zwróæ() <> nil then
        luneta_zasiêg_l := Statek_Gracza__Gracz_Tryb_Zwróæ().luneta_zasiêg
      else//if Statek_Gracza__Gracz_Tryb_Zwróæ() <> nil then
        luneta_zasiêg_l := 600;


      if WheelDelta >= 0 then
        begin

          // Przybli¿anie.

          if Gra_GLCamera.FocalLength < luneta_zasiêg_l then
            Gra_GLCamera.FocalLength := Gra_GLCamera.FocalLength + zti
          else//if Gra_GLCamera.FocalLength < luneta_zasiêg_l then
            Gra_GLCamera.FocalLength := luneta_zasiêg_l;


          if Gra_GLCamera.FocalLength > luneta_zasiêg_l then
            Gra_GLCamera.FocalLength := luneta_zasiêg_l;

        end
      else//if WheelDelta >= 0 then
        begin

          // Oddalanie.

          if Gra_GLCamera.FocalLength > kamera_ogniskowa_domyœlna_c then
            Gra_GLCamera.FocalLength := Gra_GLCamera.FocalLength - zti
          else//if Gra_GLCamera.FocalLength > kamera_ogniskowa_domyœlna_c then
            Gra_GLCamera.FocalLength := kamera_ogniskowa_domyœlna_c;


          if Gra_GLCamera.FocalLength < kamera_ogniskowa_domyœlna_c then
            Gra_GLCamera.FocalLength := kamera_ogniskowa_domyœlna_c;

        end;
      //---//if WheelDelta >= 0 then


      // Modyfikuje czu³oœæ myszy zale¿nie od procentu przybli¿enia lunety (100% przybli¿enia – najwolniejszy ruch).
      zti := Round( luneta_zasiêg_l - kamera_ogniskowa_domyœlna_c ); // Zakres zmiany ogniskowej kamery.
      ztr := mysz_czu³oœæ_g - mysz_czu³oœæ_luneta_g; // Zakres zmiany prêdkoœci myszy.

      if zti = 0 then
        zti := 1; // Aby nie by³o dzielenia przez zero.

      Gra_GLUserInterface.MouseSpeed :=
          mysz_czu³oœæ_g
        - ztr
        * (  ( Gra_GLCamera.FocalLength - kamera_ogniskowa_domyœlna_c ) * 100 / zti  ) // Aktualny procent przybli¿enia lunety.
        * 0.01;

      if Gra_GLUserInterface.MouseSpeed < mysz_czu³oœæ_luneta_g then
        Gra_GLUserInterface.MouseSpeed := mysz_czu³oœæ_luneta_g;
      //---// Modyfikuje czu³oœæ myszy zale¿nie od procentu przybli¿enia lunety (100% przybli¿enia – najwolniejszy ruch).

    end;
  //---//if Gra_GLCamera.Parent = Gra_GLScene.Objects then


  Pauza_Podczas_Funkcje();

end;//---//Gra_GLSceneViewerMouseWheel().

//Gra_GLSceneViewerMouseMove().
procedure TStatki_Form.Gra_GLSceneViewerMouseMove( Sender: TObject; Shift: TShiftState; X, Y: Integer );
begin

  if    ( czy_pauza_g )
    and ( Self.Active )
    and ( Gra_GLSceneViewer.Focused ) then
    begin

      Gra_GLUserInterface.MouseLook();
      Gra_GLUserInterface.MouseUpdate();
      Gra_GLSceneViewer.Invalidate();

    end;
  //---//if    ( czy_pauza_g ) (...)

end;//---//Gra_GLSceneViewerMouseMove().

//Gra_GLSceneViewerKeyDown().
procedure TStatki_Form.Gra_GLSceneViewerKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
begin

  Klawisze_Obs³uga( Key, -1, Shift );

end;//---//Gra_GLSceneViewerKeyDown().

//Gra_GLCadencerProgress().
procedure TStatki_Form.Gra_GLCadencerProgress( Sender: TObject; const deltaTime, newTime: Double );
begin

  Klawisze_Obs³uga__Zachowanie_Ci¹g³e__Lokalne( deltaTime * 5 );


  if Gra_GLSceneViewer.Focused then
    begin

      Gra_GLUserInterface.MouseLook();
      Gra_GLUserInterface.MouseUpdate();
      Gra_GLSceneViewer.Invalidate();

    end;
  //---//if Gra_GLSceneViewer.Focused then


  if not czy_klient_g then
    Gra_GLCollisionManager.CheckCollisions();


  Statki_Ruch( deltaTime );

  Lufy_Prze³adowanie( deltaTime );


  Trafienia_Efekt__Czas_Trwania_SprawdŸ( deltaTime );
  DŸwiêki__Efekt__Czas_Trwania_SprawdŸ();
  DŸwiêki__Komunikat__Odtwarzanie_Nastêpny_SprawdŸ();


  Celownicza_Kula_Zmieñ_Pozycjê();


  Kamera_Odleg³oœæ_Kontroluj_Ustaw( deltaTime );

  Kamera_Woda_Pod_Nad_Widok_Ustaw();

  Napis_Odœwie¿( deltaTime );
  Informacje_Dodatkowe_GLAsyncTimerTimer( Sender );
  Radar__Odœwie¿();


  if l¹d_zwolnij_uszkodzenia_przelicz_g then
    L¹d__Zwolnij_Uszkodzenia();


  if not czy_klient_g then
    SI_Decyduj();


  DŸwiêk__Losowe_Uruchamianie();
  DŸwiêki__Komunikat__O_Zmianie_Utwórz();


  Punkt_Naprowadzaj__Na_Lotniskowiec();
  Punkt_Naprowadzaj();

  Œwiat³a_Miganie();

  Radar_Panel_Ukrywanie();

  if not czy_klient_g then
    Wiatr__Wylicz();

  Chmury__Pozycje_Wylicz();
  Chmury__Ruch( deltaTime );

  BabyMetal_Statek__Ruch( deltaTime );

end;//---//Gra_GLCadencerProgress().

//Gra_GLCollisionManagerCollision().
procedure TStatki_Form.Gra_GLCollisionManagerCollision( Sender: TObject; object1, object2: TGLBaseSceneObject );

  //Funkcja Oznacz_Kolizjê() w Gra_GLCollisionManagerCollision().
  function Oznacz_Kolizjê( object_1_f, object_2_f : TGLBaseSceneObject ) : boolean;

    //Funkcja Kolizja_Statek_Statek_Przelicz() w Oznacz_Kolizjê() w Gra_GLCollisionManagerCollision().
    procedure Kolizja_Statek_Statek_Przelicz( statek_1_f, statek_2_f : TStatek; gl_base_scene_object_1_f, gl_base_scene_object_2_f : TGLBaseSceneObject );

      //Funkcja Korekta_O_Wielkoœæ_Statku() w Kolizja_Statek_Statek_Przelicz() w Oznacz_Kolizjê() w Gra_GLCollisionManagerCollision().
      function Korekta_O_Wielkoœæ_Statku( statek_1_f_f, statek_2_f_f : TStatek ) : real;
      begin

        // Uwzglêdnia ró¿nicê wielkoœci statków na podstawie punktów ¿ycia.

        if statek_1_f_f.punkty_¿ycia_maksymalne <> 0 then
          Result := statek_1_f_f.punkty_¿ycia_maksymalne
        else//if statek_1_f_f.punkty_¿ycia_maksymalne <> 0 then
          Result := 1;

        Result := statek_2_f_f.punkty_¿ycia_maksymalne / Result;

        if Result > 10 then
          Result := 10
        else//if Result > 10 then
        if Result < 1 then
          Result := 1;

      end;//Funkcja Korekta_O_Wielkoœæ_Statku() w Kolizja_Statek_Statek_Przelicz() w Oznacz_Kolizjê() w Gra_GLCollisionManagerCollision().

    var
      czy_kotwica_dotyka_statku_l_l : boolean;
      zti_l : integer;
      ztr_l,
      ztr_kopia,
      k¹t_miêdzy_statkami_l,
      k¹t_œredni_miêdzy_statkami_l,
      k¹t_wspó³czynnik_l, // Zale¿nie od k¹ta miêdzy statkami modyfikuje obliczenia; 1 - silne uderzenie, 0.01 - lekkie uderzenie (statki œlizgaj¹ siê po sobie i obracaj¹).
      punkty_¿ycia_kopia_l_l
        : real;
      zt_vector_1,
      zt_vector_2
        : GLS.VectorTypes.TVector4f;
    begin//Funkcja Kolizja_Statek_Statek_Przelicz() w Oznacz_Kolizjê() w Gra_GLCollisionManagerCollision().

      //
      // Funkcja przelicza skutki zderzenia dwóch statków.
      //
      // Parametry:
      //   statek_1_f
      //   statek_2_f
      //   gl_base_scene_object_1_f - element pierwszego statku, który uczestniczy w kolizji.
      //   gl_base_scene_object_2_f - element drugiego statku, który uczestniczy w kolizji.
      //

      if   (
                 ( gl_base_scene_object_1_f.Parent <> nil )
             and ( gl_base_scene_object_1_f.Parent is TKotwica )
             and (  not ( TKotwica(gl_base_scene_object_1_f.Parent).kotwica_ruch_etap__ko in [ kre_Brak, kre_Statek ] )  )
           )
        or (
                 ( gl_base_scene_object_2_f.Parent <> nil )
             and ( gl_base_scene_object_2_f.Parent is TKotwica )
             and (  not ( TKotwica(gl_base_scene_object_2_f.Parent).kotwica_ruch_etap__ko in [ kre_Brak, kre_Statek ] )  )
           ) then
        czy_kotwica_dotyka_statku_l_l := true
      else//if   ( (...)
        czy_kotwica_dotyka_statku_l_l := false;


      {$region 'Wylicza k¹t miêdzy statkami i wspó³czynnik k¹ta.'}
      if statek_1_f.prêdkoœæ_aktualna < 0 then
        zt_vector_1 := GLS.VectorGeometry.VectorNegate( statek_1_f.AbsoluteDirection )
      else//if statek_1_f.prêdkoœæ_aktualna < 0 then
        zt_vector_1 := statek_1_f.AbsoluteDirection;

      if statek_2_f.prêdkoœæ_aktualna < 0 then
        zt_vector_2 := GLS.VectorGeometry.VectorNegate( statek_2_f.AbsoluteDirection )
      else//if statek_1_f.prêdkoœæ_aktualna < 0 then
        zt_vector_2 := statek_2_f.AbsoluteDirection;


      k¹t_miêdzy_statkami_l := //180 - // Je¿eli chce siê sprawdziæ drug¹ czêœæ k¹ta.
        System.Math.RadToDeg
          (
            GLS.VectorGeometry.AngleBetweenVectors
              (
                zt_vector_1,
                zt_vector_2,
                GLS.VectorGeometry.VectorMake( 0, 0, 0 )
              )
          );

      //Statki_Form.Caption := FloatToStr( k¹t_miêdzy_statkami_l );

      if    ( k¹t_miêdzy_statkami_l > 45 )
        and ( k¹t_miêdzy_statkami_l < 135 ) then
        k¹t_wspó³czynnik_l := 1 // Uderzenie z boku.
      else//if    ( k¹t_miêdzy_statkami_l > 45 ) (...)
        begin

          // Uderzenie z przodu lub z ty³u.

          if   (
                     ( statek_1_f.prêdkoœæ_aktualna = 0 ) // Jeden statek p³ynie, a drugi stoi.
                 and ( statek_2_f.prêdkoœæ_aktualna <> 0 )
               )
            or (
                     ( statek_1_f.prêdkoœæ_aktualna <> 0 ) // Jeden statek p³ynie, a drugi stoi.
                 and ( statek_2_f.prêdkoœæ_aktualna = 0 )
               )
            or (
                     ( k¹t_miêdzy_statkami_l > 150 ) // P³yn¹ w przeciwnych kierunkach.
                 and (  Sign( statek_1_f.prêdkoœæ_aktualna ) = Sign( statek_2_f.prêdkoœæ_aktualna )  )
               )
            or (
                     ( k¹t_miêdzy_statkami_l < 30 ) // Jeden ze statków cofa a drugi nie.
                 and (  Sign( statek_1_f.prêdkoœæ_aktualna ) <> Sign( statek_2_f.prêdkoœæ_aktualna )  )
               ) then
            k¹t_wspó³czynnik_l := 1
          else//if Sign( statek_1_f.prêdkoœæ_aktualna ) <> Sign( statek_1_f.prêdkoœæ_aktualna ) then
            k¹t_wspó³czynnik_l := 0.01

        end;
      //---//if    ( k¹t_miêdzy_statkami_l > 45 ) (...)

      //Statki_Form.Caption := FloatToStr( k¹t_wspó³czynnik_l );
      {$endregion 'Wylicza k¹t miêdzy statkami i wspó³czynnik k¹ta.'}


      {$region 'Oznacza kolizjê, wyœwietla efekt, nalicza obra¿enia.'}
      if    (
                 (  Abs( statek_1_f.prêdkoœæ_aktualna_procent__wzglêdny ) > kolizja_oznaczanie_prêdkoœæ_procent_c  )
              or (  Abs( statek_2_f.prêdkoœæ_aktualna_procent__wzglêdny ) > kolizja_oznaczanie_prêdkoœæ_procent_c  )

              or (  Abs( statek_1_f.zanurzenie_pu³ap__szybkoœæ_aktualna ) > 0  )
              or (  Abs( statek_2_f.zanurzenie_pu³ap__szybkoœæ_aktualna ) > 0  )

              or ( statek_1_f.grawitacja_opadanie_szybkoœæ_aktualna <> 0 )
              or ( statek_2_f.grawitacja_opadanie_szybkoœæ_aktualna <> 0 )
            )
        and (  not Statki_Kolizja_Oznaczenie_SprawdŸ( statek_1_f.kolizja_oznaczenie_string_list, statek_2_f.id_statek )  )
        and (  not Statki_Kolizja_Oznaczenie_SprawdŸ( statek_2_f.kolizja_oznaczenie_string_list, statek_1_f.id_statek )  ) then
        begin

          //TGLCube(gl_base_scene_object_1_f).Material.FrontProperties.Emission.SetColor( 0, 1, 0 ); // Test.
          //TGLCube(gl_base_scene_object_2_f).Material.FrontProperties.Emission.SetColor( 0, 1, 0 ); // Test.


          statek_1_f.kolizja_oznaczenie_string_list.Add(  IntToStr( statek_2_f.id_statek ) + '|' + IntToStr( Czas_Teraz_W_Sekundach() )  );
          statek_2_f.kolizja_oznaczenie_string_list.Add(  IntToStr( statek_1_f.id_statek ) + '|' + IntToStr( Czas_Teraz_W_Sekundach() )  );

          Trafienia_Efekt__Utwórz_Jeden( Gra_Obiekty_GLDummyCube, er_Trafienie_L¹d__Bez_Obra¿eñ, gl_base_scene_object_1_f.AbsolutePosition.X, gl_base_scene_object_1_f.AbsolutePosition.Y, gl_base_scene_object_1_f.AbsolutePosition.Z, nil, -1, -1 );
          Trafienia_Efekt__Utwórz_Jeden( Gra_Obiekty_GLDummyCube, er_Trafienie_L¹d__Bez_Obra¿eñ, gl_base_scene_object_2_f.AbsolutePosition.X, gl_base_scene_object_2_f.AbsolutePosition.Y, gl_base_scene_object_2_f.AbsolutePosition.Z, nil, -1, -1 );


          // Najpierw sprawdza obra¿enia od grawitacji.
          if Abs( statek_2_f.grawitacja_opadanie_szybkoœæ_aktualna * 100 / grawitacja_opadanie_szybkoœæ_maksymalna_c ) > kolizja_oznaczanie_prêdkoœæ_procent_c then
            ztr_l :=
                -statek_2_f.punkty_¿ycia_maksymalne
              //* Abs( statek_2_f.grawitacja_opadanie_szybkoœæ_aktualna * 100 / grawitacja_opadanie_szybkoœæ_maksymalna_c * 0.01 ) // Jaki procent prêdkoœci maksymalnej grawitacji osi¹gnie tyle obra¿eñ otrzyma.
              * Abs( statek_2_f.grawitacja_opadanie_szybkoœæ_aktualna / grawitacja_opadanie_szybkoœæ_maksymalna_c ) // Jaki procent prêdkoœci maksymalnej grawitacji osi¹gnie tyle obra¿eñ otrzyma (uproszczenie obliczeñ).
          else//if Abs( statek_2_f.grawitacja_opadanie_szybkoœæ_aktualna * 100 / grawitacja_opadanie_szybkoœæ_maksymalna_c ) > kolizja_oznaczanie_prêdkoœæ_procent_c then
          // Kolizja dotyczy kotwicy.
          //if    ( gl_base_scene_object_1_f.Parent <> nil )
          //  and ( gl_base_scene_object_1_f.Parent is TKotwica ) then
          if czy_kotwica_dotyka_statku_l_l then
            begin

              ztr_l := -statek_2_f.punkty_¿ycia_maksymalne * 0.01;


              if    ( gl_base_scene_object_1_f.Parent <> nil )
                and ( gl_base_scene_object_1_f.Parent is TKotwica )
                and not ( TKotwica(gl_base_scene_object_1_f.Parent).kotwica_ruch_etap__ko in [ kre_Dno ] ) then
                TKotwica(gl_base_scene_object_1_f.Parent).Kotwica_Na_Dnie_Status_Ustaw( kotwica_zakresy_r_g );

              if    ( gl_base_scene_object_2_f.Parent <> nil )
                and ( gl_base_scene_object_2_f.Parent is TKotwica )
                and not ( TKotwica(gl_base_scene_object_2_f.Parent).kotwica_ruch_etap__ko in [ kre_Dno ] ) then
                TKotwica(gl_base_scene_object_2_f.Parent).Kotwica_Na_Dnie_Status_Ustaw( kotwica_zakresy_r_g );

            end
          else//if czy_kotwica_dotyka_statku_l_l then
          // Obra¿enia dla statku drugiego (zadaje statek pierwszy).
          if    ( statek_2_f.czy_samolot ) // Je¿eli jest to samolot i leci 'szybko'.
            and (  Abs( statek_2_f.prêdkoœæ_aktualna_procent__wzglêdny ) >= samolot_prêdkoœæ_lotu_procent_minimalny_c  ) then
            ztr_l :=
                -statek_2_f.punkty_¿ycia_maksymalne
              * (  Abs( statek_2_f.prêdkoœæ_aktualna_procent__wzglêdny ) + Abs( statek_2_f.zanurzenie_pu³ap__zadane_procent )  ) // Wp³yw prêdkoœci (procentowej) statku na obra¿enia [wytrzyma³oœæ statku].
              * 2
              * 0.01 // [Wytrzyma³oœæ statku * wspó³czynnik] / 100 (aby uzyskaæ modyfikacje procentow¹)
          else//if    ( statek_2_f.czy_samolot ) (...)
          //if not Wyglad_Elementy.Dziób( TGLCustomSceneObject(gl_base_scene_object_1_f) ) then
          //  statek_2_f.Punkty_¯ycia__Zmieñ( -statek_2_f.punkty_¿ycia_maksymalne * 0.1 )
          //else
          //if Abs( statek_1_f.prêdkoœæ_aktualna_procent__wzglêdny ) > kolizja_oznaczanie_prêdkoœæ_procent_c * 2 then
          if    (  Wyglad_Elementy.Dziób( TGLCustomSceneObject(gl_base_scene_object_1_f) )  ) // Czy uderzono dziobem (czêœci¹ taranuj¹c¹ - wzmocnion¹).
            and (  Abs( statek_1_f.prêdkoœæ_aktualna_procent__wzglêdny ) > kolizja_oznaczanie_prêdkoœæ_procent_c * 2  ) then
            ztr_l :=
                -statek_2_f.punkty_¿ycia_maksymalne * 0.1 // 10% z punktów ¿ycia.
              * Abs( statek_1_f.prêdkoœæ_aktualna_procent__wzglêdny ) * 0.5 * 0.1 // 10% z po³owy prêdkoœci.
          else//if    (  Wyglad_Elementy.Dziób( TGLCustomSceneObject(gl_base_scene_object_1_f) )  ) (...)
            ztr_l := -statek_2_f.punkty_¿ycia_maksymalne * 0.1 * k¹t_wspó³czynnik_l;

          punkty_¿ycia_kopia_l_l := statek_2_f.punkty_¿ycia_aktualne;
          ztr_kopia := ztr_l;

          if statek_1_f.prêdkoœæ_aktualna_procent__wzglêdny > 25 then
            ztr_l := ztr_l * Korekta_O_Wielkoœæ_Statku( statek_2_f, statek_1_f );

          statek_2_f.Punkty_¯ycia__Zmieñ( ztr_l );

          if statek_2_f.punkty_¿ycia_aktualne <= 0 then
            Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero( statek_2_f, statek_1_f );

          if ztr_l < 0 then
            Trafienia_Efekt__Utwórz_Jeden( statek_2_f, er_Trafienie_L¹d__Obra¿enia, statek_2_f.AbsoluteToLocal( object_1_f.AbsolutePosition ).X, statek_2_f.AbsoluteToLocal( object_1_f.AbsolutePosition ).Y, statek_2_f.AbsoluteToLocal( object_1_f.AbsolutePosition ).Z, nil, -1, -1 );

          zti_l := Gra_Statystyki_R_Identyfikator_ZnajdŸ( statek_1_f.id_gracz );

          if zti_l >= 0 then
            begin

              gra_statystyki_r_t[ zti_l ].taranowania_iloœæ__gs := gra_statystyki_r_t[ zti_l ].taranowania_iloœæ__gs + 1;
              gra_statystyki_r_t[ zti_l ].obra¿enia_zadane__taranowanie__gs := gra_statystyki_r_t[ zti_l ].obra¿enia_zadane__taranowanie__gs - ztr_l; // Wartoœæ jest ujemna.

              if statek_1_f.id_grupa = statek_2_f.id_grupa then
                begin

                  gra_statystyki_r_t[ zti_l ].taranowania_iloœæ_sojuszników__gs := gra_statystyki_r_t[ zti_l ].taranowania_iloœæ_sojuszników__gs + 1;
                  gra_statystyki_r_t[ zti_l ].obra¿enia_zadane__taranowanie_sojusznikom__gs := gra_statystyki_r_t[ zti_l ].obra¿enia_zadane__taranowanie_sojusznikom__gs - ztr_l; // Wartoœæ jest ujemna.

                end;
              //---//if statek_1_f.id_grupa = statek_2_f.id_grupa then

              if    ( punkty_¿ycia_kopia_l_l > 0 )
                and ( statek_2_f.punkty_¿ycia_aktualne <= 0 ) then
                begin

                  gra_statystyki_r_t[ zti_l ].zatopienia__gs := gra_statystyki_r_t[ zti_l ].zatopienia__gs + 1;

                  if statek_1_f.id_grupa = statek_2_f.id_grupa then
                    gra_statystyki_r_t[ zti_l ].zatopienia_sojuszników__gs := gra_statystyki_r_t[ zti_l ].zatopienia_sojuszników__gs + 1
                  else//if statek_1_f.id_grupa = statek_2_f.id_grupa then
                    SI__Syrena_Okrêtowa__Uruchom( statek_1_f );

                end;
              //---//if    ( punkty_¿ycia_kopia_l_l > 0 ) (...)

            end;
          //---//if zti_l >= 0 then


          // Najpierw sprawdza obra¿enia od grawitacji.
          if Abs( statek_1_f.grawitacja_opadanie_szybkoœæ_aktualna * 100 / grawitacja_opadanie_szybkoœæ_maksymalna_c ) > kolizja_oznaczanie_prêdkoœæ_procent_c then
            ztr_l :=
                -statek_1_f.punkty_¿ycia_maksymalne
              //* Abs( statek_1_f.grawitacja_opadanie_szybkoœæ_aktualna * 100 / grawitacja_opadanie_szybkoœæ_maksymalna_c * 0.01 ) // Jaki procent prêdkoœci maksymalnej grawitacji osi¹gnie tyle obra¿eñ otrzyma.
              * Abs( statek_1_f.grawitacja_opadanie_szybkoœæ_aktualna / grawitacja_opadanie_szybkoœæ_maksymalna_c ) // Jaki procent prêdkoœci maksymalnej grawitacji osi¹gnie tyle obra¿eñ otrzyma (uproszczenie obliczeñ).
          else//if Abs( statek_1_f.grawitacja_opadanie_szybkoœæ_aktualna * 100 / grawitacja_opadanie_szybkoœæ_maksymalna_c ) > kolizja_oznaczanie_prêdkoœæ_procent_c then
          // Kolizja dotyczy kotwicy.
          //if    ( gl_base_scene_object_2_f.Parent <> nil )
          //  and ( gl_base_scene_object_2_f.Parent is TKotwica ) then
          if czy_kotwica_dotyka_statku_l_l then
            begin

              ztr_l := -statek_1_f.punkty_¿ycia_maksymalne * 0.01;


              if    ( gl_base_scene_object_1_f.Parent <> nil )
                and ( gl_base_scene_object_1_f.Parent is TKotwica )
                and not ( TKotwica(gl_base_scene_object_1_f.Parent).kotwica_ruch_etap__ko in [ kre_Dno ] ) then
                TKotwica(gl_base_scene_object_1_f.Parent).Kotwica_Na_Dnie_Status_Ustaw( kotwica_zakresy_r_g );

              if    ( gl_base_scene_object_2_f.Parent <> nil )
                and ( gl_base_scene_object_2_f.Parent is TKotwica )
                and not ( TKotwica(gl_base_scene_object_2_f.Parent).kotwica_ruch_etap__ko in [ kre_Dno ] ) then
                TKotwica(gl_base_scene_object_2_f.Parent).Kotwica_Na_Dnie_Status_Ustaw( kotwica_zakresy_r_g );

            end
          else//if czy_kotwica_dotyka_statku_l_l then
          // Obra¿enia dla statku pierwszego (zadaje statek drugi).
          if    ( statek_1_f.czy_samolot ) // Je¿eli jest to samolot i leci 'szybko'.
            and (  Abs( statek_2_f.prêdkoœæ_aktualna_procent__wzglêdny ) >= samolot_prêdkoœæ_lotu_procent_minimalny_c  ) then
            ztr_l :=
                -statek_1_f.punkty_¿ycia_maksymalne
              * (  Abs( statek_1_f.prêdkoœæ_aktualna_procent__wzglêdny ) + Abs( statek_1_f.zanurzenie_pu³ap__zadane_procent )  ) // Wp³yw prêdkoœci (procentowej) statku na obra¿enia [wytrzyma³oœæ statku].
              * 2
              * 0.01 // [Wytrzyma³oœæ statku * wspó³czynnik] / 100 (aby uzyskaæ modyfikacje procentow¹)
          else//if    ( statek_1_f.czy_samolot ) (...)
          if    (    Wyglad_Elementy.Dziób( TGLCustomSceneObject(gl_base_scene_object_2_f) )    ) // Czy uderzono dziobem (czêœci¹ taranuj¹c¹ - wzmocnion¹).
            and (  Abs( statek_2_f.prêdkoœæ_aktualna_procent__wzglêdny ) > kolizja_oznaczanie_prêdkoœæ_procent_c * 2  ) then
            ztr_l :=
                -statek_1_f.punkty_¿ycia_maksymalne * 0.1 // 10% z punktów ¿ycia.
              * Abs( statek_2_f.prêdkoœæ_aktualna_procent__wzglêdny ) * 0.5 * 0.1 // 10% z po³owy prêdkoœci.
          else//if    (    Wyglad_Elementy.Dziób( TGLCustomSceneObject(gl_base_scene_object_2_f) )    ) (...)
            ztr_l := -statek_1_f.punkty_¿ycia_maksymalne * 0.1 * k¹t_wspó³czynnik_l;

          punkty_¿ycia_kopia_l_l := statek_1_f.punkty_¿ycia_aktualne;

          if statek_2_f.prêdkoœæ_aktualna_procent__wzglêdny > 25 then
            ztr_l := ztr_l * Korekta_O_Wielkoœæ_Statku( statek_1_f, statek_2_f );

          statek_1_f.Punkty_¯ycia__Zmieñ( ztr_l );

          if statek_1_f.punkty_¿ycia_aktualne <= 0 then
            Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero( statek_1_f, statek_2_f );

          if ztr_l < 0 then
            Trafienia_Efekt__Utwórz_Jeden( statek_1_f, er_Trafienie_L¹d__Obra¿enia, statek_1_f.AbsoluteToLocal( object_1_f.AbsolutePosition ).X, statek_1_f.AbsoluteToLocal( object_1_f.AbsolutePosition ).Y, statek_1_f.AbsoluteToLocal( object_1_f.AbsolutePosition ).Z, nil, -1, -1 );


          // Wpisuje obra¿anie otrzymane przez statek pierwszy.
          if zti_l >= 0 then
            gra_statystyki_r_t[ zti_l ].obra¿enia_otrzymane__gs := gra_statystyki_r_t[ zti_l ].obra¿enia_otrzymane__gs - ztr_l; // Wartoœæ jest ujemna.


          zti_l := Gra_Statystyki_R_Identyfikator_ZnajdŸ( statek_2_f.id_gracz );

          if zti_l >= 0 then
            begin

              gra_statystyki_r_t[ zti_l ].taranowania_iloœæ__gs := gra_statystyki_r_t[ zti_l ].taranowania_iloœæ__gs + 1;
              gra_statystyki_r_t[ zti_l ].obra¿enia_zadane__taranowanie__gs := gra_statystyki_r_t[ zti_l ].obra¿enia_zadane__taranowanie__gs - ztr_l; // Wartoœæ jest ujemna.

              if statek_1_f.id_grupa = statek_2_f.id_grupa then
                begin

                  gra_statystyki_r_t[ zti_l ].taranowania_iloœæ_sojuszników__gs := gra_statystyki_r_t[ zti_l ].taranowania_iloœæ_sojuszników__gs + 1;
                  gra_statystyki_r_t[ zti_l ].obra¿enia_zadane__taranowanie_sojusznikom__gs := gra_statystyki_r_t[ zti_l ].obra¿enia_zadane__taranowanie_sojusznikom__gs - ztr_l; // Wartoœæ jest ujemna.

                end;
              //---//if statek_1_f.id_grupa = statek_2_f.id_grupa then

              if    ( punkty_¿ycia_kopia_l_l > 0 )
                and ( statek_1_f.punkty_¿ycia_aktualne <= 0 ) then
                begin

                  gra_statystyki_r_t[ zti_l ].zatopienia__gs := gra_statystyki_r_t[ zti_l ].zatopienia__gs + 1;

                  if statek_1_f.id_grupa = statek_2_f.id_grupa then
                    gra_statystyki_r_t[ zti_l ].zatopienia_sojuszników__gs := gra_statystyki_r_t[ zti_l ].zatopienia_sojuszników__gs + 1
                  else//if statek_1_f.id_grupa = statek_2_f.id_grupa then
                    SI__Syrena_Okrêtowa__Uruchom( statek_2_f );

                end;
              //---//if    ( punkty_¿ycia_kopia_l_l > 0 ) (...)


              // Wpisuje obra¿anie otrzymane przez statek drugi.
              gra_statystyki_r_t[ zti_l ].obra¿enia_otrzymane__gs := gra_statystyki_r_t[ zti_l ].obra¿enia_otrzymane__gs - ztr_kopia; // Wartoœæ jest ujemna.

            end;
          //---//if zti_l >= 0 then

        end;
      //---//if    (  Abs( statek_1_f.prêdkoœæ_aktualna_procent__wzglêdny ) > kolizja_oznaczanie_prêdkoœæ_procent_c  ) (...)
      {$endregion 'Oznacza kolizjê, wyœwietla efekt, nalicza obra¿enia.'}


      // Wytraca prêdkoœæ podczas kolizji.
      //if Abs( statek_1_f.prêdkoœæ_aktualna ) > 0 then
      //  begin
      //
      //    if k¹t_wspó³czynnik_l = 1 then // Przy ma³ym k¹cie kolizji nie zwalniaj¹.
      //      statek_1_f.prêdkoœæ__kolizja_zwalnianie := 75;
      //
      //  end;
      ////---//if Abs( statek_1_f.prêdkoœæ_aktualna ) > 0 then
      statek_1_f.prêdkoœæ__kolizja_zwalnianie := 75;
      statek_2_f.prêdkoœæ__kolizja_zwalnianie := 75;

      statek_1_f.zanurzenie_pu³ap__kolizja_zwalnianie := 95;
      statek_2_f.zanurzenie_pu³ap__kolizja_zwalnianie := statek_1_f.zanurzenie_pu³ap__kolizja_zwalnianie;


      if statek_1_f.czy_samolot then
        begin

          ////statek_1_f.czy_samolot__kolizja := true;
          //statek_1_f.Samolot__Kolizja_Bufor_Zliczaj( true );

          if czy_kotwica_dotyka_statku_l_l then
            statek_1_f.czy_samolot__kolizja__kotwica := true
          else//if czy_kotwica_dotyka_statku_l_l then
            statek_1_f.Samolot__Kolizja_Bufor_Zliczaj( true );

        end;
      //---//if statek_1_f.czy_samolot then

      if statek_2_f.czy_samolot then
        begin

          ////statek_2_f.czy_samolot__kolizja := true;
          //statek_2_f.Samolot__Kolizja_Bufor_Zliczaj( true );

          if czy_kotwica_dotyka_statku_l_l then
            statek_2_f.czy_samolot__kolizja__kotwica := true
          else//if czy_kotwica_dotyka_statku_l_l then
            statek_2_f.Samolot__Kolizja_Bufor_Zliczaj( true );

        end;
      //---//if statek_2_f.czy_samolot then


      // Przesuwanie statku, który zosta³ uderzony.
      // Je¿eli statki najd¹ na siebie to mo¿e wyst¹piæ efekt ci¹gniêcia (statek, który próbuje siê wycofaæ z kolizji zamiast siê oddalaæ naci¹ga na siebie drugi statek).
      statek_2_f.Translate
        (
          statek_1_f.AbsoluteDirection.X * ( statek_1_f.prêdkoœæ_aktualna + statek_1_f.zanurzenie_pu³ap__szybkoœæ_aktualna ) * kolizja_przesuwanie_si³a_c * k¹t_wspó³czynnik_l,
          statek_1_f.AbsoluteDirection.Y * ( statek_1_f.prêdkoœæ_aktualna + statek_1_f.zanurzenie_pu³ap__szybkoœæ_aktualna ) * kolizja_przesuwanie_si³a_c * k¹t_wspó³czynnik_l,
          statek_1_f.AbsoluteDirection.Z * ( statek_1_f.prêdkoœæ_aktualna + statek_1_f.zanurzenie_pu³ap__szybkoœæ_aktualna ) * kolizja_przesuwanie_si³a_c * k¹t_wspó³czynnik_l
        );

      if k¹t_wspó³czynnik_l = 1 then
        begin

          // Je¿eli statki najd¹ na siebie to mo¿e wyst¹piæ efekt ci¹gniêcia (statek, który próbuje siê wycofaæ z kolizji zamiast siê oddalaæ naci¹ga na siebie drugi statek).

          zt_vector_1 := GLS.VectorGeometry.VectorNormalize
            (
              GLS.VectorGeometry.VectorMake
                (   // Cel                 Obiekt celuj¹cy
                    statek_2_f.AbsolutePosition.X - statek_1_f.AbsolutePosition.X
                  , statek_2_f.AbsolutePosition.Y - statek_1_f.AbsolutePosition.Y
                  , statek_2_f.AbsolutePosition.Z - statek_1_f.AbsolutePosition.Z
                )
            );

          statek_1_f.Translate
            (
              -zt_vector_1.X * 0.0005,
              -zt_vector_1.Y * 0.0005,
              -zt_vector_1.Z * 0.0005
            );

          statek_2_f.Translate
            (
              zt_vector_1.X * 0.0005,
              zt_vector_1.Y * 0.0005,
              zt_vector_1.Z * 0.0005
            );
        end;
      //---//if k¹t_wspó³czynnik_l = 1 then




      {$region 'Obraca statki do wspólnego kierunku (taki sam k¹t obrotu).'}
      k¹t_œredni_miêdzy_statkami_l := ( statek_1_f.TurnAngle + statek_2_f.TurnAngle ) * 0.5; // Œrednia k¹tów (œrodek miedzy k¹tami).

      // Je¿eli miêdzy k¹tami statków jest k¹t 180 / -180 to zmienia kierunek obrotu.
      if    (  Abs( statek_1_f.TurnAngle ) > 90  )
        and (  Abs( statek_2_f.TurnAngle ) > 90  )
        and (  Sign( statek_1_f.TurnAngle ) <> Sign( statek_2_f.TurnAngle )  ) then
        ztr_l := -1
      else//if    (  Abs( statek_1_f.TurnAngle ) > 90  ) (...)
        ztr_l := 1;

      ztr_l := ztr_l
        * kolizja_obracanie_si³a_c
        * (   (  Abs( statek_1_f.prêdkoœæ_aktualna_procent__wzglêdny ) + Abs( statek_2_f.prêdkoœæ_aktualna_procent__wzglêdny )  ) * 0.5   ) * 0.01; // Œrednia procentowa prêdkoœæ obu statków.


      // Obraca statek pierwszy.
      if statek_2_f.TurnAngle <> k¹t_œredni_miêdzy_statkami_l then
        begin

          if statek_2_f.TurnAngle > k¹t_œredni_miêdzy_statkami_l then
            statek_2_f.TurnAngle := statek_2_f.TurnAngle - statek_2_f.skrêt_prêdkoœæ * ztr_l * Korekta_O_Wielkoœæ_Statku( statek_2_f, statek_1_f ) // 0.3
          else//if statek_2_f.TurnAngle > k¹t_wspó³czynnik_l then
            statek_2_f.TurnAngle := statek_2_f.TurnAngle + statek_2_f.skrêt_prêdkoœæ * ztr_l * Korekta_O_Wielkoœæ_Statku( statek_2_f, statek_1_f );

        end;
      //---//if statek_2_f.TurnAngle <> k¹t_œredni_miêdzy_statkami_l then

      // Obraca statek drugi.
      if statek_1_f.TurnAngle <> k¹t_œredni_miêdzy_statkami_l then
        begin

          if statek_1_f.TurnAngle > k¹t_œredni_miêdzy_statkami_l then
            statek_1_f.TurnAngle := statek_1_f.TurnAngle - statek_1_f.skrêt_prêdkoœæ * ztr_l * Korekta_O_Wielkoœæ_Statku( statek_1_f, statek_2_f )
          else//if statek_1_f.TurnAngle > k¹t_wspó³czynnik_l then
            statek_1_f.TurnAngle := statek_1_f.TurnAngle + statek_1_f.skrêt_prêdkoœæ * ztr_l * Korekta_O_Wielkoœæ_Statku( statek_1_f, statek_2_f );

        end;
      //---//if statek_2_f.TurnAngle <> k¹t_œredni_miêdzy_statkami_l then
      {$endregion 'Obraca statki do wspólnego kierunku (taki sam k¹t obrotu).'}


      if   ( statek_1_f.si_decyduje )
        or ( statek_1_f.si__statek_gracza__p³ywa ) then
        begin

          statek_1_f.si__uszkodzenia_wykryto__czas_sekundy_i := Czas_Teraz_W_Sekundach();
          statek_1_f.si__aktywnoœæ__okreœlenie_ostatnie_sekundy_i := 0;

        end;
      //---//if   ( statek_1_f.si_decyduje ) (...)

      if   ( statek_2_f.si_decyduje )
        or ( statek_2_f.si__statek_gracza__p³ywa ) then
        begin

          statek_2_f.si__uszkodzenia_wykryto__czas_sekundy_i := Czas_Teraz_W_Sekundach();
          statek_2_f.si__aktywnoœæ__okreœlenie_ostatnie_sekundy_i := 0;

        end;
      //---//if   ( statek_2_f.si_decyduje ) (...)

    end;//---//Funkcja Kolizja_Statek_Statek_Przelicz() w Oznacz_Kolizjê() w Gra_GLCollisionManagerCollision().

    //Funkcja Element_Uszkodzenie_Ustaw() w Oznacz_Kolizjê() w Gra_GLCollisionManagerCollision().
    procedure Element_Uszkodzenie_Ustaw( pointer_f : Pointer; obra¿enia_zadawane_wspó³czynnik_zmodyfikowany_f : real );

      //Funkcja Uszkodzenie_Prawdopodobieñstwo() w Element_Uszkodzenie_Ustaw() w Oznacz_Kolizjê() w Gra_GLCollisionManagerCollision().
      function Uszkodzenie_Prawdopodobieñstwo( const prawdopodobieñstwo_uszkodzenia_f : integer = 50 ) : boolean;
      begin

        //
        // Funkcja wylicza czy element zostanie uszkodzony.
        //
        // Zwraca prawdê gdy element zostanie uszkodzony.
        //
        // Parametry:
        //   prawdopodobieñstwo_uszkodzenia_f - szansa, ¿e element zostanie uszkodzony, domyœlnie 50%.
        //

        Result := Random( 101 ) <= prawdopodobieñstwo_uszkodzenia_f * obra¿enia_zadawane_wspó³czynnik_zmodyfikowany_f; // Je¿eli amunicja trafia w coœ poza swoim skutecznym zasiêgiem to szansa na uszkodzenie jest odpowiednio mniejsza.

      end;//---//Funkcja Uszkodzenie_Prawdopodobieñstwo() w Element_Uszkodzenie_Ustaw() w Oznacz_Kolizjê() w Gra_GLCollisionManagerCollision().

    begin//Funkcja Element_Uszkodzenie_Ustaw() w Oznacz_Kolizjê() w Gra_GLCollisionManagerCollision().

      // Zmodyfikuje ten element, w który nast¹pi³o trafienie.

      // To samo w TStatek.Uszkodzenia_Dodaj(), TStatki_Form.Element_Uszkodzenie_Ustaw() w Oznacz_Kolizjê() w Gra_GLCollisionManagerCollision().

      if pointer_f = nil then
        Exit
      else//if pointer_f = nil then
        if TComponent(pointer_f) is TKotwica then
          begin

            if Uszkodzenie_Prawdopodobieñstwo() then
              TKotwica(pointer_f).uszkodzone_czas_sekundy_i := Czas_Teraz_W_Sekundach();
              //TKotwica(pointer_f).Position.Y := TKotwica(pointer_f).Position.Y - 1; // Do testu.

            Exit;

          end
        else//if TComponent(pointer_f) is TKotwica then
        if TComponent(pointer_f) is TTorpedy_Wyrzutnia then
          begin

            if Uszkodzenie_Prawdopodobieñstwo() then
              TTorpedy_Wyrzutnia(pointer_f).uszkodzone_czas_sekundy_i := Czas_Teraz_W_Sekundach();
              //TTorpedy_Wyrzutnia(pointer_f).Position.Y := TTorpedy_Wyrzutnia(pointer_f).Position.Y + 1; // Do testu.

            Exit;

          end
        else//if TComponent(pointer_f) is TTorpedy_Wyrzutnia then
        if TComponent(pointer_f) is TSter then
          begin

            if Uszkodzenie_Prawdopodobieñstwo() then
              TSter(pointer_f).uszkodzone_czas_sekundy_i := Czas_Teraz_W_Sekundach();
              //TSter(pointer_f).Position.Y := TSter(pointer_f).Position.Y - 1; // Do testu.

            Exit;

          end
        else//if TComponent(pointer_f) is TSter then
        if TComponent(pointer_f) is TSter_G³êbokoœci then
          begin

            if Uszkodzenie_Prawdopodobieñstwo() then
              TSter_G³êbokoœci(pointer_f).uszkodzone_czas_sekundy_i := Czas_Teraz_W_Sekundach();
              //TSter_G³êbokoœci(pointer_f).Position.Y := TSter_G³êbokoœci(pointer_f).Position.Y - 1; // Do testu.

            Exit;

          end
        else//if TComponent(pointer_f) is TSter_G³êbokoœci then
        if TComponent(pointer_f) is TŒruba then
          begin

            if Uszkodzenie_Prawdopodobieñstwo() then
              TŒruba(pointer_f).uszkodzone_czas_sekundy_i := Czas_Teraz_W_Sekundach();
              //TŒruba(pointer_f).Position.Y := TŒruba(pointer_f).Position.Y - 1; // Do testu.

            Exit;

          end
        else//if TComponent(pointer_f) is TŒruba then
          if TComponent(pointer_f).Owner <> nil then
            Element_Uszkodzenie_Ustaw( TComponent(pointer_f).Owner, obra¿enia_zadawane_wspó³czynnik_zmodyfikowany_f );

    end;//---//Funkcja Element_Uszkodzenie_Ustaw() w Oznacz_Kolizjê() w Gra_GLCollisionManagerCollision().

    //Funkcja Si_Kolizja_Ustaw() w Oznacz_Kolizjê() w Gra_GLCollisionManagerCollision().
    procedure Si_Kolizja_Ustaw( statek_f : TStatek );
    begin

      if   ( statek_f = nil )
        or (
                 ( not statek_f.si_decyduje )
             and ( not statek_f.si__statek_gracza__p³ywa )
           ) then
        Exit;

      if statek_f.si__kolizja then
        Exit;

      statek_f.si__kolizja := true;
      statek_f.si__kolizja__prêdkoœæ_ujemna := statek_f.prêdkoœæ_aktualna_procent__bezwzglêdny < 0;
      statek_f.si__kolizja__wspó³rzêdne := statek_f.AbsolutePosition;

      // Po kolizji nie zmienia ustawienia steru.
      statek_f.si__p³ywanie_losowe__skrêt__k¹t_pocz¹tkowy := 0;
      statek_f.si__p³ywanie_losowe__skrêt__k¹t_zakres := 0;
      statek_f.si__p³ywanie_losowe__skrêt__zmiana_sekundy := 15;
      statek_f.si__p³ywanie_losowe__skrêt__zmiana_ostatnia_sekundy_i := Czas_Teraz_W_Sekundach();

    end;//---//Funkcja Si_Kolizja_Ustaw() w Oznacz_Kolizjê() w Gra_GLCollisionManagerCollision().

  const
    identyfikator_elementu__woda_c_l : Int64 = -100; // -100 oznacza wodê.

  var
    czy_kotwica_kolizja_l, // Czy kolizja nast¹pi³a z kotwic¹.
    czy_odnawianie_zasobów_l,
    odnawianie_zasobów__statystyki_zliczono_l // Je¿eli jednoczeœnie podczas odnawiania zasobów odnowi punkty ¿ycia i amunicjê to liczy siê to jako jedno odnowienie.
      : boolean;
    zti : integer;
    ztr,
    punkty_¿ycia_kopia_l
      : real;
    zts : string;
    zt_statek,
    zt_statek_2
      : TStatek;
  begin//Funkcja Oznacz_Kolizjê() w Gra_GLCollisionManagerCollision().

    // Zwraca prawdê gdy wykryto kolizjê.

    Result := false;


    {$region 'Amunicja.'}
    // Amunicja trafia w amunicjê.
    if    ( not Result )
      and ( object_1_f.Owner is TAmunicja )
      and ( object_2_f.Owner is TAmunicja )
      and ( object_1_f.Owner <> object_2_f.Owner ) // Aby nie oznacza³o kolizji elementów jednej amunicji z sam¹ sob¹.
      and ( //???
               ( TAmunicja(object_1_f.Owner).czy_uzbrojona )
            or ( TAmunicja(object_2_f.Owner).czy_uzbrojona )
          )
      and ( not TAmunicja(object_1_f.Owner).czy_usun¹æ_amunicja )
      and ( not TAmunicja(object_2_f.Owner).czy_usun¹æ_amunicja )
      and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_1_f) ) <> Wyglad_Elementy.or_Amunicja__Obra¿enia_Zasiêg  )
      and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_2_f) ) <> Wyglad_Elementy.or_Amunicja__Obra¿enia_Zasiêg  ) then
      begin

        Trafienia_Efekt__Utwórz_Jeden( Gra_Obiekty_GLDummyCube, er_Trafienie_Woda, TAmunicja(object_1_f.Owner).AbsolutePosition.X, TAmunicja(object_1_f.Owner).AbsolutePosition.Y, TAmunicja(object_1_f.Owner).AbsolutePosition.Z, TAmunicja(object_1_f.Owner), -1, -1 );

        TAmunicja(object_1_f.Owner).czy_usun¹æ_amunicja := true;
        TAmunicja(object_2_f.Owner).czy_usun¹æ_amunicja := true;

        // Tutaj nie wiadomo kto kogo trafi³ (czy 1 trafi³ 2, czy 2 trafi³ 1).
        Trafienie_Nazwa_Wyœwietl( TAmunicja(object_1_f.Owner).statek__am, TAmunicja(object_2_f.Owner).statek__am, 0, false, true );

      end;
    //---//if    ( not Result ) (...)


    // Amunicja trafia w wodê.
    if    ( not Result )
      and ( object_1_f.Owner is TAmunicja )
      and (  not ( object_2_f.Owner is TAmunicja )  )
      and ( object_2_f.Name = Woda_Kolizje_GLCube.Name )
      and ( TAmunicja(object_1_f.Owner ).czy_poza_luf¹ ) //???
      and ( not TAmunicja(object_1_f.Owner ).czy_efekt_wpadniêcia_do_wody )
      and ( not TAmunicja(object_1_f.Owner ).czy_pod_wod¹ )
      //and ( TAmunicja(object_1_f.Owner ).amunicja_rodzaj <> Typy_Wspolne.ar_Torpeda )
      and ( not TAmunicja(object_1_f.Owner).czy_usun¹æ_amunicja )
      and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_1_f) ) <> Wyglad_Elementy.or_Amunicja__Obra¿enia_Zasiêg  )
      and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_2_f) ) <> Wyglad_Elementy.or_Amunicja__Obra¿enia_Zasiêg  ) then
      begin

        Result := true;

        TAmunicja(object_1_f.Owner).czy_efekt_wpadniêcia_do_wody := true;

        Trafienia_Efekt__Utwórz_Jeden( Gra_Obiekty_GLDummyCube, er_Trafienie_Woda, TAmunicja(object_1_f.Owner).AbsolutePosition.X, TAmunicja(object_1_f.Owner).AbsolutePosition.Y, TAmunicja(object_1_f.Owner).AbsolutePosition.Z, TAmunicja(object_1_f.Owner), -1, -1 );

      end;
    //---//if    ( not Result ) (...)


    // Amunicja trafia w l¹d.
    if    ( not Result )
      and ( object_1_f.Owner is TAmunicja )
      and ( TAmunicja(object_1_f.Owner ).czy_poza_luf¹ )
      and (  not ( object_2_f.Owner is TAmunicja )  )
      and ( object_2_f.Name <> Woda_Kolizje_GLCube.Name )
      and (
               ( object_2_f.Name = Dno_Kolizje_GLCube.Name )
            //or (  Pos( obiekt_nazwa_prefiks__l¹d_c, object_2_f.Name ) = 1  )
            or (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_2_f) ) = Wyglad_Elementy.or_L¹d  )
          )
      and ( not TAmunicja(object_1_f.Owner).czy_usun¹æ_amunicja )
      and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_1_f) ) <> Wyglad_Elementy.or_Amunicja__Obra¿enia_Zasiêg  )
      and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_2_f) ) <> Wyglad_Elementy.or_Amunicja__Obra¿enia_Zasiêg  ) then
      begin

        Result := true;

        Trafienia_Efekt__Utwórz_Jeden( Gra_Obiekty_GLDummyCube, er_Trafienie_L¹d__Obra¿enia, TAmunicja(object_1_f.Owner).AbsolutePosition.X, TAmunicja(object_1_f.Owner).AbsolutePosition.Y, TAmunicja(object_1_f.Owner).AbsolutePosition.Z, TAmunicja(object_1_f.Owner), -1, -1 );


        //if    (  Pos( obiekt_nazwa_prefiks__l¹d_c, object_2_f.Name ) = 1  )
        if    (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_2_f) ) = Wyglad_Elementy.or_L¹d  )
          and (  Wyglad_Elementy.Punkty_¯ycia( TGLCustomSceneObject(object_2_f) ) > 0  ) then
          begin

            zts := L¹d__Punkty_¯ycia_Zmieñ( TGLCustomSceneObject(object_2_f), -TAmunicja(object_1_f.Owner).obra¿enia_zadawane * TAmunicja(object_1_f.Owner).obra¿enia_zadawane_wspó³czynnik_zmodyfikowany );

            l¹d_zwolnij_uszkodzenia_przelicz_g := true;

            if czy_serwer_g then
              Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__l¹d__trafienie_c, -99, zts );

          end;
        //---//if    (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_2_f) ) = Wyglad_Elementy.or_L¹d  ) (...)


        TAmunicja(object_1_f.Owner).czy_usun¹æ_amunicja := true;

      end;
    //---//if    ( not Result ) (...)


    // Amunicja trafia w statek.
    if    ( not Result )
      and ( object_1_f.Owner is TAmunicja )
      and (  not ( object_2_f.Owner is TAmunicja )  )
      and ( TAmunicja(object_1_f.Owner).czy_poza_luf¹ )
      and ( TAmunicja(object_1_f.Owner).czy_uzbrojona ) // Wykrywa samotrafienia tu¿ po opuszczeniu lufy przez amunicjê (je¿eli nie oddali siê odpowiednio daleko od statku).
      and ( not TAmunicja(object_1_f.Owner).czy_usun¹æ_amunicja )
      //and ( object_2_f.Name <> Woda_Kolizje_GLCube.Name )
      //and ( object_2_f.Name <> Dno_Kolizje_GLCube.Name )
      and ( object_2_f.Name = '' )
      and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_2_f) ) = Wyglad_Elementy.or_Statek  ) then
      begin

        Result := true;

        //Trafienia_Efekt__Utwórz_Jeden( Gra_Obiekty_GLDummyCube, object_1_f.AbsolutePosition.X, object_1_f.AbsolutePosition.Y, object_1_f.AbsolutePosition.Z );

        zt_statek := Statek_ZnajdŸ( object_2_f.Owner );

        if    ( zt_statek <> nil )
          and ( zt_statek.statki_rozstawianie_status = srs_Brak ) then // Aby nie wykrywa³ kolizji ze statkami, które s¹ w trakcie rozstawiania.
          begin

            //if not zt_statek.czy_usun¹æ_statek then //???
              begin

                Trafienia_Efekt__Utwórz_Jeden( zt_statek, er_Trafienie_Statek, zt_statek.AbsoluteToLocal( TAmunicja(object_1_f.Owner).AbsolutePosition ).X, zt_statek.AbsoluteToLocal( TAmunicja(object_1_f.Owner).AbsolutePosition ).Y, zt_statek.AbsoluteToLocal( TAmunicja(object_1_f.Owner).AbsolutePosition ).Z, TAmunicja(object_1_f.Owner), -1, -1 );

                //if TAmunicja(object_1_f.Owner ).czy_uzbrojona then
                  begin

                    punkty_¿ycia_kopia_l := zt_statek.punkty_¿ycia_aktualne;
                    ztr := -TAmunicja(object_1_f.Owner).obra¿enia_zadawane * TAmunicja(object_1_f.Owner).obra¿enia_zadawane_wspó³czynnik_zmodyfikowany; //???

                    zt_statek.Punkty_¯ycia__Zmieñ( ztr );

                    Trafienie_Nazwa_Wyœwietl( zt_statek, TAmunicja(object_1_f.Owner).statek__am, ztr, false ); // Informacja o otrzymanych obra¿eniach.
                    Trafienie_Nazwa_Wyœwietl( TAmunicja(object_1_f.Owner).statek__am, zt_statek, ztr, true ); // Informacja o zadanych obra¿eniach.


                    if   ( zt_statek.si_decyduje )
                      or ( zt_statek.si__statek_gracza__p³ywa ) then
                      begin

                        zt_statek.si__uszkodzenia_wykryto__czas_sekundy_i := Czas_Teraz_W_Sekundach();
                        zt_statek.si__aktywnoœæ__okreœlenie_ostatnie_sekundy_i := 0;

                      end;
                    //---//if   ( zt_statek.si_decyduje ) (...)


                    if zt_statek.punkty_¿ycia_aktualne <= 0 then
                      Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero( zt_statek, TAmunicja(object_1_f.Owner).statek__am );


                    zti := Gra_Statystyki_R_Identyfikator_ZnajdŸ( zt_statek.id_gracz );

                    if zti >= 0 then
                      begin

                        gra_statystyki_r_t[ zti ].obra¿enia_otrzymane__gs := gra_statystyki_r_t[ zti ].obra¿enia_otrzymane__gs - ztr; // Wartoœæ jest ujemna.

                        if    ( TAmunicja(object_1_f.Owner).statek__am <> nil )
                          and ( TAmunicja(object_1_f.Owner).statek__am.id_grupa = zt_statek.id_grupa ) then
                          gra_statystyki_r_t[ zti ].obra¿enia_otrzymane__od_sojuszników__gs := gra_statystyki_r_t[ zti ].obra¿enia_otrzymane__od_sojuszników__gs - ztr; // Wartoœæ jest ujemna.

                      end;
                    //---//if zti >= 0 then


                    zti := Gra_Statystyki_R_Identyfikator_ZnajdŸ( TAmunicja(object_1_f.Owner).id_gracz );

                    if zti >= 0 then
                      begin

                        gra_statystyki_r_t[ zti ].trafienia__gs := gra_statystyki_r_t[ zti ].trafienia__gs + 1;
                        gra_statystyki_r_t[ zti ].obra¿enia_zadane__amunicja__gs := gra_statystyki_r_t[ zti ].obra¿enia_zadane__amunicja__gs - ztr; // Wartoœæ jest ujemna.

                        if    ( TAmunicja(object_1_f.Owner).statek__am <> nil )
                          and ( TAmunicja(object_1_f.Owner).statek__am.id_grupa = zt_statek.id_grupa ) then
                          gra_statystyki_r_t[ zti ].obra¿enia_zadane__amunicja_sojusznikom__gs := gra_statystyki_r_t[ zti ].obra¿enia_zadane__amunicja_sojusznikom__gs - ztr; // Wartoœæ jest ujemna.

                      end;
                    //---//if zti >= 0 then


                    if    ( punkty_¿ycia_kopia_l > 0 )
                      and ( zt_statek.punkty_¿ycia_aktualne <= 0 ) then
                      begin

                        if zti >= 0 then
                          begin

                            gra_statystyki_r_t[ zti ].zatopienia__gs := gra_statystyki_r_t[ zti ].zatopienia__gs + 1;

                            if    ( TAmunicja(object_1_f.Owner).statek__am <> nil )
                              and ( TAmunicja(object_1_f.Owner).statek__am.id_grupa = zt_statek.id_grupa ) then
                              gra_statystyki_r_t[ zti ].zatopienia_sojuszników__gs := gra_statystyki_r_t[ zti ].zatopienia_sojuszników__gs + 1
                            else//if    ( TAmunicja(object_1_f.Owner).statek__am <> nil ) (...)
                              if    ( TAmunicja(object_1_f.Owner).statek__am <> nil )
                                and ( TAmunicja(object_1_f.Owner).statek__am.id_grupa <> zt_statek.id_grupa ) then
                                SI__Syrena_Okrêtowa__Uruchom( TAmunicja(object_1_f.Owner).statek__am );

                          end;
                        //---//if zti >= 0 then


                        Trafienia_Efekt__Utwórz_Jeden( zt_statek, er_Trafienie_Statek_Zatopienie, zt_statek.AbsoluteToLocal( TAmunicja(object_1_f.Owner).AbsolutePosition ).X, zt_statek.AbsoluteToLocal( TAmunicja(object_1_f.Owner).AbsolutePosition ).Y, zt_statek.AbsoluteToLocal( TAmunicja(object_1_f.Owner).AbsolutePosition ).Z, TAmunicja(object_1_f.Owner), -1, -1 );

                      end;
                    //---//if    ( punkty_¿ycia_kopia_l > 0 ) (...)


                    Element_Uszkodzenie_Ustaw( object_2_f, TAmunicja(object_1_f.Owner).obra¿enia_zadawane_wspó³czynnik_zmodyfikowany );

                  end;
                //---//if TAmunicja(object_1_f.Owner ).czy_uzbrojona then

              end;
            //---//if not zt_statek.czy_usun¹æ_statek then

          end
        else//if    ( zt_statek <> nil ) (...)
          Trafienia_Efekt__Utwórz_Jeden( Gra_Obiekty_GLDummyCube, er_Trafienie_Woda, object_1_f.AbsolutePosition.X, object_1_f.AbsolutePosition.Y, object_1_f.AbsolutePosition.Z, TAmunicja(object_1_f.Owner), -1, -1 );

        TAmunicja(object_1_f.Owner).czy_usun¹æ_amunicja := true;

      end;
    //---//if    ( not Result ) (...)
    {$endregion 'Amunicja.'}


    {$region 'Statek.'}
    // Statek (samolot) dotyka wody.
    if    ( not Result )
      and (  not ( object_1_f.Owner is TAmunicja )  )
      and (  not ( object_2_f.Owner is TAmunicja )  )
      and ( object_1_f.Name <> Woda_Kolizje_GLCube.Name )
      and ( object_2_f.Name = Woda_Kolizje_GLCube.Name )
      and ( object_1_f.Name = '' )
      and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_1_f) ) = Wyglad_Elementy.or_Statek  ) then
      begin

        if    ( object_1_f.Parent <> nil )
          and ( object_1_f.Parent is TKotwica )
          and (  not ( TKotwica(object_1_f.Parent).kotwica_ruch_etap__ko in [ kre_Brak, kre_Statek ] )  ) then
          czy_kotwica_kolizja_l := true
        else//if    ( object_1_f.Parent <> nil ) (...)
          czy_kotwica_kolizja_l := false;


        zt_statek := Statek_ZnajdŸ( object_1_f.Owner );

        if    ( zt_statek <> nil ) // Czy jednym z obiektów kolizji jest statek.
          and ( zt_statek.czy_samolot )
          and ( not czy_kotwica_kolizja_l ) then
          begin

            // Przy rozstawianiu samolot mo¿e dotykaæ wody.
            //if zt_statek.statki_rozstawianie_status = srs_Rozstawianie_Kolizja_SprawdŸ then // Aby nie wykrywa³ kolizji ze statkami, które s¹ w trakcie rozstawiania.
            //  begin
            //
            //    Result := true;
            //    zt_statek.statki_rozstawianie_status := srs_Rozstawianie_Kolizja_Wykryta;
            //
            //  end
            //else//if zt_statek.statki_rozstawianie_status = srs_Rozstawianie_Kolizja_SprawdŸ then
            if zt_statek.statki_rozstawianie_status <> srs_Rozstawianie_Kolizja_SprawdŸ then
              begin

                zt_statek.prêdkoœæ_przyspieszanie__kolizja_spowolnienie := true;


                if    (  Abs( zt_statek.prêdkoœæ_aktualna_procent__wzglêdny ) >= samolot_prêdkoœæ_lotu_procent_minimalny_c + samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c  )
                  and (   not Statki_Kolizja_Oznaczenie_SprawdŸ( zt_statek.kolizja_oznaczenie_string_list, identyfikator_elementu__woda_c_l )   ) then
                  begin

                    Result := true;

                    zt_statek.kolizja_oznaczenie_string_list.Add(  IntToStr( identyfikator_elementu__woda_c_l ) + '|' + IntToStr( Czas_Teraz_W_Sekundach() )  );

                    Trafienia_Efekt__Utwórz_Jeden( Gra_Obiekty_GLDummyCube, er_Trafienie_Woda, object_1_f.AbsolutePosition.X, object_1_f.AbsolutePosition.Y, object_1_f.AbsolutePosition.Z, nil, -1, -1 );

                    //ztr := 100; // Uproszczenie obliczeñ.

                    ztr :=
                        zt_statek.punkty_¿ycia_maksymalne
                      * (  Abs( zt_statek.prêdkoœæ_aktualna_procent__wzglêdny ) + Abs( zt_statek.zanurzenie_pu³ap__zadane_procent )  ) // Wp³yw prêdkoœci (procentowej) statku na obra¿enia [wytrzyma³oœæ statku].
                      * 2
                      //* ztr * 0.01 // Koryguje iloœæ obra¿eñ o wp³yw kolizji l¹du [wspó³czynnik]. // Uproszczenie obliczeñ.
                      * 0.01; // [Wytrzyma³oœæ statku * wspó³czynnik] / 100 (aby uzyskaæ modyfikacje procentow¹)


                    if ztr <> 0 then // ztr jest ujemne gdy l¹d leczy.
                      begin

                        if zt_statek.punkty_¿ycia_aktualne > 0 then
                          zti := 1
                        else//if zt_statek.punkty_¿ycia_aktualne > 0 then
                          zti := 0;


                        punkty_¿ycia_kopia_l := zt_statek.punkty_¿ycia_aktualne;

                        zt_statek.Punkty_¯ycia__Zmieñ( -ztr );

                        if zt_statek.punkty_¿ycia_aktualne <= 0 then
                          Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero( zt_statek, nil );


                        if    ( zti = 1 ) // Aby tylko raz pojawi³ siê efekt zniszczenia statku.
                          and ( zt_statek.punkty_¿ycia_aktualne <= 0 ) then
                          begin

                            Trafienia_Efekt__Utwórz_Jeden( Gra_Obiekty_GLDummyCube, er_Trafienie_Statek_Zatopienie, object_1_f.AbsolutePosition.X, object_1_f.AbsolutePosition.Y, object_1_f.AbsolutePosition.Z, nil, -1, -1 );

                            if ztr > 0 then // ztr jest ujemne gdy l¹d leczy.
                              begin

                                if ztr > punkty_¿ycia_kopia_l then
                                  ztr := punkty_¿ycia_kopia_l;

                                zti := Gra_Statystyki_R_Identyfikator_ZnajdŸ( zt_statek.id_gracz );

                                if zti >= 0 then
                                  begin

                                    gra_statystyki_r_t[ zti ].obra¿enia_otrzymane__gs := gra_statystyki_r_t[ zti ].obra¿enia_otrzymane__gs + ztr;
                                    gra_statystyki_r_t[ zti ].obra¿enia_otrzymane__z_kolizji__gs := gra_statystyki_r_t[ zti ].obra¿enia_otrzymane__z_kolizji__gs + ztr;

                                  end;
                                //---//if zti >= 0 then

                              end;
                            //---//if ztr > 0 then

                          end;
                        //---//if    ( zti = 1 ) (...)

                      end;
                    //---//if ztr > 0 then

                  end;
                //---//if    (  Abs( zt_statek.prêdkoœæ_aktualna_procent__wzglêdny ) >= samolot_prêdkoœæ_lotu_procent_minimalny_c  ) (...)

              end;
            //---//if zt_statek.statki_rozstawianie_status <> srs_Rozstawianie_Kolizja_SprawdŸ then

          end
        else//if    ( zt_statek <> nil ) (...)
        if    ( zt_statek <> nil ) // Czy jednym z obiektów kolizji jest statek.
          and ( czy_kotwica_kolizja_l )
          and ( object_1_f.Parent <> nil )
          and (
                   ( TKotwica(object_1_f.Parent).kotwica_ruch_etap__ko = kre_W_Dó³  )
                or (
                         ( zt_statek.czy_samolot )
                     and (  Abs( zt_statek.prêdkoœæ_aktualna_procent__wzglêdny ) >= samolot_prêdkoœæ_lotu_procent_minimalny_c - samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c  )
                   )
              )
          and (   not Statki_Kolizja_Oznaczenie_SprawdŸ( zt_statek.kolizja_oznaczenie_string_list, identyfikator_elementu__woda_c_l, TKotwica(object_1_f.Parent).id_kotwica )   ) then
          begin

            Result := true;

            zt_statek.kolizja_oznaczenie_string_list.Add(  IntToStr( identyfikator_elementu__woda_c_l ) + statki_kolizja_oznaczenie_sprawdŸ__identyfikator_elementu__dodatkowy__separator_c + IntToStr( TKotwica(object_1_f.Parent).id_kotwica ) + '|' + IntToStr( Czas_Teraz_W_Sekundach() )  );

            Trafienia_Efekt__Utwórz_Jeden( Gra_Obiekty_GLDummyCube, er_Trafienie_Woda, object_1_f.AbsolutePosition.X, object_1_f.AbsolutePosition.Y, object_1_f.AbsolutePosition.Z, nil, -1, -1 );

          end;
        //---//if    ( zt_statek <> nil ) (...)

      end;
    //---//if    ( not Result ) (...)


    // Statek dotyka l¹d.
    if    ( not Result )
      and (  not ( object_1_f.Owner is TAmunicja )  )
      and (  not ( object_2_f.Owner is TAmunicja )  )
      and ( object_1_f.Name <> Woda_Kolizje_GLCube.Name )
      and ( object_2_f.Name <> Woda_Kolizje_GLCube.Name )
      and ( object_1_f.Name = '' )
      //and (  Pos( obiekt_nazwa_prefiks__l¹d_c, object_1_f.Name ) <= 0  )
      and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_1_f) ) = Wyglad_Elementy.or_Statek  )
      and (
               ( object_2_f.Name = Dno_Kolizje_GLCube.Name )
            //or (  Pos( obiekt_nazwa_prefiks__l¹d_c, object_2_f.Name ) = 1  )
            or (
                     ( object_2_f.Name = '' )
                 and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_2_f) ) = Wyglad_Elementy.or_L¹d  )
               )
          ) then
      begin

        if    ( object_1_f.Parent <> nil )
          and ( object_1_f.Parent is TKotwica )
          and (  not ( TKotwica(object_1_f.Parent).kotwica_ruch_etap__ko in [ kre_Brak, kre_Statek ] )  ) then
          czy_kotwica_kolizja_l := true
        else//if    ( object_1_f.Parent <> nil ) (...)
          czy_kotwica_kolizja_l := false;


        zt_statek := Statek_ZnajdŸ( object_1_f.Owner );

        if zt_statek <> nil then // Czy jednym z obiektów kolizji jest statek.
          begin

            if zt_statek.statki_rozstawianie_status = srs_Rozstawianie_Kolizja_SprawdŸ then // Aby nie wykrywa³ kolizji ze statkami, które s¹ w trakcie rozstawiania.
              begin

                // Przy rozstawianiu samolot mo¿e dotykaæ l¹du ale zale¿y czy jest na nim czy w nim (nie powinien byæ wewn¹trz l¹du).
                //if not zt_statek.czy_samolot then //???
                  begin

                    Result := true;
                    zt_statek.statki_rozstawianie_status := srs_Rozstawianie_Kolizja_Wykryta;

                  end;
                //---//if not zt_statek.czy_samolot then

              end
            else//if zt_statek.statki_rozstawianie_status = srs_Rozstawianie_Kolizja_SprawdŸ then
              begin

                if zt_statek.czy_samolot then
                  zt_statek.prêdkoœæ_przyspieszanie__kolizja_spowolnienie := true;

                if czy_kotwica_kolizja_l then
                  czy_odnawianie_zasobów_l := false
                else//if czy_kotwica_kolizja_l then
                  czy_odnawianie_zasobów_l :=
                       (  Wyglad_Elementy.Kolizja_Wp³yw__Amunicja_Uzupe³nianie( TGLCustomSceneObject(object_2_f) ) > 0  )
                    or (  Wyglad_Elementy.Kolizja_Wp³yw__Obra¿enia( TGLCustomSceneObject(object_2_f) ) < 0  );


                if    (
                           (  Abs( zt_statek.prêdkoœæ_aktualna_procent__wzglêdny ) > kolizja_oznaczanie_prêdkoœæ_procent_c  )
                        or ( zt_statek.grawitacja_opadanie_szybkoœæ_aktualna <> 0 )
                        or ( czy_kotwica_kolizja_l )
                        //or ( czy_odnawianie_zasobów_l ) // Aby odnawiaæ zasoby statek powinien siê poruszaæ.
                      )
                  //and (   not Statki_Kolizja_Oznaczenie_SprawdŸ(  zt_statek.kolizja_oznaczenie_string_list, Wyglad_Elementy.Identyfikator_Elementu( TGLCustomSceneObject(object_2_f) )  )   )
                  and (
                           (
                                 ( not czy_kotwica_kolizja_l )
                             and (   not Statki_Kolizja_Oznaczenie_SprawdŸ(  zt_statek.kolizja_oznaczenie_string_list, Wyglad_Elementy.Identyfikator_Elementu( TGLCustomSceneObject(object_2_f) )  )   )
                           )
                        or (
                                 ( czy_kotwica_kolizja_l )
                             and (  not ( TKotwica(object_1_f.Parent).kotwica_ruch_etap__ko in [ kre_Dno ] )  )
                             //and ( TKotwica(object_1_f.Parent).kotwica_ruch_etap__ko = kre_W_Dó³ )
                             and (   not Statki_Kolizja_Oznaczenie_SprawdŸ(  zt_statek.kolizja_oznaczenie_string_list, Wyglad_Elementy.Identyfikator_Elementu( TGLCustomSceneObject(object_2_f) ), TKotwica(object_1_f.Parent).id_kotwica  )   )
                           )
                      ) then
                  begin

                    Result := true;

                    if not czy_kotwica_kolizja_l then
                      zt_statek.kolizja_oznaczenie_string_list.Add(   IntToStr(  Wyglad_Elementy.Identyfikator_Elementu( TGLCustomSceneObject(object_2_f) )  ) + '|' + IntToStr( Czas_Teraz_W_Sekundach() )   )
                    else//if not czy_kotwica_kolizja_l then
                      begin

                        zt_statek.kolizja_oznaczenie_string_list.Add(   IntToStr(  Wyglad_Elementy.Identyfikator_Elementu( TGLCustomSceneObject(object_2_f) )  ) + statki_kolizja_oznaczenie_sprawdŸ__identyfikator_elementu__dodatkowy__separator_c + IntToStr( TKotwica(object_1_f.Parent).id_kotwica ) + '|' + IntToStr( Czas_Teraz_W_Sekundach() )   );

                        if TKotwica(object_1_f.Parent).kotwica_ruch_etap__ko in [ kre_Stop, kre_W_Dó³ ] then
                          TKotwica(object_1_f.Parent).Kotwica_Na_Dnie_Status_Ustaw( kotwica_zakresy_r_g );

                      end;
                    //---//if not czy_kotwica_kolizja_l then


                    if   ( not zt_statek.czy_samolot )
                      or ( czy_kotwica_kolizja_l )
                      //or ( czy_odnawianie_zasobów_l )
                      or (
                               ( zt_statek.czy_samolot )
                           and (
                                    (  Abs( zt_statek.prêdkoœæ_aktualna_procent__wzglêdny ) >= samolot_prêdkoœæ_lotu_procent_minimalny_c + samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c  )
                                 or ( czy_odnawianie_zasobów_l ) // Sprawdzenie prêdkoœci minimalnej jest wy¿ej.
                               )
                         ) then
                      begin

                        Trafienia_Efekt__Utwórz_Jeden( Gra_Obiekty_GLDummyCube, er_Trafienie_L¹d__Bez_Obra¿eñ, object_1_f.AbsolutePosition.X, object_1_f.AbsolutePosition.Y, object_1_f.AbsolutePosition.Z, nil, -1, -1 );

                        odnawianie_zasobów__statystyki_zliczono_l := false;

                        if czy_kotwica_kolizja_l then
                          ztr := 0
                        else//if czy_kotwica_kolizja_l then
                        if object_2_f.Name = Dno_Kolizje_GLCube.Name then
                          ztr := 100
                        else//object_2_f.Name = Dno_Kolizje_GLCube.Name
                          ztr := Wyglad_Elementy.Kolizja_Wp³yw__Obra¿enia( TGLCustomSceneObject(object_2_f) );


                        if    ( ztr <> 0 )
                          and (
                                   (  Abs( zt_statek.prêdkoœæ_aktualna_procent__wzglêdny ) > kolizja_oznaczanie_prêdkoœæ_procent_c  )
                                or ( zt_statek.grawitacja_opadanie_szybkoœæ_aktualna <> 0 )
                                //or ( czy_odnawianie_zasobów_l )
                              ) then
                          begin

                            //zt_statek.Punkty_¯ycia__Zmieñ
                            //  (
                            //      -zt_statek.punkty_¿ycia_maksymalne
                            //    * Abs( zt_statek.prêdkoœæ_aktualna_procent__wzglêdny ) // Wp³yw prêdkoœci (procentowej) statku na obra¿enia [wytrzyma³oœæ statku].
                            //    * ztr * 0.01 // Koryguje iloœæ obra¿eñ o wp³yw kolizji l¹du [wspó³czynnik].
                            //    * 0.01 // [Wytrzyma³oœæ statku * wspó³czynnik] / 100 (aby uzyskaæ modyfikacje procentow¹)
                            //  );
                            //
                            //if ztr > 0 then
                            //  Trafienia_Efekt__Utwórz_Jeden( zt_statek, er_Trafienie_L¹d__Obra¿enia, zt_statek.AbsoluteToLocal( object_1_f.AbsolutePosition ).X, zt_statek.AbsoluteToLocal( object_1_f.AbsolutePosition ).Y, zt_statek.AbsoluteToLocal( object_1_f.AbsolutePosition ).Z, nil, -1, -1 );

                            if ztr > 0 then
                              begin

                                // Kolizja z l¹dem.

                                ztr :=
                                    zt_statek.punkty_¿ycia_maksymalne
                                  * Abs( zt_statek.prêdkoœæ_aktualna_procent__wzglêdny ) // Wp³yw prêdkoœci (procentowej) statku na obra¿enia [wytrzyma³oœæ statku].
                                  * ztr * 0.01 // Koryguje iloœæ obra¿eñ o wp³yw kolizji l¹du [wspó³czynnik].
                                  * 0.01; // [Wytrzyma³oœæ statku * wspó³czynnik] / 100 (aby uzyskaæ modyfikacjê procentow¹)


                                if    ( zt_statek.czy_samolot )
                                  and (  Abs( zt_statek.prêdkoœæ_aktualna_procent__wzglêdny ) >= samolot_prêdkoœæ_lotu_procent_minimalny_c  ) then
                                  ztr := ztr * 2;

                              end
                            else//if ztr > 0 then
                              begin

                                // Odnawianie zasobów.

                                ztr :=
                                    zt_statek.punkty_¿ycia_maksymalne
                                  * ztr * 0.01; //  / 100 (aby uzyskaæ modyfikacjê procentow¹).

                              end;
                            //---//if ztr > 0 then


                            if not zt_statek.grawitacja_opadanie_obra¿enia_naliczono then
                              begin

                                zt_statek.grawitacja_opadanie_obra¿enia_naliczono := true;

                                ztr := ztr +
                                  Grawitacja_Opadanie_Obra¿enia_Wylicz( zt_statek.punkty_¿ycia_maksymalne, zt_statek.grawitacja_opadanie_szybkoœæ_aktualna );

                              end;
                            //---//if not zt_statek.grawitacja_opadanie_obra¿enia_naliczono then


                            if ztr <> 0 then // ztr jest ujemne gdy l¹d leczy.
                              begin

                                punkty_¿ycia_kopia_l := zt_statek.punkty_¿ycia_aktualne;

                                zt_statek.Punkty_¯ycia__Zmieñ( -ztr );


                                if zt_statek.punkty_¿ycia_aktualne <= 0 then
                                  Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero( zt_statek, nil );


                                //if    (  Pos( obiekt_nazwa_prefiks__l¹d_c, object_2_f.Name ) = 1  )
                                if    (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_2_f) ) = Wyglad_Elementy.or_L¹d  )
                                  and (  Wyglad_Elementy.Punkty_¯ycia( TGLCustomSceneObject(object_2_f) ) > 0  ) then
                                  begin

                                    zts := L¹d__Punkty_¯ycia_Zmieñ( TGLCustomSceneObject(object_2_f), -ztr );

                                    l¹d_zwolnij_uszkodzenia_przelicz_g := true;

                                    if czy_serwer_g then
                                      Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__l¹d__trafienie_c, -99, zts );

                                  end;
                                //---//if    (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_2_f) ) = Wyglad_Elementy.or_L¹d  ) (...)


                                if ztr > 0 then // ztr jest ujemne gdy l¹d leczy.
                                  begin

                                    if ztr > punkty_¿ycia_kopia_l then
                                      ztr := punkty_¿ycia_kopia_l;

                                    zti := Gra_Statystyki_R_Identyfikator_ZnajdŸ( zt_statek.id_gracz );

                                    if zti >= 0 then
                                      begin

                                        gra_statystyki_r_t[ zti ].obra¿enia_otrzymane__gs := gra_statystyki_r_t[ zti ].obra¿enia_otrzymane__gs + ztr;
                                        gra_statystyki_r_t[ zti ].obra¿enia_otrzymane__z_kolizji__gs := gra_statystyki_r_t[ zti ].obra¿enia_otrzymane__z_kolizji__gs + ztr;

                                      end;
                                    //---//if zti >= 0 then

                                  end
                                else//if ztr > 0 then
                                if    ( ztr < 0 ) // ztr jest ujemne gdy l¹d leczy.
                                  and ( zt_statek.punkty_¿ycia_aktualne > 0 )
                                  and ( punkty_¿ycia_kopia_l < zt_statek.punkty_¿ycia_maksymalne ) then // Zlicza statystyki tylko gdy odnowione zosta³y punkty ¿ycia.
                                  begin

                                    odnawianie_zasobów__statystyki_zliczono_l := true;

                                    zti := Gra_Statystyki_R_Identyfikator_ZnajdŸ( zt_statek.id_gracz );

                                    if zti >= 0 then
                                      begin

                                        gra_statystyki_r_t[ zti ].odnawianie_zasobów_iloœæ_razy__gs := gra_statystyki_r_t[ zti ].odnawianie_zasobów_iloœæ_razy__gs + 1;

                                      end;
                                    //---//if zti >= 0 then

                                  end;
                                //---//if    ( ztr < 0 ) (...)

                              end;
                            //---//if ztr > 0 then

                          end;
                        //---//if    ( ztr <> 0 ) (...)


                        if not czy_kotwica_kolizja_l then
                          ztr := Wyglad_Elementy.Kolizja_Wp³yw__Amunicja_Uzupe³nianie( TGLCustomSceneObject(object_2_f) );

                        if    ( zt_statek.punkty_¿ycia_aktualne > 0 )
                          and ( ztr > 0 ) then
                          begin

                            //zt_statek.Broñ__Amunicja_Uzupe³nij( TTorpedy_Wyrzutnia_t(zt_statek.artyleria_t), ztr );
                            //zt_statek.Broñ__Amunicja_Uzupe³nij( TTorpedy_Wyrzutnia_t(zt_statek.bomba_g³êbinowa_t), ztr );
                            //zt_statek.Broñ__Amunicja_Uzupe³nij( TTorpedy_Wyrzutnia_t(zt_statek.dzia³a_t), ztr );
                            //zt_statek.Broñ__Amunicja_Uzupe³nij( TTorpedy_Wyrzutnia_t(zt_statek.je¿e_g³êbinowe_t), ztr );
                            //zt_statek.Broñ__Amunicja_Uzupe³nij( TTorpedy_Wyrzutnia_t(zt_statek.torpedy_wyrzutnie_t), ztr );

                            zti := 0; // Tutaj jako sprawdzenie czy coœ zosta³o odnowione.

                            if    (  zt_statek.Broñ__Amunicja_Uzupe³nij( TTorpedy_Wyrzutnia_t(zt_statek.artyleria_t), ztr )  )
                              and ( zti = 0 ) then
                              zti := 1;

                            if    (  zt_statek.Broñ__Amunicja_Uzupe³nij( TTorpedy_Wyrzutnia_t(zt_statek.bomba_g³êbinowa_t), ztr )  )
                              and ( zti = 0 ) then
                              zti := 1;

                            if    (  zt_statek.Broñ__Amunicja_Uzupe³nij( TTorpedy_Wyrzutnia_t(zt_statek.dzia³a_t), ztr )  )
                              and ( zti = 0 ) then
                              zti := 1;

                            if    (  zt_statek.Broñ__Amunicja_Uzupe³nij( TTorpedy_Wyrzutnia_t(zt_statek.je¿e_g³êbinowe_t), ztr )  )
                              and ( zti = 0 ) then
                              zti := 1;

                            if    (  zt_statek.Broñ__Amunicja_Uzupe³nij( TTorpedy_Wyrzutnia_t(zt_statek.torpedy_wyrzutnie_t), ztr )  )
                              and ( zti = 0 ) then
                              zti := 1;


                            if    ( not odnawianie_zasobów__statystyki_zliczono_l )
                              and ( zti <> 0 ) then // Zlicza statystyki tylko gdy odnowiona zosta³a amunicja.
                              begin

                                zti := Gra_Statystyki_R_Identyfikator_ZnajdŸ( zt_statek.id_gracz );

                                if zti >= 0 then
                                  begin

                                    gra_statystyki_r_t[ zti ].odnawianie_zasobów_iloœæ_razy__gs := gra_statystyki_r_t[ zti ].odnawianie_zasobów_iloœæ_razy__gs + 1;

                                  end;
                                //---//if zti >= 0 then

                              end;
                            //---//if    ( not odnawianie_zasobów__statystyki_zliczono_l ) (...)

                          end;
                        //---//if    ( zt_statek.punkty_¿ycia_aktualne > 0 ) (...)

                      end;
                    //---//if   ( not zt_statek.czy_samolot )

                  end;
                //---//if    ( (...)

                if   (  Abs( zt_statek.prêdkoœæ_aktualna ) > 0  ) // Je¿eli siê zaklinuje z jakimœ obiektem to aby móg³ wyp³yn¹æ ale przez to mo¿e wp³ywaæ (powoli) w obiekty.
                  or (  Abs( zt_statek.zanurzenie_pu³ap__szybkoœæ_aktualna ) > 0  )
                  or ( zt_statek.grawitacja_opadanie_szybkoœæ_aktualna <> 0 )
                  or ( zt_statek.punkty_¿ycia_aktualne <= 0 ) then // Aby podczas toniêcia statek nie przenika³ przez (podwodne) l¹dy.
                  begin

                    if object_2_f.Name = Dno_Kolizje_GLCube.Name then
                      zt_statek.prêdkoœæ__kolizja_zwalnianie := 100
                    else//object_2_f.Name = Dno_Kolizje_GLCube.Name
                      zt_statek.prêdkoœæ__kolizja_zwalnianie := Wyglad_Elementy.Kolizja_Wp³yw__Prêdkoœæ( TGLCustomSceneObject(object_2_f) );


                    if not czy_kotwica_kolizja_l then
                      zt_statek.zanurzenie_pu³ap__kolizja_zwalnianie := zt_statek.prêdkoœæ__kolizja_zwalnianie;

                  end;
                //---//if   (  Abs( zt_statek.prêdkoœæ_aktualna ) > 0  ) (...)


                if not czy_kotwica_kolizja_l then
                  zt_statek.wiatr__kolizja := true;


                if zt_statek.czy_samolot then
                  begin

                    //zt_statek.czy_samolot__kolizja := true;

                    if czy_kotwica_kolizja_l then
                      zt_statek.czy_samolot__kolizja__kotwica := true;

                    if not czy_kotwica_kolizja_l then
                      zt_statek.Samolot__Kolizja_Bufor_Zliczaj( true );

                  end;
                //---//if zt_statek.czy_samolot then

              end;
            //---//if zt_statek.statki_rozstawianie_status = srs_Rozstawianie_Kolizja_SprawdŸ then


            if not czy_kotwica_kolizja_l then
              if    (  Wyglad_Elementy.Kolizja_Wp³yw__Amunicja_Uzupe³nianie( TGLCustomSceneObject(object_2_f) ) <= 0  )
                and (  Wyglad_Elementy.Kolizja_Wp³yw__Obra¿enia( TGLCustomSceneObject(object_2_f) ) >= 0  ) then
                Si_Kolizja_Ustaw( zt_statek ) // Kolizja nast¹pi³a z l¹dem, który nie odnawia amunicji ani punktów ¿ycia.
               else//if    (  Wyglad_Elementy.Kolizja_Wp³yw__Amunicja_Uzupe³nianie( TGLCustomSceneObject(object_2_f) ) <= 0  ) (...)
                 if    ( zt_statek.czy_samolot )
                   and ( not zt_statek.si__kolizja__samolot__p³ywanie_do_punktu__odnawianie_zasobów )
                   and (
                            ( zt_statek.si_decyduje )
                         or ( zt_statek.si__statek_gracza__p³ywa )
                       ) then
                   zt_statek.si__kolizja__samolot__p³ywanie_do_punktu__odnawianie_zasobów := true
                 else//if    ( zt_statek.czy_samolot ) (...)
                   if    ( not zt_statek.czy_samolot )
                     and (
                              ( zt_statek.si_decyduje )
                           or ( zt_statek.si__statek_gracza__p³ywa )
                         ) then
                     zt_statek.si__p³ywanie_do_punktu__odnawianie_zasobów__rozpoczêcie_czas_sekundy_i := Czas_Teraz_W_Sekundach(); // Gdy ju¿ odnawia zasoby to aby nie przerywa³.

          end;
        //---//if zt_statek <> nil then

      end;
    //---//if    ( not Result ) (...)


    // Statek dotyka inny statek.
    if    ( not Result )
      and (  not ( object_1_f.Owner is TAmunicja )  )
      and (  not ( object_2_f.Owner is TAmunicja )  )
      //and ( object_1_f.Name <> Woda_Kolizje_GLCube.Name )
      //and ( object_2_f.Name <> Woda_Kolizje_GLCube.Name )
      and ( object_1_f.Name = '' )
      and ( object_2_f.Name = '' )
      //and (  Pos( obiekt_nazwa_prefiks__l¹d_c, object_1_f.Name ) <= 0  )
      //and (  Pos( obiekt_nazwa_prefiks__l¹d_c, object_2_f.Name ) <= 0  )
      and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_1_f) ) in [ Wyglad_Elementy.or_£apacz_Samolotów, Wyglad_Elementy.or_Statek ]  )
      and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_2_f) ) in [ Wyglad_Elementy.or_£apacz_Samolotów, Wyglad_Elementy.or_Statek ]  )
      and ( // Je¿eli u³atwione l¹dowanie jest wy³¹czone to nie wykrywa kolizji z ³apaczem samolotów.
               (   not (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_1_f) ) in [ Wyglad_Elementy.or_£apacz_Samolotów ]  )   )
            or (
                     (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_1_f) ) in [ Wyglad_Elementy.or_£apacz_Samolotów ]  )
                 and ( TGLDummyCube(object_1_f).VisibleAtRunTime )
               )
          )
      and (
               (   not (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_2_f) ) in [ Wyglad_Elementy.or_£apacz_Samolotów ]  )   )
            or (
                     (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_2_f) ) in [ Wyglad_Elementy.or_£apacz_Samolotów ]  )
                 and ( TGLDummyCube(object_2_f).VisibleAtRunTime )
               )
          ) //---// Je¿eli u³atwione l¹dowanie jest wy³¹czone to nie wykrywa kolizji z ³apaczem samolotów.
      then
      begin

        zt_statek := Statek_ZnajdŸ( object_1_f.Owner );

        if zt_statek <> nil then // Czy jednym z obiektów kolizji jest statek.
          begin

            zt_statek_2 := Statek_ZnajdŸ( object_2_f.Owner );

            if    ( zt_statek_2 <> nil )
              and ( zt_statek <> zt_statek_2 ) then // Czy drugim z obiektów kolizji jest statek.
              begin

                Result := true;


                if zt_statek.czy_samolot then
                  zt_statek.prêdkoœæ_przyspieszanie__kolizja_spowolnienie := true;

                if zt_statek_2.czy_samolot then
                  zt_statek_2.prêdkoœæ_przyspieszanie__kolizja_spowolnienie := true;


                if    ( zt_statek.statki_rozstawianie_status = srs_Brak ) // Aby nie wykrywa³ kolizji ze statkami, które s¹ w trakcie rozstawiania.
                  and ( zt_statek_2.statki_rozstawianie_status = srs_Brak ) then
                  begin

                    if    (
                               (
                                     ( zt_statek.czy_lotniskowiec )
                                 and ( zt_statek_2.czy_samolot )
                                 and (  Abs( zt_statek_2.prêdkoœæ_aktualna_procent__wzglêdny ) <= samolot_prêdkoœæ_lotu_procent_minimalny_c + samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c  )
                                 and ( // Je¿eli samolot dotknie statku kotwic¹ to nie wyl¹duje.
                                          ( object_2_f.Parent = nil )
                                       or (
                                                ( object_2_f.Parent <> nil )
                                            and (
                                                     (  not ( object_2_f.Parent is TKotwica )  )
                                                  or (
                                                           ( object_2_f.Parent is TKotwica )
                                                       and ( TKotwica(object_2_f.Parent).kotwica_ruch_etap__ko in [ kre_Statek ] )
                                                     )
                                                )
                                          )
                                     )
                               )
                            or (
                                     ( zt_statek_2.czy_lotniskowiec )
                                 and ( zt_statek.czy_samolot )
                                 and (  Abs( zt_statek.prêdkoœæ_aktualna_procent__wzglêdny ) <= samolot_prêdkoœæ_lotu_procent_minimalny_c + samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c  )
                                 and ( // Je¿eli samolot dotknie statku kotwic¹ to nie wyl¹duje.
                                          ( object_1_f.Parent = nil )
                                       or (
                                                ( object_1_f.Parent <> nil )
                                            and (
                                                     (  not ( object_1_f.Parent is TKotwica )  )
                                                  or (
                                                           ( object_1_f.Parent is TKotwica )
                                                       and ( TKotwica(object_1_f.Parent).kotwica_ruch_etap__ko in [ kre_Statek ] )
                                                     )
                                                )
                                          )
                                     )
                               )
                          ) then
                      //and ( zt_statek.id_gracz = zt_statek_2.id_gracz ) then // Mo¿liwoœæ l¹dowania na lotniskowcach innych graczy. //???
                      begin

                        // Samolot jest na statku (wyl¹dowa³), nie jest to zderzenie.

                        if    (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_1_f) ) <> Wyglad_Elementy.or_£apacz_Samolotów  )
                          and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_2_f) ) <> Wyglad_Elementy.or_£apacz_Samolotów  ) then
                          if zt_statek.czy_samolot then
                            //zt_statek.czy_samolot__kolizja := true
                            zt_statek.Samolot__Kolizja_Bufor_Zliczaj( true )
                          else//if zt_statek.czy_samolot then
                          if zt_statek_2.czy_samolot then
                            //zt_statek_2.czy_samolot__kolizja := true;
                            zt_statek_2.Samolot__Kolizja_Bufor_Zliczaj( true );


                        if L¹dowanie_U³atwione_CheckBox.Checked then
                          begin

                            ztr := // Wartoœæ jest zawsze dodatnia, bez znaczenia, jak i nie okreœla, w któr¹ stronê s¹ obrócone obiekty.
                              System.Math.RadToDeg
                                (
                                  GLS.VectorGeometry.AngleBetweenVectors
                                    (
                                      GLS.VectorGeometry.VectorMake( zt_statek.AbsoluteDirection.X, 0, zt_statek.AbsoluteDirection.Z ),
                                      GLS.VectorGeometry.VectorMake( zt_statek_2.AbsoluteDirection.X, 0, zt_statek_2.AbsoluteDirection.Z ),
                                      GLS.VectorGeometry.VectorMake( 0, 0, 0 )
                                    )
                                );


                            // Je¿eli l¹dowanie w przeciwnym kierunku ma byæ dozwolone.
                            //if ztr > 90 then
                            //  ztr := 180 - ztr;

                          end
                        else//if L¹dowanie_U³atwione_CheckBox.Checked then
                          ztr := 0;


                        if    ( zt_statek.czy_samolot )
                          and ( zt_statek.Samolot_Na_Lotniskowcu() = nil ) then
                          begin

                            if    ( L¹dowanie_U³atwione_CheckBox.Checked )
                              and ( Abs( zt_statek.zanurzenie_pu³ap__zadane_procent ) <= samolot_prêdkoœæ_lotu_procent_minimalny_c + samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c  )
                              and ( ztr <= samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c )
                              and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_1_f) ) <> Wyglad_Elementy.or_£apacz_Samolotów  )
                              and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_2_f) ) = Wyglad_Elementy.or_£apacz_Samolotów  ) then
                              zt_statek_2.Samolot_Przyjmij( zt_statek, true )
                            else
                              zt_statek_2.Samolot_Przyjmij( zt_statek );

                          end
                        else//if    ( zt_statek.czy_samolot ) (...)
                        if    ( zt_statek_2.czy_samolot )
                          and ( zt_statek_2.Samolot_Na_Lotniskowcu() = nil ) then
                          begin

                            if    ( L¹dowanie_U³atwione_CheckBox.Checked )
                              and ( Abs( zt_statek_2.zanurzenie_pu³ap__zadane_procent ) <= samolot_prêdkoœæ_lotu_procent_minimalny_c + samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c  )
                              and ( ztr <= samolot_prêdkoœæ_lotu_procent_minimalny_tolerancja_c )
                              and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_1_f) ) = Wyglad_Elementy.or_£apacz_Samolotów  )
                              and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_2_f) ) <> Wyglad_Elementy.or_£apacz_Samolotów  ) then
                              zt_statek.Samolot_Przyjmij( zt_statek_2, true )
                            else
                              zt_statek.Samolot_Przyjmij( zt_statek_2 );

                          end;
                        //---//if    ( zt_statek_2.czy_samolot ) (...)

                      end
                    else//if    ( (...)
                      if    (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_1_f) ) <> Wyglad_Elementy.or_£apacz_Samolotów  )
                        and (  Wyglad_Elementy.Obiekt_Rodzaj( TGLCustomSceneObject(object_2_f) ) <> Wyglad_Elementy.or_£apacz_Samolotów  ) then
                        Kolizja_Statek_Statek_Przelicz( zt_statek, zt_statek_2, object_1_f, object_2_f );
                        //Kolizja_Statek_Statek_Przelicz( zt_statek_2, zt_statek, object_2_f, object_1_f )

                  end
                else//if    ( zt_statek.statki_rozstawianie_status = srs_Brak ) (...)
                  begin

                    //if zt_statek.statki_rozstawianie_status = srs_Rozstawianie_Kolizja_SprawdŸ then
                    //  zt_statek.statki_rozstawianie_status := srs_Rozstawianie_Kolizja_Wykryta;
                    //
                    //if zt_statek_2.statki_rozstawianie_status = srs_Rozstawianie_Kolizja_SprawdŸ then
                    //  zt_statek_2.statki_rozstawianie_status := srs_Rozstawianie_Kolizja_Wykryta;


                    if    ( zt_statek.statki_rozstawianie_status = srs_Rozstawianie_Kolizja_SprawdŸ )
                      and (
                               ( not zt_statek.czy_lotniskowiec )
                            or (
                                     ( zt_statek.czy_lotniskowiec )
                                 and ( zt_statek.id_gracz <> zt_statek_2.id_gracz ) // Je¿eli gracz ma lotniskowiec z samolotem to kolizja jest wykrywana ale nie powinna wp³ywaæ na pozycje rozstawiania.
                                 //and ( zt_statek.id_statek__lotniskowiec__ma_samolot_na_pok³adzie <> zt_statek_2.id_statek )
                               )
                          ) then
                      zt_statek.statki_rozstawianie_status := srs_Rozstawianie_Kolizja_Wykryta;

                    if    ( zt_statek_2.statki_rozstawianie_status = srs_Rozstawianie_Kolizja_SprawdŸ )
                      and (
                               ( not zt_statek_2.czy_lotniskowiec )
                            or (
                                     ( zt_statek_2.czy_lotniskowiec )
                                 and ( zt_statek_2.id_gracz <> zt_statek.id_gracz ) // Je¿eli gracz ma lotniskowiec z samolotem to kolizja jest wykrywana ale nie powinna wp³ywaæ na pozycje rozstawiania.
                                 //and ( zt_statek_2.id_statek__lotniskowiec__ma_samolot_na_pok³adzie <> zt_statek.id_statek )
                               )
                          ) then
                      zt_statek_2.statki_rozstawianie_status := srs_Rozstawianie_Kolizja_Wykryta;

                  end;
                //---//if    ( zt_statek.statki_rozstawianie_status = srs_Brak ) (...)


                Si_Kolizja_Ustaw( zt_statek );
                Si_Kolizja_Ustaw( zt_statek_2 );

              end;
            //---//if zt_statek_2 <> nil then

          end;
        //---//if zt_statek <> nil then

      end;
    //---//if    ( not Result ) (...)
    {$endregion 'Statek.'}

  end;//---//Funkcja Oznacz_Kolizjê() w Gra_GLCollisionManagerCollision().

begin//Gra_GLCollisionManagerCollision().

  if    ( object1 <> nil )
    and ( object2 <> nil )
    and ( object1.Owner <> nil )
    and ( object2.Owner <> nil ) then
    begin

      if not Oznacz_Kolizjê( object1, object2 ) then
        Oznacz_Kolizjê( object2, object1 );

    end;
  //---//if    ( object1 <> nil ) (...)

  //Oznacz_Kolizjê( object1, object2 );
  //Oznacz_Kolizjê( object2, object1 );

end;//---//Gra_GLCollisionManagerCollision().

//IdTCPServer1Connect().
procedure TStatki_Form.IdTCPServer1Connect( AContext: TIdContext );
begin

  if czy_wy³¹czanie_serwera_g then
    Exit;


  if 1 = 2 then
    begin

        Wieloosobowe__Log_Wypisz(
            t³umaczenie_komunikaty_r.komunikat__po³¹czenie_od + ': ' + AContext.Connection.Socket.Binding.PeerIP +
            ':' + IntToStr( AContext.Connection.Socket.Binding.PeerPort ) +
            ' (' + t³umaczenie_komunikaty_r.komunikat__iloœæ + ': ' + IntToStr( IdTCPServer1.Contexts.LockList.Count ) + ')'
          );
        //Wieloosobowe__Log_Wypisz( t³umaczenie_komunikaty_r.komunikat__otrzymany_tekst + ': ' + AContext.Connection.AllData );


      IdTCPServer1.Contexts.UnlockList(); // Mo¿e to ma byæ tylko je¿eli wczeœniej tutaj odnosi siê do IdTCPServer1.Contexts (chyba tak).

    end;
  //---//if 1 = 2 then

end;//---//IdTCPServer1Connect().

//IdTCPServer1Disconnect().
procedure TStatki_Form.IdTCPServer1Disconnect( AContext: TIdContext );
var
  zt_tcp_klient_dane : TTCP_Klient_Dane;
begin

  if czy_wy³¹czanie_serwera_g then
    Exit;


  if 1 = 2 then
    begin

      Wieloosobowe__Log_Wypisz(
          t³umaczenie_komunikaty_r.komunikat__od³¹czy³_siê + ': ' + AContext.Connection.Socket.Binding.PeerIP +
          ':' + IntToStr( AContext.Connection.Socket.Binding.PeerPort ) +
          ' (' + t³umaczenie_komunikaty_r.komunikat__iloœæ + ': ' + IntToStr( IdTCPServer1.Contexts.LockList.Count - 1 ) + ')'
        );

      IdTCPServer1.Contexts.UnlockList(); // Mo¿e to ma byæ tylko je¿eli wczeœniej tutaj odnosi siê do IdTCPServer1.Contexts (chyba tak).

    end;
  //---//if 1 = 2 then


  zt_tcp_klient_dane := tcp_klienci_lista_g.ZnajdŸ_Peer_Port( AContext.Connection.Socket.Binding.PeerPort );

  if zt_tcp_klient_dane <> nil then
    udp_klienci_lista_g.Usuñ_Peer_Port( zt_tcp_klient_dane.peer_port_udp__kd );


  tcp_klienci_lista_g.Usuñ_Peer_Port( AContext.Connection.Socket.Binding.PeerPort ); //??? roz³¹czenie z powodu sieci
  //tcp_klienci_lista_g.Od³¹czony_Peer_Port( AContext.Connection.Socket.Binding.PeerPort );


  Gracze_Lista_Odœwie¿();


  Serwer_Klient_Od³¹czenie_Timer.Enabled := true;

end;//---//IdTCPServer1Disconnect().

//IdTCPServer1Execute().
procedure TStatki_Form.IdTCPServer1Execute( AContext: TIdContext );
begin

  // Bez tego zdarzenia podczas aktywowania serwera zg³asza b³¹d, ¿e brakuje tego zdarzenia.

  if czy_wy³¹czanie_serwera_g then
    Exit;

  //Wieloosobowe__Log_Wypisz( 'IdTCPServer1Execute' );


  Log_Wypisz(  Wieloosobowe__Odczytaj( AContext.Connection.IOHandler, '', AContext, nil )  );

end;//---//IdTCPServer1Execute().

//IdUDPServer1UDPRead().
procedure TStatki_Form.IdUDPServer1UDPRead( AThread: TIdUDPListenerThread; const AData: TIdBytes; ABinding: TIdSocketHandle );
begin

  if czy_wy³¹czanie_serwera_g then
    Exit;

  //Wieloosobowe__Log_Wypisz( 'IdUDPServer1UDPRead' );


  //komenda_l := IdGlobal.BytesToString( AData, IdGlobal.IndyTextEncoding_UTF8 );
  Wieloosobowe__Odczytaj(  nil, IdGlobal.BytesToString( AData, IdGlobal.IndyTextEncoding_UTF8 ), nil, ABinding  );

end;//---//IdUDPServer1UDPRead().

//Serwer_Wysy³a_TimerTimer().
procedure TStatki_Form.Serwer_Wysy³a_TimerTimer( Sender: TObject );
begin

  //if czy_wysy³anie_trwa_g then //???
  //  Exit;


  //Wieloosobowe__Log_Wypisz( 'Serwer_Wysy³a_TimerTimer' );

  //czy_wysy³anie_trwa_g := true;

  //Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__rekord_amunicja_c, -99, '' );
  //Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__rekord_statki_c, -99, '' );

  Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__rekord_amunicja_c, -99, '', true );
  Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__rekord_statki_c, -99, '', true );
  //Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__rekord_efekt_c, -99, '', true ); // Efekt wysy³any jako tabela.


  if MilliSecondsBetween( Now(), rekord_statki__wysy³ane_rzadziej__ostatnie_wys³anie_data_czas_g ) >= rekord_statki__wysy³ane_rzadziej__czas_milisekundy_g then
    begin

      Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__rekord_statki__wysy³ane_rzadziej_c, -99, '', true );
      rekord_statki__wysy³ane_rzadziej__ostatnie_wys³anie_data_czas_g := Now();

    end;
  //---//if MilliSecondsBetween( Now(), rekord_statki__wysy³ane_rzadziej__ostatnie_wys³anie_data_czas_g ) >= rekord_statki__wysy³ane_rzadziej__czas_milisekundy_g then


  if SecondsBetween( Now(), wieloosobowe__komenda__gra__serwer_czas_wyœli_ostatnie_g ) > wieloosobowe__komenda__gra__serwer_czas_wyœlij_sekundy then
    begin

      Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__serwer_czas_wyœlij_c, -99, '', true );
      wieloosobowe__komenda__gra__serwer_czas_wyœli_ostatnie_g := Now();

    end;
  //---//if SecondsBetween( Now(), wieloosobowe__komenda__gra__serwer_czas_wyœli_ostatnie_g ) > wieloosobowe__komenda__gra__serwer_czas_wyœlij_sekundy then


  //czy_wysy³anie_trwa_g := false;


  if SecondsBetween( Now(), udp_data_czas_sprawdzanie_po³¹czeñ_ostatnie_g ) > udp_klient_po³¹czenie_potwierdzanie_sekundy_c * 2 then
    begin

      udp_klienci_lista_g.Usuñ_Przeterminowanych();
      udp_data_czas_sprawdzanie_po³¹czeñ_ostatnie_g := Now();

    end;
  //---//if SecondsBetween( Now(), udp_data_czas_sprawdzanie_po³¹czeñ_ostatnie_g ) > udp_klient_po³¹czenie_potwierdzanie_sekundy_c * 2 then

end;//---//Serwer_Wysy³a_TimerTimer().

//Klient_IdTCP_Czyta_TimerTimer().
procedure TStatki_Form.Klient_IdTCP_Czyta_TimerTimer( Sender: TObject );
var
  czy_b³¹d : boolean;
  komenda_l : string;
begin

  // Wykrywa czy serwer nie zosta³ (twardo) wy³¹czony co skutkuje b³êdem:
  // Socket Error #10054 Connection reset by peer.
  try
    if IdTCPClient1.Connected then
      ;

    if    ( IdTCPClient1.IOHandler <> nil )
      and ( IdTCPClient1.IOHandler.Connected ) then
      ;

    czy_b³¹d := false;
  except
    on E : Exception do
      begin

        czy_b³¹d := true;
        Log_Wypisz( E.Message + ' (TCP - ' + t³umaczenie_komunikaty_r.komunikat__czyta_zegar + ').' );
        Wieloosobowe__Od³¹cz_BitBtnClick( Sender );

      end;
    //---//on E : Exception do
  end;
  //---//try


  if    ( not czy_b³¹d )
    and ( IdTCPClient1.Connected )
    and ( IdTCPClient1.IOHandler <> nil )
    and ( IdTCPClient1.IOHandler.Opened ) then // Gdy uszkodzi siê po³¹czenie pojawia siê b³¹d 'Connection Closed Gracefully' i nie mo¿na zamkn¹æ programu.
    try

      //check for a message from the server
      if IdTCPClient1.IOHandler.InputBufferIsEmpty then
        begin

          IdTCPClient1.IOHandler.CheckForDataOnSource( 10 );
          IdTCPClient1.IOHandler.CheckForDisconnect();

          if IdTCPClient1.IOHandler.InputBufferIsEmpty then
            Exit;

        end;
      //---//if IdTCPClient1.IOHandler.InputBufferIsEmpty then


      komenda_l := Wieloosobowe__Odczytaj( IdTCPClient1.IOHandler, '', nil, nil );


      //if Trim( komenda_l ) <> '' then
      //  Wieloosobowe__Log_Wypisz( 'Serwer TCP: ' + komenda_l );
      //Log_Wypisz( komenda_l );


      if    (  Pos( wieloosobowe__komenda__serwer_wy³¹cza_siê_c, komenda_l ) > 0  ) // Ze wzglêdu na to, ¿e w tym przyk³adzie serwer wysy³a jeszcze informacjê do kogo wysy³a tekst. //???
        and ( not czy_serwer_g ) then
        begin

          Wieloosobowe__Od³¹cz_BitBtnClick( Sender );
          Wieloosobowe_Identyfikator_Edit.Text := '';
          Wieloosobowe_Identyfikator_Gra_Label.Caption := '<' + t³umaczenie_komunikaty_r.s³owo__brak__ma³¹_liter¹ + '>';

        end
      else//if    (  Pos( wieloosobowe__komenda__serwer_wy³¹cza_siê_c, komenda_l ) > 0  ) (...)
        if Trim( komenda_l ) <> '' then
          Log_Wypisz( 'TCP - ' + t³umaczenie_komunikaty_r.komunikat__czyta_zegar + ' - ' + t³umaczenie_komunikaty_r.komunikat__komenda + ': ' + komenda_l );

    except
      on E : Exception do
        begin

          Log_Wypisz(  'TCP - ' + t³umaczenie_komunikaty_r.komunikat__czyta_zegar + ': ' + E.Message + ' ' + IntToStr( E.HelpContext )  );

        end;
      //---//on E : Exception do
    end;
    //---//try


  if   ( czy_b³¹d )
    or ( not IdTCPClient1.Connected )
    or ( IdTCPClient1.IOHandler = nil )
    or ( not IdTCPClient1.IOHandler.Opened ) then // Gdy uszkodzi siê po³¹czenie pojawia siê b³¹d 'Connection Closed Gracefully' i nie mo¿na zamkn¹æ programu.
    Klient_IdTCP_Czyta_Timer.Enabled := false;

end;//---//Klient_IdTCP_Czyta_TimerTimer().

//Klient_IdUDP_Czyta_TimerTimer().
procedure TStatki_Form.Klient_IdUDP_Czyta_TimerTimer( Sender: TObject );
var
  czy_b³¹d : boolean;
  komenda_l : string;
begin

  if IdUDPClient1.Connected then
    begin

      try
        komenda_l := IdUDPClient1.ReceiveString( -1, IdGlobal.IndyTextEncoding_UTF8 );
        czy_b³¹d := false;
      except
        on E : Exception do
          begin

            czy_b³¹d := true;
            komenda_l := ''; // Chyba nie trzeba.

            Log_Wypisz( E.Message + ' (UDP - ' + t³umaczenie_komunikaty_r.komunikat__czyta_zegar + ').' );

          end;
        //---//on E : Exception do
      end;
      //---//try


      if    ( not czy_b³¹d )
        and (  Trim( komenda_l ) <> ''  ) then
        komenda_l := Wieloosobowe__Odczytaj( nil, komenda_l, nil, nil );

      //if Trim( komenda_l ) <> '' then
      //  Wieloosobowe__Log_Wypisz( 'Serwer UDP: ' + komenda_l );


      // Klient przypomina, ¿e jest nadal po³¹czony.
      //if    ( udp_klienci_lista_g.klienci_lista_list.Count = 1 )
      //  and (  SecondsBetween( Now(), TUDP_Klient_Dane(udp_klienci_lista_g.klienci_lista_list[ 0 ]).data_czas_kontakt_ostatni ) > udp_klient_po³¹czenie_potwierdzanie_sekundy_c  ) then
      if    ( not czy_b³¹d )
        and (  SecondsBetween( Now(), udp_data_czas_sprawdzanie_po³¹czeñ_ostatnie_g ) > udp_klient_po³¹czenie_potwierdzanie_sekundy_c  ) then
        begin

          Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__udp__klient_po³¹czony_nadal_c, -99, '', true );

          udp_data_czas_sprawdzanie_po³¹czeñ_ostatnie_g := Now();
          //TUDP_Klient_Dane(udp_klienci_lista_g.klienci_lista_list[ 0 ]).data_czas_kontakt_ostatni := Now();

        end;
      //---//if    ( not czy_b³¹d ) (...)

    end;
  //---//if IdUDPClient1.Connected then


  if   ( czy_b³¹d )
    or ( not IdTCPClient1.Connected )
    or ( IdTCPClient1.IOHandler = nil )
    or ( not IdTCPClient1.IOHandler.Opened ) // Gdy uszkodzi siê po³¹czenie pojawia siê b³¹d 'Connection Closed Gracefully' i nie mo¿na zamkn¹æ programu.
    or ( not IdUDPClient1.Connected ) then
    begin

      Klient_IdUDP_Czyta_Timer.Enabled := false;
      Klient_Wysy³a_Timer.Enabled := false;

    end;
  //---//if   ( czy_b³¹d ) (...)

end;//---//Klient_IdUDP_Czyta_TimerTimer().

//Klient_Wysy³a_TimerTimer().
procedure TStatki_Form.Klient_Wysy³a_TimerTimer( Sender: TObject );
var
  zt_statek : TStatek;
begin

  zt_statek := Statek_Gracza__Gracz_Tryb_Zwróæ();

  if zt_statek <> nil then
    begin

      if    ( czy_klient_g )
        and ( // Wysy³a wspó³rzêdne tylko je¿eli gracz czymœ steruje.
                 ( zt_statek.si__statek_gracza__strzela = sisgs_Nie )
              or (
                       ( zt_statek.si__statek_gracza__strzela = sisgs_Tak )
                   and (
                            ( Typy_Wspolne.ar_Artyleria in zt_statek.amunicja_rodzaj_zbiór )
                         or ( Typy_Wspolne.ar_Bomba_G³êbinowa in zt_statek.amunicja_rodzaj_zbiór )
                         or ( Typy_Wspolne.ar_Je¿e_G³êbinowe in zt_statek.amunicja_rodzaj_zbiór )
                         or ( Typy_Wspolne.ar_Pocisk in zt_statek.amunicja_rodzaj_zbiór )
                         or ( Typy_Wspolne.ar_Torpeda in zt_statek.amunicja_rodzaj_zbiór )
                         or ( Typy_Wspolne.ar_Wszystkie in zt_statek.amunicja_rodzaj_zbiór )
                       )
                 )
            ) then
        begin

          // Wysy³a informacjê o tym gdzie celuje gracz.

          //Wieloosobowe_Klawisze_Obs³uga_Parametry_Odczytaj();
          //
          //Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__statek__klawisze_obs³uga_c, -99, '' );

          wieloosobowe__statek_cel_wspó³rzêdne_r.id_statek_cel__owo := zt_statek.id_statek; //??? na pocz¹tku gry
          wieloosobowe__statek_cel_wspó³rzêdne_r.cel_wspó³rzêdne_cel__owo := zt_statek.cel_wspó³rzêdne_bezwzglêdne_affine_vektor;

          Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__statek__cel_wspó³rzêdne_c, -99, '', true ); //??? udp

        end;
      //---//if    ( czy_klient_g ) (...)

    end;
  //---//if zt_statek <> nil then

end;//---//Klient_Wysy³a_TimerTimer().

//Serwer_Klient_Od³¹czenie_TimerTimer().
procedure TStatki_Form.Serwer_Klient_Od³¹czenie_TimerTimer( Sender: TObject );
begin

  // Je¿eli wysy³a informacjê od razu w zdarzeniu IdTCPServer1Disconnect() to serwer zg³asza b³¹d 'Connection Closed Gracefully'.

  Serwer_Klient_Od³¹czenie_Timer.Enabled := false;

  Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gracz_lista_odœwie¿_c, -99, '' );

end;//---//Serwer_Klient_Od³¹czenie_TimerTimer().

//Amunicja__Zanurzenie_G³êbokoœæ_Zadana_EditChange().
procedure TStatki_Form.Amunicja__Zanurzenie_G³êbokoœæ_Zadana_EditChange( Sender: TObject );
var
  ztb : boolean;
begin

  // Podstawowy SpinEdit pozwala tylko na liczby ca³kowite a nie chcê dodawaæ komponentów, których mo¿e nie byæ w podstawowych wersjach IDE.

  ztb := false;


  if    ( Sender <> nil )
    and ( TComponent(Sender).Name = Amunicja__Zanurzenie_G³êbokoœæ_Zadana__Skok_O_Edit.Name ) then
    begin

      try
        Amunicja__Zanurzenie_G³êbokoœæ_Zadana__Skok_O_Label.Caption := Trim(   FormatFloat(  '### ### ##0.000000', String_To__Float( Amunicja__Zanurzenie_G³êbokoœæ_Zadana__Skok_O_Edit.Text )  )   );
      except
      end;
      //---//try

    end
  else//if    ( Sender <> nil ) (...)
    begin

      try
        Amunicja__Zanurzenie_G³êbokoœæ_Zadana_Label.Caption := Trim(   FormatFloat(  '### ### ##0.000000', String_To__Float( Amunicja__Zanurzenie_G³êbokoœæ_Zadana_Edit.Text )  )   );
        ztb := true;
      except
      end;
      //---//try

    end;
  //---//if    ( Sender <> nil ) (...)


  Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__torpeda_g³êbokoœæ_zadana + ': ' + Amunicja__Zanurzenie_G³êbokoœæ_Zadana_Label.Caption + '.', informacja_dodatkowa__wyœwietlanie_czas_sekundy__krótki_c );


  if ztb then
    Statek_Parametry_Ustaw( Sender );

end;//---//Amunicja__Zanurzenie_G³êbokoœæ_Zadana_EditChange().

//Celowanie_ParametryClick().
procedure TStatki_Form.Celowanie_ParametryClick( Sender: TObject );
begin

  if Statek_Gracza__Gracz_Tryb_Zwróæ() = nil then
    Exit;

  Statek_Gracza__Gracz_Tryb_Zwróæ().celownicze_linie_unoœ := Celownicze_Linie_Unoœ_CheckBox.Checked;

end;//---//Celowanie_ParametryClick().

//Celownik_Widocznoœæ_CheckBoxClick().
procedure TStatki_Form.Celownik_Widocznoœæ_CheckBoxClick( Sender: TObject );
begin

  //Celowniczy_GLDummyCube.Visible := Celownik_Widocznoœæ_CheckBox.Checked;
  Celownik_Ekranowy__Dó³_GLHUDSprite.Visible := Celownik_Widocznoœæ_CheckBox.Checked;
  Celownik_Ekranowy__Góra_GLHUDSprite.Visible := Celownik_Ekranowy__Dó³_GLHUDSprite.Visible;
  Celownik_Ekranowy__Lewo_GLHUDSprite.Visible := Celownik_Ekranowy__Dó³_GLHUDSprite.Visible;
  Celownik_Ekranowy__Prawo_GLHUDSprite.Visible := Celownik_Ekranowy__Dó³_GLHUDSprite.Visible;

end;//---//Celownik_Widocznoœæ_CheckBoxClick().

//Celownik_Wielkoœæ_EditChange().
procedure TStatki_Form.Celownik_Wielkoœæ_EditChange( Sender: TObject );
begin

  // Podstawowy SpinEdit pozwala tylko na liczby ca³kowite a nie chcê dodawaæ komponentów, których mo¿e nie byæ w podstawowych wersjach IDE.

  try
    //Celowniczy_GLDummyCube.CubeSize := Abs(  String_To__Float( zts )  );
    Celownik_Ekranowy__Dó³_GLHUDSprite.Width := Abs(  String_To__Float( Celownik_Ekranowy__Szerokoœæ_Edit.Text )  );
  except
  end;
  //---//try

  try
    Celownik_Ekranowy__Lewo_GLHUDSprite.Height := Abs(  String_To__Float( Celownik_Ekranowy__Wysokoœæ_Edit.Text )  );
  except
  end;
  //---//try

  try
    Celownik_Ekranowy__Dó³_GLHUDSprite.Height := Abs(  String_To__Float( Celownik_Ekranowy__Gruboœæ_Edit.Text )  );
  except
  end;
  //---//try

  Celownik_Ekranowy__Góra_GLHUDSprite.Height := Celownik_Ekranowy__Dó³_GLHUDSprite.Height;
  Celownik_Ekranowy__Góra_GLHUDSprite.Width := Celownik_Ekranowy__Dó³_GLHUDSprite.Width;

  Celownik_Ekranowy__Lewo_GLHUDSprite.Width := Celownik_Ekranowy__Dó³_GLHUDSprite.Height;

  Celownik_Ekranowy__Prawo_GLHUDSprite.Height := Celownik_Ekranowy__Lewo_GLHUDSprite.Height;
  Celownik_Ekranowy__Prawo_GLHUDSprite.Width := Celownik_Ekranowy__Lewo_GLHUDSprite.Width;



  try
    Celownik_Ekranowy__Dó³_GLHUDSprite.Material.FrontProperties.Diffuse.Red := Abs(  String_To__Float( Celownik_Ekranowy__Kolor__R_Edit.Text )  );
  except
  end;
  //---//try

  try
    Celownik_Ekranowy__Dó³_GLHUDSprite.Material.FrontProperties.Diffuse.Green := Abs(  String_To__Float( Celownik_Ekranowy__Kolor__G_Edit.Text )  );
  except
  end;
  //---//try

  try
    Celownik_Ekranowy__Dó³_GLHUDSprite.Material.FrontProperties.Diffuse.Blue := Abs(  String_To__Float( Celownik_Ekranowy__Kolor__B_Edit.Text )  );
  except
  end;
  //---//try

  try
    Celownik_Ekranowy__Dó³_GLHUDSprite.Material.FrontProperties.Diffuse.Alpha := Abs(  String_To__Float( Celownik_Ekranowy__Kolor__A_Edit.Text )  );
  except
  end;
  //---//try

  Celownik_Ekranowy__Góra_GLHUDSprite.Material.FrontProperties.Diffuse := Celownik_Ekranowy__Dó³_GLHUDSprite.Material.FrontProperties.Diffuse;
  Celownik_Ekranowy__Lewo_GLHUDSprite.Material.FrontProperties.Diffuse := Celownik_Ekranowy__Dó³_GLHUDSprite.Material.FrontProperties.Diffuse;
  Celownik_Ekranowy__Prawo_GLHUDSprite.Material.FrontProperties.Diffuse := Celownik_Ekranowy__Dó³_GLHUDSprite.Material.FrontProperties.Diffuse;


  //Celownik_Ekranowy__Wielkoœæ_Label.Caption := Trim(  FormatFloat( '### ### ##0.000000', Celowniczy_GLDummyCube.CubeSize )  );
  Celownik_Ekranowy__Wielkoœæ_Label.Caption :=
    Trim(  FormatFloat( '### ### ##0.000000', Celownik_Ekranowy__Dó³_GLHUDSprite.Width )  ) +
    ' x ' +
    Trim(  FormatFloat( '### ### ##0.000000', Celownik_Ekranowy__Lewo_GLHUDSprite.Height )  ) +
    ' : ' +
    Trim(  FormatFloat( '### ### ##0.000000', Celownik_Ekranowy__Dó³_GLHUDSprite.Height )  );

end;//---//Celownik_Wielkoœæ_EditChange().

//Chmury_CheckBoxClick().
procedure TStatki_Form.Chmury_CheckBoxClick( Sender: TObject );
begin

  if Chmury_CheckBox.Checked then
    Chmury__Utwórz()
  else//if Chmury_CheckBox.Checked then
    Chmury__Zwolnij();

end;//---//Chmury_CheckBoxClick().

//Czcionka_Wielkoœæ_SpinEditChange().
procedure TStatki_Form.Czcionka_Wielkoœæ_SpinEditChange( Sender: TObject );
begin

  if Gra_GLWindowsBitmapFont.Font.Size <> Czcionka_Wielkoœæ__Ekran_SpinEdit.Value then
    Gra_GLWindowsBitmapFont.Font.Size := Czcionka_Wielkoœæ__Ekran_SpinEdit.Value;

  if Radar_GLWindowsBitmapFont.Font.Size <> Czcionka_Wielkoœæ__Radar_SpinEdit.Value then
    Radar_GLWindowsBitmapFont.Font.Size := Czcionka_Wielkoœæ__Radar_SpinEdit.Value;

end;//---//Czcionka_Wielkoœæ_SpinEditChange().

//DŸwiêk__Aktywnoœæ_CheckBoxClick().
procedure TStatki_Form.DŸwiêk__Aktywnoœæ_CheckBoxClick( Sender: TObject );
var
  i,
  j
  //k
    : integer;
  search_rec : TSearchRec;
begin

  GLSMOpenAL1.Active := DŸwiêk__Aktywnoœæ_CheckBox.Checked;

  if    ( DŸwiêk__Aktywnoœæ_CheckBox.Checked ) // Nie sprawdzaæ GLSMOpenAL1.Active, gdy¿ podczas próby aktywacji, gdy nie uda siê zainicjowaæ to wartoœæ bêdzie false.
    and ( ActiveSoundManager() = nil ) then
    Komunikat_Wyœwietl
      (
        t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_zainicjowaæ_dŸwiêku__sprawdŸ_dostêpnoœæ_w_systemie_bibliotek_openal__www_openal_org,
        t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION
      );


  if    ( DŸwiêk__Aktywnoœæ_CheckBox.Checked )
    and ( GLSMOpenAL1.Active )
    and ( ActiveSoundManager() <> nil ) then
    begin

      // Je¿eli znajdzie plik zwraca 0, je¿eli nie znajdzie zwraca numer b³êdu. Na pocz¹tku znajduje '.' '..' potem listê plików.
      if FindFirst(  ExtractFilePath( Application.ExeName ) + katalog__dŸwiêki_c + '\*' + dŸwiêki__rozszerzenie_c, faAnyFile, search_rec  ) = 0 then // Application potrzebuje w uses Forms.
        begin

          repeat

            if    ( search_rec.Attr <> faDirectory )
              and ( search_rec.Name <> '.' )
              and ( search_rec.Name <> '..' ) then
              DŸwiêk__Plik_Dodaj_Do_Biblioteki( search_rec.Name );

          until FindNext( search_rec ) <> 0

        end;
      //---//if FindFirst(  ExtractFilePath( Application.ExeName ) + katalog__dŸwiêki_c + '\*' + dŸwiêki__rozszerzenie_c, faAnyFile, search_rec  ) = 0 then

      FindClose( search_rec );


      if    (  Gra_GLSoundLibrary.Samples.GetByName( dŸwiêki__babymetal_statek_c + dŸwiêki__rozszerzenie_c ) <> nil  )
        and (  DŸwiêki__BabyMetal_Statek_GLDummyCube.Behaviours.IndexOfClass( TGLBSoundEmitter ) <= -1  ) then // -1 - brak, >= 0 zachowania.
        with TGLBSoundEmitter.Create( DŸwiêki__BabyMetal_Statek_GLDummyCube.Behaviours ) do
          begin

            // DŸwiêki__BabyMetal_Statek_GLDummyCube - je¿eli BabyMetal_Statek_GLDummyCube jest zbyt daleko od 's³uchacza' to nie s³ychaæ dŸwiêku.

            Source.SoundLibrary := Gra_GLSoundLibrary;
            Source.SoundName := dŸwiêki__babymetal_statek_c + dŸwiêki__rozszerzenie_c;
            Source.NbLoops := 2; // Wartoœæ wiêksza od 1 zapêtla odtwarzanie w nieskoñczonoœæ.
            Source.MinDistance := dŸwiêk_emiter__zasiêg_minimalny_g * 10;
            //Playing := true; // Aby po wy³¹czeniu i ponownym w³¹czeniu aktywnoœci dŸwiêku znów zaczê³o odtwarzaæ dŸwiêk.

          end;
        //---//with TGLBSoundEmitter.Create( DŸwiêki__BabyMetal_Statek_GLDummyCube.Behaviours ) do

      if    (  Gra_GLSoundLibrary.Samples.GetByName( dŸwiêki__morze_falowanie_c + dŸwiêki__rozszerzenie_c ) <> nil  )
        and (  DŸwiêki__Morze_Falowanie_GLDummyCube.Behaviours.IndexOfClass( TGLBSoundEmitter ) <= -1  ) then // -1 - brak, >= 0 zachowania.
        with TGLBSoundEmitter.Create( DŸwiêki__Morze_Falowanie_GLDummyCube.Behaviours ) do
          begin

            Source.SoundLibrary := Gra_GLSoundLibrary;
            Source.SoundName := dŸwiêki__morze_falowanie_c + dŸwiêki__rozszerzenie_c;
            Source.NbLoops := 2; // Wartoœæ wiêksza od 1 zapêtla odtwarzanie w nieskoñczonoœæ.
            Source.MinDistance := dŸwiêk_emiter__zasiêg_minimalny_g;
            //Playing := true; // Aby po wy³¹czeniu i ponownym w³¹czeniu aktywnoœci dŸwiêku znów zaczê³o odtwarzaæ dŸwiêk.

          end;
        //---//with TGLBSoundEmitter.Create( DŸwiêki__Morze_Falowanie_GLDummyCube.Behaviours ) do


      if DŸwiêki__BabyMetal_Statek_GLDummyCube.Behaviours.IndexOfClass( TGLBSoundEmitter ) > -1 then // -1 - brak, >= 0 zachowania.
        TGLBSoundEmitter(DŸwiêki__BabyMetal_Statek_GLDummyCube.Behaviours.Items[ 0 ]).Playing := BabyMetal_Statek_GLDummyCube.Visible; // Aby po wy³¹czeniu i ponownym w³¹czeniu aktywnoœci dŸwiêku znów zaczê³o odtwarzaæ dŸwiêk.

      if    (  DŸwiêki__Morze_Falowanie_GLDummyCube.Behaviours.IndexOfClass( TGLBSoundEmitter ) > -1  ) // -1 - brak, >= 0 zachowania.
        and ( not TGLBSoundEmitter(DŸwiêki__Morze_Falowanie_GLDummyCube.Behaviours.Items[ 0 ]).Playing ) then
        TGLBSoundEmitter(DŸwiêki__Morze_Falowanie_GLDummyCube.Behaviours.Items[ 0 ]).Playing := true; // Aby po wy³¹czeniu i ponownym w³¹czeniu aktywnoœci dŸwiêku znów zaczê³o odtwarzaæ dŸwiêk.



      L¹d__DŸwiêków_Emitery_Utwórz(); // Je¿eli np. najpierw zosta³ utworzony l¹d, a potem dopiero w³¹czony dŸwiêk.

      L¹d__Elementy_Iloœæ_Wyszukaj();


      for i := 0 to Length( statki_t ) - 1 do
        if statki_t[ i ] <> nil then
          statki_t[ i ].DŸwiêków_Emitery_Utwórz( statek_create_funkcje_g, t³umaczenie_komunikaty_r ); // Je¿eli np. najpierw zosta³ utworzony l¹d, a potem dopiero w³¹czony dŸwiêk.



      // Resetuje wartoœæ losow¹ opóŸnienia dŸwiêku.
      if    ( l¹d_list <> nil )
        and (  Assigned( l¹d_list )  ) then
        for i := 0 to l¹d_list.Count - 1 do
          if Wyglad_Elementy.Obiekt_Rodzaj( l¹d_list[ i ] ) = Wyglad_Elementy.or_DŸwiêk_Emiter then
            Wyglad_Elementy.DŸwiêki__OpóŸnienie_Losowe__Wylicz( l¹d_list[ i ] );

      for i := 0 to Length( statki_t ) - 1 do
        if    ( statki_t[ i ] <> nil )
          and ( statki_t[ i ].wygl¹d_elementy_list <> nil )
          and (  Assigned( statki_t[ i ].wygl¹d_elementy_list )  ) then
          for j := 0 to statki_t[ i ].wygl¹d_elementy_list.Count - 1 do
            if Wyglad_Elementy.Obiekt_Rodzaj( statki_t[ i ].wygl¹d_elementy_list[ j ] ) = Wyglad_Elementy.or_DŸwiêk_Emiter then
              Wyglad_Elementy.DŸwiêki__OpóŸnienie_Losowe__Wylicz( statki_t[ i ].wygl¹d_elementy_list[ j ] );



      dŸwiêki__losowe_uruchomione__wszystkie__l¹d_g := false;
      dŸwiêki__losowe_uruchomione__wszystkie__statki_g := false;


      //// W³¹cza dŸwiêki ustawione na l¹dach i statkach.
      //if    ( l¹d_list <> nil )
      //  and (  Assigned( l¹d_list )  ) then
      //  for i := 0 to l¹d_list.Count - 1 do
      //    if Wyglad_Elementy.DŸwiêki__Losowoœæ( l¹d_list[ i ] ) = 0 then
      //      for k := 0 to TGLCustomSceneObject(l¹d_list[ i ]).Behaviours.Count - 1 do
      //        if TGLCustomSceneObject(l¹d_list[ i ]).Behaviours.Items[ k ] is TGLBSoundEmitter then
      //          TGLBSoundEmitter(TGLCustomSceneObject(l¹d_list[ i ]).Behaviours.Items[ k ]).Playing := true;
      //
      //
      //for i := 0 to Length( statki_t ) - 1 do
      //  if    ( statki_t[ i ] <> nil )
      //    and ( statki_t[ i ].wygl¹d_elementy_list <> nil )
      //    and (  Assigned( statki_t[ i ].wygl¹d_elementy_list )  ) then
      //    for j := 0 to statki_t[ i ].wygl¹d_elementy_list.Count - 1 do
      //      if Wyglad_Elementy.DŸwiêki__Losowoœæ( statki_t[ i ].wygl¹d_elementy_list[ j ] ) = 0 then
      //        for k := 0 to TGLCustomSceneObject(statki_t[ i ].wygl¹d_elementy_list[ j ]).Behaviours.Count - 1 do
      //          if TGLCustomSceneObject(statki_t[ i ].wygl¹d_elementy_list[ j ]).Behaviours.Items[ k ] is TGLBSoundEmitter then
      //            TGLBSoundEmitter(TGLCustomSceneObject(statki_t[ i ].wygl¹d_elementy_list[ j ]).Behaviours.Items[ k ]).Playing := true;

    end
  else//if    ( DŸwiêk__Aktywnoœæ_CheckBox.Checked ) (...)
    begin

      //L¹d__Zwolnij( true );


      // DŸwiêki efektów s¹ ³adowane tylko raz w trakcie uruchamiania programu i nie s¹ potem prze³adowywane. //???

      //if DŸwiêki__Morze_Falowanie_GLDummyCube.Behaviours.IndexOfClass( TGLBSoundEmitter ) > -1 then // -1 - brak, >= 0 zachowania.
      //  DŸwiêki__Morze_Falowanie_GLDummyCube.Behaviours.Delete( 0 );

    end;
  //---//if    ( DŸwiêk__Aktywnoœæ_CheckBox.Checked ) (...)


  if DŸwiêk__Aktywnoœæ_CheckBox.Checked then
    DŸwiêki__Komunikaty__Lista_Wczytaj();

end;//---//DŸwiêk__Aktywnoœæ_CheckBoxClick().

//DŸwiêk__G³oœnoœæ_SpinEditChange().
procedure TStatki_Form.DŸwiêk__G³oœnoœæ_SpinEditChange( Sender: TObject );
begin

  if DŸwiêk__G³oœnoœæ_SpinEdit.Value > DŸwiêk__G³oœnoœæ_SpinEdit.MaxValue then
    DŸwiêk__G³oœnoœæ_SpinEdit.Value := DŸwiêk__G³oœnoœæ_SpinEdit.MaxValue
  else//if zti >= DŸwiêk__G³oœnoœæ_SpinEdit.MaxValue then
  if DŸwiêk__G³oœnoœæ_SpinEdit.Value < DŸwiêk__G³oœnoœæ_SpinEdit.MinValue then
    DŸwiêk__G³oœnoœæ_SpinEdit.Value := DŸwiêk__G³oœnoœæ_SpinEdit.MinValue;

  GLSMOpenAL1.MasterVolume := DŸwiêk__G³oœnoœæ_SpinEdit.Value * 0.01; // Samo powinno dobrze sprawdzaæ zakres.
  DŸwiêk__G³oœnoœæ_Label.Caption := Trim(  FormatFloat( '### ### ##0.00', GLSMOpenAL1.MasterVolume * 100 )  );

end;//---//DŸwiêk__G³oœnoœæ_SpinEditChange().

//DŸwiêki__Komunikaty_GLAsyncTimerTimer().
procedure TStatki_Form.DŸwiêki__Komunikaty_GLAsyncTimerTimer( Sender: TObject );
var
  i : integer;
begin

  if    ( dŸwiêki__komunikat__prêdkoœæ__ostatnie_wywo³anie__data_czas_g <> 0 )
    and (  MilliSecondsBetween( Now(), dŸwiêki__komunikat__prêdkoœæ__ostatnie_wywo³anie__data_czas_g ) >= dŸwiêki__komunikat__o_zmianie_utwórz__czas_milisekundy_c  ) then
    begin

      dŸwiêki__komunikat__prêdkoœæ__ostatnie_wywo³anie__data_czas_g := 0;


      for i := 0 to Length( statki_t ) - 1 do
        if    ( statki_t[ i ] <> nil )
          and ( statki_t[ i ].id_statek = dŸwiêki__komunikat__prêdkoœæ__ostatnie_wywo³anie__id_statek_g ) then
          begin

            DŸwiêki__Komunikat__Utwórz_Jeden(  dkr_Prêdkoœæ, Round( statki_t[ i ].prêdkoœæ_zadana_procent )  );
            Break;

          end;
        //---//if    ( statki_t[ i ] <> nil ) (...)


      dŸwiêki__komunikat__prêdkoœæ__ostatnie_wywo³anie__id_statek_g := -99;

    end;
  //---//if    ( dŸwiêki__komunikat__skrêt__ostatnie_wywo³anie__data_czas_g <> 0 ) (...)

  if    ( dŸwiêki__komunikat__skrêt__ostatnie_wywo³anie__data_czas_g <> 0 )
    and (  MilliSecondsBetween( Now(), dŸwiêki__komunikat__skrêt__ostatnie_wywo³anie__data_czas_g ) >= dŸwiêki__komunikat__o_zmianie_utwórz__czas_milisekundy_c  ) then
    begin

      dŸwiêki__komunikat__skrêt__ostatnie_wywo³anie__data_czas_g := 0;


      for i := 0 to Length( statki_t ) - 1 do
        if    ( statki_t[ i ] <> nil )
          and ( statki_t[ i ].id_statek = dŸwiêki__komunikat__skrêt__ostatnie_wywo³anie__id_statek_g ) then
          begin

            DŸwiêki__Komunikat__Utwórz_Jeden(  dkr_Skrêt, Round( statki_t[ i ].skrêt_zadany_procent )  );
            Break;

          end;
        //---//if    ( statki_t[ i ] <> nil ) (...)


      dŸwiêki__komunikat__skrêt__ostatnie_wywo³anie__id_statek_g := -99;

    end;
  //---//if    ( dŸwiêki__komunikat__skrêt__ostatnie_wywo³anie__data_czas_g <> 0 ) (...)

  if    ( dŸwiêki__komunikat__zanurzenie__ostatnie_wywo³anie__data_czas_g <> 0 )
    and (  MilliSecondsBetween( Now(), dŸwiêki__komunikat__zanurzenie__ostatnie_wywo³anie__data_czas_g ) >= dŸwiêki__komunikat__o_zmianie_utwórz__czas_milisekundy_c  ) then
    begin

      dŸwiêki__komunikat__zanurzenie__ostatnie_wywo³anie__data_czas_g := 0;


      for i := 0 to Length( statki_t ) - 1 do
        if    ( statki_t[ i ] <> nil )
          and ( statki_t[ i ].id_statek = dŸwiêki__komunikat__zanurzenie__ostatnie_wywo³anie__id_statek_g ) then
          begin

            if statki_t[ i ].czy_samolot then
              DŸwiêki__Komunikat__Utwórz_Jeden(  dkr_Pu³ap, Round( statki_t[ i ].zanurzenie_pu³ap__zadane_procent )  )
            else//if statki_t[ i ].czy_samolot then
              DŸwiêki__Komunikat__Utwórz_Jeden(  dkr_Zanurzenie, Round( statki_t[ i ].zanurzenie_pu³ap__zadane_procent )  );

            Break;

          end;
        //---//if    ( statki_t[ i ] <> nil ) (...)


      dŸwiêki__komunikat__zanurzenie__ostatnie_wywo³anie__id_statek_g := -99;

    end;
  //---//if    ( dŸwiêki__komunikat__skrêt__ostatnie_wywo³anie__data_czas_g <> 0 ) (...)

end;//---//DŸwiêki__Komunikaty_GLAsyncTimerTimer().

//DŸwiêk__T³umaczenia_ComboBoxKeyDown().
procedure TStatki_Form.DŸwiêk__T³umaczenia_ComboBoxKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
begin

  // Enter.
  if Key = 13 then
    begin

      Key := 0;
      DŸwiêki__Komunikaty__Wczytaj();

    end;
  //---//if Key = 13 then

end;//---//DŸwiêk__T³umaczenia_ComboBoxKeyDown().

//Edit_Jako_Spin_KeyDown().
procedure TStatki_Form.Edit_Jako_Spin_KeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
var
  kursor_pozycja : integer;
  ztr,
  pole_wartoœæ
    : real;
  separator_dziesiêtny_l : string;
begin

  // Zwiêksza lub zmniejsza wartoœæ liczbow¹ w polu tekstowym.
  //
  // Podstawowy SpinEdit pozwala tylko na liczby ca³kowite a nie chcê dodawaæ komponentów, których mo¿e nie byæ w podstawowych wersjach IDE.

  if   ( Sender = nil )
    or (
             ( Sender <> nil )
         and (  not ( Sender is TEdit )  )
       )
    or (
             ( Key <> VK_UP ) // Strza³ka w górê.
         and ( Key <> VK_DOWN ) // Strza³ka w dó³.
       ) then
    Exit;


  try
    pole_wartoœæ := String_To__Float( TEdit(Sender).Text );
  except
    Exit;
  end;
  //---//try


  kursor_pozycja := TEdit(Sender).SelStart; // Indeksowane od 0, string od 1.


  separator_dziesiêtny_l := Separator_Dziesiêtny__Ustal();

  if   ( Pos( separator_dziesiêtny_l, TEdit(Sender).Text ) > 0 )
   and (  Pos( separator_dziesiêtny_l, TEdit(Sender).Text ) < kursor_pozycja + 1  ) then
    ztr := 0.1
  else//if   ( Pos( separator_dziesiêtny_l, TEdit(Sender).Text ) > 0 ) (...)
    ztr := 1;


  if    ( Sender <> nil )
    and ( TComponent(Sender).Name = Amunicja__Zanurzenie_G³êbokoœæ_Zadana_Edit.Name ) then
    begin

      try
        if String_To__Float( Amunicja__Zanurzenie_G³êbokoœæ_Zadana__Skok_O_Edit.Text ) > 0 then
          ztr := String_To__Float( Amunicja__Zanurzenie_G³êbokoœæ_Zadana__Skok_O_Edit.Text );
      except
      end;
      //---//try

    end;
  //---//if    ( Sender <> nil ) (...)


  // Strza³ka w dó³.
  if Key = VK_DOWN then
    ztr := -ztr;

  Key := 0;

  pole_wartoœæ := pole_wartoœæ + ztr;


  TEdit(Sender).Text := FloatToStr( pole_wartoœæ );

  if Pos( separator_dziesiêtny_l, TEdit(Sender).Text ) <= 0 then
    TEdit(Sender).Text := TEdit(Sender).Text + separator_dziesiêtny_l + '0';


  TEdit(Sender).SelStart := kursor_pozycja;

end;//---//Edit_Jako_Spin_KeyDown().

//Elementy_Gracza_Dostosuj_CheckBoxClick().
procedure TStatki_Form.Elementy_Gracza_Dostosuj_CheckBoxClick( Sender: TObject );
var
  i : integer;
begin

  if statek_gracza <> nil then
    statek_gracza.Elementy_Gracza_Dostosuj( -99, Celownik_Bombowiec_Widocznoœæ_CheckBox.Checked, Gra_GLCamera.AbsolutePosition.Y < 0, L¹dowanie_U³atwione_CheckBox.Checked, Punkty_¯ycia_WskaŸnik__Gracz_CheckBox.Checked, false, false, Obrót_K¹t_Zablokowany_WskaŸnik_CheckBox.Checked, Obrót_K¹t_Zablokowany_Strza³_WskaŸnik_CheckBox.Checked, Prze³adowanie_WskaŸnik_CheckBox.Checked );

  if samolot__statek_gracza <> nil then
    samolot__statek_gracza.Elementy_Gracza_Dostosuj( -99, Celownik_Bombowiec_Widocznoœæ_CheckBox.Checked, Gra_GLCamera.AbsolutePosition.Y < 0, L¹dowanie_U³atwione_CheckBox.Checked, Punkty_¯ycia_WskaŸnik__Gracz_CheckBox.Checked, false, false, Obrót_K¹t_Zablokowany_WskaŸnik_CheckBox.Checked, Obrót_K¹t_Zablokowany_Strza³_WskaŸnik_CheckBox.Checked, Prze³adowanie_WskaŸnik_CheckBox.Checked );


  for i := 0 to Length( statki_t ) - 1 do
    if    ( statki_t[ i ] <> nil )
      and ( statki_t[ i ] <> samolot__statek_gracza )
      and ( statki_t[ i ] <> statek_gracza ) then
      statki_t[ i ].Elementy_Gracza_Dostosuj( Gracz_Grupa_SpinEdit.Value, Celownik_Bombowiec_Widocznoœæ_CheckBox.Checked, Gra_GLCamera.AbsolutePosition.Y < 0, L¹dowanie_U³atwione_CheckBox.Checked, false, Punkty_¯ycia_WskaŸnik__Przeciwnik_CheckBox.Checked, Punkty_¯ycia_WskaŸnik__Sojusznik_CheckBox.Checked, false, false, false );

end;//---//Elementy_Gracza_Dostosuj_CheckBoxClick().

//Fale_CheckBoxClick().
procedure TStatki_Form.Fale_CheckBoxClick( Sender: TObject );
var
  fale__wysokoœæ_bazowa_l : single;
begin

  Fale_GLTerrainRenderer.Visible := Fale_CheckBox.Checked;

  // Obszar falowania jest zbyt ma³y ze wzglêdu na wydajnoœæ.
  //Woda_Góra_GLPlane.Visible := not Fale_CheckBox.Checked;
  //Woda_Dó³_GLPlane.Visible := not Fale_CheckBox.Checked;

  if Fale_CheckBox.Checked then
    begin

      if czy_klient_g then
        fale__wysokoœæ_bazowa_l := fale__wysokoœæ_bazowa__serwer_g
      else//if czy_klient_g then
        fale__wysokoœæ_bazowa_l := fale__wysokoœæ_bazowa_g;

      Woda_Góra_GLPlane.Position.Y := -fale__wysokoœæ_bazowa_l * 0.05; // Z wiêkszej odleg³oœci p³aszczyzna migocze pod falami.
      //Woda_Góra_GLPlane.Position.Y := fale__woda_poziom_g - fale__fala_wysokoœæ_g * 0.01;

    end
  else//if Fale_CheckBox.Checked then
    Woda_Góra_GLPlane.Position.Y := 0;


  Woda_Dó³_GLPlane.Position.Y := Woda_Góra_GLPlane.Position.Y;

end;//---//Fale_CheckBoxClick().

//Fale_GLTerrainRendererGetTerrainBounds().
procedure TStatki_Form.Fale_GLTerrainRendererGetTerrainBounds( var l, t, r, b: Single );
begin

  // Dla du¿ych wartoœci GLCamera.DepthOfView ( > 100 ) bardzo wolno siê 'inicjuje'.

  if l < -fale__obszar_ograniczenie_g then
    begin

      l := -fale__obszar_ograniczenie_g;
      t := -l + 16;
      b := l;
      r := t;

    end;
  //---//if l < -fale__obszar_ograniczenie_g then

end;//---//Fale_GLTerrainRendererGetTerrainBounds().

//Fale_GLTerrainRendererHeightDataPostRender().
procedure TStatki_Form.Fale_GLTerrainRendererHeightDataPostRender( var rci: GLS.RenderContextInfo.TGLRenderContextInfo; var HeightDatas: TList );
const
  cWaterOpaqueDepth = 2000;

  r = 1; // 0.75 0.439216
  g = 1; // 0.75 0.576471
  b = 1; // 1 0.858824

var
  x,
  y,
  s2
    : integer;
  t : single;
  hd : TGLHeightData; //uses GLHeightData.

  //Funkcja IssuePoint() w Fale_GLTerrainRendererHeightDataPostRender().
  procedure IssuePoint( rx_f, ry_f: integer );
  var
    px,
    py
      : single;
    alpha,
    colorRatio,
    ca,
    sa
      : single;
  begin

    // Powoduje b³¹d tekstury wody (fal), //???
    // je¿eli Fale_GLTerrainRenderer jest w hierarchii sceny pod Gra_Obiekty_GLDummyCube
    // ale gdy jest nad to zmienia wygl¹d kolorów.

    px := x + rx_f + s2;
    py := y + ry_f + s2;

    if hd.DataState = hdsNone then
      begin

        alpha := 1;

      end
    else//if hd.DataState = hdsNone then
      begin

        alpha := (  fale__woda_poziom_g - hd.SmallIntHeight( rx_f, ry_f )  ) * ( 1 / cWaterOpaqueDepth );
        alpha := GLS.VectorGeometry.ClampValue( alpha, 0.5, 1 );

      end;
    //---//if hd.DataState = hdsNone then

    System.Math.SinCos(  WaterPhase( px, py ), sa, ca  ); //uses System.Math.
    colorRatio := 1 - alpha * 0.1;
    Winapi.OpenGL.glColor4f( r * colorRatio, g * colorRatio, b, alpha );
    Winapi.OpenGL.glTexCoord2f( px * 0.01 + 0.002 * sa, py * 0.01 + 0.0022 * ca - t * 0.002 );
    Winapi.OpenGL.glVertex3f( px, py, fale__woda_poziom_g + fale__fala_wysokoœæ_g * sa );

  end;//---//Funkcja IssuePoint() w Fale_GLTerrainRendererHeightDataPostRender().

var
  i,
  s
    : integer;
begin//Fale_GLTerrainRendererHeightDataPostRender().

  //TGLRenderContextInfo
  //uses GLRenderContextInfo.

  //if czy_pauza_g then
  //  Exit; // Znika powierzchnia fal.

  t := Gra_GLCadencer.CurrentTime;

  Fale_GLMaterialLibrary.ApplyMaterial( woda_tekstura_nazwa_c, rci );

  repeat // not Fale_GLMaterialLibrary.UnApplyMaterial( rci );
    begin

      if Gra_GLCamera.AbsolutePosition.Y < 0 then
        //rci.GLStates.InvertFrontFace();
        rci.GLStates.InvertGLFrontFace();

      rci.GLStates.Disable( stLighting );
      rci.GLStates.Disable( stNormalize );
      rci.GLStates.SetStencilFunc( cfAlways, 1, 255 );
      rci.GLStates.StencilWriteMask := 255;
      rci.GLStates.Enable( stStencilTest );
      rci.GLStates.SetStencilOp( soKeep, soKeep, soReplace );

      glNormal3f( 0, 0, 1 );

      for i := 0 to heightDatas.Count - 1 do
        begin

          hd := TGLHeightData( heightDatas.List[ i ] );

          if    ( hd.DataState = hdsReady )
            and ( hd.HeightMin > fale__woda_poziom_g ) then
          //if (hd.DataState = hdsReady) and (hd.HeightMin > -10000) then
            Continue;

          x := hd.XLeft;
          y := hd.YTop;
          s := hd.Size - 1;
          s2 := s div 2;
          glBegin( GL_TRIANGLE_FAN );
          IssuePoint( s2, s2 );
          IssuePoint( 0, 0 );
          IssuePoint( s2, 0 );
          IssuePoint( s, 0 );
          IssuePoint( s, s2 );
          IssuePoint( s, s );
          IssuePoint( s2, s );
          IssuePoint( 0, s );
          IssuePoint( 0, s2 );
          IssuePoint( 0, 0 );
          glEnd();

        end;
      //---//for i := 0 to heightDatas.Count - 1 do

      rci.GLStates.SetStencilOp( soKeep, soKeep, soKeep ); //uses GLState.
      rci.GLStates.Disable( stStencilTest ); //uses GLState.


      if Gra_GLCamera.AbsolutePosition.Y < 0 then
        //rci.GLStates.InvertFrontFace();
        rci.GLStates.InvertGLFrontFace();

    end
  until not Fale_GLMaterialLibrary.UnApplyMaterial( rci );

end;//---//Fale_GLTerrainRendererHeightDataPostRender().

//Fale_GLCustomHDSStartPreparingData().
procedure TStatki_Form.Fale_GLCustomHDSStartPreparingData( HeightData: TGLHeightData );
var
  i,
  j,
  n
    : integer;
  offset : TTexPoint;
  htfHD : TGLHeightData;
begin

  htfHD := Fale_GLHeightTileFileHDS.GetData( heightData.XLeft, heightData.YTop, heightData.Size, heightData.DataType );

  if htfHD.DataState = hdsNone then //or (htfHD.HeightMax<=woda_poziom_c-cWaterOpaqueDepth) then
    heightData.DataState := hdsNone
  else//if htfHD.DataState = hdsNone then
    begin

      i := ( heightData.XLeft div 128 );
      j := ( heightData.YTop div 128 );

      if    ( Cardinal( i ) < 4 )
        and ( Cardinal( j ) < 4 ) then
        begin

          heightData.MaterialName := format( 'Tex_%d_%d.bmp', [ i, j ] );
          heightData.TextureCoordinatesMode := tcmLocal;
          n := (  ( heightData.XLeft div 32 ) and 3  );
          offset.S := n * 0.25;
          n := (  ( heightData.YTop div 32 ) and 3  );
          offset.T := -n * 0.25;
          heightData.TextureCoordinatesOffset := offset;
          heightData.TextureCoordinatesScale := TexPointMake( 0.25, 0.25 );
          heightData.DataType := hdtSmallInt;
          htfHD.DataType := hdtSmallInt;
          heightData.Allocate( hdtSmallInt );
          Move( htfHD.SmallIntData^, heightData.SmallIntData^, htfHD.DataSize );
          heightData.DataState := hdsReady;
          heightData.HeightMin := htfHD.HeightMin;
          heightData.HeightMax := htfHD.HeightMax;

        end
      else//if    ( Cardinal( i ) < 4 ) (...)
        heightData.DataState := hdsNone

    end;
  //---//if htfHD.DataState = hdsNone then

  Fale_GLHeightTileFileHDS.Release( htfHD );

end;//---//Fale_GLCustomHDSStartPreparingData().

//Fotograficzny_Tryb_CheckBoxClick().
procedure TStatki_Form.Fotograficzny_Tryb_CheckBoxClick( Sender: TObject );
var
  i : integer;
begin

  if Fotograficzny_Tryb_CheckBox.Checked then
    for i := informacje_dodatkowe_list.Count - 1 downto 0 do
      Informacja_Dodatkowa_Zwolnij_Jeden( informacje_dodatkowe_list, i );

end;//---//Fotograficzny_Tryb_CheckBoxClick().

//Gra_Pauza_ButtonClick().
procedure TStatki_Form.Gra_Pauza_ButtonClick( Sender: TObject );
begin

  if not czy_klient_g then
    Pauza( not czy_pauza_g );

end;//---//Gra_Pauza_ButtonClick().

//Gra_Rozpocznij_BitBtnClick().
procedure TStatki_Form.Gra_Rozpocznij_BitBtnClick( Sender: TObject );
var
  i : integer;
  zt_id_socket_handle : TIdSocketHandle;
begin

  if czy_klient_g then
    Exit
  else//if czy_klient_g then
  if   ( czy_gra_lokalna_g )
    or ( czy_serwer_g ) then
    begin

      for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
        begin

          if not TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).gotowy__kd then
            begin

              if Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_wszyscy_gracze_s¹_gotowi__czy_kontynuowaæ, t³umaczenie_komunikaty_r.komunikat__potwierdzenie, MB_YESNO + MB_DEFBUTTON2 + MB_ICONQUESTION ) = IDNO then
                Exit
              else//if Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_wszyscy_gracze_s¹_gotowi__czy_kontynuowaæ, t³umaczenie_komunikaty_r.komunikat__potwierdzenie, MB_YESNO + MB_DEFBUTTON2 + MB_ICONQUESTION ) = IDNO then
                Break; // Dalej nie sprawdza gotowoœci graczy.

            end;
          //---//if not TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).gotowy__kd then

        end;
      //---//for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do

      for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
        begin

          if not TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).dane_wys³ane__kd then
            begin

              if Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_wszyscy_gracze_otrzymali_dane_o_rozgrywce__czy_kontynuowaæ, t³umaczenie_komunikaty_r.komunikat__potwierdzenie, MB_YESNO + MB_DEFBUTTON2 + MB_ICONQUESTION ) = IDNO then
                Exit
              else//if Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_wszyscy_gracze_otrzymali_dane_o_rozgrywce__czy_kontynuowaæ, t³umaczenie_komunikaty_r.komunikat__potwierdzenie, MB_YESNO + MB_DEFBUTTON2 + MB_ICONQUESTION ) = IDNO then
                Break; // Dalej nie sprawdza otrzymania danych o rozgrywce przez graczy.

            end;
          //---//if not TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).dane_wys³ane__kd then

        end;
      //---//for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do


      for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
        TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).w_grze__kd := true;


      SetLength( gra_statystyki_r_t, 0 );
      SetLength( gra_statystyki_r_t, tcp_klienci_lista_g.klienci_lista_list.Count );

      for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
        begin

          Gra_Statystyki_Zeruj( gra_statystyki_r_t[ i ] );

          gra_statystyki_r_t[ i ].id_grupa__gs := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_grupa__kd;
          gra_statystyki_r_t[ i ].identyfikator__gs := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd;

        end;
      //---//for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do


      Radar__Wyczyœæ( rcz_Wszystko );


      if czy_serwer_g then
        begin

          if not IdUDPServer1.Active then
            begin

              IdUDPServer1.DefaultPort := Serwer_Port_SpinEdit.Value;

              IdUDPServer1.Bindings.Clear();

              zt_id_socket_handle := IdUDPServer1.Bindings.Add();
              zt_id_socket_handle.IP := '0.0.0.0';
              zt_id_socket_handle.Port := Serwer_Port_SpinEdit.Value;


              IdUDPServer1.Active := true;

            end;
          //---//if not IdUDPServer1.Active then


          udp_data_czas_sprawdzanie_po³¹czeñ_ostatnie_g := Now();

          Serwer_Wysy³a_Timer.Enabled := true;


          Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__rozpocznij_c, -99, '' );


          Wspó³czynniki_Gry_Informacja_Wyœlij();


          //for i := 0 to Length( prymitywy_lista_t ) - 1 do
          //  Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__odbierz__prymitywy_definicja_c, -99, IntToStr( i )  ); // Klient szybciej rozpoczyna grê ni¿ odbierze wszystkie dane.


          //Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__l¹d__definicja_c, -99, '' ); // Klient szybciej rozpoczyna grê ni¿ odbierze wszystkie dane.

          Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gracz_lista_odœwie¿_c, -99, '' );

        end;
      //---//if czy_serwer_g then


      Gracze_Lista_Odœwie¿();

      // Odœwie¿anie w tym miejscu nie pokazuje aktualnego peer_port_udp__kd.

    end;
  //---//if   ( czy_gra_lokalna_g ) (...)


  // Gra lokalna.

  Gra_Rozpocznij_BitBtn.Enabled := false;
  Gra_Zakoñcz_BitBtn.Enabled := true;

  Gracz_Gotowoœæ_Tak_BitBtn.Enabled := false;
  Gracz_Gotowoœæ_Nie_BitBtn.Enabled := false;

  Interfejs_Aktywnoœæ_Ustaw__Grupa_Komponentów( Statki_Zaprezentuj_GroupBox, false );

  Interfejs_Aktywnoœæ_Ustaw__SI( false );

  Elementy_Gry_Zwolnij();
  Elementy_Gry_Przygotuj();

  Kamera_Na_Statek_Gracza_Ustaw();

  Interfejs_Aktywnoœæ_Ustaw__Schemat_Samolot_Zmieñ( true );

end;//---//Gra_Rozpocznij_BitBtnClick().

//Gra_Wspó³czynnik_Prêdkoœci_SpinEditChange().
procedure TStatki_Form.Gra_Wspó³czynnik_Prêdkoœci_SpinEditChange( Sender: TObject );
var
  ztr,
  gra_wspó³czynnik_prêdkoœci_l
    : real;
begin

  ztr := Gra_Wspó³czynnik_Prêdkoœci_SpinEdit.Value / 100;

  if ztr <= 0 then
    ztr := 1;

  gra_wspó³czynnik_prêdkoœci_l := ztr;

  if not czy_pauza_g then // Je¿eli zmienia siê Gra_GLCadencer.TimeMultiplier podczas pauzy to po wy³¹czeniu pauzy nastêpuje skok w przeliczaniu.
    Gra_GLCadencer.TimeMultiplier := ztr; // 0 - zatrzymany, (0..1) - spowalnia, 1 - prêdkoœæ normalna gry, 1 > - przyœpiesza.

  Gra_Wspó³czynnik_Prêdkoœci_Label.Caption := FloatToStr( ztr );


  if   ( Sender = nil )
    or (
             ( Sender <> nil )
         and ( TComponent(Sender).Name <> Zmieniaj_Automatycznie_GroupBox.Name ) // Je¿eli zmiana interwa³ów zegarów wywo³ana zosta³a poprzez zmianê szybkoœci automatycznych zmian intensywnoœci to nie wyœwietla informacji.
       ) then
    Informacja_Dodatkowa_Dodaj( Gra_Wspó³czynnik_Prêdkoœci_Etykieta_Label.Caption + ' ' + Gra_Wspó³czynnik_Prêdkoœci_Label.Caption );


  if gra_wspó³czynnik_prêdkoœci_l <> 0 then
    begin

      radar_zegar_pozorny_r.oczekiwanie_milisekundy := Round( 1000 / gra_wspó³czynnik_prêdkoœci_l );

      Zmieniaj_Automatycznie__Mg³a_GLAsyncTimer.Interval := Round( Zmieniaj_Automatycznie__Mg³a__Szybkoœæ_SpinEdit.Value / gra_wspó³czynnik_prêdkoœci_l );
      Zmieniaj_Automatycznie__Morze_Wzburzenie_GLAsyncTimer.Interval := Round( Zmieniaj_Automatycznie__Morze_Wzburzenie__Szybkoœæ_SpinEdit.Value / gra_wspó³czynnik_prêdkoœci_l );
      Zmieniaj_Automatycznie__Noc_GLAsyncTimer.Interval := Round( Zmieniaj_Automatycznie__Noc__Szybkoœæ_SpinEdit.Value / gra_wspó³czynnik_prêdkoœci_l );


      if Zmieniaj_Automatycznie__Mg³a_GLAsyncTimer.Interval < 0 then
        Zmieniaj_Automatycznie__Mg³a_GLAsyncTimer.Interval := 1000;

      if Zmieniaj_Automatycznie__Morze_Wzburzenie_GLAsyncTimer.Interval < 0 then
        Zmieniaj_Automatycznie__Morze_Wzburzenie_GLAsyncTimer.Interval := 1000;

      if Zmieniaj_Automatycznie__Noc_GLAsyncTimer.Interval < 0 then
        Zmieniaj_Automatycznie__Noc_GLAsyncTimer.Interval := 1000;

    end;
  //---//if gra_wspó³czynnik_prêdkoœci_l <> 0 then


  if czy_serwer_g then
    if   ( Sender = nil )
      or (
               ( Sender <> nil )
           and ( TComponent(Sender).Name <> Zmieniaj_Automatycznie_GroupBox.Name ) // Je¿eli zmiana interwa³ów zegarów wywo³ana zosta³a poprzez zmianê szybkoœci automatycznych zmian intensywnoœci to nie wyœwietla informacji.
         ) then
      Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__gra__wspó³czynnik_prêdkoœci_c, -99, IntToStr( Gra_Wspó³czynnik_Prêdkoœci_SpinEdit.Value )  );

end;//---//Gra_Wspó³czynnik_Prêdkoœci_SpinEditChange().

//Gra_Wspó³czynnik_Trudnoœci_SpinEditChange().
procedure TStatki_Form.Gra_Wspó³czynnik_Trudnoœci_SpinEditChange( Sender: TObject );
begin

  if Gra_Wspó³czynnik_Trudnoœci_SpinEdit.Value > Gra_Wspó³czynnik_Trudnoœci_SpinEdit.MaxValue then
    Gra_Wspó³czynnik_Trudnoœci_SpinEdit.Value := Gra_Wspó³czynnik_Trudnoœci_SpinEdit.MaxValue
  else//if Gra_Wspó³czynnik_Trudnoœci_SpinEdit.Value > Gra_Wspó³czynnik_Trudnoœci_SpinEdit.MaxValue then
  if Gra_Wspó³czynnik_Trudnoœci_SpinEdit.Value < Gra_Wspó³czynnik_Trudnoœci_SpinEdit.MinValue then
    Gra_Wspó³czynnik_Trudnoœci_SpinEdit.Value := Gra_Wspó³czynnik_Trudnoœci_SpinEdit.MinValue;

  gra_wspó³czynnik_trudnoœci_g := Gra_Wspó³czynnik_Trudnoœci_SpinEdit.Value;

  Gra_Wspó³czynnik_Trudnoœci_Label.Caption := '- ' + FloatToStr( gra_wspó³czynnik_trudnoœci_g );


  if czy_serwer_g then
    Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__gra__wspó³czynnik_trudnoœci_c, -99, IntToStr( gra_wspó³czynnik_trudnoœci_g )  );

end;//---//Gra_Wspó³czynnik_Trudnoœci_SpinEditChange().

//Gra_Zakoñcz_BitBtnClick().
procedure TStatki_Form.Gra_Zakoñcz_BitBtnClick( Sender: TObject );
var
  i : integer;
begin

  Serwer_Wysy³a_Timer.Enabled := false;


  if   ( czy_serwer_g )
    or ( czy_gra_lokalna_g ) then
    begin

      for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
        TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).w_grze__kd := false;


      Interfejs_Aktywnoœæ_Ustaw__Schemat_Samolot_Zmieñ( false );

      Gra_Rozpocznij_BitBtn.Enabled := true;
      Gra_Zakoñcz_BitBtn.Enabled := false;

      Gracz_Gotowoœæ_BitBtnClick( Gracz_Gotowoœæ_Nie_BitBtn );

      //Gracz_Gotowoœæ_Tak_BitBtn.Enabled := true;
      //Gracz_Gotowoœæ_Nie_BitBtn.Enabled := true;

      Interfejs_Aktywnoœæ_Ustaw__Grupa_Komponentów( Statki_Zaprezentuj_GroupBox, true );

      Interfejs_Aktywnoœæ_Ustaw__SI( true );


      if czy_serwer_g then
        begin

          Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__zakoñcz_c, -99, '' );
          Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__statystyki_wyœlij_c, -99, '' );

          Sleep( Klient_IdTCP_Czyta_Timer.Interval * 3 ); // Tak jest ustawiony zegar czytania klientów. //???

        end;
      //---//if czy_serwer_g then


      Gra_Statystyki_Wypisz( Statystyki_W_Logu_Wypisz_CheckBox.Checked );

    end;
  //---//if   ( czy_serwer_g ) (...)


  if IdUDPServer1.Active then
    IdUDPServer1.Active := false;

  IdUDPServer1.Bindings.Clear(); //???

  udp_klienci_lista_g.Usuñ_Wszystkich();


  Elementy_Gry_Zwolnij( false );

  L¹d__Utwórz( L¹d_ComboBox.ItemIndex ); // Wczytuje pozycje pocz¹tkowe statków.

  Statek__Utwórz_BitBtnClick( Sender );

  Kamera_Na_Statek_Gracza_Ustaw();


  SI__P³ywa__Samolot_Gracza_CheckBox.Enabled := true;
  SI__Samolot_Gracza__L¹duj_Na_Lotniskowcu_Gracza_Button.Enabled := SI__P³ywa__Samolot_Gracza_CheckBox.Enabled;

end;//---//Gra_Zakoñcz_BitBtnClick().

//Gracz_Gotowoœæ_BitBtnClick().
procedure TStatki_Form.Gracz_Gotowoœæ_BitBtnClick( Sender: TObject );
var
  i : integer;
  zt_tcp_klient_dane : TTCP_Klient_Dane;
begin

  if    ( Sender <> nil )
    and ( TComponent(Sender).Name = Gracz_Gotowoœæ_Nie_BitBtn.Name ) then
    begin

      Gracz_Gotowoœæ_Nie_BitBtn.Enabled := false;
      Gracz_Gotowoœæ_Tak_BitBtn.Enabled := true;

      Gracz_Grupa_SpinEdit.Enabled := true;
      Gracz_Nazwa_Edit.Enabled := true;
      Interfejs_Aktywnoœæ_Ustaw__Grupa_Komponentów( Statek_GroupBox, true );


      if czy_klient_g then
        Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gracz_gotowoœæ_c, -99, 'Nie' )
      else//if czy_klient_g then
        begin

          // Serwer.

          Interfejs_Aktywnoœæ_Ustaw__SI( true );
          Interfejs_Aktywnoœæ_Ustaw__Grupa_Komponentów( L¹d_GroupBox, true );
          Interfejs_Aktywnoœæ_Ustaw__Grupa_Komponentów( Statki_Pozycje_Pocz¹tkowe_GroupBox, true );


          zt_tcp_klient_dane := tcp_klienci_lista_g.ZnajdŸ_Peer_Port( serwer_peer_port_c );

          if zt_tcp_klient_dane <> nil then
            zt_tcp_klient_dane.gotowy__kd := false;

          Gracze_Lista_Odœwie¿();

          Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gracz_lista_odœwie¿_c, -99, '' );

        end;
      //---//if czy_klient_g then

    end
  else//if    ( Sender <> nil ) (...)
    begin

      if Trim( Gracz_Nazwa_Edit.Text ) = '' then
        begin

          Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nazwa_gracza_nie_mo¿e_byæ_pusta, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION );
          Exit;

        end;
      //---//if Trim( Gracz_Nazwa_Edit.Text ) = '' then

      if   ( Statek_ComboBox.ItemIndex < 0 )
        or (  Trim( Statek_ComboBox.Text ) = ''  ) then
        begin

          Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nale¿y_wybraæ_statek, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION );
          Exit;

        end;
      //---//if   ( Statek_ComboBox.ItemIndex < 0 ) (...)


      if czy_klient_g then
        Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gracz_gotowoœæ_c, -99, 'Tak' )
      else//if czy_klient_g then
        begin

          // Serwer.

          if not tcp_klienci_lista_g.Nazwa_Niepowtarzalna( serwer_peer_port_c, Gracz_Nazwa_Edit.Text ) then
            begin

              Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nazwa_gracza_powinna_byæ_niepowtarzalna, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION );
              Exit;

            end;
          //---//if not tcp_klienci_lista_g.Nazwa_Niepowtarzalna( serwer_peer_port_c, Gracz_Nazwa_Edit.Text ) then


          Gracz_Gotowoœæ_Nie_BitBtn.Enabled := true;
          Gracz_Gotowoœæ_Tak_BitBtn.Enabled := false;

          Gracz_Grupa_SpinEdit.Enabled := false;
          Gracz_Nazwa_Edit.Enabled := false;
          Interfejs_Aktywnoœæ_Ustaw__SI( false );
          Interfejs_Aktywnoœæ_Ustaw__Grupa_Komponentów( Statek_GroupBox, false );
          Interfejs_Aktywnoœæ_Ustaw__Grupa_Komponentów( L¹d_GroupBox, false );
          Interfejs_Aktywnoœæ_Ustaw__Grupa_Komponentów( Statki_Pozycje_Pocz¹tkowe_GroupBox, false );


          zt_tcp_klient_dane := tcp_klienci_lista_g.ZnajdŸ_Peer_Port( serwer_peer_port_c );

          if zt_tcp_klient_dane <> nil then
            begin

              zt_tcp_klient_dane.id_grupa__kd := Gracz_Grupa_SpinEdit.Value;
              zt_tcp_klient_dane.id_statek_schemat__kd := Statek_ComboBox.ItemIndex;

              if Statek__Samolot_ComboBox.Color = clWindow then
                zt_tcp_klient_dane.id_statek__samolot_schemat__kd := Statek__Samolot_Odczytaj_Schemat_Indeks( Statek__Samolot_ComboBox.Items[ Statek__Samolot_ComboBox.ItemIndex ] )
              else//if Statek__Samolot_ComboBox.Color = clWindow then
                zt_tcp_klient_dane.id_statek__samolot_schemat__kd := -1; // Statek nie jest lotniskowcem.

              zt_tcp_klient_dane.gotowy__kd := true;
              zt_tcp_klient_dane.nazwa__kd := Gracz_Nazwa_Edit.Text;

            end;
          //---//if zt_tcp_klient_dane <> nil then


          for i := tcp_klienci_lista_g.klienci_lista_list.Count - 1 downto 0 do
            if    ( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd <> serwer_peer_port_c )
              and ( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd > si_peer_port_c ) then
              TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).dane_wys³ane__kd := false;


          Gracze_Lista_Odœwie¿();

          Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gracz_lista_odœwie¿_c, -99, '' );

          Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__l¹d__definicja_c, -99, '' ); // Klient szybciej rozpoczyna grê ni¿ odbierze wszystkie dane.

          Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__dane_wys³ane_c, -99, '' );

        end;
      //---//if czy_klient_g then

    end;
  //---//if    ( Sender <> nil ) (...)

end;//---//Gracz_Gotowoœæ_BitBtnClick().

//Gracze_Lista_Odœwie¿_BitBtnClick().
procedure TStatki_Form.Gracze_Lista_Odœwie¿_BitBtnClick( Sender: TObject );
begin

  if   ( czy_serwer_g )
    or ( czy_gra_lokalna_g ) then
    Gracze_Lista_Odœwie¿()
  else//if   ( czy_serwer_g ) (...)
  if czy_klient_g then
    Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gracz_lista_odœwie¿_c, -99, '' );

end;//---//Gracze_Lista_Odœwie¿_BitBtnClick().

//Gracze_Lista_Roz³¹cz_Gracza_BitBtnClick().
procedure TStatki_Form.Gracze_Lista_Roz³¹cz_Gracza_BitBtnClick( Sender: TObject );
var
  zti : integer;
  zt_tcp_klient_dane : TTCP_Klient_Dane;
begin

  if    ( not czy_gra_lokalna_g )
    and ( not czy_serwer_g ) then
    Exit;


  if Gracze_Lista_StringGrid.RowCount <= 1 then
    begin

      Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nale¿y_wskazaæ_gracza, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION );
      Exit;

    end;
  //---//if Gracze_Lista_StringGrid.RowCount <= 1 then

  if Gracze_Lista_StringGrid.ColCount <= 3 then
    begin

      Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_lista_graczy, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION );
      Exit;

    end;
  //---//if Gracze_Lista_StringGrid.ColCount <= 3 then


  try
    zti := StrToInt( Gracze_Lista_StringGrid.Cells[ 1, Gracze_Lista_StringGrid.Row ] );
  except
    Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_odczytaæ_identyfikatora_gracza, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION );
    Exit;
  end;
  //---//try

  if zti = Gracz_Identyfikator() then
    begin

      Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_mo¿na_roz³¹czyæ_samego_siebie, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION );
      Exit;

    end;
  //---//if zti = Gracz_Identyfikator() then


  zt_tcp_klient_dane := tcp_klienci_lista_g.ZnajdŸ_Identyfikator( zti );

  if zt_tcp_klient_dane = nil then
    Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_odnaleŸæ_gracza_o_zadanym_identyfikatorze, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION )
  else//if zt_tcp_klient_dane = nil then
    begin

      if zt_tcp_klient_dane.peer_port_tcp__kd = serwer_peer_port_c then
        begin

          Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_mo¿na_roz³¹czyæ_serwera, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION );
          Exit;

        end;
      //---//if zt_tcp_klient_dane.peer_port_tcp__kd = serwer_peer_port_c then


      if zt_tcp_klient_dane.peer_port_tcp__kd = si_peer_port_c then
        begin

          // Usuwa SI z listy.

          tcp_klienci_lista_g.Usuñ_Identyfikator( zt_tcp_klient_dane.identyfikator__kd );

          Gracze_Lista_Odœwie¿();

          Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gracz_lista_odœwie¿_c, -99, '' );

        end
      else//if zt_tcp_klient_dane.peer_port_tcp__kd = si_peer_port_c then
        Gracze_Lista_Roz³¹cz( zt_tcp_klient_dane.peer_port_tcp__kd );

    end;
  //---//if zt_tcp_klient_dane = nil then

end;//---//Gracze_Lista_Roz³¹cz_Gracza_BitBtnClick().

//Gracze_Lista_StringGridClick().
procedure TStatki_Form.Gracze_Lista_StringGridClick( Sender: TObject );
begin

  Gracze_Lista_StringGrid.Invalidate();

end;//---//Gracze_Lista_StringGridClick().

//Gracze_Lista_StringGridFixedCellClick().
procedure TStatki_Form.Gracze_Lista_StringGridFixedCellClick( Sender: TObject; ACol, ARow: Integer );
begin

  Gracze_Lista_StringGrid.kolumna_sortowania_indeks := ACol;

  Gracze_Lista_Odœwie¿();

  Gracze_Lista_StringGrid.Invalidate();

end;//---//Gracze_Lista_StringGridFixedCellClick().

//Gracze_Lista_StringGridSelectCell().
procedure TStatki_Form.Gracze_Lista_StringGridSelectCell( Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean );
begin

  Gracze_Lista_GroupBox.Caption := 'Gracze lista ' + IntToStr( ARow ) + ' / ' + IntToStr( Gracze_Lista_StringGrid.RowCount - 1 );

end;//---//Gracze_Lista_StringGridSelectCell().

//Gracze_Lista_StringGridDrawCell().
procedure TStatki_Form.Gracze_Lista_StringGridDrawCell( Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState );
begin

  // Kolor wskazanego wiersza.
  if    ( ARow = TStringGrid(Sender).Row )
    and ( ACol > 0 ) then
    begin

      TStringGrid(Sender).Canvas.Brush.Color := kolor__niebieski_jasny_bardzo_c;
      TStringGrid(Sender).Canvas.FillRect( Rect );
      TStringGrid(Sender).Canvas.TextOut(   Rect.Left + 2, Rect.Top + Round( Rect.Height * 0.5 ) - Round(  TStringGrid(Sender).Canvas.TextHeight( 'I' ) * 0.5  ), TStringGrid(Sender).Cells[ ACol, ARow ]   );

    end;
  //---//if    ( ARow = TStringGrid(Sender).Row ) (...)


  // Gotowy.
  if    ( ACol in [ 6 ] ) // Gotowy.
    and ( ARow > 0 )
    and (  Trim( TStringGrid(Sender).Cells[ 6, ARow ] ) <> ''  ) then
    begin

      if TStringGrid(Sender).Cells[ 6, ARow ] = t³umaczenie_komunikaty_r.s³owo__tak then
        TStringGrid(Sender).Canvas.Brush.Color := clMoneyGreen
      else//if TStringGrid(Sender).Cells[ 6, ARow ] = IntToStr( Gracz_Grupa_SpinEdit.Value ) then
         TStringGrid(Sender).Canvas.Brush.Color := clSilver;

      TStringGrid(Sender).Canvas.FillRect( Rect );
      TStringGrid(Sender).Canvas.TextOut(   Rect.Left + 2, Rect.Top + Round( Rect.Height * 0.5 ) - Round(  TStringGrid(Sender).Canvas.TextHeight( 'I' ) * 0.5  ), TStringGrid(Sender).Cells[ ACol, ARow ]   );

    end;
  //---//if    ( ACol in [ 6 ] ) (...)


  // W grze.
  if    ( ACol in [ 7 ] ) // W grze.
    and ( ARow > 0 )
    and (  Trim( TStringGrid(Sender).Cells[ 7, ARow ] ) <> ''  ) then
    begin

      if TStringGrid(Sender).Cells[ 7, ARow ] = t³umaczenie_komunikaty_r.s³owo__tak then
        TStringGrid(Sender).Canvas.Brush.Color := clMoneyGreen
      else//if TStringGrid(Sender).Cells[ 7, ARow ] = IntToStr( Gracz_Grupa_SpinEdit.Value ) then
         TStringGrid(Sender).Canvas.Brush.Color := clSilver;

      TStringGrid(Sender).Canvas.FillRect( Rect );
      TStringGrid(Sender).Canvas.TextOut(   Rect.Left + 2, Rect.Top + Round( Rect.Height * 0.5 ) - Round(  TStringGrid(Sender).Canvas.TextHeight( 'I' ) * 0.5  ), TStringGrid(Sender).Cells[ ACol, ARow ]   );

    end;
  //---//if    ( ACol in [ 7 ] ) (...)


  // Dane wys³ane.
  if    ( ACol in [ 10 ] ) // Dane wys³ane.
    and ( ARow > 0 )
    and (  Trim( TStringGrid(Sender).Cells[ 10, ARow ] ) <> ''  ) then
    begin

      if TStringGrid(Sender).Cells[ 10, ARow ] = t³umaczenie_komunikaty_r.s³owo__tak then
        TStringGrid(Sender).Canvas.Brush.Color := clMoneyGreen
      else//if TStringGrid(Sender).Cells[ 10, ARow ] = IntToStr( Gracz_Grupa_SpinEdit.Value ) then
         TStringGrid(Sender).Canvas.Brush.Color := clSilver;

      TStringGrid(Sender).Canvas.FillRect( Rect );
      TStringGrid(Sender).Canvas.TextOut(   Rect.Left + 2, Rect.Top + Round( Rect.Height * 0.5 ) - Round(  TStringGrid(Sender).Canvas.TextHeight( 'I' ) * 0.5  ), TStringGrid(Sender).Cells[ ACol, ARow ]   );

    end;
  //---//if    ( ACol in [ 10 ] ) (...)


  // Kolor kolumny sortowania.
  if    ( Gracze_Lista_StringGrid.kolumna_sortowania_indeks <> 0 )
    and ( ACol = Gracze_Lista_StringGrid.kolumna_sortowania_indeks ) then
    begin

      TStringGrid(Sender).Canvas.Brush.Color := kolor__niebieski_jasny_bardzo_c;
      TStringGrid(Sender).Canvas.FillRect( Rect );
      //TStringGrid(Sender).Canvas.TextOut( Rect.Left + 2, Rect.Top + 2, TStringGrid(Sender).Cells[ ACol, ARow ] );
      TStringGrid(Sender).Canvas.TextOut(   Rect.Left + 2, Rect.Top + Round( Rect.Height * 0.5 ) - Round(  TStringGrid(Sender).Canvas.TextHeight( 'I' ) * 0.5  ), TStringGrid(Sender).Cells[ ACol, ARow ]   );

    end;
  //---//if    ( Gracze_Lista_StringGrid.kolumna_sortowania_indeks <> 0 ) (...)

end;//---//Gracze_Lista_StringGridDrawCell().

//Group_Box_PopupMenuPopup().
procedure TStatki_Form.Group_Box_PopupMenuPopup( Sender: TObject );
begin

  if   ( Sender = nil )
    or ( Group_Box_PopupMenu.PopupComponent = nil ) then
    Exit;


  Group_Box_Popup_Menu__Poszerz_Odstêp_MenuItem.Visible :=
        ( TControl(Group_Box_PopupMenu.PopupComponent).Name = Pokój_Rozmów_GroupBox.Name )
    and ( Pokój_Rozmów__Na_Ekranie_CheckBox.Checked );

  Group_Box_Popup_Menu__Poszerz_MenuItem.Visible := Group_Box_Popup_Menu__Poszerz_Odstêp_MenuItem.Visible;
  Group_Box_Popup_Menu__ZwêŸ_MenuItem.Visible := Group_Box_Popup_Menu__Poszerz_Odstêp_MenuItem.Visible;


  //Group_Box_Popup_Menu__Pokój_Rozmów__Wyœlij_Do__Ustaw_Odstêp_MenuItem.Visible := TControl(Group_Box_PopupMenu.PopupComponent).Name = Gracze_Lista_GroupBox.Name; // Samo siê ukrywa i pojawia.

  //Group_Box_Popup_Menu__Pokój_Rozmów__Wyœlij_Do__Ustaw_MenuItem.Visible := Group_Box_Popup_Menu__Pokój_Rozmów__Wyœlij_Do__Ustaw_Odstêp_MenuItem.Visible;

  Group_Box_Popup_Menu__Pokój_Rozmów__Wyczyœæ_MenuItem.Visible := TControl(Group_Box_PopupMenu.PopupComponent).Name = Pokój_Rozmów_GroupBox.Name;
  Group_Box_Popup_Menu__Pokój_Rozmów__Wyœlij_Do__Ustaw_MenuItem.Visible := TControl(Group_Box_PopupMenu.PopupComponent).Name = Gracze_Lista_GroupBox.Name;

end;//---//Group_Box_PopupMenuPopup().

//Group_Box_Popup_Menu_MenuItemClick().
procedure TStatki_Form.Group_Box_Popup_Menu_MenuItemClick( Sender: TObject );
var
  ztb : boolean;
  i,
  zti
    : integer;
const
  wysokoœæ_c_l : integer = 50;
  wysokoœæ_bardziej_c_l : integer = 100;
begin

  if   ( Sender = nil )
    or ( Group_Box_PopupMenu.PopupComponent = nil ) then
    Exit;


  if TComponent(Sender).Name = Group_Box_Popup_Menu__Wielkoœæ_Domyœlna_MenuItem.Name then
    begin

      if   ( TControl(Group_Box_PopupMenu.PopupComponent).Name = L¹d_GroupBox.Name )
        or ( TControl(Group_Box_PopupMenu.PopupComponent).Name = Statki_Pozycje_Pocz¹tkowe_GroupBox.Name )
        or ( TControl(Group_Box_PopupMenu.PopupComponent).Name = Statek_GroupBox.Name ) then
        TControl(Group_Box_PopupMenu.PopupComponent).Height := 190
      else//if   ( TControl(Group_Box_PopupMenu.PopupComponent).Name = L¹d_GroupBox.Name ) (...)
      if   ( TControl(Group_Box_PopupMenu.PopupComponent).Name = Gracze_Lista_GroupBox.Name )
        or ( TControl(Group_Box_PopupMenu.PopupComponent).Name = Pokój_Rozmów_GroupBox.Name ) then
        TControl(Group_Box_PopupMenu.PopupComponent).Height := 200
      else//if   ( TControl(Group_Box_PopupMenu.PopupComponent).Name = Gracze_Lista_GroupBox.Name ) (...)
      if TControl(Group_Box_PopupMenu.PopupComponent).Name = SI_GroupBox.Name then
        TControl(Group_Box_PopupMenu.PopupComponent).Height := 305;

    end
  else//if TComponent(Sender).Name = Group_Box_Popup_Menu__Wielkoœæ_Domyœlna_MenuItem.Name then
  if TComponent(Sender).Name = Group_Box_Popup_Menu__Powiêksz_MenuItem.Name then
    begin

      TControl(Group_Box_PopupMenu.PopupComponent).Height := TControl(Group_Box_PopupMenu.PopupComponent).Height + wysokoœæ_c_l;

    end
  else//if TComponent(Sender).Name = Group_Box_Popup_Menu__Powiêksz_MenuItem.Name then
  if TComponent(Sender).Name = Group_Box_Popup_Menu__Powiêksz_Bardziej_MenuItem.Name then
    begin

      TControl(Group_Box_PopupMenu.PopupComponent).Height := TControl(Group_Box_PopupMenu.PopupComponent).Height + wysokoœæ_bardziej_c_l;

    end
  else//if TComponent(Sender).Name = Group_Box_Popup_Menu__Powiêksz_Bardziej_MenuItem.Name then
  if TComponent(Sender).Name = Group_Box_Popup_Menu__Pomniejsz_MenuItem.Name then
    begin

      if TControl(Group_Box_PopupMenu.PopupComponent).Height > wysokoœæ_c_l then
        TControl(Group_Box_PopupMenu.PopupComponent).Height := TControl(Group_Box_PopupMenu.PopupComponent).Height - wysokoœæ_c_l;

    end
  else//if TComponent(Sender).Name = Group_Box_Popup_Menu__Pomniejsz_MenuItem.Name then
  if TComponent(Sender).Name = Group_Box_Popup_Menu__Pomniejsz_Bardziej_MenuItem.Name then
    begin

      if TControl(Group_Box_PopupMenu.PopupComponent).Height > wysokoœæ_bardziej_c_l then
        TControl(Group_Box_PopupMenu.PopupComponent).Height := TControl(Group_Box_PopupMenu.PopupComponent).Height - wysokoœæ_bardziej_c_l;

    end
  else//if TComponent(Sender).Name = Group_Box_Popup_Menu__Pomniejsz_Bardziej_MenuItem.Name then
  if TComponent(Sender).Name = Group_Box_Popup_Menu__Poszerz_MenuItem.Name then
    begin

      TControl(Group_Box_PopupMenu.PopupComponent).Width := TControl(Group_Box_PopupMenu.PopupComponent).Width + wysokoœæ_bardziej_c_l;

    end
  else//if TComponent(Sender).Name = Group_Box_Popup_Menu__Poszerz_MenuItem.Name then
  if TComponent(Sender).Name = Group_Box_Popup_Menu__ZwêŸ_MenuItem.Name then
    begin

      if TControl(Group_Box_PopupMenu.PopupComponent).Width > wysokoœæ_bardziej_c_l * 2 then
        TControl(Group_Box_PopupMenu.PopupComponent).Width := TControl(Group_Box_PopupMenu.PopupComponent).Width - wysokoœæ_bardziej_c_l;

    end
  else//if TComponent(Sender).Name = Group_Box_Popup_Menu__ZwêŸ_MenuItem.Name then
  if TComponent(Sender).Name = Group_Box_Popup_Menu__Pokój_Rozmów__Wyczyœæ_MenuItem.Name then
    begin

      Pokój_Rozmów_Memo.Clear();

    end
  else//if TComponent(Sender).Name = Group_Box_Popup_Menu__Pokój_Rozmów__Wyczyœæ_MenuItem.Name then
  if TComponent(Sender).Name = Group_Box_Popup_Menu__Pokój_Rozmów__Wyœlij_Do__Ustaw_MenuItem.Name then
    begin

      try
        zti := StrToInt( Gracze_Lista_StringGrid.Cells[ 1, Gracze_Lista_StringGrid.Row ] );
        ztb := true;
      except
        ztb := false;
        Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.ItemIndex := -1;
        Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_odczytaæ_identyfikatora_gracza );
      end;
      //---//try

      if    ( ztb )
        and ( zti = Gracz_Identyfikator() ) then
        begin

          ztb := false;
          Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.ItemIndex := -1;
          Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__wskazano_samego_siebie );

        end;
      //---//if    ( ztb ) (...)

      if ztb then
        begin

          ztb := false;

          for i := 0 to Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Items.Count - 1 do
            if    ( TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj(Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Items.Objects[ i ]).id_odbiorca = zti )
              and (  TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj(Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Items.Objects[ i ]).odbiorca_rodzaj = pror_Gracz_Jeden ) then
              begin

                if    ( i >= 0 )
                  and ( i <= Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Items.Count - 1 ) then
                  begin

                    Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.ItemIndex := i;
                    ztb := true;

                  end;
                //---//if    ( i >= 0 ) (...)

                Break;

              end;
            //---//if    ( TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj(Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Items.Objects[ i ]).id_odbiorca = zti ) (...)


          if not ztb then
            begin

              Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.ItemIndex := -1;
              Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_zlokalizowaæ_gracza );

            end;
          //---//if not ztb then

        end;
      //---//if ztb then

    end;
  //---//if TComponent(Sender).Name = Group_Box_Popup_Menu__Pokój_Rozmów__Wyœlij_Do__Ustaw_MenuItem.Name then


  if TControl(Group_Box_PopupMenu.PopupComponent).Height < wysokoœæ_c_l then
    TControl(Group_Box_PopupMenu.PopupComponent).Height := wysokoœæ_c_l;


  if TControl(Group_Box_PopupMenu.PopupComponent).Name = Pokój_Rozmów_GroupBox.Name then
    FormResize( Sender );

end;//---//Group_Box_Popup_Menu_MenuItemClick().

//Gwiazdy_Migotanie_CheckBoxClick().
procedure TStatki_Form.Gwiazdy_Migotanie_CheckBoxClick( Sender: TObject );
begin

  if Gwiazdy_Migotanie_CheckBox.Checked then
    Gra_GLSkyDome.Options := Gra_GLSkyDome.Options + [ sdoTwinkle ]
  else//if Gwiazdy_Migotanie_CheckBox.Checked then
    Gra_GLSkyDome.Options := Gra_GLSkyDome.Options - [ sdoTwinkle ];

end;//---//Gwiazdy_Migotanie_CheckBoxClick().

//Informacje_Dodatkowe_GLAsyncTimerTimer().
procedure TStatki_Form.Informacje_Dodatkowe_GLAsyncTimerTimer( Sender: TObject );
var
  i : integer;
begin

  // Sender = nil - wymuszenie odœwie¿enia napisów.

  if    ( Sender <> nil )
    and (  MilliSecondsBetween( Now(), informacje_dodatkowe_zegar_pozorny_r.ostatnie_wywo³anie ) < informacje_dodatkowe_zegar_pozorny_r.oczekiwanie_milisekundy  ) then
    Exit;


  if   ( informacje_dodatkowe_list = nil )
    or (  not Assigned( informacje_dodatkowe_list )  ) then
    Exit;


  Pauza_Podczas_Funkcje();


  for i := informacje_dodatkowe_list.Count - 1 downto 0 do
    begin

      if SecondsBetween( Now(), TInformacje_Dodatkowe(informacje_dodatkowe_list[ i ]).utworzenie_data_czas ) > TInformacje_Dodatkowe(informacje_dodatkowe_list[ i ]).wyœwietlanie_czas_sekundy then
        Informacja_Dodatkowa_Zwolnij_Jeden( informacje_dodatkowe_list, i );

    end;
  //---//for i := informacje_dodatkowe_list.Count - 1 downto 0 do


  Informacje_Dodatkowe_GLHUDText.Text := '';


  for i := 0 to informacje_dodatkowe_list.Count - 1 do
    begin

      Informacje_Dodatkowe_GLHUDText.Text := Informacje_Dodatkowe_GLHUDText.Text + #13 + #10 +
        TInformacje_Dodatkowe(informacje_dodatkowe_list[ i ]).napis;

    end;
  //---//for i := 0 to informacje_dodatkowe_list.Count - 1 do


  informacje_dodatkowe_zegar_pozorny_r.ostatnie_wywo³anie := Now();

end;//---//Informacje_Dodatkowe_GLAsyncTimerTimer().

//Kamera_Szybkoœæ_Ruchu_EditChange().
procedure TStatki_Form.Kamera_Szybkoœæ_Ruchu_EditChange( Sender: TObject );
begin

  // Podstawowy SpinEdit pozwala tylko na liczby ca³kowite a nie chcê dodawaæ komponentów, których mo¿e nie byæ w podstawowych wersjach IDE.

  try
    kamera_szybkoœæ_ruchu_g := String_To__Float( Kamera_Szybkoœæ_Ruchu_Edit.Text );
  except
  end;
  //---//try


  if kamera_szybkoœæ_ruchu_g < 0 then
    begin

      kamera_szybkoœæ_ruchu_g := 0.1;
      Kamera_Szybkoœæ_Ruchu_Edit.Text := Trim(  FormatFloat( '### ### ##0.00#######', kamera_szybkoœæ_ruchu_g )  );

    end;
  //---//if kamera_szybkoœæ_ruchu_g < 0 then


  Kamera_Szybkoœæ_Ruchu_Label.Caption := Trim(  FormatFloat( '### ### ##0.000000', kamera_szybkoœæ_ruchu_g )  );

end;//---//Kamera_Szybkoœæ_Ruchu_EditChange().

//Klawiatura_Konfiguracja__Konfiguracja_Numer_SpinEditKeyDown().
procedure TStatki_Form.Klawiatura_Konfiguracja__Konfiguracja_Numer_SpinEditKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
begin

  // Enter.
  if Key = 13 then
    begin

      if ssCtrl in Shift then
        Klawiatura_Konfiguracja__Zapisz_ButtonClick( Sender )
      else//if ssCtrl in Shift then
        Klawiatura_Konfiguracja__Wczytaj_ButtonClick( Sender );

      Key := 0;

    end;
  //---//if Key = 13 then

end;//---//Klawiatura_Konfiguracja__Konfiguracja_Numer_SpinEditKeyDown().

//Klawiatura_Konfiguracja__Domyœlna_ButtonClick().
procedure TStatki_Form.Klawiatura_Konfiguracja__Domyœlna_ButtonClick( Sender: TObject );

  //Funkcja xNx__FKlawisz_Plus_Alt_Ctrl_Shift_Zeruj() w Klawiatura_Konfiguracja__Domyœlna_ButtonClick().
  procedure xNx__FKlawisz_Plus_Alt_Ctrl_Shift_Zeruj( pointer_f : Pointer );
  var
    klawiatura_konfiguracja_r_w : ^TKlawiatura_Konfiguracja_r;
  begin

    Exit;

    klawiatura_konfiguracja_r_w := pointer_f;

    klawiatura_konfiguracja_r_w.plus_alt := false;
    klawiatura_konfiguracja_r_w.plus_ctrl := false;
    klawiatura_konfiguracja_r_w.plus_shift := false;

  end;//---Funkcja xNx__FKlawisz_Plus_Alt_Ctrl_Shift_Zeruj() w Klawiatura_Konfiguracja__Domyœlna_ButtonClick().

  //Funkcja Klawisz_Plus_Alt_Ctrl_Shift_Zeruj() w Klawiatura_Konfiguracja__Domyœlna_ButtonClick().
  procedure Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( out klawiatura_konfiguracja_r_f : TKlawiatura_Konfiguracja_r; const klawisz_f : Word; out indeks_f : integer; const polecenie__t³umaczenie_f : string; const shift_f : TShiftState = []; const czy_mysz_f : boolean = false );
  var
    polecenie__nazwa_l,
    polecenie__opis_l
      : string;

    rtti_field : TRttiField;
    rtti_type : TRttiType;
  begin

    polecenie__nazwa_l := '';
    polecenie__opis_l := '';

    rtti_type := TRTTIContext.Create.GetType(  System.TypeInfo( TT³umaczenie_Komunikaty_r )  );

    for rtti_field in rtti_type.GetFields do
      if rtti_field.GetValue( @t³umaczenie_komunikaty_r ).ToString = polecenie__t³umaczenie_f then
        begin

          polecenie__nazwa_l := rtti_field.Name;
          polecenie__opis_l := rtti_field.GetValue( @t³umaczenie_komunikaty_r ).ToString;

          Break;

        end;
      //---//if rtti_field.GetValue( @t³umaczenie_komunikaty_r ).ToString = polecenie__t³umaczenie_f then


    if Trim( polecenie__nazwa_l ) = '' then
      begin

        Log_Wypisz( t³umaczenie_komunikaty_r.komunikat__nie_odnaleziono_t³umaczenia_dla_konfiguracji_klawiatury + ': ' + polecenie__t³umaczenie_f + '.' );
        Exit;

      end;
    //---//if Trim( polecenie__nazwa_l ) = '' then


    inc( indeks_f );
    SetLength( klawiatura_konfiguracja_r_t, indeks_f + 1 );
    klawiatura_konfiguracja_r_f.klawisz := klawisz_f;
    klawiatura_konfiguracja_r_t[ indeks_f ] := @klawiatura_konfiguracja_r_f;
    klawiatura_konfiguracja_r_t[ indeks_f ].czy_mysz := czy_mysz_f;
    klawiatura_konfiguracja_r_t[ indeks_f ].polecenie__nazwa := polecenie__nazwa_l;

    if Trim( polecenie__opis_l ) <> '' then
      klawiatura_konfiguracja_r_t[ indeks_f ].polecenie__t³umaczenie := polecenie__opis_l
    else//if Trim( polecenie__opis_l ) <> '' then
      klawiatura_konfiguracja_r_t[ indeks_f ].polecenie__t³umaczenie := klawiatura_konfiguracja_r_t[ indeks_f ].polecenie__nazwa;

    klawiatura_konfiguracja_r_t[ indeks_f ].plus_alt := ssAlt in shift_f;
    klawiatura_konfiguracja_r_t[ indeks_f ].plus_ctrl := ssCtrl in shift_f;
    klawiatura_konfiguracja_r_t[ indeks_f ].plus_shift := ssShift in shift_f;
    TKlawisz_Konfiguracja.Create( Klawiatura_Konfiguracja_ScrollBox, klawiatura_konfiguracja_r_t[ indeks_f ], @t³umaczenie_komunikaty_r );

  end;//---Funkcja Klawisz_Plus_Alt_Ctrl_Shift_Zeruj() w Klawiatura_Konfiguracja__Domyœlna_ButtonClick().

var
  zti,
  przesuniêcie_w_pionie_kopia
    : integer;
  zt_cursor_kopia : TCursor;
begin//Klawiatura_Konfiguracja__Domyœlna_ButtonClick().

  zt_cursor_kopia := Screen.Cursor;
  Screen.Cursor := crHourGlass;


  przesuniêcie_w_pionie_kopia := Klawiatura_Konfiguracja_ScrollBox.VertScrollBar.Position;


  Klawiatura_Konfiguracja_ScrollBox.Visible := false;


  Klawisz_Konfiguracja_Zwolnij();

  SetLength( klawiatura_konfiguracja_r_t, 0 );
  zti := -1;

  //Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__, 0, '', zti ); // .

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__amunicja__zanurzenie_g³êbokoœæ_zadana__minus, 71, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____amunicja__zanurzenie_g³êbokoœæ_zadana__minus ); // G.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__amunicja__zanurzenie_g³êbokoœæ_zadana__plus, 84, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____amunicja__zanurzenie_g³êbokoœæ_zadana__plus ); // T.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__celowanie_bronie_osobno, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____celowanie_bronie_osobno ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__celowanie_tryb, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____celowanie_tryb ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__celownicze_linie_unoœ, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____celownicze_linie_unoœ ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__celownik_bombowiec_widocznoœæ, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____celownik_bombowiec_widocznoœæ ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__celownik_widocznoœæ, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____celownik_widocznoœæ ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__celownik_widocznoœæ_mouse_look_active, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____celownik_widocznoœæ_mouse_look_active ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__dalmierz, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____dalmierz ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__dalmierz_tryb, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____dalmierz_tryb ); // .

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__dŸwiêk__g³oœnoœæ__minus, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____dŸwiêk__g³oœnoœæ__minus ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__dŸwiêk__g³oœnoœæ__plus, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____dŸwiêk__g³oœnoœæ__plus ); // .

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__obracaj_dzia³a, 79, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____obracaj_dzia³a, [ ssCtrl ] ); // O + Ctrl.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__obracaj_dzia³a__na_k¹t_wyznaczony, 79, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____obracaj_dzia³a__na_k¹t_wyznaczony ); // O.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__obrót_k¹t_zablokowany_strza³_wskaŸnik, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____obrót_k¹t_zablokowany_strza³_wskaŸnik ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__obrót_k¹t_zablokowany_wskaŸnik, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____obrót_k¹t_zablokowany_wskaŸnik ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__podnoœ_lufy, 76, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____podnoœ_lufy, [ ssCtrl ] ); // L + Ctrl.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__podnoœ_lufy__na_k¹t_wyznaczony, 76, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____podnoœ_lufy__na_k¹t_wyznaczony ); // L.

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__gra_wspó³czynnik_prêdkoœci__minus, VK_SUBTRACT, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____gra_wspó³czynnik_prêdkoœci__minus ); // Num -.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__gra_wspó³czynnik_prêdkoœci__normalna, VK_MULTIPLY, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____gra_wspó³czynnik_prêdkoœci__normalna ); // Num *.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__gra_wspó³czynnik_prêdkoœci__plus, VK_ADD, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____gra_wspó³czynnik_prêdkoœci__plus ); // Num +.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__gra_wspó³czynnik_prêdkoœci__x_10, VK_DIVIDE, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____gra_wspó³czynnik_prêdkoœci__x_10 ); // Num /.

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__mouse_look_active, VK_SPACE, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____mouse_look_active ); // Space.

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__kamera__w_dó³_obrót, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__w_dó³_obrót ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__kamera__w_górê_obrót, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__w_górê_obrót ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__kamera__w_lewo_obrót, VK_NUMPAD1, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__w_lewo_obrót ); // Num 1.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__kamera__w_prawo_obrót, VK_NUMPAD3, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__w_prawo_obrót ); // Num 3.

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__kamera__w_dó³, VK_NUMPAD7, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__w_dó³ ); // Num 7.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__kamera__w_górê, VK_NUMPAD9, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__w_górê ); // Num 9.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__kamera__w_lewo, VK_NUMPAD4, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__w_lewo ); // Num 4.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__kamera__w_prawo, VK_NUMPAD6, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__w_prawo ); // Num 6.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__kamera__do_przodu, VK_NUMPAD8, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__do_przodu ); // Num 8.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__kamera__do_ty³u, VK_NUMPAD2, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__do_ty³u ); // Num 2.

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__kamera__Artyleria, VK_F4, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__Artyleria ); // F4.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__kamera__Amunicja, VK_F5, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__Amunicja ); // F5.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__kamera__Statek, VK_F1, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__Statek ); // F1.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__kamera__Statek__Fale, VK_F1, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__Statek__Fale, [ ssShift ] ); // F1 + Shift.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__kamera__Statek__Projektowy_Tryb, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__Statek__Projektowy_Tryb ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__kamera__Swobodna, VK_F3, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__Swobodna ); // F3.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__kamera__Za_Statkiem, VK_F2, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__Za_Statkiem ); // F2.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__kamera__Za_Statkiem__Fale, VK_F2, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kamera__Za_Statkiem__Fale, [ ssShift ] ); // F2 + Shift.

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__kotwica__stop, VK_END, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kotwica__stop ); // End.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__kotwica__w__dó³, VK_DELETE, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kotwica__w__dó³ ); // Delete.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__kotwica__w__górê, VK_INSERT, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____kotwica__w__górê ); // Insert.

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__l¹dowanie_u³atwione, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____l¹dowanie_u³atwione ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__l¹d_odœwie¿_wskazany, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____l¹d_odœwie¿_wskazany ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__lotniskowiec_samolot_l¹dowanie_informacje, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____lotniskowiec_samolot_l¹dowanie_informacje ); // .

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__punkt_naprowadzaj, VK_UP, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____punkt_naprowadzaj ); // Kursor góra.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__punkt_naprowadzaj__na_lotniskowiec, VK_DOWN, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____punkt_naprowadzaj__na_lotniskowiec ); // Kursor dó³.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__punkt_naprowadzaj__odleg³oœæ_do_punktu_prezentuj, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____punkt_naprowadzaj__odleg³oœæ_do_punktu_prezentuj ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__punkt_naprowadzaj__punkt, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____punkt_naprowadzaj__punkt ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__punkt_naprowadzaj__radar, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____punkt_naprowadzaj__radar ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__punkt_naprowadzaj__strza³ka, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____punkt_naprowadzaj__strza³ka ); // .

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__opcje, VK_F12, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____opcje ); // F12.

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__pauza, 80, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____pauza ); // P.

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__pe³ny_ekran, VK_RETURN, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____pe³ny_ekran, [ ssAlt, ssCtrl ] ); // Atl + Enter.

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__pokój_rozmów__informacja_dodatkowa, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____pokój_rozmów__informacja_dodatkowa ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__pokój_rozmów__na_ekranie, VK_RETURN, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____pokój_rozmów__na_ekranie ); // Enter.

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__prêdkoœæ_zadana_procent_zmieñ__1_plus, 87, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__1_plus, [ ssCtrl ] ); // W + Ctrl.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__prêdkoœæ_zadana_procent_zmieñ__5_plus, 87, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__5_plus, [ ssShift ] ); // W + Shift.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__prêdkoœæ_zadana_procent_zmieñ__25_plus, 87, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__25_plus ); // W.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__prêdkoœæ_zadana_procent_zmieñ__100_plus, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__100_plus ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__prêdkoœæ_zadana_procent_zmieñ__1_minus, 83, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__1_minus, [ ssCtrl ] ); // S + Ctrl.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__prêdkoœæ_zadana_procent_zmieñ__5_minus, 83, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__5_minus, [ ssShift ] ); // S + Shift.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__prêdkoœæ_zadana_procent_zmieñ__25_minus, 83, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__25_minus ); // S.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__prêdkoœæ_zadana_procent_zmieñ__100_minus, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__100_minus ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__prêdkoœæ_zadana_procent_zmieñ__zero, 88, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____prêdkoœæ_zadana_procent_zmieñ__zero ); // X.

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__punkty_¿ycia_wskaŸnik__gracz, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____punkty_¿ycia_wskaŸnik__gracz ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__punkty_¿ycia_wskaŸnik__przeciwnik, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____punkty_¿ycia_wskaŸnik__przeciwnik ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__punkty_¿ycia_wskaŸnik__sojusznik, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____punkty_¿ycia_wskaŸnik__sojusznik ); // .

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__radar__broñ_zasiêg_wyœwietlaj, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____radar__broñ_zasiêg_wyœwietlaj ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__radar__czu³oœæ__10_plus, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____radar__czu³oœæ__10_plus ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__radar__czu³oœæ__1_plus, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____radar__czu³oœæ__1_plus ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__radar__czu³oœæ__1_minus, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____radar__czu³oœæ__1_minus ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__radar__czu³oœæ__10_minus, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____radar__czu³oœæ__10_minus ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__radar__skala__10_plus, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____radar__skala__10_plus ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__radar__skala__1_plus, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____radar__skala__1_plus ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__radar__skala__1_minus, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____radar__skala__1_minus ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__radar__skala__10_minus, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____radar__skala__10_minus ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__radar__widocznoœæ, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____radar__widocznoœæ ); // .

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__samolot_katapult¹_startuj, 75, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____samolot_katapult¹_startuj ); // K.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__samolot_statek_prze³¹cz, VK_BACK, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____samolot_statek_prze³¹cz ); // Backspace.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__samolot_statek_prze³¹cz_bez_kamery, VK_OEM_5, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____samolot_statek_prze³¹cz_bez_kamery ); // \.

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__si__p³ywa__samolot_gracza, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____si__p³ywa__samolot_gracza ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__si__p³ywa__statek_gracza, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____si__p³ywa__statek_gracza ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__si__samolot_gracza__l¹duj_na_lotniskowcu_gracza, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____si__samolot_gracza__l¹duj_na_lotniskowcu_gracza ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__si__statek_gracza__strzela__nie, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____si__statek_gracza__strzela__nie ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__si__statek_gracza__strzela__tak, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____si__statek_gracza__strzela__tak ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__si__statek_gracza__strzela__wszystkim, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____si__statek_gracza__strzela__wszystkim ); // .

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__sos_nadaj, VK_PRIOR, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____sos_nadaj ); // Page Up.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__statek__utwórz, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____statek__utwórz ); // .

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__skrêt_zadany_procent_zmieñ__1_lewo, 65, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__1_lewo, [ ssCtrl ] ); // A + Ctrl.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__skrêt_zadany_procent_zmieñ__5_lewo, 65, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__5_lewo ); // A.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__skrêt_zadany_procent_zmieñ__25_lewo, 65, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__25_lewo, [ ssShift ] ); // A + Shift.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__skrêt_zadany_procent_zmieñ__100_lewo, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__100_lewo ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__skrêt_zadany_procent_zmieñ__1_prawo, 68, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__1_prawo, [ ssCtrl ] ); // D + Ctrl.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__skrêt_zadany_procent_zmieñ__5_prawo, 68, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__5_prawo ); // D.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__skrêt_zadany_procent_zmieñ__25_prawo, 68, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__25_prawo, [ ssShift ] ); // D + Shift.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__skrêt_zadany_procent_zmieñ__100_prawo, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__100_prawo ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__skrêt_zadany_procent_zmieñ__zero, 90, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____skrêt_zadany_procent_zmieñ__zero ); // Z.

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__strza³_1, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strza³_1, [], true ); // LPM.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__strza³_2, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strza³_2 ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__strza³__wszystkie_lufy_1, 2, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strza³__wszystkie_lufy_1, [], true ); // ŒPM.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__strza³__wszystkie_lufy_2, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strza³__wszystkie_lufy_2 ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__strza³__wszystkie_wybrane_1, 1, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strza³__wszystkie_wybrane_1, [], true ); // PPM.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__strza³__wszystkie_wybrane_2, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strza³__wszystkie_wybrane_2 ); // .

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__strza³__broñ_indeks_zmieniaj, 78, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strza³__broñ_indeks_zmieniaj ); // N.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__strza³__broñ_indeks_nastêpny, VK_OEM_PERIOD, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strza³__broñ_indeks_nastêpny ); // ..
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__strza³__broñ_indeks_poprzedni, VK_OEM_COMMA, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strza³__broñ_indeks_poprzedni ); // ,.

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__strzelaj_z__artyleria, 51, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strzelaj_z__artyleria ); // 3.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__strzelaj_z__bomba_g³êbinowa, 52, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strzelaj_z__bomba_g³êbinowa ); // 4.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__strzelaj_z__je¿e_g³êbinowe, VK_OEM_3, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strzelaj_z__je¿e_g³êbinowe ); // `.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__strzelaj_z__pocisk, 50, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strzelaj_z__pocisk ); // 2.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__strzelaj_z__torpeda, 49, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strzelaj_z__torpeda ); // 1.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__strzelaj_z__wszystkie, 54, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____strzelaj_z__wszystkie ); // 6.

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__syrena_okrêtowa, 72, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____syrena_okrêtowa ); // H.

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__œwiat³a, VK_OEM_MINUS, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____œwiat³a ); // -.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__œwiat³a_dodatkowe, VK_OEM_PLUS, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____œwiat³a_dodatkowe ); // =.

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__zamknij_program, VK_ESCAPE, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zamknij_program, [ ssShift ] ); // Esc + Shift.

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__zanurzenie_zadane_peryskopowe, 69, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_peryskopowe ); // E.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__zanurzenie_zadane_procent_zmieñ__100_plus, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__100_plus ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__zanurzenie_zadane_procent_zmieñ__25_plus, 82, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__25_plus ); // R.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__zanurzenie_zadane_procent_zmieñ__5_plus, 82, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__5_plus, [ ssShift ] ); // R + Shift.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__zanurzenie_zadane_procent_zmieñ__1_plus, 82, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__1_plus, [ ssCtrl ] ); // R + Ctrl.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__zanurzenie_zadane_procent_zmieñ__zero, 86, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__zero ); // V.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__zanurzenie_zadane_procent_zmieñ__1_minus, 70, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__1_minus, [ ssCtrl ] ); // F + Ctrl.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__zanurzenie_zadane_procent_zmieñ__5_minus, 70, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__5_minus, [ ssShift ] ); // F + Shift.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__zanurzenie_zadane_procent_zmieñ__25_minus, 70, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__25_minus ); // F.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__zanurzenie_zadane_procent_zmieñ__100_minus, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_procent_zmieñ__100_minus ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__zanurzenie_zadane_przekraczaj_100_procent, VK_F8, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____zanurzenie_zadane_przekraczaj_100_procent ); // F8.

  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__projektowy_tryb__statek__obrót_lewo, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__obrót_lewo ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__projektowy_tryb__statek__obrót_prawo, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__obrót_prawo ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__projektowy_tryb__statek__opuszczenie, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__opuszczenie ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__projektowy_tryb__statek__podniesienie, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__podniesienie ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__projektowy_tryb__statek__przesuniêcie_w_lewo, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__przesuniêcie_w_lewo ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__projektowy_tryb__statek__przesuniêcie_w_prawo, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__przesuniêcie_w_prawo ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__projektowy_tryb__statek__przesuniêcie_w_przód, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__przesuniêcie_w_przód ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__projektowy_tryb__statek__przesuniêcie_w_ty³, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__przesuniêcie_w_ty³ ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__projektowy_tryb__statek__przechylenie_w_lewo, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__przechylenie_w_lewo ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__projektowy_tryb__statek__przechylenie_w_prawo, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__przechylenie_w_prawo ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__projektowy_tryb__statek__uniesienie_przodu, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__uniesienie_przodu ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__projektowy_tryb__statek__uniesienie_ty³u, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__uniesienie_ty³u ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__projektowy_tryb__statek__prêdkoœæ_zadana_0_100, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__prêdkoœæ_zadana_0_100 ); // /.
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__projektowy_tryb__statek__prêdkoœæ_zadana_0_m_100, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__prêdkoœæ_zadana_0_m_100 ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__projektowy_tryb__statek___resetuj_obrót, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek___resetuj_obrót ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__projektowy_tryb__statek__zanurzenie_zadane_peryskopowe, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__zanurzenie_zadane_peryskopowe ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__projektowy_tryb__statek__zanurzenie_zadane_procent_0_100, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__statek__zanurzenie_zadane_procent_0_100 ); // .
  Klawisz_Plus_Alt_Ctrl_Shift_Zeruj( klawisz__projektowy_tryb__w³¹cz_wy³¹cz, 0, zti, t³umaczenie_komunikaty_r.klawiatura_konfiguracja__polecenie_nazwa____projektowy_tryb__w³¹cz_wy³¹cz ); // .


  Klawiatura_Konfiguracja_ScrollBox.Visible := true;


  Klawiatura_Konfiguracja_ScrollBox.VertScrollBar.Position := przesuniêcie_w_pionie_kopia;


  Screen.Cursor := zt_cursor_kopia;

end;//---//Klawiatura_Konfiguracja__Domyœlna_ButtonClick().

//Klawiatura_Konfiguracja__Niepowtarzalnoœæ_SprawdŸ_ButtonClick().
procedure TStatki_Form.Klawiatura_Konfiguracja__Niepowtarzalnoœæ_SprawdŸ_ButtonClick( Sender: TObject );
var
  i,
  j
    : integer;
  komunikat_treœæ : string;
  zt_klawiatura_konfiguracja_r : TKlawiatura_Konfiguracja_r;
begin

  komunikat_treœæ := '';


  for i := 0 to Klawiatura_Konfiguracja_ScrollBox.ControlCount - 1 do // Tylko wizualne.
    TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Polecenie_Nazwa_Label.Font.Color := clWindowText; // Ustawia domyœlny kolor.


  for i := 0 to Klawiatura_Konfiguracja_ScrollBox.ControlCount - 1 do // Tylko wizualne.
    begin

      if TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.mysz_niezdefiniowana then
        begin

          komunikat_treœæ := komunikat_treœæ +
            #13 + #10 +
            #13 + #10 +
            //TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.polecenie__nazwa +
            //' (' + TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.polecenie__t³umaczenie +
            //') - ' + t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__niepe³na_definicja;
            TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.polecenie__t³umaczenie +
            ' - ' + t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__niepe³na_definicja +
            ';';

          TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Polecenie_Nazwa_Label.Font.Color := clMaroon;

        end;
      //---//if TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.mysz_niezdefiniowana then


      zt_klawiatura_konfiguracja_r.klawisz := TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.klawisz;
      zt_klawiatura_konfiguracja_r.czy_mysz := TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.czy_mysz;
      zt_klawiatura_konfiguracja_r.plus_alt := TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.plus_alt;
      zt_klawiatura_konfiguracja_r.plus_ctrl := TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.plus_ctrl;
      zt_klawiatura_konfiguracja_r.plus_shift := TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.plus_shift;


      if    ( zt_klawiatura_konfiguracja_r.klawisz = 0 )
        and ( not zt_klawiatura_konfiguracja_r.czy_mysz )
        and (
                 ( zt_klawiatura_konfiguracja_r.plus_alt )
              or ( zt_klawiatura_konfiguracja_r.plus_ctrl )
              or ( zt_klawiatura_konfiguracja_r.plus_shift )
            ) then
        begin

          komunikat_treœæ := komunikat_treœæ +
            #13 + #10 +
            #13 + #10 +
            //TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.polecenie__nazwa +
            //' (' + TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.polecenie__t³umaczenie +
            //') - ' + t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__niepoprawna_definicja;
            TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.polecenie__t³umaczenie +
            ' - ' + t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__niepoprawna_definicja +
            ';';

          TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Polecenie_Nazwa_Label.Font.Color := clMaroon;

        end;
      //---//if    ( zt_klawiatura_konfiguracja_r.klawisz = 0 ) (...)


      if    ( zt_klawiatura_konfiguracja_r.klawisz = 0 )
        and ( not zt_klawiatura_konfiguracja_r.czy_mysz ) then
        // Brak definicji (nie sprawdzane) [Niezdefiniowane].
      else//if    ( zt_klawiatura_konfiguracja_r.klawisz = 0 ) (...)
        for j := i + 1 to Klawiatura_Konfiguracja_ScrollBox.ControlCount - 1 do // Tylko wizualne.
          begin

            // Prawy Alt zg³asza siê jako Alt i Ctrl jednoczeœnie.
            // To rozwi¹zanie sprawia, ¿e konfiguracje 'Alt' oraz 'Alt + Ctrl' s¹ nierozró¿nialne
            // ale przynajmniej dzia³aj¹ ustawienia 'Alt +' oraz 'Ctrl +'.
            //
            // Sprawdzane jako pierwsze aby zaznaczenie kolorem powielonej konfiguracji nie zosta³o nadpisane.
            if    (
                       ( zt_klawiatura_konfiguracja_r.klawisz <> 0 )
                    or ( zt_klawiatura_konfiguracja_r.czy_mysz )
                  )
              and ( zt_klawiatura_konfiguracja_r.klawisz = TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.klawisz )
              and ( zt_klawiatura_konfiguracja_r.czy_mysz = TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.czy_mysz )
              and (
                       (
                             ( zt_klawiatura_konfiguracja_r.plus_alt )
                         and ( TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.plus_alt )
                         and ( TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.plus_ctrl )
                       )
                    or (
                             ( zt_klawiatura_konfiguracja_r.plus_alt )
                         and ( zt_klawiatura_konfiguracja_r.plus_ctrl )
                         and ( TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.plus_alt )
                       )
                  ) then
              begin

                komunikat_treœæ := komunikat_treœæ +
                  #13 + #10 +
                  #13 + #10 +
                  //TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.polecenie__nazwa +
                  //' (' + TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.polecenie__t³umaczenie +
                  //') ' + t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__i + ' ' +
                  //TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.polecenie__nazwa +
                  //' (' + TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.polecenie__t³umaczenie +
                  //') - ' + t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__konfiguracje__Alt__oraz__Alt___Ctrl__s¹_nierozró¿nialne;
                  TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.polecenie__t³umaczenie +
                  ' ' + t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__i + ' ' +
                  ' ' + TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.polecenie__t³umaczenie +
                  ' - ' + t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__konfiguracje__Alt__oraz__Alt___Ctrl__s¹_nierozró¿nialne +
                  ';';

                TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Polecenie_Nazwa_Label.Font.Color := clMaroon;
                TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).Polecenie_Nazwa_Label.Font.Color := clMaroon;

              end;
            //---//if    ( (...)


            // Powielona definicja.
            if    ( zt_klawiatura_konfiguracja_r.klawisz = TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.klawisz )
              and ( zt_klawiatura_konfiguracja_r.czy_mysz = TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.czy_mysz )
              and ( zt_klawiatura_konfiguracja_r.plus_alt = TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.plus_alt )
              and ( zt_klawiatura_konfiguracja_r.plus_ctrl = TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.plus_ctrl )
              and ( zt_klawiatura_konfiguracja_r.plus_shift = TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.plus_shift ) then
              begin

                komunikat_treœæ := komunikat_treœæ +
                  #13 + #10 +
                  #13 + #10 +
                  //TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.polecenie__nazwa +
                  //' (' + TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.polecenie__t³umaczenie +
                  //') ' + t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__i +
                  //' ' + //TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.polecenie__nazwa +
                  //' (' + TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.polecenie__t³umaczenie +
                  //') - ' + t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__powielona_definicja;
                  TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.polecenie__t³umaczenie +
                  ' ' + t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__i +
                  ' ' + TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.polecenie__t³umaczenie +
                  ' - ' + t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__powielona_definicja +
                  ';';

                TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Polecenie_Nazwa_Label.Font.Color := clRed;
                TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).Polecenie_Nazwa_Label.Font.Color := clRed;

              end;
            //---//if    ( zt_klawiatura_konfiguracja_r.klawisz = TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.klawisz ) (...)

          end;
        //---//for j := i + 1 to Klawiatura_Konfiguracja_ScrollBox.ControlCount - 1 do

    end;
  //---//for i := 0 to Klawiatura_Konfiguracja_ScrollBox.ControlCount - 1 do


  if komunikat_treœæ <> '' then
    begin

      komunikat_treœæ := t³umaczenie_komunikaty_r.komunikat__wykryto_nastêpuj¹ce_niezgodnoœci_konfiguracji_klawiszy + ':' + #13 + #10 + komunikat_treœæ + '.';

      Log_Wypisz( komunikat_treœæ, false );

      Komunikat_Wyœwietl( komunikat_treœæ );

    end
  else//if komunikat_treœæ <> '' then
    Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_wykryto_niezgodnoœci_konfiguracji_klawiszy, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONINFORMATION );

end;//---//Klawiatura_Konfiguracja__Niepowtarzalnoœæ_SprawdŸ_ButtonClick().

//Funkcja Klawiatura_Konfiguracja__Sortuj_ButtonClick().
procedure TStatki_Form.Klawiatura_Konfiguracja__Sortuj_ButtonClick( Sender: TObject );
var
  i,
  j
    : integer;
  zt_string_list : TStringList;
begin

  Screen.Cursor := crHourGlass;

  zt_string_list := TStringList.Create();

  Klawiatura_Konfiguracja_ScrollBox.Visible := false; // Trochê przyœpiesza dzia³anie.

  for i := 0 to Klawiatura_Konfiguracja_ScrollBox.ControlCount - 1 do // Tylko wizualne.
    begin

      zt_string_list.Add( TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.polecenie__t³umaczenie );
      Klawiatura_Konfiguracja_ScrollBox.Controls[ i ].Visible := false; // Trochê przyœpiesza dzia³anie.
      Klawiatura_Konfiguracja_ScrollBox.Controls[ i ].Align := alBottom;

    end;
  //---//for i := 0 to Klawiatura_Konfiguracja_ScrollBox.ControlCount - 1 do

  zt_string_list.Sort();

  for j := 0 to zt_string_list.Count - 1 do
    for i := 0 to Klawiatura_Konfiguracja_ScrollBox.ControlCount - 1 do // Tylko wizualne.
      if TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.polecenie__t³umaczenie = zt_string_list[ j ] then
        begin

          Klawiatura_Konfiguracja_ScrollBox.Controls[ i ].Align := alTop;
          Klawiatura_Konfiguracja_ScrollBox.Controls[ i ].Visible := true; // Trochê przyœpiesza dzia³anie.
          Break;

        end;
      //---//if TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).klawiatura_konfiguracja_r_w.polecenie__t³umaczenie = zt_string_list[ j ] then

  for i := 0 to Klawiatura_Konfiguracja_ScrollBox.ControlCount - 1 do // Tylko wizualne.
    if   ( Klawiatura_Konfiguracja_ScrollBox.Controls[ i ].Align <> alTop )
      or ( not Klawiatura_Konfiguracja_ScrollBox.Controls[ i ].Visible ) then
      begin

        Klawiatura_Konfiguracja_ScrollBox.Controls[ i ].Align := alTop;
        Klawiatura_Konfiguracja_ScrollBox.Controls[ i ].Visible := true; // Trochê przyœpiesza dzia³anie.

      end;
    //---//if   ( Klawiatura_Konfiguracja_ScrollBox.Controls[ i ].Align <> alTop ) (...)

  FreeAndNil( zt_string_list );

  Klawiatura_Konfiguracja_ScrollBox.Visible := true;

  Screen.Cursor := crDefault;

end;//---//Funkcja Klawiatura_Konfiguracja__Sortuj_ButtonClick().

//Klawiatura_Konfiguracja__Szukaj_EditChange().
procedure TStatki_Form.Klawiatura_Konfiguracja__Szukaj_EditChange( Sender: TObject );
var
  czy_znalaz³,
  szukaj__nastêpny,
  szukaj__poprzedni
    : boolean;
  i,
  poprzedni_indeks
    : integer;
  zt_cursor_kopia : TCursor;
begin

  //if Klawiatura_Konfiguracja__Szukaj__Pasuj¹ce_Tylko_Wyœwietlaj_CheckBox.Checked then
    zt_cursor_kopia := Screen.Cursor;
    Screen.Cursor := crHourGlass;


  czy_znalaz³ := false;


  // Ustawia domyœlny kolor.
  Klawiatura_Konfiguracja__Szukaj_Edit.Color := clWindow;

  for i := 0 to Klawiatura_Konfiguracja_ScrollBox.ControlCount - 1 do // Tylko wizualne.
    TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Panel_Mouse_Leave( Sender );
  //---// Ustawia domyœlny kolor.


  if Klawiatura_Konfiguracja__Szukaj__Pasuj¹ce_Tylko_Wyœwietlaj_CheckBox.Checked then
    Klawiatura_Konfiguracja_ScrollBox.Visible := false;
    //SendMessage( Klawiatura_Konfiguracja_ScrollBox.Handle, WM_SETREDRAW, 0, 0 );


  // Ten wariant zbyt wolno dzia³a.
  //for i := 0 to Klawiatura_Konfiguracja_ScrollBox.ControlCount - 1 do // Tylko wizualne.
  //  TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Height := klawisz_konfiguracja_wysokoœæ_c; // Zmiana wielkoœci wolno dzia³a.


  szukaj__nastêpny := false;
  szukaj__poprzedni := false;
  poprzedni_indeks := -99;


  if Sender <> nil then
    begin

      if TComponent(Sender).Name = Klawiatura_Konfiguracja__Szukaj__Nastêpny_Button.Name then
        szukaj__nastêpny := true
      else//if TComponent(Sender).Name = Klawiatura_Konfiguracja__Szukaj__Nastêpny_Button.Name then
      if TComponent(Sender).Name = Klawiatura_Konfiguracja__Szukaj__Poprzedni_Button.Name then
        szukaj__poprzedni := true;

    end;
  //---//if Sender <> nil then


  if    ( not szukaj__nastêpny )
    and ( not szukaj__poprzedni )
    and ( klawiatura_konfiguracja__szukaj__znaleziony_indeks_g <> -1 ) then
    klawiatura_konfiguracja__szukaj__znaleziony_indeks_g := -1;


  if szukaj__poprzedni then
    for i := Klawiatura_Konfiguracja_ScrollBox.ControlCount - 1 downto 0 do // Tylko wizualne.
      if    ( i < klawiatura_konfiguracja__szukaj__znaleziony_indeks_g )
        and (   Pos(  AnsiLowerCase( Klawiatura_Konfiguracja__Szukaj_Edit.Text ), AnsiLowerCase( TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Polecenie_Nazwa_Label.Caption )  ) > 0   ) then
        begin

          poprzedni_indeks := i;
          Break;

        end;
      //---//if    ( i < klawiatura_konfiguracja__szukaj__znaleziony_indeks_g ) (...)


  for i := 0 to Klawiatura_Konfiguracja_ScrollBox.ControlCount - 1 do // Tylko wizualne.
    begin

      if    (
                 (  Trim( Klawiatura_Konfiguracja__Szukaj_Edit.Text ) = ''  )
              or ( not Klawiatura_Konfiguracja__Szukaj__Pasuj¹ce_Tylko_Wyœwietlaj_CheckBox.Checked )
            )
        and ( TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Height <> klawisz_konfiguracja_wysokoœæ_c ) then
        begin

          if Klawiatura_Konfiguracja_ScrollBox.Visible then
            Klawiatura_Konfiguracja_ScrollBox.Visible := false;

          TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Height := klawisz_konfiguracja_wysokoœæ_c;

        end;
      //---//if    ( (...)



      if Pos(  AnsiLowerCase( Klawiatura_Konfiguracja__Szukaj_Edit.Text ), AnsiLowerCase( TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Polecenie_Nazwa_Label.Caption )  ) > 0 then
        begin

          //if    ( not szukaj__nastêpny )
          //  and ( not szukaj__poprzedni ) then
          //  TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).wyszukany := true
          //else//if    ( not szukaj__nastêpny ) (...)
          //  TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).wyszukany := false;

          TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).wyszukany := true;
          TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).wyszukany__jako_nastêpny_poprzedni := false;


          if    ( not czy_znalaz³ )
            and (
                     (
                           ( not szukaj__nastêpny )
                       and ( not szukaj__poprzedni )
                     )
                  or (
                           (  szukaj__nastêpny )
                       and ( i > klawiatura_konfiguracja__szukaj__znaleziony_indeks_g )
                     )
                  or (
                           ( szukaj__poprzedni )
                       and ( i = poprzedni_indeks )
                     )
                ) then
            begin

              czy_znalaz³ := true;


              if   ( szukaj__nastêpny )
                or ( szukaj__poprzedni ) then
                //TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).wyszukany := true;
                TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).wyszukany__jako_nastêpny_poprzedni := true;


              klawiatura_konfiguracja__szukaj__znaleziony_indeks_g := i;


              if TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Top < 0 then
                Klawiatura_Konfiguracja_ScrollBox.VertScrollBar.Position :=
                    Klawiatura_Konfiguracja_ScrollBox.VertScrollBar.Position // Przesuwa do górnej krawêdzi (w dó³).
                  + TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Top
                  - Round // Przesuwa na œrodek (w dó³).
                      (
                          (
                              Klawiatura_Konfiguracja_ScrollBox.Height
                            - TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Height
                          )
                        * 0.5
                      )
              else//if TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Top < 0 then
              if TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Top + TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Height > Klawiatura_Konfiguracja_ScrollBox.Height then
                Klawiatura_Konfiguracja_ScrollBox.VertScrollBar.Position :=
                    Klawiatura_Konfiguracja_ScrollBox.VertScrollBar.Position // Przesuwa do dolnej krawêdzi (w górê).
                  + TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Top
                  + TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Height
                  - Klawiatura_Konfiguracja_ScrollBox.Height
                  + Round // Przesuwa na œrodek (w górê).
                      (
                          (
                              Klawiatura_Konfiguracja_ScrollBox.Height
                            - TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Height
                          )
                        * 0.5
                      );

            end;
          //---//if    ( not czy_znalaz³ ) (...)


          if Klawiatura_Konfiguracja__Szukaj__Pasuj¹ce_Tylko_Wyœwietlaj_CheckBox.Checked then
            TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Height := klawisz_konfiguracja_wysokoœæ_c; // Zmiana wielkoœci wolno dzia³a.

        end
      else//if Pos(  AnsiLowerCase( Klawiatura_Konfiguracja__Szukaj_Edit.Text ), AnsiLowerCase( TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Polecenie_Nazwa_Label.Caption )  ) > 0 then
        begin

          TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).wyszukany := false;

          if    ( Klawiatura_Konfiguracja__Szukaj__Pasuj¹ce_Tylko_Wyœwietlaj_CheckBox.Checked )
            and (  Trim( Klawiatura_Konfiguracja__Szukaj_Edit.Text ) <> ''  ) then
            TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Height := 1; // Zmiana wielkoœci wolno dzia³a.

        end;
      //---//if Pos(  AnsiLowerCase( Klawiatura_Konfiguracja__Szukaj_Edit.Text ), AnsiLowerCase( TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).Polecenie_Nazwa_Label.Caption )  ) > 0 then


      TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ i ]).OnMouseLeave( Sender );

    end;
  //---//for i := 0 to Klawiatura_Konfiguracja_ScrollBox.ControlCount - 1 do


  if not Klawiatura_Konfiguracja_ScrollBox.Visible then
    Klawiatura_Konfiguracja_ScrollBox.Visible := true;

  //if Klawiatura_Konfiguracja__Szukaj__Pasuj¹ce_Tylko_Wyœwietlaj_CheckBox.Checked then
  //  Klawiatura_Konfiguracja_ScrollBox.Visible := true;
    //SendMessage( Klawiatura_Konfiguracja_ScrollBox.Handle, WM_SETREDRAW, 1, 0 );
    ////RedrawWindow( Klawiatura_Konfiguracja_ScrollBox.Handle, nil, 0, RDW_ERASE or RDW_INVALIDATE or RDW_FRAME or RDW_ALLCHILDREN );
    //Klawiatura_Konfiguracja_ScrollBox.Invalidate();


  if    ( not czy_znalaz³ )
    and (  Trim( Klawiatura_Konfiguracja__Szukaj_Edit.Text ) <> ''  )then
    Klawiatura_Konfiguracja__Szukaj_Edit.Color := kolor__czerwony_jasny_c;


  if    ( not czy_znalaz³ )
    and ( szukaj__nastêpny )
    and ( klawiatura_konfiguracja__szukaj__znaleziony_indeks_g <> Klawiatura_Konfiguracja_ScrollBox.ControlCount ) then
    klawiatura_konfiguracja__szukaj__znaleziony_indeks_g := Klawiatura_Konfiguracja_ScrollBox.ControlCount
  else//if    ( not czy_znalaz³ ) (...)
  if    ( not czy_znalaz³ )
    and ( szukaj__poprzedni )
    and ( klawiatura_konfiguracja__szukaj__znaleziony_indeks_g <> -1 ) then
    klawiatura_konfiguracja__szukaj__znaleziony_indeks_g := -1;


  //if Klawiatura_Konfiguracja__Szukaj__Pasuj¹ce_Tylko_Wyœwietlaj_CheckBox.Checked then
    Screen.Cursor := zt_cursor_kopia;

end;//---//Klawiatura_Konfiguracja__Szukaj_EditChange().

//Klawiatura_Konfiguracja__Szukaj_EditKeyDown().
procedure TStatki_Form.Klawiatura_Konfiguracja__Szukaj_EditKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
begin

  // Enter.
  if Key = 13 then
    begin

      Key := 0;
      Klawiatura_Konfiguracja__Szukaj_EditChange( Sender );

    end;
  //---//if Key = 13 then

end;//---//Klawiatura_Konfiguracja__Szukaj_EditKeyDown().

//Klawiatura_Konfiguracja__Wczytaj_ButtonClick().
procedure TStatki_Form.Klawiatura_Konfiguracja__Wczytaj_ButtonClick( Sender: TObject );
var
  i,
  j
    : integer;
  czy_b³¹d,
  komunikaty_pomiñ
    : boolean;
  zts_1,
  zts_2,
  komunikat_treœæ
    : string;
  plik_tekstowy : TextFile;
  zt_klawiatura_konfiguracja_r : TKlawiatura_Konfiguracja_r;
begin

  if    ( Sender <> nil )
    and ( TComponent(Sender).Name = Klawiatura_Konfiguracja__Przyciski_Panel.Name ) then
    begin

      // Pomija pytanie.

      komunikaty_pomiñ := true;

    end
  else//if    ( Sender <> nil ) (...)
    begin

      komunikaty_pomiñ := false;

      if Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__czy_wczytaæ_konfiguracjê_klawiszy + ' (' + Trim(  FormatFloat( '000', Klawiatura_Konfiguracja__Konfiguracja_Numer_SpinEdit.Value )  ) + ')?', t³umaczenie_komunikaty_r.komunikat__potwierdzenie, MB_YESNO + MB_DEFBUTTON2 + MB_ICONQUESTION ) = IDNO then
        Exit;

    end;
  //---//if    ( Sender <> nil ) (...)


  zts_1 := ExtractFilePath( Application.ExeName ) + 'Klawiatura konfiguracja ' + Trim(  FormatFloat( '000', Klawiatura_Konfiguracja__Konfiguracja_Numer_SpinEdit.Value )  ) + '.txt';

  if not FileExists( zts_1 ) then
    begin

      komunikat_treœæ := t³umaczenie_komunikaty_r.komunikat__nie_odnaleziono_pliku_konfiguracji_klawiszy + ' (' + zts_1 + ').';

      if not komunikaty_pomiñ then
        Komunikat_Wyœwietl( komunikat_treœæ, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION )
      else//if not komunikaty_pomiñ then
        Log_Wypisz( komunikat_treœæ );

      Exit;

    end;
  //---//if not FileExists( zts_1 ) then


  komunikat_treœæ := '';


  AssignFile( plik_tekstowy, zts_1 );

  Reset( plik_tekstowy );

  while not Eof( plik_tekstowy ) do
    begin

      czy_b³¹d := false;


      Readln( plik_tekstowy, zts_1 ); // Czyta ca³¹ liniê.

      {$region 'Odczytuje wartoœci z tekstu.'}
      i := Pos( ';', zts_1 );

      if i > 0 then
        begin

          zts_2 := Copy( zts_1, 1, i - 1 );
          Delete( zts_1, 1, i );

          try
            i := StrToInt( zts_2 );
          except
            komunikat_treœæ := komunikat_treœæ + #13 + #10 + t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__b³êdny_kod_klawisza + ' (' + zts_2 + ')';
          end;
          //---//try

          if   ( i < 0 )
            or (  i > High( word )  ) then
            begin

              czy_b³¹d := true;
              komunikat_treœæ := komunikat_treœæ + #13 + #10 + t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__b³êdny_zakres_kodu_klawisza + ' (' + zts_2 + ')';

            end
          else//if   ( i < 0 ) (...)
            zt_klawiatura_konfiguracja_r.klawisz := i;

        end
      else//if i > 0 then
        begin

          czy_b³¹d := true;
          komunikat_treœæ := komunikat_treœæ + #13 + #10 + t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__brak_kodu_klawisza;

        end;
      //---//if i > 0 then


      i := Pos( ';', zts_1 );

      if i > 0 then
        begin

          zts_2 := Copy( zts_1, 1, i - 1 );
          Delete( zts_1, 1, i );
          zt_klawiatura_konfiguracja_r.czy_mysz := zts_2 = 'mysz';

        end
      else//if i > 0 then
        begin

          czy_b³¹d := true;
          komunikat_treœæ := komunikat_treœæ + #13 + #10 + t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__brak_rodzaju_klawisza;

        end;
      //---//if i > 0 then


      i := Pos( ';', zts_1 );

      if i > 0 then
        begin

          zts_2 := Copy( zts_1, 1, i - 1 );
          Delete( zts_1, 1, i );
          zt_klawiatura_konfiguracja_r.plus_alt := zts_2 = 'alt';

        end
      else//if i > 0 then
        begin

          //czy_b³¹d := true;
          komunikat_treœæ := komunikat_treœæ + #13 + #10 + t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__brak_parametru___klawisz_alt;

        end;
      //---//if i > 0 then


      i := Pos( ';', zts_1 );

      if i > 0 then
        begin

          zts_2 := Copy( zts_1, 1, i - 1 );
          Delete( zts_1, 1, i );
          zt_klawiatura_konfiguracja_r.plus_ctrl := zts_2 = 'ctrl';

        end
      else//if i > 0 then
        begin

          //czy_b³¹d := true;
          komunikat_treœæ := komunikat_treœæ + #13 + #10 + t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__brak_parametru___klawisz_ctrl;

        end;
      //---//if i > 0 then


      i := Pos( ';', zts_1 );

      if i > 0 then
        begin

          zts_2 := Copy( zts_1, 1, i - 1 );
          Delete( zts_1, 1, i );
          zt_klawiatura_konfiguracja_r.plus_shift := zts_2 = 'shift';

        end
      else//if i > 0 then
        begin

          //czy_b³¹d := true;
          komunikat_treœæ := komunikat_treœæ + #13 + #10 + t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__brak_parametru___klawisz_shift;

        end;
      //---//if i > 0 then


      i := Pos( ';', zts_1 );

      if i > 0 then
        begin

          zts_2 := Copy( zts_1, 1, i - 1 );
          Delete( zts_1, 1, i );
          zt_klawiatura_konfiguracja_r.polecenie__nazwa := zts_2;

        end
      else//if i > 0 then
        begin

          //czy_b³¹d := true;
          zt_klawiatura_konfiguracja_r.polecenie__nazwa := zts_1;
          komunikat_treœæ := komunikat_treœæ + #13 + #10 + t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__brak_nazwy_funkcjonalnoœci;

        end;
      //---//if i > 0 then
      {$endregion 'Odczytuje wartoœci z tekstu.'}

      if not czy_b³¹d then
        begin

          zts_2 := '?';

          for i := 0 to Length( klawiatura_konfiguracja_r_t ) - 1 do
            if klawiatura_konfiguracja_r_t[ i ].polecenie__nazwa = zt_klawiatura_konfiguracja_r.polecenie__nazwa then
              begin

                klawiatura_konfiguracja_r_t[ i ].klawisz := zt_klawiatura_konfiguracja_r.klawisz;
                klawiatura_konfiguracja_r_t[ i ].czy_mysz := zt_klawiatura_konfiguracja_r.czy_mysz;
                klawiatura_konfiguracja_r_t[ i ].plus_alt := zt_klawiatura_konfiguracja_r.plus_alt;
                klawiatura_konfiguracja_r_t[ i ].plus_ctrl := zt_klawiatura_konfiguracja_r.plus_ctrl;
                klawiatura_konfiguracja_r_t[ i ].plus_shift := zt_klawiatura_konfiguracja_r.plus_shift;

                zts_2 := '';


                for j := 0 to Klawiatura_Konfiguracja_ScrollBox.ControlCount - 1 do
                  if    ( Klawiatura_Konfiguracja_ScrollBox.Controls[ j ] is TKlawisz_Konfiguracja )
                    and ( TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.polecenie__nazwa = klawiatura_konfiguracja_r_t[ i ].polecenie__nazwa ) then
                    begin

                      zt_klawiatura_konfiguracja_r.klawisz := TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.klawisz;

                      TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).Czy_Mysz_Klawisz_Konfiguracja_CheckBox.Checked := TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.czy_mysz;
                      TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).Plus_Alt_Klawisz_Konfiguracja_CheckBox.Checked := TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.plus_alt;
                      TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).Plus_Ctrl_Klawisz_Konfiguracja_CheckBox.Checked := TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.plus_ctrl;
                      TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).Plus_Shift_Klawisz_Konfiguracja_CheckBox.Checked := TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.plus_shift;

                      // Dodatkowe sprawdzenie (nie powinny zmieniæ siê te wartoœci).
                      if TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.mysz_niezdefiniowana then
                        TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.mysz_niezdefiniowana := false;

                      if TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.klawisz <> zt_klawiatura_konfiguracja_r.klawisz then
                        TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).klawiatura_konfiguracja_r_w.klawisz := zt_klawiatura_konfiguracja_r.klawisz;
                      //---// Dodatkowe sprawdzenie (nie powinny zmieniæ siê te wartoœci).

                      TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).Nazwa_Klawisza();


                      TKlawisz_Konfiguracja(Klawiatura_Konfiguracja_ScrollBox.Controls[ j ]).Polecenie_Nazwa_Label.Font.Color := clWindowText; // Ustawia domyœlny kolor.

                      Break;

                    end;
                  //---//if Klawiatura_Konfiguracja_ScrollBox.Controls[ j ] is TKlawisz_Konfiguracja then

                Break;

              end;
            //---//if klawiatura_konfiguracja_r_t[ i ].polecenie__nazwa = zt_klawiatura_konfiguracja_r.polecenie__nazwa then


          if zts_2 <> '' then
            komunikat_treœæ := komunikat_treœæ + #13 + #10 + t³umaczenie_komunikaty_r.komunikat__klawiatura_konfiguracja__wczytana_konfiguracja_klawiszy_zawiera_nieznane_definicje_funkcjonalnoœci + ' (' + zt_klawiatura_konfiguracja_r.polecenie__nazwa + ' [' + zt_klawiatura_konfiguracja_r.polecenie__t³umaczenie + '])';

        end;
      //---//if not czy_b³¹d then

    end;
  //---//while not Eof( plik_tekstowy ) do

  CloseFile( plik_tekstowy );



  if komunikat_treœæ <> '' then
    begin

      komunikat_treœæ := t³umaczenie_komunikaty_r.komunikat__pojawi³y_siê_nastêpuj¹ce_b³êdy_podczas_wczytywania_konfiguracji_klawiszy + ':' + #13 + #10 + komunikat_treœæ + '.';

      Log_Wypisz( komunikat_treœæ, false );

      if not komunikaty_pomiñ then
        Komunikat_Wyœwietl( komunikat_treœæ );

    end;
  //---//if komunikat_treœæ <> '' then

end;//---//Klawiatura_Konfiguracja__Wczytaj_ButtonClick().

//Klawiatura_Konfiguracja__Zapisz_ButtonClick().
procedure TStatki_Form.Klawiatura_Konfiguracja__Zapisz_ButtonClick( Sender: TObject );
var
  i : integer;
  zts : string;
  plik_tekstowy : TextFile;
begin

  if Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__czy_zapisaæ_konfiguracjê_klawiszy + ' (' + Trim(  FormatFloat( '000', Klawiatura_Konfiguracja__Konfiguracja_Numer_SpinEdit.Value )  ) + ')?', t³umaczenie_komunikaty_r.komunikat__potwierdzenie, MB_YESNO + MB_DEFBUTTON2 + MB_ICONQUESTION ) = IDNO then
    Exit;


  zts := ExtractFilePath( Application.ExeName ) + 'Klawiatura konfiguracja ' + Trim(  FormatFloat( '000', Klawiatura_Konfiguracja__Konfiguracja_Numer_SpinEdit.Value )  ) + '.txt';

  AssignFile( plik_tekstowy, zts );

  Rewrite( plik_tekstowy ); // Czyœci. Nie odczyta zablokowanego pliku.


  for i := 0 to Length( klawiatura_konfiguracja_r_t ) - 1 do
    begin

      zts := IntToStr( klawiatura_konfiguracja_r_t[ i ].klawisz ) + ';';

      if klawiatura_konfiguracja_r_t[ i ].czy_mysz then
        zts := zts + 'mysz;'
      else//if klawiatura_konfiguracja_r_t[ i ].czy_mysz then
        zts := zts + 'klawisz;';

      if klawiatura_konfiguracja_r_t[ i ].plus_alt then
        zts := zts + 'alt;'
      else//if klawiatura_konfiguracja_r_t[ i ].plus_alt then
        zts := zts + ';';

      if klawiatura_konfiguracja_r_t[ i ].plus_ctrl then
        zts := zts + 'ctrl;'
      else//if klawiatura_konfiguracja_r_t[ i ].plus_ctrl then
        zts := zts + ';';

      if klawiatura_konfiguracja_r_t[ i ].plus_shift then
        zts := zts + 'shift;'
      else//if klawiatura_konfiguracja_r_t[ i ].plus_shift then
        zts := zts + ';';

      zts := zts + klawiatura_konfiguracja_r_t[ i ].polecenie__nazwa + ';';

      Writeln( plik_tekstowy, zts );

    end;
  //---//for i := 0 to Length( klawiatura_konfiguracja_r_t ) - 1 do


  CloseFile( plik_tekstowy ); // Dopiero po zamkniêciu zapisuje zmiany.

end;//---//Klawiatura_Konfiguracja__Zapisz_ButtonClick().

//Klienci_Od³¹cz_Wszystkich_BitBtnClick().
procedure TStatki_Form.Klienci_Od³¹cz_Wszystkich_BitBtnClick( Sender: TObject );
begin

  if czy_serwer_g then
    Wieloosobowe__Tekst_Wyœlij( wieloosobowe__komenda__serwer_wy³¹cza_siê_c );

end;//---//Klienci_Od³¹cz_Wszystkich_BitBtnClick().

//L¹dowanie_U³atwione_CheckBoxClick().
procedure TStatki_Form.L¹dowanie_U³atwione_CheckBoxClick( Sender: TObject );
begin

  Wspó³czynniki_Inne_Click( Sender );

  Elementy_Gracza_Dostosuj_CheckBoxClick( Sender );

end;//---//L¹dowanie_U³atwione_CheckBoxClick().

//L¹d_ComboBoxChange().
procedure TStatki_Form.L¹d_ComboBoxChange( Sender: TObject );
begin

  if   ( L¹d_ComboBox.Items.Count < 0 )
    or ( L¹d_ComboBox.ItemIndex < 0 )
    or (  L¹d_ComboBox.ItemIndex > Length( l¹dy_lista_t ) - 1  ) then
    Exit;


  if not czy_klient_g then
    Mapa_Label.Caption := t³umaczenie_komunikaty_r.s³owo__mapa + ': ' + L¹d_ComboBox.Text + '.'
  else//if not czy_klient_g then
    Mapa_Label.Caption := t³umaczenie_komunikaty_r.s³owo__mapa + ': ' + mapa__klient_wartoœæ_g + '.';

  L¹d_Opis_Memo.Text := StringReplace( l¹dy_lista_t[ L¹d_ComboBox.ItemIndex ].opis__sl, nowa_linia_c, #13 + #10, [ rfReplaceAll ] );


  if not L¹d_ComboBox.Enabled then // Aby nie zmieniaæ mapy gdy nie jest to wskazane (np. wczytanie ustawieñ podczas gry).
    Exit;


  L¹d__Zwolnij();
  L¹d__Utwórz( L¹d_ComboBox.ItemIndex );


  // Przeœle klientom tylko informacjê o nazwie wybranego na serwerze l¹du (bez danych l¹du).
  if    ( czy_serwer_g )
    and ( Gracz_Gotowoœæ_Tak_BitBtn.Enabled ) then
    Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__wspó³czynniki_inne_c, -99, '' );

end;//---//L¹d_ComboBoxChange().

//L¹d__Odœwie¿_Wskazany_BitBtnClick().
procedure TStatki_Form.L¹d__Odœwie¿_Wskazany_BitBtnClick( Sender: TObject );
begin

  if   ( czy_klient_g )
    or ( L¹d_ComboBox.Items.Count < 0 )
    or ( L¹d_ComboBox.ItemIndex < 0 )
    or (  L¹d_ComboBox.ItemIndex > Length( l¹dy_lista_t ) - 1  ) then
    Exit;


  Wczytaj_Schemat_Xml( katalog__schematy_lista__l¹dy_c, L¹d_ComboBox.ItemIndex, l¹dy_lista_t );

  L¹d_ComboBoxChange( Sender );

end;//---//L¹d__Odœwie¿_Wskazany_BitBtnClick().

//L¹d__Utwórz_BitBtnClick().
procedure TStatki_Form.L¹d__Utwórz_BitBtnClick( Sender: TObject );
begin

  L¹d__Zwolnij();
  L¹d__Utwórz( L¹d_ComboBox.ItemIndex );

end;//---//L¹d__Utwórz_BitBtnClick().

//L¹d__Wczytaj_Listê_BitBtnClick().
procedure TStatki_Form.L¹d__Wczytaj_Listê_BitBtnClick( Sender: TObject );
begin

  L¹d_Opis_Memo.Text := 'Opis mapy.';
  Wczytaj_Schemat_Xml( katalog__schematy_lista__l¹dy_c, -1, l¹dy_lista_t );

end;//---//L¹d__Wczytaj_Listê_BitBtnClick().

//Log_MemoKeyDown().
procedure TStatki_Form.Log_MemoKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
begin

  // A.
  if    ( ssCtrl in Shift )
    and ( Key = 65 ) then
    begin

      Key := 0;
      Log_Memo.SelectAll();

    end;
  //---//if    ( ssCtrl in Shift ) (...)

end;//---//Log_MemoKeyDown().

//Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero_BitBtnClick().
procedure TStatki_Form.Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero_BitBtnClick( Sender: TObject );
var
  rodzaj_l : smallint;
begin

  // Wszystkie samoloty na lotniskowcu gracza otrzymaj¹ maksymalne obra¿enia.

  if   ( statek_gracza = nil )
    or ( not statek_gracza.czy_lotniskowiec ) then
    Exit;

  //     -1 - wszystkim samolotom.
  //     0 - samolotom z innej grupy.
  //     1 - samolotom innych graczy.

  case Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero__Rodzaj_RadioGroup.ItemIndex of
      0 : rodzaj_l := 0; // innej grupy.
      1 : rodzaj_l := 1; // innych graczy.
      2 : rodzaj_l := -1; // wszystkie.
      else//case Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero__Rodzaj_RadioGroup.ItemIndex of
        rodzaj_l := -99;
    end;
  //---//case Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero__Rodzaj_RadioGroup.ItemIndex of

  if rodzaj_l = -99 then
    Exit;

  if not czy_klient_g then
    Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero( statek_gracza, nil, rodzaj_l )
  else//if not czy_klient_g then
    Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__statek__lotniskowiec__samoloty_wszystkie__punkty_¿ycia_zero_c, -99, IntToStr( statek_gracza.id_statek ) + ';' + IntToStr( rodzaj_l )  );

end;//---//Lotniskowiec__Samoloty_Wszystkie__Punkty_¯ycia_Zero_BitBtnClick().

//Mg³a_SpinEditChange().
procedure TStatki_Form.Mg³a_SpinEditChange( Sender: TObject );
begin

  if Gra_GLCamera.AbsolutePosition.Y >= 0 then
    begin

      if Mg³a_SpinEdit.Value > Mg³a_SpinEdit.MaxValue then
        Mg³a_SpinEdit.Value := Mg³a_SpinEdit.MaxValue
      else//if Mg³a_SpinEdit.Value > Mg³a_SpinEdit.MaxValue then
      if Mg³a_SpinEdit.Value < Mg³a_SpinEdit.MinValue then
        Mg³a_SpinEdit.Value := Mg³a_SpinEdit.MinValue;

      Gra_GLSceneViewer.Buffer.FogEnable := Mg³a_SpinEdit.Value > 0;
      Gra_GLSceneViewer.Buffer.FogEnvironment.FogColor.Alpha := Sqr( Mg³a_SpinEdit.Value * 0.001 ); // Tylko tutaj zmienia przezroczystoœæ mg³y je¿eli kamera nie jest pod wod¹.

    end;
  //---//if Gra_GLCamera.AbsolutePosition.Y >= 0 then

  mg³a_intensywnoœæ_g := Ln( Mg³a_SpinEdit.Value + 1 ) * (  100 / Ln( 1001 )  ); // Logarytm nie jest od 0 wiêc dodanie do zakresu 1 (1 - 1001).


  Punkt_Naprowadzaj__Kolor_Zmieñ();


  if czy_serwer_g then
    Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__gra__mg³a_c, -99, IntToStr( Mg³a_SpinEdit.Value )  );


  if not Mg³a_Informacja_Dodatkowa_Pomiñ_CheckBox.Checked then
    if   ( Sender = nil )
      or (
               ( Sender <> nil )
           and ( TComponent(Sender).Name <> Gra_GLCadencer.Name ) // Je¿eli zmiana mg³y wynika z zanurzania i wynurzania kamery to nie wyœwietla informacji.
         ) then
      Informacja_Dodatkowa_Dodaj(   Mg³a_Etykieta_Label.Caption + ' ' + Trim(  FormatFloat( '### ### ##0', Mg³a_SpinEdit.Value )  )   );

end;//---//Mg³a_SpinEditChange().

//Morze_Wzburzenie_SpinEditChange().
procedure TStatki_Form.Morze_Wzburzenie_SpinEditChange( Sender: TObject );
var
  fale__wysokoœæ_bazowa_l : single;
begin

  if czy_klient_g then
    fale__wysokoœæ_bazowa_l := fale__wysokoœæ_bazowa__serwer_g
  else//if czy_klient_g then
    fale__wysokoœæ_bazowa_l := fale__wysokoœæ_bazowa_g;


  fale__fala_wysokoœæ_g := fale__wysokoœæ_bazowa_l * Morze_Wzburzenie_SpinEdit.Value * 0.01;
  fale__woda_poziom_g := fale__fala_wysokoœæ_g + fale__fala_wysokoœæ_g * 0.1; // Aby p³aszczyzna wody nie przeœwitywa³a pod falami.


  if not Morze_Informacja_Dodatkowa_Pomiñ_CheckBox.Checked then
    Informacja_Dodatkowa_Dodaj(   Morze_Wzburzenie_Etykieta_Label.Caption + ' ' + Trim(  FormatFloat( '### ### ##0', Morze_Wzburzenie_SpinEdit.Value )  )   );

  if czy_serwer_g then
    Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__gra__morze_wzburzenie_c, -99, IntToStr( Morze_Wzburzenie_SpinEdit.Value )  );

end;//---//Morze_Wzburzenie_SpinEditChange().

//Mysz_Czu³oœæ_EditChange().
procedure TStatki_Form.Mysz_Czu³oœæ_EditChange( Sender: TObject );
begin

  // Podstawowy SpinEdit pozwala tylko na liczby ca³kowite a nie chcê dodawaæ komponentów, których mo¿e nie byæ w podstawowych wersjach IDE.

  try
    Gra_GLUserInterface.MouseSpeed := String_To__Float( Mysz_Czu³oœæ_Edit.Text );
  except
  end;
  //---//try

  mysz_czu³oœæ_g := Gra_GLUserInterface.MouseSpeed;


  try
    mysz_czu³oœæ_luneta_g := String_To__Float( Mysz_Czu³oœæ_Luneta_Edit.Text );
  except
  end;
  //---//try

  Mysz_Czu³oœæ_Label.Caption := Trim(  FormatFloat( '### ### ##0.000000', Gra_GLUserInterface.MouseSpeed )  );
  Mysz_Czu³oœæ_Luneta_Label.Caption := Trim(  FormatFloat( '### ### ##0.000000', mysz_czu³oœæ_luneta_g )  );

end;//---//Mysz_Czu³oœæ_EditChange().

//Niebo_Rodzaj_RadioGroupClick().
procedure TStatki_Form.Niebo_Rodzaj_RadioGroupClick( Sender: TObject );
begin

  Gra_GLSkyDome.Visible := Niebo_Rodzaj_RadioGroup.ItemIndex = 2; // standardowe
  Gra_GLEarthSkyDome.Visible := Niebo_Rodzaj_RadioGroup.ItemIndex = 0; // alternatywne

  Radar_GLSkyDome.Visible := Radar__Niebo_Rodzaj_RadioGroup.ItemIndex = 2; // standardowe
  Radar_GLEarthSkyDome.Visible := Radar__Niebo_Rodzaj_RadioGroup.ItemIndex = 0; // alternatywne


  Noc_SpinEditChange( Sender );

end;//---//Niebo_Rodzaj_RadioGroupClick().

//Noc_SpinEditChange().
procedure TStatki_Form.Noc_SpinEditChange( Sender: TObject );

  //Funkcja Gwiazdy_Iloœæ_Zmieñ() w Noc_SpinEditChange().
  procedure Gwiazdy_Iloœæ_Zmieñ( const gwiazdy_iloœæ_f : real; gl_sky_dome_f : GLS.SkyDome.TGLSkyDome );
  var
    gwiazdy_iloœæ_wspó³czynnik_l_l : real;
  begin

    if gl_sky_dome_f = nil then
      Exit;


    gwiazdy_iloœæ_wspó³czynnik_l_l := 0.2; // Wspó³czynnik iloœci gwiazd.

    if gl_sky_dome_f.Stars.Count < gwiazdy_iloœæ_wspó³czynnik_l_l * gwiazdy_iloœæ_f then
      gl_sky_dome_f.Stars.AddRandomStars(  Round( gwiazdy_iloœæ_wspó³czynnik_l_l * gwiazdy_iloœæ_f - gl_sky_dome_f.Stars.Count ), clWhite  ) // Iloœæ, kolor.
    else//if gl_sky_dome_f.Stars.Count < gwiazdy_iloœæ_wspó³czynnik_l_l * gwiazdy_iloœæ_f then
      while gl_sky_dome_f.Stars.Count > gwiazdy_iloœæ_wspó³czynnik_l_l * gwiazdy_iloœæ_f + 7 do // Iloœæ gwiazd nawigacyjnych.
        gl_sky_dome_f.Stars.Delete( gl_sky_dome_f.Stars.Count - 1 );

  end;//---//Funkcja Gwiazdy_Iloœæ_Zmieñ() w Noc_SpinEditChange().

var
  ztr_1,
  ztr_2,
  ztr_3
    : real;

  ztt_1,
  ztt_2
    : TTime;
begin//Noc_SpinEditChange().

  // Jest przeskalowane ze 100% na 1000% aby p³ynniej zmieniaæ wartoœci i nie u¿ywaæ komponentów z wartoœci¹ typu float.

  if Noc_SpinEdit.Value > 10000 then
    Noc_SpinEdit.Value := 1
  else//if Noc_SpinEdit.Value > Noc_SpinEdit.MaxValue then
  if Noc_SpinEdit.Value < 0 then
    Noc_SpinEdit.Value := 9999;


  if Noc_SpinEdit.Value > Noc_SpinEdit.MaxValue then
    Noc_SpinEdit.Value := Noc_SpinEdit.MaxValue
  else//if Noc_SpinEdit.Value > Noc_SpinEdit.MaxValue then
  if Noc_SpinEdit.Value < Noc_SpinEdit.MinValue then
    Noc_SpinEdit.Value := Noc_SpinEdit.MinValue;


  // 50% = 12:00.
  ztr_1 := Noc_SpinEdit.Value * 24 * 0.0001; // Godzina.
  ztr_2 := 59 * Frac( ztr_1 ); // Minuta.
  ztr_1 := Trunc( ztr_1 );

  Noc_Label.Caption :=
    Trim(  FormatFloat( '00', ztr_1 )  ) +
    ':' +
    Trim(  FormatFloat( '00', ztr_2 )  );


  if Gra_GLEarthSkyDome.Visible then
    begin

      {$region 'Koryguje ruch s³oñca z Gra_GLEarthSkyDome aby pokrywa³ siê z ruchem s³oñca S³oñce_GLSphere.'}
      if   (
                 ( ztr_1 >= 18 )
             and (
                      ( ztr_1 < 22 )
                   or (      // 22:40
                            ( ztr_1 = 22 )
                        and ( ztr_2 <= 40 )
                      )
                 )
           )
        or (
                 ( ztr_1 < 6 )
             and ( ztr_1 >= 1 )
           ) then
        begin

          // Wyd³u¿a dzieñ (jasnoœæ) spowalniaj¹c zachód s³oñca i przyœpieszaj¹c wschód s³oñca (zachód i wschód s³oñca trwaj¹ d³u¿ej).

          ztt_1 := EncodeTime(  System.Math.Floor( ztr_1 ), System.Math.Floor( ztr_2 ), 0, 0  );


          if    ( ztr_1 >= 18 )
            and ( ztr_1 <= 24 ) then
            begin

              ztr_1 := 21; // 21:33
              ztr_2 := 33;

              ztr_3 := 0.25; // Wartoœæ wyznaczona doœwiadczalnie.

              ztt_1 := System.DateUtils.IncMinute( ztt_1, 22 );
              ztt_1 := System.DateUtils.IncHour( ztt_1, 3 );

            end
          else//if    ( ztr_1 >= 18 ) (...)
            begin

              ztr_1 := 4; // 04:00
              ztr_2 := 0;

              ztr_3 := 0.3; // Wartoœæ wyznaczona doœwiadczalnie.

              ztt_1 := System.DateUtils.IncMinute( ztt_1, 0 );
              ztt_1 := System.DateUtils.IncHour( ztt_1, 5 );

            end;
          //---//if    ( ztr_1 >= 18 ) (...)


          ztt_2 := EncodeTime(  System.Math.Floor( ztr_1 ), System.Math.Floor( ztr_2 ), 0, 0  );


          ztr_1 := System.DateUtils.MinutesBetween( ztt_1, ztt_2 );

          ztr_1 := ztr_1 * ztr_3;


          ztt_2 := System.DateUtils.IncMinute( ztt_2, System.Math.Floor( ztr_1 )  );


          ztr_1 := System.DateUtils.HourOf( ztt_2 );
          ztr_2 := System.DateUtils.MinuteOf( ztt_2 );

        end
      else
      if    ( ztr_1 >= 5 )
        and ( ztr_1 < 19 ) then
        begin

          // S³oñce z Gra_GLEarthSkyDome porusza siê wolniej (wed³ug godzin) ni¿ s³oñce S³oñce_GLSphere i tutaj nadgania opóŸnienie..


          ztt_1 := EncodeTime(  System.Math.Floor( ztr_1 ), System.Math.Floor( ztr_2 ), 0, 0  );

          ztt_1 := System.DateUtils.IncHour( ztt_1, -5 );


          // Od 5 do 19 jest 14 godzin i w tym zasie opóŸnienie s³óñca Gra_GLEarthSkyDome wzglêdem s³oñca S³oñce_GLSphere wynosi 4 godziny.
          // 29 = 100 * 4 / 14
          // Procent do nadrabiania w ci¹gu godziny = 29% czyli 0.29.

          //ztt_1 := ztt_1 + ztt_1 * 0.29; // rano -0.1, po³udnie 0.24, wieczór 0.29


          // Od 5 do 12 (w 7 godzin) korekta przesuniêcia powinna siê zmieniæ z -0.01 do 0.24 = 0.25.
          // 0.25 / 7 = 0.036.

          // Od 12 do 23 (w 11 godzin) korekta przesuniêcia powinna siê zmieniæ z 0.25 do 0.29 = 0.04.
          // 0.04 / 11 = 0.0036.

          //if ztr_1 <= 12 then
          //  ztr_3 := ( ztr_1 - 5 ) * 0.036 - 0.01
          //else//if ztr_1 <= 12 then
          //  ztr_3 := ( ztr_1 - 5 ) * 0.0036 + 0.24 - 0.01;


          // Minuty zamieniane na procent z godziny
          // 1.67 = 100 * 100 * 60
          // 0.0167 = 1.67 / 100 -> podstawienie jako czêœæ u³amkowa do liczby.

          if ztr_1 <= 12 then
            ztr_3 := (  ( ztr_1 - 5 ) + ( ztr_2 * 0.0167 )  ) * 0.036 - 0.01
          else//if ztr_1 <= 12 then
            //ztr_3 := (  ( ztr_1 - 5 ) + ( ztr_2 * 0.0167 )  ) * 0.0036 + 0.24 - 0.01;
            ztr_3 := (  ( ztr_1 - 5 ) + ( ztr_2 * 0.0167 )  ) * 0.0036 + 0.23;  // Uproszczenie obliczeñ.


          ztt_1 := ztt_1 + ztt_1 * ztr_3;

          ztt_1 := System.DateUtils.IncHour( ztt_1, 5 );


          ztr_1 := System.DateUtils.HourOf( ztt_1 );
          ztr_2 := System.DateUtils.MinuteOf( ztt_1 );

        end;
      //---//if    ( ztr_1 >= 5 ) (...)
      //else//if    ( ztr_1 >= 5 ) (...)
        // Ruch s³oñca z Gra_GLEarthSkyDome i s³oñca S³oñce_GLSphere s¹ takie same (wed³ug czasu).
      {$endregion 'Koryguje ruch s³oñca z Gra_GLEarthSkyDome aby pokrywa³ siê z ruchem s³oñca S³oñce_GLSphere.'}

      Gra_GLEarthSkyDome.SetSunAtTime( ztr_1, ztr_2 );


      {$region 'Modyfikuje poœwiatê wokó³ s³oñca.'}
      if Noc_SpinEdit.Value < 1000 then
        ztr_1 := 80
      else//if Noc_SpinEdit.Value < 1000 then
      if Noc_SpinEdit.Value > 6000 then
        ztr_1 := 15 + ( Noc_SpinEdit.Value - 6000 ) * 0.0455 // 0.0455 = / 22 // Wartoœæ wyznaczona doœwiadczalnie.
      else//if Noc_SpinEdit.Value > 6000 then
      if    ( Noc_SpinEdit.Value >= 1000 )
        and ( Noc_SpinEdit.Value < 3000 ) then
        ztr_1 := 80 - ( Noc_SpinEdit.Value - 1000 ) * 0.0455 // 0.0455 = / 22 // Wartoœæ wyznaczona doœwiadczalnie.
      else//if    ( Noc_SpinEdit.Value >= 1000 ) (...)
        ztr_1 := 15;


      if ztr_1 > 110 then
        ztr_1 := 110
      else//if ztr_1 > 110 then
      if ztr_1 < 15 then
        ztr_1 := 15;
      {$endregion 'Modyfikuje poœwiatê wokó³ s³oñca.'}

      Gra_GLEarthSkyDome.Turbidity := ztr_1;

    end;
  //---//if Gra_GLEarthSkyDome.Visible then


  ztr_1 := ( 100 - Noc_SpinEdit.Value ) * 0.0001;
  S³oñce_GLDummyCube.RollAngle := 360 * ztr_1;


  // Przeskalowanie zakresu k¹ta s³oñca 62.5 - 100 - 37.5 na 0 - 100 - 0%.
  if Noc_SpinEdit.Value <= 3750 then
    ztr_1 := 3750 - Noc_SpinEdit.Value
  else//if Noc_SpinEdit.Value <= 3750 then
  if Noc_SpinEdit.Value >= 6250 then
    ztr_1 := Noc_SpinEdit.Value - 6250
  else//if Noc_SpinEdit.Value >= 6250 then
    ztr_1 := 0;

  ztr_1 := ztr_1 * 10000 / 3750;
  //---// Przeskalowanie zakresu k¹ta s³oñca 62.5 - 100 - 37.5 na 0 - 100 - 0%.


  Gwiazdy_Iloœæ_Zmieñ( ztr_1, Gra_GLSkyDome );
  Gwiazdy_Iloœæ_Zmieñ( ztr_1, Gra_GLEarthSkyDome );


  ztr_1 := ( 10000 - ztr_1 ) * 0.0001; // Miêdzy œwitem a zmierzchem ma wartoœæ 1 a poza maleje do 0 o pó³nocy

  dzieñ_jasnoœæ_g := ztr_1;

  Gra_GLLightSource.Diffuse.SetColor( ztr_1, ztr_1, ztr_1, 1 );
  Gra_GLSceneViewer.Buffer.FogEnvironment.FogColor.SetColor( ztr_1, ztr_1, ztr_1, Gra_GLSceneViewer.Buffer.FogEnvironment.FogColor.Alpha ); // Zmienia tylko kolor mg³y bez przezroczystoœci.

  if Gra_GLSkyDome.Visible then
    begin

      Gra_GLSkyDome.Bands.Items[ 0 ].StartColor.Red := GLS.Color.clrDarkTurquoise.X * ztr_1;
      Gra_GLSkyDome.Bands.Items[ 0 ].StartColor.Green := GLS.Color.clrDarkTurquoise.Y * ztr_1;
      Gra_GLSkyDome.Bands.Items[ 0 ].StartColor.Blue := GLS.Color.clrDarkTurquoise.Z * ztr_1;

      Gra_GLSkyDome.Bands.Items[ 0 ].StopColor.Red := GLS.Color.clrNewMidnightBlue.X * ztr_1;
      Gra_GLSkyDome.Bands.Items[ 0 ].StopColor.Green := GLS.Color.clrNewMidnightBlue.Y * ztr_1;
      Gra_GLSkyDome.Bands.Items[ 0 ].StopColor.Blue := GLS.Color.clrNewMidnightBlue.Z * ztr_1;

      Gra_GLSkyDome.Bands.Items[ 1 ].StartColor.Red := GLS.Color.clrNewMidnightBlue.X * ztr_1;
      Gra_GLSkyDome.Bands.Items[ 1 ].StartColor.Green := GLS.Color.clrNewMidnightBlue.Y * ztr_1;
      Gra_GLSkyDome.Bands.Items[ 1 ].StartColor.Blue := GLS.Color.clrNewMidnightBlue.Z * ztr_1;

      Gra_GLSkyDome.Bands.Items[ 1 ].StopColor.Red := GLS.Color.clrNavy.X * ztr_1;
      Gra_GLSkyDome.Bands.Items[ 1 ].StopColor.Green := GLS.Color.clrNavy.Y * ztr_1;
      Gra_GLSkyDome.Bands.Items[ 1 ].StopColor.Blue := GLS.Color.clrNavy.Z * ztr_1;

      Gra_GLSkyDome.Bands.Items[ 2 ].StartColor.Red := GLS.Color.clrWhite.X * ztr_1;
      Gra_GLSkyDome.Bands.Items[ 2 ].StartColor.Green := GLS.Color.clrWhite.Y * ztr_1;
      Gra_GLSkyDome.Bands.Items[ 2 ].StartColor.Blue := GLS.Color.clrWhite.Z * ztr_1;

      Gra_GLSkyDome.Bands.Items[ 2 ].StopColor.Red := GLS.Color.clrDarkTurquoise.X * ztr_1;
      Gra_GLSkyDome.Bands.Items[ 2 ].StopColor.Green := GLS.Color.clrDarkTurquoise.Y * ztr_1;
      Gra_GLSkyDome.Bands.Items[ 2 ].StopColor.Blue := GLS.Color.clrDarkTurquoise.Z * ztr_1;

    end;
  //---//if Gra_GLSkyDome.Visible then


  if    ( not Gra_GLSkyDome.Visible )
    and ( not Gra_GLEarthSkyDome.Visible )then
    //Gra_GLSceneViewer.Buffer.BackgroundColor := RGB(  Round( 255 * ztr_1 ), Round( 255 * ztr_1 ), Round( 255 * ztr_1 )  );
    Gra_GLSceneViewer.Buffer.BackgroundColor := RGB(  0, 0, Round( 128 * ztr_1 )  ); // Vcl.Graphics.clNavy


  // Przeskalowanie zakresu k¹ta s³oñca 25 - 50 - 75 na 0 - 100 - 0%.
  if    ( Noc_SpinEdit.Value >= 2500 )
    and ( Noc_SpinEdit.Value <= 5000 ) then
    ztr_1 := Noc_SpinEdit.Value - 2500
  else//if Noc_SpinEdit.Value >= 2500 then
  if    ( Noc_SpinEdit.Value > 5000 )
    and ( Noc_SpinEdit.Value <= 7500 ) then
    ztr_1 := 7500 - Noc_SpinEdit.Value
  else//if Noc_SpinEdit.Value > 5000 then
    ztr_1 := 0;

  //ztr_1 := ( ztr_1 * 10000 / 2500 ) * 0.0001; // Uproszczenie obliczeñ.
  ztr_1 := ztr_1 / 2500;
  //---// Przeskalowanie zakresu k¹ta s³oñca 62.5 - 100 - 37.5 na 0 - 100%.


  // Modyfikuje odcieñ s³oñca i ksiê¿yca.
  ztr_2 := 0; // Tutaj tymczasowo jako ograniczenie iloœæ przeliczeñ odcieni.

  if    ( Noc_SpinEdit.Value >= 3750 )
    and ( Noc_SpinEdit.Value <= 6250 )
    and ( s³oñce_ksiê¿yc_odcieñ_pora_przeliczone_g <> 0 ) then
    begin

      // Dzieñ.

      ztr_2 := 1;

      Ksiê¿yc_GLSphere.TagFloat := 0.5 + Random( 5 ) * 0.1;

      s³oñce_ksiê¿yc_odcieñ_pora_przeliczone_g := 0;
      S³oñce_GLSphere.TagFloat := 0;

    end
  else//if    ( Noc_SpinEdit.Value >= 3750 ) (...)
  if    ( Noc_SpinEdit.Value > 6250 )
    and ( s³oñce_ksiê¿yc_odcieñ_pora_przeliczone_g <> 1 ) then
    begin

      // Zachód.

      ztr_2 := 2;

      s³oñce_ksiê¿yc_odcieñ_pora_przeliczone_g := 1;
      S³oñce_GLSphere.TagFloat := Random( 5 ) * 0.1;

      Gra_GLEarthSkyDome.SunZenithColor.SetColor(  0.85 + Random( 16 ) * 0.01, 0.85 + Random( 16 ) * 0.01, 0.85 + Random( 16 ) * 0.01  );

    end
  else//if    ( Noc_SpinEdit.Value > 6250 ) (...)
  if    ( Noc_SpinEdit.Value < 3750 )
    and ( s³oñce_ksiê¿yc_odcieñ_pora_przeliczone_g <> 2 ) then
    begin

      // Wschód.

      ztr_2 := 2;

      s³oñce_ksiê¿yc_odcieñ_pora_przeliczone_g := 2;
      S³oñce_GLSphere.TagFloat := Random( 5 ) * 0.1;

      Gra_GLEarthSkyDome.SunZenithColor.SetColor(  0.85 + Random( 16 ) * 0.01, 0.85 + Random( 16 ) * 0.01, 0.85 + Random( 16 ) * 0.01  );

    end;
  //---//if    ( Noc_SpinEdit.Value < 3750 ) (...)


  if   ( ztr_2 = 1 )
    or ( ztr_2 = 2 ) then
    begin

      S³oñce_GLSphere.Material.FrontProperties.Emission.SetColor( 1, ztr_1, S³oñce_GLSphere.TagFloat );

      Gra_GLEarthSkyDome.SunDawnColor.Color := S³oñce_GLSphere.Material.FrontProperties.Emission.Color;

    end;
  //---//if   ( ztr_2 = 1 ) (...)

  if ztr_2 = 1 then
    Ksiê¿yc_GLSphere.Material.FrontProperties.Emission.SetColor( 0.5, 0.5, Ksiê¿yc_GLSphere.TagFloat );
  //---// Modyfikuje odcieñ s³oñca i ksiê¿yca.


  Pod_Wod¹_GLHUDSprite.Material.FrontProperties.Diffuse.Red := Woda_Góra_GLPlane.Material.FrontProperties.Diffuse.Red * dzieñ_jasnoœæ_g;
  Pod_Wod¹_GLHUDSprite.Material.FrontProperties.Diffuse.Green := Woda_Góra_GLPlane.Material.FrontProperties.Diffuse.Green * dzieñ_jasnoœæ_g;
  Pod_Wod¹_GLHUDSprite.Material.FrontProperties.Diffuse.Blue := Woda_Góra_GLPlane.Material.FrontProperties.Diffuse.Blue * dzieñ_jasnoœæ_g;
  //???
  //Woda_Dó³_GLPlane.Material.FrontProperties.Diffuse.Red := Woda_Góra_GLPlane.Material.FrontProperties.Diffuse.Red * dzieñ_jasnoœæ_g;
  //Woda_Dó³_GLPlane.Material.FrontProperties.Diffuse.Green := Woda_Góra_GLPlane.Material.FrontProperties.Diffuse.Green * dzieñ_jasnoœæ_g;
  //Woda_Dó³_GLPlane.Material.FrontProperties.Diffuse.Blue := Woda_Góra_GLPlane.Material.FrontProperties.Diffuse.Blue * dzieñ_jasnoœæ_g;
  //
  //Woda_Dó³_GLPlane.Material.FrontProperties.Emission.Red := Woda_Góra_GLPlane.Material.FrontProperties.Diffuse.Red * dzieñ_jasnoœæ_g;
  //Woda_Dó³_GLPlane.Material.FrontProperties.Emission.Green := Woda_Góra_GLPlane.Material.FrontProperties.Diffuse.Green * dzieñ_jasnoœæ_g;
  //Woda_Dó³_GLPlane.Material.FrontProperties.Emission.Blue := Woda_Góra_GLPlane.Material.FrontProperties.Diffuse.Blue * dzieñ_jasnoœæ_g;


  Punkt_Naprowadzaj__Kolor_Zmieñ();


  Wygl¹d_Elementy__Noc_Zmieñ();


  if czy_serwer_g then
    Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__gra__noc_c, -99, IntToStr( Noc_SpinEdit.Value )  );


  if not Noc__Informacja_Dodatkowa_Pomiñ_CheckBox.Checked then
    //Informacja_Dodatkowa_Dodaj(   Noc_Label.Caption + ' ' + Trim(  FormatFloat( '### ### ##0', Noc_SpinEdit.Value )  )   );
    Informacja_Dodatkowa_Dodaj(   Noc_Label.Caption   );

end;//---//Noc_SpinEditChange().

//PageControl1Change().
procedure TStatki_Form.PageControl1Change( Sender: TObject );
var
  zti : integer;
begin

  if   (
             ( PageControl1.ActivePage = Klawiatura_Konfiguracja_TabSheet )
         and ( Klawiatura_Konfiguracja__Rozmiar_Zak³adki_Poszerz_CheckBox.Checked )
       )
    or (
            ( PageControl1.ActivePage = Statystyki_TabSheet )
        and ( Statystyki__Rozmiar_Zak³adki_Poszerz_CheckBox.Checked )
       ) then
    begin

      // Przy zmianie zak³adki na Klawiatura_Konfiguracja_TabSheet, Statystyki_TabSheet zapamiêtuje aktualny rozmiar i zwiêksza szerokoœæ.

      if Self.Width >= 400 then
        zti := Self.Width - 50
      else//if Self.Width >= 400 then
        zti := 0;

      if    (
                 (
                       ( PageControl1.ActivePage = Klawiatura_Konfiguracja_TabSheet )
                   and ( Klawiatura_Konfiguracja__Rozmiar_Zak³adki_Poszerz_CheckBox.Checked )
                 )
              or (
                       ( PageControl1.ActivePage = Statystyki_TabSheet )
                   and ( Statystyki__Rozmiar_Zak³adki_Poszerz_CheckBox.Checked )
                 )
            )
        and ( zti > 0 )
        and ( PageControl1.Width < zti ) then
        begin

          page_control_1_szerokoœæ_kopia_g := PageControl1.Width;
          PageControl1.Width := zti;

        end;
      //---//if    ( (...)

    end
  else//if   ( (...)
    begin

      // Przy zmianie zak³adki na inna ni¿ Klawiatura_Konfiguracja_TabSheet, Statystyki_TabSheet przywraca poprzedni¹ szerokoœæ.

      if    (
                 (
                       ( page_control_1_active_page_kopia_tab_sheet_g = Klawiatura_Konfiguracja_TabSheet )
                   and ( Klawiatura_Konfiguracja__Rozmiar_Zak³adki_Poszerz_CheckBox.Checked )
                 )
              or (
                       ( page_control_1_active_page_kopia_tab_sheet_g = Statystyki_TabSheet )
                   and ( Statystyki__Rozmiar_Zak³adki_Poszerz_CheckBox.Checked )
                 )
            )
        and ( page_control_1_szerokoœæ_kopia_g > 0 ) then
        begin

          PageControl1.Width := page_control_1_szerokoœæ_kopia_g;
          page_control_1_szerokoœæ_kopia_g := 0;

        end;
      //---//if    ( (...)

    end;
  //---//if   ( (...)


  page_control_1_active_page_kopia_tab_sheet_g := PageControl1.ActivePage;

end;//---//PageControl1Change().

//Pe³ny_Ekran_CheckBoxClick().
procedure TStatki_Form.Pe³ny_Ekran_CheckBoxClick( Sender: TObject );
begin

  if Pe³ny_Ekran_CheckBox.Checked then
    begin

      window_state_kopia_g := Self.WindowState;

      Self.BorderStyle := bsNone;
      Self.WindowState := wsMaximized;
      Self.Left := 0;
      Self.Top := 0;
      Self.Height := Screen.Height;
      Self.Width := Screen.Width;

      Self.BringToFront();
      //Radar_Panel.BringToFront();


      if PageControl1.Width = 1 then
        begin

          PageControl1.Width := 0;
          Opcje_Pionowy_Splitter.Visible := false;

        end;
      //---//if PageControl1.Width = 1 then

    end
  else//if Pe³ny_Ekran_CheckBox.Checked then
    begin

      Self.WindowState := window_state_kopia_g;
      Self.BorderStyle := bsSizeable;


      if PageControl1.Width = 0 then
        begin

          Opcje_Pionowy_Splitter.Visible := true;
          PageControl1.Width := 1;

        end;
      //---//if PageControl1.Width = 0 then

    end;
  //---//if Pe³ny_Ekran_CheckBox.Checked then


  Pe³ny_Ekran__Znikaj¹ce_Elementy_Widocznoœæ_Ustaw();

end;//---//Pe³ny_Ekran_CheckBoxClick().

//Pokój_Rozmów_Przyciski_PanelMouseDown().
procedure TStatki_Form.Pokój_Rozmów_Przyciski_PanelMouseDown( Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer );
begin

  pokój_rozmów__zmiana_szerokoœci__szerokoœæ_pocz¹tkowa_g := Pokój_Rozmów_GroupBox.Width;
  pokój_rozmów__zmiana_szerokoœci__wysokoœæ_pocz¹tkowa_g := Pokój_Rozmów_GroupBox.Height;
  pokój_rozmów__zmiana_szerokoœci__x_pocz¹tkowy_g := X;
  pokój_rozmów__zmiana_szerokoœci__y_pocz¹tkowy_g := Y;

  pokój_rozmów__zmiana_szerokoœci__aktywnoœæ_g := true;

end;//---//Pokój_Rozmów_Przyciski_PanelMouseDown().

//Pokój_Rozmów_Przyciski_PanelMouseMove().
procedure TStatki_Form.Pokój_Rozmów_Przyciski_PanelMouseMove( Sender: TObject; Shift: TShiftState; X, Y: Integer );
var
  zti : integer;
begin

  if pokój_rozmów__zmiana_szerokoœci__aktywnoœæ_g then
    begin

      if Pokój_Rozmów__Na_Ekranie_CheckBox.Checked then
        begin

          zti := pokój_rozmów__zmiana_szerokoœci__szerokoœæ_pocz¹tkowa_g + X - pokój_rozmów__zmiana_szerokoœci__x_pocz¹tkowy_g;

          if zti >= 25 then
            Pokój_Rozmów_GroupBox.Width := zti;

        end;
      //---//if Pokój_Rozmów__Na_Ekranie_CheckBox.Checked then


      zti := pokój_rozmów__zmiana_szerokoœci__wysokoœæ_pocz¹tkowa_g + Y - pokój_rozmów__zmiana_szerokoœci__y_pocz¹tkowy_g;

      if zti >= 50 then
        Pokój_Rozmów_GroupBox.Height := zti;

    end;
  //---//if pokój_rozmów__zmiana_szerokoœci__aktywnoœæ_g then

end;//---//Pokój_Rozmów_Przyciski_PanelMouseMove().

//Pokój_Rozmów_Przyciski_PanelMouseUp().
procedure TStatki_Form.Pokój_Rozmów_Przyciski_PanelMouseUp( Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer );
begin

  pokój_rozmów__zmiana_szerokoœci__aktywnoœæ_g := false;

  FormResize( Sender );

end;//---//Pokój_Rozmów_Przyciski_PanelMouseUp().

//Pokój_Rozmów__Ignoruj_CheckListBoxKeyDown().
procedure TStatki_Form.Pokój_Rozmów__Ignoruj_CheckListBoxKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
var
  i : integer;
begin

  if    ( Key = 65 ) // a.
    and ( Shift = [ ssCtrl ] ) then
    Pokój_Rozmów__Ignoruj_CheckListBox.CheckAll( Vcl.StdCtrls.cbChecked, false, false );

  if    ( Key = 78 ) // n.
    and ( Shift = [ ssCtrl ] ) then
    Pokój_Rozmów__Ignoruj_CheckListBox.CheckAll( Vcl.StdCtrls.cbUnchecked, false, false );

  if    ( Key = 79 ) // o.
    and ( Shift = [ ssCtrl ] ) then
    for i := 0 to Pokój_Rozmów__Ignoruj_CheckListBox.Items.Count - 1 do
      Pokój_Rozmów__Ignoruj_CheckListBox.Checked[ i ] := not Pokój_Rozmów__Ignoruj_CheckListBox.Checked[ i ];

end;//---//Pokój_Rozmów__Ignoruj_CheckListBoxKeyDown().

//Pokój_Rozmów__Na_Ekranie_CheckBoxClick().
procedure TStatki_Form.Pokój_Rozmów__Na_Ekranie_CheckBoxClick( Sender: TObject );
begin

  if Pokój_Rozmów__Na_Ekranie_CheckBox.Checked then
    begin

      // Na ekranie.

      Pokój_Rozmów_GroupBox.Align := alNone;
      Pokój_Rozmów_GroupBox.Parent := Self;
      Pokój_Rozmów_GroupBox.Anchors := [ akLeft, akBottom ];
      Pokój_Rozmów_GroupBox.Left := 0;

      Pokój_Rozmów__Ukryj_Button.Caption := t³umaczenie_komunikaty_r.komunikat__pokój_rozmów__ukryj__etykieta;
      Pokój_Rozmów__Ukryj_Button.Hint := t³umaczenie_komunikaty_r.komunikat__pokój_rozmów__ukryj__podpowiedŸ;

      Pokój_Rozmów_GroupBox.Width := pokój_rozmów__szerokoœæ_kopia_g;

      FormResize( Sender );

      Pokój_Rozmów__Wiadomoœæ_Edit.SetFocus();

      //???
      // Gdy mysz obraca kamerê to po wyœwietleniu pokoju rozmów na ekranie i 'schowaniu' go mo¿e przeskoczyæ widok.
      //if Gra_GLUserInterface.MouseLookActive then
      //  begin
      //
      //    ztw := klawisz__mouse_look_active.klawisz;
      //    Gra_GLSceneViewerKeyDown( Sender, ztw, [] ); // To rozwi¹zanie uniemo¿liwia wyœwietlenie pokoju rozmów na ekranie.
      //
      //  end;
      ////---//if Gra_GLUserInterface.MouseLookActive then

    end
  else//if Pokój_Rozmów__Na_Ekranie_CheckBox.Checked then
    begin

      // W zak³adkach.

      pokój_rozmów__szerokoœæ_kopia_g := Pokój_Rozmów_GroupBox.Width;

      Pokój_Rozmów_GroupBox.Parent := Gra_ScrollBox;
      Pokój_Rozmów_GroupBox.Align := alBottom;
      Pokój_Rozmów_GroupBox.Align := alTop;

      Pokój_Rozmów__Ukryj_Button.Caption := t³umaczenie_komunikaty_r.komunikat__pokój_rozmów__na_ekranie_gry__etykieta;
      Pokój_Rozmów__Ukryj_Button.Hint := t³umaczenie_komunikaty_r.komunikat__pokój_rozmów__na_ekranie_gry__podpowiedŸ;


      if not Gra_GLSceneViewer.skupienie_ustawione then // Prze³¹czanie t³umaczeñ wywo³uje strza³ statku (konfiguracja klawiatury przypisana do LPM).
        //Gra_GLSceneViewer.SetFocus();
        Gra_GLSceneViewerMouseDown( Sender, System.UITypes.TMouseButton.mbLeft, [ System.Classes.ssHorizontal ], 0, 0 ); // Ze wzglêdu na Gra_GLSceneViewer.skupienie_ustawione i ssHorizontal nie strzeli.

    end;
  //---//if Pokój_Rozmów__Na_Ekranie_CheckBox.Checked then


  SendMessage( Pokój_Rozmów_Memo.Handle, WM_VSCROLL, SB_BOTTOM, 0 ); // Po prze³¹czeniu pionowy suwak przesuwa siê na sam¹ górê.

end;//---//Pokój_Rozmów__Na_Ekranie_CheckBoxClick().

//Pokój_Rozmów__Ukryj_ButtonClick().
procedure TStatki_Form.Pokój_Rozmów__Ukryj_ButtonClick( Sender: TObject );
begin

  Pokój_Rozmów__Na_Ekranie_CheckBox.Checked := not Pokój_Rozmów__Na_Ekranie_CheckBox.Checked;

end;//---//Pokój_Rozmów__Ukryj_ButtonClick().

//Pokój_Rozmów__Wiadomoœæ_EditKeyDown().
procedure TStatki_Form.Pokój_Rozmów__Wiadomoœæ_EditKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
var
  zti : integer;
begin

  // Enter.
  if Key = 13 then
    begin

      Key := 0;
      Pokój_Rozmów__Wyœlij_Wiadomoœæ_ButtonClick( Sender );

    end;
  //---//if Key = 13 then

  // Escape.
  if Key = 27 then
    begin

      Key := 0;

      if Pokój_Rozmów__Na_Ekranie_CheckBox.Checked then
        Pokój_Rozmów__Na_Ekranie_CheckBox.Checked := false;

    end;
  //---//if Key = 27 then


  // I.
  if    ( ssCtrl in Shift )
    and (  Key = Ord( 'I' )  ) then
    begin

      Key := 0;

      zti := Pokój_Rozmów__Wiadomoœæ_Edit.SelStart;
      Pokój_Rozmów__Wiadomoœæ_Edit.Text := si_pokój_rozmów__polecenie_symbol_c + Pokój_Rozmów__Wiadomoœæ_Edit.Text;
      Pokój_Rozmów__Wiadomoœæ_Edit.SelStart := zti + Length( si_pokój_rozmów__polecenie_symbol_c );

    end;
  //---//if    ( ssCtrl in Shift ) (...)

  // J.
  if    ( ssCtrl in Shift )
    and (  Key = Ord( 'J' )  ) then
    begin

      Key := 0;

      zti := Pokój_Rozmów__Wiadomoœæ_Edit.SelStart;
      Pokój_Rozmów__Wiadomoœæ_Edit.Text := Pokój_Rozmów__Wiadomoœæ_Edit.Text + si_pokój_rozmów__polecenie_symbol__separator_identyfikatora_c + ' ' + IntToStr( Gracz_Identyfikator() );
      Pokój_Rozmów__Wiadomoœæ_Edit.SelStart := zti + Length( si_pokój_rozmów__polecenie_symbol_c );

    end;
  //---//if    ( ssCtrl in Shift ) (...)


  // S.
  if    ( ssCtrl in Shift )
    and ( ssShift in Shift )
    and (  Key = Ord( 'S' )  ) then
    begin

      Key := 0;

        if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
          and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____samolot_nadawca ) <> ''  ) then
          Pokój_Rozmów__Wiadomoœæ_Edit.Text := Pokój_Rozmów__Wiadomoœæ_Edit.Text + si_pokój_rozmów__polecenie_symbol__t³umaczenie__prefiks_c + t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____samolot_nadawca + si_pokój_rozmów__polecenie_symbol__t³umaczenie__sufiks_c
        else
          Pokój_Rozmów__Wiadomoœæ_Edit.Text := Pokój_Rozmów__Wiadomoœæ_Edit.Text + si_pokój_rozmów__polecenie_symbol__samolot_nadawca_c;

      Pokój_Rozmów__Wiadomoœæ_Edit.SelStart := Length( Pokój_Rozmów__Wiadomoœæ_Edit.Text );

    end
  else//if    ( ssCtrl in Shift ) (...)
    if    ( ssCtrl in Shift )
      and (  Key = Ord( 'S' )  ) then
      begin

        Key := 0;

        if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
          and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____samolot ) <> ''  ) then
          Pokój_Rozmów__Wiadomoœæ_Edit.Text := Pokój_Rozmów__Wiadomoœæ_Edit.Text + si_pokój_rozmów__polecenie_symbol__t³umaczenie__prefiks_c + t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____samolot + si_pokój_rozmów__polecenie_symbol__t³umaczenie__sufiks_c
        else
          Pokój_Rozmów__Wiadomoœæ_Edit.Text := Pokój_Rozmów__Wiadomoœæ_Edit.Text + si_pokój_rozmów__polecenie_symbol__samolot_c;

        Pokój_Rozmów__Wiadomoœæ_Edit.SelStart := Length( Pokój_Rozmów__Wiadomoœæ_Edit.Text );

      end;
    //---//if    ( ssCtrl in Shift ) (...)


  // T.
  if    ( ssCtrl in Shift )
    and ( ssShift in Shift )
    and (  Key = Ord( 'T' )  ) then
    begin

      Key := 0;

        if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
          and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____statek_nadawca ) <> ''  ) then
          Pokój_Rozmów__Wiadomoœæ_Edit.Text := Pokój_Rozmów__Wiadomoœæ_Edit.Text + si_pokój_rozmów__polecenie_symbol__t³umaczenie__prefiks_c + t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____statek_nadawca + si_pokój_rozmów__polecenie_symbol__t³umaczenie__sufiks_c
        else
          Pokój_Rozmów__Wiadomoœæ_Edit.Text := Pokój_Rozmów__Wiadomoœæ_Edit.Text + si_pokój_rozmów__polecenie_symbol__statek_nadawca_c;

      Pokój_Rozmów__Wiadomoœæ_Edit.SelStart := Length( Pokój_Rozmów__Wiadomoœæ_Edit.Text );

    end
  else//if    ( ssCtrl in Shift ) (...)
    if    ( ssCtrl in Shift )
      and (  Key = Ord( 'T' )  ) then
      begin

        Key := 0;

        if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
          and (  Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____statek ) <> ''  ) then
          Pokój_Rozmów__Wiadomoœæ_Edit.Text := Pokój_Rozmów__Wiadomoœæ_Edit.Text + si_pokój_rozmów__polecenie_symbol__t³umaczenie__prefiks_c + t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____statek + si_pokój_rozmów__polecenie_symbol__t³umaczenie__sufiks_c
        else
          Pokój_Rozmów__Wiadomoœæ_Edit.Text := Pokój_Rozmów__Wiadomoœæ_Edit.Text + si_pokój_rozmów__polecenie_symbol__statek_c;

        Pokój_Rozmów__Wiadomoœæ_Edit.SelStart := Length( Pokój_Rozmów__Wiadomoœæ_Edit.Text );

      end;
    //---//if    ( ssCtrl in Shift ) (...)


  if    ( Sender <> nil )
    and ( TComponent(Sender).Name = Pokój_Rozmów__Wiadomoœæ_Edit.Name ) then
    if ssShift in Shift then
      begin

        // Polecenia dla SI.

        // Kursor góra.
        if Key = VK_UP then // 38.
          begin

            if pokój_rozmów__si_polecenia__indeks_ostatni_g < Length( pokój_rozmów__si_polecenia_t ) - 1 then
              pokój_rozmów__si_polecenia__indeks_ostatni_g := pokój_rozmów__si_polecenia__indeks_ostatni_g + 1;

            if Length( pokój_rozmów__si_polecenia_t ) > pokój_rozmów__si_polecenia__indeks_ostatni_g then
              begin

                Key := 0;

                zti := Pokój_Rozmów__Wiadomoœæ_Edit.SelStart;
                Pokój_Rozmów__Wiadomoœæ_Edit.Text := si_pokój_rozmów__polecenie_symbol_c + pokój_rozmów__si_polecenia_t[ pokój_rozmów__si_polecenia__indeks_ostatni_g ];
                Pokój_Rozmów__Wiadomoœæ_Edit.SelStart := zti;

              end;
            //---//if Length( pokój_rozmów__si_polecenia_t ) > pokój_rozmów__si_polecenia__indeks_ostatni_g then

          end
        else//if Key = VK_UP then
        // Kursor dó³.
        if Key = VK_DOWN then // 40.
          begin

            Key := 0;

            if pokój_rozmów__si_polecenia__indeks_ostatni_g > -1 then
              pokój_rozmów__si_polecenia__indeks_ostatni_g := pokój_rozmów__si_polecenia__indeks_ostatni_g - 1;

            if pokój_rozmów__si_polecenia__indeks_ostatni_g = -1 then
              begin

                Pokój_Rozmów__Wiadomoœæ_Edit.Text := '';

              end
            else//if pokój_rozmów__si_polecenia__indeks_ostatni_g < -1 then
              if Length( pokój_rozmów__si_polecenia_t ) > pokój_rozmów__si_polecenia__indeks_ostatni_g then
                begin

                  zti := Pokój_Rozmów__Wiadomoœæ_Edit.SelStart;
                  Pokój_Rozmów__Wiadomoœæ_Edit.Text := si_pokój_rozmów__polecenie_symbol_c + pokój_rozmów__si_polecenia_t[ pokój_rozmów__si_polecenia__indeks_ostatni_g ];
                  Pokój_Rozmów__Wiadomoœæ_Edit.SelStart := zti;

                end;
              //---//if    (  Length( pokój_rozmów__si_polecenia_t ) > pokój_rozmów__si_polecenia__indeks_ostatni_g  ) (...)

          end;
        //---//if Key = VK_DOWN then

      end
    else//if ssShift in Shift then
    if ssCtrl in Shift then
      begin

        // Adresaci.

        // Kursor góra.
        if Key = VK_UP then // 38.
          begin

            if Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.ItemIndex > 0 then
              Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.ItemIndex := Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.ItemIndex - 1;

          end
        else//if Key = VK_UP then
        // Kursor dó³.
        if Key = VK_DOWN then // 40.
          begin

            if Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.ItemIndex < Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Items.Count then
              Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.ItemIndex := Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.ItemIndex + 1;

          end;
        //---//if Key = VK_DOWN then

      end
    else//if ssCtrl in Shift then
      begin

        // Wys³ane wiadomoœci.

        // Kursor góra.
        if Key = VK_UP then // 38.
          begin

            if pokój_rozmów__ostatnia_wiadomoœci__indeks_ostatni_g > 0 then
              pokój_rozmów__ostatnia_wiadomoœci__indeks_ostatni_g := pokój_rozmów__ostatnia_wiadomoœci__indeks_ostatni_g - 1;

            if    ( pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list.Count > pokój_rozmów__ostatnia_wiadomoœci__indeks_ostatni_g )
              and (  Trim( pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list[ pokój_rozmów__ostatnia_wiadomoœci__indeks_ostatni_g ] ) <> ''  ) then
              begin

                Key := 0;

                zti := Pokój_Rozmów__Wiadomoœæ_Edit.SelStart;
                Pokój_Rozmów__Wiadomoœæ_Edit.Text := pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list[ pokój_rozmów__ostatnia_wiadomoœci__indeks_ostatni_g ];
                Pokój_Rozmów__Wiadomoœæ_Edit.SelStart := zti;

              end;
            //---//if    ( pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list.Count > pokój_rozmów__ostatnia_wiadomoœci__indeks_ostatni_g ) (...)

          end
        else//if Key = VK_UP then
        // Kursor dó³.
        if Key = VK_DOWN then // 40.
          begin

            Key := 0;

            if pokój_rozmów__ostatnia_wiadomoœci__indeks_ostatni_g <= pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list.Count - 1 then
              pokój_rozmów__ostatnia_wiadomoœci__indeks_ostatni_g := pokój_rozmów__ostatnia_wiadomoœci__indeks_ostatni_g + 1;

            if pokój_rozmów__ostatnia_wiadomoœci__indeks_ostatni_g = pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list.Count then
              begin

                Pokój_Rozmów__Wiadomoœæ_Edit.Text := '';

              end
            else//if pokój_rozmów__ostatnia_wiadomoœci__indeks_ostatni_g < pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list.Count then
              if    ( pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list.Count > pokój_rozmów__ostatnia_wiadomoœci__indeks_ostatni_g )
                and (  Trim( pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list[ pokój_rozmów__ostatnia_wiadomoœci__indeks_ostatni_g ] ) <> ''  ) then
                begin

                  zti := Pokój_Rozmów__Wiadomoœæ_Edit.SelStart;
                  Pokój_Rozmów__Wiadomoœæ_Edit.Text := pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list[ pokój_rozmów__ostatnia_wiadomoœci__indeks_ostatni_g ];
                  Pokój_Rozmów__Wiadomoœæ_Edit.SelStart := zti;

                end;
              //---//if    ( pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list.Count > pokój_rozmów__ostatnia_wiadomoœci__indeks_ostatni_g ) (...)

          end;
        //---//if Key = VK_DOWN then

      end;
    //---//if ssCtrl in Shift then

end;//---//Pokój_Rozmów__Wiadomoœæ_EditKeyDown().

//Pokój_Rozmów__Wyœlij_Wiadomoœæ_ButtonClick().
procedure TStatki_Form.Pokój_Rozmów__Wyœlij_Wiadomoœæ_ButtonClick( Sender: TObject );
var
  //i : integer;
  pokój_rozmów_r_l : TPokój_Rozmów_r;
begin

  if Trim( Pokój_Rozmów__Wiadomoœæ_Edit.Text ) <> '' then
    begin

      //if SecondsBetween( Now(), pokój_rozmów__ostatnia_wiadomoœæ_wys³ana_data_czas_g ) >= 1 then
      if MilliSecondsBetween( Now(), pokój_rozmów__ostatnia_wiadomoœæ_wys³ana_data_czas_g ) >= 500 then
        begin

          pokój_rozmów__ostatnia_wiadomoœæ_wys³ana_data_czas_g := Now();

          //Wieloosobowe__Tekst_Wyœlij( Pokój_Rozmów__Wiadomoœæ_Edit.Text );

          pokój_rozmów_r_l.id_nadawca := Gracz_Identyfikator();

          if pokój_rozmów_r_l.id_nadawca = -9999 then
            begin

              Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__niepoprawny_identyfikator_nadawcy, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION );
              //Exit; //???

            end;
          //---//if pokój_rozmów_r_l.id_nadawca = -9999 then

          if   ( Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.ItemIndex < 0 )
            or (  Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.ItemIndex > Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Items.Count - 1 )
            or (  not Assigned( Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Items.Objects[ Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.ItemIndex ] )  ) then
            begin

              Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nale¿y_wskazaæ_adresata_wiadomoœci, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION );
              Exit;

            end;
          //---//if   ( Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.ItemIndex < 0 ) (...)


          pokój_rozmów_r_l.id_odbiorca := TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj(Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Items.Objects[ Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.ItemIndex ]).id_odbiorca;
          pokój_rozmów_r_l.data_czas_wys³ania := Now();
          pokój_rozmów_r_l.odbiorca_rodzaj := TPokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj(Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.Items.Objects[ Pokój_Rozmów__Wyœlij_Do__Odbiorca_Rodzaj_ComboBox.ItemIndex ]).odbiorca_rodzaj; //pror_Wszyscy
          pokój_rozmów_r_l.wiadomoœæ := Pokój_Rozmów__Wiadomoœæ_Edit.Text;


          {$region 'Pokój rozmów polecenia dla SI - t³umaczenie.'}
          if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked )
            and (  Pos( si_pokój_rozmów__polecenie_symbol_c, pokój_rozmów_r_l.wiadomoœæ ) = 1  ) then  // Jest to polecenie dla SI.
            begin

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____si_aktywnoœæ_podaj ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____si_aktywnoœæ_podaj,
                      pokój_rozmów__si_polecenie__si_aktywnoœæ_podaj_c,
                      [ rfReplaceAll ]
                    );

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Brak ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Brak,
                      pokój_rozmów__si_polecenie__sia_Brak_c,
                      [ rfReplaceAll ]
                    );

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____jak_tam ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____jak_tam,
                      pokój_rozmów__si_polecenie__jak_tam_c,
                      [ rfReplaceAll ]
                    );

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Samolot__L¹dowanie ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Samolot__L¹dowanie,
                      pokój_rozmów__si_polecenie__sia_Samolot__L¹dowanie_c,
                      [ rfReplaceAll ]
                    );

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Patrol ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Patrol,
                      pokój_rozmów__si_polecenie__sia_Patrol_c,
                      [ rfReplaceAll ]
                    );

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Mnie ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Mnie,
                      pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Mnie_c,
                      [ rfReplaceAll ]
                    );

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Postój ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Postój,
                      pokój_rozmów__si_polecenie__sia_Postój_c,
                      [ rfReplaceAll ]
                    );

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Punktu ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Punktu,
                      pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Punktu_c,
                      [ rfReplaceAll ]
                    );

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów,
                      pokój_rozmów__si_polecenie__sia_P³ywanie_Do_Punktu__Odnawianie_Zasobów_c,
                      [ rfReplaceAll ]
                    );

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____l¹dowanie__zezwolenie_proœba__kurs_aktualny ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____l¹dowanie__zezwolenie_proœba__kurs_aktualny,
                      pokój_rozmów__si_polecenie__l¹dowanie__zezwolenie_proœba__kurs_aktualny_c,
                      [ rfReplaceAll ]
                    );

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____l¹dowanie__zezwolenie_proœba__kurs_standardowy ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____l¹dowanie__zezwolenie_proœba__kurs_standardowy,
                      pokój_rozmów__si_polecenie__l¹dowanie__zezwolenie_proœba__kurs_standardowy_c,
                      [ rfReplaceAll ]
                    );

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____l¹dowanie__przerwij ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____l¹dowanie__przerwij,
                      pokój_rozmów__si_polecenie__l¹dowanie__przerwij_c,
                      [ rfReplaceAll ]
                    );

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____l¹dowanie__rezygnacja ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____l¹dowanie__rezygnacja,
                      pokój_rozmów__si_polecenie__l¹dowanie__rezygnacja_c,
                      [ rfReplaceAll ]
                    );

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Samolot__Startowanie ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Samolot__Startowanie,
                      pokój_rozmów__si_polecenie__sia_Samolot__Startowanie_c,
                      [ rfReplaceAll ]
                    );

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Walka ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sia_Walka,
                      pokój_rozmów__si_polecenie__sia_Walka_c,
                      [ rfReplaceAll ]
                    );



              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Brak ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Brak,
                      pokój_rozmów__si_polecenie__sist_Brak_c,
                      [ rfReplaceAll ]
                    );

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Celuj_Tylko ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Celuj_Tylko,
                      pokój_rozmów__si_polecenie__sist_Celuj_Tylko_c,
                      [ rfReplaceAll ]
                    );

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Nie_Celuj_Nie_Strzelaj ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Nie_Celuj_Nie_Strzelaj,
                      pokój_rozmów__si_polecenie__sist_Nie_Celuj_Nie_Strzelaj_c,
                      [ rfReplaceAll ]
                    );

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Odpowiedz_Ogniem ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Odpowiedz_Ogniem,
                      pokój_rozmów__si_polecenie__sist_Odpowiedz_Ogniem_c,
                      [ rfReplaceAll ]
                    );

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Strzelaj_Jak_Chcesz ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie____sist_Strzelaj_Jak_Chcesz,
                      pokój_rozmów__si_polecenie__sist_Strzelaj_Jak_Chcesz_c,
                      [ rfReplaceAll ]
                    );



              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____samolot ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      si_pokój_rozmów__polecenie_symbol__t³umaczenie__prefiks_c + t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____samolot + si_pokój_rozmów__polecenie_symbol__t³umaczenie__sufiks_c,
                      si_pokój_rozmów__polecenie_symbol__samolot_c,
                      [ rfReplaceAll ]
                    );

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____samolot_nadawca ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      si_pokój_rozmów__polecenie_symbol__t³umaczenie__prefiks_c + t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____samolot_nadawca + si_pokój_rozmów__polecenie_symbol__t³umaczenie__sufiks_c,
                      si_pokój_rozmów__polecenie_symbol__samolot_nadawca_c,
                      [ rfReplaceAll ]
                    );

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____statek ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      si_pokój_rozmów__polecenie_symbol__t³umaczenie__prefiks_c + t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____statek + si_pokój_rozmów__polecenie_symbol__t³umaczenie__sufiks_c,
                      si_pokój_rozmów__polecenie_symbol__statek_c,
                      [ rfReplaceAll ]
                    );

              if Trim( t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____statek_nadawca ) <> '' then
                pokój_rozmów_r_l.wiadomoœæ :=
                  StringReplace
                    (
                      pokój_rozmów_r_l.wiadomoœæ,
                      si_pokój_rozmów__polecenie_symbol__t³umaczenie__prefiks_c + t³umaczenie_komunikaty_r.si__pokój_rozmów__polecenie_symbol____statek_nadawca + si_pokój_rozmów__polecenie_symbol__t³umaczenie__sufiks_c,
                      si_pokój_rozmów__polecenie_symbol__statek_nadawca_c,
                      [ rfReplaceAll ]
                    );

            end;
          //---//if    ( T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBox.Checked ) (...)
          {$endregion 'Pokój rozmów polecenia dla SI - t³umaczenie.'}


          if czy_serwer_g then
            begin

              Pokój_Rozmów__Wyœlij_Wiadomoœæ( pokój_rozmów_r_l );

              Pokój_Rozmów__Wyœwietl_Wiadomoœæ( pokój_rozmów_r_l );

              SI__Polecenie__Zak³ócenia_Interpretuj( pokój_rozmów_r_l );

              //if pokój_rozmów_r_l.odbiorca_rodzaj = pror_Wszyscy then
              //  Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__rekord_pokój_rozmów_r_c, -99, '', pokój_rozmów_r_l )
              //else//if pokój_rozmów_r_l.odbiorca_rodzaj = pror_Wszyscy then
              //  begin
              //
              //    for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
              //      if    ( pokój_rozmów_r_l.id_nadawca <> TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd ) // Nie wysy³a wiadomoœci do siebie.
              //        and (
              //                 (
              //                       ( pokój_rozmów_r_l.odbiorca_rodzaj = pror_Gracz_Jeden )
              //                   and ( pokój_rozmów_r_l.id_odbiorca = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd )
              //                 )
              //              or (
              //                       ( pokój_rozmów_r_l.odbiorca_rodzaj = pror_Grupa_Jedna )
              //                   and ( pokój_rozmów_r_l.id_odbiorca = TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_grupa__kd )
              //                 )
              //            ) then
              //          begin
              //
              //            Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__rekord_pokój_rozmów_r_c, TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).peer_port_tcp__kd, '', pokój_rozmów_r_l );
              //
              //            if pokój_rozmów_r_l.odbiorca_rodzaj = pror_Gracz_Jeden then
              //              Break;
              //
              //          end;
              //        //---//if    ( pokój_rozmów_r_l.id_nadawca <> TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd ) (...)
              //
              //  end;
              ////---//if pokój_rozmów_r_l.odbiorca_rodzaj = pror_Wszyscy then

            end
          else//if czy_serwer_g then
            if czy_klient_g then
              Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__odbierz__rekord_pokój_rozmów_r_c, -99, pokój_rozmów_r_l )
            else//if czy_klient_g then
              if czy_gra_lokalna_g then
                begin

                  Pokój_Rozmów__Wyœwietl_Wiadomoœæ( pokój_rozmów_r_l );

                  SI__Polecenie__Zak³ócenia_Interpretuj( pokój_rozmów_r_l );

                end;
              //---//if czy_gra_lokalna_g then


          if   ( pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list.Count <= 0 )
            or (
                     ( pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list.Count > 0 )
                 and ( pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list[ pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list.Count - 1 ] <> Pokój_Rozmów__Wiadomoœæ_Edit.Text )
               ) then
            pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list.Add( Pokój_Rozmów__Wiadomoœæ_Edit.Text );

          while pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list.Count > 10 do
            pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list.Delete( 0 );


          Pokój_Rozmów__Wiadomoœæ_Edit.Text := '';
          pokój_rozmów__ostatnia_wiadomoœci__indeks_ostatni_g := pokój_rozmów_ostatnia_wiadomoœci_wys³ane_treœæ_string_list.Count;


          pokój_rozmów__ostatnia_wiadomoœæ_wys³ana_data_czas_g := Now();

        end;
      //---//if MilliSecondsBetween( Now(), pokój_rozmów__ostatnia_wiadomoœæ_wys³ana_data_czas_g ) >= 500 then

    end
  else//if Trim( Pokój_Rozmów__Wiadomoœæ_Edit.Text ) <> '' then
    if    ( Sender <> nil )
      and ( TComponent(Sender).Name = Pokój_Rozmów__Wyœlij_Wiadomoœæ_Button.Name ) then
      //
    else//if    ( Sender <> nil ) (...)
      if Pokój_Rozmów__Na_Ekranie_CheckBox.Checked then
        Pokój_Rozmów__Na_Ekranie_CheckBox.Checked := false;

end;//---//Pokój_Rozmów__Wyœlij_Wiadomoœæ_ButtonClick().

//Projektowy_Tryb_CheckBoxClick().
procedure TStatki_Form.Projektowy_Tryb_CheckBoxClick( Sender: TObject );
begin

  Gra_Obiekty_GLDummyCube.Pickable := Projektowy_Tryb_CheckBox.Checked;


  if Projektowy_Tryb_CheckBox.Checked then
    projektowy_tryb__statek := statek_gracza;


  Wspó³czynniki_Inne_Click( Sender );

end;//---//Projektowy_Tryb_CheckBoxClick().

//Punkt_Naprowadzaj_SpinEditChange().
procedure TStatki_Form.Punkt_Naprowadzaj_SpinEditChange( Sender: TObject );
begin

  if Punkt_Naprowadzaj_CheckBox.Checked then
    begin

      Punkt_Naprowadzaj_GLArrowLine.Visible := Punkt_Naprowadzaj__Strza³ka_CheckBox.Checked;

      Punkt_Naprowadzaj_GLDummyCube.VisibleAtRunTime := Punkt_Naprowadzaj__Punkt_CheckBox.Checked;
      Punkt_Naprowadzaj_GLDummyCube.ShowAxes := Punkt_Naprowadzaj__Punkt_CheckBox.Checked;

      Radar_Punkt_Naprowadzaj_GLDummyCube.VisibleAtRunTime := Punkt_Naprowadzaj__Radar_CheckBox.Checked;
      Radar_Punkt_Naprowadzaj_GLDummyCube.ShowAxes := Punkt_Naprowadzaj__Radar_CheckBox.Checked;

    end
  else//if Punkt_Naprowadzaj_CheckBox.Checked then
    begin

      Punkt_Naprowadzaj_GLArrowLine.Visible := false;

      Punkt_Naprowadzaj_GLDummyCube.VisibleAtRunTime := false;
      Punkt_Naprowadzaj_GLDummyCube.ShowAxes := false;

      Radar_Punkt_Naprowadzaj_GLDummyCube.VisibleAtRunTime := false;
      Radar_Punkt_Naprowadzaj_GLDummyCube.ShowAxes := false;

    end;
  //---//if Punkt_Naprowadzaj_CheckBox.Checked then


  Punkt_Naprowadzaj_GLDummyCube.Position.X := Punkt_Naprowadzaj__X_SpinEdit.Value;
  Punkt_Naprowadzaj_GLDummyCube.Position.Y := Punkt_Naprowadzaj__Y_SpinEdit.Value;
  Punkt_Naprowadzaj_GLDummyCube.Position.Z := Punkt_Naprowadzaj__Z_SpinEdit.Value;

  Radar_Punkt_Naprowadzaj_GLDummyCube.Position.X := Punkt_Naprowadzaj__X_SpinEdit.Value;
  Radar_Punkt_Naprowadzaj_GLDummyCube.Position.Y := Punkt_Naprowadzaj__Y_SpinEdit.Value;
  Radar_Punkt_Naprowadzaj_GLDummyCube.Position.Z := Punkt_Naprowadzaj__Z_SpinEdit.Value;

end;//---//Punkt_Naprowadzaj_SpinEditChange().

//Punkt_NaprowadzajSpinEditKeyDown().
procedure TStatki_Form.Punkt_NaprowadzajSpinEditKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
begin

  // Enter.
  if Key = 13 then
    begin

      Key := 0;

      Punkt_Naprowadzaj_CheckBox.Checked := not Punkt_Naprowadzaj_CheckBox.Checked;

    end;
  //---//if Key = 13 then

end;//---//Punkt_NaprowadzajSpinEditKeyDown().

//Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBoxChange().
procedure TStatki_Form.Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBoxChange( Sender: TObject );
begin

  Statki__Punkty_¯ycia_WskaŸnik__Efekty_Tryb_Ustaw();

  Wspó³czynniki_Inne_Click( Sender );

end;//---//Punkty_¯ycia_WskaŸnik__Efekty_Tryb_ComboBoxChange().

//Radar_GLSceneViewerMouseMove().
procedure TStatki_Form.Radar_GLSceneViewerMouseMove( Sender: TObject; Shift: TShiftState; X, Y: Integer );
begin

  wspó³rzêdne_œwiata_z_radaru_affine_vector_g := Radar_GLSceneViewer.Buffer.PixelRayToWorld( x, y );
  wspó³rzêdne_œwiata_z_radaru_affine_vector_g.Y := 0;

end;//---//Radar_GLSceneViewerMouseMove().

//Radar__Skala_SpinEditChange().
procedure TStatki_Form.Radar__Skala_SpinEditChange( Sender: TObject );
begin

  if Radar__Zmieniaj_Czu³oœæ_Wraz_Ze_Skal¹_CheckBox.Checked then
    begin

      Radar__Czu³oœæ_SpinEdit.Value := Radar__Czu³oœæ_SpinEdit.Value - ( radar__skala_spinedit__value__poprzednia_wartoœæ_g - Radar__Skala_SpinEdit.Value );
      radar__skala_spinedit__value__poprzednia_wartoœæ_g := Radar__Skala_SpinEdit.Value;

    end;
  //---//if Radar__Zmieniaj_Czu³oœæ_Wraz_Ze_Skal¹_CheckBox.Checked then

end;//---//Radar__Skala_SpinEditChange().

//Radar__Widocznoœæ_CheckBoxClick().
procedure TStatki_Form.Radar__Widocznoœæ_CheckBoxClick( Sender: TObject );
begin

  Radar_Panel.Visible := Radar__Widocznoœæ_CheckBox.Checked;

  Pe³ny_Ekran__Znikaj¹ce_Elementy_Widocznoœæ_Ustaw();

  FormResize( Sender );

end;//---//Radar__Widocznoœæ_CheckBoxClick().

//Radar__Wielkoœæ_ButtonClick().
procedure TStatki_Form.Radar__Wielkoœæ_ButtonClick( Sender: TObject );
begin

  if    ( Sender <> nil )
    and ( TComponent(Sender).Name = Radar_Panel.Name ) then
    // Tylko aby sprawdziæ wartoœæ zmiennej radar_panel__wielkoœæ_procent_okna_g.
  else
    if    ( Sender <> nil )
      and ( TComponent(Sender).Name = Radar__Pomniejsz_Button.Name ) then
      radar_panel__wielkoœæ_procent_okna_g := radar_panel__wielkoœæ_procent_okna_g - 10
    else//if    ( Sender <> nil ) (...)
      radar_panel__wielkoœæ_procent_okna_g := radar_panel__wielkoœæ_procent_okna_g + 10;


  if radar_panel__wielkoœæ_procent_okna_g < 5 then
    radar_panel__wielkoœæ_procent_okna_g := 5
  else//if radar_panel__wielkoœæ_procent_okna_g < 5 then
    if radar_panel__wielkoœæ_procent_okna_g > 95 then
      radar_panel__wielkoœæ_procent_okna_g := 95;


  FormResize( Sender );

end;//---//Radar__Wielkoœæ_ButtonClick().

//Schemat_Samolot_Zmieñ_BitBtnClick().
procedure TStatki_Form.Schemat_Samolot_Zmieñ_BitBtnClick( Sender: TObject );
var
  zti : integer;
begin

  zti := Statek__Samolot_Odczytaj_Schemat_Indeks( Statek__Samolot_ComboBox.Items[ Statek__Samolot_ComboBox.ItemIndex ] );


  if   ( Statek__Samolot_ComboBox.ItemIndex <= 0 )
    or ( zti <= -1 )
    or ( Statek_ComboBox.Items.Count <= 0 )
    or ( Statek_ComboBox.Items.Count - 1 < zti )
    or (  zti > Length( statki_lista_t ) - 1  )
    or ( not statki_lista_t[ zti ].czy_samolot__sl  ) then
    begin

      Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__nale¿y_wybraæ_samolot );
      Exit;

    end;
  //---//if   ( Statek__Samolot_ComboBox.ItemIndex <= 0 ) (...)


  if    ( samolot__statek_gracza <> nil )
    and ( samolot__statek_gracza.id_statek_schemat = zti ) then
    begin

      Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__wskazano_ju¿_wybrany_samolot );
      Exit;

    end;
  //---//if   ( Statek__Samolot_ComboBox.ItemIndex <= 0 ) (...)


  if czy_klient_g then
    Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__schemat_samolot_zmieñ_c, -99, IntToStr( zti )  )
  else//if czy_klient_g then
    if    ( samolot__statek_gracza <> nil ) // Sprawdza czy statkiem gracza jest lotniskowiec.
      and ( statek_gracza <> nil )
      and ( statek_gracza.czy_lotniskowiec ) then
      begin

        samolot__statek_gracza.Id_Statek_Schemat__Samolot_Zmieñ_Na__Ustaw( zti );
        Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__zmiana_samolotu_przyjêta + ' (' + Statek_ComboBox.Items[ zti ] + ').' );

      end;
    //---//if    ( samolot__statek_gracza <> nil ) (...)

end;//---//Schemat_Samolot_Zmieñ_BitBtnClick().

//ScrollBoxMouseWheel().
procedure TStatki_Form.ScrollBoxMouseWheel( Sender: TObject; Shift: TShiftState; WheelDelta: Integer; MousePos: TPoint; var Handled: Boolean );
begin

  if   ( Sender = nil )
    or (
             ( Sender <> nil )
         and (  not ( Sender is TScrollBox )  )
       ) then
    Exit;


  if WheelDelta < 0 then
    TScrollBox(Sender).VertScrollBar.Position := TScrollBox(Sender).VertScrollBar.Position + TScrollBox(Sender).VertScrollBar.Increment
  else//if WheelDelta < 0 then
    TScrollBox(Sender).VertScrollBar.Position := TScrollBox(Sender).VertScrollBar.Position - TScrollBox(Sender).VertScrollBar.Increment;

end;//---//ScrollBoxMouseWheel().

//SI__Dodaj_BitBtnClick().
procedure TStatki_Form.SI__Dodaj_BitBtnClick( Sender: TObject );
var
  zti : integer;
  zts,
  si_nazwa_l
    : string;
  zt_tcp_klient_dane : TTCP_Klient_Dane;
begin

  if    ( not czy_gra_lokalna_g )
    and ( not czy_serwer_g ) then
    Exit;


  if Trim( SI__Nazwa_Edit.Text ) = '' then
    begin

      PageControl1.ActivePage := Gra_TabSheet;

      if SI__Nazwa_Edit.Enabled then
        try
          SI__Nazwa_Edit.SetFocus();
        except
          on E : Exception do
            Komunikat_Wyœwietl(  E.Message + ' ' + IntToStr( E.HelpContext ), t³umaczenie_komunikaty_r.komunikat__b³¹d, MB_OK + MB_ICONEXCLAMATION  );
        end;
        //---//try

      //Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nazwa_gracza_nie_mo¿e_byæ_pusta, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION );
      if Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nazwa_gracza_nie_mo¿e_byæ_pusta + #13 + #13 + t³umaczenie_komunikaty_r.komunikat__ustawiæ_nazwê_losow¹, t³umaczenie_komunikaty_r.komunikat__potwierdzenie, MB_YESNO + MB_DEFBUTTON1 + MB_ICONQUESTION ) = IDYES then
        SI__Nazwa_Edit.Text := si_nazwa__nazwa_statku_symbol_c + ' ' + si_nazwa__kod_statku_symbol_c + ' ' + si_nazwa__losowa_czêœæ_symbol_c
      else//if Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nazwa_gracza_nie_mo¿e_byæ_pusta + #13 + #13 + t³umaczenie_komunikaty_r.komunikat__ustawiæ_nazwê_losow¹, t³umaczenie_komunikaty_r.komunikat__potwierdzenie, MB_YESNO + MB_DEFBUTTON1 + MB_ICONQUESTION ) = IDYES then
        Exit;

    end;
  //---//if Trim( SI__Nazwa_Edit.Text ) = '' then

  if   ( SI__Statek_ComboBox.ItemIndex < 0 )
    or (  Trim( SI__Statek_ComboBox.Text ) = ''  ) then
    begin

      PageControl1.ActivePage := Gra_TabSheet;

      if SI__Statek_ComboBox.Enabled then
        try
          SI__Statek_ComboBox.SetFocus();
        except
          on E : Exception do
            Komunikat_Wyœwietl(  E.Message + ' ' + IntToStr( E.HelpContext ), t³umaczenie_komunikaty_r.komunikat__b³¹d, MB_OK + MB_ICONEXCLAMATION  );
        end;
        //---//try

      Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nale¿y_wybraæ_statek, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION );
      Exit;

    end;
  //---//if   ( SI__Statek_ComboBox.ItemIndex < 0 ) (...)


  si_nazwa_l := SI__Nazwa_Edit.Text;

  if    (  Pos( si_nazwa__kod_statku_symbol_c, si_nazwa_l ) > 0  )
    and ( SI__Statek_ComboBox.ItemIndex >= 0 )
    and (  SI__Statek_ComboBox.ItemIndex <= Length( statki_lista_t ) - 1  ) then
    begin

      zts :=
        Copy
          (
            statki_lista_t[ SI__Statek_ComboBox.ItemIndex ].opis__sl,
            Pos(  si_nazwa__kod_w_opisie_symbol_c, statki_lista_t[ SI__Statek_ComboBox.ItemIndex ].opis__sl  ) + Length( si_nazwa__kod_w_opisie_symbol_c ),
            Length( statki_lista_t[ SI__Statek_ComboBox.ItemIndex ].opis__sl )
          );

      zti := Pos( nowa_linia_c, zts );

      if zti > 0 then
        Delete(  zts, zti, Length( zts )  );

      si_nazwa_l := StringReplace( si_nazwa_l, si_nazwa__kod_statku_symbol_c, zts, [ rfReplaceAll ] );

    end;
  //---//if    (  Pos( si_nazwa_czêœæ_kod_i_losowa_symbol_c, si_nazwa_l ) > 0  ) (...)

  if    (  Pos( si_nazwa__nazwa_statku_symbol_c, si_nazwa_l ) > 0  )
    and ( SI__Statek_ComboBox.ItemIndex >= 0 )
    and (  SI__Statek_ComboBox.ItemIndex <= Length( statki_lista_t ) - 1  ) then
    si_nazwa_l := StringReplace( si_nazwa_l, si_nazwa__nazwa_statku_symbol_c, statki_lista_t[ SI__Statek_ComboBox.ItemIndex ].nazwa__sl, [ rfReplaceAll ] );


  si_nazwa_l := StringReplace( si_nazwa_l, si_nazwa__kod_statku_symbol_c, '', [ rfReplaceAll ] );
  si_nazwa_l := StringReplace( si_nazwa_l, si_nazwa__nazwa_statku_symbol_c, '', [ rfReplaceAll ] );


  if    ( Sender <> nil )
    and ( TComponent(Sender).Name = SI__Schemat__Zastosuj_BitBtn.Name )
    and (  not tcp_klienci_lista_g.Nazwa_Niepowtarzalna( si_nazwa_l )  )
    and (  Pos( si_nazwa__losowa_czêœæ_symbol_c, si_nazwa_l ) <= 0  ) then
    begin

      Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__nazwa_gracza__si__powinna_byæ_niepowtarzalna___dodano_czêœæ_losow¹ + ' (' + si_nazwa_l + ').' );
      si_nazwa_l := si_nazwa_l + ' ' + si_nazwa__losowa_czêœæ_symbol_c;

    end;
  //---//if    ( Sender <> nil ) (...)



  if Pos( si_nazwa__losowa_czêœæ_symbol_c, si_nazwa_l ) > 0 then
    begin

      zti := 0;

      zts := si_nazwa_l;

      while Pos( si_nazwa__losowa_czêœæ_symbol_c, zts ) > 0 do
        zts := StringReplace(    zts, si_nazwa__losowa_czêœæ_symbol_c, Trim(   FormatFloat(  '### ### ##0', Random( 1000 )  )   ), []    );

      while (  not tcp_klienci_lista_g.Nazwa_Niepowtarzalna( zts )  )
        and ( zti < 10 ) do
        begin

          inc( zti );

          zts := si_nazwa_l;

          while Pos( si_nazwa__losowa_czêœæ_symbol_c, zts ) > 0 do
            zts := StringReplace(    zts, si_nazwa__losowa_czêœæ_symbol_c, Trim(   FormatFloat(  '### ### ##0', Random( 1000 )  )   ), []    );

        end;
      //---//while (  not tcp_klienci_lista_g.Nazwa_Niepowtarzalna( zts )  ) (...)

      si_nazwa_l := zts;

    end;
  //---//if Pos( si_nazwa__losowa_czêœæ_symbol_c, si_nazwa_l ) > 0 then

  si_nazwa_l := StringReplace( si_nazwa_l, si_nazwa__losowa_czêœæ_symbol_c, '', [ rfReplaceAll ] );


  if not tcp_klienci_lista_g.Nazwa_Niepowtarzalna( si_nazwa_l ) then
    begin

      PageControl1.ActivePage := Gra_TabSheet;

      if SI__Nazwa_Edit.Enabled then
        try
          SI__Nazwa_Edit.SetFocus();
        except
          on E : Exception do
            Komunikat_Wyœwietl(  E.Message + ' ' + IntToStr( E.HelpContext ), t³umaczenie_komunikaty_r.komunikat__b³¹d, MB_OK + MB_ICONEXCLAMATION  );
        end;
        //---//try

      Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nazwa_gracza__si__powinna_byæ_niepowtarzalna, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION );
      Exit;

    end;
  //---//if not tcp_klienci_lista_g.Nazwa_Niepowtarzalna( si_nazwa_l ) then



  zt_tcp_klient_dane := tcp_klienci_lista_g.Dodaj_Aktualizuj( si_peer_port_c, -99 ); // Serwer ma peer_port_f i identyfikator_f = -1.

  if zt_tcp_klient_dane <> nil then
    begin

      zt_tcp_klient_dane.id_grupa__kd := SI__Grupa_SpinEdit.Value;
      zt_tcp_klient_dane.id_statek_schemat__kd := SI__Statek_ComboBox.ItemIndex;

      if SI__Statek__Samolot_ComboBox.Color = clWindow then
        zt_tcp_klient_dane.id_statek__samolot_schemat__kd := Statek__Samolot_Odczytaj_Schemat_Indeks( SI__Statek__Samolot_ComboBox.Items[ SI__Statek__Samolot_ComboBox.ItemIndex ] )
      else//if SI__Statek__Samolot_ComboBox.Color = clWindow then
        zt_tcp_klient_dane.id_statek__samolot_schemat__kd := -1; // Statek nie jest lotniskowcem.

      //zt_tcp_klient_dane.dane_wys³ane__kd := true; // Jest ustawiane w tcp_klienci_lista_g.Dodaj_Aktualizuj().
      //zt_tcp_klient_dane.gotowy__kd := true; // Jest ustawiane w tcp_klienci_lista_g.Dodaj_Aktualizuj().
      zt_tcp_klient_dane.nazwa__kd := si_nazwa_l;

    end;
  //---//if zt_tcp_klient_dane <> nil then


  Gracze_Lista_Odœwie¿();

  Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gracz_lista_odœwie¿_c, -99, '' );


  Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__dodano_si + ': ' + si_nazwa_l + ' (' + SI__Statek_ComboBox.Items[ SI__Statek_ComboBox.ItemIndex ] + ' - ' + t³umaczenie_komunikaty_r.ekran_napis__grupa__skrót + ' ' + SI__Grupa_SpinEdit.Text + ').' );

end;//---//SI__Dodaj_BitBtnClick().

//SI__Kasuj_Wszystkie_BitBtnClick().
procedure TStatki_Form.SI__Kasuj_Wszystkie_BitBtnClick( Sender: TObject );
var
  i : integer;
begin

  //if    ( not czy_gra_lokalna_g ) //???
  //  and ( not czy_serwer_g ) then
  //  Exit;


  if Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__wykasowaæ_wszystkie_si, t³umaczenie_komunikaty_r.komunikat__potwierdzenie, MB_YESNO + MB_DEFBUTTON2 + MB_ICONQUESTION ) <> IDYES then
    Exit;


  for i := tcp_klienci_lista_g.klienci_lista_list.Count - 1 downto 0 do
    if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd <= si_peer_port_c then
      begin

        tcp_klienci_lista_g.Usuñ_Identyfikator( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd );

      end;
    //---//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd <= si_peer_port_c then


  //Gracze_Lista_Roz³¹cz( zt_tcp_klient_dane.peer_port_tcp ); // Usuwa wszystkich graczy. //???


  Gracze_Lista_Odœwie¿();


  if czy_serwer_g then
    Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gracz_lista_odœwie¿_c, -99, '' );

end;//---//SI__Kasuj_Wszystkie_BitBtnClick().

//SI__Nazwa_EditKeyDown().
procedure TStatki_Form.SI__Nazwa_EditKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
var
  zti : integer;
  zts : string;
begin

  // K.
  if    ( ssCtrl in Shift )
    and (  not ( ssAlt in Shift )  ) // Prawy Alt zg³asza siê jako Alt i Ctrl jednoczeœnie.
    and (  Key = Ord( 'K' )  ) then
    begin

      Key := 0;

      zti := SI__Nazwa_Edit.SelStart;
      zts := SI__Nazwa_Edit.Text;
      Insert( si_nazwa__kod_statku_symbol_c, zts, zti + 1 );
      SI__Nazwa_Edit.Text := zts;
      SI__Nazwa_Edit.SelStart := zti + Length( si_nazwa__kod_statku_symbol_c );

    end;
  //---//if    ( ssCtrl in Shift ) (...)

  // L.
  if    ( ssCtrl in Shift )
    and (  not ( ssAlt in Shift )  ) // Prawy Alt zg³asza siê jako Alt i Ctrl jednoczeœnie.
    and (  Key = Ord( 'L' )  ) then
    begin

      Key := 0;

      zti := SI__Nazwa_Edit.SelStart;
      zts := SI__Nazwa_Edit.Text;
      Insert( si_nazwa__losowa_czêœæ_symbol_c, zts, zti + 1 );
      SI__Nazwa_Edit.Text := zts;
      SI__Nazwa_Edit.SelStart := zti + Length( si_nazwa__losowa_czêœæ_symbol_c );

    end;
  //---//if    ( ssCtrl in Shift ) (...)

  // N.
  if    ( ssCtrl in Shift )
    and (  not ( ssAlt in Shift )  ) // Prawy Alt zg³asza siê jako Alt i Ctrl jednoczeœnie.
    and (  Key = Ord( 'N' )  ) then
    begin

      Key := 0;

      zti := SI__Nazwa_Edit.SelStart;
      zts := SI__Nazwa_Edit.Text;
      Insert( si_nazwa__nazwa_statku_symbol_c, zts, zti + 1 );
      SI__Nazwa_Edit.Text := zts;
      SI__Nazwa_Edit.SelStart := zti + Length( si_nazwa__nazwa_statku_symbol_c );

    end;
  //---//if    ( ssCtrl in Shift ) (...)

  // M.
  if    ( ssCtrl in Shift )
    //and ( ssShift in Shift )
    and (  not ( ssAlt in Shift )  ) // Prawy Alt zg³asza siê jako Alt i Ctrl jednoczeœnie.
    and (  Key = Ord( 'M' )  ) then
    begin

      Key := 0;

      zti := SI__Nazwa_Edit.SelStart;
      zts := SI__Nazwa_Edit.Text;
      Insert( si_nazwa__nazwa_statku_symbol_c + ' ' + si_nazwa__kod_statku_symbol_c + ' ' + si_nazwa__losowa_czêœæ_symbol_c, zts, zti + 1 );
      SI__Nazwa_Edit.Text := zts;
      SI__Nazwa_Edit.SelStart := zti + Length( si_nazwa__nazwa_statku_symbol_c + ' ' + si_nazwa__kod_statku_symbol_c + ' ' + si_nazwa__losowa_czêœæ_symbol_c );

    end;
  //---//if    ( ssCtrl in Shift ) (...)


  // Enter.
  if Key = 13 then
    begin

      Key := 0;

      if SI__Dodaj_BitBtn.Enabled then
        SI__Dodaj_BitBtnClick( Sender );

    end;
  //---//if Key = 13 then

end;//---//SI__Nazwa_EditKeyDown().

//SI__Statek_ComboBoxKeyDown().
procedure TStatki_Form.SI__Statek_ComboBoxKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
begin

  // Enter.
  if Key = 13 then
    begin

      Key := 0;

      if SI__Dodaj_BitBtn.Enabled then
        SI__Dodaj_BitBtnClick( Sender );

    end;
  //---//if Key = 13 then

end;//---//SI__Statek_ComboBoxKeyDown().

//SI__Samolot_Gracza__L¹duj_Na_Lotniskowcu_Gracza_ButtonClick().
procedure TStatki_Form.SI__Samolot_Gracza__L¹duj_Na_Lotniskowcu_Gracza_ButtonClick( Sender: TObject );
begin

  if   ( samolot__statek_gracza = nil )
    or ( statek_gracza = nil )
    or ( not statek_gracza.czy_lotniskowiec )
    or ( not SI__P³ywa__Samolot_Gracza_CheckBox.Enabled ) then
    Exit;

  if not samolot__statek_gracza.si__statek_gracza__p³ywa then
    SI__P³ywa__Samolot_Gracza_CheckBox.Checked := true;


  if czy_klient_g then
    begin

      if Gracz_Identyfikator() <> -broñ_nie_obracana_c then
        Wieloosobowe__Strumieñ_Wyœlij(  wieloosobowe__komenda__statek__si__samolot_gracza__l¹duj_na_lotniskowcu_gracza_c, -99, IntToStr( Gracz_Identyfikator() )  );

    end
  else//if czy_klient_g then
    begin

      SI__Samolot_Gracza__L¹duj_Na_Lotniskowcu_Gracza( samolot__statek_gracza.id_gracz );

      //Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__samolot_zg³asza_l¹dowanie );

    end;
  //---//if czy_klient_g then

end;//---//SI__Samolot_Gracza__L¹duj_Na_Lotniskowcu_Gracza_ButtonClick().

//SI__Schemat_ComboBoxChange().
procedure TStatki_Form.SI__Schemat_ComboBoxChange( Sender: TObject );
begin

  if   ( SI__Schemat_ComboBox.Items.Count < 0 )
    or ( SI__Schemat_ComboBox.ItemIndex < 0 )
    or (  SI__Schemat_ComboBox.ItemIndex > Length( si_schematy_lista_t ) - 1  ) then
    Exit;


  SI__Schemat_Opis_Memo.Text := StringReplace( si_schematy_lista_t[ SI__Schemat_ComboBox.ItemIndex ].opis__sl, nowa_linia_c, #13 + #10, [ rfReplaceAll ] );

end;//---//SI__Schemat_ComboBoxChange().

//SI__Schemat_ComboBoxKeyDown().
procedure TStatki_Form.SI__Schemat_ComboBoxKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
begin

  // Enter.
  if Key = 13 then
    begin

      Key := 0;

      if SI__Schemat__Zastosuj_BitBtn.Enabled then
        SI__Schemat__Zastosuj_BitBtnClick( SI__Schemat__Zastosuj_BitBtn );

    end;
  //---//if Key = 13 then

end;//---//SI__Schemat_ComboBoxKeyDown().

//SI__Schemat__Kasuj_BitBtnClick().
procedure TStatki_Form.SI__Schemat__Kasuj_BitBtnClick( Sender: TObject );
var
  zts : string;
begin

  if   (  Trim( SI__Schemat_ComboBox.Text ) = ''  )
    or ( SI__Schemat_ComboBox.Items.Count < 0 )
    or ( SI__Schemat_ComboBox.ItemIndex < 0 )
    or ( SI__Schemat_ComboBox.ItemIndex > Length( si_schematy_lista_t ) - 1 ) then
    begin

      PageControl1.ActivePage := Gra_TabSheet;

      if    ( SI_GroupBox.Enabled )
        and ( SI__Schemat_GroupBox.Enabled )
        and ( SI__Schemat_ComboBox.Enabled ) then
        SI__Schemat_ComboBox.SetFocus();

      Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nale¿y_wskazaæ_schemat_si, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION );
      Exit;

    end;
  //---//if   (  Trim( SI__Schemat_ComboBox.Text ) = ''  ) (...)

  zts := ExtractFilePath( Application.ExeName ) + katalog__schematy_lista__si_schematy_c + '\' + si_schematy_lista_t[ SI__Schemat_ComboBox.ItemIndex ].plik_nazwa__sl;


  if not FileExists( zts ) then
    begin

      Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_odnaleziono_pliku + ' ''' + zts + '''.', t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION );
      Exit;

    end;
  //---//if not FileExists( zts ) then


  if Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__czy_skasowaæ_schemat_si_o_nazwie + ' ''' + si_schematy_lista_t[ SI__Schemat_ComboBox.ItemIndex ].nazwa__sl + ''' ' + t³umaczenie_komunikaty_r.komunikat__czy_skasowaæ_schemat_si_o_nazwie___operacji_nie_mo¿na_cofn¹æ_ + '?', t³umaczenie_komunikaty_r.komunikat__potwierdzenie, MB_YESNO + MB_DEFBUTTON2 + MB_ICONQUESTION ) <> IDYES then
    Exit;


  DeleteFile( zts );


  if not FileExists( zts ) then
    begin

      SI__Schemat__Wczytaj_Listê_BitBtnClick( Sender );
      Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__operacja_zakoñczona, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONINFORMATION );

    end
  else//if not FileExists( zts ) then
    Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_skasowaæ_pliku + ' ''' + zts + '''.', t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION );

end;//---//SI__Schemat__Kasuj_BitBtnClick().

//SI__Schemat__Odœwie¿_Wskazany_BitBtnClick().
procedure TStatki_Form.SI__Schemat__Odœwie¿_Wskazany_BitBtnClick( Sender: TObject );
begin

  if   ( SI__Schemat_ComboBox.Items.Count < 0 )
    or ( SI__Schemat_ComboBox.ItemIndex < 0 )
    or (  SI__Schemat_ComboBox.ItemIndex > Length( si_schematy_lista_t ) - 1  ) then
    Exit;


  Wczytaj_Schemat_Xml( katalog__schematy_lista__si_schematy_c, SI__Schemat_ComboBox.ItemIndex, si_schematy_lista_t );

  SI__Schemat_ComboBoxChange( Sender );

end;//---//SI__Schemat__Odœwie¿_Wskazany_BitBtnClick().

//SI__Schemat__Wczytaj_Listê_BitBtnClick().
procedure TStatki_Form.SI__Schemat__Wczytaj_Listê_BitBtnClick( Sender: TObject );
begin

  SI__Schemat_ComboBox.Text := '';
  SI__Schemat_Opis_Memo.Text := 'Opis schematu si.';
  Wczytaj_Schemat_Xml( katalog__schematy_lista__si_schematy_c, -1, si_schematy_lista_t );

end;//---//SI__Schemat__Wczytaj_Listê_BitBtnClick().

//SI__Schemat__Zapisz_BitBtnClick().
procedure TStatki_Form.SI__Schemat__Zapisz_BitBtnClick( Sender: TObject );
var
  i : integer;
  zts,
  plik_nazwa
    : string;
  zt_xml_document : Xml.XMLDoc.TXMLDocument;
  wêze³_xml_1
    : Xml.XMLIntf.IXMLNode;
begin

  plik_nazwa := SI__Schemat_ComboBox.Text;

  // Niedozwolone znaki dla nazw plików.
  plik_nazwa := StringReplace( plik_nazwa, '\', '', [ rfReplaceAll ] );
  plik_nazwa := StringReplace( plik_nazwa, '/', '', [ rfReplaceAll ] );

  plik_nazwa := StringReplace( plik_nazwa, ':', '', [ rfReplaceAll ] );
  plik_nazwa := StringReplace( plik_nazwa, '*', '', [ rfReplaceAll ] );

  plik_nazwa := StringReplace( plik_nazwa, '?', '', [ rfReplaceAll ] );
  plik_nazwa := StringReplace( plik_nazwa, '"', '', [ rfReplaceAll ] );

  plik_nazwa := StringReplace( plik_nazwa, '<', '', [ rfReplaceAll ] );
  plik_nazwa := StringReplace( plik_nazwa, '>', '', [ rfReplaceAll ] );

  plik_nazwa := StringReplace( plik_nazwa, '|', '', [ rfReplaceAll ] );
  //---// Niedozwolone znaki dla nazw plików.


  if Trim( plik_nazwa ) = '' then
    begin

      PageControl1.ActivePage := Gra_TabSheet;

      if    ( SI_GroupBox.Enabled )
        and ( SI__Schemat_GroupBox.Enabled )
        and ( SI__Schemat_ComboBox.Enabled ) then
        SI__Schemat_ComboBox.SetFocus();

      Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nazwa_schematu_si_nie_mo¿e_byæ_pusta + ' (' + plik_nazwa + ').', t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION );
      Exit;

    end;
  //---//if Trim( plik_nazwa ) = '' then


  if Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__czy_zapisaæ_schemat_si_o_nazwie + ' ''' + plik_nazwa + '''?', t³umaczenie_komunikaty_r.komunikat__potwierdzenie, MB_YESNO + MB_DEFBUTTON2 + MB_ICONQUESTION ) <> IDYES then
    Exit;


  plik_nazwa := plik_nazwa + '.xml';
  zts := ExtractFilePath( Application.ExeName ) + katalog__schematy_lista__si_schematy_c + '\' + plik_nazwa;

  if    (  FileExists( zts )  )
    and (  Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__plik_schematów_si_o_nazwie + ' ''' + plik_nazwa + ''' ' + t³umaczenie_komunikaty_r.komunikat__plik_schematów_si_o_nazwie__istnieje__czy_nadpisaæ + '?', t³umaczenie_komunikaty_r.komunikat__potwierdzenie, MB_YESNO + MB_DEFBUTTON2 + MB_ICONQUESTION ) <> IDYES  ) then
    Exit;


  zt_xml_document := Xml.XMLDoc.TXMLDocument.Create( Application ); // Musi byæ Self albo Application.

  zt_xml_document.Options := zt_xml_document.Options + [ doNodeAutoIndent ]; // Domyœlnie ma: doNodeAutoCreate, doAttrNull, doAutoPrefix, doNamespaceDecl. // uses Xml.XMLIntf.

  zt_xml_document.Active := true;

  zt_xml_document.Encoding := 'unicode'; //utf-8
  zt_xml_document.AddChild( 'si_schematy' );

  zt_xml_document.DocumentElement.AddChild( 'nazwa' ).Text := SI__Schemat_ComboBox.Text;
  //zt_xml_document.DocumentElement.AddChild( 'opis' ).Text := '<![CDATA[' + SI__Schemat_Opis_Memo.Text + ']]>'; // Zamienia nawiasy na znaczniki.
  zt_xml_document.DocumentElement.AddChild( 'opis' ).Text := StringReplace( SI__Schemat_Opis_Memo.Text, #13 + #10, nowa_linia_c, [ rfReplaceAll ] );

  for i := 0 to tcp_klienci_lista_g.klienci_lista_list.Count - 1 do
    if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd <= si_peer_port_c then
      begin

        wêze³_xml_1 := zt_xml_document.DocumentElement.AddChild( 'si', -1 );
        wêze³_xml_1.AddChild( 'id_grupa' ).Text := IntToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_grupa__kd );
        //wêze³_xml_1.AddChild( 'id_statek_schemat' ).Text := IntToStr( TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek_schemat__kd );
        //wêze³_xml_1.AddChild( 'nazwa' ).Text := '<![CDATA[' + TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).nazwa__kd + ']]>'; // Zamienia nawiasy na znaczniki.

        if not SI__Schemat__Zapisz__Nazwa_Ttreœæ_Z_Pola_Nazwa_CheckBox.Checked then
          wêze³_xml_1.AddChild( 'nazwa' ).Text := TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).nazwa__kd
        else//if not SI__Schemat__Zapisz__Nazwa_Ttreœæ_Z_Pola_Nazwa_CheckBox.Checked then
          //wêze³_xml_1.AddChild( 'nazwa' ).Text := 'SI ' + si_nazwa_czêœæ_losowa_symbol_c; // Nie trzeba zapisywaæ jako '<![CDATA[<abc>]]>' automatycznie robi '&lt;abc&gt;'. // Zapisuj nazwy si w postaci 'SI <losowa liczba>'.
          wêze³_xml_1.AddChild( 'nazwa' ).Text := SI__Nazwa_Edit.Text; // Nie trzeba zapisywaæ jako '<![CDATA[<abc>]]>' automatycznie robi '&lt;abc&gt;'.

        wêze³_xml_1.AddChild( 'statek_schemat_plik_nazwa' ).Text := statki_lista_t[ TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek_schemat__kd ].plik_nazwa__sl;

        if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek__samolot_schemat__kd > -1 then
          wêze³_xml_1.AddChild( 'statek_samolot_schemat_plik_nazwa' ).Text := statki_lista_t[ TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek__samolot_schemat__kd ].plik_nazwa__sl
        else//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).id_statek__samolot_schemat__kd > -1 then
          wêze³_xml_1.AddChild( 'statek_samolot_schemat_plik_nazwa' ).Text := '<brak>'; // Nie trzeba zapisywaæ jako '<![CDATA[<brak>]]>' automatycznie robi '&lt;brak&gt;'.

      end;
    //---//if TTCP_Klient_Dane(tcp_klienci_lista_g.klienci_lista_list[ i ]).identyfikator__kd <= si_peer_port_c then


  if    ( zt_xml_document.DocumentElement.ChildNodes.Count <= 0 )
    and (  Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_odnaleziono_statków_si_na_liœcie_graczy__czy_kontynuowaæ, t³umaczenie_komunikaty_r.komunikat__potwierdzenie, MB_YESNO + MB_DEFBUTTON2 + MB_ICONQUESTION ) <> IDYES  ) then
    begin

      zt_xml_document.Free();
      Exit;

    end;
  //---//if    ( zt_xml_document.DocumentElement.ChildNodes.Count <= 0 ) (...)


  if    (  Trim( L¹d_ComboBox.Text ) <> ''  )
    and ( L¹d_ComboBox.Items.Count > 0 )
    and ( L¹d_ComboBox.ItemIndex >= 0 )
    and ( L¹d_ComboBox.ItemIndex <= Length( l¹dy_lista_t ) - 1 ) then
    zt_xml_document.DocumentElement.AddChild( 'l¹d' ).Text := l¹dy_lista_t[ L¹d_ComboBox.ItemIndex ].plik_nazwa__sl
  else//if    (  Trim( L¹d_ComboBox.Text ) <> ''  ) (...)
    zt_xml_document.DocumentElement.AddChild( 'l¹d' ).Text := '';


  if    (  Trim( Statki_Pozycje_Pocz¹tkowe_ComboBox.Text ) <> ''  )
    and ( Statki_Pozycje_Pocz¹tkowe_ComboBox.Items.Count > 0 )
    and ( Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex >= 0 )
    and ( Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex <= Length( statki_pozycje_pocz¹tkowe_lista_t ) - 1 ) then
    zt_xml_document.DocumentElement.AddChild( 'statki_pozycja_pocz¹tkowa' ).Text := statki_pozycje_pocz¹tkowe_lista_t[ Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex ].plik_nazwa__sl
  else//if    (  Trim( Statki_Pozycje_Pocz¹tkowe_ComboBox.Text ) <> ''  ) (...)
    zt_xml_document.DocumentElement.AddChild( 'statki_pozycja_pocz¹tkowa' ).Text := '';


  zt_xml_document.SaveToFile( zts );
  zt_xml_document.Free();


  SI__Schemat__Wczytaj_Listê_BitBtnClick( Sender );


  for i := 0 to Length( si_schematy_lista_t ) - 1 do
    if si_schematy_lista_t[ i ].plik_nazwa__sl = plik_nazwa then
      begin

        SI__Schemat_ComboBox.ItemIndex := i;
        SI__Schemat_ComboBoxChange( Sender );
        Break;

      end;
    //---//if si_schematy_lista_t[ i ].plik_nazwa = plik_nazwa then


  Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__operacja_zakoñczona, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONINFORMATION );


  {$region 'Przyk³ad xml.'}
{
<si_schematy>
  <nazwa>SI schemat 01</nazwa>
  <opis><![CDATA[Opis si schemat 01.#13#10Nowa linia.]]></opis>

  <si>
    <id_grupa>123</id_grupa>
    //<id_statek_schemat>123</id_statek_schemat>
    <nazwa>123</nazwa>
    <statek_schemat_plik_nazwa>abc</statek_schemat_plik_nazwa>
    <statek_samolot_schemat_plik_nazwa>abc</statek_samolot_schemat_plik_nazwa>
  </si>

  <l¹d>123</l¹d>
  <statki_pozycja_pocz¹tkowa>123</statki_pozycja_pocz¹tkowa>
</si_schematy>
}
  {$endregion 'Przyk³ad xml.'}

end;//---//SI__Schemat__Zapisz_BitBtnClick().

//SI__Schemat__Zastosuj_BitBtnClick().
procedure TStatki_Form.SI__Schemat__Zastosuj_BitBtnClick( Sender: TObject );
var
  i,
  j,
  zti_1,
  zti_2,
  id_statek_schemat_l,
  id_statek__samolot_schemat_l
    : integer;
  l¹d_nazwa,
  statki_pozycja_pocz¹tkowa_nazwa
    : string;
  si_t : array of array of string;
  zt_xml_document : Xml.XMLDoc.TXMLDocument;
begin

  if   (  Trim( SI__Schemat_ComboBox.Text ) = ''  )
    or ( SI__Schemat_ComboBox.Items.Count < 0 )
    or ( SI__Schemat_ComboBox.ItemIndex < 0 )
    or ( SI__Schemat_ComboBox.ItemIndex > Length( si_schematy_lista_t ) - 1 ) then
    begin

      PageControl1.ActivePage := Gra_TabSheet;

      if    ( SI_GroupBox.Enabled )
        and ( SI__Schemat_GroupBox.Enabled )
        and ( SI__Schemat_ComboBox.Enabled ) then
        SI__Schemat_ComboBox.SetFocus();

      Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nale¿y_wskazaæ_schemat_si, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION );
      Exit;

    end;
  //---//if   (  Trim( SI__Schemat_ComboBox.Text ) = ''  ) (...)


  if Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__czy_zastosowaæ_schemat_si_o_nazwie + ' ''' + si_schematy_lista_t[ SI__Schemat_ComboBox.ItemIndex ].nazwa__sl + '''?', t³umaczenie_komunikaty_r.komunikat__potwierdzenie, MB_YESNO + MB_DEFBUTTON2 + MB_ICONQUESTION ) <> IDYES then
    Exit;


  l¹d_nazwa := '';
  statki_pozycja_pocz¹tkowa_nazwa := '';
  SetLength( si_t, 0 );


  zt_xml_document := Xml.XMLDoc.TXMLDocument.Create( Application );

  zt_xml_document.Options := zt_xml_document.Options + [ doNodeAutoIndent ]; // Domyœlnie ma: doNodeAutoCreate, doAttrNull, doAutoPrefix, doNamespaceDecl.

  try
    zt_xml_document.LoadFromXML( si_schematy_lista_t[ SI__Schemat_ComboBox.ItemIndex ].treœæ__sl );
  except
    on E : Exception do
      Komunikat_Wyœwietl(  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_schematu_si + #13 + E.Message + ' ' + IntToStr( E.HelpContext ), t³umaczenie_komunikaty_r.komunikat__b³¹d, MB_OK + MB_ICONEXCLAMATION  );
      //Log_Wypisz(  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_schematu_si + #13 + #10 + E.Message + ' ' + IntToStr( E.HelpContext )  );
  end;
  //---//try

  {$region 'Odczyt danych xml.'}
  if zt_xml_document.Active then
    begin

      for i := 0 to zt_xml_document.DocumentElement.ChildNodes.Count - 1 do
        begin

          if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'l¹d' then
            l¹d_nazwa := zt_xml_document.DocumentElement.ChildNodes[ i ].Text
          else
          if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'si' then
            begin

              zti_1 := Length( si_t );
              SetLength( si_t, zti_1 + 1 );
              SetLength( si_t[ zti_1 ], 4 );

              for j := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes.Count - 1 do
                begin

                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'id_grupa' then
                    si_t[ zti_1 ][ 0 ] := zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text
                  else
                  //if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'id_statek_schemat' then
                  //  si_t[ zti_1 ][ 1 ] := zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text
                  //else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'nazwa' then
                    si_t[ zti_1 ][ 3 ] := zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'statek_schemat_plik_nazwa' then
                    si_t[ zti_1 ][ 1 ] := zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'statek_samolot_schemat_plik_nazwa' then
                    si_t[ zti_1 ][ 2 ] := zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text;

                end;
              //---//for j := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes.Count - 1 do

            end
          else//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'si' then
          if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'statki_pozycja_pocz¹tkowa' then
            statki_pozycja_pocz¹tkowa_nazwa := zt_xml_document.DocumentElement.ChildNodes[ i ].Text;

        end;
      //---//for i := 0 to zt_xml_document.DocumentElement.ChildNodes.Count - 1 do

    end;
  //---//if zt_xml_document.Active then
  {$endregion 'Odczyt danych xml.'}

  zt_xml_document.Free();


  if    ( SI_GroupBox.Enabled )
    and ( SI__Dodaj_BitBtn.Enabled ) then
    for i := 0 to Length( si_t ) - 1 do
      begin

        zti_1 := 0;
        id_statek_schemat_l := -99;
        id_statek__samolot_schemat_l := -99;

        SI__Nazwa_Edit.Text := si_t[ i ][ 3 ];

        try
          j := StrToInt( si_t[ i ][ 0 ] );
        except
          on E : Exception do
            begin

              j := -1;
              zti_1 := 1;
              Komunikat_Wyœwietl(  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_schematu_si + ' - ' + t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_schematu_si__b³êdny_numer_grupy + ' (' + si_t[ i ][ 0 ] + ').' + #13 + E.Message + ' ' + IntToStr( E.HelpContext ), t³umaczenie_komunikaty_r.komunikat__b³¹d, MB_OK + MB_ICONEXCLAMATION  );

            end;
          //---//on E : Exception do
        end;
        //---//try

        if    ( j >= SI__Grupa_SpinEdit.MinValue )
          and ( j <= SI__Grupa_SpinEdit.MaxValue ) then
          SI__Grupa_SpinEdit.Value := j
        else
          begin

            zti_1 := 1;
            Komunikat_Wyœwietl(  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_schematu_si + ' - ' + t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_schematu_si__numer_grupy_poza_dopuszczalnym_zakresem + ' (' + IntToStr( j ) + ').', t³umaczenie_komunikaty_r.komunikat__b³¹d, MB_OK + MB_ICONEXCLAMATION  );

          end;
        //---//if    ( zti_1 >= SI__Grupa_SpinEdit.MinValue ) (...)


        if zti_1 = 0 then
          for j := 0 to Length( statki_lista_t ) - 1 do
            if statki_lista_t[ j ].plik_nazwa__sl = si_t[ i ][ 1 ] then
              begin

                id_statek_schemat_l := j;
                SI__Statek_ComboBox.ItemIndex := id_statek_schemat_l;
                Break;

              end;
            //---//if statki_lista_t[ i ].plik_nazwa__sl = si_t[ i ][ 1 ] then


        if id_statek_schemat_l = -99 then
          begin

            zti_1 := 1;
            Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_schematu_si + ' - ' + t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_schematu_si__nieznany_schemat_statku + ' (' + si_t[ i ][ 1 ] + ').', t³umaczenie_komunikaty_r.komunikat__b³¹d, MB_OK + MB_ICONEXCLAMATION );

          end
        else//if id_statek_schemat_l = -99 then
          SI__Statek_ComboBoxChange( Sender );



        if zti_1 = 0 then
          begin

            SI__Statek__Samolot_ComboBox.ItemIndex := 0; // Je¿eli bêdzie b³êdnie okreœlony samolot dla lotniskowca to aby nie ustawi³ mu poprzednio wybranego samolotu.

            if si_t[ i ][ 2 ] = '<brak>' then // Jest zapisywane bez t³umaczenia.
              begin

                id_statek__samolot_schemat_l := -1;
                //SI__Statek__Samolot_ComboBox.ItemIndex := 0;

              end
            else//if si_t[ i ][ 2 ] = '<brak>' then
              begin

                zti_2 := -99;

                for j := 0 to Length( statki_lista_t ) - 1 do
                  if statki_lista_t[ j ].plik_nazwa__sl = si_t[ i ][ 2 ] then
                    begin

                      zti_2 := j;
                      Break;

                    end;
                  //---//if statki_lista_t[ j ].plik_nazwa__sl = si_t[ i ][ 2 ] then


                if zti_2 <> -99 then
                  begin

                    for j := 0 to SI__Statek__Samolot_ComboBox.Items.Count - 1 do
                      if SI__Statek__Samolot_ComboBox.Items[ j ] = Statek_ComboBox.Items[ zti_2 ] then
                        begin

                          id_statek__samolot_schemat_l := j;
                          SI__Statek__Samolot_ComboBox.ItemIndex := id_statek__samolot_schemat_l;
                          Break;

                        end;
                      //---//if SI__Statek__Samolot_ComboBox.Items[ j ] = Statek_ComboBox.Items[ zti_2 ] then

                  end;
                //---//if zti_2 <> -99 then

              end;
            //---//if si_t[ i ][ 2 ] = '<brak>' then

          end;
        //---//if zti_1 = 0 then


        if id_statek__samolot_schemat_l = -99 then
          Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_schematu_si + ' - ' + t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_schematu_si__nieznany_schemat_samolotu + ' (' + si_t[ i ][ 2 ] + ').', t³umaczenie_komunikaty_r.komunikat__b³¹d, MB_OK + MB_ICONEXCLAMATION );



        if    ( zti_1 = 0 )
          and ( id_statek_schemat_l <> -99 ) then
          SI__Dodaj_BitBtnClick( Sender );

      end;
    //---//for i := 0 to Length( si_t ) - 1 do


  SetLength( si_t, 0 );


  if    ( L¹d_GroupBox.Enabled )
    and ( not SI__Schemat__Zastosuj__Pomiñ__L¹d_CheckBox.Checked )
    and (  Trim( l¹d_nazwa ) <> ''  ) then
    begin

      j := -99;

      for i := 0 to Length( l¹dy_lista_t ) - 1 do
        if l¹dy_lista_t[ i ].plik_nazwa__sl = l¹d_nazwa then
          begin

            j := i;
            L¹d_ComboBox.ItemIndex := i;
            Break;

          end;
        //---//if l¹dy_lista_t[ i ].plik_nazwa__sl = l¹d_nazwa then


      if j = -99 then
        Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_schematu_si + ' - ' + t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_schematu_si__nieznana_mapa + ' (' + l¹d_nazwa + ').', t³umaczenie_komunikaty_r.komunikat__b³¹d, MB_OK + MB_ICONEXCLAMATION )
      else//if j = -99 then
        L¹d__Utwórz_BitBtnClick( Sender );

    end;
  //---//if    ( L¹d_GroupBox.Enabled ) (...)


  if    ( Statki_Pozycje_Pocz¹tkowe_GroupBox.Enabled )
    and ( not SI__Schemat__Zastosuj__Pomiñ__Statki_Pozycje_Pocz¹tkowe_CheckBox.Checked )
    and (  Trim( statki_pozycja_pocz¹tkowa_nazwa ) <> ''  ) then
    begin

      j := -99;

      for i := 0 to Length( statki_pozycje_pocz¹tkowe_lista_t ) - 1 do
        if statki_pozycje_pocz¹tkowe_lista_t[ i ].plik_nazwa__sl = statki_pozycja_pocz¹tkowa_nazwa then
          begin

            j := i;
            Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex := i;
            Break;

          end;
        //---//if statki_pozycje_pocz¹tkowe_lista_t[ i ].plik_nazwa__sl = statki_pozycja_pocz¹tkowa_nazwa then


      if j = -99 then
        Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_schematu_si + ' - ' + t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_schematu_si__nieznana_pozycje_pocz¹tkowa_statków + ' (' + statki_pozycja_pocz¹tkowa_nazwa + ').', t³umaczenie_komunikaty_r.komunikat__b³¹d, MB_OK + MB_ICONEXCLAMATION )
      else//if j = -99 then
        Statki_Pozycje_Pocz¹tkowe__Wczytaj_Listê_BitBtnClick( Sender );

    end
  else//if    ( Statki_Pozycje_Pocz¹tkowe_GroupBox.Enabled ) (...)
  if    ( Statki_Pozycje_Pocz¹tkowe_GroupBox.Enabled )
    and ( not SI__Schemat__Zastosuj__Pomiñ__Statki_Pozycje_Pocz¹tkowe_CheckBox.Checked )
    and (  Trim( statki_pozycja_pocz¹tkowa_nazwa ) = ''  ) then
    Statki_Pozycje_Pocz¹tkowe__Brak_BitBtnClick( Sender );


  SI__Nazwa_Edit.Text := '';

end;//---//SI__Schemat__Zastosuj_BitBtnClick().

//SI__Statek_ComboBoxChange().
procedure TStatki_Form.SI__Statek_ComboBoxChange( Sender: TObject );
begin

  if   ( SI__Statek_ComboBox.Items.Count < 0 )
    or ( SI__Statek_ComboBox.ItemIndex < 0 )
    or (  SI__Statek_ComboBox.ItemIndex > Length( statki_lista_t ) - 1  ) then
    Exit;


  if statki_lista_t[ SI__Statek_ComboBox.ItemIndex ].czy_lotniskowiec__sl then
    SI__Statek__Samolot_ComboBox.Color := clWindow
  else//if statki_lista_t[ SI__Statek_ComboBox.ItemIndex ].czy_lotniskowiec__sl then
    SI__Statek__Samolot_ComboBox.Color := clSilver;

end;//---//SI__Statek_ComboBoxChange().

//SOS_Nadaj_ButtonClick().
procedure TStatki_Form.SOS_Nadaj_ButtonClick( Sender: TObject );
begin

  if Statek_Gracza__Gracz_Tryb_Zwróæ() = nil then
    Exit;


  if Czas_Miêdzy_W_Sekundach( Statek_Gracza__Gracz_Tryb_Zwróæ().sos__czas_utworzenia_ostatniego_sekundy_i ) < sos__czas_do_ponownego_nadania_sekundy_i_c then
    Exit;


  SOS__Inicjuj( Statek_Gracza__Gracz_Tryb_Zwróæ() );

end;//---//SOS_Nadaj_ButtonClick().

//Statki_Pozycje_Pocz¹tkowe_ComboBoxChange().
procedure TStatki_Form.Statki_Pozycje_Pocz¹tkowe_ComboBoxChange( Sender: TObject );
var
  i,
  j
    : integer;
  zt_xml_document : Xml.XMLDoc.TXMLDocument;
begin

  Pozycja_Pocz¹tkowa_Parametry_Domyœlne_Ustaw( statki_pozycja_pocz¹tkowa_parametry_t[ 1 ], false );
  Pozycja_Pocz¹tkowa_Parametry_Domyœlne_Ustaw( statki_pozycja_pocz¹tkowa_parametry_t[ 2 ], true );


  if   ( Statki_Pozycje_Pocz¹tkowe_ComboBox.Items.Count < 0 )
    or ( Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex < 0 )
    or (  Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex > Length( statki_pozycje_pocz¹tkowe_lista_t ) - 1  ) then
    begin

      // Ustawia informacjê o braku wyboru.

      Statki_Pozycje_Pocz¹tkowe_Opis_Memo.Text := '';

      if not czy_klient_g then
        Statki_Pozycje_Pocz¹tkowe_Label.Caption := t³umaczenie_komunikaty_r.komunikat__pozycje_pocz¹tkowe_statków + ': <' + t³umaczenie_komunikaty_r.komunikat__pozycje_pocz¹tkowe_statków__wed³ug_mapy + '>.'
      else//if not czy_klient_g then
        begin

          if statki_pozycje_pocz¹tkowe__klient_wartoœæ__wed³ug_mapy_g then
            statki_pozycje_pocz¹tkowe__klient_wartoœæ_g := t³umaczenie_komunikaty_r.komunikat__pozycje_pocz¹tkowe_statków__wed³ug_mapy;

          Statki_Pozycje_Pocz¹tkowe_Label.Caption := t³umaczenie_komunikaty_r.komunikat__pozycje_pocz¹tkowe_statków + ': ' + statki_pozycje_pocz¹tkowe__klient_wartoœæ_g + '.';

        end;
      //---//if not czy_klient_g then

      if czy_serwer_g then
        Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__wspó³czynniki_inne_c, -99, '' );

      Exit;

    end;
  //---//if   ( Statki_Pozycje_Pocz¹tkowe_ComboBox.Items.Count < 0 ) (...)


  if not czy_klient_g then
    Statki_Pozycje_Pocz¹tkowe_Label.Caption := t³umaczenie_komunikaty_r.komunikat__pozycje_pocz¹tkowe_statków + ': ' + Statki_Pozycje_Pocz¹tkowe_ComboBox.Text + '.'
  else//if not czy_klient_g then
    begin

      if statki_pozycje_pocz¹tkowe__klient_wartoœæ__wed³ug_mapy_g then
        statki_pozycje_pocz¹tkowe__klient_wartoœæ_g := t³umaczenie_komunikaty_r.komunikat__pozycje_pocz¹tkowe_statków__wed³ug_mapy;

      Statki_Pozycje_Pocz¹tkowe_Label.Caption := t³umaczenie_komunikaty_r.komunikat__pozycje_pocz¹tkowe_statków + ': ' + statki_pozycje_pocz¹tkowe__klient_wartoœæ_g + '.';

    end;
  //---//if not czy_klient_g then

  if czy_serwer_g then
    Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__wspó³czynniki_inne_c, -99, '' );

  Statki_Pozycje_Pocz¹tkowe_Opis_Memo.Text := StringReplace( statki_pozycje_pocz¹tkowe_lista_t[ Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex ].opis__sl, nowa_linia_c, #13 + #10, [ rfReplaceAll ] );


  if not Statki_Pozycje_Pocz¹tkowe_ComboBox.Enabled then // Aby nie zmieniaæ pozycji pocz¹tkowych gdy nie jest to wskazane (np. wczytanie ustawieñ podczas gry).
    Exit;


  zt_xml_document := Xml.XMLDoc.TXMLDocument.Create( Application );

  zt_xml_document.Options := zt_xml_document.Options + [ doNodeAutoIndent ]; // Domyœlnie ma: doNodeAutoCreate, doAttrNull, doAutoPrefix, doNamespaceDecl.

  try
    // Serwer zg³asza b³¹d podczas odczytu danych o l¹dzie od klienta
    //   MSXML is not installed
    //   Assertion failure GLContext.pas
    // W L¹d__Zwolnij() chyba te¿ takie coœ siê dzieje (inne b³êdy) ale z podobnego powodu.
    //
    // Uda³o siê unikn¹æ b³êdów tak:
    //   w zdarzeniu odczytania danych o l¹dzie tylko w³¹czyæ Timer;
    //   w Timer.OnTimet wy³¹czyæ Timer i wywo³aæ zwalnianie i wczytywanie l¹du.
    //
    zt_xml_document.LoadFromXML( statki_pozycje_pocz¹tkowe_lista_t[ Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex ].treœæ__sl );
  except
    on E : Exception do
      Komunikat_Wyœwietl(  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_pozycji_pocz¹tkowej_statków + #13 + E.Message + ' ' + IntToStr( E.HelpContext ), t³umaczenie_komunikaty_r.komunikat__b³¹d, MB_OK + MB_ICONEXCLAMATION  );
      //Log_Wypisz(  t³umaczenie_komunikaty_r.komunikat__nieprawid³owa_definicja_pozycji_pocz¹tkowej_statków + #13 + #10 + E.Message + ' ' + IntToStr( E.HelpContext )  );
  end;
  //---//try

  {$region 'Odczyt danych xml.'}
  if zt_xml_document.Active then
    begin

      for i := 0 to zt_xml_document.DocumentElement.ChildNodes.Count - 1 do
        begin

          if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'grupa_1' then
            begin

              for j := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes.Count - 1 do
                begin

                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'korekta_obrót' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 1 ].korekta_obrót := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'korekta_x' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 1 ].korekta_x := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'korekta_z' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 1 ].korekta_z := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'odstêp_x' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 1 ].odstêp_x := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'patrol_promieñ' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 1 ].patrol_promieñ := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'patrol_x' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 1 ].patrol_x := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'patrol_z' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 1 ].patrol_z := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'patrol__tylny_promieñ' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 1 ].patrol__tylny_promieñ := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'patrol__tylny_x' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 1 ].patrol__tylny_x := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'patrol__tylny_z' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 1 ].patrol__tylny_z := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'z' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 1 ].z := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  );

                end;
              //---//for j := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes.Count - 1 do

            end
          else//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'grupa_1' then
          if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'grupa_2' then
            begin

              for j := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes.Count - 1 do
                begin

                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'korekta_obrót' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 2 ].korekta_obrót := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'korekta_x' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 2 ].korekta_x := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'korekta_z' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 2 ].korekta_z := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'odstêp_x' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 2 ].odstêp_x := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'patrol_promieñ' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 2 ].patrol_promieñ := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'patrol_x' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 2 ].patrol_x := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'patrol_z' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 2 ].patrol_z := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'patrol__tylny_promieñ' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 2 ].patrol__tylny_promieñ := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'patrol__tylny_x' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 2 ].patrol__tylny_x := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'patrol__tylny_z' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 2 ].patrol__tylny_z := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  )
                  else
                  if zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].LocalName = 'z' then
                    statki_pozycja_pocz¹tkowa_parametry_t[ 2 ].z := Round(  Odczytaj_Liczbê_Z_Napisu( zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes[ j ].Text, null )  );

                end;
              //---//for j := 0 to zt_xml_document.DocumentElement.ChildNodes[ i ].ChildNodes.Count - 1 do

            end;
          //---//if zt_xml_document.DocumentElement.ChildNodes[ i ].LocalName = 'grupa_2' then

        end;
      //---//for i := 0 to zt_xml_document.DocumentElement.ChildNodes.Count - 1 do

    end;
  //---//if zt_xml_document.Active then
  {$endregion 'Odczyt danych xml.'}


  zt_xml_document.Free();


  {$region 'Przyk³ad xml.'}
{
<statki_pozycja_pocz¹tkowa>
  <nazwa>Pozycje pocz¹tkowa 01</nazwa>
  <opis><![CDATA[Opis pozycje pocz¹tkowa 01.#13#10Nowa linia.]]></opis>

  <grupa_1>
    <korekta_obrót>123</korekta_obrót> <!-- Pocz¹tkowy obrót statku (+) lewo (-) prawo. -->
    <korekta_x>123</korekta_x> <!-- Przesuniêcie pozycji wszystkich statków w grupie (-) lewo (+) prawo. -->
    <korekta_z>123</korekta_z> <!-- Przesuniêcie pozycji ka¿dego statku w grupie osobno o wielokrotnoœæ wartoœci (-) przód (+) ty³. -->
    <odstêp_x>123</odstêp_x> <!-- Odstêp miêdzy statkami po bokach. -->
    <patrol_promieñ>123</patrol_promieñ> <!-- Promieñ patrolu. -->
    <patrol_x>123</patrol_x> <!-- Wspó³rzêdna œrodka obszaru patrolu. -->
    <patrol_z>123</patrol_z> <!-- Wspó³rzêdna œrodka obszaru patrolu. -->
    <patrol__tylny_promieñ>123</patrol__tylny_promieñ> <!-- Promieñ patrolu na ty³ach. -->
    <patrol__tylny_x>123</patrol__tylny_x> <!-- Wspó³rzêdna œrodka obszaru patrolu na ty³ach (np. dla lotniskowców). -->
    <patrol__tylny_z>123</patrol__tylny_z> <!-- Wspó³rzêdna œrodka obszaru patrolu na ty³ach (np. dla lotniskowców, l¹dowanie samolotów na 'l¹dzie'). -->
    <z>123</z> <!-- Odstêp od œrodka planszy (-) przód (+) ty³. -->
  </grupa_1>

  <grupa_2>
    <korekta_obrót>123</korekta_obrót>
    <korekta_x>123</korekta_x>
    <korekta_z>-123</korekta_z>
    <odstêp_x>123</odstêp_x>
    <patrol_promieñ>123</patrol_promieñ>
    <patrol_x>123</patrol_x>
    <patrol_z>123</patrol_z>
    <patrol__tylny_promieñ>123</patrol__tylny_promieñ>
    <patrol__tylny_x>123</patrol__tylny_x>
    <patrol__tylny_z>123</patrol__tylny_z>
    <z>-123</z>
  </grupa_2>
</statki_pozycja_pocz¹tkowa>
}
  {$endregion 'Przyk³ad xml.'}


  if czy_serwer_g then
    Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__wspó³czynniki_inne_c, -99, '' );

end;//---//Statki_Pozycje_Pocz¹tkowe_ComboBoxChange().

//Statki_Pozycje_Pocz¹tkowe__Brak_BitBtnClick().
procedure TStatki_Form.Statki_Pozycje_Pocz¹tkowe__Brak_BitBtnClick( Sender: TObject );
begin

  Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex := -1;
  //Statki_Pozycje_Pocz¹tkowe_Opis_Memo.Text := 'Opis pozycji pocz¹tkowej statków.';

  Statki_Pozycje_Pocz¹tkowe_ComboBoxChange( Sender ); // Aby podstawi³ wartoœci domyœlne.

end;//---//Statki_Pozycje_Pocz¹tkowe__Brak_BitBtnClick().

//Statki_Pozycje_Pocz¹tkowe__Odœwie¿_Wskazany_BitBtnClick().
procedure TStatki_Form.Statki_Pozycje_Pocz¹tkowe__Odœwie¿_Wskazany_BitBtnClick( Sender: TObject );
begin

  if   ( czy_klient_g )
    or ( Statki_Pozycje_Pocz¹tkowe_ComboBox.Items.Count < 0 )
    or ( Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex < 0 )
    or (  Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex > Length( statki_pozycje_pocz¹tkowe_lista_t ) - 1  ) then
    Exit;


  Wczytaj_Schemat_Xml( katalog__schematy_lista__statki_pozycje_pocz¹tkowe_c, Statki_Pozycje_Pocz¹tkowe_ComboBox.ItemIndex, statki_pozycje_pocz¹tkowe_lista_t );

  Statki_Pozycje_Pocz¹tkowe_ComboBoxChange( Sender );

end;//---//Statki_Pozycje_Pocz¹tkowe__Odœwie¿_Wskazany_BitBtnClick().

//Statki_Pozycje_Pocz¹tkowe__Wczytaj_Listê_BitBtnClick().
procedure TStatki_Form.Statki_Pozycje_Pocz¹tkowe__Wczytaj_Listê_BitBtnClick( Sender: TObject );
begin

  Statki_Pozycje_Pocz¹tkowe_Opis_Memo.Text := 'Opis pozycji pocz¹tkowej statków.';
  Wczytaj_Schemat_Xml( katalog__schematy_lista__statki_pozycje_pocz¹tkowe_c, -1, statki_pozycje_pocz¹tkowe_lista_t );

end;//---//Statki_Pozycje_Pocz¹tkowe__Wczytaj_Listê_BitBtnClick().

//Statki_Zaprezentuj_ButtonClick().
procedure TStatki_Form.Statki_Zaprezentuj_ButtonClick( Sender: TObject );
var
  czy_prezentowany_jest_pierwszy_statek : boolean;
  i,
  zti
    : integer;
  zts : string;
  zt_vector : GLS.VectorTypes.TVector4f;
begin

  // Prezentowanie statków z przesuniêciem w górê (Y > 0), w³¹czon¹ grawitacj¹ i bez pauzy sprawia, ¿e od razu wpadaj¹ pod wodê.

  czy_prezentowany_jest_pierwszy_statek := true;

  //Statki_Zwolnij(  false, Length( statki_t ) > 0  );
  Statki_Zwolnij( false, true );


  for i := 0 to Statek_ComboBox.Items.Count - 1 do
    if Statki_Zaprezentuj_CheckListBox.Checked[ i ] then
      begin

        zti := Length( statki_t );
        SetLength( statki_t, zti + 1 );
        statki_t[ zti ] := TStatek.Create(  Gra_Obiekty_GLDummyCube, Gra_GLCollisionManager, Efekt__Element_Uszkodzenie_Menad¿er__Zwróæ(), zti + 1, zti, Statek_Odczytaj_Schemat( i ), prymitywy_lista_t, Punkty_¯ycia_WskaŸnik__Material_Options_Ustal(), statek_create_funkcje_g, t³umaczenie_komunikaty_r  );
        statki_t[ zti ].id_grupa := 1; // Aby po odnowieniu statku (je¿eli nie trwa gra) poprawnie wczyta³ i ustawi³ statek.
        statki_t[ zti ].id_statek_schemat := i;
        statki_t[ zti ].obracaj_dzia³a := false;
        statki_t[ zti ].podnoœ_lufy := false;
        statki_t[ zti ].gracz__nazwa.Text := Statek_ComboBox.Items[ i ];
        statki_t[ zti ].Wygl¹d_Elementy__Noc_Zmieñ( dzieñ_jasnoœæ_g, Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBox.Checked, Wygl¹d_Elementy__Kolor_Noc_Zmieñ );
        statki_t[ zti ].Elementy_Gracza_Widocznoœæ( statki_t[ zti ].id_grupa, false );
        statki_t[ zti ].Elementy_Gracza_Dostosuj( Gracz_Grupa_SpinEdit.Value, Celownik_Bombowiec_Widocznoœæ_CheckBox.Checked, Gra_GLCamera.AbsolutePosition.Y < 0, L¹dowanie_U³atwione_CheckBox.Checked, false, Punkty_¯ycia_WskaŸnik__Przeciwnik_CheckBox.Checked, Punkty_¯ycia_WskaŸnik__Sojusznik_CheckBox.Checked, false, false, false );

        if statki_t[ zti ].czy_lotniskowiec then
          statki_t[ zti ].lotniskowiec__gotowy_na_przyjêcie_samolotu := not statki_t[ zti ].si_decyduje;

        if czy_prezentowany_jest_pierwszy_statek then
          statki_t[ zti ].Position.SetPoint( Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__X_SpinEdit.Value, Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__Y_SpinEdit.Value, Statki_Zaprezentuj__Pozycja_Pocz¹tkowa__Z_SpinEdit.Value )
        else//if czy_prezentowany_jest_pierwszy_statek then
          if not Statki_Zaprezentuj__Kolumna_CheckBox.Checked then
            statki_t[ zti ].Position.SetPoint( zt_vector.X + Statki_Zaprezentuj__Odstêpy_Miêdzy_Statkami_SpinEdit.Value, zt_vector.Y, zt_vector.Z )
          else//if not Statki_Zaprezentuj__Kolumna_CheckBox.Checked then
            statki_t[ zti ].Position.SetPoint( zt_vector.X, zt_vector.Y, zt_vector.Z + Statki_Zaprezentuj__Odstêpy_Miêdzy_Statkami_SpinEdit.Value );


        zt_vector := statki_t[ zti ].Position.AsVector;
        czy_prezentowany_jest_pierwszy_statek := false;


        if    ( statki_t[ zti ].czy_lotniskowiec )
          and ( Statek__Samolot_ComboBox.ItemIndex > 0 ) then // <brak>.
          begin

            zts := Statek__Samolot_Odczytaj_Schemat( Statek__Samolot_ComboBox.Items[ Statek__Samolot_ComboBox.ItemIndex ] );
            //zts := Statek_Odczytaj_Schemat(  Statek__Samolot_Odczytaj_Schemat_Indeks( Statek__Samolot_ComboBox.Items[ Statek__Samolot_ComboBox.ItemIndex ] )  );

            if Trim( zts ) <> '' then
              begin

                zti := Length( statki_t );
                SetLength( statki_t, zti + 1 );

                statki_t[ zti ] := TStatek.Create(  Gra_Obiekty_GLDummyCube, Gra_GLCollisionManager, Efekt__Element_Uszkodzenie_Menad¿er__Zwróæ(), zti, zti, zts, prymitywy_lista_t, Punkty_¯ycia_WskaŸnik__Material_Options_Ustal(), statek_create_funkcje_g, t³umaczenie_komunikaty_r  );
                statki_t[ zti ].id_grupa := 1; // Aby po odnowieniu statku (je¿eli nie trwa gra) poprawnie wczyta³o i ustawi³o statek.
                statki_t[ zti ].id_statek_schemat := Statek__Samolot_Odczytaj_Schemat_Indeks( Statek__Samolot_ComboBox.Items[ Statek__Samolot_ComboBox.ItemIndex ] ); // Aby po odnowieniu statku (je¿eli nie trwa gra) poprawnie wczyta³o i ustawi³o statek.
                statki_t[ zti ].gracz__nazwa.Text := '^ ' + Statek__Samolot_ComboBox.Items[ Statek__Samolot_ComboBox.ItemIndex ] + ' (' + Statek_ComboBox.Items[ i ] + ') ^';
                statki_t[ zti ].Wygl¹d_Elementy__Noc_Zmieñ( dzieñ_jasnoœæ_g, Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBox.Checked, Wygl¹d_Elementy__Kolor_Noc_Zmieñ );
                statki_t[ zti ].Elementy_Gracza_Widocznoœæ( statki_t[ zti ].id_grupa, false );
                statki_t[ zti ].Elementy_Gracza_Dostosuj( Gracz_Grupa_SpinEdit.Value, Celownik_Bombowiec_Widocznoœæ_CheckBox.Checked, Gra_GLCamera.AbsolutePosition.Y < 0, L¹dowanie_U³atwione_CheckBox.Checked, false, Punkty_¯ycia_WskaŸnik__Przeciwnik_CheckBox.Checked, Punkty_¯ycia_WskaŸnik__Sojusznik_CheckBox.Checked, false, false, false );

                statki_t[ zti ].czy_samolot := true;
                statki_t[ zti - 1 ].Samolot_Przyjmij( statki_t[ zti ], true );

              end;
            //---//if Trim( zts ) <> '' then

          end;
        //---//if    ( statki_t[ zti ].czy_lotniskowiec ) (...)

      end;
    //---//if Statki_Zaprezentuj_CheckListBox.Checked[ i ] then


  dŸwiêki__losowe_uruchomione__wszystkie__statki_g := false;

end;//---//Statki_Zaprezentuj_ButtonClick().

//Statki_Zaprezentuj__Zwolnij_BitBtnClick().
procedure TStatki_Form.Statki_Zaprezentuj__Zwolnij_BitBtnClick( Sender: TObject );
begin

  Statki_Zwolnij( false, true );

end;//---//Statki_Zaprezentuj__Zwolnij_BitBtnClick().

//Statki_ZaprezentujKeyDown().
procedure TStatki_Form.Statki_ZaprezentujKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
begin

  // Enter.
  if Key = 13 then
    begin

      Key := 0;
      Statki_Zaprezentuj_ButtonClick( Sender );

    end;
  //---//if Key = 13 then

end;//---//Statki_ZaprezentujKeyDown().

//Statki_Zaprezentuj_CheckListBoxKeyDown().
procedure TStatki_Form.Statki_Zaprezentuj_CheckListBoxKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
var
  i : integer;
begin

  if    ( Key = 65 ) // a.
    and ( Shift = [ ssCtrl ] ) then
    Statki_Zaprezentuj_CheckListBox.CheckAll( Vcl.StdCtrls.cbChecked, false, false );

  if    ( Key = 78 ) // n.
    and ( Shift = [ ssCtrl ] ) then
    Statki_Zaprezentuj_CheckListBox.CheckAll( Vcl.StdCtrls.cbUnchecked, false, false );

  if    ( Key = 79 ) // o.
    and ( Shift = [ ssCtrl ] ) then
    for i := 0 to Statki_Zaprezentuj_CheckListBox.Items.Count - 1 do
      Statki_Zaprezentuj_CheckListBox.Checked[ i ] := not Statki_Zaprezentuj_CheckListBox.Checked[ i ];

end;//---//Statki_Zaprezentuj_CheckListBoxKeyDown().

//Statystyki_Wypisz_ButtonClick().
procedure TStatki_Form.Statystyki_Wypisz_ButtonClick( Sender: TObject );
begin

  if czy_klient_g then
    Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__statystyki_wyœlij_c, -99, '' )
  else//if czy_klient_g then
    Gra_Statystyki_Wypisz( Statystyki_W_Logu_Wypisz_CheckBox.Checked );

  //PageControl1.ActivePage := Log_TabSheet;

end;//---//Statystyki_Wypisz_ButtonClick().

//Statystyki_StringGridClick().
procedure TStatki_Form.Statystyki_StringGridClick( Sender: TObject );
begin

  Statystyki_StringGrid.Invalidate();

end;//---//Statystyki_StringGridClick().

//Statystyki_StringGridFixedCellClick().
procedure TStatki_Form.Statystyki_StringGridFixedCellClick( Sender: TObject; ACol, ARow: Integer );
begin

  Statystyki_StringGrid.kolumna_sortowania_indeks := ACol;

  Gra_Statystyki_Wypisz( false );

  Statystyki_StringGrid.Invalidate();

end;//---//Statystyki_StringGridFixedCellClick().

//Statystyki_StringGridSelectCell().
procedure TStatki_Form.Statystyki_StringGridSelectCell( Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean );
begin

  Statystyki_Wiersz_Numer_Label.Caption := Trim(  FormatFloat( '### ### ##0', ARow )  ) + ' / ' + Trim(  FormatFloat( '### ### ##0', Statystyki_StringGrid.RowCount - 1 )  );

end;//---//Statystyki_StringGridSelectCell().

//Statystyki_StringGridDrawCell().
procedure TStatki_Form.Statystyki_StringGridDrawCell( Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState );
begin

  // Kolor wskazanego wiersza.
  if    ( ARow = TStringGrid(Sender).Row )
    and ( ACol > 0 ) then
    begin

      TStringGrid(Sender).Canvas.Brush.Color := kolor__niebieski_jasny_bardzo_c;
      TStringGrid(Sender).Canvas.FillRect( Rect );
      TStringGrid(Sender).Canvas.TextOut(   Rect.Left + 2, Rect.Top + Round( Rect.Height * 0.5 ) - Round(  TStringGrid(Sender).Canvas.TextHeight( 'I' ) * 0.5  ), TStringGrid(Sender).Cells[ ACol, ARow ]   );

    end;
  //---//if    ( ARow = TStringGrid(Sender).Row ) (...)


  // Grupa.
  if    ( ACol in [ 2, 4 ] ) // Grupa, statek.
    and ( ARow > 0 )
    and (  Trim( TStringGrid(Sender).Cells[ 2, ARow ] ) <> ''  ) then
    begin

      //if TStringGrid(Sender).Cells[ ACol, ARow ] = IntToStr( Gracz_Grupa_SpinEdit.Value ) then
      if TStringGrid(Sender).Cells[ 2, ARow ] = IntToStr( Gracz_Grupa_SpinEdit.Value ) then
        TStringGrid(Sender).Canvas.Brush.Color := clMoneyGreen
      else//if TStringGrid(Sender).Cells[ 2, ARow ] = IntToStr( Gracz_Grupa_SpinEdit.Value ) then
         TStringGrid(Sender).Canvas.Brush.Color := kolor__czerwony_jasny_c;

      TStringGrid(Sender).Canvas.FillRect( Rect );
      TStringGrid(Sender).Canvas.TextOut(   Rect.Left + 2, Rect.Top + Round( Rect.Height * 0.5 ) - Round(  TStringGrid(Sender).Canvas.TextHeight( 'I' ) * 0.5  ), TStringGrid(Sender).Cells[ ACol, ARow ]   );

    end;
  //---//if    ( ACol in [ 2, 4 ] ) (...)


  // Gracz.
  if    ( ACol in [ 0, 1, 3 ] ) // L. p., Identyfikator, nazwa.
    and ( ARow > 0 )
    and (  Trim( TStringGrid(Sender).Cells[ 1, ARow ] ) <> ''  )
    and ( Gracz_Identyfikator() <> -broñ_nie_obracana_c )
    and (  Trim( TStringGrid(Sender).Cells[ 1, ARow ] ) = IntToStr( Gracz_Identyfikator() )  ) then
    begin

      TStringGrid(Sender).Canvas.Brush.Color := clSkyBlue;
      TStringGrid(Sender).Canvas.FillRect( Rect );
      TStringGrid(Sender).Canvas.TextOut(   Rect.Left + 2, Rect.Top + Round( Rect.Height * 0.5 ) - Round(  TStringGrid(Sender).Canvas.TextHeight( 'I' ) * 0.5  ), TStringGrid(Sender).Cells[ ACol, ARow ]   );

    end;
  //---//if    ( ACol in [ 0, 1, 3 ] ) (...)


  // Statki, które nie zatonê³y (dzia³a tylko gdy przywracanie statków do gry jest nieaktywne podczas ca³ej bitwy).
  if    ( not Statki_Przywracaj_Do_Gry_CheckBox.Checked )
    and ( ACol in [ 18 ] ) // Zatoniêcia.
    and ( ARow > 2 )
    and (  Trim( TStringGrid(Sender).Cells[ 18, ARow ] ) <> '0'  ) then
    begin

      TStringGrid(Sender).Canvas.Brush.Color := clSilver;
      TStringGrid(Sender).Canvas.FillRect( Rect );
      TStringGrid(Sender).Canvas.TextOut(   Rect.Left + 2, Rect.Top + Round( Rect.Height * 0.5 ) - Round(  TStringGrid(Sender).Canvas.TextHeight( 'I' ) * 0.5  ), TStringGrid(Sender).Cells[ ACol, ARow ]   );

    end;
  //---//if    ( not Statki_Przywracaj_Do_Gry_CheckBox.Checked ) (...)


  // Kolor kolumny sortowania.
  if    ( Statystyki_StringGrid.kolumna_sortowania_indeks <> 0 )
    and ( ACol = Statystyki_StringGrid.kolumna_sortowania_indeks ) then
    begin

      TStringGrid(Sender).Canvas.Brush.Color := kolor__niebieski_jasny_bardzo_c;
      TStringGrid(Sender).Canvas.FillRect( Rect );
      TStringGrid(Sender).Canvas.TextOut(   Rect.Left + 2, Rect.Top + Round( Rect.Height * 0.5 ) - Round(  TStringGrid(Sender).Canvas.TextHeight( 'I' ) * 0.5  ), TStringGrid(Sender).Cells[ ACol, ARow ]   );

    end;
  //---//if    ( Statystyki_StringGrid.kolumna_sortowania_indeks <> 0 ) (...)

end;//---//Statystyki_StringGridDrawCell().

//Statek_Parametry_Ustaw().
procedure TStatki_Form.Statek_Parametry_Ustaw( Sender: TObject );
var
  czy_œwiat³a_w³¹czone_zmiana,
  czy_œwiat³a_dodatkowe_w³¹czone_zmiana,
  si__statek_gracza__p³ywa_kopia
    : boolean;
  i : integer;
  amunicja_zanurzenie_g³êbokoœæ_zadana_kopia : real;
  zt_statek : TStatek;
  si__statek_gracza__strzela_kopia : TSi__Statek_Gracza__Strzela;
begin

  // To samo w Statek_Samolot_Gracza_Prze³¹cz_l() w Klawisze_Obs³uga(), Statek_Parametry_Ustaw().

  if statek_parametry_ustaw__blokuj_g then
    Exit;

  if    ( Sender <> nil )
    and ( TComponent(Sender).Name = SI__P³ywa__Statek_Gracza_CheckBox.Name ) then
    zt_statek := statek_gracza
  else//if    ( Sender <> nil ) (...)
  if    ( Sender <> nil )
    and ( TComponent(Sender).Name = SI__P³ywa__Samolot_Gracza_CheckBox.Name ) then
    zt_statek := samolot__statek_gracza
  else//if    ( Sender <> nil ) (...)
    zt_statek := Statek_Gracza__Gracz_Tryb_Zwróæ();


  if   ( zt_statek = nil )
    or (  not Assigned( zt_statek )  ) then
    Exit;


  try
    amunicja_zanurzenie_g³êbokoœæ_zadana_kopia := String_To__Float( Amunicja__Zanurzenie_G³êbokoœæ_Zadana_Edit.Text );
  except
    amunicja_zanurzenie_g³êbokoœæ_zadana_kopia := -0.3;
  end;
  //---//try


  if Sender <> nil then // Aby podczas 'tworzenia' statków nie dodawa³ komunikatów dŸwiêkowych.
    begin

      if zt_statek.amunicja_zanurzenie_g³êbokoœæ_zadana <> amunicja_zanurzenie_g³êbokoœæ_zadana_kopia then
        DŸwiêki__Komunikat__Utwórz_Jeden( dkr_Amunicja__Zanurzenie_G³êbokoœæ_Zadana, amunicja_zanurzenie_g³êbokoœæ_zadana_kopia );

      if zt_statek.amunicja_rodzaj_wybrana__artyleria <> ar_Artyleria_CheckBox.Checked then
        DŸwiêki__Komunikat__Utwórz_Jeden( dkr_Amunicja__Rodzaj, Typy_Wspolne.ar_Artyleria, integer(ar_Artyleria_CheckBox.Checked) );

      if zt_statek.amunicja_rodzaj_wybrana__bomba_g³êbinowa <> ar_Bomba_G³êbinowa_CheckBox.Checked then
        DŸwiêki__Komunikat__Utwórz_Jeden( dkr_Amunicja__Rodzaj, Typy_Wspolne.ar_Bomba_G³êbinowa, integer(ar_Bomba_G³êbinowa_CheckBox.Checked) );

      if zt_statek.amunicja_rodzaj_wybrana__je¿e_g³êbinowe <> ar_Je¿e_G³êbinowe_CheckBox.Checked then
        DŸwiêki__Komunikat__Utwórz_Jeden( dkr_Amunicja__Rodzaj, Typy_Wspolne.ar_Je¿e_G³êbinowe, integer(ar_Je¿e_G³êbinowe_CheckBox.Checked) );

      if zt_statek.amunicja_rodzaj_wybrana__pocisk <> ar_Pocisk_CheckBox.Checked then
        DŸwiêki__Komunikat__Utwórz_Jeden( dkr_Amunicja__Rodzaj, Typy_Wspolne.ar_Pocisk, integer(ar_Pocisk_CheckBox.Checked) );

      if zt_statek.amunicja_rodzaj_wybrana__torpeda <> ar_Torpeda_CheckBox.Checked then
        DŸwiêki__Komunikat__Utwórz_Jeden( dkr_Amunicja__Rodzaj, Typy_Wspolne.ar_Torpeda, integer(ar_Torpeda_CheckBox.Checked) );

      if zt_statek.amunicja_rodzaj_wybrana__wszystkie <> ar_Wszystkie_CheckBox.Checked then
        DŸwiêki__Komunikat__Utwórz_Jeden( dkr_Amunicja__Rodzaj, Typy_Wspolne.ar_Wszystkie, integer(ar_Wszystkie_CheckBox.Checked) );

    end;
  //---//if Sender <> nil then


  zt_statek.amunicja_zanurzenie_g³êbokoœæ_zadana := amunicja_zanurzenie_g³êbokoœæ_zadana_kopia;
  zt_statek.amunicja_rodzaj_wybrana__artyleria := ar_Artyleria_CheckBox.Checked;
  zt_statek.amunicja_rodzaj_wybrana__bomba_g³êbinowa := ar_Bomba_G³êbinowa_CheckBox.Checked;
  zt_statek.amunicja_rodzaj_wybrana__je¿e_g³êbinowe := ar_Je¿e_G³êbinowe_CheckBox.Checked;
  zt_statek.amunicja_rodzaj_wybrana__pocisk := ar_Pocisk_CheckBox.Checked;
  zt_statek.amunicja_rodzaj_wybrana__torpeda := ar_Torpeda_CheckBox.Checked;
  zt_statek.amunicja_rodzaj_wybrana__wszystkie := ar_Wszystkie_CheckBox.Checked;
  zt_statek.celowanie__bronie_osobno := Celowanie__Bronie_Osobno_CheckBox.Checked;

  if Celowanie__Tryb_RadioGroup.ItemIndex = 0 then // równoleg³y.
    zt_statek.celowanie__tryb := ct_Linia // Namierzanie równoleg³e do linii celowania.
  else//if Celowanie__Tryb_RadioGroup.ItemIndex = 0 then
    zt_statek.celowanie__tryb := ct_Punkt; // Namierzanie zbie¿ne do punktu celowania.

  zt_statek.celownicze_linie_unoœ := Celownicze_Linie_Unoœ_CheckBox.Checked;

  //zt_statek.celowanie_precyzja__falowanie_niwelowanie := Celowanie_Precyzja__Falowanie_Niwelowanie_SpinEdit.Value;
  zt_statek.celowanie_precyzja__obrót := Celowanie_Precyzja__Obrót_SpinEdit.Value;
  zt_statek.celowanie_precyzja__podniesienie := Celowanie_Precyzja__Podniesienie_SpinEdit.Value;

  czy_œwiat³a_w³¹czone_zmiana := zt_statek.œwiat³a_w³¹czone <> Œwiat³a_CheckBox.Checked;
  zt_statek.œwiat³a_w³¹czone := Œwiat³a_CheckBox.Checked;

  czy_œwiat³a_dodatkowe_w³¹czone_zmiana := zt_statek.œwiat³a_dodatkowe_w³¹czone <> Œwiat³a_Dodatkowe_CheckBox.Checked;
  zt_statek.œwiat³a_dodatkowe_w³¹czone := Œwiat³a_Dodatkowe_CheckBox.Checked;

  zt_statek.zanurzenie_zadane_przekraczaj_100_procent := Zanurzenie_Zadane_Przekraczaj_100_Procent_CheckBox.Checked;

  zt_statek.Amunicja_Rodzaj_Zbiór_Wyznacz();


  // SI.
  si__statek_gracza__p³ywa_kopia := zt_statek.si__statek_gracza__p³ywa;
  si__statek_gracza__strzela_kopia := zt_statek.si__statek_gracza__strzela;

  if    ( zt_statek.czy_samolot )
    and ( SI__P³ywa__Samolot_Gracza_CheckBox.Enabled ) then // Gracz ma statek i samolot.
    zt_statek.si__statek_gracza__p³ywa := SI__P³ywa__Samolot_Gracza_CheckBox.Checked
  else//if    ( zt_statek.czy_samolot ) (...)
    zt_statek.si__statek_gracza__p³ywa := SI__P³ywa__Statek_Gracza_CheckBox.Checked;

  zt_statek.si__statek_gracza__strzela := TSi__Statek_Gracza__Strzela(SI__Strzela__Statek_Gracza_RadioGroup.ItemIndex + 1);

  SI__Statek_Gracza__Sterowanie_Ustaw( zt_statek, si__statek_gracza__p³ywa_kopia, si__statek_gracza__strzela_kopia );


  // Je¿eli gracz ma statek i samolot to taka sama wartoœæ jest ustawiana do obu.
  for i := 0 to Length( statki_t ) - 1 do
    if    ( statki_t[ i ] <> nil )
      and ( statki_t[ i ].id_statek <> zt_statek.id_statek )
      and ( statki_t[ i ].id_gracz = zt_statek.id_gracz )
      and ( statki_t[ i ].si__statek_gracza__strzela <> zt_statek.si__statek_gracza__strzela ) then
      begin

        statki_t[ i ].si__statek_gracza__strzela := zt_statek.si__statek_gracza__strzela;

        SI__Statek_Gracza__Sterowanie_Ustaw( statki_t[ i ], statki_t[ i ].si__statek_gracza__p³ywa, sisgs_Brak ); // sisgs_Brak - wartoœæ niemo¿liwa do wybrania w SI__Strzela__Statek_Gracza_RadioGroup.

      end;
    //---//if    ( statki_t[ i ] <> nil ) (...)
  //---// SI.


  if czy_klient_g then
    begin

      Wieloosobowe_Klawisze_Obs³uga_Parametry_Odczytaj( Sender );

      Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__statek__klawisze_obs³uga_c, -99, '' );

    end;
  //---//if czy_klient_g then


  if   ( czy_œwiat³a_w³¹czone_zmiana )
    or ( czy_œwiat³a_dodatkowe_w³¹czone_zmiana ) then
    Wygl¹d_Elementy__Noc_Zmieñ();


  if    ( czy_œwiat³a_w³¹czone_zmiana )
    and ( not zt_statek.œwiat³a_w³¹czone ) then
    zt_statek.Œwiat³a_Miganie__OpóŸnienia_Losowe_Resetuj__Statek( false );

  if    ( czy_œwiat³a_dodatkowe_w³¹czone_zmiana )
    and ( not zt_statek.œwiat³a_dodatkowe_w³¹czone ) then
    zt_statek.Œwiat³a_Miganie__OpóŸnienia_Losowe_Resetuj__Statek( true );

end;//---//Statek_Parametry_Ustaw().

//Statek_ComboBoxChange().
procedure TStatki_Form.Statek_ComboBoxChange( Sender: TObject );
begin

  if   ( Statek_ComboBox.Items.Count < 0 )
    or ( Statek_ComboBox.ItemIndex < 0 )
    or (  Statek_ComboBox.ItemIndex > Length( statki_lista_t ) - 1  )
    or ( not Statek_ComboBox.Enabled ) then // Aby nie zmieniaæ statku gdy nie jest to wskazane (np. wczytanie ustawieñ podczas gry).
    Exit;


  Statek_Opis_Memo.Text := StringReplace( statki_lista_t[ Statek_ComboBox.ItemIndex ].opis__sl, nowa_linia_c, #13 + #10, [ rfReplaceAll ] );

  if statki_lista_t[ Statek_ComboBox.ItemIndex ].czy_lotniskowiec__sl then
    Statek__Samolot_ComboBox.Color := clWindow
  else//if statki_lista_t[ Statek_ComboBox.ItemIndex ].czy_lotniskowiec__sl then
    Statek__Samolot_ComboBox.Color := clSilver;

end;//---//Statek_ComboBoxChange().

//Statek_ComboBoxKeyDown().
procedure TStatki_Form.Statek_ComboBoxKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
begin

  // Enter.
  if Key = 13 then
    begin

      Key := 0;

      if Statek_GroupBox.Enabled then
        Statek__Utwórz_BitBtnClick( nil )
      else//if Statek_GroupBox.Enabled then
        if    ( Schemat_Samolot_Zmieñ_BitBtn.Enabled )
          and ( Sender <> nil )
          and ( TComponent(Sender).Name = Statek__Samolot_ComboBox.Name ) then
          Schemat_Samolot_Zmieñ_BitBtnClick( Sender );

    end;
  //---//if Key = 13 then

end;//---//Statek_ComboBoxKeyDown().

//Statek__Komunikat_B³êdu_Pomiñ_CheckBoxClick().
procedure TStatki_Form.Statek__Komunikat_B³êdu_Pomiñ_CheckBoxClick( Sender: TObject );
begin

  statek_create_funkcje_g.statek__komunikat_b³êdu_pomiñ := Statek__Komunikat_B³êdu_Pomiñ_CheckBox.Checked;

end;//---//Statek__Komunikat_B³êdu_Pomiñ_CheckBoxClick().

//Statek__Odœwie¿_Wskazany_BitBtnClick().
procedure TStatki_Form.Statek__Odœwie¿_Wskazany_BitBtnClick( Sender: TObject );
begin

  if   ( czy_klient_g )
    or ( Statek_ComboBox.Items.Count < 0 )
    or ( Statek_ComboBox.ItemIndex < 0 )
    or (  Statek_ComboBox.ItemIndex > Length( statki_lista_t ) - 1  ) then
    Exit;


  Wczytaj_Schemat_Xml( katalog__schematy_lista__statki_c, Statek_ComboBox.ItemIndex, statki_lista_t );

  Statek_ComboBoxChange( Sender );

end;//---//Statek__Odœwie¿_Wskazany_BitBtnClick().

//Statek__Opis_BitBtnClick().
procedure TStatki_Form.Statek__Opis_BitBtnClick( Sender: TObject );
var
  zts : string;
begin

  zts := '';

  if statek_gracza <> nil then
    zts := statek_gracza.Parametry_Odczytaj( t³umaczenie_komunikaty_r, true );

  if samolot__statek_gracza <> nil then
    begin

      if Trim( zts ) <> '' then
        zts := zts +
          #13 + #10 +
          #13 + #10 +
          #13 + #10;

      zts := zts +
      '[' + t³umaczenie_komunikaty_r.s³owo__samolot + ']' + #13 + #10 +
      samolot__statek_gracza.Parametry_Odczytaj( t³umaczenie_komunikaty_r, true );

    end;
  //---//if samolot__statek_gracza <> nil then


  if Trim( zts ) <> '' then
    Komunikat_Wyœwietl( zts )
  else//if Trim( zts ) <> '' then
    Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nale¿y_utworzyæ_statek, t³umaczenie_komunikaty_r.komunikat__informacja, MB_OK + MB_ICONEXCLAMATION );

end;//---//Statek__Opis_BitBtnClick().

//Statek__Utwórz_BitBtnClick().
procedure TStatki_Form.Statek__Utwórz_BitBtnClick( Sender: TObject );
var
  zti : integer;
  zts : string;
begin

  if    ( not czy_klient_g )
    and ( Statek__Komunikat_B³êdu_Pomiñ_CheckBox.Checked ) then
    Statek__Odœwie¿_Wskazany_BitBtnClick( Sender );


  Statki_Zwolnij( true, false );

  DŸwiêki__L¹dów__Zwolnij_Wszystkie( false, true );


  zti := Length( statki_t );
  SetLength( statki_t, zti + 1 );

  statki_t[ zti ] := TStatek.Create(  Gra_Obiekty_GLDummyCube, Gra_GLCollisionManager, Efekt__Element_Uszkodzenie_Menad¿er__Zwróæ(), 0, 0, Statek_Odczytaj_Schemat( Statek_ComboBox.ItemIndex ), prymitywy_lista_t, Punkty_¯ycia_WskaŸnik__Material_Options_Ustal(), statek_create_funkcje_g, t³umaczenie_komunikaty_r  );
  statki_t[ zti ].id_grupa := Gracz_Grupa_SpinEdit.Value; // Aby po odnowieniu statku (je¿eli nie trwa gra) poprawnie wczyta³o i ustawi³o statek. Aby u klienta w³asny pasek punktów ¿ycia nie by³ czerwony.
  statki_t[ zti ].id_statek_schemat := Statek_ComboBox.ItemIndex; // Aby po odnowieniu statku (je¿eli nie trwa gra) poprawnie wczyta³o i ustawi³o statek.
  statki_t[ zti ].Wygl¹d_Elementy__Noc_Zmieñ( dzieñ_jasnoœæ_g, Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBox.Checked, Wygl¹d_Elementy__Kolor_Noc_Zmieñ );

  if statki_t[ zti ].czy_lotniskowiec then
    statki_t[ zti ].lotniskowiec__gotowy_na_przyjêcie_samolotu := not statki_t[ zti ].si_decyduje;

  statek_gracza := statki_t[ zti ];


  if    ( statek_gracza.czy_lotniskowiec )
    and ( Statek__Samolot_ComboBox.ItemIndex > 0 ) then // <brak>.
    begin

      zts := Statek__Samolot_Odczytaj_Schemat( Statek__Samolot_ComboBox.Items[ Statek__Samolot_ComboBox.ItemIndex ] );
      //zts := Statek_Odczytaj_Schemat(  Statek__Samolot_Odczytaj_Schemat_Indeks( Statek__Samolot_ComboBox.Items[ Statek__Samolot_ComboBox.ItemIndex ] )  );

      if Trim( zts ) <> '' then
        begin

          zti := Length( statki_t );
          SetLength( statki_t, zti + 1 );

          statki_t[ zti ] := TStatek.Create(  Gra_Obiekty_GLDummyCube, Gra_GLCollisionManager, Efekt__Element_Uszkodzenie_Menad¿er__Zwróæ(), 0, 100, zts, prymitywy_lista_t, Punkty_¯ycia_WskaŸnik__Material_Options_Ustal(), statek_create_funkcje_g, t³umaczenie_komunikaty_r  );
          statki_t[ zti ].id_grupa := Gracz_Grupa_SpinEdit.Value; // Aby po odnowieniu statku (je¿eli nie trwa gra) poprawnie wczyta³o i ustawi³o statek. Aby u klienta w³asny pasek punktów ¿ycia nie by³ czerwony.
          statki_t[ zti ].id_statek_schemat := Statek__Samolot_Odczytaj_Schemat_Indeks( Statek__Samolot_ComboBox.Items[ Statek__Samolot_ComboBox.ItemIndex ] ); // Aby po odnowieniu statku (je¿eli nie trwa gra) poprawnie wczyta³o i ustawi³o statek.
          statki_t[ zti ].gracz__nazwa.Text := '^ ' + statki_t[ zti ].gracz__nazwa.Text + ' ^';
          statki_t[ zti ].Wygl¹d_Elementy__Noc_Zmieñ( dzieñ_jasnoœæ_g, Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBox.Checked, Wygl¹d_Elementy__Kolor_Noc_Zmieñ );

          samolot__statek_gracza := statki_t[ zti ];

          statki_t[ zti ].czy_samolot := true;
          statek_gracza.Samolot_Przyjmij( statki_t[ zti ], true );

        end;
      //---//if Trim( zts ) <> '' then

    end;
  //---//if    ( statek_gracza.czy_lotniskowiec ) (...)


  Celowanie_ParametryClick( Sender );


  if Projektowy_Tryb_CheckBox.Checked then
    projektowy_tryb__statek := statek_gracza;

  Interfejs_Parametry_Wed³ug_Statku_Ustaw();

  if not Statek__Komunikat_B³êdu_Pomiñ_CheckBox.Checked then
    Kamera_Na_Statek_Gracza_Ustaw();


  Elementy_Gracza_Dostosuj_CheckBoxClick( Sender );


  if czy_klient_g then
    begin

      if statek_gracza <> nil then
        statek_gracza.Elementy_Gracza_Widocznoœæ( Gracz_Grupa_SpinEdit.Value, false ); // Aby po zakoñczeniu gry u klienta nie by³o widaæ linii celowniczych.

      if samolot__statek_gracza <> nil then
        samolot__statek_gracza.Elementy_Gracza_Widocznoœæ( Gracz_Grupa_SpinEdit.Value, false ); // Aby po zakoñczeniu gry u klienta nie by³o widaæ linii celowniczych.


      Elementy_Gracza_Dostosuj_CheckBoxClick( Sender ); // Aby poprawnie ustawiæ lufy_t[ i ].prze³adowanie_wskaŸnik.

    end;
  //---//if czy_klient_g then


  Statki__Punkty_¯ycia_WskaŸnik__Efekty_Tryb_Ustaw();


  dŸwiêki__losowe_uruchomione__wszystkie__statki_g := false;

end;//---//Statek__Utwórz_BitBtnClick().

//Statek__Wczytaj_Listê_BitBtnClick().
procedure TStatki_Form.Statek__Wczytaj_Listê_BitBtnClick( Sender: TObject );
begin

  Statek_Opis_Memo.Text := 'Opis statku.';
  Wczytaj_Schemat_Xml( katalog__schematy_lista__statki_c, -1, statki_lista_t );

end;//---//Statek__Wczytaj_Listê_BitBtnClick().

//Statek__Zwolnij_BitBtn1Click().
procedure TStatki_Form.Statek__Zwolnij_BitBtnClick( Sender: TObject );
begin

  Statki_Zwolnij( true, false );

end;//---//Statek__Zwolnij_BitBtn1Click().

//Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBoxClick().
procedure TStatki_Form.Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBoxClick( Sender: TObject );
begin

  Wygl¹d_Elementy__Noc_Zmieñ();


  if not Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBox.Checked then
    Œwiat³a_Miganie__OpóŸnienia_Losowe_Resetuj__L¹d();

end;//---//Œwiat³a_Miganie__Funkcjonalnoœæ_Aktywna_CheckBoxClick().

//T³umaczenia_ComboBoxKeyDown().
procedure TStatki_Form.T³umaczenia_ComboBoxKeyDown( Sender: TObject; var Key: Word; Shift: TShiftState );
begin

  // Enter.
  if Key = 13 then
    begin

      Key := 0;
      T³umaczenie__Zastosuj();

    end;
  //---//if Key = 13 then

end;//---//T³umaczenia_ComboBoxKeyDown().

//T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBoxClick().
procedure TStatki_Form.T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBoxClick( Sender: TObject );
begin

  T³umaczenie__Zastosuj();

end;//---//T³umaczenie__T³umacz_Polecenia_Dla_SI_CheckBoxClick().

//Ustawienia_Zapisz_ButtonClick().
procedure TStatki_Form.Ustawienia_Zapisz_ButtonClick( Sender: TObject );
begin

  if Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__czy_zapisaæ_ustawienia, t³umaczenie_komunikaty_r.komunikat__potwierdzenie, MB_YESNO + MB_DEFBUTTON2 + MB_ICONQUESTION ) <> IDYES then
    Exit;

  Ustawienia_Plik( false, true );

end;//---//Ustawienia_Zapisz_ButtonClick().

//Ustawienia_Wczytaj_ButtonClick().
procedure TStatki_Form.Ustawienia_Wczytaj_ButtonClick( Sender: TObject );
begin

  Ustawienia_Plik( true );

end;//---//Ustawienia_Wczytaj_ButtonClick().

//Wiatr__Si³a_SpinEditChange().
procedure TStatki_Form.Wiatr__Si³a_SpinEditChange( Sender: TObject );
var
  wieloosobowe__efekt_r_l : TObiekty_Wieloosobowe__Efekt_r;
begin

  if    ( Wiatr_CheckBox.Checked )
    and ( Wiatr__Zmiana_Tryb_RadioGroup.ItemIndex = 2 ) // w. zadana
    and ( not czy_klient_g ) then
    begin

      wiatr_vector_g.W := Wiatr__Si³a_SpinEdit.Value;

      // Aby ustaliæ kierunek wiatru.
      if    ( wiatr_vector_g.X = 0 )
        and ( wiatr_vector_g.Y = 0 )
        and ( wiatr_vector_g.Z = 0 ) then
        begin

          wiatr__czas_przeliczenia_ostatniego_sekundy_i_g := -wiatr__przeliczenie_sekundy_g;
          Wiatr__Wylicz( false ); // U klienta ka¿da zmiana wartoœci doda efekt dŸwiêkowy, a w pozosta³ych trybach gry nie.

        end
      else//if    ( wiatr_vector_g.X = 0 ) (...)
        if czy_serwer_g then
          begin

            wieloosobowe__efekt_r_l.pozycja_ef__owo := wiatr_vector_g;
            //Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__wiatr_c, -99, xNx__Wiatr__Wartoœæ_Do_Napisu() );
            Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__wiatr_c, -99, wieloosobowe__efekt_r_l );

          end;
        //---//if czy_serwer_g th

    end;
  //---//if    ( Wiatr_CheckBox.Checked ) (...)


  Radar_Wiatr_Kierunek_Linia_GLLines.Visible :=
        Wiatr_CheckBox.Checked
    and Wiatr__Kierunek_Wyœwietlaj_Na__Radarze_CheckBox.Checked;

  if not Wiatr_CheckBox.Checked then
    begin

      wiatr_vector_g := GLS.VectorGeometry.VectorMake( 0, 0, 0, 0 );

      Radar_Wiatr_Kierunek_Linia_GLLines.Nodes[ 1 ].Z := 0;

    end;
  //---//if not Wiatr_CheckBox.Checked then


  if    ( Sender <> nil )
    and ( TComponent(Sender).Name = Wiatr_CheckBox.Name ) then
    begin

      Wspó³czynniki_Inne_Click( Sender );

      if czy_serwer_g then
        begin

          wieloosobowe__efekt_r_l.pozycja_ef__owo := wiatr_vector_g;
          //Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__wiatr_c, -99, xNx__Wiatr__Wartoœæ_Do_Napisu() );
          Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__wiatr_c, -99, wieloosobowe__efekt_r_l );

        end;
      //---//if czy_serwer_g th

    end;
  //---//if    ( Sender <> nil ) (...)

end;//---//Wiatr__Si³a_SpinEditChange().

//Wieloosobowe__Od³¹cz_BitBtnClick().
procedure TStatki_Form.Wieloosobowe__Od³¹cz_BitBtnClick( Sender: TObject );
begin

  Gra_Zakoñcz_BitBtnClick( Sender );

  Klient_IdTCP_Czyta_Timer.Enabled := false;
  Klient_IdUDP_Czyta_Timer.Enabled := false;
  Klient_Wysy³a_Timer.Enabled := false;

  Gra_Pauza_Button.Enabled := true;
  Gra_Rozpocznij_BitBtn.Enabled := true;
  Gra_Zakoñcz_BitBtn.Enabled := true;

  Gracz_Gotowoœæ_BitBtnClick( Gracz_Gotowoœæ_Nie_BitBtn );

  Gracz_Gotowoœæ_Nie_BitBtn.Enabled := false;
  Gracz_Gotowoœæ_Tak_BitBtn.Enabled := false;

  Interfejs_Aktywnoœæ_Ustaw__SI( false );


  if IdUDPClient1.Connected then
    IdUDPClient1.Disconnect();

  if IdUDPServer1.Active then
    IdUDPServer1.Active := false;


  // Najpierw IdTCPClient1.IOHandler.Opened potem IdTCPClient1.Connected.
  if    ( IdTCPClient1.IOHandler <> nil )
    and ( IdTCPClient1.IOHandler.Opened ) then // Gdy uszkodzi siê po³¹czenie pojawia siê b³¹d 'Connection Closed Gracefully' i nie mo¿na zamkn¹æ programu.
    IdTCPClient1.IOHandler.Close();

  if IdTCPClient1.Connected then
    IdTCPClient1.Disconnect(); // Tutaj dalej ma status IdTCPClient1.Connected = true je¿eli nie wywo³ano wczeœniej IdTCPClient1.IOHandler.Close().


  if IdTCPServer1.Active then
    begin

      czy_wy³¹czanie_serwera_g := true;
      Wieloosobowe__Tekst_Wyœlij( wieloosobowe__komenda__serwer_wy³¹cza_siê_c );

      Sleep( Klient_IdTCP_Czyta_Timer.Interval * 3 ); // Tak jest ustawiony zegar czytania klientów. //???

      //IdTCPServer1.Bindings.Clear();

      //tcp_klienci_lista_g.Usuñ_Wszystkich();
      udp_klienci_lista_g.Usuñ_Wszystkich();


      IdTCPServer1.Active := false;
      //czy_wysy³anie_trwa_g := false;

      //Wieloosobowe_Identyfikator_Edit.Text := '';
      //Wieloosobowe_Identyfikator_Gra_Label.Caption := '<' + t³umaczenie_komunikaty_r.s³owo__brak__ma³¹_liter¹ + '>';

    end;
  //---//if IdTCPServer1.Active then


  tcp_klienci_lista_g.Usuñ_Wszystkich(); // Czyœci równie¿ listê u klienta.
  //udp_klienci_lista_g.Usuñ_Wszystkich(); // Czyœci równie¿ listê u klienta.

  Wieloosobowe_Identyfikator_Edit.Text := ''; // Czyœci równie¿ u klienta.
  Wieloosobowe_Identyfikator_Gra_Label.Caption := '<' + t³umaczenie_komunikaty_r.s³owo__brak__ma³¹_liter¹ + '>';


  if czy_klient_g then
    begin

      mapa__klient_wartoœæ_g := '<?>';
      statki_pozycje_pocz¹tkowe__klient_wartoœæ_g := '<?>';
      statki_pozycje_pocz¹tkowe__klient_wartoœæ__wed³ug_mapy_g := false;

      Interfejs_Aktywnoœæ_Ustaw__Klient( true );

    end;
  //---//if czy_klient_g then


  czy_gra_lokalna_g := false;
  czy_serwer_g := false;
  czy_klient_g := false;

  klient__cadencer_current_time__korekta_o_czas_serwera_g := 0;


  Gracze_Lista_Roz³¹cz_Gracza_BitBtn.Enabled := true;
  Klienci_Od³¹cz_Wszystkich_BitBtn.Enabled := false;
  Wieloosobowe__Pod³¹cz_BitBtn.Enabled := true;
  Wieloosobowe__Tryb_RadioGroup.Enabled := true;

  Gracze_Lista_Odœwie¿();

end;//---//Wieloosobowe__Od³¹cz_BitBtnClick().

//Wieloosobowe__Pod³¹cz_BitBtnClick().
procedure TStatki_Form.Wieloosobowe__Pod³¹cz_BitBtnClick( Sender: TObject );
begin

  case Wieloosobowe__Tryb_RadioGroup.ItemIndex of
    0 : // Gra lokalna.
      begin

        czy_gra_lokalna_g := true;

      end;
    1 : // Klient.
      begin

        czy_serwer_g := false;
        czy_klient_g := true;
        czy_gra_lokalna_g := false;

      end;
    //---// 1
    2 : // Serwer.
      begin

        czy_serwer_g := true;
        czy_klient_g := false;
        czy_gra_lokalna_g := false;
        //czy_wysy³anie_trwa_g := false;

      end;
    //---// 2

    else//case Wieloosobowe__Tryb_RadioGroup.ItemIndex of
      begin

        czy_serwer_g := false;
        czy_klient_g := false;
        czy_gra_lokalna_g := false;
        //czy_wysy³anie_trwa_g := false;

      end;
    //---//
  end;
  //---//case Wieloosobowe__Tryb_RadioGroup.ItemIndex of


  Wieloosobowe__Tryb_RadioGroup.Enabled := false;
  Wieloosobowe__Pod³¹cz_BitBtn.Enabled := false;

  Gra_Rozpocznij_BitBtn.Enabled := true;

  Gracz_Gotowoœæ_Nie_BitBtn.Enabled := false;
  Gracz_Gotowoœæ_Tak_BitBtn.Enabled := true;

  klient__cadencer_current_time__korekta_o_czas_serwera_g := 0;


  if not czy_gra_lokalna_g then
    begin

      if Fale_CheckBox.Checked then
        begin

          // Je¿eli falowanie jest aktywne klienci bardzo wolno dzia³aj¹ (wy³¹czenie tej opcji na serwerze usprawnia dzia³anie klientów), zw³aszcza gdy pojawia siê wystrzelona amunicja.

          Fale_CheckBox.Checked := false;

          Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__falowanie_zosta³o_wy³¹czone___spowalnia_rozgrywkê_sieciow¹__z_niewiadomych_przyczyn_ );

        end;
      //---//if Fale_CheckBox.Checked then

      if Chmury_CheckBox.Checked then
        begin

          // Chmury te¿ jakoœ spowalniaj¹ grê wieloosobow¹.

          Chmury_CheckBox.Checked := false;

          Informacja_Dodatkowa_Dodaj( t³umaczenie_komunikaty_r.komunikat__falowanie_zosta³o_wy³¹czone___spowalnia_rozgrywkê_sieciow¹__z_niewiadomych_przyczyn_ );

        end;
      //---//if Chmury_CheckBox.Checked then


      IdTCPClient1.Host := Serwer_Adres_IP_Edit.Text;
      IdTCPClient1.Port := Serwer_Port_SpinEdit.Value;
      IdTCPClient1.ReadTimeout := 5; //???
      IdTCPServer1.DefaultPort := Serwer_Port_SpinEdit.Value;

    end;
  //---//if not czy_gra_lokalna_g then


  if   ( czy_serwer_g )
    or ( czy_gra_lokalna_g ) then
    begin

      if czy_serwer_g then
        begin

          czy_wy³¹czanie_serwera_g := false;

          Klienci_Od³¹cz_Wszystkich_BitBtn.Enabled := true;

          IdTCPServer1.Active := true;

        end;
      //---//if czy_serwer_g then


      tcp_klienci_lista_g.Dodaj_Aktualizuj( serwer_peer_port_c, -99 ); // Serwer ma peer_port_f i identyfikator_f = -1.
      Wieloosobowe_Identyfikator_Edit.Text := IntToStr( serwer_peer_port_c );
      Wieloosobowe_Identyfikator_Gra_Label.Caption := Wieloosobowe_Identyfikator_Edit.Text;

      Gracze_Lista_Odœwie¿();


      Gra_Zakoñcz_BitBtn.Enabled := false;
      Interfejs_Aktywnoœæ_Ustaw__SI( true );

    end;
  //---//if   ( czy_serwer_g ) (...)


  if czy_klient_g then
    begin

      Gra_Pauza_Button.Enabled := false;
      Gra_Rozpocznij_BitBtn.Enabled := false;
      Gra_Zakoñcz_BitBtn.Enabled := false;
      Gracze_Lista_Roz³¹cz_Gracza_BitBtn.Enabled := false;

      Interfejs_Aktywnoœæ_Ustaw__Klient( false );


      // Nawi¹zanie po³¹czenia.
      if not IdTCPClient1.Connected then
        begin

          try
            IdTCPClient1.Connect();
          except
            on E : Exception do
              begin
                Komunikat_Wyœwietl(
                    t³umaczenie_komunikaty_r.komunikat__nie_mo¿na_nawi¹zaæ_po³aczenia_z_serwerem__klient + ': ' + IdTCPClient1.Host + #13 +
                    E.Message + ' ' + IntToStr( E.HelpContext ) + '.', t³umaczenie_komunikaty_r.komunikat__b³¹d,
                    MB_OK + MB_ICONEXCLAMATION
                  );
              end;
            //---//on E : Exception do
          end;
          //---//try

        end;
      //---//if not IdTCPClient1.Connected then


      if    ( IdTCPClient1.IOHandler <> nil )
        and ( not IdTCPClient1.IOHandler.Opened ) then
        begin

          try
            IdTCPClient1.IOHandler.Open();
          except
            on E : Exception do
              begin
                Komunikat_Wyœwietl(
                    t³umaczenie_komunikaty_r.komunikat__nie_mo¿na_nawi¹zaæ_po³aczenia_z_serwerem__handler + ': ' + IdTCPClient1.Host + #13 +
                    E.Message + ' ' + IntToStr( E.HelpContext ) + '.', t³umaczenie_komunikaty_r.komunikat__b³¹d,
                    MB_OK + MB_ICONEXCLAMATION
                  );
              end;
            //---//on E : Exception do
          end;
          //---//try

        end;
      //---//if    ( IdTCPClient1.IOHandler <> nil ) (...)


      if    ( IdTCPClient1.Connected )
        and ( IdTCPClient1.IOHandler <> nil )
        and ( IdTCPClient1.IOHandler.Opened ) then
        begin

          SetLength( prymitywy_lista_t, 0 ); // Klient szybciej rozpoczyna grê ni¿ odbierze wszystkie dane.


          if Wieloosobowe_Identyfikator_Edit.Text = '' then
            Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__identyfikator__nadaj_c, -99, '' )
          else//if Wieloosobowe_Identyfikator_Edit.Text = '' then
            Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__identyfikator__przypomnij_c, -99, Wieloosobowe_Identyfikator_Edit.Text );


          Klient_IdTCP_Czyta_Timer.Enabled := true;

        end
      else//if    ( IdTCPClient1.Connected ) (...)
        begin

          Komunikat_Wyœwietl( t³umaczenie_komunikaty_r.komunikat__nie_uda³o_siê_po³¹czyæ_z_serwerem, t³umaczenie_komunikaty_r.komunikat__b³¹d, MB_OK + MB_ICONEXCLAMATION );
          Wieloosobowe__Od³¹cz_BitBtnClick( Sender );

        end;
      //---//if    ( IdTCPClient1.Connected ) (...)


      {$IFDEF DEBUG}
      Gracz_Nazwa_Edit.Text := Gracz_Nazwa_Edit.Text + 'k';
      {$ENDIF}

    end;
  //---//if czy_klient_g then

end;//---//Wieloosobowe__Pod³¹cz_BitBtnClick().

//Wieloosobowe__Tryb_RadioGroupClick().
procedure TStatki_Form.Wieloosobowe__Tryb_RadioGroupClick( Sender: TObject );
begin

  if    ( Wieloosobowe__Tryb_RadioGroup.ItemIndex = 0 ) // Brak.
    and ( Wieloosobowe__Tryb_RadioGroup.Enabled ) then // Je¿eli jest 'pod³¹czenie wieloosobowe / gra lokalna' i nastêpuje wczytanie t³umaczenia lub ustawieñ to nie 'zeruje' identyfikatora.
    begin

      Wieloosobowe_Identyfikator_Edit.Text := '';
      Wieloosobowe_Identyfikator_Gra_Label.Caption := '<' + t³umaczenie_komunikaty_r.s³owo__brak__ma³¹_liter¹ + '>';

    end;
  //---//if    ( Wieloosobowe__Tryb_RadioGroup.ItemIndex = 0 ) (...)

end;//---//Wieloosobowe__Tryb_RadioGroupClick().

//Wspó³czynniki_Inne_Click().
procedure TStatki_Form.Wspó³czynniki_Inne_Click( Sender: TObject );
begin

  if czy_serwer_g then
    Wieloosobowe__Strumieñ_Wyœlij( wieloosobowe__komenda__gra__wspó³czynniki_inne_c, -99, '' );

end;//---//Wspó³czynniki_Inne_Click().

//Zmieniaj_Automatycznie_CheckBoxClick().
procedure TStatki_Form.Zmieniaj_Automatycznie_CheckBoxClick( Sender: TObject );
begin

  if Sender <> nil then
    begin

      if TComponent(Sender).Name = Zmieniaj_Automatycznie__Mg³a_CheckBox.Name then
        Zmieniaj_Automatycznie__Mg³a_GLAsyncTimer.Enabled := Zmieniaj_Automatycznie__Mg³a_CheckBox.Checked
      else
      if TComponent(Sender).Name = Zmieniaj_Automatycznie__Morze_Wzburzenie_CheckBox.Name then
        Zmieniaj_Automatycznie__Morze_Wzburzenie_GLAsyncTimer.Enabled := Zmieniaj_Automatycznie__Morze_Wzburzenie_CheckBox.Checked
      else
      if TComponent(Sender).Name = Zmieniaj_Automatycznie__Noc_CheckBox.Name then
        Zmieniaj_Automatycznie__Noc_GLAsyncTimer.Enabled := Zmieniaj_Automatycznie__Noc_CheckBox.Checked;

    end;
  //---//if Sender <> nil then

end;//---//Zmieniaj_Automatycznie_CheckBoxClick().

//Zmieniaj_Automatycznie_GLAsyncTimerTimer().
procedure TStatki_Form.Zmieniaj_Automatycznie_GLAsyncTimerTimer( Sender: TObject );
var
  ztr : real;
  zts : string;
  zt_zmieniaj_automatycznie_check_box,
  zt_zmieniaj_automatycznie__kierunek_rosn¹co_check_box
    : TCheckBox;
  zt_intensywnoœæ_spin_edit,
  zt_zmieniaj_automatycznie__do_spin_edit,
  zt_zmieniaj_automatycznie__od_spin_edit,
  zt_zmieniaj_automatycznie__si³a_spin_edit,
  zt_zmieniaj_automatycznie__losowoœæ_spin_edit
    : TSpinEdit;
begin

  if Sender <> nil then
    begin

      if TComponent(Sender).Name = Zmieniaj_Automatycznie__Mg³a_GLAsyncTimer.Name then
        zts := 'Mg³a'
      else
      if TComponent(Sender).Name = Zmieniaj_Automatycznie__Morze_Wzburzenie_GLAsyncTimer.Name then
        zts := 'Morze_Wzburzenie'
      else
      if TComponent(Sender).Name = Zmieniaj_Automatycznie__Noc_GLAsyncTimer.Name then
        zts := 'Noc'
      else
        zts := '';

    end
  else//if Sender <> nil then
    Exit;


  if zts = '' then
    Exit;


  zt_intensywnoœæ_spin_edit := TSpinEdit(Self.FindComponent( zts + '_SpinEdit' ));
  zt_zmieniaj_automatycznie_check_box := TCheckBox(Self.FindComponent( 'Zmieniaj_Automatycznie__' + zts + '_CheckBox' ));
  zt_zmieniaj_automatycznie__kierunek_rosn¹co_check_box := TCheckBox(Self.FindComponent( 'Zmieniaj_Automatycznie__' + zts + '__Kierunek_Rosn¹co_CheckBox' ));
  zt_zmieniaj_automatycznie__do_spin_edit := TSpinEdit(Self.FindComponent( 'Zmieniaj_Automatycznie__' + zts + '__Do_SpinEdit' ));
  zt_zmieniaj_automatycznie__od_spin_edit := TSpinEdit(Self.FindComponent( 'Zmieniaj_Automatycznie__' + zts + '__Od_SpinEdit' ));
  zt_zmieniaj_automatycznie__si³a_spin_edit := TSpinEdit(Self.FindComponent( 'Zmieniaj_Automatycznie__' + zts + '__Si³a_SpinEdit' ));
  zt_zmieniaj_automatycznie__losowoœæ_spin_edit := TSpinEdit(Self.FindComponent( 'Zmieniaj_Automatycznie__' + zts + '__Losowoœæ_SpinEdit' ));


  if   ( zt_intensywnoœæ_spin_edit = nil )
    or ( zt_zmieniaj_automatycznie_check_box = nil )
    or ( zt_zmieniaj_automatycznie__kierunek_rosn¹co_check_box = nil )
    or ( zt_zmieniaj_automatycznie__do_spin_edit = nil )
    or ( zt_zmieniaj_automatycznie__od_spin_edit = nil )
    or ( zt_zmieniaj_automatycznie__si³a_spin_edit = nil )
    or ( zt_zmieniaj_automatycznie__losowoœæ_spin_edit = nil ) then
    Exit;


  if   ( zt_zmieniaj_automatycznie__do_spin_edit.Value = zt_zmieniaj_automatycznie__od_spin_edit.Value )
    or ( zt_zmieniaj_automatycznie__si³a_spin_edit.Value <= 0 ) then
    begin

      zt_zmieniaj_automatycznie_check_box.Checked := false;
      Exit;

    end;
  //---//if   ( zt_zmieniaj_automatycznie__do_spin_edit.Value = zt_zmieniaj_automatycznie__od_spin_edit.Value ) (...)


  if zt_zmieniaj_automatycznie__losowoœæ_spin_edit.Value > zt_zmieniaj_automatycznie__losowoœæ_spin_edit.MaxValue then
    zt_zmieniaj_automatycznie__losowoœæ_spin_edit.Value := zt_zmieniaj_automatycznie__losowoœæ_spin_edit.MaxValue
  else
  if zt_zmieniaj_automatycznie__losowoœæ_spin_edit.Value < zt_zmieniaj_automatycznie__losowoœæ_spin_edit.MinValue then
    zt_zmieniaj_automatycznie__losowoœæ_spin_edit.Value := zt_zmieniaj_automatycznie__losowoœæ_spin_edit.MinValue;


  ztr :=
      zt_zmieniaj_automatycznie__si³a_spin_edit.Value
    + zt_zmieniaj_automatycznie__si³a_spin_edit.Value * (  Random( zt_zmieniaj_automatycznie__losowoœæ_spin_edit.Value ) * 0.01  );


  if not zt_zmieniaj_automatycznie__kierunek_rosn¹co_check_box.Checked then
    ztr := -ztr;

  ztr := zt_intensywnoœæ_spin_edit.Value + ztr;


  if ztr >= zt_zmieniaj_automatycznie__do_spin_edit.Value then
    ztr := zt_zmieniaj_automatycznie__do_spin_edit.Value
  else
  if ztr <= zt_zmieniaj_automatycznie__od_spin_edit.Value then
    ztr := zt_zmieniaj_automatycznie__od_spin_edit.Value;


  if zts <> 'Noc' then
    if   ( ztr >= zt_zmieniaj_automatycznie__do_spin_edit.Value )
      or ( ztr <= zt_zmieniaj_automatycznie__od_spin_edit.Value )
      or ( ztr >= zt_intensywnoœæ_spin_edit.MaxValue )
      or ( ztr <= zt_intensywnoœæ_spin_edit.MinValue ) then
      zt_zmieniaj_automatycznie__kierunek_rosn¹co_check_box.Checked := not zt_zmieniaj_automatycznie__kierunek_rosn¹co_check_box.Checked;

  if   ( zt_intensywnoœæ_spin_edit.Value < zt_zmieniaj_automatycznie__od_spin_edit.Value )
    and ( not zt_zmieniaj_automatycznie__kierunek_rosn¹co_check_box.Checked ) then
    zt_zmieniaj_automatycznie__kierunek_rosn¹co_check_box.Checked := true
  else
  if   ( zt_intensywnoœæ_spin_edit.Value > zt_zmieniaj_automatycznie__do_spin_edit.Value )
    and ( zt_zmieniaj_automatycznie__kierunek_rosn¹co_check_box.Checked ) then
    zt_zmieniaj_automatycznie__kierunek_rosn¹co_check_box.Checked := false;


  zt_intensywnoœæ_spin_edit.Value := Round( ztr );

end;//---//Zmieniaj_Automatycznie_GLAsyncTimerTimer().

//Zmieniaj_Automatycznie_Szybkoœæ_SpinEditChange().
procedure TStatki_Form.Zmieniaj_Automatycznie_Szybkoœæ_SpinEditChange( Sender: TObject );
begin

  if    ( Sender <> nil )
    and ( Sender is TSpinEdit ) then
    begin

      //if TComponent(Sender).Name = Zmieniaj_Automatycznie__Mg³a__Szybkoœæ_SpinEdit.Name then
      //  Zmieniaj_Automatycznie__Mg³a_GLAsyncTimer.Interval := Zmieniaj_Automatycznie__Mg³a__Szybkoœæ_SpinEdit.Value
      //else
      //if TComponent(Sender).Name = Zmieniaj_Automatycznie__Morze_CheckBox.Name then
      //  Zmieniaj_Automatycznie__Morze_Wzburzenie_GLAsyncTimer.Interval := Zmieniaj_Automatycznie__Morze_Wzburzenie__Szybkoœæ_SpinEdit.Value
      //else
      //if TComponent(Sender).Name = Zmieniaj_Automatycznie__Noc_CheckBox.Name then
      //  Zmieniaj_Automatycznie__Noc_GLAsyncTimer.Interval := Zmieniaj_Automatycznie__Noc__Szybkoœæ_SpinEdit.Value;

      if TSpinEdit(Sender).Value < TSpinEdit(Sender).MinValue then
        TSpinEdit(Sender).Value := TSpinEdit(Sender).MinValue;

      if   ( TComponent(Sender).Name = Zmieniaj_Automatycznie__Mg³a__Szybkoœæ_SpinEdit.Name )
        or ( TComponent(Sender).Name = Zmieniaj_Automatycznie__Morze_Wzburzenie__Szybkoœæ_SpinEdit.Name )
        or ( TComponent(Sender).Name = Zmieniaj_Automatycznie__Noc__Szybkoœæ_SpinEdit.Name ) then
        Gra_Wspó³czynnik_Prêdkoœci_SpinEditChange( Zmieniaj_Automatycznie_GroupBox );

    end;
  //---//if    ( Sender <> nil ) (...)

end;//---//Zmieniaj_Automatycznie_Szybkoœæ_SpinEditChange().

//Zmieniaj_Automatycznie__Mg³a_GLAsyncTimerTimer().
procedure TStatki_Form.Zmieniaj_Automatycznie__Mg³a_GLAsyncTimerTimer( Sender: TObject );
var
  ztr : real;
begin

  if   ( Zmieniaj_Automatycznie__Mg³a__Do_SpinEdit.Value = Zmieniaj_Automatycznie__Mg³a__Od_SpinEdit.Value )
    or ( Zmieniaj_Automatycznie__Mg³a__Si³a_SpinEdit.Value <= 0 ) then
    begin

      Zmieniaj_Automatycznie__Mg³a_CheckBox.Checked := false;
      Exit;

    end;
  //---//if   ( Zmieniaj_Automatycznie__Mg³a__Do_SpinEdit.Value = Zmieniaj_Automatycznie__Mg³a__Od_SpinEdit.Value ) (...)


  if Zmieniaj_Automatycznie__Mg³a__Losowoœæ_SpinEdit.Value > Zmieniaj_Automatycznie__Mg³a__Losowoœæ_SpinEdit.MaxValue then
    Zmieniaj_Automatycznie__Mg³a__Losowoœæ_SpinEdit.Value := Zmieniaj_Automatycznie__Mg³a__Losowoœæ_SpinEdit.MaxValue
  else
  if Zmieniaj_Automatycznie__Mg³a__Losowoœæ_SpinEdit.Value < Zmieniaj_Automatycznie__Mg³a__Losowoœæ_SpinEdit.MinValue then
    Zmieniaj_Automatycznie__Mg³a__Losowoœæ_SpinEdit.Value := Zmieniaj_Automatycznie__Mg³a__Losowoœæ_SpinEdit.MinValue;


  ztr :=
      Zmieniaj_Automatycznie__Mg³a__Si³a_SpinEdit.Value
    + Zmieniaj_Automatycznie__Mg³a__Si³a_SpinEdit.Value * (  Random( Zmieniaj_Automatycznie__Mg³a__Losowoœæ_SpinEdit.Value ) * 0.01  ); // Nigdy nie da 100%


  if not Zmieniaj_Automatycznie__Mg³a__Kierunek_Rosn¹co_CheckBox.Checked then
    ztr := -ztr;

  ztr := Mg³a_SpinEdit.Value + ztr;


  if ztr >= Zmieniaj_Automatycznie__Mg³a__Do_SpinEdit.Value then
    ztr := Zmieniaj_Automatycznie__Mg³a__Do_SpinEdit.Value
  else
  if ztr <= Zmieniaj_Automatycznie__Mg³a__Od_SpinEdit.Value then
    ztr := Zmieniaj_Automatycznie__Mg³a__Od_SpinEdit.Value;


  if   ( ztr >= Zmieniaj_Automatycznie__Mg³a__Do_SpinEdit.Value )
    or ( ztr <= Zmieniaj_Automatycznie__Mg³a__Od_SpinEdit.Value )
    or ( ztr >= Mg³a_SpinEdit.MaxValue )
    or ( ztr <= Mg³a_SpinEdit.MinValue ) then
    Zmieniaj_Automatycznie__Mg³a__Kierunek_Rosn¹co_CheckBox.Checked := not Zmieniaj_Automatycznie__Mg³a__Kierunek_Rosn¹co_CheckBox.Checked;

  if   ( Mg³a_SpinEdit.Value < Zmieniaj_Automatycznie__Mg³a__Od_SpinEdit.Value )
    and ( not Zmieniaj_Automatycznie__Mg³a__Kierunek_Rosn¹co_CheckBox.Checked ) then
    Zmieniaj_Automatycznie__Mg³a__Kierunek_Rosn¹co_CheckBox.Checked := true
  else
  if   ( Mg³a_SpinEdit.Value > Zmieniaj_Automatycznie__Mg³a__Do_SpinEdit.Value )
    and ( Zmieniaj_Automatycznie__Mg³a__Kierunek_Rosn¹co_CheckBox.Checked ) then
    Zmieniaj_Automatycznie__Mg³a__Kierunek_Rosn¹co_CheckBox.Checked := false;


  Mg³a_SpinEdit.Value := Round( ztr );

end;//---//Zmieniaj_Automatycznie__Mg³a_GLAsyncTimerTimer().

procedure TStatki_Form.Button1Click(Sender: TObject);
begin

  // Do testów.
  //?????

end;

end.

{

...

Edit1KeyDown

Nie wykrywa
  Tab
  PrtScr
  przyciski myszy


Ctrl, Shift, Alt, Win, - nie rozró¿nia strony
Tab, Win, Alt, Menu myszy - wywo³uja w³asne akcje

***

Klawisze_Obs³uga
  Klawisze_Obs³uga__Statek()
  Klawisze_Obs³uga__Zachowanie_Ci¹g³e__Lokalne()
    Key : Word
    if Key = Ord( 'P' ) then
      VK_ESCAPE
      VK_SPACE
      Ord( 'P' )

Gra_GLSceneViewerMouseDown
  Klawisze_Obs³uga()
  if Projektowy_Tryb_CheckBox.Checked then


Gra_GLSceneViewerKeyDown
  Klawisze_Obs³uga()

Gra_GLCadencerProgress
  Klawisze_Obs³uga__Zachowanie_Ci¹g³e__Lokalne()

Wieloosobowe__Odczytaj
  Klawisze_Obs³uga__Statek()

***

  // Ponowne wczytanie tekstury fal.
  Fale_GLMaterialLibrary.Materials.Clear(); // Usuwa wszystkie tekstury.
  Fale_GLMaterialLibrary.AddTextureMaterial( woda_tekstura_nazwa_c, 'C:\K1\K2\Statki\Tekstury\Inne\woda.jpg' );
  
  if Fale_GLMaterialLibrary.Materials.GetLibMaterialByName( woda_tekstura_nazwa_c ) <> nil then
    Fale_GLMaterialLibrary.Materials.GetLibMaterialByName( woda_tekstura_nazwa_c ).Material.Texture.ImageBrightness := dzieñ_jasnoœæ_g;

...

Gra_GLSkyDome
Gra_GLCamera
(...)
Dno_Kolizje_GLCube
Fale_GLTerrainRenderer

}
